# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ACRPropertiesResponse',
    'AKSDeploymentPropertiesResponse',
    'AKSDeploymentSpecificationResponse',
    'ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesResponse',
    'ApacheTomcatAKSWorkloadDeploymentResponse',
    'ApacheTomcatWebApplicationResponse',
    'ApacheTomcatWorkloadInstanceModelCustomPropertiesResponse',
    'AppInsightMonitoringPropertiesResponse',
    'AssessmentPropertiesResponse',
    'AutomaticResolutionPropertiesResponse',
    'AutomationArtifactResponse',
    'AvailabilitySetResourceSettingsResponse',
    'AzureFileShareHydrationProfileResponse',
    'BindingResponse',
    'CertResponse',
    'CollectorAgentPropertiesBaseResponse',
    'CollectorAgentPropertiesResponse',
    'CollectorAgentSpnPropertiesBaseResponse',
    'CollectorBodyAgentSpnPropertiesResponse',
    'CollectorPropertiesResponse',
    'ContainerImagePropertiesResponse',
    'DatabaseProjectSummaryResponse',
    'DatabasesSolutionSummaryResponse',
    'DeployedResourcesPropertiesResponse',
    'DirectoryPathResponse',
    'DiskEncryptionSetResourceSettingsResponse',
    'EntityUptimeResponse',
    'GmsaAuthenticationPropertiesResponse',
    'GroupConnectivityInformationResponse',
    'GroupPropertiesResponse',
    'HealthErrorModelResponse',
    'IISAKSWorkloadDeploymentModelCustomPropertiesResponse',
    'IISAKSWorkloadDeploymentResponse',
    'IISApplicationDetailsResponse',
    'IISVirtualApplicationDetailsResponse',
    'IISWebApplicationResponse',
    'IISWebServerResponse',
    'IISWorkloadInstanceModelCustomPropertiesResponse',
    'IdentityModelResponse',
    'IdentityResponse',
    'ImportCollectorPropertiesResponse',
    'InnerHealthErrorModelResponse',
    'IpConfigurationResponse',
    'JobStatusResponse',
    'KeyVaultResourceSettingsResponse',
    'KeyVaultSecretStorePropertiesResponse',
    'LBBackendAddressPoolResourceSettingsResponse',
    'LBFrontendIPConfigurationResourceSettingsResponse',
    'LoadBalancerBackendAddressPoolReferenceResponse',
    'LoadBalancerNatRuleReferenceResponse',
    'LoadBalancerResourceSettingsResponse',
    'ManagedIdentityPropertiesResponse',
    'ManualResolutionPropertiesResponse',
    'MigrateAgentModelPropertiesResponse',
    'MigrateAgentModelResponseSystemData',
    'MigrateProjectPropertiesResponse',
    'MigrateProjectResponseTags',
    'MigrationConfigurationResponse',
    'ModernizeProjectModelPropertiesResponse',
    'ModernizeProjectModelResponseSystemData',
    'MoveCollectionPropertiesResponse',
    'MoveCollectionPropertiesResponseErrors',
    'MoveResourceDependencyOverrideResponse',
    'MoveResourceDependencyResponse',
    'MoveResourceErrorBodyResponse',
    'MoveResourceErrorResponse',
    'MoveResourcePropertiesResponse',
    'MoveResourcePropertiesResponseErrors',
    'MoveResourcePropertiesResponseMoveStatus',
    'NetworkInterfaceResourceSettingsResponse',
    'NetworkSecurityGroupResourceSettingsResponse',
    'NicIpConfigurationResourceSettingsResponse',
    'NsgReferenceResponse',
    'NsgSecurityRuleResponse',
    'OperatingSystemDetailsResponse',
    'PortMappingResponse',
    'PrivateEndpointConnectionPropertiesResponse',
    'PrivateEndpointConnectionProxyPropertiesResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointDetailsResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'PrivateLinkServiceProxyResponse',
    'ProjectPropertiesResponse',
    'ProjectSummaryResponse',
    'PublicIPAddressResourceSettingsResponse',
    'PublicIpReferenceResponse',
    'ResourceGroupResourceSettingsResponse',
    'ResourceIdResponse',
    'ResourceIdentityResponse',
    'ResourceRequirementsResponse',
    'SecretStoreDetailsResponse',
    'SecretStorePropertiesResponse',
    'ServersProjectSummaryResponse',
    'ServersSolutionSummaryResponse',
    'SolutionDetailsResponse',
    'SolutionPropertiesResponse',
    'SolutionSummaryResponse',
    'SqlDatabaseResourceSettingsResponse',
    'SqlDbSettingsResponse',
    'SqlElasticPoolResourceSettingsResponse',
    'SqlMiSettingsResponse',
    'SqlServerResourceSettingsResponse',
    'SqlVmSettingsResponse',
    'SubnetReferenceResponse',
    'SubnetResourceSettingsResponse',
    'SystemDataResponse',
    'TargetStorageProfileResponse',
    'UserAssignedIdentityResponse',
    'VMwareMigrateAgentModelCustomPropertiesResponse',
    'VirtualMachineResourceSettingsResponse',
    'VirtualNetworkResourceSettingsResponse',
    'VmUptimeResponse',
    'WebApplicationConfigurationResponse',
    'WebApplicationDirectoryResponse',
    'WebApplicationFrameworkResponse',
    'WorkloadDeploymentModelPropertiesResponse',
    'WorkloadDeploymentModelPropertiesResponseCurrentJob',
    'WorkloadDeploymentModelResponseSystemData',
    'WorkloadInstanceModelPropertiesResponse',
    'WorkloadInstanceModelPropertiesResponseCurrentJob',
    'WorkloadInstanceModelResponseSystemData',
]

@pulumi.output_type
class ACRPropertiesResponse(dict):
    """
    Class for ACR Properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryName":
            suggest = "registry_name"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ACRPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ACRPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ACRPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 registry_name: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        Class for ACR Properties.
        :param str registry_name: Gets or sets the azure container registry name.
        :param str resource_group: Gets or sets the resource group of the resource.
        :param str subscription_id: Gets or sets the subscription id of the resource.
        :param str tenant_id: Gets or sets the tenant id.
        """
        if registry_name is not None:
            pulumi.set(__self__, "registry_name", registry_name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> Optional[str]:
        """
        Gets or sets the azure container registry name.
        """
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        Gets or sets the resource group of the resource.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        Gets or sets the subscription id of the resource.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Gets or sets the tenant id.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class AKSDeploymentPropertiesResponse(dict):
    """
    Class for AKSDeployment Properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aksClusterName":
            suggest = "aks_cluster_name"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AKSDeploymentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AKSDeploymentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AKSDeploymentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aks_cluster_name: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        Class for AKSDeployment Properties.
        :param str aks_cluster_name: Gets or sets the AKS cluster name.
        :param str resource_group: Gets or sets the resource group of the resource.
        :param str subscription_id: Gets or sets the subscription id of the resource.
        :param str tenant_id: Gets or sets the tenant id.
        """
        if aks_cluster_name is not None:
            pulumi.set(__self__, "aks_cluster_name", aks_cluster_name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aksClusterName")
    def aks_cluster_name(self) -> Optional[str]:
        """
        Gets or sets the AKS cluster name.
        """
        return pulumi.get(self, "aks_cluster_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        Gets or sets the resource group of the resource.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        Gets or sets the subscription id of the resource.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Gets or sets the tenant id.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class AKSDeploymentSpecificationResponse(dict):
    """
    AKS Deployment Specification.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubernetesObjectsYaml":
            suggest = "kubernetes_objects_yaml"
        elif key == "loadBalancerType":
            suggest = "load_balancer_type"
        elif key == "replicaCount":
            suggest = "replica_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AKSDeploymentSpecificationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AKSDeploymentSpecificationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AKSDeploymentSpecificationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kubernetes_objects_yaml: Optional[str] = None,
                 load_balancer_type: Optional[str] = None,
                 replica_count: Optional[str] = None):
        """
        AKS Deployment Specification.
        :param str kubernetes_objects_yaml: Gets or sets the Merged Deployment and service Yaml.
        :param str load_balancer_type: Gets or sets the load balancer type.
        :param str replica_count: Gets or sets the replica count to be created in AKS.
        """
        if kubernetes_objects_yaml is not None:
            pulumi.set(__self__, "kubernetes_objects_yaml", kubernetes_objects_yaml)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)

    @property
    @pulumi.getter(name="kubernetesObjectsYaml")
    def kubernetes_objects_yaml(self) -> Optional[str]:
        """
        Gets or sets the Merged Deployment and service Yaml.
        """
        return pulumi.get(self, "kubernetes_objects_yaml")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[str]:
        """
        Gets or sets the load balancer type.
        """
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[str]:
        """
        Gets or sets the replica count to be created in AKS.
        """
        return pulumi.get(self, "replica_count")


@pulumi.output_type
class ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesResponse(dict):
    """
    ApacheTomcat workload instance model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "apacheTomcatAksWorkloadDeploymentProperties":
            suggest = "apache_tomcat_aks_workload_deployment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 apache_tomcat_aks_workload_deployment_properties: Optional['outputs.ApacheTomcatAKSWorkloadDeploymentResponse'] = None):
        """
        ApacheTomcat workload instance model custom properties.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'ApacheTomcatAKSWorkloadDeploymentModelCustomProperties'.
        :param 'ApacheTomcatAKSWorkloadDeploymentResponse' apache_tomcat_aks_workload_deployment_properties: ApacheTomcat web application.
        """
        pulumi.set(__self__, "instance_type", 'ApacheTomcatAKSWorkloadDeploymentModelCustomProperties')
        if apache_tomcat_aks_workload_deployment_properties is not None:
            pulumi.set(__self__, "apache_tomcat_aks_workload_deployment_properties", apache_tomcat_aks_workload_deployment_properties)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'ApacheTomcatAKSWorkloadDeploymentModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="apacheTomcatAksWorkloadDeploymentProperties")
    def apache_tomcat_aks_workload_deployment_properties(self) -> Optional['outputs.ApacheTomcatAKSWorkloadDeploymentResponse']:
        """
        ApacheTomcat web application.
        """
        return pulumi.get(self, "apache_tomcat_aks_workload_deployment_properties")


@pulumi.output_type
class ApacheTomcatAKSWorkloadDeploymentResponse(dict):
    """
    ApacheTomcat web application.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentHistory":
            suggest = "deployment_history"
        elif key == "automationArtifactProperties":
            suggest = "automation_artifact_properties"
        elif key == "buildContainerImages":
            suggest = "build_container_images"
        elif key == "clusterProperties":
            suggest = "cluster_properties"
        elif key == "containerImageProperties":
            suggest = "container_image_properties"
        elif key == "deploymentNamePrefix":
            suggest = "deployment_name_prefix"
        elif key == "deploymentSpec":
            suggest = "deployment_spec"
        elif key == "monitoringProperties":
            suggest = "monitoring_properties"
        elif key == "targetPlatformIdentity":
            suggest = "target_platform_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApacheTomcatAKSWorkloadDeploymentResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApacheTomcatAKSWorkloadDeploymentResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApacheTomcatAKSWorkloadDeploymentResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_history: Sequence['outputs.DeployedResourcesPropertiesResponse'],
                 automation_artifact_properties: Optional['outputs.AutomationArtifactResponse'] = None,
                 bindings: Optional[Sequence['outputs.BindingResponse']] = None,
                 build_container_images: Optional[Sequence['outputs.ContainerImagePropertiesResponse']] = None,
                 cluster_properties: Optional['outputs.AKSDeploymentPropertiesResponse'] = None,
                 configurations: Optional[Sequence['outputs.WebApplicationConfigurationResponse']] = None,
                 container_image_properties: Optional['outputs.ContainerImagePropertiesResponse'] = None,
                 deployment_name_prefix: Optional[str] = None,
                 deployment_spec: Optional['outputs.AKSDeploymentSpecificationResponse'] = None,
                 directories: Optional[Sequence['outputs.WebApplicationDirectoryResponse']] = None,
                 limits: Optional['outputs.ResourceRequirementsResponse'] = None,
                 monitoring_properties: Optional['outputs.AppInsightMonitoringPropertiesResponse'] = None,
                 requests: Optional['outputs.ResourceRequirementsResponse'] = None,
                 target_platform_identity: Optional[str] = None):
        """
        ApacheTomcat web application.
        :param Sequence['DeployedResourcesPropertiesResponse'] deployment_history: Gets or sets the deployment history.
        :param 'AutomationArtifactResponse' automation_artifact_properties: Class for automation artifact.
        :param Sequence['BindingResponse'] bindings: Gets or sets the bindings for the application.
        :param Sequence['ContainerImagePropertiesResponse'] build_container_images: Gets or sets the build container images.
        :param 'AKSDeploymentPropertiesResponse' cluster_properties: Class for AKSDeployment Properties.
        :param Sequence['WebApplicationConfigurationResponse'] configurations: Gets or sets application configuration.
        :param 'ContainerImagePropertiesResponse' container_image_properties: Class for container image properties.
        :param str deployment_name_prefix: Gets or sets the deployment name prefix.
        :param 'AKSDeploymentSpecificationResponse' deployment_spec: AKS Deployment Specification.
        :param Sequence['WebApplicationDirectoryResponse'] directories: Gets or sets application directories.
        :param 'ResourceRequirementsResponse' limits: Resource Requirements.
        :param 'AppInsightMonitoringPropertiesResponse' monitoring_properties: Class for app insight monitoring properties.
        :param 'ResourceRequirementsResponse' requests: Resource Requirements.
        :param str target_platform_identity: Gets or sets the target platform managed identity.
        """
        pulumi.set(__self__, "deployment_history", deployment_history)
        if automation_artifact_properties is not None:
            pulumi.set(__self__, "automation_artifact_properties", automation_artifact_properties)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if build_container_images is not None:
            pulumi.set(__self__, "build_container_images", build_container_images)
        if cluster_properties is not None:
            pulumi.set(__self__, "cluster_properties", cluster_properties)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if container_image_properties is not None:
            pulumi.set(__self__, "container_image_properties", container_image_properties)
        if deployment_name_prefix is not None:
            pulumi.set(__self__, "deployment_name_prefix", deployment_name_prefix)
        if deployment_spec is not None:
            pulumi.set(__self__, "deployment_spec", deployment_spec)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if monitoring_properties is not None:
            pulumi.set(__self__, "monitoring_properties", monitoring_properties)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if target_platform_identity is not None:
            pulumi.set(__self__, "target_platform_identity", target_platform_identity)

    @property
    @pulumi.getter(name="deploymentHistory")
    def deployment_history(self) -> Sequence['outputs.DeployedResourcesPropertiesResponse']:
        """
        Gets or sets the deployment history.
        """
        return pulumi.get(self, "deployment_history")

    @property
    @pulumi.getter(name="automationArtifactProperties")
    def automation_artifact_properties(self) -> Optional['outputs.AutomationArtifactResponse']:
        """
        Class for automation artifact.
        """
        return pulumi.get(self, "automation_artifact_properties")

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.BindingResponse']]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @property
    @pulumi.getter(name="buildContainerImages")
    def build_container_images(self) -> Optional[Sequence['outputs.ContainerImagePropertiesResponse']]:
        """
        Gets or sets the build container images.
        """
        return pulumi.get(self, "build_container_images")

    @property
    @pulumi.getter(name="clusterProperties")
    def cluster_properties(self) -> Optional['outputs.AKSDeploymentPropertiesResponse']:
        """
        Class for AKSDeployment Properties.
        """
        return pulumi.get(self, "cluster_properties")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.WebApplicationConfigurationResponse']]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="containerImageProperties")
    def container_image_properties(self) -> Optional['outputs.ContainerImagePropertiesResponse']:
        """
        Class for container image properties.
        """
        return pulumi.get(self, "container_image_properties")

    @property
    @pulumi.getter(name="deploymentNamePrefix")
    def deployment_name_prefix(self) -> Optional[str]:
        """
        Gets or sets the deployment name prefix.
        """
        return pulumi.get(self, "deployment_name_prefix")

    @property
    @pulumi.getter(name="deploymentSpec")
    def deployment_spec(self) -> Optional['outputs.AKSDeploymentSpecificationResponse']:
        """
        AKS Deployment Specification.
        """
        return pulumi.get(self, "deployment_spec")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.WebApplicationDirectoryResponse']]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="monitoringProperties")
    def monitoring_properties(self) -> Optional['outputs.AppInsightMonitoringPropertiesResponse']:
        """
        Class for app insight monitoring properties.
        """
        return pulumi.get(self, "monitoring_properties")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="targetPlatformIdentity")
    def target_platform_identity(self) -> Optional[str]:
        """
        Gets or sets the target platform managed identity.
        """
        return pulumi.get(self, "target_platform_identity")


@pulumi.output_type
class ApacheTomcatWebApplicationResponse(dict):
    """
    ApacheTomcat web application.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "applicationName":
            suggest = "application_name"
        elif key == "applicationScratchPath":
            suggest = "application_scratch_path"
        elif key == "discoveredFrameworks":
            suggest = "discovered_frameworks"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "primaryFramework":
            suggest = "primary_framework"
        elif key == "webServerId":
            suggest = "web_server_id"
        elif key == "webServerName":
            suggest = "web_server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApacheTomcatWebApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApacheTomcatWebApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApacheTomcatWebApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 application_name: Optional[str] = None,
                 application_scratch_path: Optional[str] = None,
                 bindings: Optional[Sequence['outputs.BindingResponse']] = None,
                 configurations: Optional[Sequence['outputs.WebApplicationConfigurationResponse']] = None,
                 directories: Optional[Sequence['outputs.WebApplicationDirectoryResponse']] = None,
                 discovered_frameworks: Optional[Sequence['outputs.WebApplicationFrameworkResponse']] = None,
                 display_name: Optional[str] = None,
                 limits: Optional['outputs.ResourceRequirementsResponse'] = None,
                 path: Optional['outputs.DirectoryPathResponse'] = None,
                 primary_framework: Optional['outputs.WebApplicationFrameworkResponse'] = None,
                 requests: Optional['outputs.ResourceRequirementsResponse'] = None,
                 web_server_id: Optional[str] = None,
                 web_server_name: Optional[str] = None):
        """
        ApacheTomcat web application.
        :param str application_id: Gets or sets the web application id.
        :param str application_name: Gets or sets the web application name.
        :param str application_scratch_path: Gets or sets application scratch path.
        :param Sequence['BindingResponse'] bindings: Gets or sets the bindings for the application.
        :param Sequence['WebApplicationConfigurationResponse'] configurations: Gets or sets application configuration.
        :param Sequence['WebApplicationDirectoryResponse'] directories: Gets or sets application directories.
        :param Sequence['WebApplicationFrameworkResponse'] discovered_frameworks: Gets or sets the discovered frameworks of application.
        :param str display_name: Gets or sets the display name.
        :param 'ResourceRequirementsResponse' limits: Resource Requirements.
        :param 'DirectoryPathResponse' path: Second level entity for virtual directories.
        :param 'WebApplicationFrameworkResponse' primary_framework: Framework specific data for a web application.
        :param 'ResourceRequirementsResponse' requests: Resource Requirements.
        :param str web_server_id: Gets or sets the web server id.
        :param str web_server_name: Gets or sets the web server name.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_scratch_path is not None:
            pulumi.set(__self__, "application_scratch_path", application_scratch_path)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if discovered_frameworks is not None:
            pulumi.set(__self__, "discovered_frameworks", discovered_frameworks)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if primary_framework is not None:
            pulumi.set(__self__, "primary_framework", primary_framework)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if web_server_id is not None:
            pulumi.set(__self__, "web_server_id", web_server_id)
        if web_server_name is not None:
            pulumi.set(__self__, "web_server_name", web_server_name)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        Gets or sets the web application id.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        """
        Gets or sets the web application name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationScratchPath")
    def application_scratch_path(self) -> Optional[str]:
        """
        Gets or sets application scratch path.
        """
        return pulumi.get(self, "application_scratch_path")

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.BindingResponse']]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.WebApplicationConfigurationResponse']]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.WebApplicationDirectoryResponse']]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter(name="discoveredFrameworks")
    def discovered_frameworks(self) -> Optional[Sequence['outputs.WebApplicationFrameworkResponse']]:
        """
        Gets or sets the discovered frameworks of application.
        """
        return pulumi.get(self, "discovered_frameworks")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.DirectoryPathResponse']:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="primaryFramework")
    def primary_framework(self) -> Optional['outputs.WebApplicationFrameworkResponse']:
        """
        Framework specific data for a web application.
        """
        return pulumi.get(self, "primary_framework")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="webServerId")
    def web_server_id(self) -> Optional[str]:
        """
        Gets or sets the web server id.
        """
        return pulumi.get(self, "web_server_id")

    @property
    @pulumi.getter(name="webServerName")
    def web_server_name(self) -> Optional[str]:
        """
        Gets or sets the web server name.
        """
        return pulumi.get(self, "web_server_name")


@pulumi.output_type
class ApacheTomcatWorkloadInstanceModelCustomPropertiesResponse(dict):
    """
    ApacheTomcat workload instance model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "apacheTomcatWebApplication":
            suggest = "apache_tomcat_web_application"
        elif key == "webAppArmId":
            suggest = "web_app_arm_id"
        elif key == "webAppSiteName":
            suggest = "web_app_site_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApacheTomcatWorkloadInstanceModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApacheTomcatWorkloadInstanceModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApacheTomcatWorkloadInstanceModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 apache_tomcat_web_application: Optional['outputs.ApacheTomcatWebApplicationResponse'] = None,
                 web_app_arm_id: Optional[str] = None,
                 web_app_site_name: Optional[str] = None):
        """
        ApacheTomcat workload instance model custom properties.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'ApacheTomcatWorkloadInstanceModelCustomProperties'.
        :param 'ApacheTomcatWebApplicationResponse' apache_tomcat_web_application: ApacheTomcat web application.
        :param str web_app_arm_id: Gets or sets the Web application ARM id.
        :param str web_app_site_name: Gets or sets the Web application site name.
        """
        pulumi.set(__self__, "instance_type", 'ApacheTomcatWorkloadInstanceModelCustomProperties')
        if apache_tomcat_web_application is not None:
            pulumi.set(__self__, "apache_tomcat_web_application", apache_tomcat_web_application)
        if web_app_arm_id is not None:
            pulumi.set(__self__, "web_app_arm_id", web_app_arm_id)
        if web_app_site_name is not None:
            pulumi.set(__self__, "web_app_site_name", web_app_site_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'ApacheTomcatWorkloadInstanceModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="apacheTomcatWebApplication")
    def apache_tomcat_web_application(self) -> Optional['outputs.ApacheTomcatWebApplicationResponse']:
        """
        ApacheTomcat web application.
        """
        return pulumi.get(self, "apache_tomcat_web_application")

    @property
    @pulumi.getter(name="webAppArmId")
    def web_app_arm_id(self) -> Optional[str]:
        """
        Gets or sets the Web application ARM id.
        """
        return pulumi.get(self, "web_app_arm_id")

    @property
    @pulumi.getter(name="webAppSiteName")
    def web_app_site_name(self) -> Optional[str]:
        """
        Gets or sets the Web application site name.
        """
        return pulumi.get(self, "web_app_site_name")


@pulumi.output_type
class AppInsightMonitoringPropertiesResponse(dict):
    """
    Class for app insight monitoring properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appInsightsName":
            suggest = "app_insights_name"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "secretStoreDetails":
            suggest = "secret_store_details"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppInsightMonitoringPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppInsightMonitoringPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppInsightMonitoringPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_insights_name: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 region: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 secret_store_details: Optional['outputs.SecretStoreDetailsResponse'] = None,
                 subscription_id: Optional[str] = None):
        """
        Class for app insight monitoring properties.
        :param str app_insights_name: Gets or sets the app insights name.
        :param bool is_enabled: Gets or sets a value indicating whether monitoring is enabled.
        :param str region: Gets or sets the region.
        :param str resource_group: Gets or sets the resource group of the resource.
        :param str subscription_id: Gets or sets the subscription id of the resource.
        """
        if app_insights_name is not None:
            pulumi.set(__self__, "app_insights_name", app_insights_name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if secret_store_details is not None:
            pulumi.set(__self__, "secret_store_details", secret_store_details)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="appInsightsName")
    def app_insights_name(self) -> Optional[str]:
        """
        Gets or sets the app insights name.
        """
        return pulumi.get(self, "app_insights_name")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether monitoring is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Gets or sets the region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        Gets or sets the resource group of the resource.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="secretStoreDetails")
    def secret_store_details(self) -> Optional['outputs.SecretStoreDetailsResponse']:
        return pulumi.get(self, "secret_store_details")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        Gets or sets the subscription id of the resource.
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class AssessmentPropertiesResponse(dict):
    """
    Properties of an assessment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDiskType":
            suggest = "azure_disk_type"
        elif key == "azureHybridUseBenefit":
            suggest = "azure_hybrid_use_benefit"
        elif key == "azureLocation":
            suggest = "azure_location"
        elif key == "azureOfferCode":
            suggest = "azure_offer_code"
        elif key == "azurePricingTier":
            suggest = "azure_pricing_tier"
        elif key == "azureStorageRedundancy":
            suggest = "azure_storage_redundancy"
        elif key == "azureVmFamilies":
            suggest = "azure_vm_families"
        elif key == "confidenceRatingInPercentage":
            suggest = "confidence_rating_in_percentage"
        elif key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "discountPercentage":
            suggest = "discount_percentage"
        elif key == "eaSubscriptionId":
            suggest = "ea_subscription_id"
        elif key == "monthlyBandwidthCost":
            suggest = "monthly_bandwidth_cost"
        elif key == "monthlyComputeCost":
            suggest = "monthly_compute_cost"
        elif key == "monthlyPremiumStorageCost":
            suggest = "monthly_premium_storage_cost"
        elif key == "monthlyStandardSSDStorageCost":
            suggest = "monthly_standard_ssd_storage_cost"
        elif key == "monthlyStorageCost":
            suggest = "monthly_storage_cost"
        elif key == "numberOfMachines":
            suggest = "number_of_machines"
        elif key == "perfDataEndTime":
            suggest = "perf_data_end_time"
        elif key == "perfDataStartTime":
            suggest = "perf_data_start_time"
        elif key == "pricesTimestamp":
            suggest = "prices_timestamp"
        elif key == "reservedInstance":
            suggest = "reserved_instance"
        elif key == "scalingFactor":
            suggest = "scaling_factor"
        elif key == "sizingCriterion":
            suggest = "sizing_criterion"
        elif key == "timeRange":
            suggest = "time_range"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"
        elif key == "vmUptime":
            suggest = "vm_uptime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssessmentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssessmentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssessmentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_disk_type: str,
                 azure_hybrid_use_benefit: str,
                 azure_location: str,
                 azure_offer_code: str,
                 azure_pricing_tier: str,
                 azure_storage_redundancy: str,
                 azure_vm_families: Sequence[str],
                 confidence_rating_in_percentage: float,
                 created_timestamp: str,
                 currency: str,
                 discount_percentage: float,
                 ea_subscription_id: str,
                 monthly_bandwidth_cost: float,
                 monthly_compute_cost: float,
                 monthly_premium_storage_cost: float,
                 monthly_standard_ssd_storage_cost: float,
                 monthly_storage_cost: float,
                 number_of_machines: int,
                 percentile: str,
                 perf_data_end_time: str,
                 perf_data_start_time: str,
                 prices_timestamp: str,
                 reserved_instance: str,
                 scaling_factor: float,
                 sizing_criterion: str,
                 stage: str,
                 status: str,
                 time_range: str,
                 updated_timestamp: str,
                 vm_uptime: 'outputs.VmUptimeResponse'):
        """
        Properties of an assessment.
        :param str azure_disk_type: Storage type selected for this disk.
        :param str azure_hybrid_use_benefit: AHUB discount on windows virtual machines.
        :param str azure_location: Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        :param str azure_offer_code: Offer code according to which cost estimation is done.
        :param str azure_pricing_tier: Pricing tier for Size evaluation.
        :param str azure_storage_redundancy: Storage Redundancy type offered by Azure.
        :param Sequence[str] azure_vm_families: List of azure VM families.
        :param float confidence_rating_in_percentage: Confidence rating percentage for assessment. Can be in the range [0, 100].
        :param str created_timestamp: Time when this project was created. Date-Time represented in ISO-8601 format.
        :param str currency: Currency to report prices in.
        :param float discount_percentage: Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        :param str ea_subscription_id: Enterprise agreement subscription arm id.
        :param float monthly_bandwidth_cost: Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param float monthly_compute_cost: Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param float monthly_premium_storage_cost: Monthly premium storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param float monthly_standard_ssd_storage_cost: Monthly standard SSD storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param float monthly_storage_cost: Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param int number_of_machines: Number of assessed machines part of this assessment.
        :param str percentile: Percentile of performance data used to recommend Azure size.
        :param str perf_data_end_time: End time to consider performance data for assessment
        :param str perf_data_start_time: Start time to consider performance data for assessment
        :param str prices_timestamp: Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
        :param str reserved_instance: Azure reserved instance.
        :param float scaling_factor: Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        :param str sizing_criterion: Assessment sizing criterion.
        :param str stage: User configurable setting that describes the status of the assessment.
        :param str status: Whether the assessment has been created and is valid.
        :param str time_range: Time range of performance data used to recommend a size.
        :param str updated_timestamp: Time when this project was last updated. Date-Time represented in ISO-8601 format.
        :param 'VmUptimeResponse' vm_uptime: Specify the duration for which the VMs are up in the on-premises environment.
        """
        pulumi.set(__self__, "azure_disk_type", azure_disk_type)
        pulumi.set(__self__, "azure_hybrid_use_benefit", azure_hybrid_use_benefit)
        pulumi.set(__self__, "azure_location", azure_location)
        pulumi.set(__self__, "azure_offer_code", azure_offer_code)
        pulumi.set(__self__, "azure_pricing_tier", azure_pricing_tier)
        pulumi.set(__self__, "azure_storage_redundancy", azure_storage_redundancy)
        pulumi.set(__self__, "azure_vm_families", azure_vm_families)
        pulumi.set(__self__, "confidence_rating_in_percentage", confidence_rating_in_percentage)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount_percentage", discount_percentage)
        pulumi.set(__self__, "ea_subscription_id", ea_subscription_id)
        pulumi.set(__self__, "monthly_bandwidth_cost", monthly_bandwidth_cost)
        pulumi.set(__self__, "monthly_compute_cost", monthly_compute_cost)
        pulumi.set(__self__, "monthly_premium_storage_cost", monthly_premium_storage_cost)
        pulumi.set(__self__, "monthly_standard_ssd_storage_cost", monthly_standard_ssd_storage_cost)
        pulumi.set(__self__, "monthly_storage_cost", monthly_storage_cost)
        pulumi.set(__self__, "number_of_machines", number_of_machines)
        pulumi.set(__self__, "percentile", percentile)
        pulumi.set(__self__, "perf_data_end_time", perf_data_end_time)
        pulumi.set(__self__, "perf_data_start_time", perf_data_start_time)
        pulumi.set(__self__, "prices_timestamp", prices_timestamp)
        pulumi.set(__self__, "reserved_instance", reserved_instance)
        pulumi.set(__self__, "scaling_factor", scaling_factor)
        pulumi.set(__self__, "sizing_criterion", sizing_criterion)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_range", time_range)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        pulumi.set(__self__, "vm_uptime", vm_uptime)

    @property
    @pulumi.getter(name="azureDiskType")
    def azure_disk_type(self) -> str:
        """
        Storage type selected for this disk.
        """
        return pulumi.get(self, "azure_disk_type")

    @property
    @pulumi.getter(name="azureHybridUseBenefit")
    def azure_hybrid_use_benefit(self) -> str:
        """
        AHUB discount on windows virtual machines.
        """
        return pulumi.get(self, "azure_hybrid_use_benefit")

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> str:
        """
        Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        """
        return pulumi.get(self, "azure_location")

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> str:
        """
        Offer code according to which cost estimation is done.
        """
        return pulumi.get(self, "azure_offer_code")

    @property
    @pulumi.getter(name="azurePricingTier")
    def azure_pricing_tier(self) -> str:
        """
        Pricing tier for Size evaluation.
        """
        return pulumi.get(self, "azure_pricing_tier")

    @property
    @pulumi.getter(name="azureStorageRedundancy")
    def azure_storage_redundancy(self) -> str:
        """
        Storage Redundancy type offered by Azure.
        """
        return pulumi.get(self, "azure_storage_redundancy")

    @property
    @pulumi.getter(name="azureVmFamilies")
    def azure_vm_families(self) -> Sequence[str]:
        """
        List of azure VM families.
        """
        return pulumi.get(self, "azure_vm_families")

    @property
    @pulumi.getter(name="confidenceRatingInPercentage")
    def confidence_rating_in_percentage(self) -> float:
        """
        Confidence rating percentage for assessment. Can be in the range [0, 100].
        """
        return pulumi.get(self, "confidence_rating_in_percentage")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when this project was created. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Currency to report prices in.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> float:
        """
        Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        """
        return pulumi.get(self, "discount_percentage")

    @property
    @pulumi.getter(name="eaSubscriptionId")
    def ea_subscription_id(self) -> str:
        """
        Enterprise agreement subscription arm id.
        """
        return pulumi.get(self, "ea_subscription_id")

    @property
    @pulumi.getter(name="monthlyBandwidthCost")
    def monthly_bandwidth_cost(self) -> float:
        """
        Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_bandwidth_cost")

    @property
    @pulumi.getter(name="monthlyComputeCost")
    def monthly_compute_cost(self) -> float:
        """
        Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_compute_cost")

    @property
    @pulumi.getter(name="monthlyPremiumStorageCost")
    def monthly_premium_storage_cost(self) -> float:
        """
        Monthly premium storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_premium_storage_cost")

    @property
    @pulumi.getter(name="monthlyStandardSSDStorageCost")
    def monthly_standard_ssd_storage_cost(self) -> float:
        """
        Monthly standard SSD storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_standard_ssd_storage_cost")

    @property
    @pulumi.getter(name="monthlyStorageCost")
    def monthly_storage_cost(self) -> float:
        """
        Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_storage_cost")

    @property
    @pulumi.getter(name="numberOfMachines")
    def number_of_machines(self) -> int:
        """
        Number of assessed machines part of this assessment.
        """
        return pulumi.get(self, "number_of_machines")

    @property
    @pulumi.getter
    def percentile(self) -> str:
        """
        Percentile of performance data used to recommend Azure size.
        """
        return pulumi.get(self, "percentile")

    @property
    @pulumi.getter(name="perfDataEndTime")
    def perf_data_end_time(self) -> str:
        """
        End time to consider performance data for assessment
        """
        return pulumi.get(self, "perf_data_end_time")

    @property
    @pulumi.getter(name="perfDataStartTime")
    def perf_data_start_time(self) -> str:
        """
        Start time to consider performance data for assessment
        """
        return pulumi.get(self, "perf_data_start_time")

    @property
    @pulumi.getter(name="pricesTimestamp")
    def prices_timestamp(self) -> str:
        """
        Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "prices_timestamp")

    @property
    @pulumi.getter(name="reservedInstance")
    def reserved_instance(self) -> str:
        """
        Azure reserved instance.
        """
        return pulumi.get(self, "reserved_instance")

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> float:
        """
        Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        """
        return pulumi.get(self, "scaling_factor")

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> str:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        User configurable setting that describes the status of the assessment.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Whether the assessment has been created and is valid.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        """
        Time range of performance data used to recommend a size.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "updated_timestamp")

    @property
    @pulumi.getter(name="vmUptime")
    def vm_uptime(self) -> 'outputs.VmUptimeResponse':
        """
        Specify the duration for which the VMs are up in the on-premises environment.
        """
        return pulumi.get(self, "vm_uptime")


@pulumi.output_type
class AutomaticResolutionPropertiesResponse(dict):
    """
    Defines the properties for automatic resolution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moveResourceId":
            suggest = "move_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomaticResolutionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomaticResolutionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomaticResolutionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 move_resource_id: Optional[str] = None):
        """
        Defines the properties for automatic resolution.
        :param str move_resource_id: Gets the MoveResource ARM ID of
               the dependent resource if the resolution type is Automatic.
        """
        if move_resource_id is not None:
            pulumi.set(__self__, "move_resource_id", move_resource_id)

    @property
    @pulumi.getter(name="moveResourceId")
    def move_resource_id(self) -> Optional[str]:
        """
        Gets the MoveResource ARM ID of
        the dependent resource if the resolution type is Automatic.
        """
        return pulumi.get(self, "move_resource_id")


@pulumi.output_type
class AutomationArtifactResponse(dict):
    """
    Class for automation artifact.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureFileShareProfile":
            suggest = "azure_file_share_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationArtifactResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationArtifactResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationArtifactResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifacts: Optional[Mapping[str, str]] = None,
                 azure_file_share_profile: Optional['outputs.AzureFileShareHydrationProfileResponse'] = None,
                 status: Optional[str] = None):
        """
        Class for automation artifact.
        :param Mapping[str, str] artifacts: Gets or sets the artifacts.
        :param 'AzureFileShareHydrationProfileResponse' azure_file_share_profile: Azure file share profile for hydration of application folders not mounted on
               the container file system.
        :param str status: Gets or sets the status of automation artifacts.
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if azure_file_share_profile is not None:
            pulumi.set(__self__, "azure_file_share_profile", azure_file_share_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the artifacts.
        """
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="azureFileShareProfile")
    def azure_file_share_profile(self) -> Optional['outputs.AzureFileShareHydrationProfileResponse']:
        """
        Azure file share profile for hydration of application folders not mounted on
        the container file system.
        """
        return pulumi.get(self, "azure_file_share_profile")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Gets or sets the status of automation artifacts.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AvailabilitySetResourceSettingsResponse(dict):
    """
    Gets or sets the availability set resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"
        elif key == "updateDomain":
            suggest = "update_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AvailabilitySetResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AvailabilitySetResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AvailabilitySetResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 fault_domain: Optional[int] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None,
                 update_domain: Optional[int] = None):
        """
        Gets or sets the availability set resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Compute/availabilitySets'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param int fault_domain: Gets or sets the target fault domain.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        :param int update_domain: Gets or sets the target update domain.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Compute/availabilitySets')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if update_domain is not None:
            pulumi.set(__self__, "update_domain", update_domain)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Compute/availabilitySets'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[int]:
        """
        Gets or sets the target fault domain.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @property
    @pulumi.getter(name="updateDomain")
    def update_domain(self) -> Optional[int]:
        """
        Gets or sets the target update domain.
        """
        return pulumi.get(self, "update_domain")


@pulumi.output_type
class AzureFileShareHydrationProfileResponse(dict):
    """
    Azure file share profile for hydration of application folders not mounted on
    the container file system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureFileShareDirPath":
            suggest = "azure_file_share_dir_path"
        elif key == "azureFileShareName":
            suggest = "azure_file_share_name"
        elif key == "azureFileShareResourceGroup":
            suggest = "azure_file_share_resource_group"
        elif key == "azureFileShareStorageAccount":
            suggest = "azure_file_share_storage_account"
        elif key == "azureFileShareSubscriptionId":
            suggest = "azure_file_share_subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureFileShareHydrationProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureFileShareHydrationProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureFileShareHydrationProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_file_share_dir_path: Optional[str] = None,
                 azure_file_share_name: Optional[str] = None,
                 azure_file_share_resource_group: Optional[str] = None,
                 azure_file_share_storage_account: Optional[str] = None,
                 azure_file_share_subscription_id: Optional[str] = None):
        """
        Azure file share profile for hydration of application folders not mounted on
        the container file system.
        :param str azure_file_share_dir_path: Gets or sets the cloud directory path of the directory on azure file share.
        :param str azure_file_share_name: Gets or sets the name of the azure file share.
        :param str azure_file_share_resource_group: Gets or sets the name of the azure file share resource group.
        :param str azure_file_share_storage_account: Gets or sets the name of the azure file share storage account.
        :param str azure_file_share_subscription_id: Gets or sets the subscription id of the azure file share.
        """
        if azure_file_share_dir_path is not None:
            pulumi.set(__self__, "azure_file_share_dir_path", azure_file_share_dir_path)
        if azure_file_share_name is not None:
            pulumi.set(__self__, "azure_file_share_name", azure_file_share_name)
        if azure_file_share_resource_group is not None:
            pulumi.set(__self__, "azure_file_share_resource_group", azure_file_share_resource_group)
        if azure_file_share_storage_account is not None:
            pulumi.set(__self__, "azure_file_share_storage_account", azure_file_share_storage_account)
        if azure_file_share_subscription_id is not None:
            pulumi.set(__self__, "azure_file_share_subscription_id", azure_file_share_subscription_id)

    @property
    @pulumi.getter(name="azureFileShareDirPath")
    def azure_file_share_dir_path(self) -> Optional[str]:
        """
        Gets or sets the cloud directory path of the directory on azure file share.
        """
        return pulumi.get(self, "azure_file_share_dir_path")

    @property
    @pulumi.getter(name="azureFileShareName")
    def azure_file_share_name(self) -> Optional[str]:
        """
        Gets or sets the name of the azure file share.
        """
        return pulumi.get(self, "azure_file_share_name")

    @property
    @pulumi.getter(name="azureFileShareResourceGroup")
    def azure_file_share_resource_group(self) -> Optional[str]:
        """
        Gets or sets the name of the azure file share resource group.
        """
        return pulumi.get(self, "azure_file_share_resource_group")

    @property
    @pulumi.getter(name="azureFileShareStorageAccount")
    def azure_file_share_storage_account(self) -> Optional[str]:
        """
        Gets or sets the name of the azure file share storage account.
        """
        return pulumi.get(self, "azure_file_share_storage_account")

    @property
    @pulumi.getter(name="azureFileShareSubscriptionId")
    def azure_file_share_subscription_id(self) -> Optional[str]:
        """
        Gets or sets the subscription id of the azure file share.
        """
        return pulumi.get(self, "azure_file_share_subscription_id")


@pulumi.output_type
class BindingResponse(dict):
    """
    Binding for a web application.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "portMapping":
            suggest = "port_mapping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 cert: Optional['outputs.CertResponse'] = None,
                 host_name: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 port: Optional[str] = None,
                 port_mapping: Optional['outputs.PortMappingResponse'] = None,
                 protocol: Optional[str] = None):
        """
        Binding for a web application.
        :param str id: Gets the ID.
        :param 'CertResponse' cert: WebApplication certificate.
        :param str host_name: Gets or sets the binding host name.
        :param str ip_address: Gets or sets the IP Address.
        :param str port: Gets or sets the application port.
        :param 'PortMappingResponse' port_mapping: WebApplication port mapping.
        :param str protocol: Gets or sets the protocol.
        """
        pulumi.set(__self__, "id", id)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_mapping is not None:
            pulumi.set(__self__, "port_mapping", port_mapping)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def cert(self) -> Optional['outputs.CertResponse']:
        """
        WebApplication certificate.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        """
        Gets or sets the binding host name.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        Gets or sets the IP Address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Gets or sets the application port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> Optional['outputs.PortMappingResponse']:
        """
        WebApplication port mapping.
        """
        return pulumi.get(self, "port_mapping")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Gets or sets the protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class CertResponse(dict):
    """
    WebApplication certificate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certData":
            suggest = "cert_data"
        elif key == "certNeeded":
            suggest = "cert_needed"
        elif key == "certProvided":
            suggest = "cert_provided"
        elif key == "secretStore":
            suggest = "secret_store"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_data: Optional[str] = None,
                 cert_needed: Optional[bool] = None,
                 cert_provided: Optional[bool] = None,
                 secret_store: Optional[str] = None):
        """
        WebApplication certificate.
        :param str cert_data: Gets or sets the Certificate data.
        :param bool cert_needed: Gets or sets a value indicating whether certificate is needed or not.
        :param bool cert_provided: Gets or sets a value indicating whether certificate is provided or not.
        :param str secret_store: Gets or sets the type of secret store for the certificate.
        """
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if cert_needed is not None:
            pulumi.set(__self__, "cert_needed", cert_needed)
        if cert_provided is not None:
            pulumi.set(__self__, "cert_provided", cert_provided)
        if secret_store is not None:
            pulumi.set(__self__, "secret_store", secret_store)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[str]:
        """
        Gets or sets the Certificate data.
        """
        return pulumi.get(self, "cert_data")

    @property
    @pulumi.getter(name="certNeeded")
    def cert_needed(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether certificate is needed or not.
        """
        return pulumi.get(self, "cert_needed")

    @property
    @pulumi.getter(name="certProvided")
    def cert_provided(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether certificate is provided or not.
        """
        return pulumi.get(self, "cert_provided")

    @property
    @pulumi.getter(name="secretStore")
    def secret_store(self) -> Optional[str]:
        """
        Gets or sets the type of secret store for the certificate.
        """
        return pulumi.get(self, "secret_store")


@pulumi.output_type
class CollectorAgentPropertiesBaseResponse(dict):
    """
    Collector agent property class.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastHeartbeatUtc":
            suggest = "last_heartbeat_utc"
        elif key == "spnDetails":
            suggest = "spn_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorAgentPropertiesBaseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorAgentPropertiesBaseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorAgentPropertiesBaseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 last_heartbeat_utc: Optional[str] = None,
                 spn_details: Optional['outputs.CollectorAgentSpnPropertiesBaseResponse'] = None,
                 version: Optional[str] = None):
        """
        Collector agent property class.
        :param str id: Gets the collector agent id.
        :param str last_heartbeat_utc: Gets the collector last heartbeat time.
        :param 'CollectorAgentSpnPropertiesBaseResponse' spn_details: Gets or sets the SPN details.
        :param str version: Gets the collector agent version.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_heartbeat_utc is not None:
            pulumi.set(__self__, "last_heartbeat_utc", last_heartbeat_utc)
        if spn_details is not None:
            pulumi.set(__self__, "spn_details", spn_details)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Gets the collector agent id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastHeartbeatUtc")
    def last_heartbeat_utc(self) -> Optional[str]:
        """
        Gets the collector last heartbeat time.
        """
        return pulumi.get(self, "last_heartbeat_utc")

    @property
    @pulumi.getter(name="spnDetails")
    def spn_details(self) -> Optional['outputs.CollectorAgentSpnPropertiesBaseResponse']:
        """
        Gets or sets the SPN details.
        """
        return pulumi.get(self, "spn_details")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Gets the collector agent version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CollectorAgentPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastHeartbeatUtc":
            suggest = "last_heartbeat_utc"
        elif key == "spnDetails":
            suggest = "spn_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorAgentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorAgentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorAgentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 last_heartbeat_utc: str,
                 version: str,
                 spn_details: Optional['outputs.CollectorBodyAgentSpnPropertiesResponse'] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_heartbeat_utc", last_heartbeat_utc)
        pulumi.set(__self__, "version", version)
        if spn_details is not None:
            pulumi.set(__self__, "spn_details", spn_details)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastHeartbeatUtc")
    def last_heartbeat_utc(self) -> str:
        return pulumi.get(self, "last_heartbeat_utc")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="spnDetails")
    def spn_details(self) -> Optional['outputs.CollectorBodyAgentSpnPropertiesResponse']:
        return pulumi.get(self, "spn_details")


@pulumi.output_type
class CollectorAgentSpnPropertiesBaseResponse(dict):
    """
    Collector agent SPN details class.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "objectId":
            suggest = "object_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorAgentSpnPropertiesBaseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorAgentSpnPropertiesBaseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorAgentSpnPropertiesBaseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 audience: Optional[str] = None,
                 authority: Optional[str] = None,
                 object_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        Collector agent SPN details class.
        :param str application_id: Gets the AAD application id.
        :param str audience: Gets the AAD audience url.
        :param str authority: Gets the AAD authority endpoint.
        :param str object_id: Gets the object id of the AAD application.
        :param str tenant_id: Gets the tenant id of the AAD application.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        Gets the AAD application id.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        """
        Gets the AAD audience url.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def authority(self) -> Optional[str]:
        """
        Gets the AAD authority endpoint.
        """
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[str]:
        """
        Gets the object id of the AAD application.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Gets the tenant id of the AAD application.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class CollectorBodyAgentSpnPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "objectId":
            suggest = "object_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorBodyAgentSpnPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorBodyAgentSpnPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorBodyAgentSpnPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 audience: Optional[str] = None,
                 authority: Optional[str] = None,
                 object_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str application_id: Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param str audience: Intended audience for the service principal.
        :param str authority: AAD Authority URL which was used to request the token for the service principal.
        :param str object_id: Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param str tenant_id: Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        """
        Intended audience for the service principal.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def authority(self) -> Optional[str]:
        """
        AAD Authority URL which was used to request the token for the service principal.
        """
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[str]:
        """
        Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class CollectorPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"
        elif key == "agentProperties":
            suggest = "agent_properties"
        elif key == "discoverySiteId":
            suggest = "discovery_site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_timestamp: str,
                 updated_timestamp: str,
                 agent_properties: Optional['outputs.CollectorAgentPropertiesResponse'] = None,
                 discovery_site_id: Optional[str] = None):
        """
        :param str created_timestamp: Time when this collector was created. Date-Time represented in ISO-8601 format.
        :param str updated_timestamp: Time when this collector was updated. Date-Time represented in ISO-8601 format.
        :param str discovery_site_id: The ARM id of the discovery service site.
        """
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        if agent_properties is not None:
            pulumi.set(__self__, "agent_properties", agent_properties)
        if discovery_site_id is not None:
            pulumi.set(__self__, "discovery_site_id", discovery_site_id)

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when this collector was created. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Time when this collector was updated. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "updated_timestamp")

    @property
    @pulumi.getter(name="agentProperties")
    def agent_properties(self) -> Optional['outputs.CollectorAgentPropertiesResponse']:
        return pulumi.get(self, "agent_properties")

    @property
    @pulumi.getter(name="discoverySiteId")
    def discovery_site_id(self) -> Optional[str]:
        """
        The ARM id of the discovery service site.
        """
        return pulumi.get(self, "discovery_site_id")


@pulumi.output_type
class ContainerImagePropertiesResponse(dict):
    """
    Class for container image properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageName":
            suggest = "image_name"
        elif key == "imageTag":
            suggest = "image_tag"
        elif key == "registryProperties":
            suggest = "registry_properties"
        elif key == "runId":
            suggest = "run_id"
        elif key == "runStatus":
            suggest = "run_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerImagePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerImagePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerImagePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 dockerfile: Optional[str] = None,
                 image_name: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 registry_properties: Optional['outputs.ACRPropertiesResponse'] = None,
                 run_id: Optional[str] = None,
                 run_status: Optional[str] = None):
        """
        Class for container image properties.
        :param str id: Gets the ID.
        :param str dockerfile: Gets or sets the dockerfile for the container image.
        :param str image_name: Gets or sets the container image name.
        :param str image_tag: Gets or sets the container image tag.
        :param 'ACRPropertiesResponse' registry_properties: Class for ACR Properties.
        :param str run_id: Gets or sets the RunId.
        :param str run_status: Gets or sets the RunStatus.
        """
        pulumi.set(__self__, "id", id)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if registry_properties is not None:
            pulumi.set(__self__, "registry_properties", registry_properties)
        if run_id is not None:
            pulumi.set(__self__, "run_id", run_id)
        if run_status is not None:
            pulumi.set(__self__, "run_status", run_status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[str]:
        """
        Gets or sets the dockerfile for the container image.
        """
        return pulumi.get(self, "dockerfile")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        """
        Gets or sets the container image name.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        """
        Gets or sets the container image tag.
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="registryProperties")
    def registry_properties(self) -> Optional['outputs.ACRPropertiesResponse']:
        """
        Class for ACR Properties.
        """
        return pulumi.get(self, "registry_properties")

    @property
    @pulumi.getter(name="runId")
    def run_id(self) -> Optional[str]:
        """
        Gets or sets the RunId.
        """
        return pulumi.get(self, "run_id")

    @property
    @pulumi.getter(name="runStatus")
    def run_status(self) -> Optional[str]:
        """
        Gets or sets the RunStatus.
        """
        return pulumi.get(self, "run_status")


@pulumi.output_type
class DatabaseProjectSummaryResponse(dict):
    """
    The database project summary class.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "extendedSummary":
            suggest = "extended_summary"
        elif key == "lastSummaryRefreshedTime":
            suggest = "last_summary_refreshed_time"
        elif key == "refreshSummaryState":
            suggest = "refresh_summary_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseProjectSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseProjectSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseProjectSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 extended_summary: Optional[Mapping[str, str]] = None,
                 last_summary_refreshed_time: Optional[str] = None,
                 refresh_summary_state: Optional[str] = None):
        """
        The database project summary class.
        :param str instance_type: Gets the Instance type.
               Expected value is 'Databases'.
        :param Mapping[str, str] extended_summary: Gets or sets the extended summary.
        :param str last_summary_refreshed_time: Gets or sets the time when summary was last refreshed.
        :param str refresh_summary_state: Gets or sets the state of refresh summary.
        """
        pulumi.set(__self__, "instance_type", 'Databases')
        if extended_summary is not None:
            pulumi.set(__self__, "extended_summary", extended_summary)
        if last_summary_refreshed_time is not None:
            pulumi.set(__self__, "last_summary_refreshed_time", last_summary_refreshed_time)
        if refresh_summary_state is not None:
            pulumi.set(__self__, "refresh_summary_state", refresh_summary_state)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'Databases'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="extendedSummary")
    def extended_summary(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the extended summary.
        """
        return pulumi.get(self, "extended_summary")

    @property
    @pulumi.getter(name="lastSummaryRefreshedTime")
    def last_summary_refreshed_time(self) -> Optional[str]:
        """
        Gets or sets the time when summary was last refreshed.
        """
        return pulumi.get(self, "last_summary_refreshed_time")

    @property
    @pulumi.getter(name="refreshSummaryState")
    def refresh_summary_state(self) -> Optional[str]:
        """
        Gets or sets the state of refresh summary.
        """
        return pulumi.get(self, "refresh_summary_state")


@pulumi.output_type
class DatabasesSolutionSummaryResponse(dict):
    """
    Class representing the databases solution summary.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "databaseInstancesAssessedCount":
            suggest = "database_instances_assessed_count"
        elif key == "databasesAssessedCount":
            suggest = "databases_assessed_count"
        elif key == "migrationReadyCount":
            suggest = "migration_ready_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabasesSolutionSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabasesSolutionSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabasesSolutionSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 database_instances_assessed_count: Optional[int] = None,
                 databases_assessed_count: Optional[int] = None,
                 migration_ready_count: Optional[int] = None):
        """
        Class representing the databases solution summary.
        :param str instance_type: Gets the Instance type.
               Expected value is 'Databases'.
        :param int database_instances_assessed_count: Gets or sets the count of database instances assessed.
        :param int databases_assessed_count: Gets or sets the count of databases assessed.
        :param int migration_ready_count: Gets or sets the count of databases ready for migration.
        """
        pulumi.set(__self__, "instance_type", 'Databases')
        if database_instances_assessed_count is not None:
            pulumi.set(__self__, "database_instances_assessed_count", database_instances_assessed_count)
        if databases_assessed_count is not None:
            pulumi.set(__self__, "databases_assessed_count", databases_assessed_count)
        if migration_ready_count is not None:
            pulumi.set(__self__, "migration_ready_count", migration_ready_count)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'Databases'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="databaseInstancesAssessedCount")
    def database_instances_assessed_count(self) -> Optional[int]:
        """
        Gets or sets the count of database instances assessed.
        """
        return pulumi.get(self, "database_instances_assessed_count")

    @property
    @pulumi.getter(name="databasesAssessedCount")
    def databases_assessed_count(self) -> Optional[int]:
        """
        Gets or sets the count of databases assessed.
        """
        return pulumi.get(self, "databases_assessed_count")

    @property
    @pulumi.getter(name="migrationReadyCount")
    def migration_ready_count(self) -> Optional[int]:
        """
        Gets or sets the count of databases ready for migration.
        """
        return pulumi.get(self, "migration_ready_count")


@pulumi.output_type
class DeployedResourcesPropertiesResponse(dict):
    """
    Class for deployed resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployedResourceId":
            suggest = "deployed_resource_id"
        elif key == "deploymentTimestamp":
            suggest = "deployment_timestamp"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "isCleanUpDone":
            suggest = "is_clean_up_done"
        elif key == "isTestMigration":
            suggest = "is_test_migration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployedResourcesPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployedResourcesPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployedResourcesPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 context: str,
                 deployed_resource_id: str,
                 deployment_timestamp: str,
                 display_name: str,
                 id: str,
                 is_clean_up_done: bool,
                 is_test_migration: bool,
                 status: str,
                 type: str):
        """
        Class for deployed resource properties.
        :param str context: Gets or sets the context of deployed resources.
        :param str deployed_resource_id: Gets or sets the deployed resource id.
        :param str deployment_timestamp: Gets or sets the deployment timestamp.
        :param str display_name: Gets or sets the name of deployed resources.
        :param str id: Gets or sets the ID.
        :param bool is_clean_up_done: Gets or sets a value indicating whether resources are cleaned up from target.
        :param bool is_test_migration: Gets or sets a value indicating whether scenario is test migration.
        :param str status: Gets or sets the status of deployed resources.
        :param str type: Gets or sets the type of deployed resources.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "deployed_resource_id", deployed_resource_id)
        pulumi.set(__self__, "deployment_timestamp", deployment_timestamp)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_clean_up_done", is_clean_up_done)
        pulumi.set(__self__, "is_test_migration", is_test_migration)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def context(self) -> str:
        """
        Gets or sets the context of deployed resources.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="deployedResourceId")
    def deployed_resource_id(self) -> str:
        """
        Gets or sets the deployed resource id.
        """
        return pulumi.get(self, "deployed_resource_id")

    @property
    @pulumi.getter(name="deploymentTimestamp")
    def deployment_timestamp(self) -> str:
        """
        Gets or sets the deployment timestamp.
        """
        return pulumi.get(self, "deployment_timestamp")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the name of deployed resources.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCleanUpDone")
    def is_clean_up_done(self) -> bool:
        """
        Gets or sets a value indicating whether resources are cleaned up from target.
        """
        return pulumi.get(self, "is_clean_up_done")

    @property
    @pulumi.getter(name="isTestMigration")
    def is_test_migration(self) -> bool:
        """
        Gets or sets a value indicating whether scenario is test migration.
        """
        return pulumi.get(self, "is_test_migration")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Gets or sets the status of deployed resources.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Gets or sets the type of deployed resources.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DirectoryPathResponse(dict):
    """
    Second level entity for virtual directories.
    """
    def __init__(__self__, *,
                 id: str,
                 physical: Optional[str] = None,
                 virtual: Optional[str] = None):
        """
        Second level entity for virtual directories.
        :param str id: Gets the ID.
        :param str physical: Gets or sets the physical path of the directory on the web server.
        :param str virtual: Gets or sets the virtual path for the directory.
        """
        pulumi.set(__self__, "id", id)
        if physical is not None:
            pulumi.set(__self__, "physical", physical)
        if virtual is not None:
            pulumi.set(__self__, "virtual", virtual)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def physical(self) -> Optional[str]:
        """
        Gets or sets the physical path of the directory on the web server.
        """
        return pulumi.get(self, "physical")

    @property
    @pulumi.getter
    def virtual(self) -> Optional[str]:
        """
        Gets or sets the virtual path for the directory.
        """
        return pulumi.get(self, "virtual")


@pulumi.output_type
class DiskEncryptionSetResourceSettingsResponse(dict):
    """
    Defines the disk encryption set resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskEncryptionSetResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskEncryptionSetResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskEncryptionSetResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the disk encryption set resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Compute/diskEncryptionSets'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Compute/diskEncryptionSets')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Compute/diskEncryptionSets'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class EntityUptimeResponse(dict):
    """
    Entity Uptime.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysPerMonth":
            suggest = "days_per_month"
        elif key == "hoursPerDay":
            suggest = "hours_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityUptimeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityUptimeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityUptimeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_per_month: Optional[int] = None,
                 hours_per_day: Optional[int] = None):
        """
        Entity Uptime.
        :param int days_per_month: Gets the days per month.
        :param int hours_per_day: Gets the hours per day.
        """
        if days_per_month is not None:
            pulumi.set(__self__, "days_per_month", days_per_month)
        if hours_per_day is not None:
            pulumi.set(__self__, "hours_per_day", hours_per_day)

    @property
    @pulumi.getter(name="daysPerMonth")
    def days_per_month(self) -> Optional[int]:
        """
        Gets the days per month.
        """
        return pulumi.get(self, "days_per_month")

    @property
    @pulumi.getter(name="hoursPerDay")
    def hours_per_day(self) -> Optional[int]:
        """
        Gets the hours per day.
        """
        return pulumi.get(self, "hours_per_day")


@pulumi.output_type
class GmsaAuthenticationPropertiesResponse(dict):
    """
    Class for GMSA authentication details to configure Active Directory connectivity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationState":
            suggest = "configuration_state"
        elif key == "gmsaCredSpecName":
            suggest = "gmsa_cred_spec_name"
        elif key == "gmsaSecretName":
            suggest = "gmsa_secret_name"
        elif key == "adDomainControllerDns":
            suggest = "ad_domain_controller_dns"
        elif key == "adDomainFqdn":
            suggest = "ad_domain_fqdn"
        elif key == "akvProperties":
            suggest = "akv_properties"
        elif key == "domainAdminPassword":
            suggest = "domain_admin_password"
        elif key == "domainAdminUsername":
            suggest = "domain_admin_username"
        elif key == "domainControllerAddress":
            suggest = "domain_controller_address"
        elif key == "gmsaAccountName":
            suggest = "gmsa_account_name"
        elif key == "gmsaUserPassword":
            suggest = "gmsa_user_password"
        elif key == "gmsaUsername":
            suggest = "gmsa_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GmsaAuthenticationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GmsaAuthenticationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GmsaAuthenticationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_state: str,
                 gmsa_cred_spec_name: str,
                 gmsa_secret_name: str,
                 ad_domain_controller_dns: Optional[str] = None,
                 ad_domain_fqdn: Optional[str] = None,
                 akv_properties: Optional['outputs.KeyVaultSecretStorePropertiesResponse'] = None,
                 domain_admin_password: Optional[str] = None,
                 domain_admin_username: Optional[str] = None,
                 domain_controller_address: Optional[str] = None,
                 gmsa_account_name: Optional[str] = None,
                 gmsa_user_password: Optional[str] = None,
                 gmsa_username: Optional[str] = None):
        """
        Class for GMSA authentication details to configure Active Directory connectivity.
        :param str configuration_state: Gets or sets the current state of GMSA configuration.
        :param str gmsa_cred_spec_name: Gets Cred Spec Name to be used.
        :param str gmsa_secret_name: Gets name of the secret where GMSA secret is stored in the KeyVault.
        :param str ad_domain_controller_dns: Gets or sets the list of dns server that can resolve the Active Directory Domain Name/Address.
        :param str ad_domain_fqdn: Gets or sets the FQDN of the Active Directory Domain. For e.g. 'contoso.local', 'fareast.corp.microsoft.com' etc.
        :param str domain_admin_password: Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.DomainAdminUsername.
        :param str domain_admin_username: Gets or sets the name of the user having admin rights on the Active Directory Domain Controller.
        :param str domain_controller_address: Gets or sets the address of the Active Directory Domain Controller running Domain Services.
        :param str gmsa_account_name: Gets or sets the name to be used for GMSA.
        :param str gmsa_user_password: Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.GmsaUsername.
        :param str gmsa_username: Gets or sets username of the user having authorization to access GMSA on Active Directory.
        """
        pulumi.set(__self__, "configuration_state", configuration_state)
        pulumi.set(__self__, "gmsa_cred_spec_name", gmsa_cred_spec_name)
        pulumi.set(__self__, "gmsa_secret_name", gmsa_secret_name)
        if ad_domain_controller_dns is not None:
            pulumi.set(__self__, "ad_domain_controller_dns", ad_domain_controller_dns)
        if ad_domain_fqdn is not None:
            pulumi.set(__self__, "ad_domain_fqdn", ad_domain_fqdn)
        if akv_properties is not None:
            pulumi.set(__self__, "akv_properties", akv_properties)
        if domain_admin_password is not None:
            pulumi.set(__self__, "domain_admin_password", domain_admin_password)
        if domain_admin_username is not None:
            pulumi.set(__self__, "domain_admin_username", domain_admin_username)
        if domain_controller_address is not None:
            pulumi.set(__self__, "domain_controller_address", domain_controller_address)
        if gmsa_account_name is not None:
            pulumi.set(__self__, "gmsa_account_name", gmsa_account_name)
        if gmsa_user_password is not None:
            pulumi.set(__self__, "gmsa_user_password", gmsa_user_password)
        if gmsa_username is not None:
            pulumi.set(__self__, "gmsa_username", gmsa_username)

    @property
    @pulumi.getter(name="configurationState")
    def configuration_state(self) -> str:
        """
        Gets or sets the current state of GMSA configuration.
        """
        return pulumi.get(self, "configuration_state")

    @property
    @pulumi.getter(name="gmsaCredSpecName")
    def gmsa_cred_spec_name(self) -> str:
        """
        Gets Cred Spec Name to be used.
        """
        return pulumi.get(self, "gmsa_cred_spec_name")

    @property
    @pulumi.getter(name="gmsaSecretName")
    def gmsa_secret_name(self) -> str:
        """
        Gets name of the secret where GMSA secret is stored in the KeyVault.
        """
        return pulumi.get(self, "gmsa_secret_name")

    @property
    @pulumi.getter(name="adDomainControllerDns")
    def ad_domain_controller_dns(self) -> Optional[str]:
        """
        Gets or sets the list of dns server that can resolve the Active Directory Domain Name/Address.
        """
        return pulumi.get(self, "ad_domain_controller_dns")

    @property
    @pulumi.getter(name="adDomainFqdn")
    def ad_domain_fqdn(self) -> Optional[str]:
        """
        Gets or sets the FQDN of the Active Directory Domain. For e.g. 'contoso.local', 'fareast.corp.microsoft.com' etc.
        """
        return pulumi.get(self, "ad_domain_fqdn")

    @property
    @pulumi.getter(name="akvProperties")
    def akv_properties(self) -> Optional['outputs.KeyVaultSecretStorePropertiesResponse']:
        return pulumi.get(self, "akv_properties")

    @property
    @pulumi.getter(name="domainAdminPassword")
    def domain_admin_password(self) -> Optional[str]:
        """
        Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.DomainAdminUsername.
        """
        return pulumi.get(self, "domain_admin_password")

    @property
    @pulumi.getter(name="domainAdminUsername")
    def domain_admin_username(self) -> Optional[str]:
        """
        Gets or sets the name of the user having admin rights on the Active Directory Domain Controller.
        """
        return pulumi.get(self, "domain_admin_username")

    @property
    @pulumi.getter(name="domainControllerAddress")
    def domain_controller_address(self) -> Optional[str]:
        """
        Gets or sets the address of the Active Directory Domain Controller running Domain Services.
        """
        return pulumi.get(self, "domain_controller_address")

    @property
    @pulumi.getter(name="gmsaAccountName")
    def gmsa_account_name(self) -> Optional[str]:
        """
        Gets or sets the name to be used for GMSA.
        """
        return pulumi.get(self, "gmsa_account_name")

    @property
    @pulumi.getter(name="gmsaUserPassword")
    def gmsa_user_password(self) -> Optional[str]:
        """
        Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.GmsaUsername.
        """
        return pulumi.get(self, "gmsa_user_password")

    @property
    @pulumi.getter(name="gmsaUsername")
    def gmsa_username(self) -> Optional[str]:
        """
        Gets or sets username of the user having authorization to access GMSA on Active Directory.
        """
        return pulumi.get(self, "gmsa_username")


@pulumi.output_type
class GroupConnectivityInformationResponse(dict):
    """
    Defines Private link service group connectivity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerVisibleFqdns":
            suggest = "customer_visible_fqdns"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "internalFqdn":
            suggest = "internal_fqdn"
        elif key == "memberName":
            suggest = "member_name"
        elif key == "privateLinkServiceArmRegion":
            suggest = "private_link_service_arm_region"
        elif key == "redirectMapId":
            suggest = "redirect_map_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupConnectivityInformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupConnectivityInformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupConnectivityInformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_visible_fqdns: Optional[Sequence[str]] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_fqdn: Optional[str] = None,
                 member_name: Optional[str] = None,
                 private_link_service_arm_region: Optional[str] = None,
                 redirect_map_id: Optional[str] = None):
        """
        Defines Private link service group connectivity.
        """
        if customer_visible_fqdns is not None:
            pulumi.set(__self__, "customer_visible_fqdns", customer_visible_fqdns)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_fqdn is not None:
            pulumi.set(__self__, "internal_fqdn", internal_fqdn)
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)
        if private_link_service_arm_region is not None:
            pulumi.set(__self__, "private_link_service_arm_region", private_link_service_arm_region)
        if redirect_map_id is not None:
            pulumi.set(__self__, "redirect_map_id", redirect_map_id)

    @property
    @pulumi.getter(name="customerVisibleFqdns")
    def customer_visible_fqdns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "customer_visible_fqdns")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalFqdn")
    def internal_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "internal_fqdn")

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[str]:
        return pulumi.get(self, "member_name")

    @property
    @pulumi.getter(name="privateLinkServiceArmRegion")
    def private_link_service_arm_region(self) -> Optional[str]:
        return pulumi.get(self, "private_link_service_arm_region")

    @property
    @pulumi.getter(name="redirectMapId")
    def redirect_map_id(self) -> Optional[str]:
        return pulumi.get(self, "redirect_map_id")


@pulumi.output_type
class GroupPropertiesResponse(dict):
    """
    Properties of group resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAssessmentsRunning":
            suggest = "are_assessments_running"
        elif key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "groupStatus":
            suggest = "group_status"
        elif key == "machineCount":
            suggest = "machine_count"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"
        elif key == "groupType":
            suggest = "group_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_assessments_running: bool,
                 assessments: Sequence[str],
                 created_timestamp: str,
                 group_status: str,
                 machine_count: int,
                 updated_timestamp: str,
                 group_type: Optional[str] = None):
        """
        Properties of group resource.
        :param bool are_assessments_running: If the assessments are in running state.
        :param Sequence[str] assessments: List of References to Assessments created on this group.
        :param str created_timestamp: Time when this group was created. Date-Time represented in ISO-8601 format.
        :param str group_status: Whether the group has been created and is valid.
        :param int machine_count: Number of machines part of this group.
        :param str updated_timestamp: Time when this group was last updated. Date-Time represented in ISO-8601 format.
        :param str group_type: The type of group.
        """
        pulumi.set(__self__, "are_assessments_running", are_assessments_running)
        pulumi.set(__self__, "assessments", assessments)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "group_status", group_status)
        pulumi.set(__self__, "machine_count", machine_count)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)

    @property
    @pulumi.getter(name="areAssessmentsRunning")
    def are_assessments_running(self) -> bool:
        """
        If the assessments are in running state.
        """
        return pulumi.get(self, "are_assessments_running")

    @property
    @pulumi.getter
    def assessments(self) -> Sequence[str]:
        """
        List of References to Assessments created on this group.
        """
        return pulumi.get(self, "assessments")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when this group was created. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="groupStatus")
    def group_status(self) -> str:
        """
        Whether the group has been created and is valid.
        """
        return pulumi.get(self, "group_status")

    @property
    @pulumi.getter(name="machineCount")
    def machine_count(self) -> int:
        """
        Number of machines part of this group.
        """
        return pulumi.get(self, "machine_count")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Time when this group was last updated. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "updated_timestamp")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[str]:
        """
        The type of group.
        """
        return pulumi.get(self, "group_type")


@pulumi.output_type
class HealthErrorModelResponse(dict):
    """
    Health error model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "healthCategory":
            suggest = "health_category"
        elif key == "isCustomerResolvable":
            suggest = "is_customer_resolvable"
        elif key == "affectedResourceCorrelationIds":
            suggest = "affected_resource_correlation_ids"
        elif key == "affectedResourceType":
            suggest = "affected_resource_type"
        elif key == "childErrors":
            suggest = "child_errors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HealthErrorModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HealthErrorModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HealthErrorModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 causes: str,
                 code: str,
                 creation_time: str,
                 health_category: str,
                 id: str,
                 is_customer_resolvable: bool,
                 message: str,
                 recommendation: str,
                 severity: str,
                 source: str,
                 summary: str,
                 affected_resource_correlation_ids: Optional[Sequence[str]] = None,
                 affected_resource_type: Optional[str] = None,
                 child_errors: Optional[Sequence['outputs.InnerHealthErrorModelResponse']] = None):
        """
        Health error model.
        :param str category: Gets or sets the error category.
        :param str causes: Gets or sets possible causes of the error.
        :param str code: Gets or sets the error code.
        :param str creation_time: Gets or sets the error creation time.
        :param str health_category: Gets or sets the health category.
        :param str id: Gets the ID.
        :param bool is_customer_resolvable: Gets or sets a value indicating whether the error is customer resolvable.
        :param str message: Gets or sets the error message.
        :param str recommendation: Gets or sets recommended action to resolve the error.
        :param str severity: Gets or sets the error severity.
        :param str source: Gets or sets the error source.
        :param str summary: Gets or sets the error summary.
        :param Sequence[str] affected_resource_correlation_ids: Gets or sets the list of affected resource correlation Ids. This can be used to
               uniquely identify the count of items affected by a specific category and severity
               as well as count of item affected by an specific issue.
        :param str affected_resource_type: Gets or sets the type of affected resource type.
        :param Sequence['InnerHealthErrorModelResponse'] child_errors: Gets or sets a list of child health errors associated with this error.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "causes", causes)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "health_category", health_category)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_customer_resolvable", is_customer_resolvable)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "summary", summary)
        if affected_resource_correlation_ids is not None:
            pulumi.set(__self__, "affected_resource_correlation_ids", affected_resource_correlation_ids)
        if affected_resource_type is not None:
            pulumi.set(__self__, "affected_resource_type", affected_resource_type)
        if child_errors is not None:
            pulumi.set(__self__, "child_errors", child_errors)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Gets or sets the error category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def causes(self) -> str:
        """
        Gets or sets possible causes of the error.
        """
        return pulumi.get(self, "causes")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Gets or sets the error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Gets or sets the error creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="healthCategory")
    def health_category(self) -> str:
        """
        Gets or sets the health category.
        """
        return pulumi.get(self, "health_category")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCustomerResolvable")
    def is_customer_resolvable(self) -> bool:
        """
        Gets or sets a value indicating whether the error is customer resolvable.
        """
        return pulumi.get(self, "is_customer_resolvable")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Gets or sets the error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        Gets or sets recommended action to resolve the error.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Gets or sets the error severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Gets or sets the error source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def summary(self) -> str:
        """
        Gets or sets the error summary.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="affectedResourceCorrelationIds")
    def affected_resource_correlation_ids(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the list of affected resource correlation Ids. This can be used to
        uniquely identify the count of items affected by a specific category and severity
        as well as count of item affected by an specific issue.
        """
        return pulumi.get(self, "affected_resource_correlation_ids")

    @property
    @pulumi.getter(name="affectedResourceType")
    def affected_resource_type(self) -> Optional[str]:
        """
        Gets or sets the type of affected resource type.
        """
        return pulumi.get(self, "affected_resource_type")

    @property
    @pulumi.getter(name="childErrors")
    def child_errors(self) -> Optional[Sequence['outputs.InnerHealthErrorModelResponse']]:
        """
        Gets or sets a list of child health errors associated with this error.
        """
        return pulumi.get(self, "child_errors")


@pulumi.output_type
class IISAKSWorkloadDeploymentModelCustomPropertiesResponse(dict):
    """
    IIS workload instance model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "iisAksWorkloadDeploymentProperties":
            suggest = "iis_aks_workload_deployment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISAKSWorkloadDeploymentModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISAKSWorkloadDeploymentModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISAKSWorkloadDeploymentModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 iis_aks_workload_deployment_properties: Optional['outputs.IISAKSWorkloadDeploymentResponse'] = None):
        """
        IIS workload instance model custom properties.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'IISAKSWorkloadDeploymentModelCustomProperties'.
        :param 'IISAKSWorkloadDeploymentResponse' iis_aks_workload_deployment_properties: IIS AKS workload deployment.
        """
        pulumi.set(__self__, "instance_type", 'IISAKSWorkloadDeploymentModelCustomProperties')
        if iis_aks_workload_deployment_properties is not None:
            pulumi.set(__self__, "iis_aks_workload_deployment_properties", iis_aks_workload_deployment_properties)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'IISAKSWorkloadDeploymentModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="iisAksWorkloadDeploymentProperties")
    def iis_aks_workload_deployment_properties(self) -> Optional['outputs.IISAKSWorkloadDeploymentResponse']:
        """
        IIS AKS workload deployment.
        """
        return pulumi.get(self, "iis_aks_workload_deployment_properties")


@pulumi.output_type
class IISAKSWorkloadDeploymentResponse(dict):
    """
    IIS AKS workload deployment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentHistory":
            suggest = "deployment_history"
        elif key == "authenticationProperties":
            suggest = "authentication_properties"
        elif key == "automationArtifactProperties":
            suggest = "automation_artifact_properties"
        elif key == "buildContainerImages":
            suggest = "build_container_images"
        elif key == "clusterProperties":
            suggest = "cluster_properties"
        elif key == "containerImageProperties":
            suggest = "container_image_properties"
        elif key == "deploymentNamePrefix":
            suggest = "deployment_name_prefix"
        elif key == "deploymentSpec":
            suggest = "deployment_spec"
        elif key == "monitoringProperties":
            suggest = "monitoring_properties"
        elif key == "targetPlatformIdentity":
            suggest = "target_platform_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISAKSWorkloadDeploymentResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISAKSWorkloadDeploymentResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISAKSWorkloadDeploymentResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_history: Sequence['outputs.DeployedResourcesPropertiesResponse'],
                 authentication_properties: Optional['outputs.GmsaAuthenticationPropertiesResponse'] = None,
                 automation_artifact_properties: Optional['outputs.AutomationArtifactResponse'] = None,
                 bindings: Optional[Sequence['outputs.BindingResponse']] = None,
                 build_container_images: Optional[Sequence['outputs.ContainerImagePropertiesResponse']] = None,
                 cluster_properties: Optional['outputs.AKSDeploymentPropertiesResponse'] = None,
                 configurations: Optional[Sequence['outputs.WebApplicationConfigurationResponse']] = None,
                 container_image_properties: Optional['outputs.ContainerImagePropertiesResponse'] = None,
                 deployment_name_prefix: Optional[str] = None,
                 deployment_spec: Optional['outputs.AKSDeploymentSpecificationResponse'] = None,
                 directories: Optional[Sequence['outputs.WebApplicationDirectoryResponse']] = None,
                 limits: Optional['outputs.ResourceRequirementsResponse'] = None,
                 monitoring_properties: Optional['outputs.AppInsightMonitoringPropertiesResponse'] = None,
                 requests: Optional['outputs.ResourceRequirementsResponse'] = None,
                 target_platform_identity: Optional[str] = None):
        """
        IIS AKS workload deployment.
        :param Sequence['DeployedResourcesPropertiesResponse'] deployment_history: Gets or sets the deployment history.
        :param 'GmsaAuthenticationPropertiesResponse' authentication_properties: Class for GMSA authentication details to configure Active Directory connectivity.
        :param 'AutomationArtifactResponse' automation_artifact_properties: Class for automation artifact.
        :param Sequence['BindingResponse'] bindings: Gets or sets the bindings for the application.
        :param Sequence['ContainerImagePropertiesResponse'] build_container_images: Gets or sets the build container images.
        :param 'AKSDeploymentPropertiesResponse' cluster_properties: Class for AKSDeployment Properties.
        :param Sequence['WebApplicationConfigurationResponse'] configurations: Gets or sets application configuration.
        :param 'ContainerImagePropertiesResponse' container_image_properties: Class for container image properties.
        :param str deployment_name_prefix: Gets or sets the deployment name prefix.
        :param 'AKSDeploymentSpecificationResponse' deployment_spec: AKS Deployment Specification.
        :param Sequence['WebApplicationDirectoryResponse'] directories: Gets or sets application directories.
        :param 'ResourceRequirementsResponse' limits: Resource Requirements.
        :param 'AppInsightMonitoringPropertiesResponse' monitoring_properties: Class for app insight monitoring properties.
        :param 'ResourceRequirementsResponse' requests: Resource Requirements.
        :param str target_platform_identity: Gets or sets the target platform managed identity.
        """
        pulumi.set(__self__, "deployment_history", deployment_history)
        if authentication_properties is not None:
            pulumi.set(__self__, "authentication_properties", authentication_properties)
        if automation_artifact_properties is not None:
            pulumi.set(__self__, "automation_artifact_properties", automation_artifact_properties)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if build_container_images is not None:
            pulumi.set(__self__, "build_container_images", build_container_images)
        if cluster_properties is not None:
            pulumi.set(__self__, "cluster_properties", cluster_properties)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if container_image_properties is not None:
            pulumi.set(__self__, "container_image_properties", container_image_properties)
        if deployment_name_prefix is not None:
            pulumi.set(__self__, "deployment_name_prefix", deployment_name_prefix)
        if deployment_spec is not None:
            pulumi.set(__self__, "deployment_spec", deployment_spec)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if monitoring_properties is not None:
            pulumi.set(__self__, "monitoring_properties", monitoring_properties)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if target_platform_identity is not None:
            pulumi.set(__self__, "target_platform_identity", target_platform_identity)

    @property
    @pulumi.getter(name="deploymentHistory")
    def deployment_history(self) -> Sequence['outputs.DeployedResourcesPropertiesResponse']:
        """
        Gets or sets the deployment history.
        """
        return pulumi.get(self, "deployment_history")

    @property
    @pulumi.getter(name="authenticationProperties")
    def authentication_properties(self) -> Optional['outputs.GmsaAuthenticationPropertiesResponse']:
        """
        Class for GMSA authentication details to configure Active Directory connectivity.
        """
        return pulumi.get(self, "authentication_properties")

    @property
    @pulumi.getter(name="automationArtifactProperties")
    def automation_artifact_properties(self) -> Optional['outputs.AutomationArtifactResponse']:
        """
        Class for automation artifact.
        """
        return pulumi.get(self, "automation_artifact_properties")

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.BindingResponse']]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @property
    @pulumi.getter(name="buildContainerImages")
    def build_container_images(self) -> Optional[Sequence['outputs.ContainerImagePropertiesResponse']]:
        """
        Gets or sets the build container images.
        """
        return pulumi.get(self, "build_container_images")

    @property
    @pulumi.getter(name="clusterProperties")
    def cluster_properties(self) -> Optional['outputs.AKSDeploymentPropertiesResponse']:
        """
        Class for AKSDeployment Properties.
        """
        return pulumi.get(self, "cluster_properties")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.WebApplicationConfigurationResponse']]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="containerImageProperties")
    def container_image_properties(self) -> Optional['outputs.ContainerImagePropertiesResponse']:
        """
        Class for container image properties.
        """
        return pulumi.get(self, "container_image_properties")

    @property
    @pulumi.getter(name="deploymentNamePrefix")
    def deployment_name_prefix(self) -> Optional[str]:
        """
        Gets or sets the deployment name prefix.
        """
        return pulumi.get(self, "deployment_name_prefix")

    @property
    @pulumi.getter(name="deploymentSpec")
    def deployment_spec(self) -> Optional['outputs.AKSDeploymentSpecificationResponse']:
        """
        AKS Deployment Specification.
        """
        return pulumi.get(self, "deployment_spec")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.WebApplicationDirectoryResponse']]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="monitoringProperties")
    def monitoring_properties(self) -> Optional['outputs.AppInsightMonitoringPropertiesResponse']:
        """
        Class for app insight monitoring properties.
        """
        return pulumi.get(self, "monitoring_properties")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="targetPlatformIdentity")
    def target_platform_identity(self) -> Optional[str]:
        """
        Gets or sets the target platform managed identity.
        """
        return pulumi.get(self, "target_platform_identity")


@pulumi.output_type
class IISApplicationDetailsResponse(dict):
    """
    IISApplication details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationPoolName":
            suggest = "application_pool_name"
        elif key == "enable32BitApiOnWin64":
            suggest = "enable32_bit_api_on_win64"
        elif key == "managedPipelineMode":
            suggest = "managed_pipeline_mode"
        elif key == "runtimeVersion":
            suggest = "runtime_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISApplicationDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISApplicationDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISApplicationDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 application_pool_name: Optional[str] = None,
                 directories: Optional[Sequence['outputs.DirectoryPathResponse']] = None,
                 enable32_bit_api_on_win64: Optional[bool] = None,
                 managed_pipeline_mode: Optional[str] = None,
                 path: Optional['outputs.DirectoryPathResponse'] = None,
                 runtime_version: Optional[str] = None):
        """
        IISApplication details.
        :param str id: Gets the ID.
        :param str application_pool_name: Gets or sets the application pool name.
        :param Sequence['DirectoryPathResponse'] directories: Gets or sets the list of directories.
        :param bool enable32_bit_api_on_win64: Gets or sets a value indicating whether 32 bit applications are allowed to run on 64 bit.
        :param str managed_pipeline_mode: Gets or sets the managed pipeline mode.
        :param 'DirectoryPathResponse' path: Second level entity for virtual directories.
        :param str runtime_version: Gets or sets the runtime version.
        """
        pulumi.set(__self__, "id", id)
        if application_pool_name is not None:
            pulumi.set(__self__, "application_pool_name", application_pool_name)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if enable32_bit_api_on_win64 is not None:
            pulumi.set(__self__, "enable32_bit_api_on_win64", enable32_bit_api_on_win64)
        if managed_pipeline_mode is not None:
            pulumi.set(__self__, "managed_pipeline_mode", managed_pipeline_mode)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if runtime_version is not None:
            pulumi.set(__self__, "runtime_version", runtime_version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="applicationPoolName")
    def application_pool_name(self) -> Optional[str]:
        """
        Gets or sets the application pool name.
        """
        return pulumi.get(self, "application_pool_name")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.DirectoryPathResponse']]:
        """
        Gets or sets the list of directories.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter(name="enable32BitApiOnWin64")
    def enable32_bit_api_on_win64(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether 32 bit applications are allowed to run on 64 bit.
        """
        return pulumi.get(self, "enable32_bit_api_on_win64")

    @property
    @pulumi.getter(name="managedPipelineMode")
    def managed_pipeline_mode(self) -> Optional[str]:
        """
        Gets or sets the managed pipeline mode.
        """
        return pulumi.get(self, "managed_pipeline_mode")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.DirectoryPathResponse']:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> Optional[str]:
        """
        Gets or sets the runtime version.
        """
        return pulumi.get(self, "runtime_version")


@pulumi.output_type
class IISVirtualApplicationDetailsResponse(dict):
    """
    IIS virtual application details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isVirtualDirectory":
            suggest = "is_virtual_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISVirtualApplicationDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISVirtualApplicationDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISVirtualApplicationDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 is_virtual_directory: bool,
                 directories: Optional[Sequence['outputs.DirectoryPathResponse']] = None,
                 path: Optional['outputs.DirectoryPathResponse'] = None):
        """
        IIS virtual application details.
        :param str id: Gets the ID.
        :param bool is_virtual_directory: Gets a value indicating whether the application corresponds to a directory.
        :param Sequence['DirectoryPathResponse'] directories: Gets or sets the list of directories.
        :param 'DirectoryPathResponse' path: Second level entity for virtual directories.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_virtual_directory", is_virtual_directory)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isVirtualDirectory")
    def is_virtual_directory(self) -> bool:
        """
        Gets a value indicating whether the application corresponds to a directory.
        """
        return pulumi.get(self, "is_virtual_directory")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.DirectoryPathResponse']]:
        """
        Gets or sets the list of directories.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.DirectoryPathResponse']:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class IISWebApplicationResponse(dict):
    """
    IISWeb application.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "applicationName":
            suggest = "application_name"
        elif key == "applicationScratchPath":
            suggest = "application_scratch_path"
        elif key == "discoveredFrameworks":
            suggest = "discovered_frameworks"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "iisWebServer":
            suggest = "iis_web_server"
        elif key == "primaryFramework":
            suggest = "primary_framework"
        elif key == "virtualApplications":
            suggest = "virtual_applications"
        elif key == "webServerId":
            suggest = "web_server_id"
        elif key == "webServerName":
            suggest = "web_server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISWebApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISWebApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISWebApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 application_name: Optional[str] = None,
                 application_scratch_path: Optional[str] = None,
                 applications: Optional[Sequence['outputs.IISApplicationDetailsResponse']] = None,
                 bindings: Optional[Sequence['outputs.BindingResponse']] = None,
                 configurations: Optional[Sequence['outputs.WebApplicationConfigurationResponse']] = None,
                 directories: Optional[Sequence['outputs.WebApplicationDirectoryResponse']] = None,
                 discovered_frameworks: Optional[Sequence['outputs.WebApplicationFrameworkResponse']] = None,
                 display_name: Optional[str] = None,
                 iis_web_server: Optional['outputs.IISWebServerResponse'] = None,
                 limits: Optional['outputs.ResourceRequirementsResponse'] = None,
                 path: Optional['outputs.DirectoryPathResponse'] = None,
                 primary_framework: Optional['outputs.WebApplicationFrameworkResponse'] = None,
                 requests: Optional['outputs.ResourceRequirementsResponse'] = None,
                 virtual_applications: Optional[Sequence['outputs.IISVirtualApplicationDetailsResponse']] = None,
                 web_server_id: Optional[str] = None,
                 web_server_name: Optional[str] = None):
        """
        IISWeb application.
        :param str application_id: Gets or sets the web application id.
        :param str application_name: Gets or sets the web application name.
        :param str application_scratch_path: Gets or sets application scratch path.
        :param Sequence['IISApplicationDetailsResponse'] applications: Gets or sets the list of applications for the IIS web site.
        :param Sequence['BindingResponse'] bindings: Gets or sets the bindings for the application.
        :param Sequence['WebApplicationConfigurationResponse'] configurations: Gets or sets application configuration.
        :param Sequence['WebApplicationDirectoryResponse'] directories: Gets or sets application directories.
        :param Sequence['WebApplicationFrameworkResponse'] discovered_frameworks: Gets or sets the discovered frameworks of application.
        :param str display_name: Gets or sets the display name.
        :param 'IISWebServerResponse' iis_web_server: IISWeb server.
        :param 'ResourceRequirementsResponse' limits: Resource Requirements.
        :param 'DirectoryPathResponse' path: Second level entity for virtual directories.
        :param 'WebApplicationFrameworkResponse' primary_framework: Framework specific data for a web application.
        :param 'ResourceRequirementsResponse' requests: Resource Requirements.
        :param Sequence['IISVirtualApplicationDetailsResponse'] virtual_applications: Gets or sets the list of application units for the web site.
        :param str web_server_id: Gets or sets the web server id.
        :param str web_server_name: Gets or sets the web server name.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_scratch_path is not None:
            pulumi.set(__self__, "application_scratch_path", application_scratch_path)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if discovered_frameworks is not None:
            pulumi.set(__self__, "discovered_frameworks", discovered_frameworks)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if iis_web_server is not None:
            pulumi.set(__self__, "iis_web_server", iis_web_server)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if primary_framework is not None:
            pulumi.set(__self__, "primary_framework", primary_framework)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if virtual_applications is not None:
            pulumi.set(__self__, "virtual_applications", virtual_applications)
        if web_server_id is not None:
            pulumi.set(__self__, "web_server_id", web_server_id)
        if web_server_name is not None:
            pulumi.set(__self__, "web_server_name", web_server_name)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        Gets or sets the web application id.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        """
        Gets or sets the web application name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationScratchPath")
    def application_scratch_path(self) -> Optional[str]:
        """
        Gets or sets application scratch path.
        """
        return pulumi.get(self, "application_scratch_path")

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.IISApplicationDetailsResponse']]:
        """
        Gets or sets the list of applications for the IIS web site.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.BindingResponse']]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.WebApplicationConfigurationResponse']]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.WebApplicationDirectoryResponse']]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter(name="discoveredFrameworks")
    def discovered_frameworks(self) -> Optional[Sequence['outputs.WebApplicationFrameworkResponse']]:
        """
        Gets or sets the discovered frameworks of application.
        """
        return pulumi.get(self, "discovered_frameworks")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="iisWebServer")
    def iis_web_server(self) -> Optional['outputs.IISWebServerResponse']:
        """
        IISWeb server.
        """
        return pulumi.get(self, "iis_web_server")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.DirectoryPathResponse']:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="primaryFramework")
    def primary_framework(self) -> Optional['outputs.WebApplicationFrameworkResponse']:
        """
        Framework specific data for a web application.
        """
        return pulumi.get(self, "primary_framework")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.ResourceRequirementsResponse']:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="virtualApplications")
    def virtual_applications(self) -> Optional[Sequence['outputs.IISVirtualApplicationDetailsResponse']]:
        """
        Gets or sets the list of application units for the web site.
        """
        return pulumi.get(self, "virtual_applications")

    @property
    @pulumi.getter(name="webServerId")
    def web_server_id(self) -> Optional[str]:
        """
        Gets or sets the web server id.
        """
        return pulumi.get(self, "web_server_id")

    @property
    @pulumi.getter(name="webServerName")
    def web_server_name(self) -> Optional[str]:
        """
        Gets or sets the web server name.
        """
        return pulumi.get(self, "web_server_name")


@pulumi.output_type
class IISWebServerResponse(dict):
    """
    IISWeb server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "operatingSystemDetails":
            suggest = "operating_system_details"
        elif key == "rootConfigurationLocation":
            suggest = "root_configuration_location"
        elif key == "runAsAccountId":
            suggest = "run_as_account_id"
        elif key == "serverFqdn":
            suggest = "server_fqdn"
        elif key == "serverId":
            suggest = "server_id"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "webApplications":
            suggest = "web_applications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISWebServerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISWebServerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISWebServerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 operating_system_details: Optional['outputs.OperatingSystemDetailsResponse'] = None,
                 root_configuration_location: Optional[str] = None,
                 run_as_account_id: Optional[str] = None,
                 server_fqdn: Optional[str] = None,
                 server_id: Optional[str] = None,
                 server_name: Optional[str] = None,
                 version: Optional[str] = None,
                 web_applications: Optional[Sequence[str]] = None):
        """
        IISWeb server.
        :param str display_name: Gets or sets the display name.
        :param Sequence[str] ip_addresses: Gets or sets list of ip addresses.
        :param Sequence[str] machines: Gets or sets the list of machines.
        :param str root_configuration_location: Gets or sets the server root configuration location.
        :param str run_as_account_id: Gets or sets the run as account id.
        :param str server_fqdn: Gets or sets the server FQDN.
        :param str server_id: Gets or sets the web server id.
        :param str server_name: Gets or sets the web server name.
        :param str version: Gets or sets the server version.
        :param Sequence[str] web_applications: Gets or sets the list of web applications.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if operating_system_details is not None:
            pulumi.set(__self__, "operating_system_details", operating_system_details)
        if root_configuration_location is not None:
            pulumi.set(__self__, "root_configuration_location", root_configuration_location)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if server_fqdn is not None:
            pulumi.set(__self__, "server_fqdn", server_fqdn)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if web_applications is not None:
            pulumi.set(__self__, "web_applications", web_applications)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        Gets or sets list of ip addresses.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the list of machines.
        """
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter(name="operatingSystemDetails")
    def operating_system_details(self) -> Optional['outputs.OperatingSystemDetailsResponse']:
        return pulumi.get(self, "operating_system_details")

    @property
    @pulumi.getter(name="rootConfigurationLocation")
    def root_configuration_location(self) -> Optional[str]:
        """
        Gets or sets the server root configuration location.
        """
        return pulumi.get(self, "root_configuration_location")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[str]:
        """
        Gets or sets the run as account id.
        """
        return pulumi.get(self, "run_as_account_id")

    @property
    @pulumi.getter(name="serverFqdn")
    def server_fqdn(self) -> Optional[str]:
        """
        Gets or sets the server FQDN.
        """
        return pulumi.get(self, "server_fqdn")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[str]:
        """
        Gets or sets the web server id.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        Gets or sets the web server name.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Gets or sets the server version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="webApplications")
    def web_applications(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the list of web applications.
        """
        return pulumi.get(self, "web_applications")


@pulumi.output_type
class IISWorkloadInstanceModelCustomPropertiesResponse(dict):
    """
    IIS workload instance model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "fileshareName":
            suggest = "fileshare_name"
        elif key == "iisWebApplication":
            suggest = "iis_web_application"
        elif key == "webAppArmId":
            suggest = "web_app_arm_id"
        elif key == "webAppSiteName":
            suggest = "web_app_site_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IISWorkloadInstanceModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IISWorkloadInstanceModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IISWorkloadInstanceModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 container_name: Optional[str] = None,
                 fileshare_name: Optional[str] = None,
                 iis_web_application: Optional['outputs.IISWebApplicationResponse'] = None,
                 web_app_arm_id: Optional[str] = None,
                 web_app_site_name: Optional[str] = None):
        """
        IIS workload instance model custom properties.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'IISWorkloadInstanceModelCustomProperties'.
        :param str container_name: Gets or sets the container Id.
        :param str fileshare_name: Gets or sets the fileshare name.
        :param 'IISWebApplicationResponse' iis_web_application: IISWeb application.
        :param str web_app_arm_id: Gets or sets the Web application ARM id.
        :param str web_app_site_name: Gets or sets the Web application site name.
        """
        pulumi.set(__self__, "instance_type", 'IISWorkloadInstanceModelCustomProperties')
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if fileshare_name is not None:
            pulumi.set(__self__, "fileshare_name", fileshare_name)
        if iis_web_application is not None:
            pulumi.set(__self__, "iis_web_application", iis_web_application)
        if web_app_arm_id is not None:
            pulumi.set(__self__, "web_app_arm_id", web_app_arm_id)
        if web_app_site_name is not None:
            pulumi.set(__self__, "web_app_site_name", web_app_site_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'IISWorkloadInstanceModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Gets or sets the container Id.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="fileshareName")
    def fileshare_name(self) -> Optional[str]:
        """
        Gets or sets the fileshare name.
        """
        return pulumi.get(self, "fileshare_name")

    @property
    @pulumi.getter(name="iisWebApplication")
    def iis_web_application(self) -> Optional['outputs.IISWebApplicationResponse']:
        """
        IISWeb application.
        """
        return pulumi.get(self, "iis_web_application")

    @property
    @pulumi.getter(name="webAppArmId")
    def web_app_arm_id(self) -> Optional[str]:
        """
        Gets or sets the Web application ARM id.
        """
        return pulumi.get(self, "web_app_arm_id")

    @property
    @pulumi.getter(name="webAppSiteName")
    def web_app_site_name(self) -> Optional[str]:
        """
        Gets or sets the Web application site name.
        """
        return pulumi.get(self, "web_app_site_name")


@pulumi.output_type
class IdentityModelResponse(dict):
    """
    Identity model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadAuthority":
            suggest = "aad_authority"
        elif key == "applicationId":
            suggest = "application_id"
        elif key == "objectId":
            suggest = "object_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aad_authority: Optional[str] = None,
                 application_id: Optional[str] = None,
                 audience: Optional[str] = None,
                 object_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        Identity model.
        :param str aad_authority: Gets or sets the authority of the SPN with which MigrateAgent communicates to service.
        :param str application_id: Gets or sets the client/application Id of the SPN with which MigrateAgent communicates to
               service.
        :param str audience: Gets or sets the audience of the SPN with which MigrateAgent communicates to service.
        :param str object_id: Gets or sets the object Id of the SPN with which MigrateAgent communicates to service.
        :param str tenant_id: Gets or sets the tenant Id of the SPN with which MigrateAgent communicates to service.
        """
        if aad_authority is not None:
            pulumi.set(__self__, "aad_authority", aad_authority)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> Optional[str]:
        """
        Gets or sets the authority of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "aad_authority")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        Gets or sets the client/application Id of the SPN with which MigrateAgent communicates to
        service.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        """
        Gets or sets the audience of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[str]:
        """
        Gets or sets the object Id of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Gets or sets the tenant Id of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Defines the MSI properties of the Move Collection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Defines the MSI properties of the Move Collection.
        :param str principal_id: Gets or sets the principal id.
        :param str tenant_id: Gets or sets the tenant id.
        :param str type: The type of identity used for the resource mover service.
        """
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        Gets or sets the principal id.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Gets or sets the tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of identity used for the resource mover service.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ImportCollectorPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"
        elif key == "discoverySiteId":
            suggest = "discovery_site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImportCollectorPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImportCollectorPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImportCollectorPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_timestamp: str,
                 updated_timestamp: str,
                 discovery_site_id: Optional[str] = None):
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        if discovery_site_id is not None:
            pulumi.set(__self__, "discovery_site_id", discovery_site_id)

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        return pulumi.get(self, "updated_timestamp")

    @property
    @pulumi.getter(name="discoverySiteId")
    def discovery_site_id(self) -> Optional[str]:
        return pulumi.get(self, "discovery_site_id")


@pulumi.output_type
class InnerHealthErrorModelResponse(dict):
    """
    Inner health error model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "healthCategory":
            suggest = "health_category"
        elif key == "isCustomerResolvable":
            suggest = "is_customer_resolvable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InnerHealthErrorModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InnerHealthErrorModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InnerHealthErrorModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 causes: str,
                 code: str,
                 creation_time: str,
                 health_category: str,
                 id: str,
                 is_customer_resolvable: bool,
                 message: str,
                 recommendation: str,
                 severity: str,
                 source: str,
                 summary: str):
        """
        Inner health error model.
        :param str category: Gets or sets the error category.
        :param str causes: Gets or sets possible causes of the error.
        :param str code: Gets or sets the error code.
        :param str creation_time: Gets or sets the error creation time.
        :param str health_category: Gets or sets the health category.
        :param str id: Gets the ID.
        :param bool is_customer_resolvable: Gets or sets a value indicating whether the error is customer resolvable.
        :param str message: Gets or sets the error message.
        :param str recommendation: Gets or sets recommended action to resolve the error.
        :param str severity: Gets or sets the error severity.
        :param str source: Gets or sets the error source.
        :param str summary: Gets or sets the error summary.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "causes", causes)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "health_category", health_category)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_customer_resolvable", is_customer_resolvable)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Gets or sets the error category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def causes(self) -> str:
        """
        Gets or sets possible causes of the error.
        """
        return pulumi.get(self, "causes")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Gets or sets the error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Gets or sets the error creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="healthCategory")
    def health_category(self) -> str:
        """
        Gets or sets the health category.
        """
        return pulumi.get(self, "health_category")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCustomerResolvable")
    def is_customer_resolvable(self) -> bool:
        """
        Gets or sets a value indicating whether the error is customer resolvable.
        """
        return pulumi.get(self, "is_customer_resolvable")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Gets or sets the error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        Gets or sets recommended action to resolve the error.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Gets or sets the error severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Gets or sets the error source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def summary(self) -> str:
        """
        Gets or sets the error summary.
        """
        return pulumi.get(self, "summary")


@pulumi.output_type
class IpConfigurationResponse(dict):
    """
    Defines Private link IP configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "linkIdentifier":
            suggest = "link_identifier"
        elif key == "memberName":
            suggest = "member_name"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 link_identifier: Optional[str] = None,
                 member_name: Optional[str] = None,
                 private_ip_address: Optional[str] = None):
        """
        Defines Private link IP configuration.
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if link_identifier is not None:
            pulumi.set(__self__, "link_identifier", link_identifier)
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="linkIdentifier")
    def link_identifier(self) -> Optional[str]:
        return pulumi.get(self, "link_identifier")

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[str]:
        return pulumi.get(self, "member_name")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "private_ip_address")


@pulumi.output_type
class JobStatusResponse(dict):
    """
    Defines the job status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobName":
            suggest = "job_name"
        elif key == "jobProgress":
            suggest = "job_progress"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_name: str,
                 job_progress: str):
        """
        Defines the job status.
        :param str job_name: Defines the job name.
        :param str job_progress: Gets or sets the monitoring job percentage.
        """
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "job_progress", job_progress)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> str:
        """
        Defines the job name.
        """
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="jobProgress")
    def job_progress(self) -> str:
        """
        Gets or sets the monitoring job percentage.
        """
        return pulumi.get(self, "job_progress")


@pulumi.output_type
class KeyVaultResourceSettingsResponse(dict):
    """
    Defines the key vault resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVaultResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVaultResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVaultResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the key vault resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.KeyVault/vaults'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.KeyVault/vaults')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.KeyVault/vaults'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class KeyVaultSecretStorePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputType":
            suggest = "input_type"
        elif key == "keyvaultName":
            suggest = "keyvault_name"
        elif key == "managedIdentityProperties":
            suggest = "managed_identity_properties"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "secretStoreId":
            suggest = "secret_store_id"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVaultSecretStorePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVaultSecretStorePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVaultSecretStorePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_type: str,
                 keyvault_name: Optional[str] = None,
                 managed_identity_properties: Optional['outputs.ManagedIdentityPropertiesResponse'] = None,
                 resource_group: Optional[str] = None,
                 secret_store_id: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        pulumi.set(__self__, "input_type", input_type)
        if keyvault_name is not None:
            pulumi.set(__self__, "keyvault_name", keyvault_name)
        if managed_identity_properties is not None:
            pulumi.set(__self__, "managed_identity_properties", managed_identity_properties)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> str:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter(name="keyvaultName")
    def keyvault_name(self) -> Optional[str]:
        return pulumi.get(self, "keyvault_name")

    @property
    @pulumi.getter(name="managedIdentityProperties")
    def managed_identity_properties(self) -> Optional['outputs.ManagedIdentityPropertiesResponse']:
        return pulumi.get(self, "managed_identity_properties")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_store_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class LBBackendAddressPoolResourceSettingsResponse(dict):
    """
    Defines load balancer backend address pool properties.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Defines load balancer backend address pool properties.
        :param str name: Gets or sets the backend address pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the backend address pool name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LBFrontendIPConfigurationResourceSettingsResponse(dict):
    """
    Defines load balancer frontend IP configuration properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAllocationMethod":
            suggest = "private_ip_allocation_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LBFrontendIPConfigurationResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LBFrontendIPConfigurationResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LBFrontendIPConfigurationResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 private_ip_address: Optional[str] = None,
                 private_ip_allocation_method: Optional[str] = None,
                 subnet: Optional['outputs.SubnetReferenceResponse'] = None,
                 zones: Optional[str] = None):
        """
        Defines load balancer frontend IP configuration properties.
        :param str name: Gets or sets the frontend IP configuration name.
        :param str private_ip_address: Gets or sets the IP address of the Load Balancer.This is only specified if a specific
               private IP address shall be allocated from the subnet specified in subnetRef.
        :param str private_ip_allocation_method: Gets or sets PrivateIP allocation method (Static/Dynamic).
        :param 'SubnetReferenceResponse' subnet: Defines reference to subnet.
        :param str zones: Gets or sets the csv list of zones.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_allocation_method is not None:
            pulumi.set(__self__, "private_ip_allocation_method", private_ip_allocation_method)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the frontend IP configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        Gets or sets the IP address of the Load Balancer.This is only specified if a specific
        private IP address shall be allocated from the subnet specified in subnetRef.
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="privateIpAllocationMethod")
    def private_ip_allocation_method(self) -> Optional[str]:
        """
        Gets or sets PrivateIP allocation method (Static/Dynamic).
        """
        return pulumi.get(self, "private_ip_allocation_method")

    @property
    @pulumi.getter
    def subnet(self) -> Optional['outputs.SubnetReferenceResponse']:
        """
        Defines reference to subnet.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def zones(self) -> Optional[str]:
        """
        Gets or sets the csv list of zones.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class LoadBalancerBackendAddressPoolReferenceResponse(dict):
    """
    Defines reference to load balancer backend address pools.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceArmResourceId":
            suggest = "source_arm_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerBackendAddressPoolReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerBackendAddressPoolReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerBackendAddressPoolReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_arm_resource_id: str,
                 name: Optional[str] = None):
        """
        Defines reference to load balancer backend address pools.
        :param str source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        :param str name: Gets the name of the proxy resource on the target side.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> str:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets the name of the proxy resource on the target side.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LoadBalancerNatRuleReferenceResponse(dict):
    """
    Defines reference to load balancer NAT rules.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceArmResourceId":
            suggest = "source_arm_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerNatRuleReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerNatRuleReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerNatRuleReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_arm_resource_id: str,
                 name: Optional[str] = None):
        """
        Defines reference to load balancer NAT rules.
        :param str source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        :param str name: Gets the name of the proxy resource on the target side.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> str:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets the name of the proxy resource on the target side.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LoadBalancerResourceSettingsResponse(dict):
    """
    Defines the load balancer resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "backendAddressPools":
            suggest = "backend_address_pools"
        elif key == "frontendIPConfigurations":
            suggest = "frontend_ip_configurations"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 backend_address_pools: Optional[Sequence['outputs.LBBackendAddressPoolResourceSettingsResponse']] = None,
                 frontend_ip_configurations: Optional[Sequence['outputs.LBFrontendIPConfigurationResourceSettingsResponse']] = None,
                 sku: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None,
                 zones: Optional[str] = None):
        """
        Defines the load balancer resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/loadBalancers'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param Sequence['LBBackendAddressPoolResourceSettingsResponse'] backend_address_pools: Gets or sets the backend address pools of the load balancer.
        :param Sequence['LBFrontendIPConfigurationResourceSettingsResponse'] frontend_ip_configurations: Gets or sets the frontend IP configurations of the load balancer.
        :param str sku: Gets or sets load balancer sku (Basic/Standard).
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        :param str zones: Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
                precedence only if frontend IP configurations settings are not present.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/loadBalancers')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if backend_address_pools is not None:
            pulumi.set(__self__, "backend_address_pools", backend_address_pools)
        if frontend_ip_configurations is not None:
            pulumi.set(__self__, "frontend_ip_configurations", frontend_ip_configurations)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/loadBalancers'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="backendAddressPools")
    def backend_address_pools(self) -> Optional[Sequence['outputs.LBBackendAddressPoolResourceSettingsResponse']]:
        """
        Gets or sets the backend address pools of the load balancer.
        """
        return pulumi.get(self, "backend_address_pools")

    @property
    @pulumi.getter(name="frontendIPConfigurations")
    def frontend_ip_configurations(self) -> Optional[Sequence['outputs.LBFrontendIPConfigurationResourceSettingsResponse']]:
        """
        Gets or sets the frontend IP configurations of the load balancer.
        """
        return pulumi.get(self, "frontend_ip_configurations")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        Gets or sets load balancer sku (Basic/Standard).
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @property
    @pulumi.getter
    def zones(self) -> Optional[str]:
        """
        Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
         precedence only if frontend IP configurations settings are not present.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class ManagedIdentityPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "managedIdentityName":
            suggest = "managed_identity_name"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedIdentityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedIdentityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedIdentityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 managed_identity_name: Optional[str] = None,
                 principal_id: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if managed_identity_name is not None:
            pulumi.set(__self__, "managed_identity_name", managed_identity_name)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="managedIdentityName")
    def managed_identity_name(self) -> Optional[str]:
        return pulumi.get(self, "managed_identity_name")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ManualResolutionPropertiesResponse(dict):
    """
    Defines the properties for manual resolution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManualResolutionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManualResolutionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManualResolutionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_id: Optional[str] = None):
        """
        Defines the properties for manual resolution.
        :param str target_id: Gets or sets the target resource ARM ID of the dependent resource if the resource type is Manual.
        """
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        """
        Gets or sets the target resource ARM ID of the dependent resource if the resource type is Manual.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class MigrateAgentModelPropertiesResponse(dict):
    """
    MigrateAgent model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "correlationId":
            suggest = "correlation_id"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "isResponsive":
            suggest = "is_responsive"
        elif key == "lastHeartbeat":
            suggest = "last_heartbeat"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "versionNumber":
            suggest = "version_number"
        elif key == "authenticationIdentity":
            suggest = "authentication_identity"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "machineId":
            suggest = "machine_id"
        elif key == "machineName":
            suggest = "machine_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateAgentModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateAgentModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateAgentModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 correlation_id: str,
                 health_errors: Sequence['outputs.HealthErrorModelResponse'],
                 is_responsive: bool,
                 last_heartbeat: str,
                 provisioning_state: str,
                 version_number: str,
                 authentication_identity: Optional['outputs.IdentityModelResponse'] = None,
                 custom_properties: Optional['outputs.VMwareMigrateAgentModelCustomPropertiesResponse'] = None,
                 machine_id: Optional[str] = None,
                 machine_name: Optional[str] = None):
        """
        MigrateAgent model properties.
        :param str correlation_id: Gets or sets the MigrateAgent correlation Id.
        :param Sequence['HealthErrorModelResponse'] health_errors: Gets or sets the list of health errors.
        :param bool is_responsive: Gets or sets a value indicating whether MigrateAgent is responsive.
        :param str last_heartbeat: Gets or sets the time when last heartbeat was sent by the MigrateAgent.
        :param str provisioning_state: Gets or sets the provisioning state of the MigrateAgent.
        :param str version_number: Gets or sets the MigrateAgent version.
        :param 'IdentityModelResponse' authentication_identity: Identity model.
        :param 'VMwareMigrateAgentModelCustomPropertiesResponse' custom_properties: MigrateAgent model custom properties.
        :param str machine_id: Gets or sets the machine Id where MigrateAgent is running.
        :param str machine_name: Gets or sets the machine name where MigrateAgent is running.
        """
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "health_errors", health_errors)
        pulumi.set(__self__, "is_responsive", is_responsive)
        pulumi.set(__self__, "last_heartbeat", last_heartbeat)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version_number", version_number)
        if authentication_identity is not None:
            pulumi.set(__self__, "authentication_identity", authentication_identity)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if machine_id is not None:
            pulumi.set(__self__, "machine_id", machine_id)
        if machine_name is not None:
            pulumi.set(__self__, "machine_name", machine_name)

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        Gets or sets the MigrateAgent correlation Id.
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Sequence['outputs.HealthErrorModelResponse']:
        """
        Gets or sets the list of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="isResponsive")
    def is_responsive(self) -> bool:
        """
        Gets or sets a value indicating whether MigrateAgent is responsive.
        """
        return pulumi.get(self, "is_responsive")

    @property
    @pulumi.getter(name="lastHeartbeat")
    def last_heartbeat(self) -> str:
        """
        Gets or sets the time when last heartbeat was sent by the MigrateAgent.
        """
        return pulumi.get(self, "last_heartbeat")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the MigrateAgent.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> str:
        """
        Gets or sets the MigrateAgent version.
        """
        return pulumi.get(self, "version_number")

    @property
    @pulumi.getter(name="authenticationIdentity")
    def authentication_identity(self) -> Optional['outputs.IdentityModelResponse']:
        """
        Identity model.
        """
        return pulumi.get(self, "authentication_identity")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional['outputs.VMwareMigrateAgentModelCustomPropertiesResponse']:
        """
        MigrateAgent model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[str]:
        """
        Gets or sets the machine Id where MigrateAgent is running.
        """
        return pulumi.get(self, "machine_id")

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> Optional[str]:
        """
        Gets or sets the machine name where MigrateAgent is running.
        """
        return pulumi.get(self, "machine_name")


@pulumi.output_type
class MigrateAgentModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateAgentModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateAgentModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateAgentModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class MigrateProjectPropertiesResponse(dict):
    """
    Properties of a migrate project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastSummaryRefreshedTime":
            suggest = "last_summary_refreshed_time"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "refreshSummaryState":
            suggest = "refresh_summary_state"
        elif key == "registeredTools":
            suggest = "registered_tools"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "publicNetworkAccess":
            suggest = "public_network_access"
        elif key == "serviceEndpoint":
            suggest = "service_endpoint"
        elif key == "utilityStorageAccountId":
            suggest = "utility_storage_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateProjectPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateProjectPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateProjectPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_summary_refreshed_time: str,
                 private_endpoint_connections: Sequence['outputs.PrivateEndpointConnectionResponse'],
                 refresh_summary_state: str,
                 registered_tools: Sequence[str],
                 summary: Mapping[str, Any],
                 provisioning_state: Optional[str] = None,
                 public_network_access: Optional[str] = None,
                 service_endpoint: Optional[str] = None,
                 utility_storage_account_id: Optional[str] = None):
        """
        Properties of a migrate project.
        :param str last_summary_refreshed_time: Last summary refresh time.
        :param Sequence['PrivateEndpointConnectionResponse'] private_endpoint_connections: Gets the private endpoint connections.
        :param str refresh_summary_state: Refresh summary state.
        :param Sequence[str] registered_tools: Register tools inside project.
        :param Mapping[str, Union['DatabaseProjectSummaryResponse', 'ServersProjectSummaryResponse', 'ProjectSummaryResponse']] summary: Project summary.
        :param str provisioning_state: Provisioning state of the migrate project.
        :param str public_network_access: Gets or sets the state of public network access.
        :param str service_endpoint: Service endpoint.
        :param str utility_storage_account_id: Utility storage account id.
        """
        pulumi.set(__self__, "last_summary_refreshed_time", last_summary_refreshed_time)
        pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        pulumi.set(__self__, "refresh_summary_state", refresh_summary_state)
        pulumi.set(__self__, "registered_tools", registered_tools)
        pulumi.set(__self__, "summary", summary)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if service_endpoint is not None:
            pulumi.set(__self__, "service_endpoint", service_endpoint)
        if utility_storage_account_id is not None:
            pulumi.set(__self__, "utility_storage_account_id", utility_storage_account_id)

    @property
    @pulumi.getter(name="lastSummaryRefreshedTime")
    def last_summary_refreshed_time(self) -> str:
        """
        Last summary refresh time.
        """
        return pulumi.get(self, "last_summary_refreshed_time")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.PrivateEndpointConnectionResponse']:
        """
        Gets the private endpoint connections.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="refreshSummaryState")
    def refresh_summary_state(self) -> str:
        """
        Refresh summary state.
        """
        return pulumi.get(self, "refresh_summary_state")

    @property
    @pulumi.getter(name="registeredTools")
    def registered_tools(self) -> Sequence[str]:
        """
        Register tools inside project.
        """
        return pulumi.get(self, "registered_tools")

    @property
    @pulumi.getter
    def summary(self) -> Mapping[str, Any]:
        """
        Project summary.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        Provisioning state of the migrate project.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[str]:
        """
        Gets or sets the state of public network access.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> Optional[str]:
        """
        Service endpoint.
        """
        return pulumi.get(self, "service_endpoint")

    @property
    @pulumi.getter(name="utilityStorageAccountId")
    def utility_storage_account_id(self) -> Optional[str]:
        """
        Utility storage account id.
        """
        return pulumi.get(self, "utility_storage_account_id")


@pulumi.output_type
class MigrateProjectResponseTags(dict):
    """
    Gets or sets the tags.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalProperties":
            suggest = "additional_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateProjectResponseTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateProjectResponseTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateProjectResponseTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_properties: Optional[str] = None):
        """
        Gets or sets the tags.
        """
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[str]:
        return pulumi.get(self, "additional_properties")


@pulumi.output_type
class MigrationConfigurationResponse(dict):
    """
    MigrationConfiguration properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyVaultResourceId":
            suggest = "key_vault_resource_id"
        elif key == "migrationSolutionResourceId":
            suggest = "migration_solution_resource_id"
        elif key == "storageAccountResourceId":
            suggest = "storage_account_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_vault_resource_id: Optional[str] = None,
                 migration_solution_resource_id: Optional[str] = None,
                 storage_account_resource_id: Optional[str] = None):
        """
        MigrationConfiguration properties.
        :param str key_vault_resource_id: Gets or sets the key vault resource Id.
        :param str migration_solution_resource_id: Gets or sets the migration solution resource Id.
        :param str storage_account_resource_id: Gets or sets the storage account resource Id.
        """
        if key_vault_resource_id is not None:
            pulumi.set(__self__, "key_vault_resource_id", key_vault_resource_id)
        if migration_solution_resource_id is not None:
            pulumi.set(__self__, "migration_solution_resource_id", migration_solution_resource_id)
        if storage_account_resource_id is not None:
            pulumi.set(__self__, "storage_account_resource_id", storage_account_resource_id)

    @property
    @pulumi.getter(name="keyVaultResourceId")
    def key_vault_resource_id(self) -> Optional[str]:
        """
        Gets or sets the key vault resource Id.
        """
        return pulumi.get(self, "key_vault_resource_id")

    @property
    @pulumi.getter(name="migrationSolutionResourceId")
    def migration_solution_resource_id(self) -> Optional[str]:
        """
        Gets or sets the migration solution resource Id.
        """
        return pulumi.get(self, "migration_solution_resource_id")

    @property
    @pulumi.getter(name="storageAccountResourceId")
    def storage_account_resource_id(self) -> Optional[str]:
        """
        Gets or sets the storage account resource Id.
        """
        return pulumi.get(self, "storage_account_resource_id")


@pulumi.output_type
class ModernizeProjectModelPropertiesResponse(dict):
    """
    ModernizeProject properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "serviceEndpoint":
            suggest = "service_endpoint"
        elif key == "serviceResourceId":
            suggest = "service_resource_id"
        elif key == "migrationConfiguration":
            suggest = "migration_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModernizeProjectModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModernizeProjectModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModernizeProjectModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 service_endpoint: str,
                 service_resource_id: str,
                 migration_configuration: Optional['outputs.MigrationConfigurationResponse'] = None):
        """
        ModernizeProject properties.
        :param str provisioning_state: Gets or sets the provisioning state of the ModernizeProject.
        :param str service_endpoint: Gets or sets the service endpoint.
        :param str service_resource_id: Gets or sets the service resource Id.
        :param 'MigrationConfigurationResponse' migration_configuration: MigrationConfiguration properties.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "service_endpoint", service_endpoint)
        pulumi.set(__self__, "service_resource_id", service_resource_id)
        if migration_configuration is not None:
            pulumi.set(__self__, "migration_configuration", migration_configuration)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the ModernizeProject.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> str:
        """
        Gets or sets the service endpoint.
        """
        return pulumi.get(self, "service_endpoint")

    @property
    @pulumi.getter(name="serviceResourceId")
    def service_resource_id(self) -> str:
        """
        Gets or sets the service resource Id.
        """
        return pulumi.get(self, "service_resource_id")

    @property
    @pulumi.getter(name="migrationConfiguration")
    def migration_configuration(self) -> Optional['outputs.MigrationConfigurationResponse']:
        """
        MigrationConfiguration properties.
        """
        return pulumi.get(self, "migration_configuration")


@pulumi.output_type
class ModernizeProjectModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModernizeProjectModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModernizeProjectModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModernizeProjectModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class MoveCollectionPropertiesResponse(dict):
    """
    Defines the move collection properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "sourceRegion":
            suggest = "source_region"
        elif key == "targetRegion":
            suggest = "target_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MoveCollectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MoveCollectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MoveCollectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 errors: 'outputs.MoveCollectionPropertiesResponseErrors',
                 provisioning_state: str,
                 source_region: str,
                 target_region: str,
                 version: Optional[str] = None):
        """
        Defines the move collection properties.
        :param 'MoveCollectionPropertiesResponseErrors' errors: Defines the move collection errors.
        :param str provisioning_state: Defines the provisioning states.
        :param str source_region: Gets or sets the source region.
        :param str target_region: Gets or sets the target region.
        :param str version: Gets or sets the version of move collection.
        """
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "target_region", target_region)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.MoveCollectionPropertiesResponseErrors':
        """
        Defines the move collection errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Defines the provisioning states.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> str:
        """
        Gets or sets the source region.
        """
        return pulumi.get(self, "source_region")

    @property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> str:
        """
        Gets or sets the target region.
        """
        return pulumi.get(self, "target_region")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Gets or sets the version of move collection.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MoveCollectionPropertiesResponseErrors(dict):
    """
    Defines the move collection errors.
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.MoveResourceErrorBodyResponse'] = None):
        """
        Defines the move collection errors.
        :param 'MoveResourceErrorBodyResponse' properties: The move resource error body.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.MoveResourceErrorBodyResponse']:
        """
        The move resource error body.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class MoveResourceDependencyOverrideResponse(dict):
    """
    Defines the dependency override of the move resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MoveResourceDependencyOverrideResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MoveResourceDependencyOverrideResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MoveResourceDependencyOverrideResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 target_id: Optional[str] = None):
        """
        Defines the dependency override of the move resource.
        :param str id: Gets or sets the ARM ID of the dependent resource.
        :param str target_id: Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of
               the dependent resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Gets or sets the ARM ID of the dependent resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        """
        Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of
        the dependent resource.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class MoveResourceDependencyResponse(dict):
    """
    Defines the dependency of the move resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automaticResolution":
            suggest = "automatic_resolution"
        elif key == "dependencyType":
            suggest = "dependency_type"
        elif key == "isOptional":
            suggest = "is_optional"
        elif key == "manualResolution":
            suggest = "manual_resolution"
        elif key == "resolutionStatus":
            suggest = "resolution_status"
        elif key == "resolutionType":
            suggest = "resolution_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MoveResourceDependencyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MoveResourceDependencyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MoveResourceDependencyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automatic_resolution: Optional['outputs.AutomaticResolutionPropertiesResponse'] = None,
                 dependency_type: Optional[str] = None,
                 id: Optional[str] = None,
                 is_optional: Optional[str] = None,
                 manual_resolution: Optional['outputs.ManualResolutionPropertiesResponse'] = None,
                 resolution_status: Optional[str] = None,
                 resolution_type: Optional[str] = None):
        """
        Defines the dependency of the move resource.
        :param 'AutomaticResolutionPropertiesResponse' automatic_resolution: Defines the properties for automatic resolution.
        :param str dependency_type: Defines the dependency type.
        :param str id: Gets the source ARM ID of the dependent resource.
        :param str is_optional: Gets or sets a value indicating whether the dependency is optional.
        :param 'ManualResolutionPropertiesResponse' manual_resolution: Defines the properties for manual resolution.
        :param str resolution_status: Gets the dependency resolution status.
        :param str resolution_type: Defines the resolution type.
        """
        if automatic_resolution is not None:
            pulumi.set(__self__, "automatic_resolution", automatic_resolution)
        if dependency_type is not None:
            pulumi.set(__self__, "dependency_type", dependency_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_optional is not None:
            pulumi.set(__self__, "is_optional", is_optional)
        if manual_resolution is not None:
            pulumi.set(__self__, "manual_resolution", manual_resolution)
        if resolution_status is not None:
            pulumi.set(__self__, "resolution_status", resolution_status)
        if resolution_type is not None:
            pulumi.set(__self__, "resolution_type", resolution_type)

    @property
    @pulumi.getter(name="automaticResolution")
    def automatic_resolution(self) -> Optional['outputs.AutomaticResolutionPropertiesResponse']:
        """
        Defines the properties for automatic resolution.
        """
        return pulumi.get(self, "automatic_resolution")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> Optional[str]:
        """
        Defines the dependency type.
        """
        return pulumi.get(self, "dependency_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Gets the source ARM ID of the dependent resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOptional")
    def is_optional(self) -> Optional[str]:
        """
        Gets or sets a value indicating whether the dependency is optional.
        """
        return pulumi.get(self, "is_optional")

    @property
    @pulumi.getter(name="manualResolution")
    def manual_resolution(self) -> Optional['outputs.ManualResolutionPropertiesResponse']:
        """
        Defines the properties for manual resolution.
        """
        return pulumi.get(self, "manual_resolution")

    @property
    @pulumi.getter(name="resolutionStatus")
    def resolution_status(self) -> Optional[str]:
        """
        Gets the dependency resolution status.
        """
        return pulumi.get(self, "resolution_status")

    @property
    @pulumi.getter(name="resolutionType")
    def resolution_type(self) -> Optional[str]:
        """
        Defines the resolution type.
        """
        return pulumi.get(self, "resolution_type")


@pulumi.output_type
class MoveResourceErrorBodyResponse(dict):
    """
    An error response from the Azure Migrate service.
    """
    def __init__(__self__, *,
                 code: str,
                 details: Sequence['outputs.MoveResourceErrorBodyResponse'],
                 message: str,
                 target: str):
        """
        An error response from the Azure Migrate service.
        :param str code: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        :param Sequence['MoveResourceErrorBodyResponse'] details: A list of additional details about the error.
        :param str message: A message describing the error, intended to be suitable for display in a user interface.
        :param str target: The target of the particular error. For example, the name of the property in error.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.MoveResourceErrorBodyResponse']:
        """
        A list of additional details about the error.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A message describing the error, intended to be suitable for display in a user interface.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The target of the particular error. For example, the name of the property in error.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class MoveResourceErrorResponse(dict):
    """
    An error response from the azure resource mover service.
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.MoveResourceErrorBodyResponse'] = None):
        """
        An error response from the azure resource mover service.
        :param 'MoveResourceErrorBodyResponse' properties: The move resource error body.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.MoveResourceErrorBodyResponse']:
        """
        The move resource error body.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class MoveResourcePropertiesResponse(dict):
    """
    Defines the move resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dependsOn":
            suggest = "depends_on"
        elif key == "isResolveRequired":
            suggest = "is_resolve_required"
        elif key == "moveStatus":
            suggest = "move_status"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceResourceSettings":
            suggest = "source_resource_settings"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "dependsOnOverrides":
            suggest = "depends_on_overrides"
        elif key == "existingTargetId":
            suggest = "existing_target_id"
        elif key == "resourceSettings":
            suggest = "resource_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MoveResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MoveResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MoveResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 depends_on: Sequence['outputs.MoveResourceDependencyResponse'],
                 errors: 'outputs.MoveResourcePropertiesResponseErrors',
                 is_resolve_required: bool,
                 move_status: 'outputs.MoveResourcePropertiesResponseMoveStatus',
                 provisioning_state: str,
                 source_id: str,
                 source_resource_settings: Any,
                 target_id: str,
                 depends_on_overrides: Optional[Sequence['outputs.MoveResourceDependencyOverrideResponse']] = None,
                 existing_target_id: Optional[str] = None,
                 resource_settings: Optional[Any] = None):
        """
        Defines the move resource properties.
        :param Sequence['MoveResourceDependencyResponse'] depends_on: Gets or sets the move resource dependencies.
        :param 'MoveResourcePropertiesResponseErrors' errors: Defines the move resource errors.
        :param bool is_resolve_required: Gets a value indicating whether the resolve action is required over the move collection.
        :param 'MoveResourcePropertiesResponseMoveStatus' move_status: Defines the move resource status.
        :param str provisioning_state: Defines the provisioning states.
        :param str source_id: Gets or sets the Source ARM Id of the resource.
        :param Union['AvailabilitySetResourceSettingsResponse', 'DiskEncryptionSetResourceSettingsResponse', 'KeyVaultResourceSettingsResponse', 'LoadBalancerResourceSettingsResponse', 'NetworkInterfaceResourceSettingsResponse', 'NetworkSecurityGroupResourceSettingsResponse', 'PublicIPAddressResourceSettingsResponse', 'ResourceGroupResourceSettingsResponse', 'SqlDatabaseResourceSettingsResponse', 'SqlElasticPoolResourceSettingsResponse', 'SqlServerResourceSettingsResponse', 'VirtualMachineResourceSettingsResponse', 'VirtualNetworkResourceSettingsResponse'] source_resource_settings: Gets or sets the source resource settings.
        :param str target_id: Gets or sets the Target ARM Id of the resource.
        :param Sequence['MoveResourceDependencyOverrideResponse'] depends_on_overrides: Gets or sets the move resource dependencies overrides.
        :param str existing_target_id: Gets or sets the existing target ARM Id of the resource.
        :param Union['AvailabilitySetResourceSettingsResponse', 'DiskEncryptionSetResourceSettingsResponse', 'KeyVaultResourceSettingsResponse', 'LoadBalancerResourceSettingsResponse', 'NetworkInterfaceResourceSettingsResponse', 'NetworkSecurityGroupResourceSettingsResponse', 'PublicIPAddressResourceSettingsResponse', 'ResourceGroupResourceSettingsResponse', 'SqlDatabaseResourceSettingsResponse', 'SqlElasticPoolResourceSettingsResponse', 'SqlServerResourceSettingsResponse', 'VirtualMachineResourceSettingsResponse', 'VirtualNetworkResourceSettingsResponse'] resource_settings: Gets or sets the resource settings.
        """
        pulumi.set(__self__, "depends_on", depends_on)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "is_resolve_required", is_resolve_required)
        pulumi.set(__self__, "move_status", move_status)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_resource_settings", source_resource_settings)
        pulumi.set(__self__, "target_id", target_id)
        if depends_on_overrides is not None:
            pulumi.set(__self__, "depends_on_overrides", depends_on_overrides)
        if existing_target_id is not None:
            pulumi.set(__self__, "existing_target_id", existing_target_id)
        if resource_settings is not None:
            pulumi.set(__self__, "resource_settings", resource_settings)

    @property
    @pulumi.getter(name="dependsOn")
    def depends_on(self) -> Sequence['outputs.MoveResourceDependencyResponse']:
        """
        Gets or sets the move resource dependencies.
        """
        return pulumi.get(self, "depends_on")

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.MoveResourcePropertiesResponseErrors':
        """
        Defines the move resource errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="isResolveRequired")
    def is_resolve_required(self) -> bool:
        """
        Gets a value indicating whether the resolve action is required over the move collection.
        """
        return pulumi.get(self, "is_resolve_required")

    @property
    @pulumi.getter(name="moveStatus")
    def move_status(self) -> 'outputs.MoveResourcePropertiesResponseMoveStatus':
        """
        Defines the move resource status.
        """
        return pulumi.get(self, "move_status")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Defines the provisioning states.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        Gets or sets the Source ARM Id of the resource.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceResourceSettings")
    def source_resource_settings(self) -> Any:
        """
        Gets or sets the source resource settings.
        """
        return pulumi.get(self, "source_resource_settings")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> str:
        """
        Gets or sets the Target ARM Id of the resource.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="dependsOnOverrides")
    def depends_on_overrides(self) -> Optional[Sequence['outputs.MoveResourceDependencyOverrideResponse']]:
        """
        Gets or sets the move resource dependencies overrides.
        """
        return pulumi.get(self, "depends_on_overrides")

    @property
    @pulumi.getter(name="existingTargetId")
    def existing_target_id(self) -> Optional[str]:
        """
        Gets or sets the existing target ARM Id of the resource.
        """
        return pulumi.get(self, "existing_target_id")

    @property
    @pulumi.getter(name="resourceSettings")
    def resource_settings(self) -> Optional[Any]:
        """
        Gets or sets the resource settings.
        """
        return pulumi.get(self, "resource_settings")


@pulumi.output_type
class MoveResourcePropertiesResponseErrors(dict):
    """
    Defines the move resource errors.
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.MoveResourceErrorBodyResponse'] = None):
        """
        Defines the move resource errors.
        :param 'MoveResourceErrorBodyResponse' properties: The move resource error body.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.MoveResourceErrorBodyResponse']:
        """
        The move resource error body.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class MoveResourcePropertiesResponseMoveStatus(dict):
    """
    Defines the move resource status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moveState":
            suggest = "move_state"
        elif key == "jobStatus":
            suggest = "job_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MoveResourcePropertiesResponseMoveStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MoveResourcePropertiesResponseMoveStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MoveResourcePropertiesResponseMoveStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 move_state: str,
                 errors: Optional['outputs.MoveResourceErrorResponse'] = None,
                 job_status: Optional['outputs.JobStatusResponse'] = None):
        """
        Defines the move resource status.
        :param str move_state: Defines the MoveResource states.
        :param 'MoveResourceErrorResponse' errors: An error response from the azure resource mover service.
        :param 'JobStatusResponse' job_status: Defines the job status.
        """
        pulumi.set(__self__, "move_state", move_state)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if job_status is not None:
            pulumi.set(__self__, "job_status", job_status)

    @property
    @pulumi.getter(name="moveState")
    def move_state(self) -> str:
        """
        Defines the MoveResource states.
        """
        return pulumi.get(self, "move_state")

    @property
    @pulumi.getter
    def errors(self) -> Optional['outputs.MoveResourceErrorResponse']:
        """
        An error response from the azure resource mover service.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> Optional['outputs.JobStatusResponse']:
        """
        Defines the job status.
        """
        return pulumi.get(self, "job_status")


@pulumi.output_type
class NetworkInterfaceResourceSettingsResponse(dict):
    """
    Defines the network interface resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "enableAcceleratedNetworking":
            suggest = "enable_accelerated_networking"
        elif key == "ipConfigurations":
            suggest = "ip_configurations"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 enable_accelerated_networking: Optional[bool] = None,
                 ip_configurations: Optional[Sequence['outputs.NicIpConfigurationResourceSettingsResponse']] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the network interface resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/networkInterfaces'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param bool enable_accelerated_networking: Gets or sets a value indicating whether accelerated networking is enabled.
        :param Sequence['NicIpConfigurationResourceSettingsResponse'] ip_configurations: Gets or sets the IP configurations of the NIC.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/networkInterfaces')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if enable_accelerated_networking is not None:
            pulumi.set(__self__, "enable_accelerated_networking", enable_accelerated_networking)
        if ip_configurations is not None:
            pulumi.set(__self__, "ip_configurations", ip_configurations)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/networkInterfaces'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="enableAcceleratedNetworking")
    def enable_accelerated_networking(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether accelerated networking is enabled.
        """
        return pulumi.get(self, "enable_accelerated_networking")

    @property
    @pulumi.getter(name="ipConfigurations")
    def ip_configurations(self) -> Optional[Sequence['outputs.NicIpConfigurationResourceSettingsResponse']]:
        """
        Gets or sets the IP configurations of the NIC.
        """
        return pulumi.get(self, "ip_configurations")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class NetworkSecurityGroupResourceSettingsResponse(dict):
    """
    Defines the NSG resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "securityRules":
            suggest = "security_rules"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityGroupResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityGroupResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityGroupResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 security_rules: Optional[Sequence['outputs.NsgSecurityRuleResponse']] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the NSG resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/networkSecurityGroups'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param Sequence['NsgSecurityRuleResponse'] security_rules: Gets or sets Security rules of network security group.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/networkSecurityGroups')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if security_rules is not None:
            pulumi.set(__self__, "security_rules", security_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/networkSecurityGroups'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="securityRules")
    def security_rules(self) -> Optional[Sequence['outputs.NsgSecurityRuleResponse']]:
        """
        Gets or sets Security rules of network security group.
        """
        return pulumi.get(self, "security_rules")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class NicIpConfigurationResourceSettingsResponse(dict):
    """
    Defines NIC IP configuration properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadBalancerBackendAddressPools":
            suggest = "load_balancer_backend_address_pools"
        elif key == "loadBalancerNatRules":
            suggest = "load_balancer_nat_rules"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAllocationMethod":
            suggest = "private_ip_allocation_method"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicIpConfigurationResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicIpConfigurationResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicIpConfigurationResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_balancer_backend_address_pools: Optional[Sequence['outputs.LoadBalancerBackendAddressPoolReferenceResponse']] = None,
                 load_balancer_nat_rules: Optional[Sequence['outputs.LoadBalancerNatRuleReferenceResponse']] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 private_ip_address: Optional[str] = None,
                 private_ip_allocation_method: Optional[str] = None,
                 public_ip: Optional['outputs.PublicIpReferenceResponse'] = None,
                 subnet: Optional['outputs.SubnetReferenceResponse'] = None):
        """
        Defines NIC IP configuration properties.
        :param Sequence['LoadBalancerBackendAddressPoolReferenceResponse'] load_balancer_backend_address_pools: Gets or sets the references of the load balancer backend address pools.
        :param Sequence['LoadBalancerNatRuleReferenceResponse'] load_balancer_nat_rules: Gets or sets the references of the load balancer NAT rules.
        :param str name: Gets or sets the IP configuration name.
        :param bool primary: Gets or sets a value indicating whether this IP configuration is the primary.
        :param str private_ip_address: Gets or sets the private IP address of the network interface IP Configuration.
        :param str private_ip_allocation_method: Gets or sets the private IP address allocation method.
        :param 'PublicIpReferenceResponse' public_ip: Defines reference to a public IP.
        :param 'SubnetReferenceResponse' subnet: Defines reference to subnet.
        """
        if load_balancer_backend_address_pools is not None:
            pulumi.set(__self__, "load_balancer_backend_address_pools", load_balancer_backend_address_pools)
        if load_balancer_nat_rules is not None:
            pulumi.set(__self__, "load_balancer_nat_rules", load_balancer_nat_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_allocation_method is not None:
            pulumi.set(__self__, "private_ip_allocation_method", private_ip_allocation_method)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="loadBalancerBackendAddressPools")
    def load_balancer_backend_address_pools(self) -> Optional[Sequence['outputs.LoadBalancerBackendAddressPoolReferenceResponse']]:
        """
        Gets or sets the references of the load balancer backend address pools.
        """
        return pulumi.get(self, "load_balancer_backend_address_pools")

    @property
    @pulumi.getter(name="loadBalancerNatRules")
    def load_balancer_nat_rules(self) -> Optional[Sequence['outputs.LoadBalancerNatRuleReferenceResponse']]:
        """
        Gets or sets the references of the load balancer NAT rules.
        """
        return pulumi.get(self, "load_balancer_nat_rules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the IP configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether this IP configuration is the primary.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        Gets or sets the private IP address of the network interface IP Configuration.
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="privateIpAllocationMethod")
    def private_ip_allocation_method(self) -> Optional[str]:
        """
        Gets or sets the private IP address allocation method.
        """
        return pulumi.get(self, "private_ip_allocation_method")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional['outputs.PublicIpReferenceResponse']:
        """
        Defines reference to a public IP.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def subnet(self) -> Optional['outputs.SubnetReferenceResponse']:
        """
        Defines reference to subnet.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class NsgReferenceResponse(dict):
    """
    Defines reference to NSG.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceArmResourceId":
            suggest = "source_arm_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsgReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsgReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsgReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_arm_resource_id: str):
        """
        Defines reference to NSG.
        :param str source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> str:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")


@pulumi.output_type
class NsgSecurityRuleResponse(dict):
    """
    Security Rule data model for Network Security Groups.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAddressPrefix":
            suggest = "destination_address_prefix"
        elif key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourceAddressPrefix":
            suggest = "source_address_prefix"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsgSecurityRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsgSecurityRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsgSecurityRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: Optional[str] = None,
                 description: Optional[str] = None,
                 destination_address_prefix: Optional[str] = None,
                 destination_port_range: Optional[str] = None,
                 direction: Optional[str] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 protocol: Optional[str] = None,
                 source_address_prefix: Optional[str] = None,
                 source_port_range: Optional[str] = None):
        """
        Security Rule data model for Network Security Groups.
        :param str access: Gets or sets whether network traffic is allowed or denied.
               Possible values are “Allow” and “Deny”.
        :param str description: Gets or sets a description for this rule. Restricted to 140 chars.
        :param str destination_address_prefix: Gets or sets destination address prefix. CIDR or source IP range.
                A “*” can also be used to match all source IPs. Default tags such
               as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
        :param str destination_port_range: Gets or sets Destination Port or Range. Integer or range between
               0 and 65535. A “*” can also be used to match all ports.
        :param str direction: Gets or sets the direction of the rule.InBound or Outbound. The
               direction specifies if rule will be evaluated on incoming or outgoing traffic.
        :param str name: Gets or sets the Security rule name.
        :param int priority: Gets or sets the priority of the rule. The value can be between
               100 and 4096. The priority number must be unique for each rule in the collection.
               The lower the priority number, the higher the priority of the rule.
        :param str protocol: Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*).
        :param str source_address_prefix: Gets or sets source address prefix. CIDR or source IP range. A
               “*” can also be used to match all source IPs.  Default tags such as ‘VirtualNetwork’,
               ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
               rule, specifies where network traffic originates from.
        :param str source_port_range: Gets or sets Source Port or Range. Integer or range between 0 and
               65535. A “*” can also be used to match all ports.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_address_prefix is not None:
            pulumi.set(__self__, "destination_address_prefix", destination_address_prefix)
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_address_prefix is not None:
            pulumi.set(__self__, "source_address_prefix", source_address_prefix)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        Gets or sets whether network traffic is allowed or denied.
        Possible values are “Allow” and “Deny”.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Gets or sets a description for this rule. Restricted to 140 chars.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationAddressPrefix")
    def destination_address_prefix(self) -> Optional[str]:
        """
        Gets or sets destination address prefix. CIDR or source IP range.
         A “*” can also be used to match all source IPs. Default tags such
        as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
        """
        return pulumi.get(self, "destination_address_prefix")

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional[str]:
        """
        Gets or sets Destination Port or Range. Integer or range between
        0 and 65535. A “*” can also be used to match all ports.
        """
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Gets or sets the direction of the rule.InBound or Outbound. The
        direction specifies if rule will be evaluated on incoming or outgoing traffic.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the Security rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Gets or sets the priority of the rule. The value can be between
        100 and 4096. The priority number must be unique for each rule in the collection.
        The lower the priority number, the higher the priority of the rule.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> Optional[str]:
        """
        Gets or sets source address prefix. CIDR or source IP range. A
        “*” can also be used to match all source IPs.  Default tags such as ‘VirtualNetwork’,
        ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
        rule, specifies where network traffic originates from.
        """
        return pulumi.get(self, "source_address_prefix")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[str]:
        """
        Gets or sets Source Port or Range. Integer or range between 0 and
        65535. A “*” can also be used to match all ports.
        """
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class OperatingSystemDetailsResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osArchitecture":
            suggest = "os_architecture"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osVersion":
            suggest = "os_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OperatingSystemDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OperatingSystemDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OperatingSystemDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os: Optional[str] = None,
                 os_architecture: Optional[str] = None,
                 os_name: Optional[str] = None,
                 os_version: Optional[str] = None):
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_architecture is not None:
            pulumi.set(__self__, "os_architecture", os_architecture)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osArchitecture")
    def os_architecture(self) -> Optional[str]:
        return pulumi.get(self, "os_architecture")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[str]:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        return pulumi.get(self, "os_version")


@pulumi.output_type
class PortMappingResponse(dict):
    """
    WebApplication port mapping.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalPort":
            suggest = "external_port"
        elif key == "internalPort":
            suggest = "internal_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortMappingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortMappingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortMappingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_port: Optional[int] = None,
                 internal_port: Optional[int] = None):
        """
        WebApplication port mapping.
        :param int external_port: Gets or sets the External Port.
        :param int internal_port: Gets or sets the Internal Port.
        """
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if internal_port is not None:
            pulumi.set(__self__, "internal_port", internal_port)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[int]:
        """
        Gets or sets the External Port.
        """
        return pulumi.get(self, "external_port")

    @property
    @pulumi.getter(name="internalPort")
    def internal_port(self) -> Optional[int]:
        """
        Gets or sets the Internal Port.
        """
        return pulumi.get(self, "internal_port")


@pulumi.output_type
class PrivateEndpointConnectionPropertiesResponse(dict):
    """
    Private endpoint connection properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_endpoint: 'outputs.ResourceIdResponse',
                 provisioning_state: str,
                 private_link_service_connection_state: Optional['outputs.PrivateLinkServiceConnectionStateResponse'] = None):
        """
        Private endpoint connection properties.
        :param 'ResourceIdResponse' private_endpoint: ARM id for the private endpoint resource corresponding to the connection.
        :param str provisioning_state: Indicates whether there is an ongoing operation on the private endpoint.
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: State of the private endpoint connection.
        """
        pulumi.set(__self__, "private_endpoint", private_endpoint)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> 'outputs.ResourceIdResponse':
        """
        ARM id for the private endpoint resource corresponding to the connection.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Indicates whether there is an ongoing operation on the private endpoint.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional['outputs.PrivateLinkServiceConnectionStateResponse']:
        """
        State of the private endpoint connection.
        """
        return pulumi.get(self, "private_link_service_connection_state")


@pulumi.output_type
class PrivateEndpointConnectionProxyPropertiesResponse(dict):
    """
    Properties of a private endpoint connection proxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remotePrivateEndpoint":
            suggest = "remote_private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionProxyPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionProxyPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionProxyPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 remote_private_endpoint: 'outputs.PrivateEndpointDetailsResponse',
                 status: str):
        """
        Properties of a private endpoint connection proxy.
        :param 'PrivateEndpointDetailsResponse' remote_private_endpoint: Defines Private endpoint additional details.
        """
        pulumi.set(__self__, "remote_private_endpoint", remote_private_endpoint)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="remotePrivateEndpoint")
    def remote_private_endpoint(self) -> 'outputs.PrivateEndpointDetailsResponse':
        """
        Defines Private endpoint additional details.
        """
        return pulumi.get(self, "remote_private_endpoint")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    A private endpoint connection for a project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eTag":
            suggest = "e_tag"
        elif key == "groupIds":
            suggest = "group_ids"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemData":
            suggest = "system_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 name: str,
                 properties: 'outputs.PrivateEndpointConnectionPropertiesResponse',
                 type: str,
                 e_tag: Optional[str] = None,
                 group_ids: Optional[Sequence[str]] = None,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None,
                 private_link_service_connection_state: Optional['outputs.PrivateLinkServiceConnectionStateResponse'] = None,
                 provisioning_state: Optional[str] = None,
                 system_data: Optional['outputs.SystemDataResponse'] = None):
        """
        A private endpoint connection for a project.
        :param str id: Path reference to this private endpoint endpoint connection. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}
        :param str name: Name of the private endpoint endpoint connection.
        :param 'PrivateEndpointConnectionPropertiesResponse' properties: Properties of the private endpoint endpoint connection.
        :param str type: Type of the object = [Microsoft.Migrate/assessmentProjects/privateEndpointConnections].
        :param str e_tag: For optimistic concurrency control.
        :param Sequence[str] group_ids: The group ids for the private endpoint resource.
        :param 'PrivateEndpointResponse' private_endpoint: The private endpoint resource.
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param str provisioning_state: The provisioning state of the private endpoint connection resource.
        :param 'SystemDataResponse' system_data: Metadata pertaining to creation and last modification of the resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)
        if e_tag is not None:
            pulumi.set(__self__, "e_tag", e_tag)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data is not None:
            pulumi.set(__self__, "system_data", system_data)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Path reference to this private endpoint endpoint connection. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the private endpoint endpoint connection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.PrivateEndpointConnectionPropertiesResponse':
        """
        Properties of the private endpoint endpoint connection.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object = [Microsoft.Migrate/assessmentProjects/privateEndpointConnections].
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> Optional[str]:
        """
        For optimistic concurrency control.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        """
        The group ids for the private endpoint resource.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The private endpoint resource.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional['outputs.PrivateLinkServiceConnectionStateResponse']:
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        The provisioning state of the private endpoint connection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> Optional['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")


@pulumi.output_type
class PrivateEndpointDetailsResponse(dict):
    """
    Defines Private endpoint additional details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionDetails":
            suggest = "connection_details"
        elif key == "manualPrivateLinkServiceConnections":
            suggest = "manual_private_link_service_connections"
        elif key == "privateLinkServiceConnections":
            suggest = "private_link_service_connections"
        elif key == "privateLinkServiceProxies":
            suggest = "private_link_service_proxies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_details: Optional[Sequence['outputs.IpConfigurationResponse']] = None,
                 id: Optional[str] = None,
                 manual_private_link_service_connections: Optional[Sequence['outputs.PrivateLinkServiceConnectionResponse']] = None,
                 private_link_service_connections: Optional[Sequence['outputs.PrivateLinkServiceConnectionResponse']] = None,
                 private_link_service_proxies: Optional[Sequence['outputs.PrivateLinkServiceProxyResponse']] = None):
        """
        Defines Private endpoint additional details.
        """
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_private_link_service_connections is not None:
            pulumi.set(__self__, "manual_private_link_service_connections", manual_private_link_service_connections)
        if private_link_service_connections is not None:
            pulumi.set(__self__, "private_link_service_connections", private_link_service_connections)
        if private_link_service_proxies is not None:
            pulumi.set(__self__, "private_link_service_proxies", private_link_service_proxies)

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[Sequence['outputs.IpConfigurationResponse']]:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manualPrivateLinkServiceConnections")
    def manual_private_link_service_connections(self) -> Optional[Sequence['outputs.PrivateLinkServiceConnectionResponse']]:
        return pulumi.get(self, "manual_private_link_service_connections")

    @property
    @pulumi.getter(name="privateLinkServiceConnections")
    def private_link_service_connections(self) -> Optional[Sequence['outputs.PrivateLinkServiceConnectionResponse']]:
        return pulumi.get(self, "private_link_service_connections")

    @property
    @pulumi.getter(name="privateLinkServiceProxies")
    def private_link_service_proxies(self) -> Optional[Sequence['outputs.PrivateLinkServiceProxyResponse']]:
        return pulumi.get(self, "private_link_service_proxies")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The private endpoint resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        The private endpoint resource.
        :param str id: The ARM identifier for private endpoint.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ARM identifier for private endpoint.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionResponse(dict):
    """
    Defines Private link service connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "requestMessage":
            suggest = "request_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 request_message: Optional[str] = None):
        """
        Defines Private link service connection.
        """
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_message is not None:
            pulumi.set(__self__, "request_message", request_message)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestMessage")
    def request_message(self) -> Optional[str]:
        return pulumi.get(self, "request_message")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    State of a private endpoint connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[str] = None,
                 description: Optional[str] = None,
                 status: Optional[str] = None):
        """
        State of a private endpoint connection.
        :param str actions_required: Actions required on the private endpoint connection.
        :param str description: Description of the private endpoint connection.
        :param str status: Connection status of the private endpoint connection.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[str]:
        """
        Actions required on the private endpoint connection.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the private endpoint connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Connection status of the private endpoint connection.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PrivateLinkServiceProxyResponse(dict):
    """
    Defines Private link service proxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupConnectivityInformation":
            suggest = "group_connectivity_information"
        elif key == "remotePrivateEndpointConnection":
            suggest = "remote_private_endpoint_connection"
        elif key == "remotePrivateLinkServiceConnectionState":
            suggest = "remote_private_link_service_connection_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceProxyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceProxyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceProxyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_connectivity_information: Optional[Sequence['outputs.GroupConnectivityInformationResponse']] = None,
                 id: Optional[str] = None,
                 remote_private_endpoint_connection: Optional['outputs.ResourceIdResponse'] = None,
                 remote_private_link_service_connection_state: Optional['outputs.PrivateLinkServiceConnectionStateResponse'] = None):
        """
        Defines Private link service proxy.
        :param 'ResourceIdResponse' remote_private_endpoint_connection: Defines resource ID of a private endpoint connection.
        :param 'PrivateLinkServiceConnectionStateResponse' remote_private_link_service_connection_state: Private endpoint connection state.
        """
        if group_connectivity_information is not None:
            pulumi.set(__self__, "group_connectivity_information", group_connectivity_information)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if remote_private_endpoint_connection is not None:
            pulumi.set(__self__, "remote_private_endpoint_connection", remote_private_endpoint_connection)
        if remote_private_link_service_connection_state is not None:
            pulumi.set(__self__, "remote_private_link_service_connection_state", remote_private_link_service_connection_state)

    @property
    @pulumi.getter(name="groupConnectivityInformation")
    def group_connectivity_information(self) -> Optional[Sequence['outputs.GroupConnectivityInformationResponse']]:
        return pulumi.get(self, "group_connectivity_information")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="remotePrivateEndpointConnection")
    def remote_private_endpoint_connection(self) -> Optional['outputs.ResourceIdResponse']:
        """
        Defines resource ID of a private endpoint connection.
        """
        return pulumi.get(self, "remote_private_endpoint_connection")

    @property
    @pulumi.getter(name="remotePrivateLinkServiceConnectionState")
    def remote_private_link_service_connection_state(self) -> Optional['outputs.PrivateLinkServiceConnectionStateResponse']:
        """
        Private endpoint connection state.
        """
        return pulumi.get(self, "remote_private_link_service_connection_state")


@pulumi.output_type
class ProjectPropertiesResponse(dict):
    """
    Properties of a project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "lastAssessmentTimestamp":
            suggest = "last_assessment_timestamp"
        elif key == "numberOfAssessments":
            suggest = "number_of_assessments"
        elif key == "numberOfGroups":
            suggest = "number_of_groups"
        elif key == "numberOfMachines":
            suggest = "number_of_machines"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "serviceEndpoint":
            suggest = "service_endpoint"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"
        elif key == "assessmentSolutionId":
            suggest = "assessment_solution_id"
        elif key == "customerStorageAccountArmId":
            suggest = "customer_storage_account_arm_id"
        elif key == "customerWorkspaceId":
            suggest = "customer_workspace_id"
        elif key == "customerWorkspaceLocation":
            suggest = "customer_workspace_location"
        elif key == "projectStatus":
            suggest = "project_status"
        elif key == "publicNetworkAccess":
            suggest = "public_network_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_timestamp: str,
                 last_assessment_timestamp: str,
                 number_of_assessments: int,
                 number_of_groups: int,
                 number_of_machines: int,
                 private_endpoint_connections: Sequence['outputs.PrivateEndpointConnectionResponse'],
                 provisioning_state: str,
                 service_endpoint: str,
                 updated_timestamp: str,
                 assessment_solution_id: Optional[str] = None,
                 customer_storage_account_arm_id: Optional[str] = None,
                 customer_workspace_id: Optional[str] = None,
                 customer_workspace_location: Optional[str] = None,
                 project_status: Optional[str] = None,
                 public_network_access: Optional[str] = None):
        """
        Properties of a project.
        :param str created_timestamp: Time when this project was created. Date-Time represented in ISO-8601 format.
        :param str last_assessment_timestamp: Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.
        :param int number_of_assessments: Number of assessments created in the project.
        :param int number_of_groups: Number of groups created in the project.
        :param int number_of_machines: Number of machines in the project.
        :param Sequence['PrivateEndpointConnectionResponse'] private_endpoint_connections: The list of private endpoint connections to the project.
        :param str provisioning_state: Provisioning state of the project.
        :param str service_endpoint: Endpoint at which the collector agent can call agent REST API.
        :param str updated_timestamp: Time when this project was last updated. Date-Time represented in ISO-8601 format.
        :param str assessment_solution_id: Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
        :param str customer_storage_account_arm_id: The ARM id of the storage account used for interactions when public access is disabled.
        :param str customer_workspace_id: The ARM id of service map workspace created by customer.
        :param str customer_workspace_location: Location of service map workspace created by customer.
        :param str project_status: Assessment project status.
        :param str public_network_access: This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
        """
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "last_assessment_timestamp", last_assessment_timestamp)
        pulumi.set(__self__, "number_of_assessments", number_of_assessments)
        pulumi.set(__self__, "number_of_groups", number_of_groups)
        pulumi.set(__self__, "number_of_machines", number_of_machines)
        pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "service_endpoint", service_endpoint)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        if assessment_solution_id is not None:
            pulumi.set(__self__, "assessment_solution_id", assessment_solution_id)
        if customer_storage_account_arm_id is not None:
            pulumi.set(__self__, "customer_storage_account_arm_id", customer_storage_account_arm_id)
        if customer_workspace_id is not None:
            pulumi.set(__self__, "customer_workspace_id", customer_workspace_id)
        if customer_workspace_location is not None:
            pulumi.set(__self__, "customer_workspace_location", customer_workspace_location)
        if project_status is not None:
            pulumi.set(__self__, "project_status", project_status)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when this project was created. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="lastAssessmentTimestamp")
    def last_assessment_timestamp(self) -> str:
        """
        Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.
        """
        return pulumi.get(self, "last_assessment_timestamp")

    @property
    @pulumi.getter(name="numberOfAssessments")
    def number_of_assessments(self) -> int:
        """
        Number of assessments created in the project.
        """
        return pulumi.get(self, "number_of_assessments")

    @property
    @pulumi.getter(name="numberOfGroups")
    def number_of_groups(self) -> int:
        """
        Number of groups created in the project.
        """
        return pulumi.get(self, "number_of_groups")

    @property
    @pulumi.getter(name="numberOfMachines")
    def number_of_machines(self) -> int:
        """
        Number of machines in the project.
        """
        return pulumi.get(self, "number_of_machines")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.PrivateEndpointConnectionResponse']:
        """
        The list of private endpoint connections to the project.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the project.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> str:
        """
        Endpoint at which the collector agent can call agent REST API.
        """
        return pulumi.get(self, "service_endpoint")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "updated_timestamp")

    @property
    @pulumi.getter(name="assessmentSolutionId")
    def assessment_solution_id(self) -> Optional[str]:
        """
        Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
        """
        return pulumi.get(self, "assessment_solution_id")

    @property
    @pulumi.getter(name="customerStorageAccountArmId")
    def customer_storage_account_arm_id(self) -> Optional[str]:
        """
        The ARM id of the storage account used for interactions when public access is disabled.
        """
        return pulumi.get(self, "customer_storage_account_arm_id")

    @property
    @pulumi.getter(name="customerWorkspaceId")
    def customer_workspace_id(self) -> Optional[str]:
        """
        The ARM id of service map workspace created by customer.
        """
        return pulumi.get(self, "customer_workspace_id")

    @property
    @pulumi.getter(name="customerWorkspaceLocation")
    def customer_workspace_location(self) -> Optional[str]:
        """
        Location of service map workspace created by customer.
        """
        return pulumi.get(self, "customer_workspace_location")

    @property
    @pulumi.getter(name="projectStatus")
    def project_status(self) -> Optional[str]:
        """
        Assessment project status.
        """
        return pulumi.get(self, "project_status")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[str]:
        """
        This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
        """
        return pulumi.get(self, "public_network_access")


@pulumi.output_type
class ProjectSummaryResponse(dict):
    """
    Project summary.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "extendedSummary":
            suggest = "extended_summary"
        elif key == "lastSummaryRefreshedTime":
            suggest = "last_summary_refreshed_time"
        elif key == "refreshSummaryState":
            suggest = "refresh_summary_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 extended_summary: Optional[Mapping[str, str]] = None,
                 last_summary_refreshed_time: Optional[str] = None,
                 refresh_summary_state: Optional[str] = None):
        """
        Project summary.
        :param str instance_type: Instance type.
        :param Mapping[str, str] extended_summary: Extended summary.
        :param str last_summary_refreshed_time: Last summary refresh time.
        :param str refresh_summary_state: Refresh summary state.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        if extended_summary is not None:
            pulumi.set(__self__, "extended_summary", extended_summary)
        if last_summary_refreshed_time is not None:
            pulumi.set(__self__, "last_summary_refreshed_time", last_summary_refreshed_time)
        if refresh_summary_state is not None:
            pulumi.set(__self__, "refresh_summary_state", refresh_summary_state)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="extendedSummary")
    def extended_summary(self) -> Optional[Mapping[str, str]]:
        """
        Extended summary.
        """
        return pulumi.get(self, "extended_summary")

    @property
    @pulumi.getter(name="lastSummaryRefreshedTime")
    def last_summary_refreshed_time(self) -> Optional[str]:
        """
        Last summary refresh time.
        """
        return pulumi.get(self, "last_summary_refreshed_time")

    @property
    @pulumi.getter(name="refreshSummaryState")
    def refresh_summary_state(self) -> Optional[str]:
        """
        Refresh summary state.
        """
        return pulumi.get(self, "refresh_summary_state")


@pulumi.output_type
class PublicIPAddressResourceSettingsResponse(dict):
    """
    Defines the public IP address resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "domainNameLabel":
            suggest = "domain_name_label"
        elif key == "publicIpAllocationMethod":
            suggest = "public_ip_allocation_method"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublicIPAddressResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublicIPAddressResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublicIPAddressResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 domain_name_label: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 public_ip_allocation_method: Optional[str] = None,
                 sku: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None,
                 zones: Optional[str] = None):
        """
        Defines the public IP address resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/publicIPAddresses'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param str domain_name_label: Gets or sets the domain name label.
        :param str fqdn: Gets or sets the fully qualified domain name.
        :param str public_ip_allocation_method: Gets or sets public IP allocation method.
        :param str sku: Gets or sets public IP sku.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        :param str zones: Gets or sets public IP zones.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/publicIPAddresses')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if domain_name_label is not None:
            pulumi.set(__self__, "domain_name_label", domain_name_label)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if public_ip_allocation_method is not None:
            pulumi.set(__self__, "public_ip_allocation_method", public_ip_allocation_method)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/publicIPAddresses'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="domainNameLabel")
    def domain_name_label(self) -> Optional[str]:
        """
        Gets or sets the domain name label.
        """
        return pulumi.get(self, "domain_name_label")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        Gets or sets the fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="publicIpAllocationMethod")
    def public_ip_allocation_method(self) -> Optional[str]:
        """
        Gets or sets public IP allocation method.
        """
        return pulumi.get(self, "public_ip_allocation_method")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        Gets or sets public IP sku.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @property
    @pulumi.getter
    def zones(self) -> Optional[str]:
        """
        Gets or sets public IP zones.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class PublicIpReferenceResponse(dict):
    """
    Defines reference to a public IP.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceArmResourceId":
            suggest = "source_arm_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublicIpReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublicIpReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublicIpReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_arm_resource_id: str):
        """
        Defines reference to a public IP.
        :param str source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> str:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")


@pulumi.output_type
class ResourceGroupResourceSettingsResponse(dict):
    """
    Defines the resource group resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the resource group resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'resourceGroups'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'resourceGroups')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'resourceGroups'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class ResourceIdResponse(dict):
    """
    ARM id for a resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        ARM id for a resource.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class ResourceIdentityResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ResourceRequirementsResponse(dict):
    """
    Resource Requirements.
    """
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        """
        Resource Requirements.
        :param str cpu: Gets or sets the Cpu requirement.
        :param str memory: Gets or sets the Memory requirement.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        Gets or sets the Cpu requirement.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        Gets or sets the Memory requirement.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class SecretStoreDetailsResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretStore":
            suggest = "secret_store"
        elif key == "secretStoreProperties":
            suggest = "secret_store_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretStoreDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretStoreDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretStoreDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_store: Optional[str] = None,
                 secret_store_properties: Optional['outputs.SecretStorePropertiesResponse'] = None):
        if secret_store is not None:
            pulumi.set(__self__, "secret_store", secret_store)
        if secret_store_properties is not None:
            pulumi.set(__self__, "secret_store_properties", secret_store_properties)

    @property
    @pulumi.getter(name="secretStore")
    def secret_store(self) -> Optional[str]:
        return pulumi.get(self, "secret_store")

    @property
    @pulumi.getter(name="secretStoreProperties")
    def secret_store_properties(self) -> Optional['outputs.SecretStorePropertiesResponse']:
        return pulumi.get(self, "secret_store_properties")


@pulumi.output_type
class SecretStorePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputType":
            suggest = "input_type"
        elif key == "secretStoreId":
            suggest = "secret_store_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretStorePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretStorePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretStorePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_type: str,
                 secret_store_id: Optional[str] = None):
        pulumi.set(__self__, "input_type", input_type)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> str:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_store_id")


@pulumi.output_type
class ServersProjectSummaryResponse(dict):
    """
    Class representing the servers project summary.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "assessedCount":
            suggest = "assessed_count"
        elif key == "discoveredCount":
            suggest = "discovered_count"
        elif key == "extendedSummary":
            suggest = "extended_summary"
        elif key == "lastSummaryRefreshedTime":
            suggest = "last_summary_refreshed_time"
        elif key == "migratedCount":
            suggest = "migrated_count"
        elif key == "refreshSummaryState":
            suggest = "refresh_summary_state"
        elif key == "replicatingCount":
            suggest = "replicating_count"
        elif key == "testMigratedCount":
            suggest = "test_migrated_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServersProjectSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServersProjectSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServersProjectSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 assessed_count: Optional[int] = None,
                 discovered_count: Optional[int] = None,
                 extended_summary: Optional[Mapping[str, str]] = None,
                 last_summary_refreshed_time: Optional[str] = None,
                 migrated_count: Optional[int] = None,
                 refresh_summary_state: Optional[str] = None,
                 replicating_count: Optional[int] = None,
                 test_migrated_count: Optional[int] = None):
        """
        Class representing the servers project summary.
        :param str instance_type: Gets the Instance type.
               Expected value is 'Servers'.
        :param int assessed_count: Gets or sets the count of entities assessed.
        :param int discovered_count: Gets or sets the count of entities discovered.
        :param Mapping[str, str] extended_summary: Gets or sets the extended summary.
        :param str last_summary_refreshed_time: Gets or sets the time when summary was last refreshed.
        :param int migrated_count: Gets or sets the count of entities migrated.
        :param str refresh_summary_state: Gets or sets the state of refresh summary.
        :param int replicating_count: Gets or sets the count of entities being replicated.
        :param int test_migrated_count: Gets or sets the count of entities test migrated.
        """
        pulumi.set(__self__, "instance_type", 'Servers')
        if assessed_count is not None:
            pulumi.set(__self__, "assessed_count", assessed_count)
        if discovered_count is not None:
            pulumi.set(__self__, "discovered_count", discovered_count)
        if extended_summary is not None:
            pulumi.set(__self__, "extended_summary", extended_summary)
        if last_summary_refreshed_time is not None:
            pulumi.set(__self__, "last_summary_refreshed_time", last_summary_refreshed_time)
        if migrated_count is not None:
            pulumi.set(__self__, "migrated_count", migrated_count)
        if refresh_summary_state is not None:
            pulumi.set(__self__, "refresh_summary_state", refresh_summary_state)
        if replicating_count is not None:
            pulumi.set(__self__, "replicating_count", replicating_count)
        if test_migrated_count is not None:
            pulumi.set(__self__, "test_migrated_count", test_migrated_count)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'Servers'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="assessedCount")
    def assessed_count(self) -> Optional[int]:
        """
        Gets or sets the count of entities assessed.
        """
        return pulumi.get(self, "assessed_count")

    @property
    @pulumi.getter(name="discoveredCount")
    def discovered_count(self) -> Optional[int]:
        """
        Gets or sets the count of entities discovered.
        """
        return pulumi.get(self, "discovered_count")

    @property
    @pulumi.getter(name="extendedSummary")
    def extended_summary(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the extended summary.
        """
        return pulumi.get(self, "extended_summary")

    @property
    @pulumi.getter(name="lastSummaryRefreshedTime")
    def last_summary_refreshed_time(self) -> Optional[str]:
        """
        Gets or sets the time when summary was last refreshed.
        """
        return pulumi.get(self, "last_summary_refreshed_time")

    @property
    @pulumi.getter(name="migratedCount")
    def migrated_count(self) -> Optional[int]:
        """
        Gets or sets the count of entities migrated.
        """
        return pulumi.get(self, "migrated_count")

    @property
    @pulumi.getter(name="refreshSummaryState")
    def refresh_summary_state(self) -> Optional[str]:
        """
        Gets or sets the state of refresh summary.
        """
        return pulumi.get(self, "refresh_summary_state")

    @property
    @pulumi.getter(name="replicatingCount")
    def replicating_count(self) -> Optional[int]:
        """
        Gets or sets the count of entities being replicated.
        """
        return pulumi.get(self, "replicating_count")

    @property
    @pulumi.getter(name="testMigratedCount")
    def test_migrated_count(self) -> Optional[int]:
        """
        Gets or sets the count of entities test migrated.
        """
        return pulumi.get(self, "test_migrated_count")


@pulumi.output_type
class ServersSolutionSummaryResponse(dict):
    """
    Class representing the servers solution summary.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "assessedCount":
            suggest = "assessed_count"
        elif key == "discoveredCount":
            suggest = "discovered_count"
        elif key == "migratedCount":
            suggest = "migrated_count"
        elif key == "replicatingCount":
            suggest = "replicating_count"
        elif key == "testMigratedCount":
            suggest = "test_migrated_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServersSolutionSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServersSolutionSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServersSolutionSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 assessed_count: Optional[int] = None,
                 discovered_count: Optional[int] = None,
                 migrated_count: Optional[int] = None,
                 replicating_count: Optional[int] = None,
                 test_migrated_count: Optional[int] = None):
        """
        Class representing the servers solution summary.
        :param str instance_type: Gets the Instance type.
               Expected value is 'Servers'.
        :param int assessed_count: Gets or sets the count of servers assessed.
        :param int discovered_count: Gets or sets the count of servers discovered.
        :param int migrated_count: Gets or sets the count of servers migrated.
        :param int replicating_count: Gets or sets the count of servers being replicated.
        :param int test_migrated_count: Gets or sets the count of servers test migrated.
        """
        pulumi.set(__self__, "instance_type", 'Servers')
        if assessed_count is not None:
            pulumi.set(__self__, "assessed_count", assessed_count)
        if discovered_count is not None:
            pulumi.set(__self__, "discovered_count", discovered_count)
        if migrated_count is not None:
            pulumi.set(__self__, "migrated_count", migrated_count)
        if replicating_count is not None:
            pulumi.set(__self__, "replicating_count", replicating_count)
        if test_migrated_count is not None:
            pulumi.set(__self__, "test_migrated_count", test_migrated_count)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        Expected value is 'Servers'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="assessedCount")
    def assessed_count(self) -> Optional[int]:
        """
        Gets or sets the count of servers assessed.
        """
        return pulumi.get(self, "assessed_count")

    @property
    @pulumi.getter(name="discoveredCount")
    def discovered_count(self) -> Optional[int]:
        """
        Gets or sets the count of servers discovered.
        """
        return pulumi.get(self, "discovered_count")

    @property
    @pulumi.getter(name="migratedCount")
    def migrated_count(self) -> Optional[int]:
        """
        Gets or sets the count of servers migrated.
        """
        return pulumi.get(self, "migrated_count")

    @property
    @pulumi.getter(name="replicatingCount")
    def replicating_count(self) -> Optional[int]:
        """
        Gets or sets the count of servers being replicated.
        """
        return pulumi.get(self, "replicating_count")

    @property
    @pulumi.getter(name="testMigratedCount")
    def test_migrated_count(self) -> Optional[int]:
        """
        Gets or sets the count of servers test migrated.
        """
        return pulumi.get(self, "test_migrated_count")


@pulumi.output_type
class SolutionDetailsResponse(dict):
    """
    Class representing the details of the solution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assessmentCount":
            suggest = "assessment_count"
        elif key == "extendedDetails":
            suggest = "extended_details"
        elif key == "groupCount":
            suggest = "group_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assessment_count: Optional[int] = None,
                 extended_details: Optional[Mapping[str, str]] = None,
                 group_count: Optional[int] = None):
        """
        Class representing the details of the solution.
        :param int assessment_count: Gets or sets the count of assessments reported by the solution.
        :param Mapping[str, str] extended_details: Gets or sets the extended details reported by the solution.
        :param int group_count: Gets or sets the count of groups reported by the solution.
        """
        if assessment_count is not None:
            pulumi.set(__self__, "assessment_count", assessment_count)
        if extended_details is not None:
            pulumi.set(__self__, "extended_details", extended_details)
        if group_count is not None:
            pulumi.set(__self__, "group_count", group_count)

    @property
    @pulumi.getter(name="assessmentCount")
    def assessment_count(self) -> Optional[int]:
        """
        Gets or sets the count of assessments reported by the solution.
        """
        return pulumi.get(self, "assessment_count")

    @property
    @pulumi.getter(name="extendedDetails")
    def extended_details(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the extended details reported by the solution.
        """
        return pulumi.get(self, "extended_details")

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[int]:
        """
        Gets or sets the count of groups reported by the solution.
        """
        return pulumi.get(self, "group_count")


@pulumi.output_type
class SolutionPropertiesResponse(dict):
    """
    Class for solution properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupState":
            suggest = "cleanup_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_state: Optional[str] = None,
                 details: Optional['outputs.SolutionDetailsResponse'] = None,
                 goal: Optional[str] = None,
                 purpose: Optional[str] = None,
                 status: Optional[str] = None,
                 summary: Optional[Any] = None,
                 tool: Optional[str] = None):
        """
        Class for solution properties.
        :param str cleanup_state: Gets or sets the cleanup state of the solution.
        :param 'SolutionDetailsResponse' details: Gets or sets the details of the solution.
        :param str goal: Gets or sets the goal of the solution.
        :param str purpose: Gets or sets the purpose of the solution.
        :param str status: Gets or sets the current status of the solution.
        :param Union['DatabasesSolutionSummaryResponse', 'ServersSolutionSummaryResponse', 'SolutionSummaryResponse'] summary: Gets or sets the summary of the solution.
        :param str tool: Gets or sets the tool being used in the solution.
        """
        if cleanup_state is not None:
            pulumi.set(__self__, "cleanup_state", cleanup_state)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if goal is not None:
            pulumi.set(__self__, "goal", goal)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if tool is not None:
            pulumi.set(__self__, "tool", tool)

    @property
    @pulumi.getter(name="cleanupState")
    def cleanup_state(self) -> Optional[str]:
        """
        Gets or sets the cleanup state of the solution.
        """
        return pulumi.get(self, "cleanup_state")

    @property
    @pulumi.getter
    def details(self) -> Optional['outputs.SolutionDetailsResponse']:
        """
        Gets or sets the details of the solution.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def goal(self) -> Optional[str]:
        """
        Gets or sets the goal of the solution.
        """
        return pulumi.get(self, "goal")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        Gets or sets the purpose of the solution.
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Gets or sets the current status of the solution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def summary(self) -> Optional[Any]:
        """
        Gets or sets the summary of the solution.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def tool(self) -> Optional[str]:
        """
        Gets or sets the tool being used in the solution.
        """
        return pulumi.get(self, "tool")


@pulumi.output_type
class SolutionSummaryResponse(dict):
    """
    The solution summary class.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str):
        """
        The solution summary class.
        :param str instance_type: Gets the Instance type.
        """
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets the Instance type.
        """
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class SqlDatabaseResourceSettingsResponse(dict):
    """
    Defines the Sql Database resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"
        elif key == "zoneRedundant":
            suggest = "zone_redundant"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlDatabaseResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlDatabaseResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlDatabaseResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None,
                 zone_redundant: Optional[str] = None):
        """
        Defines the Sql Database resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Sql/servers/databases'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        :param str zone_redundant: Defines the zone redundant resource setting.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Sql/servers/databases')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zone_redundant is not None:
            pulumi.set(__self__, "zone_redundant", zone_redundant)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Sql/servers/databases'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @property
    @pulumi.getter(name="zoneRedundant")
    def zone_redundant(self) -> Optional[str]:
        """
        Defines the zone redundant resource setting.
        """
        return pulumi.get(self, "zone_redundant")


@pulumi.output_type
class SqlDbSettingsResponse(dict):
    """
    SQL database assessment settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureSqlComputeTier":
            suggest = "azure_sql_compute_tier"
        elif key == "azureSqlDataBaseType":
            suggest = "azure_sql_data_base_type"
        elif key == "azureSqlPurchaseModel":
            suggest = "azure_sql_purchase_model"
        elif key == "azureSqlServiceTier":
            suggest = "azure_sql_service_tier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlDbSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlDbSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlDbSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_sql_compute_tier: Optional[str] = None,
                 azure_sql_data_base_type: Optional[str] = None,
                 azure_sql_purchase_model: Optional[str] = None,
                 azure_sql_service_tier: Optional[str] = None):
        """
        SQL database assessment settings.
        :param str azure_sql_compute_tier: Gets or sets the azure SQL compute tier.
        :param str azure_sql_data_base_type: Gets or sets the azure PAAS SQL instance type.
        :param str azure_sql_purchase_model: Gets or sets the azure SQL purchase model.
        :param str azure_sql_service_tier: Gets or sets the azure SQL service tier.
        """
        if azure_sql_compute_tier is not None:
            pulumi.set(__self__, "azure_sql_compute_tier", azure_sql_compute_tier)
        if azure_sql_data_base_type is not None:
            pulumi.set(__self__, "azure_sql_data_base_type", azure_sql_data_base_type)
        if azure_sql_purchase_model is not None:
            pulumi.set(__self__, "azure_sql_purchase_model", azure_sql_purchase_model)
        if azure_sql_service_tier is not None:
            pulumi.set(__self__, "azure_sql_service_tier", azure_sql_service_tier)

    @property
    @pulumi.getter(name="azureSqlComputeTier")
    def azure_sql_compute_tier(self) -> Optional[str]:
        """
        Gets or sets the azure SQL compute tier.
        """
        return pulumi.get(self, "azure_sql_compute_tier")

    @property
    @pulumi.getter(name="azureSqlDataBaseType")
    def azure_sql_data_base_type(self) -> Optional[str]:
        """
        Gets or sets the azure PAAS SQL instance type.
        """
        return pulumi.get(self, "azure_sql_data_base_type")

    @property
    @pulumi.getter(name="azureSqlPurchaseModel")
    def azure_sql_purchase_model(self) -> Optional[str]:
        """
        Gets or sets the azure SQL purchase model.
        """
        return pulumi.get(self, "azure_sql_purchase_model")

    @property
    @pulumi.getter(name="azureSqlServiceTier")
    def azure_sql_service_tier(self) -> Optional[str]:
        """
        Gets or sets the azure SQL service tier.
        """
        return pulumi.get(self, "azure_sql_service_tier")


@pulumi.output_type
class SqlElasticPoolResourceSettingsResponse(dict):
    """
    Defines the Sql ElasticPool resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"
        elif key == "zoneRedundant":
            suggest = "zone_redundant"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlElasticPoolResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlElasticPoolResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlElasticPoolResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None,
                 zone_redundant: Optional[str] = None):
        """
        Defines the Sql ElasticPool resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Sql/servers/elasticPools'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        :param str zone_redundant: Defines the zone redundant resource setting.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Sql/servers/elasticPools')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zone_redundant is not None:
            pulumi.set(__self__, "zone_redundant", zone_redundant)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Sql/servers/elasticPools'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @property
    @pulumi.getter(name="zoneRedundant")
    def zone_redundant(self) -> Optional[str]:
        """
        Defines the zone redundant resource setting.
        """
        return pulumi.get(self, "zone_redundant")


@pulumi.output_type
class SqlMiSettingsResponse(dict):
    """
    SQL managed instance assessment settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureSqlInstanceType":
            suggest = "azure_sql_instance_type"
        elif key == "azureSqlServiceTier":
            suggest = "azure_sql_service_tier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlMiSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlMiSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlMiSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_sql_instance_type: Optional[str] = None,
                 azure_sql_service_tier: Optional[str] = None):
        """
        SQL managed instance assessment settings.
        :param str azure_sql_instance_type: Gets or sets the azure PAAS SQL instance type.
        :param str azure_sql_service_tier: Gets or sets the azure SQL service tier.
        """
        if azure_sql_instance_type is not None:
            pulumi.set(__self__, "azure_sql_instance_type", azure_sql_instance_type)
        if azure_sql_service_tier is not None:
            pulumi.set(__self__, "azure_sql_service_tier", azure_sql_service_tier)

    @property
    @pulumi.getter(name="azureSqlInstanceType")
    def azure_sql_instance_type(self) -> Optional[str]:
        """
        Gets or sets the azure PAAS SQL instance type.
        """
        return pulumi.get(self, "azure_sql_instance_type")

    @property
    @pulumi.getter(name="azureSqlServiceTier")
    def azure_sql_service_tier(self) -> Optional[str]:
        """
        Gets or sets the azure SQL service tier.
        """
        return pulumi.get(self, "azure_sql_service_tier")


@pulumi.output_type
class SqlServerResourceSettingsResponse(dict):
    """
    Defines the SQL Server resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlServerResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlServerResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlServerResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the SQL Server resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Sql/servers'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Sql/servers')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Sql/servers'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class SqlVmSettingsResponse(dict):
    """
    SQL VM assessment settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceSeries":
            suggest = "instance_series"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlVmSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlVmSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlVmSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_series: Optional[Sequence[str]] = None):
        """
        SQL VM assessment settings.
        :param Sequence[str] instance_series: Gets or sets the Azure VM families (calling instance series to keep it
               consistent with other targets).
        """
        if instance_series is not None:
            pulumi.set(__self__, "instance_series", instance_series)

    @property
    @pulumi.getter(name="instanceSeries")
    def instance_series(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the Azure VM families (calling instance series to keep it
        consistent with other targets).
        """
        return pulumi.get(self, "instance_series")


@pulumi.output_type
class SubnetReferenceResponse(dict):
    """
    Defines reference to subnet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceArmResourceId":
            suggest = "source_arm_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_arm_resource_id: str,
                 name: Optional[str] = None):
        """
        Defines reference to subnet.
        :param str source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        :param str name: Gets the name of the proxy resource on the target side.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> str:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets the name of the proxy resource on the target side.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SubnetResourceSettingsResponse(dict):
    """
    Defines the virtual network subnets resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "networkSecurityGroup":
            suggest = "network_security_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[str] = None,
                 name: Optional[str] = None,
                 network_security_group: Optional['outputs.NsgReferenceResponse'] = None):
        """
        Defines the virtual network subnets resource settings.
        :param str address_prefix: Gets or sets address prefix for the subnet.
        :param str name: Gets or sets the Subnet name.
        :param 'NsgReferenceResponse' network_security_group: Defines reference to NSG.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_security_group is not None:
            pulumi.set(__self__, "network_security_group", network_security_group)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[str]:
        """
        Gets or sets address prefix for the subnet.
        """
        return pulumi.get(self, "address_prefix")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the Subnet name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkSecurityGroup")
    def network_security_group(self) -> Optional['outputs.NsgReferenceResponse']:
        """
        Defines reference to NSG.
        """
        return pulumi.get(self, "network_security_group")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TargetStorageProfileResponse(dict):
    """
    Storage profile for the directory on the target container.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureFileShareProfile":
            suggest = "azure_file_share_profile"
        elif key == "hydrationStorageProviderType":
            suggest = "hydration_storage_provider_type"
        elif key == "persistentVolumeId":
            suggest = "persistent_volume_id"
        elif key == "storageAccessType":
            suggest = "storage_access_type"
        elif key == "storageProjectionType":
            suggest = "storage_projection_type"
        elif key == "targetName":
            suggest = "target_name"
        elif key == "targetSize":
            suggest = "target_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetStorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetStorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetStorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_file_share_profile: Optional['outputs.AzureFileShareHydrationProfileResponse'] = None,
                 hydration_storage_provider_type: Optional[str] = None,
                 persistent_volume_id: Optional[str] = None,
                 storage_access_type: Optional[str] = None,
                 storage_projection_type: Optional[str] = None,
                 target_name: Optional[str] = None,
                 target_size: Optional[str] = None):
        """
        Storage profile for the directory on the target container.
        :param 'AzureFileShareHydrationProfileResponse' azure_file_share_profile: Azure file share profile for hydration of application folders not mounted on
               the container file system.
        :param str hydration_storage_provider_type: Gets or sets the storage provider type on the target.
               Applicable when StorageProjectionType is not ContainerFileSystem.
        :param str persistent_volume_id: Gets or sets the target persistent volume id.
               Applicable when StorageProjectionType is PersistentVolume and on using an
               existing PersistentVolume.
        :param str storage_access_type: Gets or sets the target storage access type.
        :param str storage_projection_type: Gets or sets the target projection type.
        :param str target_name: Gets or sets the name of the projected volume on the target environment.
        :param str target_size: Gets or sets the storage size on the target.
               Applicable when StorageProjectionType is PersistentVolume and on creating a new
               PersistentVolume.
        """
        if azure_file_share_profile is not None:
            pulumi.set(__self__, "azure_file_share_profile", azure_file_share_profile)
        if hydration_storage_provider_type is not None:
            pulumi.set(__self__, "hydration_storage_provider_type", hydration_storage_provider_type)
        if persistent_volume_id is not None:
            pulumi.set(__self__, "persistent_volume_id", persistent_volume_id)
        if storage_access_type is not None:
            pulumi.set(__self__, "storage_access_type", storage_access_type)
        if storage_projection_type is not None:
            pulumi.set(__self__, "storage_projection_type", storage_projection_type)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if target_size is not None:
            pulumi.set(__self__, "target_size", target_size)

    @property
    @pulumi.getter(name="azureFileShareProfile")
    def azure_file_share_profile(self) -> Optional['outputs.AzureFileShareHydrationProfileResponse']:
        """
        Azure file share profile for hydration of application folders not mounted on
        the container file system.
        """
        return pulumi.get(self, "azure_file_share_profile")

    @property
    @pulumi.getter(name="hydrationStorageProviderType")
    def hydration_storage_provider_type(self) -> Optional[str]:
        """
        Gets or sets the storage provider type on the target.
        Applicable when StorageProjectionType is not ContainerFileSystem.
        """
        return pulumi.get(self, "hydration_storage_provider_type")

    @property
    @pulumi.getter(name="persistentVolumeId")
    def persistent_volume_id(self) -> Optional[str]:
        """
        Gets or sets the target persistent volume id.
        Applicable when StorageProjectionType is PersistentVolume and on using an
        existing PersistentVolume.
        """
        return pulumi.get(self, "persistent_volume_id")

    @property
    @pulumi.getter(name="storageAccessType")
    def storage_access_type(self) -> Optional[str]:
        """
        Gets or sets the target storage access type.
        """
        return pulumi.get(self, "storage_access_type")

    @property
    @pulumi.getter(name="storageProjectionType")
    def storage_projection_type(self) -> Optional[str]:
        """
        Gets or sets the target projection type.
        """
        return pulumi.get(self, "storage_projection_type")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[str]:
        """
        Gets or sets the name of the projected volume on the target environment.
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter(name="targetSize")
    def target_size(self) -> Optional[str]:
        """
        Gets or sets the storage size on the target.
        Applicable when StorageProjectionType is PersistentVolume and on creating a new
        PersistentVolume.
        """
        return pulumi.get(self, "target_size")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 principal_id: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VMwareMigrateAgentModelCustomPropertiesResponse(dict):
    """
    VMware MigrateAgent model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "fabricFriendlyName":
            suggest = "fabric_friendly_name"
        elif key == "vmwareSiteId":
            suggest = "vmware_site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareMigrateAgentModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareMigrateAgentModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareMigrateAgentModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 fabric_friendly_name: Optional[str] = None,
                 vmware_site_id: Optional[str] = None):
        """
        VMware MigrateAgent model custom properties.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'VMwareMigrateAgentModelCustomProperties'.
        :param str fabric_friendly_name: Gets or sets the friendly name of the,of the MigrateAgent fabric.
        :param str vmware_site_id: Gets or sets the master Site Id of the Migrate Agent.
        """
        pulumi.set(__self__, "instance_type", 'VMwareMigrateAgentModelCustomProperties')
        if fabric_friendly_name is not None:
            pulumi.set(__self__, "fabric_friendly_name", fabric_friendly_name)
        if vmware_site_id is not None:
            pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareMigrateAgentModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="fabricFriendlyName")
    def fabric_friendly_name(self) -> Optional[str]:
        """
        Gets or sets the friendly name of the,of the MigrateAgent fabric.
        """
        return pulumi.get(self, "fabric_friendly_name")

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> Optional[str]:
        """
        Gets or sets the master Site Id of the Migrate Agent.
        """
        return pulumi.get(self, "vmware_site_id")


@pulumi.output_type
class VirtualMachineResourceSettingsResponse(dict):
    """
    Gets or sets the virtual machine resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "targetAvailabilitySetId":
            suggest = "target_availability_set_id"
        elif key == "targetAvailabilityZone":
            suggest = "target_availability_zone"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"
        elif key == "targetVmSize":
            suggest = "target_vm_size"
        elif key == "userManagedIdentities":
            suggest = "user_managed_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 tags: Optional[Mapping[str, str]] = None,
                 target_availability_set_id: Optional[str] = None,
                 target_availability_zone: Optional[str] = None,
                 target_resource_group_name: Optional[str] = None,
                 target_vm_size: Optional[str] = None,
                 user_managed_identities: Optional[Sequence[str]] = None):
        """
        Gets or sets the virtual machine resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Compute/virtualMachines'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_availability_set_id: Gets or sets the target availability set id for virtual machines not in an availability set at source.
        :param str target_availability_zone: Gets or sets the target availability zone.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        :param str target_vm_size: Gets or sets the target virtual machine size.
        :param Sequence[str] user_managed_identities: Gets or sets user-managed identities
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Compute/virtualMachines')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if user_managed_identities is not None:
            pulumi.set(__self__, "user_managed_identities", user_managed_identities)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Compute/virtualMachines'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[str]:
        """
        Gets or sets the target availability set id for virtual machines not in an availability set at source.
        """
        return pulumi.get(self, "target_availability_set_id")

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[str]:
        """
        Gets or sets the target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[str]:
        """
        Gets or sets the target virtual machine size.
        """
        return pulumi.get(self, "target_vm_size")

    @property
    @pulumi.getter(name="userManagedIdentities")
    def user_managed_identities(self) -> Optional[Sequence[str]]:
        """
        Gets or sets user-managed identities
        """
        return pulumi.get(self, "user_managed_identities")


@pulumi.output_type
class VirtualNetworkResourceSettingsResponse(dict):
    """
    Defines the virtual network resource settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "targetResourceName":
            suggest = "target_resource_name"
        elif key == "addressSpace":
            suggest = "address_space"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "enableDdosProtection":
            suggest = "enable_ddos_protection"
        elif key == "targetResourceGroupName":
            suggest = "target_resource_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 target_resource_name: str,
                 address_space: Optional[Sequence[str]] = None,
                 dns_servers: Optional[Sequence[str]] = None,
                 enable_ddos_protection: Optional[bool] = None,
                 subnets: Optional[Sequence['outputs.SubnetResourceSettingsResponse']] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_resource_group_name: Optional[str] = None):
        """
        Defines the virtual network resource settings.
        :param str resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/virtualNetworks'.
        :param str target_resource_name: Gets or sets the target Resource name.
        :param Sequence[str] address_space: Gets or sets the address prefixes for the virtual network.
        :param Sequence[str] dns_servers: Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
               deployed in the virtual network.
        :param bool enable_ddos_protection: Gets or sets a value indicating whether gets or sets whether the
               DDOS protection should be switched on.
        :param Sequence['SubnetResourceSettingsResponse'] subnets: Gets or sets List of subnets in a VirtualNetwork.
        :param Mapping[str, str] tags: Gets or sets the Resource tags.
        :param str target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/virtualNetworks')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if address_space is not None:
            pulumi.set(__self__, "address_space", address_space)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if enable_ddos_protection is not None:
            pulumi.set(__self__, "enable_ddos_protection", enable_ddos_protection)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/virtualNetworks'.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> str:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the address prefixes for the virtual network.
        """
        return pulumi.get(self, "address_space")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
        deployed in the virtual network.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="enableDdosProtection")
    def enable_ddos_protection(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether gets or sets whether the
        DDOS protection should be switched on.
        """
        return pulumi.get(self, "enable_ddos_protection")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence['outputs.SubnetResourceSettingsResponse']]:
        """
        Gets or sets List of subnets in a VirtualNetwork.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[str]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")


@pulumi.output_type
class VmUptimeResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysPerMonth":
            suggest = "days_per_month"
        elif key == "hoursPerDay":
            suggest = "hours_per_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmUptimeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmUptimeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmUptimeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_per_month: Optional[float] = None,
                 hours_per_day: Optional[float] = None):
        """
        :param float days_per_month: Number of days in a month for VM uptime.
        :param float hours_per_day: Number of hours per day for VM uptime.
        """
        if days_per_month is not None:
            pulumi.set(__self__, "days_per_month", days_per_month)
        if hours_per_day is not None:
            pulumi.set(__self__, "hours_per_day", hours_per_day)

    @property
    @pulumi.getter(name="daysPerMonth")
    def days_per_month(self) -> Optional[float]:
        """
        Number of days in a month for VM uptime.
        """
        return pulumi.get(self, "days_per_month")

    @property
    @pulumi.getter(name="hoursPerDay")
    def hours_per_day(self) -> Optional[float]:
        """
        Number of hours per day for VM uptime.
        """
        return pulumi.get(self, "hours_per_day")


@pulumi.output_type
class WebApplicationConfigurationResponse(dict):
    """
    Class for web application configurations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePath":
            suggest = "file_path"
        elif key == "isDeploymentTimeEditable":
            suggest = "is_deployment_time_editable"
        elif key == "localFilePath":
            suggest = "local_file_path"
        elif key == "secretStoreDetails":
            suggest = "secret_store_details"
        elif key == "targetFilePath":
            suggest = "target_file_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebApplicationConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebApplicationConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebApplicationConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 file_path: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_deployment_time_editable: Optional[bool] = None,
                 local_file_path: Optional[str] = None,
                 name: Optional[str] = None,
                 secret_store_details: Optional['outputs.SecretStoreDetailsResponse'] = None,
                 section: Optional[str] = None,
                 target_file_path: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Class for web application configurations.
        :param str id: Gets the ID.
        :param str file_path: Gets or sets the configuration file path.
        :param str identifier: Gets or sets the identifier for the configuration.
        :param bool is_deployment_time_editable: Gets or sets a value indicating whether the configuration is edited or not by the user.
        :param str local_file_path: Gets or sets the configuration local file path.
        :param str name: Gets or sets the configuration name.
        :param str section: Gets or sets the configuration section in the file.
        :param str target_file_path: Gets or sets the configuration target file path.
        :param str type: Gets or sets the configuration type.
        :param str value: Gets or sets the configuration value.
        """
        pulumi.set(__self__, "id", id)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_deployment_time_editable is not None:
            pulumi.set(__self__, "is_deployment_time_editable", is_deployment_time_editable)
        if local_file_path is not None:
            pulumi.set(__self__, "local_file_path", local_file_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret_store_details is not None:
            pulumi.set(__self__, "secret_store_details", secret_store_details)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if target_file_path is not None:
            pulumi.set(__self__, "target_file_path", target_file_path)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        Gets or sets the configuration file path.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Gets or sets the identifier for the configuration.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDeploymentTimeEditable")
    def is_deployment_time_editable(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether the configuration is edited or not by the user.
        """
        return pulumi.get(self, "is_deployment_time_editable")

    @property
    @pulumi.getter(name="localFilePath")
    def local_file_path(self) -> Optional[str]:
        """
        Gets or sets the configuration local file path.
        """
        return pulumi.get(self, "local_file_path")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretStoreDetails")
    def secret_store_details(self) -> Optional['outputs.SecretStoreDetailsResponse']:
        return pulumi.get(self, "secret_store_details")

    @property
    @pulumi.getter
    def section(self) -> Optional[str]:
        """
        Gets or sets the configuration section in the file.
        """
        return pulumi.get(self, "section")

    @property
    @pulumi.getter(name="targetFilePath")
    def target_file_path(self) -> Optional[str]:
        """
        Gets or sets the configuration target file path.
        """
        return pulumi.get(self, "target_file_path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Gets or sets the configuration type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Gets or sets the configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WebApplicationDirectoryResponse(dict):
    """
    WebApplication directory structure.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEditable":
            suggest = "is_editable"
        elif key == "sourcePaths":
            suggest = "source_paths"
        elif key == "sourceSize":
            suggest = "source_size"
        elif key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebApplicationDirectoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebApplicationDirectoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebApplicationDirectoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 is_editable: Optional[bool] = None,
                 source_paths: Optional[Sequence[str]] = None,
                 source_size: Optional[str] = None,
                 storage_profile: Optional['outputs.TargetStorageProfileResponse'] = None):
        """
        WebApplication directory structure.
        :param str id: Gets the unique id corresponding to the application directory.
        :param bool is_editable: Gets or sets a value indicating whether the directory object is editable.
               True when the directory is added as an optional directory, false when discovery is done
               manually.
        :param Sequence[str] source_paths: Gets or sets the paths of the directory on the source machine.
        :param str source_size: Gets or sets the size of the directory on the source machine.
        :param 'TargetStorageProfileResponse' storage_profile: Storage profile for the directory on the target container.
        """
        pulumi.set(__self__, "id", id)
        if is_editable is not None:
            pulumi.set(__self__, "is_editable", is_editable)
        if source_paths is not None:
            pulumi.set(__self__, "source_paths", source_paths)
        if source_size is not None:
            pulumi.set(__self__, "source_size", source_size)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the unique id corresponding to the application directory.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether the directory object is editable.
        True when the directory is added as an optional directory, false when discovery is done
        manually.
        """
        return pulumi.get(self, "is_editable")

    @property
    @pulumi.getter(name="sourcePaths")
    def source_paths(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the paths of the directory on the source machine.
        """
        return pulumi.get(self, "source_paths")

    @property
    @pulumi.getter(name="sourceSize")
    def source_size(self) -> Optional[str]:
        """
        Gets or sets the size of the directory on the source machine.
        """
        return pulumi.get(self, "source_size")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional['outputs.TargetStorageProfileResponse']:
        """
        Storage profile for the directory on the target container.
        """
        return pulumi.get(self, "storage_profile")


@pulumi.output_type
class WebApplicationFrameworkResponse(dict):
    """
    Framework specific data for a web application.
    """
    def __init__(__self__, *,
                 id: str,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Framework specific data for a web application.
        :param str id: Gets the ID.
        :param str name: Gets or sets Name of the framework.
        :param str version: Gets or sets Version of the framework.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets the ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets Name of the framework.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Gets or sets Version of the framework.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class WorkloadDeploymentModelPropertiesResponse(dict):
    """
    Workload deployment model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedOperations":
            suggest = "allowed_operations"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "currentJob":
            suggest = "current_job"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "lastSuccessfulMigrateTime":
            suggest = "last_successful_migrate_time"
        elif key == "lastSuccessfulTestMigrateTime":
            suggest = "last_successful_test_migrate_time"
        elif key == "migrationStatus":
            suggest = "migration_status"
        elif key == "migrationStatusDescription":
            suggest = "migration_status_description"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "statusDescription":
            suggest = "status_description"
        elif key == "testMigrationStatus":
            suggest = "test_migration_status"
        elif key == "testMigrationStatusDescription":
            suggest = "test_migration_status_description"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "targetPlatform":
            suggest = "target_platform"
        elif key == "workloadInstanceProperties":
            suggest = "workload_instance_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadDeploymentModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadDeploymentModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadDeploymentModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_operations: Sequence[str],
                 correlation_id: str,
                 current_job: 'outputs.WorkloadDeploymentModelPropertiesResponseCurrentJob',
                 health_errors: Sequence['outputs.HealthErrorModelResponse'],
                 last_successful_migrate_time: str,
                 last_successful_test_migrate_time: str,
                 migration_status: str,
                 migration_status_description: str,
                 provisioning_state: str,
                 status: str,
                 status_description: str,
                 test_migration_status: str,
                 test_migration_status_description: str,
                 custom_properties: Optional[Any] = None,
                 display_name: Optional[str] = None,
                 target_platform: Optional[str] = None,
                 workload_instance_properties: Optional['outputs.WorkloadInstanceModelPropertiesResponse'] = None):
        """
        Workload deployment model properties.
        :param Sequence[str] allowed_operations: Gets or sets the allowed scenarios on the workload deployment.
        :param str correlation_id: Gets or sets the workload deployment correlation Id.
        :param Sequence['HealthErrorModelResponse'] health_errors: Gets or sets the list of health errors.
        :param str last_successful_migrate_time: Gets or sets the Last successful unplanned migrate time.
        :param str last_successful_test_migrate_time: Gets or sets the Last successful test migrate time.
        :param str migration_status: Gets or sets the migrate state.
        :param str migration_status_description: Gets or sets the migrate state description.
        :param str provisioning_state: Gets or sets the provisioning state of the workload deployment.
        :param str status: Gets or sets the workload deployment status.
        :param str status_description: Gets or sets the workload deployment status description.
        :param str test_migration_status: Gets or sets the test migrate state.
        :param str test_migration_status_description: Gets or sets the Test migrate state description.
        :param Union['ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesResponse', 'IISAKSWorkloadDeploymentModelCustomPropertiesResponse'] custom_properties: Workload deployment model custom properties.
        :param str display_name: Gets or sets the display name.
        :param str target_platform: Gets or sets the deployment target platform.
        :param 'WorkloadInstanceModelPropertiesResponse' workload_instance_properties: Workload instance model properties.
        """
        pulumi.set(__self__, "allowed_operations", allowed_operations)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "current_job", current_job)
        pulumi.set(__self__, "health_errors", health_errors)
        pulumi.set(__self__, "last_successful_migrate_time", last_successful_migrate_time)
        pulumi.set(__self__, "last_successful_test_migrate_time", last_successful_test_migrate_time)
        pulumi.set(__self__, "migration_status", migration_status)
        pulumi.set(__self__, "migration_status_description", migration_status_description)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_description", status_description)
        pulumi.set(__self__, "test_migration_status", test_migration_status)
        pulumi.set(__self__, "test_migration_status_description", test_migration_status_description)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if target_platform is not None:
            pulumi.set(__self__, "target_platform", target_platform)
        if workload_instance_properties is not None:
            pulumi.set(__self__, "workload_instance_properties", workload_instance_properties)

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Sequence[str]:
        """
        Gets or sets the allowed scenarios on the workload deployment.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        Gets or sets the workload deployment correlation Id.
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter(name="currentJob")
    def current_job(self) -> 'outputs.WorkloadDeploymentModelPropertiesResponseCurrentJob':
        return pulumi.get(self, "current_job")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Sequence['outputs.HealthErrorModelResponse']:
        """
        Gets or sets the list of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="lastSuccessfulMigrateTime")
    def last_successful_migrate_time(self) -> str:
        """
        Gets or sets the Last successful unplanned migrate time.
        """
        return pulumi.get(self, "last_successful_migrate_time")

    @property
    @pulumi.getter(name="lastSuccessfulTestMigrateTime")
    def last_successful_test_migrate_time(self) -> str:
        """
        Gets or sets the Last successful test migrate time.
        """
        return pulumi.get(self, "last_successful_test_migrate_time")

    @property
    @pulumi.getter(name="migrationStatus")
    def migration_status(self) -> str:
        """
        Gets or sets the migrate state.
        """
        return pulumi.get(self, "migration_status")

    @property
    @pulumi.getter(name="migrationStatusDescription")
    def migration_status_description(self) -> str:
        """
        Gets or sets the migrate state description.
        """
        return pulumi.get(self, "migration_status_description")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the workload deployment.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Gets or sets the workload deployment status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> str:
        """
        Gets or sets the workload deployment status description.
        """
        return pulumi.get(self, "status_description")

    @property
    @pulumi.getter(name="testMigrationStatus")
    def test_migration_status(self) -> str:
        """
        Gets or sets the test migrate state.
        """
        return pulumi.get(self, "test_migration_status")

    @property
    @pulumi.getter(name="testMigrationStatusDescription")
    def test_migration_status_description(self) -> str:
        """
        Gets or sets the Test migrate state description.
        """
        return pulumi.get(self, "test_migration_status_description")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Any]:
        """
        Workload deployment model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="targetPlatform")
    def target_platform(self) -> Optional[str]:
        """
        Gets or sets the deployment target platform.
        """
        return pulumi.get(self, "target_platform")

    @property
    @pulumi.getter(name="workloadInstanceProperties")
    def workload_instance_properties(self) -> Optional['outputs.WorkloadInstanceModelPropertiesResponse']:
        """
        Workload instance model properties.
        """
        return pulumi.get(self, "workload_instance_properties")


@pulumi.output_type
class WorkloadDeploymentModelPropertiesResponseCurrentJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadDeploymentModelPropertiesResponseCurrentJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadDeploymentModelPropertiesResponseCurrentJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadDeploymentModelPropertiesResponseCurrentJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 end_time: str,
                 id: str,
                 name: str,
                 scenario_name: str,
                 start_time: str,
                 state: str):
        """
        :param str display_name: Gets or sets the workflow friendly display name.
        :param str end_time: Gets or sets end time of the workflow.
        :param str id: Gets or sets workflow Id.
        :param str name: Gets or sets workflow name.
        :param str scenario_name: Gets or sets workload scenario name.
        :param str start_time: Gets or sets start time of the workflow.
        :param str state: Gets or sets workflow state.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scenario_name", scenario_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the workflow friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Gets or sets end time of the workflow.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets workflow Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets workflow name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> str:
        """
        Gets or sets workload scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Gets or sets start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Gets or sets workflow state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class WorkloadDeploymentModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadDeploymentModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadDeploymentModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadDeploymentModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class WorkloadInstanceModelPropertiesResponse(dict):
    """
    Workload instance model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedOperations":
            suggest = "allowed_operations"
        elif key == "currentJob":
            suggest = "current_job"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "lastSuccessfulReplicationCycleTime":
            suggest = "last_successful_replication_cycle_time"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "replicationHealth":
            suggest = "replication_health"
        elif key == "replicationStatus":
            suggest = "replication_status"
        elif key == "replicationStatusDescription":
            suggest = "replication_status_description"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "masterSiteName":
            suggest = "master_site_name"
        elif key == "migrateAgentId":
            suggest = "migrate_agent_id"
        elif key == "sourceName":
            suggest = "source_name"
        elif key == "sourcePlatform":
            suggest = "source_platform"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_operations: Sequence[str],
                 current_job: 'outputs.WorkloadInstanceModelPropertiesResponseCurrentJob',
                 health_errors: Sequence['outputs.HealthErrorModelResponse'],
                 last_successful_replication_cycle_time: str,
                 provisioning_state: str,
                 replication_health: str,
                 replication_status: str,
                 replication_status_description: str,
                 custom_properties: Optional[Any] = None,
                 display_name: Optional[str] = None,
                 master_site_name: Optional[str] = None,
                 migrate_agent_id: Optional[str] = None,
                 name: Optional[str] = None,
                 source_name: Optional[str] = None,
                 source_platform: Optional[str] = None):
        """
        Workload instance model properties.
        :param Sequence[str] allowed_operations: Gets or sets the allowed scenarios on the workload instance.
        :param Sequence['HealthErrorModelResponse'] health_errors: Gets or sets the list of health errors.
        :param str last_successful_replication_cycle_time: Gets or sets the Last successful replication cycle time.
        :param str provisioning_state: Gets or sets the provisioning state of the workload instance.
        :param str replication_health: Gets or sets the replication health of the workload instance.
        :param str replication_status: Gets or sets the replication state of the workload instance.
        :param str replication_status_description: Gets or sets the workload replication state description.
        :param Union['ApacheTomcatWorkloadInstanceModelCustomPropertiesResponse', 'IISWorkloadInstanceModelCustomPropertiesResponse'] custom_properties: Workload instance model custom properties.
        :param str display_name: Gets or sets the display name.
        :param str master_site_name: Gets or Sets the master site name.
        :param str migrate_agent_id: Gets or sets the migrate agent id associated with the workload instance.
        :param str name: Gets or sets the workload instance name.
        :param str source_name: Gets or sets the source name.
        :param str source_platform: Gets or sets the source platform.
        """
        pulumi.set(__self__, "allowed_operations", allowed_operations)
        pulumi.set(__self__, "current_job", current_job)
        pulumi.set(__self__, "health_errors", health_errors)
        pulumi.set(__self__, "last_successful_replication_cycle_time", last_successful_replication_cycle_time)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "replication_health", replication_health)
        pulumi.set(__self__, "replication_status", replication_status)
        pulumi.set(__self__, "replication_status_description", replication_status_description)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if master_site_name is not None:
            pulumi.set(__self__, "master_site_name", master_site_name)
        if migrate_agent_id is not None:
            pulumi.set(__self__, "migrate_agent_id", migrate_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_platform is not None:
            pulumi.set(__self__, "source_platform", source_platform)

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Sequence[str]:
        """
        Gets or sets the allowed scenarios on the workload instance.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="currentJob")
    def current_job(self) -> 'outputs.WorkloadInstanceModelPropertiesResponseCurrentJob':
        return pulumi.get(self, "current_job")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Sequence['outputs.HealthErrorModelResponse']:
        """
        Gets or sets the list of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="lastSuccessfulReplicationCycleTime")
    def last_successful_replication_cycle_time(self) -> str:
        """
        Gets or sets the Last successful replication cycle time.
        """
        return pulumi.get(self, "last_successful_replication_cycle_time")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the workload instance.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="replicationHealth")
    def replication_health(self) -> str:
        """
        Gets or sets the replication health of the workload instance.
        """
        return pulumi.get(self, "replication_health")

    @property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> str:
        """
        Gets or sets the replication state of the workload instance.
        """
        return pulumi.get(self, "replication_status")

    @property
    @pulumi.getter(name="replicationStatusDescription")
    def replication_status_description(self) -> str:
        """
        Gets or sets the workload replication state description.
        """
        return pulumi.get(self, "replication_status_description")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Any]:
        """
        Workload instance model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="masterSiteName")
    def master_site_name(self) -> Optional[str]:
        """
        Gets or Sets the master site name.
        """
        return pulumi.get(self, "master_site_name")

    @property
    @pulumi.getter(name="migrateAgentId")
    def migrate_agent_id(self) -> Optional[str]:
        """
        Gets or sets the migrate agent id associated with the workload instance.
        """
        return pulumi.get(self, "migrate_agent_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets or sets the workload instance name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        """
        Gets or sets the source name.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourcePlatform")
    def source_platform(self) -> Optional[str]:
        """
        Gets or sets the source platform.
        """
        return pulumi.get(self, "source_platform")


@pulumi.output_type
class WorkloadInstanceModelPropertiesResponseCurrentJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceModelPropertiesResponseCurrentJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceModelPropertiesResponseCurrentJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceModelPropertiesResponseCurrentJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 end_time: str,
                 id: str,
                 name: str,
                 scenario_name: str,
                 start_time: str,
                 state: str):
        """
        :param str display_name: Gets or sets the workflow friendly display name.
        :param str end_time: Gets or sets end time of the workflow.
        :param str id: Gets or sets workflow Id.
        :param str name: Gets or sets workflow name.
        :param str scenario_name: Gets or sets workload scenario name.
        :param str start_time: Gets or sets start time of the workflow.
        :param str state: Gets or sets workflow state.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scenario_name", scenario_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the workflow friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Gets or sets end time of the workflow.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets workflow Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets workflow name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> str:
        """
        Gets or sets workload scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Gets or sets start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Gets or sets workflow state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class WorkloadInstanceModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


