# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['SqlAssessmentV2OperationArgs', 'SqlAssessmentV2Operation']

@pulumi.input_type
class SqlAssessmentV2OperationArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 assessment_type: Optional[pulumi.Input[Union[str, 'AssessmentType']]] = None,
                 async_commit_mode_intent: Optional[pulumi.Input[Union[str, 'AsyncCommitModeIntent']]] = None,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 azure_offer_code: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_offer_code_for_vm: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_security_offering_type: Optional[pulumi.Input[Union[str, 'AzureSecurityOfferingType']]] = None,
                 azure_sql_database_settings: Optional[pulumi.Input['SqlDbSettingsArgs']] = None,
                 azure_sql_managed_instance_settings: Optional[pulumi.Input['SqlMiSettingsArgs']] = None,
                 azure_sql_vm_settings: Optional[pulumi.Input['SqlVmSettingsArgs']] = None,
                 confidence_rating_in_percentage: Optional[pulumi.Input[float]] = None,
                 currency: Optional[pulumi.Input[Union[str, 'AzureCurrency']]] = None,
                 disaster_recovery_location: Optional[pulumi.Input[Union[str, 'AzureLocation']]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 ea_subscription_id: Optional[pulumi.Input[str]] = None,
                 enable_hadr_assessment: Optional[pulumi.Input[bool]] = None,
                 entity_uptime: Optional[pulumi.Input['EntityUptimeArgs']] = None,
                 environment_type: Optional[pulumi.Input[Union[str, 'EnvironmentType']]] = None,
                 group_type: Optional[pulumi.Input[Union[str, 'GroupType']]] = None,
                 is_internet_access_available: Optional[pulumi.Input[bool]] = None,
                 multi_subnet_intent: Optional[pulumi.Input[Union[str, 'MultiSubnetIntent']]] = None,
                 optimization_logic: Optional[pulumi.Input[Union[str, 'OptimizationLogic']]] = None,
                 os_license: Optional[pulumi.Input[Union[str, 'OsLicense']]] = None,
                 percentile: Optional[pulumi.Input[Union[str, 'Percentile']]] = None,
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 reserved_instance: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 reserved_instance_for_vm: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None,
                 sizing_criterion: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]] = None,
                 sql_server_license: Optional[pulumi.Input[Union[str, 'SqlServerLicense']]] = None,
                 time_range: Optional[pulumi.Input[Union[str, 'TimeRange']]] = None):
        """
        The set of arguments for constructing a SqlAssessmentV2Operation resource.
        :param pulumi.Input[str] group_name: Group ARM name
        :param pulumi.Input[str] project_name: Assessment Project Name
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] assessment_name: SQL Assessment arm name.
        :param pulumi.Input[Union[str, 'AssessmentType']] assessment_type: Assessment type of the assessment.
        :param pulumi.Input[Union[str, 'AsyncCommitModeIntent']] async_commit_mode_intent: Gets or sets user preference indicating intent of async commit mode.
        :param pulumi.Input[str] azure_location: Azure Location or Azure region where to which the machines will be migrated.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code: Azure Offer Code.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code_for_vm: Gets or sets Azure Offer Code for VM.
        :param pulumi.Input[Union[str, 'AzureSecurityOfferingType']] azure_security_offering_type: Gets or sets a value indicating azure security offering type.
        :param pulumi.Input['SqlDbSettingsArgs'] azure_sql_database_settings: Gets or sets user configurable SQL database settings.
        :param pulumi.Input['SqlMiSettingsArgs'] azure_sql_managed_instance_settings: Gets or sets user configurable SQL managed instance settings.
        :param pulumi.Input['SqlVmSettingsArgs'] azure_sql_vm_settings: Gets or sets user configurable SQL VM settings.
        :param pulumi.Input[float] confidence_rating_in_percentage: Confidence Rating in Percentage.
        :param pulumi.Input[Union[str, 'AzureCurrency']] currency: Currency in which prices should be reported.
        :param pulumi.Input[Union[str, 'AzureLocation']] disaster_recovery_location: Gets or sets the Azure Location or Azure region where to which the machines
               will be migrated.
        :param pulumi.Input[float] discount_percentage: Custom discount percentage.
        :param pulumi.Input[str] ea_subscription_id: Gets or sets the Enterprise agreement subscription id.
        :param pulumi.Input[bool] enable_hadr_assessment: Gets or sets a value indicating whether HADR assessments needs to be created.
        :param pulumi.Input['EntityUptimeArgs'] entity_uptime: Gets or sets the duration for which the entity (SQL, VMs) are up in the
               on-premises environment.
        :param pulumi.Input[Union[str, 'EnvironmentType']] environment_type: Gets or sets user configurable setting to display the environment type.
        :param pulumi.Input[Union[str, 'GroupType']] group_type: Gets the group type for the assessment.
        :param pulumi.Input[bool] is_internet_access_available: Gets or sets a value indicating whether internet access is available.
        :param pulumi.Input[Union[str, 'MultiSubnetIntent']] multi_subnet_intent: Gets or sets user preference indicating intent of multi-subnet configuration.
        :param pulumi.Input[Union[str, 'OptimizationLogic']] optimization_logic: Gets or sets SQL optimization logic.
        :param pulumi.Input[Union[str, 'OsLicense']] os_license: Gets or sets user configurable setting to display the azure hybrid use benefit.
        :param pulumi.Input[Union[str, 'Percentile']] percentile: Percentile of the utilization data values to be considered while assessing
               machines.
        :param pulumi.Input[str] perf_data_end_time: Gets or sets the end time to consider performance data for assessment.
        :param pulumi.Input[str] perf_data_start_time: Gets or sets the start time to consider performance data for assessment.
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: The status of the last operation.
        :param pulumi.Input[Union[str, 'AzureReservedInstance']] reserved_instance: Reserved instance.
        :param pulumi.Input[Union[str, 'AzureReservedInstance']] reserved_instance_for_vm: Gets or sets azure reserved instance for VM.
        :param pulumi.Input[float] scaling_factor: Percentage of buffer that user wants on performance metrics when recommending
               Azure sizes.
        :param pulumi.Input[Union[str, 'AssessmentSizingCriterion']] sizing_criterion: Assessment sizing criterion.
        :param pulumi.Input[Union[str, 'SqlServerLicense']] sql_server_license: SQL server license.
        :param pulumi.Input[Union[str, 'TimeRange']] time_range: Time Range for which the historic utilization data should be considered for
               assessment.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if assessment_name is not None:
            pulumi.set(__self__, "assessment_name", assessment_name)
        if assessment_type is not None:
            pulumi.set(__self__, "assessment_type", assessment_type)
        if async_commit_mode_intent is not None:
            pulumi.set(__self__, "async_commit_mode_intent", async_commit_mode_intent)
        if azure_location is not None:
            pulumi.set(__self__, "azure_location", azure_location)
        if azure_offer_code is not None:
            pulumi.set(__self__, "azure_offer_code", azure_offer_code)
        if azure_offer_code_for_vm is not None:
            pulumi.set(__self__, "azure_offer_code_for_vm", azure_offer_code_for_vm)
        if azure_security_offering_type is not None:
            pulumi.set(__self__, "azure_security_offering_type", azure_security_offering_type)
        if azure_sql_database_settings is not None:
            pulumi.set(__self__, "azure_sql_database_settings", azure_sql_database_settings)
        if azure_sql_managed_instance_settings is not None:
            pulumi.set(__self__, "azure_sql_managed_instance_settings", azure_sql_managed_instance_settings)
        if azure_sql_vm_settings is not None:
            pulumi.set(__self__, "azure_sql_vm_settings", azure_sql_vm_settings)
        if confidence_rating_in_percentage is not None:
            pulumi.set(__self__, "confidence_rating_in_percentage", confidence_rating_in_percentage)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if disaster_recovery_location is not None:
            pulumi.set(__self__, "disaster_recovery_location", disaster_recovery_location)
        if discount_percentage is not None:
            pulumi.set(__self__, "discount_percentage", discount_percentage)
        if ea_subscription_id is not None:
            pulumi.set(__self__, "ea_subscription_id", ea_subscription_id)
        if enable_hadr_assessment is not None:
            pulumi.set(__self__, "enable_hadr_assessment", enable_hadr_assessment)
        if entity_uptime is not None:
            pulumi.set(__self__, "entity_uptime", entity_uptime)
        if environment_type is not None:
            pulumi.set(__self__, "environment_type", environment_type)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if is_internet_access_available is not None:
            pulumi.set(__self__, "is_internet_access_available", is_internet_access_available)
        if multi_subnet_intent is not None:
            pulumi.set(__self__, "multi_subnet_intent", multi_subnet_intent)
        if optimization_logic is not None:
            pulumi.set(__self__, "optimization_logic", optimization_logic)
        if os_license is not None:
            pulumi.set(__self__, "os_license", os_license)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if perf_data_end_time is not None:
            pulumi.set(__self__, "perf_data_end_time", perf_data_end_time)
        if perf_data_start_time is not None:
            pulumi.set(__self__, "perf_data_start_time", perf_data_start_time)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if reserved_instance is not None:
            pulumi.set(__self__, "reserved_instance", reserved_instance)
        if reserved_instance_for_vm is not None:
            pulumi.set(__self__, "reserved_instance_for_vm", reserved_instance_for_vm)
        if scaling_factor is not None:
            pulumi.set(__self__, "scaling_factor", scaling_factor)
        if sizing_criterion is not None:
            pulumi.set(__self__, "sizing_criterion", sizing_criterion)
        if sql_server_license is not None:
            pulumi.set(__self__, "sql_server_license", sql_server_license)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Group ARM name
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        """
        Assessment Project Name
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="assessmentName")
    def assessment_name(self) -> Optional[pulumi.Input[str]]:
        """
        SQL Assessment arm name.
        """
        return pulumi.get(self, "assessment_name")

    @assessment_name.setter
    def assessment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assessment_name", value)

    @property
    @pulumi.getter(name="assessmentType")
    def assessment_type(self) -> Optional[pulumi.Input[Union[str, 'AssessmentType']]]:
        """
        Assessment type of the assessment.
        """
        return pulumi.get(self, "assessment_type")

    @assessment_type.setter
    def assessment_type(self, value: Optional[pulumi.Input[Union[str, 'AssessmentType']]]):
        pulumi.set(self, "assessment_type", value)

    @property
    @pulumi.getter(name="asyncCommitModeIntent")
    def async_commit_mode_intent(self) -> Optional[pulumi.Input[Union[str, 'AsyncCommitModeIntent']]]:
        """
        Gets or sets user preference indicating intent of async commit mode.
        """
        return pulumi.get(self, "async_commit_mode_intent")

    @async_commit_mode_intent.setter
    def async_commit_mode_intent(self, value: Optional[pulumi.Input[Union[str, 'AsyncCommitModeIntent']]]):
        pulumi.set(self, "async_commit_mode_intent", value)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Location or Azure region where to which the machines will be migrated.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_location", value)

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> Optional[pulumi.Input[Union[str, 'AzureOfferCode']]]:
        """
        Azure Offer Code.
        """
        return pulumi.get(self, "azure_offer_code")

    @azure_offer_code.setter
    def azure_offer_code(self, value: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]]):
        pulumi.set(self, "azure_offer_code", value)

    @property
    @pulumi.getter(name="azureOfferCodeForVm")
    def azure_offer_code_for_vm(self) -> Optional[pulumi.Input[Union[str, 'AzureOfferCode']]]:
        """
        Gets or sets Azure Offer Code for VM.
        """
        return pulumi.get(self, "azure_offer_code_for_vm")

    @azure_offer_code_for_vm.setter
    def azure_offer_code_for_vm(self, value: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]]):
        pulumi.set(self, "azure_offer_code_for_vm", value)

    @property
    @pulumi.getter(name="azureSecurityOfferingType")
    def azure_security_offering_type(self) -> Optional[pulumi.Input[Union[str, 'AzureSecurityOfferingType']]]:
        """
        Gets or sets a value indicating azure security offering type.
        """
        return pulumi.get(self, "azure_security_offering_type")

    @azure_security_offering_type.setter
    def azure_security_offering_type(self, value: Optional[pulumi.Input[Union[str, 'AzureSecurityOfferingType']]]):
        pulumi.set(self, "azure_security_offering_type", value)

    @property
    @pulumi.getter(name="azureSqlDatabaseSettings")
    def azure_sql_database_settings(self) -> Optional[pulumi.Input['SqlDbSettingsArgs']]:
        """
        Gets or sets user configurable SQL database settings.
        """
        return pulumi.get(self, "azure_sql_database_settings")

    @azure_sql_database_settings.setter
    def azure_sql_database_settings(self, value: Optional[pulumi.Input['SqlDbSettingsArgs']]):
        pulumi.set(self, "azure_sql_database_settings", value)

    @property
    @pulumi.getter(name="azureSqlManagedInstanceSettings")
    def azure_sql_managed_instance_settings(self) -> Optional[pulumi.Input['SqlMiSettingsArgs']]:
        """
        Gets or sets user configurable SQL managed instance settings.
        """
        return pulumi.get(self, "azure_sql_managed_instance_settings")

    @azure_sql_managed_instance_settings.setter
    def azure_sql_managed_instance_settings(self, value: Optional[pulumi.Input['SqlMiSettingsArgs']]):
        pulumi.set(self, "azure_sql_managed_instance_settings", value)

    @property
    @pulumi.getter(name="azureSqlVmSettings")
    def azure_sql_vm_settings(self) -> Optional[pulumi.Input['SqlVmSettingsArgs']]:
        """
        Gets or sets user configurable SQL VM settings.
        """
        return pulumi.get(self, "azure_sql_vm_settings")

    @azure_sql_vm_settings.setter
    def azure_sql_vm_settings(self, value: Optional[pulumi.Input['SqlVmSettingsArgs']]):
        pulumi.set(self, "azure_sql_vm_settings", value)

    @property
    @pulumi.getter(name="confidenceRatingInPercentage")
    def confidence_rating_in_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Confidence Rating in Percentage.
        """
        return pulumi.get(self, "confidence_rating_in_percentage")

    @confidence_rating_in_percentage.setter
    def confidence_rating_in_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "confidence_rating_in_percentage", value)

    @property
    @pulumi.getter
    def currency(self) -> Optional[pulumi.Input[Union[str, 'AzureCurrency']]]:
        """
        Currency in which prices should be reported.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: Optional[pulumi.Input[Union[str, 'AzureCurrency']]]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="disasterRecoveryLocation")
    def disaster_recovery_location(self) -> Optional[pulumi.Input[Union[str, 'AzureLocation']]]:
        """
        Gets or sets the Azure Location or Azure region where to which the machines
        will be migrated.
        """
        return pulumi.get(self, "disaster_recovery_location")

    @disaster_recovery_location.setter
    def disaster_recovery_location(self, value: Optional[pulumi.Input[Union[str, 'AzureLocation']]]):
        pulumi.set(self, "disaster_recovery_location", value)

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Custom discount percentage.
        """
        return pulumi.get(self, "discount_percentage")

    @discount_percentage.setter
    def discount_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "discount_percentage", value)

    @property
    @pulumi.getter(name="eaSubscriptionId")
    def ea_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Enterprise agreement subscription id.
        """
        return pulumi.get(self, "ea_subscription_id")

    @ea_subscription_id.setter
    def ea_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_subscription_id", value)

    @property
    @pulumi.getter(name="enableHadrAssessment")
    def enable_hadr_assessment(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether HADR assessments needs to be created.
        """
        return pulumi.get(self, "enable_hadr_assessment")

    @enable_hadr_assessment.setter
    def enable_hadr_assessment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hadr_assessment", value)

    @property
    @pulumi.getter(name="entityUptime")
    def entity_uptime(self) -> Optional[pulumi.Input['EntityUptimeArgs']]:
        """
        Gets or sets the duration for which the entity (SQL, VMs) are up in the
        on-premises environment.
        """
        return pulumi.get(self, "entity_uptime")

    @entity_uptime.setter
    def entity_uptime(self, value: Optional[pulumi.Input['EntityUptimeArgs']]):
        pulumi.set(self, "entity_uptime", value)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[pulumi.Input[Union[str, 'EnvironmentType']]]:
        """
        Gets or sets user configurable setting to display the environment type.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: Optional[pulumi.Input[Union[str, 'EnvironmentType']]]):
        pulumi.set(self, "environment_type", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[Union[str, 'GroupType']]]:
        """
        Gets the group type for the assessment.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[Union[str, 'GroupType']]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="isInternetAccessAvailable")
    def is_internet_access_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether internet access is available.
        """
        return pulumi.get(self, "is_internet_access_available")

    @is_internet_access_available.setter
    def is_internet_access_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_internet_access_available", value)

    @property
    @pulumi.getter(name="multiSubnetIntent")
    def multi_subnet_intent(self) -> Optional[pulumi.Input[Union[str, 'MultiSubnetIntent']]]:
        """
        Gets or sets user preference indicating intent of multi-subnet configuration.
        """
        return pulumi.get(self, "multi_subnet_intent")

    @multi_subnet_intent.setter
    def multi_subnet_intent(self, value: Optional[pulumi.Input[Union[str, 'MultiSubnetIntent']]]):
        pulumi.set(self, "multi_subnet_intent", value)

    @property
    @pulumi.getter(name="optimizationLogic")
    def optimization_logic(self) -> Optional[pulumi.Input[Union[str, 'OptimizationLogic']]]:
        """
        Gets or sets SQL optimization logic.
        """
        return pulumi.get(self, "optimization_logic")

    @optimization_logic.setter
    def optimization_logic(self, value: Optional[pulumi.Input[Union[str, 'OptimizationLogic']]]):
        pulumi.set(self, "optimization_logic", value)

    @property
    @pulumi.getter(name="osLicense")
    def os_license(self) -> Optional[pulumi.Input[Union[str, 'OsLicense']]]:
        """
        Gets or sets user configurable setting to display the azure hybrid use benefit.
        """
        return pulumi.get(self, "os_license")

    @os_license.setter
    def os_license(self, value: Optional[pulumi.Input[Union[str, 'OsLicense']]]):
        pulumi.set(self, "os_license", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[Union[str, 'Percentile']]]:
        """
        Percentile of the utilization data values to be considered while assessing
        machines.
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[Union[str, 'Percentile']]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="perfDataEndTime")
    def perf_data_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the end time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_end_time")

    @perf_data_end_time.setter
    def perf_data_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_data_end_time", value)

    @property
    @pulumi.getter(name="perfDataStartTime")
    def perf_data_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the start time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_start_time")

    @perf_data_start_time.setter
    def perf_data_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_data_start_time", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningState']]]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)

    @property
    @pulumi.getter(name="reservedInstance")
    def reserved_instance(self) -> Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]]:
        """
        Reserved instance.
        """
        return pulumi.get(self, "reserved_instance")

    @reserved_instance.setter
    def reserved_instance(self, value: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]]):
        pulumi.set(self, "reserved_instance", value)

    @property
    @pulumi.getter(name="reservedInstanceForVm")
    def reserved_instance_for_vm(self) -> Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]]:
        """
        Gets or sets azure reserved instance for VM.
        """
        return pulumi.get(self, "reserved_instance_for_vm")

    @reserved_instance_for_vm.setter
    def reserved_instance_for_vm(self, value: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]]):
        pulumi.set(self, "reserved_instance_for_vm", value)

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of buffer that user wants on performance metrics when recommending
        Azure sizes.
        """
        return pulumi.get(self, "scaling_factor")

    @scaling_factor.setter
    def scaling_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scaling_factor", value)

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]]:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @sizing_criterion.setter
    def sizing_criterion(self, value: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]]):
        pulumi.set(self, "sizing_criterion", value)

    @property
    @pulumi.getter(name="sqlServerLicense")
    def sql_server_license(self) -> Optional[pulumi.Input[Union[str, 'SqlServerLicense']]]:
        """
        SQL server license.
        """
        return pulumi.get(self, "sql_server_license")

    @sql_server_license.setter
    def sql_server_license(self, value: Optional[pulumi.Input[Union[str, 'SqlServerLicense']]]):
        pulumi.set(self, "sql_server_license", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input[Union[str, 'TimeRange']]]:
        """
        Time Range for which the historic utilization data should be considered for
        assessment.
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input[Union[str, 'TimeRange']]]):
        pulumi.set(self, "time_range", value)


class SqlAssessmentV2Operation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 assessment_type: Optional[pulumi.Input[Union[str, 'AssessmentType']]] = None,
                 async_commit_mode_intent: Optional[pulumi.Input[Union[str, 'AsyncCommitModeIntent']]] = None,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 azure_offer_code: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_offer_code_for_vm: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_security_offering_type: Optional[pulumi.Input[Union[str, 'AzureSecurityOfferingType']]] = None,
                 azure_sql_database_settings: Optional[pulumi.Input[pulumi.InputType['SqlDbSettingsArgs']]] = None,
                 azure_sql_managed_instance_settings: Optional[pulumi.Input[pulumi.InputType['SqlMiSettingsArgs']]] = None,
                 azure_sql_vm_settings: Optional[pulumi.Input[pulumi.InputType['SqlVmSettingsArgs']]] = None,
                 confidence_rating_in_percentage: Optional[pulumi.Input[float]] = None,
                 currency: Optional[pulumi.Input[Union[str, 'AzureCurrency']]] = None,
                 disaster_recovery_location: Optional[pulumi.Input[Union[str, 'AzureLocation']]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 ea_subscription_id: Optional[pulumi.Input[str]] = None,
                 enable_hadr_assessment: Optional[pulumi.Input[bool]] = None,
                 entity_uptime: Optional[pulumi.Input[pulumi.InputType['EntityUptimeArgs']]] = None,
                 environment_type: Optional[pulumi.Input[Union[str, 'EnvironmentType']]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[Union[str, 'GroupType']]] = None,
                 is_internet_access_available: Optional[pulumi.Input[bool]] = None,
                 multi_subnet_intent: Optional[pulumi.Input[Union[str, 'MultiSubnetIntent']]] = None,
                 optimization_logic: Optional[pulumi.Input[Union[str, 'OptimizationLogic']]] = None,
                 os_license: Optional[pulumi.Input[Union[str, 'OsLicense']]] = None,
                 percentile: Optional[pulumi.Input[Union[str, 'Percentile']]] = None,
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 reserved_instance: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 reserved_instance_for_vm: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None,
                 sizing_criterion: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]] = None,
                 sql_server_license: Optional[pulumi.Input[Union[str, 'SqlServerLicense']]] = None,
                 time_range: Optional[pulumi.Input[Union[str, 'TimeRange']]] = None,
                 __props__=None):
        """
        SQL Assessment REST resource.
        Azure REST API version: 2023-03-15.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assessment_name: SQL Assessment arm name.
        :param pulumi.Input[Union[str, 'AssessmentType']] assessment_type: Assessment type of the assessment.
        :param pulumi.Input[Union[str, 'AsyncCommitModeIntent']] async_commit_mode_intent: Gets or sets user preference indicating intent of async commit mode.
        :param pulumi.Input[str] azure_location: Azure Location or Azure region where to which the machines will be migrated.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code: Azure Offer Code.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code_for_vm: Gets or sets Azure Offer Code for VM.
        :param pulumi.Input[Union[str, 'AzureSecurityOfferingType']] azure_security_offering_type: Gets or sets a value indicating azure security offering type.
        :param pulumi.Input[pulumi.InputType['SqlDbSettingsArgs']] azure_sql_database_settings: Gets or sets user configurable SQL database settings.
        :param pulumi.Input[pulumi.InputType['SqlMiSettingsArgs']] azure_sql_managed_instance_settings: Gets or sets user configurable SQL managed instance settings.
        :param pulumi.Input[pulumi.InputType['SqlVmSettingsArgs']] azure_sql_vm_settings: Gets or sets user configurable SQL VM settings.
        :param pulumi.Input[float] confidence_rating_in_percentage: Confidence Rating in Percentage.
        :param pulumi.Input[Union[str, 'AzureCurrency']] currency: Currency in which prices should be reported.
        :param pulumi.Input[Union[str, 'AzureLocation']] disaster_recovery_location: Gets or sets the Azure Location or Azure region where to which the machines
               will be migrated.
        :param pulumi.Input[float] discount_percentage: Custom discount percentage.
        :param pulumi.Input[str] ea_subscription_id: Gets or sets the Enterprise agreement subscription id.
        :param pulumi.Input[bool] enable_hadr_assessment: Gets or sets a value indicating whether HADR assessments needs to be created.
        :param pulumi.Input[pulumi.InputType['EntityUptimeArgs']] entity_uptime: Gets or sets the duration for which the entity (SQL, VMs) are up in the
               on-premises environment.
        :param pulumi.Input[Union[str, 'EnvironmentType']] environment_type: Gets or sets user configurable setting to display the environment type.
        :param pulumi.Input[str] group_name: Group ARM name
        :param pulumi.Input[Union[str, 'GroupType']] group_type: Gets the group type for the assessment.
        :param pulumi.Input[bool] is_internet_access_available: Gets or sets a value indicating whether internet access is available.
        :param pulumi.Input[Union[str, 'MultiSubnetIntent']] multi_subnet_intent: Gets or sets user preference indicating intent of multi-subnet configuration.
        :param pulumi.Input[Union[str, 'OptimizationLogic']] optimization_logic: Gets or sets SQL optimization logic.
        :param pulumi.Input[Union[str, 'OsLicense']] os_license: Gets or sets user configurable setting to display the azure hybrid use benefit.
        :param pulumi.Input[Union[str, 'Percentile']] percentile: Percentile of the utilization data values to be considered while assessing
               machines.
        :param pulumi.Input[str] perf_data_end_time: Gets or sets the end time to consider performance data for assessment.
        :param pulumi.Input[str] perf_data_start_time: Gets or sets the start time to consider performance data for assessment.
        :param pulumi.Input[str] project_name: Assessment Project Name
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: The status of the last operation.
        :param pulumi.Input[Union[str, 'AzureReservedInstance']] reserved_instance: Reserved instance.
        :param pulumi.Input[Union[str, 'AzureReservedInstance']] reserved_instance_for_vm: Gets or sets azure reserved instance for VM.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[float] scaling_factor: Percentage of buffer that user wants on performance metrics when recommending
               Azure sizes.
        :param pulumi.Input[Union[str, 'AssessmentSizingCriterion']] sizing_criterion: Assessment sizing criterion.
        :param pulumi.Input[Union[str, 'SqlServerLicense']] sql_server_license: SQL server license.
        :param pulumi.Input[Union[str, 'TimeRange']] time_range: Time Range for which the historic utilization data should be considered for
               assessment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SqlAssessmentV2OperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SQL Assessment REST resource.
        Azure REST API version: 2023-03-15.

        :param str resource_name: The name of the resource.
        :param SqlAssessmentV2OperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SqlAssessmentV2OperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 assessment_type: Optional[pulumi.Input[Union[str, 'AssessmentType']]] = None,
                 async_commit_mode_intent: Optional[pulumi.Input[Union[str, 'AsyncCommitModeIntent']]] = None,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 azure_offer_code: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_offer_code_for_vm: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_security_offering_type: Optional[pulumi.Input[Union[str, 'AzureSecurityOfferingType']]] = None,
                 azure_sql_database_settings: Optional[pulumi.Input[pulumi.InputType['SqlDbSettingsArgs']]] = None,
                 azure_sql_managed_instance_settings: Optional[pulumi.Input[pulumi.InputType['SqlMiSettingsArgs']]] = None,
                 azure_sql_vm_settings: Optional[pulumi.Input[pulumi.InputType['SqlVmSettingsArgs']]] = None,
                 confidence_rating_in_percentage: Optional[pulumi.Input[float]] = None,
                 currency: Optional[pulumi.Input[Union[str, 'AzureCurrency']]] = None,
                 disaster_recovery_location: Optional[pulumi.Input[Union[str, 'AzureLocation']]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 ea_subscription_id: Optional[pulumi.Input[str]] = None,
                 enable_hadr_assessment: Optional[pulumi.Input[bool]] = None,
                 entity_uptime: Optional[pulumi.Input[pulumi.InputType['EntityUptimeArgs']]] = None,
                 environment_type: Optional[pulumi.Input[Union[str, 'EnvironmentType']]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[Union[str, 'GroupType']]] = None,
                 is_internet_access_available: Optional[pulumi.Input[bool]] = None,
                 multi_subnet_intent: Optional[pulumi.Input[Union[str, 'MultiSubnetIntent']]] = None,
                 optimization_logic: Optional[pulumi.Input[Union[str, 'OptimizationLogic']]] = None,
                 os_license: Optional[pulumi.Input[Union[str, 'OsLicense']]] = None,
                 percentile: Optional[pulumi.Input[Union[str, 'Percentile']]] = None,
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 reserved_instance: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 reserved_instance_for_vm: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None,
                 sizing_criterion: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]] = None,
                 sql_server_license: Optional[pulumi.Input[Union[str, 'SqlServerLicense']]] = None,
                 time_range: Optional[pulumi.Input[Union[str, 'TimeRange']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SqlAssessmentV2OperationArgs.__new__(SqlAssessmentV2OperationArgs)

            __props__.__dict__["assessment_name"] = assessment_name
            __props__.__dict__["assessment_type"] = assessment_type
            __props__.__dict__["async_commit_mode_intent"] = async_commit_mode_intent
            __props__.__dict__["azure_location"] = azure_location
            __props__.__dict__["azure_offer_code"] = azure_offer_code
            __props__.__dict__["azure_offer_code_for_vm"] = azure_offer_code_for_vm
            __props__.__dict__["azure_security_offering_type"] = azure_security_offering_type
            __props__.__dict__["azure_sql_database_settings"] = azure_sql_database_settings
            __props__.__dict__["azure_sql_managed_instance_settings"] = azure_sql_managed_instance_settings
            __props__.__dict__["azure_sql_vm_settings"] = azure_sql_vm_settings
            __props__.__dict__["confidence_rating_in_percentage"] = confidence_rating_in_percentage
            __props__.__dict__["currency"] = currency
            __props__.__dict__["disaster_recovery_location"] = disaster_recovery_location
            __props__.__dict__["discount_percentage"] = discount_percentage
            __props__.__dict__["ea_subscription_id"] = ea_subscription_id
            __props__.__dict__["enable_hadr_assessment"] = enable_hadr_assessment
            __props__.__dict__["entity_uptime"] = entity_uptime
            __props__.__dict__["environment_type"] = environment_type
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["group_type"] = group_type
            __props__.__dict__["is_internet_access_available"] = is_internet_access_available
            __props__.__dict__["multi_subnet_intent"] = multi_subnet_intent
            __props__.__dict__["optimization_logic"] = optimization_logic
            __props__.__dict__["os_license"] = os_license
            __props__.__dict__["percentile"] = percentile
            __props__.__dict__["perf_data_end_time"] = perf_data_end_time
            __props__.__dict__["perf_data_start_time"] = perf_data_start_time
            if project_name is None and not opts.urn:
                raise TypeError("Missing required property 'project_name'")
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["provisioning_state"] = provisioning_state
            __props__.__dict__["reserved_instance"] = reserved_instance
            __props__.__dict__["reserved_instance_for_vm"] = reserved_instance_for_vm
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["scaling_factor"] = scaling_factor
            __props__.__dict__["sizing_criterion"] = sizing_criterion
            __props__.__dict__["sql_server_license"] = sql_server_license
            __props__.__dict__["time_range"] = time_range
            __props__.__dict__["created_timestamp"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["prices_timestamp"] = None
            __props__.__dict__["schema_version"] = None
            __props__.__dict__["stage"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_timestamp"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:migrate/v20230315:SqlAssessmentV2Operation")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SqlAssessmentV2Operation, __self__).__init__(
            'azure-native:migrate:SqlAssessmentV2Operation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SqlAssessmentV2Operation':
        """
        Get an existing SqlAssessmentV2Operation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SqlAssessmentV2OperationArgs.__new__(SqlAssessmentV2OperationArgs)

        __props__.__dict__["assessment_type"] = None
        __props__.__dict__["async_commit_mode_intent"] = None
        __props__.__dict__["azure_location"] = None
        __props__.__dict__["azure_offer_code"] = None
        __props__.__dict__["azure_offer_code_for_vm"] = None
        __props__.__dict__["azure_security_offering_type"] = None
        __props__.__dict__["azure_sql_database_settings"] = None
        __props__.__dict__["azure_sql_managed_instance_settings"] = None
        __props__.__dict__["azure_sql_vm_settings"] = None
        __props__.__dict__["confidence_rating_in_percentage"] = None
        __props__.__dict__["created_timestamp"] = None
        __props__.__dict__["currency"] = None
        __props__.__dict__["disaster_recovery_location"] = None
        __props__.__dict__["discount_percentage"] = None
        __props__.__dict__["ea_subscription_id"] = None
        __props__.__dict__["enable_hadr_assessment"] = None
        __props__.__dict__["entity_uptime"] = None
        __props__.__dict__["environment_type"] = None
        __props__.__dict__["group_type"] = None
        __props__.__dict__["is_internet_access_available"] = None
        __props__.__dict__["multi_subnet_intent"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["optimization_logic"] = None
        __props__.__dict__["os_license"] = None
        __props__.__dict__["percentile"] = None
        __props__.__dict__["perf_data_end_time"] = None
        __props__.__dict__["perf_data_start_time"] = None
        __props__.__dict__["prices_timestamp"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["reserved_instance"] = None
        __props__.__dict__["reserved_instance_for_vm"] = None
        __props__.__dict__["scaling_factor"] = None
        __props__.__dict__["schema_version"] = None
        __props__.__dict__["sizing_criterion"] = None
        __props__.__dict__["sql_server_license"] = None
        __props__.__dict__["stage"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["time_range"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["updated_timestamp"] = None
        return SqlAssessmentV2Operation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assessmentType")
    def assessment_type(self) -> pulumi.Output[Optional[str]]:
        """
        Assessment type of the assessment.
        """
        return pulumi.get(self, "assessment_type")

    @property
    @pulumi.getter(name="asyncCommitModeIntent")
    def async_commit_mode_intent(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets user preference indicating intent of async commit mode.
        """
        return pulumi.get(self, "async_commit_mode_intent")

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> pulumi.Output[Optional[str]]:
        """
        Azure Location or Azure region where to which the machines will be migrated.
        """
        return pulumi.get(self, "azure_location")

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> pulumi.Output[Optional[str]]:
        """
        Azure Offer Code.
        """
        return pulumi.get(self, "azure_offer_code")

    @property
    @pulumi.getter(name="azureOfferCodeForVm")
    def azure_offer_code_for_vm(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets Azure Offer Code for VM.
        """
        return pulumi.get(self, "azure_offer_code_for_vm")

    @property
    @pulumi.getter(name="azureSecurityOfferingType")
    def azure_security_offering_type(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets a value indicating azure security offering type.
        """
        return pulumi.get(self, "azure_security_offering_type")

    @property
    @pulumi.getter(name="azureSqlDatabaseSettings")
    def azure_sql_database_settings(self) -> pulumi.Output[Optional['outputs.SqlDbSettingsResponse']]:
        """
        Gets or sets user configurable SQL database settings.
        """
        return pulumi.get(self, "azure_sql_database_settings")

    @property
    @pulumi.getter(name="azureSqlManagedInstanceSettings")
    def azure_sql_managed_instance_settings(self) -> pulumi.Output[Optional['outputs.SqlMiSettingsResponse']]:
        """
        Gets or sets user configurable SQL managed instance settings.
        """
        return pulumi.get(self, "azure_sql_managed_instance_settings")

    @property
    @pulumi.getter(name="azureSqlVmSettings")
    def azure_sql_vm_settings(self) -> pulumi.Output[Optional['outputs.SqlVmSettingsResponse']]:
        """
        Gets or sets user configurable SQL VM settings.
        """
        return pulumi.get(self, "azure_sql_vm_settings")

    @property
    @pulumi.getter(name="confidenceRatingInPercentage")
    def confidence_rating_in_percentage(self) -> pulumi.Output[Optional[float]]:
        """
        Confidence Rating in Percentage.
        """
        return pulumi.get(self, "confidence_rating_in_percentage")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> pulumi.Output[str]:
        """
        Date and Time when assessment was created.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter
    def currency(self) -> pulumi.Output[Optional[str]]:
        """
        Currency in which prices should be reported.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="disasterRecoveryLocation")
    def disaster_recovery_location(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the Azure Location or Azure region where to which the machines
        will be migrated.
        """
        return pulumi.get(self, "disaster_recovery_location")

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> pulumi.Output[Optional[float]]:
        """
        Custom discount percentage.
        """
        return pulumi.get(self, "discount_percentage")

    @property
    @pulumi.getter(name="eaSubscriptionId")
    def ea_subscription_id(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the Enterprise agreement subscription id.
        """
        return pulumi.get(self, "ea_subscription_id")

    @property
    @pulumi.getter(name="enableHadrAssessment")
    def enable_hadr_assessment(self) -> pulumi.Output[Optional[bool]]:
        """
        Gets or sets a value indicating whether HADR assessments needs to be created.
        """
        return pulumi.get(self, "enable_hadr_assessment")

    @property
    @pulumi.getter(name="entityUptime")
    def entity_uptime(self) -> pulumi.Output[Optional['outputs.EntityUptimeResponse']]:
        """
        Gets or sets the duration for which the entity (SQL, VMs) are up in the
        on-premises environment.
        """
        return pulumi.get(self, "entity_uptime")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets user configurable setting to display the environment type.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[Optional[str]]:
        """
        Gets the group type for the assessment.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="isInternetAccessAvailable")
    def is_internet_access_available(self) -> pulumi.Output[Optional[bool]]:
        """
        Gets or sets a value indicating whether internet access is available.
        """
        return pulumi.get(self, "is_internet_access_available")

    @property
    @pulumi.getter(name="multiSubnetIntent")
    def multi_subnet_intent(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets user preference indicating intent of multi-subnet configuration.
        """
        return pulumi.get(self, "multi_subnet_intent")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optimizationLogic")
    def optimization_logic(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets SQL optimization logic.
        """
        return pulumi.get(self, "optimization_logic")

    @property
    @pulumi.getter(name="osLicense")
    def os_license(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets user configurable setting to display the azure hybrid use benefit.
        """
        return pulumi.get(self, "os_license")

    @property
    @pulumi.getter
    def percentile(self) -> pulumi.Output[Optional[str]]:
        """
        Percentile of the utilization data values to be considered while assessing
        machines.
        """
        return pulumi.get(self, "percentile")

    @property
    @pulumi.getter(name="perfDataEndTime")
    def perf_data_end_time(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the end time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_end_time")

    @property
    @pulumi.getter(name="perfDataStartTime")
    def perf_data_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the start time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_start_time")

    @property
    @pulumi.getter(name="pricesTimestamp")
    def prices_timestamp(self) -> pulumi.Output[str]:
        """
        Last time when rates were queried.
        """
        return pulumi.get(self, "prices_timestamp")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[Optional[str]]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="reservedInstance")
    def reserved_instance(self) -> pulumi.Output[Optional[str]]:
        """
        Reserved instance.
        """
        return pulumi.get(self, "reserved_instance")

    @property
    @pulumi.getter(name="reservedInstanceForVm")
    def reserved_instance_for_vm(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets azure reserved instance for VM.
        """
        return pulumi.get(self, "reserved_instance_for_vm")

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> pulumi.Output[Optional[float]]:
        """
        Percentage of buffer that user wants on performance metrics when recommending
        Azure sizes.
        """
        return pulumi.get(self, "scaling_factor")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> pulumi.Output[str]:
        """
        Schema version.
        """
        return pulumi.get(self, "schema_version")

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> pulumi.Output[Optional[str]]:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @property
    @pulumi.getter(name="sqlServerLicense")
    def sql_server_license(self) -> pulumi.Output[Optional[str]]:
        """
        SQL server license.
        """
        return pulumi.get(self, "sql_server_license")

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Output[str]:
        """
        User configurable setting to display the Stage of Assessment.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Whether assessment is in valid state and all machines have been assessed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Output[Optional[str]]:
        """
        Time Range for which the historic utilization data should be considered for
        assessment.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> pulumi.Output[str]:
        """
        Date and Time when assessment was last updated.
        """
        return pulumi.get(self, "updated_timestamp")

