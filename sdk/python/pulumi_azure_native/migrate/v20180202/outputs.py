# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AssessmentPropertiesResponse',
    'GroupPropertiesResponse',
]

@pulumi.output_type
class AssessmentPropertiesResponse(dict):
    """
    Properties of an assessment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureHybridUseBenefit":
            suggest = "azure_hybrid_use_benefit"
        elif key == "azureLocation":
            suggest = "azure_location"
        elif key == "azureOfferCode":
            suggest = "azure_offer_code"
        elif key == "azurePricingTier":
            suggest = "azure_pricing_tier"
        elif key == "azureStorageRedundancy":
            suggest = "azure_storage_redundancy"
        elif key == "confidenceRatingInPercentage":
            suggest = "confidence_rating_in_percentage"
        elif key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "discountPercentage":
            suggest = "discount_percentage"
        elif key == "monthlyBandwidthCost":
            suggest = "monthly_bandwidth_cost"
        elif key == "monthlyComputeCost":
            suggest = "monthly_compute_cost"
        elif key == "monthlyStorageCost":
            suggest = "monthly_storage_cost"
        elif key == "numberOfMachines":
            suggest = "number_of_machines"
        elif key == "pricesTimestamp":
            suggest = "prices_timestamp"
        elif key == "scalingFactor":
            suggest = "scaling_factor"
        elif key == "sizingCriterion":
            suggest = "sizing_criterion"
        elif key == "timeRange":
            suggest = "time_range"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssessmentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssessmentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssessmentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_hybrid_use_benefit: str,
                 azure_location: str,
                 azure_offer_code: str,
                 azure_pricing_tier: str,
                 azure_storage_redundancy: str,
                 confidence_rating_in_percentage: float,
                 created_timestamp: str,
                 currency: str,
                 discount_percentage: float,
                 monthly_bandwidth_cost: float,
                 monthly_compute_cost: float,
                 monthly_storage_cost: float,
                 number_of_machines: int,
                 percentile: str,
                 prices_timestamp: str,
                 scaling_factor: float,
                 sizing_criterion: str,
                 stage: str,
                 status: str,
                 time_range: str,
                 updated_timestamp: str):
        """
        Properties of an assessment.
        :param str azure_hybrid_use_benefit: AHUB discount on windows virtual machines.
        :param str azure_location: Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        :param str azure_offer_code: Offer code according to which cost estimation is done.
        :param str azure_pricing_tier: Pricing tier for Size evaluation.
        :param str azure_storage_redundancy: Storage Redundancy type offered by Azure.
        :param float confidence_rating_in_percentage: Confidence rating percentage for assessment. Can be in the range [0, 100].
        :param str created_timestamp: Time when this project was created. Date-Time represented in ISO-8601 format.
        :param str currency: Currency to report prices in.
        :param float discount_percentage: Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        :param float monthly_bandwidth_cost: Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param float monthly_compute_cost: Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param float monthly_storage_cost: Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        :param int number_of_machines: Number of assessed machines part of this assessment.
        :param str percentile: Percentile of performance data used to recommend Azure size.
        :param str prices_timestamp: Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
        :param float scaling_factor: Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        :param str sizing_criterion: Assessment sizing criterion.
        :param str stage: User configurable setting that describes the status of the assessment.
        :param str status: Whether the assessment has been created and is valid.
        :param str time_range: Time range of performance data used to recommend a size.
        :param str updated_timestamp: Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """
        pulumi.set(__self__, "azure_hybrid_use_benefit", azure_hybrid_use_benefit)
        pulumi.set(__self__, "azure_location", azure_location)
        pulumi.set(__self__, "azure_offer_code", azure_offer_code)
        pulumi.set(__self__, "azure_pricing_tier", azure_pricing_tier)
        pulumi.set(__self__, "azure_storage_redundancy", azure_storage_redundancy)
        pulumi.set(__self__, "confidence_rating_in_percentage", confidence_rating_in_percentage)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount_percentage", discount_percentage)
        pulumi.set(__self__, "monthly_bandwidth_cost", monthly_bandwidth_cost)
        pulumi.set(__self__, "monthly_compute_cost", monthly_compute_cost)
        pulumi.set(__self__, "monthly_storage_cost", monthly_storage_cost)
        pulumi.set(__self__, "number_of_machines", number_of_machines)
        pulumi.set(__self__, "percentile", percentile)
        pulumi.set(__self__, "prices_timestamp", prices_timestamp)
        pulumi.set(__self__, "scaling_factor", scaling_factor)
        pulumi.set(__self__, "sizing_criterion", sizing_criterion)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_range", time_range)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)

    @property
    @pulumi.getter(name="azureHybridUseBenefit")
    def azure_hybrid_use_benefit(self) -> str:
        """
        AHUB discount on windows virtual machines.
        """
        return pulumi.get(self, "azure_hybrid_use_benefit")

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> str:
        """
        Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        """
        return pulumi.get(self, "azure_location")

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> str:
        """
        Offer code according to which cost estimation is done.
        """
        return pulumi.get(self, "azure_offer_code")

    @property
    @pulumi.getter(name="azurePricingTier")
    def azure_pricing_tier(self) -> str:
        """
        Pricing tier for Size evaluation.
        """
        return pulumi.get(self, "azure_pricing_tier")

    @property
    @pulumi.getter(name="azureStorageRedundancy")
    def azure_storage_redundancy(self) -> str:
        """
        Storage Redundancy type offered by Azure.
        """
        return pulumi.get(self, "azure_storage_redundancy")

    @property
    @pulumi.getter(name="confidenceRatingInPercentage")
    def confidence_rating_in_percentage(self) -> float:
        """
        Confidence rating percentage for assessment. Can be in the range [0, 100].
        """
        return pulumi.get(self, "confidence_rating_in_percentage")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when this project was created. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Currency to report prices in.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> float:
        """
        Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        """
        return pulumi.get(self, "discount_percentage")

    @property
    @pulumi.getter(name="monthlyBandwidthCost")
    def monthly_bandwidth_cost(self) -> float:
        """
        Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_bandwidth_cost")

    @property
    @pulumi.getter(name="monthlyComputeCost")
    def monthly_compute_cost(self) -> float:
        """
        Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_compute_cost")

    @property
    @pulumi.getter(name="monthlyStorageCost")
    def monthly_storage_cost(self) -> float:
        """
        Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
        """
        return pulumi.get(self, "monthly_storage_cost")

    @property
    @pulumi.getter(name="numberOfMachines")
    def number_of_machines(self) -> int:
        """
        Number of assessed machines part of this assessment.
        """
        return pulumi.get(self, "number_of_machines")

    @property
    @pulumi.getter
    def percentile(self) -> str:
        """
        Percentile of performance data used to recommend Azure size.
        """
        return pulumi.get(self, "percentile")

    @property
    @pulumi.getter(name="pricesTimestamp")
    def prices_timestamp(self) -> str:
        """
        Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "prices_timestamp")

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> float:
        """
        Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        """
        return pulumi.get(self, "scaling_factor")

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> str:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        User configurable setting that describes the status of the assessment.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Whether the assessment has been created and is valid.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        """
        Time range of performance data used to recommend a size.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "updated_timestamp")


@pulumi.output_type
class GroupPropertiesResponse(dict):
    """
    Properties of group resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assessments: Sequence[str],
                 created_timestamp: str,
                 machines: Sequence[str],
                 updated_timestamp: str):
        """
        Properties of group resource.
        :param Sequence[str] assessments: List of References to Assessments created on this group.
        :param str created_timestamp: Time when this project was created. Date-Time represented in ISO-8601 format.
        :param Sequence[str] machines: List of machine names that are part of this group.
        :param str updated_timestamp: Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """
        pulumi.set(__self__, "assessments", assessments)
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        pulumi.set(__self__, "machines", machines)
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)

    @property
    @pulumi.getter
    def assessments(self) -> Sequence[str]:
        """
        List of References to Assessments created on this group.
        """
        return pulumi.get(self, "assessments")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Time when this project was created. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter
    def machines(self) -> Sequence[str]:
        """
        List of machine names that are part of this group.
        """
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Time when this project was last updated. Date-Time represented in ISO-8601 format.
        """
        return pulumi.get(self, "updated_timestamp")


