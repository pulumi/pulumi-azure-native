# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'MigrateProjectPropertiesArgs',
    'PrivateEndpointConnectionPropertiesArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'SolutionDetailsArgs',
    'SolutionPropertiesArgs',
]

@pulumi.input_type
class MigrateProjectPropertiesArgs:
    def __init__(__self__, *,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 service_endpoint: Optional[pulumi.Input[str]] = None,
                 utility_storage_account_id: Optional[pulumi.Input[str]] = None):
        """
        Properties of a migrate project.
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Gets or sets the state of public network access.
        :param pulumi.Input[str] service_endpoint: Service endpoint.
        :param pulumi.Input[str] utility_storage_account_id: Utility storage account id.
        """
        MigrateProjectPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_network_access=public_network_access,
            service_endpoint=service_endpoint,
            utility_storage_account_id=utility_storage_account_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
             service_endpoint: Optional[pulumi.Input[str]] = None,
             utility_storage_account_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if public_network_access is not None:
            _setter("public_network_access", public_network_access)
        if service_endpoint is not None:
            _setter("service_endpoint", service_endpoint)
        if utility_storage_account_id is not None:
            _setter("utility_storage_account_id", utility_storage_account_id)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        Gets or sets the state of public network access.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Service endpoint.
        """
        return pulumi.get(self, "service_endpoint")

    @service_endpoint.setter
    def service_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_endpoint", value)

    @property
    @pulumi.getter(name="utilityStorageAccountId")
    def utility_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Utility storage account id.
        """
        return pulumi.get(self, "utility_storage_account_id")

    @utility_storage_account_id.setter
    def utility_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utility_storage_account_id", value)


@pulumi.input_type
class PrivateEndpointConnectionPropertiesArgs:
    def __init__(__self__, *,
                 private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None):
        """
        Properties of a private endpoint connection.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: Gets the properties of the object.
        """
        PrivateEndpointConnectionPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_link_service_connection_state=private_link_service_connection_state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if private_link_service_connection_state is not None:
            _setter("private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        Gets the properties of the object.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStateStatus']]] = None):
        """
        Private endpoint connection state.
        :param pulumi.Input[str] actions_required: Action required.
        :param pulumi.Input[str] description: Description of the object.
        :param pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStateStatus']] status: Private link connection state.
        """
        PrivateLinkServiceConnectionStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions_required=actions_required,
            description=description,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions_required: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStateStatus']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actions_required is not None:
            _setter("actions_required", actions_required)
        if description is not None:
            _setter("description", description)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        Action required.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStateStatus']]]:
        """
        Private link connection state.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStateStatus']]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SolutionDetailsArgs:
    def __init__(__self__, *,
                 assessment_count: Optional[pulumi.Input[int]] = None,
                 extended_details: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 group_count: Optional[pulumi.Input[int]] = None):
        """
        Class representing the details of the solution.
        :param pulumi.Input[int] assessment_count: Gets or sets the count of assessments reported by the solution.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extended_details: Gets or sets the extended details reported by the solution.
        :param pulumi.Input[int] group_count: Gets or sets the count of groups reported by the solution.
        """
        SolutionDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assessment_count=assessment_count,
            extended_details=extended_details,
            group_count=group_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assessment_count: Optional[pulumi.Input[int]] = None,
             extended_details: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             group_count: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if assessment_count is not None:
            _setter("assessment_count", assessment_count)
        if extended_details is not None:
            _setter("extended_details", extended_details)
        if group_count is not None:
            _setter("group_count", group_count)

    @property
    @pulumi.getter(name="assessmentCount")
    def assessment_count(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the count of assessments reported by the solution.
        """
        return pulumi.get(self, "assessment_count")

    @assessment_count.setter
    def assessment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assessment_count", value)

    @property
    @pulumi.getter(name="extendedDetails")
    def extended_details(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the extended details reported by the solution.
        """
        return pulumi.get(self, "extended_details")

    @extended_details.setter
    def extended_details(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extended_details", value)

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the count of groups reported by the solution.
        """
        return pulumi.get(self, "group_count")

    @group_count.setter
    def group_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_count", value)


@pulumi.input_type
class SolutionPropertiesArgs:
    def __init__(__self__, *,
                 cleanup_state: Optional[pulumi.Input[Union[str, 'CleanupState']]] = None,
                 details: Optional[pulumi.Input['SolutionDetailsArgs']] = None,
                 goal: Optional[pulumi.Input[Union[str, 'Goal']]] = None,
                 purpose: Optional[pulumi.Input[Union[str, 'Purpose']]] = None,
                 status: Optional[pulumi.Input[Union[str, 'Status']]] = None,
                 tool: Optional[pulumi.Input[Union[str, 'Tool']]] = None):
        """
        Class for solution properties.
        :param pulumi.Input[Union[str, 'CleanupState']] cleanup_state: Gets or sets the cleanup state of the solution.
        :param pulumi.Input['SolutionDetailsArgs'] details: Gets or sets the details of the solution.
        :param pulumi.Input[Union[str, 'Goal']] goal: Gets or sets the goal of the solution.
        :param pulumi.Input[Union[str, 'Purpose']] purpose: Gets or sets the purpose of the solution.
        :param pulumi.Input[Union[str, 'Status']] status: Gets or sets the current status of the solution.
        :param pulumi.Input[Union[str, 'Tool']] tool: Gets or sets the tool being used in the solution.
        """
        SolutionPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cleanup_state=cleanup_state,
            details=details,
            goal=goal,
            purpose=purpose,
            status=status,
            tool=tool,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cleanup_state: Optional[pulumi.Input[Union[str, 'CleanupState']]] = None,
             details: Optional[pulumi.Input['SolutionDetailsArgs']] = None,
             goal: Optional[pulumi.Input[Union[str, 'Goal']]] = None,
             purpose: Optional[pulumi.Input[Union[str, 'Purpose']]] = None,
             status: Optional[pulumi.Input[Union[str, 'Status']]] = None,
             tool: Optional[pulumi.Input[Union[str, 'Tool']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cleanup_state is not None:
            _setter("cleanup_state", cleanup_state)
        if details is not None:
            _setter("details", details)
        if goal is not None:
            _setter("goal", goal)
        if purpose is not None:
            _setter("purpose", purpose)
        if status is not None:
            _setter("status", status)
        if tool is not None:
            _setter("tool", tool)

    @property
    @pulumi.getter(name="cleanupState")
    def cleanup_state(self) -> Optional[pulumi.Input[Union[str, 'CleanupState']]]:
        """
        Gets or sets the cleanup state of the solution.
        """
        return pulumi.get(self, "cleanup_state")

    @cleanup_state.setter
    def cleanup_state(self, value: Optional[pulumi.Input[Union[str, 'CleanupState']]]):
        pulumi.set(self, "cleanup_state", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input['SolutionDetailsArgs']]:
        """
        Gets or sets the details of the solution.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input['SolutionDetailsArgs']]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def goal(self) -> Optional[pulumi.Input[Union[str, 'Goal']]]:
        """
        Gets or sets the goal of the solution.
        """
        return pulumi.get(self, "goal")

    @goal.setter
    def goal(self, value: Optional[pulumi.Input[Union[str, 'Goal']]]):
        pulumi.set(self, "goal", value)

    @property
    @pulumi.getter
    def purpose(self) -> Optional[pulumi.Input[Union[str, 'Purpose']]]:
        """
        Gets or sets the purpose of the solution.
        """
        return pulumi.get(self, "purpose")

    @purpose.setter
    def purpose(self, value: Optional[pulumi.Input[Union[str, 'Purpose']]]):
        pulumi.set(self, "purpose", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'Status']]]:
        """
        Gets or sets the current status of the solution.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'Status']]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tool(self) -> Optional[pulumi.Input[Union[str, 'Tool']]]:
        """
        Gets or sets the tool being used in the solution.
        """
        return pulumi.get(self, "tool")

    @tool.setter
    def tool(self, value: Optional[pulumi.Input[Union[str, 'Tool']]]):
        pulumi.set(self, "tool", value)


