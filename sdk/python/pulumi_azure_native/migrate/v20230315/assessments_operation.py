# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AssessmentsOperationArgs', 'AssessmentsOperation']

@pulumi.input_type
class AssessmentsOperationArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 azure_disk_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]]] = None,
                 azure_hybrid_use_benefit: Optional[pulumi.Input[Union[str, 'AzureHybridUseBenefit']]] = None,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 azure_offer_code: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_pricing_tier: Optional[pulumi.Input[Union[str, 'AzurePricingTier']]] = None,
                 azure_storage_redundancy: Optional[pulumi.Input[Union[str, 'AzureStorageRedundancy']]] = None,
                 azure_vm_families: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]] = None,
                 currency: Optional[pulumi.Input[Union[str, 'AzureCurrency']]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 ea_subscription_id: Optional[pulumi.Input[str]] = None,
                 percentile: Optional[pulumi.Input[Union[str, 'Percentile']]] = None,
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 reserved_instance: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None,
                 sizing_criterion: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]] = None,
                 time_range: Optional[pulumi.Input[Union[str, 'TimeRange']]] = None,
                 vm_uptime: Optional[pulumi.Input['VmUptimeArgs']] = None):
        """
        The set of arguments for constructing a AssessmentsOperation resource.
        :param pulumi.Input[str] group_name: Group ARM name
        :param pulumi.Input[str] project_name: Assessment Project Name
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] assessment_name: Machine Assessment ARM name
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]] azure_disk_types: Gets or sets the azure storage type. Premium, Standard etc.
        :param pulumi.Input[Union[str, 'AzureHybridUseBenefit']] azure_hybrid_use_benefit: Gets or sets the user configurable setting to display the azure hybrid use
               benefit.
        :param pulumi.Input[str] azure_location: Azure Location or Azure region where to which the machines will be migrated.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code: Azure Offer Code.
        :param pulumi.Input[Union[str, 'AzurePricingTier']] azure_pricing_tier: Gets or sets Azure Pricing Tier - Free, Basic, etc.
        :param pulumi.Input[Union[str, 'AzureStorageRedundancy']] azure_storage_redundancy: Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]] azure_vm_families: Gets or sets the Azure VM families.
        :param pulumi.Input[Union[str, 'AzureCurrency']] currency: Currency in which prices should be reported.
        :param pulumi.Input[float] discount_percentage: Custom discount percentage.
        :param pulumi.Input[str] ea_subscription_id: Gets or sets enterprise agreement subscription id.
        :param pulumi.Input[Union[str, 'Percentile']] percentile: Percentile of the utilization data values to be considered while assessing
               machines.
        :param pulumi.Input[str] perf_data_end_time: Gets or sets the end time to consider performance data for assessment.
        :param pulumi.Input[str] perf_data_start_time: Gets or sets the start time to consider performance data for assessment.
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: The status of the last operation.
        :param pulumi.Input[Union[str, 'AzureReservedInstance']] reserved_instance: Gets or sets the Azure Reserved Instance - 1-Year, 3-Year.
        :param pulumi.Input[float] scaling_factor: Percentage of buffer that user wants on performance metrics when recommending
               Azure sizes.
        :param pulumi.Input[Union[str, 'AssessmentSizingCriterion']] sizing_criterion: Assessment sizing criterion.
        :param pulumi.Input[Union[str, 'TimeRange']] time_range: Time Range for which the historic utilization data should be considered for
               assessment.
        :param pulumi.Input['VmUptimeArgs'] vm_uptime: Gets or sets the duration for which the VMs are up in the on-premises
               environment.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if assessment_name is not None:
            pulumi.set(__self__, "assessment_name", assessment_name)
        if azure_disk_types is not None:
            pulumi.set(__self__, "azure_disk_types", azure_disk_types)
        if azure_hybrid_use_benefit is not None:
            pulumi.set(__self__, "azure_hybrid_use_benefit", azure_hybrid_use_benefit)
        if azure_location is not None:
            pulumi.set(__self__, "azure_location", azure_location)
        if azure_offer_code is not None:
            pulumi.set(__self__, "azure_offer_code", azure_offer_code)
        if azure_pricing_tier is not None:
            pulumi.set(__self__, "azure_pricing_tier", azure_pricing_tier)
        if azure_storage_redundancy is not None:
            pulumi.set(__self__, "azure_storage_redundancy", azure_storage_redundancy)
        if azure_vm_families is not None:
            pulumi.set(__self__, "azure_vm_families", azure_vm_families)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if discount_percentage is not None:
            pulumi.set(__self__, "discount_percentage", discount_percentage)
        if ea_subscription_id is not None:
            pulumi.set(__self__, "ea_subscription_id", ea_subscription_id)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if perf_data_end_time is not None:
            pulumi.set(__self__, "perf_data_end_time", perf_data_end_time)
        if perf_data_start_time is not None:
            pulumi.set(__self__, "perf_data_start_time", perf_data_start_time)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if reserved_instance is not None:
            pulumi.set(__self__, "reserved_instance", reserved_instance)
        if scaling_factor is not None:
            pulumi.set(__self__, "scaling_factor", scaling_factor)
        if sizing_criterion is not None:
            pulumi.set(__self__, "sizing_criterion", sizing_criterion)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if vm_uptime is not None:
            pulumi.set(__self__, "vm_uptime", vm_uptime)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Group ARM name
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        """
        Assessment Project Name
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="assessmentName")
    def assessment_name(self) -> Optional[pulumi.Input[str]]:
        """
        Machine Assessment ARM name
        """
        return pulumi.get(self, "assessment_name")

    @assessment_name.setter
    def assessment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assessment_name", value)

    @property
    @pulumi.getter(name="azureDiskTypes")
    def azure_disk_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]]]:
        """
        Gets or sets the azure storage type. Premium, Standard etc.
        """
        return pulumi.get(self, "azure_disk_types")

    @azure_disk_types.setter
    def azure_disk_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]]]):
        pulumi.set(self, "azure_disk_types", value)

    @property
    @pulumi.getter(name="azureHybridUseBenefit")
    def azure_hybrid_use_benefit(self) -> Optional[pulumi.Input[Union[str, 'AzureHybridUseBenefit']]]:
        """
        Gets or sets the user configurable setting to display the azure hybrid use
        benefit.
        """
        return pulumi.get(self, "azure_hybrid_use_benefit")

    @azure_hybrid_use_benefit.setter
    def azure_hybrid_use_benefit(self, value: Optional[pulumi.Input[Union[str, 'AzureHybridUseBenefit']]]):
        pulumi.set(self, "azure_hybrid_use_benefit", value)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Location or Azure region where to which the machines will be migrated.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_location", value)

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> Optional[pulumi.Input[Union[str, 'AzureOfferCode']]]:
        """
        Azure Offer Code.
        """
        return pulumi.get(self, "azure_offer_code")

    @azure_offer_code.setter
    def azure_offer_code(self, value: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]]):
        pulumi.set(self, "azure_offer_code", value)

    @property
    @pulumi.getter(name="azurePricingTier")
    def azure_pricing_tier(self) -> Optional[pulumi.Input[Union[str, 'AzurePricingTier']]]:
        """
        Gets or sets Azure Pricing Tier - Free, Basic, etc.
        """
        return pulumi.get(self, "azure_pricing_tier")

    @azure_pricing_tier.setter
    def azure_pricing_tier(self, value: Optional[pulumi.Input[Union[str, 'AzurePricingTier']]]):
        pulumi.set(self, "azure_pricing_tier", value)

    @property
    @pulumi.getter(name="azureStorageRedundancy")
    def azure_storage_redundancy(self) -> Optional[pulumi.Input[Union[str, 'AzureStorageRedundancy']]]:
        """
        Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage.
        """
        return pulumi.get(self, "azure_storage_redundancy")

    @azure_storage_redundancy.setter
    def azure_storage_redundancy(self, value: Optional[pulumi.Input[Union[str, 'AzureStorageRedundancy']]]):
        pulumi.set(self, "azure_storage_redundancy", value)

    @property
    @pulumi.getter(name="azureVmFamilies")
    def azure_vm_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]]:
        """
        Gets or sets the Azure VM families.
        """
        return pulumi.get(self, "azure_vm_families")

    @azure_vm_families.setter
    def azure_vm_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]]):
        pulumi.set(self, "azure_vm_families", value)

    @property
    @pulumi.getter
    def currency(self) -> Optional[pulumi.Input[Union[str, 'AzureCurrency']]]:
        """
        Currency in which prices should be reported.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: Optional[pulumi.Input[Union[str, 'AzureCurrency']]]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Custom discount percentage.
        """
        return pulumi.get(self, "discount_percentage")

    @discount_percentage.setter
    def discount_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "discount_percentage", value)

    @property
    @pulumi.getter(name="eaSubscriptionId")
    def ea_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets enterprise agreement subscription id.
        """
        return pulumi.get(self, "ea_subscription_id")

    @ea_subscription_id.setter
    def ea_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ea_subscription_id", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[Union[str, 'Percentile']]]:
        """
        Percentile of the utilization data values to be considered while assessing
        machines.
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[Union[str, 'Percentile']]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="perfDataEndTime")
    def perf_data_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the end time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_end_time")

    @perf_data_end_time.setter
    def perf_data_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_data_end_time", value)

    @property
    @pulumi.getter(name="perfDataStartTime")
    def perf_data_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the start time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_start_time")

    @perf_data_start_time.setter
    def perf_data_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_data_start_time", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningState']]]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)

    @property
    @pulumi.getter(name="reservedInstance")
    def reserved_instance(self) -> Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]]:
        """
        Gets or sets the Azure Reserved Instance - 1-Year, 3-Year.
        """
        return pulumi.get(self, "reserved_instance")

    @reserved_instance.setter
    def reserved_instance(self, value: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]]):
        pulumi.set(self, "reserved_instance", value)

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of buffer that user wants on performance metrics when recommending
        Azure sizes.
        """
        return pulumi.get(self, "scaling_factor")

    @scaling_factor.setter
    def scaling_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scaling_factor", value)

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]]:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @sizing_criterion.setter
    def sizing_criterion(self, value: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]]):
        pulumi.set(self, "sizing_criterion", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input[Union[str, 'TimeRange']]]:
        """
        Time Range for which the historic utilization data should be considered for
        assessment.
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input[Union[str, 'TimeRange']]]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter(name="vmUptime")
    def vm_uptime(self) -> Optional[pulumi.Input['VmUptimeArgs']]:
        """
        Gets or sets the duration for which the VMs are up in the on-premises
        environment.
        """
        return pulumi.get(self, "vm_uptime")

    @vm_uptime.setter
    def vm_uptime(self, value: Optional[pulumi.Input['VmUptimeArgs']]):
        pulumi.set(self, "vm_uptime", value)


class AssessmentsOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 azure_disk_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]]] = None,
                 azure_hybrid_use_benefit: Optional[pulumi.Input[Union[str, 'AzureHybridUseBenefit']]] = None,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 azure_offer_code: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_pricing_tier: Optional[pulumi.Input[Union[str, 'AzurePricingTier']]] = None,
                 azure_storage_redundancy: Optional[pulumi.Input[Union[str, 'AzureStorageRedundancy']]] = None,
                 azure_vm_families: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]] = None,
                 currency: Optional[pulumi.Input[Union[str, 'AzureCurrency']]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 ea_subscription_id: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 percentile: Optional[pulumi.Input[Union[str, 'Percentile']]] = None,
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 reserved_instance: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None,
                 sizing_criterion: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]] = None,
                 time_range: Optional[pulumi.Input[Union[str, 'TimeRange']]] = None,
                 vm_uptime: Optional[pulumi.Input[pulumi.InputType['VmUptimeArgs']]] = None,
                 __props__=None):
        """
        Machine assessment resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assessment_name: Machine Assessment ARM name
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]] azure_disk_types: Gets or sets the azure storage type. Premium, Standard etc.
        :param pulumi.Input[Union[str, 'AzureHybridUseBenefit']] azure_hybrid_use_benefit: Gets or sets the user configurable setting to display the azure hybrid use
               benefit.
        :param pulumi.Input[str] azure_location: Azure Location or Azure region where to which the machines will be migrated.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code: Azure Offer Code.
        :param pulumi.Input[Union[str, 'AzurePricingTier']] azure_pricing_tier: Gets or sets Azure Pricing Tier - Free, Basic, etc.
        :param pulumi.Input[Union[str, 'AzureStorageRedundancy']] azure_storage_redundancy: Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]] azure_vm_families: Gets or sets the Azure VM families.
        :param pulumi.Input[Union[str, 'AzureCurrency']] currency: Currency in which prices should be reported.
        :param pulumi.Input[float] discount_percentage: Custom discount percentage.
        :param pulumi.Input[str] ea_subscription_id: Gets or sets enterprise agreement subscription id.
        :param pulumi.Input[str] group_name: Group ARM name
        :param pulumi.Input[Union[str, 'Percentile']] percentile: Percentile of the utilization data values to be considered while assessing
               machines.
        :param pulumi.Input[str] perf_data_end_time: Gets or sets the end time to consider performance data for assessment.
        :param pulumi.Input[str] perf_data_start_time: Gets or sets the start time to consider performance data for assessment.
        :param pulumi.Input[str] project_name: Assessment Project Name
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: The status of the last operation.
        :param pulumi.Input[Union[str, 'AzureReservedInstance']] reserved_instance: Gets or sets the Azure Reserved Instance - 1-Year, 3-Year.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[float] scaling_factor: Percentage of buffer that user wants on performance metrics when recommending
               Azure sizes.
        :param pulumi.Input[Union[str, 'AssessmentSizingCriterion']] sizing_criterion: Assessment sizing criterion.
        :param pulumi.Input[Union[str, 'TimeRange']] time_range: Time Range for which the historic utilization data should be considered for
               assessment.
        :param pulumi.Input[pulumi.InputType['VmUptimeArgs']] vm_uptime: Gets or sets the duration for which the VMs are up in the on-premises
               environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AssessmentsOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Machine assessment resource.

        :param str resource_name: The name of the resource.
        :param AssessmentsOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssessmentsOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 azure_disk_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureDiskType']]]]] = None,
                 azure_hybrid_use_benefit: Optional[pulumi.Input[Union[str, 'AzureHybridUseBenefit']]] = None,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 azure_offer_code: Optional[pulumi.Input[Union[str, 'AzureOfferCode']]] = None,
                 azure_pricing_tier: Optional[pulumi.Input[Union[str, 'AzurePricingTier']]] = None,
                 azure_storage_redundancy: Optional[pulumi.Input[Union[str, 'AzureStorageRedundancy']]] = None,
                 azure_vm_families: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]] = None,
                 currency: Optional[pulumi.Input[Union[str, 'AzureCurrency']]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 ea_subscription_id: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 percentile: Optional[pulumi.Input[Union[str, 'Percentile']]] = None,
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 reserved_instance: Optional[pulumi.Input[Union[str, 'AzureReservedInstance']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None,
                 sizing_criterion: Optional[pulumi.Input[Union[str, 'AssessmentSizingCriterion']]] = None,
                 time_range: Optional[pulumi.Input[Union[str, 'TimeRange']]] = None,
                 vm_uptime: Optional[pulumi.Input[pulumi.InputType['VmUptimeArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssessmentsOperationArgs.__new__(AssessmentsOperationArgs)

            __props__.__dict__["assessment_name"] = assessment_name
            __props__.__dict__["azure_disk_types"] = azure_disk_types
            __props__.__dict__["azure_hybrid_use_benefit"] = azure_hybrid_use_benefit
            __props__.__dict__["azure_location"] = azure_location
            __props__.__dict__["azure_offer_code"] = azure_offer_code
            __props__.__dict__["azure_pricing_tier"] = azure_pricing_tier
            __props__.__dict__["azure_storage_redundancy"] = azure_storage_redundancy
            __props__.__dict__["azure_vm_families"] = azure_vm_families
            __props__.__dict__["currency"] = currency
            __props__.__dict__["discount_percentage"] = discount_percentage
            __props__.__dict__["ea_subscription_id"] = ea_subscription_id
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["percentile"] = percentile
            __props__.__dict__["perf_data_end_time"] = perf_data_end_time
            __props__.__dict__["perf_data_start_time"] = perf_data_start_time
            if project_name is None and not opts.urn:
                raise TypeError("Missing required property 'project_name'")
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["provisioning_state"] = provisioning_state
            __props__.__dict__["reserved_instance"] = reserved_instance
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["scaling_factor"] = scaling_factor
            __props__.__dict__["sizing_criterion"] = sizing_criterion
            __props__.__dict__["time_range"] = time_range
            __props__.__dict__["vm_uptime"] = vm_uptime
            __props__.__dict__["assessment_error_summary"] = None
            __props__.__dict__["assessment_type"] = None
            __props__.__dict__["confidence_rating_in_percentage"] = None
            __props__.__dict__["cost_components"] = None
            __props__.__dict__["created_timestamp"] = None
            __props__.__dict__["distribution_by_os_name"] = None
            __props__.__dict__["distribution_by_service_pack_insight"] = None
            __props__.__dict__["distribution_by_support_status"] = None
            __props__.__dict__["group_type"] = None
            __props__.__dict__["monthly_bandwidth_cost"] = None
            __props__.__dict__["monthly_compute_cost"] = None
            __props__.__dict__["monthly_premium_storage_cost"] = None
            __props__.__dict__["monthly_standard_ssd_storage_cost"] = None
            __props__.__dict__["monthly_storage_cost"] = None
            __props__.__dict__["monthly_ultra_storage_cost"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["number_of_machines"] = None
            __props__.__dict__["prices_timestamp"] = None
            __props__.__dict__["schema_version"] = None
            __props__.__dict__["stage"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["suitability_summary"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_timestamp"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:migrate:AssessmentsOperation"), pulumi.Alias(type_="azure-native:migrate/v20191001:AssessmentsOperation")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(AssessmentsOperation, __self__).__init__(
            'azure-native:migrate/v20230315:AssessmentsOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AssessmentsOperation':
        """
        Get an existing AssessmentsOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AssessmentsOperationArgs.__new__(AssessmentsOperationArgs)

        __props__.__dict__["assessment_error_summary"] = None
        __props__.__dict__["assessment_type"] = None
        __props__.__dict__["azure_disk_types"] = None
        __props__.__dict__["azure_hybrid_use_benefit"] = None
        __props__.__dict__["azure_location"] = None
        __props__.__dict__["azure_offer_code"] = None
        __props__.__dict__["azure_pricing_tier"] = None
        __props__.__dict__["azure_storage_redundancy"] = None
        __props__.__dict__["azure_vm_families"] = None
        __props__.__dict__["confidence_rating_in_percentage"] = None
        __props__.__dict__["cost_components"] = None
        __props__.__dict__["created_timestamp"] = None
        __props__.__dict__["currency"] = None
        __props__.__dict__["discount_percentage"] = None
        __props__.__dict__["distribution_by_os_name"] = None
        __props__.__dict__["distribution_by_service_pack_insight"] = None
        __props__.__dict__["distribution_by_support_status"] = None
        __props__.__dict__["ea_subscription_id"] = None
        __props__.__dict__["group_type"] = None
        __props__.__dict__["monthly_bandwidth_cost"] = None
        __props__.__dict__["monthly_compute_cost"] = None
        __props__.__dict__["monthly_premium_storage_cost"] = None
        __props__.__dict__["monthly_standard_ssd_storage_cost"] = None
        __props__.__dict__["monthly_storage_cost"] = None
        __props__.__dict__["monthly_ultra_storage_cost"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["number_of_machines"] = None
        __props__.__dict__["percentile"] = None
        __props__.__dict__["perf_data_end_time"] = None
        __props__.__dict__["perf_data_start_time"] = None
        __props__.__dict__["prices_timestamp"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["reserved_instance"] = None
        __props__.__dict__["scaling_factor"] = None
        __props__.__dict__["schema_version"] = None
        __props__.__dict__["sizing_criterion"] = None
        __props__.__dict__["stage"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["suitability_summary"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["time_range"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["updated_timestamp"] = None
        __props__.__dict__["vm_uptime"] = None
        return AssessmentsOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assessmentErrorSummary")
    def assessment_error_summary(self) -> pulumi.Output[Mapping[str, int]]:
        """
        Gets or sets the assessment error summary.
                    This is the number of
        machines affected by each type of error in this assessment.
        """
        return pulumi.get(self, "assessment_error_summary")

    @property
    @pulumi.getter(name="assessmentType")
    def assessment_type(self) -> pulumi.Output[str]:
        """
        Assessment type of the assessment.
        """
        return pulumi.get(self, "assessment_type")

    @property
    @pulumi.getter(name="azureDiskTypes")
    def azure_disk_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Gets or sets the azure storage type. Premium, Standard etc.
        """
        return pulumi.get(self, "azure_disk_types")

    @property
    @pulumi.getter(name="azureHybridUseBenefit")
    def azure_hybrid_use_benefit(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the user configurable setting to display the azure hybrid use
        benefit.
        """
        return pulumi.get(self, "azure_hybrid_use_benefit")

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> pulumi.Output[Optional[str]]:
        """
        Azure Location or Azure region where to which the machines will be migrated.
        """
        return pulumi.get(self, "azure_location")

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> pulumi.Output[Optional[str]]:
        """
        Azure Offer Code.
        """
        return pulumi.get(self, "azure_offer_code")

    @property
    @pulumi.getter(name="azurePricingTier")
    def azure_pricing_tier(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets Azure Pricing Tier - Free, Basic, etc.
        """
        return pulumi.get(self, "azure_pricing_tier")

    @property
    @pulumi.getter(name="azureStorageRedundancy")
    def azure_storage_redundancy(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage.
        """
        return pulumi.get(self, "azure_storage_redundancy")

    @property
    @pulumi.getter(name="azureVmFamilies")
    def azure_vm_families(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Gets or sets the Azure VM families.
        """
        return pulumi.get(self, "azure_vm_families")

    @property
    @pulumi.getter(name="confidenceRatingInPercentage")
    def confidence_rating_in_percentage(self) -> pulumi.Output[float]:
        """
        Confidence Rating in Percentage.
        """
        return pulumi.get(self, "confidence_rating_in_percentage")

    @property
    @pulumi.getter(name="costComponents")
    def cost_components(self) -> pulumi.Output[Sequence['outputs.CostComponentResponse']]:
        """
        Gets the collection of cost components.
        """
        return pulumi.get(self, "cost_components")

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> pulumi.Output[str]:
        """
        Date and Time when assessment was created.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter
    def currency(self) -> pulumi.Output[Optional[str]]:
        """
        Currency in which prices should be reported.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> pulumi.Output[Optional[float]]:
        """
        Custom discount percentage.
        """
        return pulumi.get(self, "discount_percentage")

    @property
    @pulumi.getter(name="distributionByOsName")
    def distribution_by_os_name(self) -> pulumi.Output[Mapping[str, int]]:
        """
        Gets the distribution by os name.
        """
        return pulumi.get(self, "distribution_by_os_name")

    @property
    @pulumi.getter(name="distributionByServicePackInsight")
    def distribution_by_service_pack_insight(self) -> pulumi.Output[Mapping[str, int]]:
        """
        Gets the distribution distribution of sqlInstances by service pack insight.
        """
        return pulumi.get(self, "distribution_by_service_pack_insight")

    @property
    @pulumi.getter(name="distributionBySupportStatus")
    def distribution_by_support_status(self) -> pulumi.Output[Mapping[str, int]]:
        """
        Gets the distribution of sqlInstances by support status.
        """
        return pulumi.get(self, "distribution_by_support_status")

    @property
    @pulumi.getter(name="eaSubscriptionId")
    def ea_subscription_id(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets enterprise agreement subscription id.
        """
        return pulumi.get(self, "ea_subscription_id")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        """
        Gets the group type for the assessment.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="monthlyBandwidthCost")
    def monthly_bandwidth_cost(self) -> pulumi.Output[float]:
        """
        Gets or sets the aggregate Bandwidth Cost for all machines in the assessment.
        """
        return pulumi.get(self, "monthly_bandwidth_cost")

    @property
    @pulumi.getter(name="monthlyComputeCost")
    def monthly_compute_cost(self) -> pulumi.Output[float]:
        """
        Gets or sets the aggregate Compute Cost for all machines in the assessment.
        """
        return pulumi.get(self, "monthly_compute_cost")

    @property
    @pulumi.getter(name="monthlyPremiumStorageCost")
    def monthly_premium_storage_cost(self) -> pulumi.Output[float]:
        """
        Gets or sets the aggregate premium storage cost for all machines in the
        assessment.
        """
        return pulumi.get(self, "monthly_premium_storage_cost")

    @property
    @pulumi.getter(name="monthlyStandardSsdStorageCost")
    def monthly_standard_ssd_storage_cost(self) -> pulumi.Output[float]:
        """
        Gets or sets the aggregate standard SSD storage cost for all the machines in
        the assessment.
        """
        return pulumi.get(self, "monthly_standard_ssd_storage_cost")

    @property
    @pulumi.getter(name="monthlyStorageCost")
    def monthly_storage_cost(self) -> pulumi.Output[float]:
        """
        Gets or sets the aggregate Storage Cost for all machines in the assessment.
        """
        return pulumi.get(self, "monthly_storage_cost")

    @property
    @pulumi.getter(name="monthlyUltraStorageCost")
    def monthly_ultra_storage_cost(self) -> pulumi.Output[float]:
        """
        Gets or sets the aggregate ultra storage cost for all machines in the
        assessment.
        """
        return pulumi.get(self, "monthly_ultra_storage_cost")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfMachines")
    def number_of_machines(self) -> pulumi.Output[int]:
        """
        Gets or sets the Number of machines part of the assessment.
        """
        return pulumi.get(self, "number_of_machines")

    @property
    @pulumi.getter
    def percentile(self) -> pulumi.Output[Optional[str]]:
        """
        Percentile of the utilization data values to be considered while assessing
        machines.
        """
        return pulumi.get(self, "percentile")

    @property
    @pulumi.getter(name="perfDataEndTime")
    def perf_data_end_time(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the end time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_end_time")

    @property
    @pulumi.getter(name="perfDataStartTime")
    def perf_data_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the start time to consider performance data for assessment.
        """
        return pulumi.get(self, "perf_data_start_time")

    @property
    @pulumi.getter(name="pricesTimestamp")
    def prices_timestamp(self) -> pulumi.Output[str]:
        """
        Last time when rates were queried.
        """
        return pulumi.get(self, "prices_timestamp")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[Optional[str]]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="reservedInstance")
    def reserved_instance(self) -> pulumi.Output[Optional[str]]:
        """
        Gets or sets the Azure Reserved Instance - 1-Year, 3-Year.
        """
        return pulumi.get(self, "reserved_instance")

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> pulumi.Output[Optional[float]]:
        """
        Percentage of buffer that user wants on performance metrics when recommending
        Azure sizes.
        """
        return pulumi.get(self, "scaling_factor")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> pulumi.Output[str]:
        """
        Schema version.
        """
        return pulumi.get(self, "schema_version")

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> pulumi.Output[Optional[str]]:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Output[str]:
        """
        User configurable setting to display the Stage of Assessment.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Whether assessment is in valid state and all machines have been assessed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="suitabilitySummary")
    def suitability_summary(self) -> pulumi.Output[Mapping[str, int]]:
        """
        Gets or sets the Cloud suitability summary for all the machines in the
        assessment.
        """
        return pulumi.get(self, "suitability_summary")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Output[Optional[str]]:
        """
        Time Range for which the historic utilization data should be considered for
        assessment.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> pulumi.Output[str]:
        """
        Date and Time when assessment was last updated.
        """
        return pulumi.get(self, "updated_timestamp")

    @property
    @pulumi.getter(name="vmUptime")
    def vm_uptime(self) -> pulumi.Output[Optional['outputs.VmUptimeResponse']]:
        """
        Gets or sets the duration for which the VMs are up in the on-premises
        environment.
        """
        return pulumi.get(self, "vm_uptime")

