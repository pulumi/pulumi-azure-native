# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ACRPropertiesArgs',
    'AKSDeploymentPropertiesArgs',
    'AKSDeploymentSpecificationArgs',
    'ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesArgs',
    'ApacheTomcatAKSWorkloadDeploymentArgs',
    'ApacheTomcatWebApplicationArgs',
    'ApacheTomcatWorkloadInstanceModelCustomPropertiesArgs',
    'AppInsightMonitoringPropertiesArgs',
    'AssessmentPropertiesArgs',
    'AutomationArtifactArgs',
    'AvailabilitySetResourceSettingsArgs',
    'AzureFileShareHydrationProfileArgs',
    'BindingArgs',
    'CertArgs',
    'CollectorAgentPropertiesArgs',
    'CollectorBodyAgentSpnPropertiesArgs',
    'CollectorPropertiesArgs',
    'ConnectionStateRequestBodyPropertiesArgs',
    'ContainerImagePropertiesArgs',
    'DirectoryPathArgs',
    'DiskEncryptionSetResourceSettingsArgs',
    'GmsaAuthenticationPropertiesArgs',
    'GroupPropertiesArgs',
    'IISAKSWorkloadDeploymentModelCustomPropertiesArgs',
    'IISAKSWorkloadDeploymentArgs',
    'IISApplicationDetailsArgs',
    'IISVirtualApplicationDetailsArgs',
    'IISWebApplicationArgs',
    'IISWebServerArgs',
    'IISWorkloadInstanceModelCustomPropertiesArgs',
    'IdentityModelArgs',
    'IdentityArgs',
    'ImportCollectorPropertiesArgs',
    'KeyVaultResourceSettingsArgs',
    'KeyVaultSecretStorePropertiesArgs',
    'LBBackendAddressPoolResourceSettingsArgs',
    'LBFrontendIPConfigurationResourceSettingsArgs',
    'LoadBalancerBackendAddressPoolReferenceArgs',
    'LoadBalancerNatRuleReferenceArgs',
    'LoadBalancerResourceSettingsArgs',
    'ManagedIdentityPropertiesArgs',
    'MigrateAgentModelPropertiesArgs',
    'MigrateProjectPropertiesArgs',
    'MigrateProjectTagsArgs',
    'MigrationConfigurationArgs',
    'ModernizeProjectModelPropertiesArgs',
    'MoveCollectionPropertiesArgs',
    'MoveResourceDependencyOverrideArgs',
    'MoveResourcePropertiesArgs',
    'NetworkInterfaceResourceSettingsArgs',
    'NetworkSecurityGroupResourceSettingsArgs',
    'NicIpConfigurationResourceSettingsArgs',
    'NsgReferenceArgs',
    'NsgSecurityRuleArgs',
    'OperatingSystemDetailsArgs',
    'PortMappingArgs',
    'PrivateEndpointConnectionPropertiesArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'ProjectPropertiesArgs',
    'PublicIPAddressResourceSettingsArgs',
    'PublicIpReferenceArgs',
    'ResourceGroupResourceSettingsArgs',
    'ResourceIdentityArgs',
    'ResourceRequirementsArgs',
    'SecretStoreDetailsArgs',
    'SecretStorePropertiesArgs',
    'SolutionDetailsArgs',
    'SolutionPropertiesArgs',
    'SqlDatabaseResourceSettingsArgs',
    'SqlElasticPoolResourceSettingsArgs',
    'SqlServerResourceSettingsArgs',
    'SubnetReferenceArgs',
    'SubnetResourceSettingsArgs',
    'TargetStorageProfileArgs',
    'UserAssignedIdentityArgs',
    'VMwareMigrateAgentModelCustomPropertiesArgs',
    'VirtualMachineResourceSettingsArgs',
    'VirtualNetworkResourceSettingsArgs',
    'VmUptimeArgs',
    'WebApplicationConfigurationArgs',
    'WebApplicationDirectoryArgs',
    'WebApplicationFrameworkArgs',
    'WorkloadDeploymentModelPropertiesArgs',
    'WorkloadInstanceModelPropertiesArgs',
]

@pulumi.input_type
class ACRPropertiesArgs:
    def __init__(__self__, *,
                 registry_name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Class for ACR Properties.
        :param pulumi.Input[str] registry_name: Gets or sets the azure container registry name.
        :param pulumi.Input[str] resource_group: Gets or sets the resource group of the resource.
        :param pulumi.Input[str] subscription_id: Gets or sets the subscription id of the resource.
        :param pulumi.Input[str] tenant_id: Gets or sets the tenant id.
        """
        if registry_name is not None:
            pulumi.set(__self__, "registry_name", registry_name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the azure container registry name.
        """
        return pulumi.get(self, "registry_name")

    @registry_name.setter
    def registry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the resource group of the resource.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the subscription id of the resource.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class AKSDeploymentPropertiesArgs:
    def __init__(__self__, *,
                 aks_cluster_name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Class for AKSDeployment Properties.
        :param pulumi.Input[str] aks_cluster_name: Gets or sets the AKS cluster name.
        :param pulumi.Input[str] resource_group: Gets or sets the resource group of the resource.
        :param pulumi.Input[str] subscription_id: Gets or sets the subscription id of the resource.
        :param pulumi.Input[str] tenant_id: Gets or sets the tenant id.
        """
        if aks_cluster_name is not None:
            pulumi.set(__self__, "aks_cluster_name", aks_cluster_name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aksClusterName")
    def aks_cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the AKS cluster name.
        """
        return pulumi.get(self, "aks_cluster_name")

    @aks_cluster_name.setter
    def aks_cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aks_cluster_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the resource group of the resource.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the subscription id of the resource.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class AKSDeploymentSpecificationArgs:
    def __init__(__self__, *,
                 kubernetes_objects_yaml: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[Union[str, 'LoadBalancerType']]] = None,
                 replica_count: Optional[pulumi.Input[str]] = None):
        """
        AKS Deployment Specification.
        :param pulumi.Input[str] kubernetes_objects_yaml: Gets or sets the Merged Deployment and service Yaml.
        :param pulumi.Input[Union[str, 'LoadBalancerType']] load_balancer_type: Gets or sets the load balancer type.
        :param pulumi.Input[str] replica_count: Gets or sets the replica count to be created in AKS.
        """
        if kubernetes_objects_yaml is not None:
            pulumi.set(__self__, "kubernetes_objects_yaml", kubernetes_objects_yaml)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)

    @property
    @pulumi.getter(name="kubernetesObjectsYaml")
    def kubernetes_objects_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Merged Deployment and service Yaml.
        """
        return pulumi.get(self, "kubernetes_objects_yaml")

    @kubernetes_objects_yaml.setter
    def kubernetes_objects_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_objects_yaml", value)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[pulumi.Input[Union[str, 'LoadBalancerType']]]:
        """
        Gets or sets the load balancer type.
        """
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: Optional[pulumi.Input[Union[str, 'LoadBalancerType']]]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the replica count to be created in AKS.
        """
        return pulumi.get(self, "replica_count")

    @replica_count.setter
    def replica_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_count", value)


@pulumi.input_type
class ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 apache_tomcat_aks_workload_deployment_properties: Optional[pulumi.Input['ApacheTomcatAKSWorkloadDeploymentArgs']] = None):
        """
        ApacheTomcat workload instance model custom properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'ApacheTomcatAKSWorkloadDeploymentModelCustomProperties'.
        :param pulumi.Input['ApacheTomcatAKSWorkloadDeploymentArgs'] apache_tomcat_aks_workload_deployment_properties: ApacheTomcat web application.
        """
        pulumi.set(__self__, "instance_type", 'ApacheTomcatAKSWorkloadDeploymentModelCustomProperties')
        if apache_tomcat_aks_workload_deployment_properties is not None:
            pulumi.set(__self__, "apache_tomcat_aks_workload_deployment_properties", apache_tomcat_aks_workload_deployment_properties)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'ApacheTomcatAKSWorkloadDeploymentModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="apacheTomcatAksWorkloadDeploymentProperties")
    def apache_tomcat_aks_workload_deployment_properties(self) -> Optional[pulumi.Input['ApacheTomcatAKSWorkloadDeploymentArgs']]:
        """
        ApacheTomcat web application.
        """
        return pulumi.get(self, "apache_tomcat_aks_workload_deployment_properties")

    @apache_tomcat_aks_workload_deployment_properties.setter
    def apache_tomcat_aks_workload_deployment_properties(self, value: Optional[pulumi.Input['ApacheTomcatAKSWorkloadDeploymentArgs']]):
        pulumi.set(self, "apache_tomcat_aks_workload_deployment_properties", value)


@pulumi.input_type
class ApacheTomcatAKSWorkloadDeploymentArgs:
    def __init__(__self__, *,
                 automation_artifact_properties: Optional[pulumi.Input['AutomationArtifactArgs']] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]] = None,
                 build_container_images: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]]] = None,
                 cluster_properties: Optional[pulumi.Input['AKSDeploymentPropertiesArgs']] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]] = None,
                 container_image_properties: Optional[pulumi.Input['ContainerImagePropertiesArgs']] = None,
                 deployment_name_prefix: Optional[pulumi.Input[str]] = None,
                 deployment_spec: Optional[pulumi.Input['AKSDeploymentSpecificationArgs']] = None,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]] = None,
                 limits: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 monitoring_properties: Optional[pulumi.Input['AppInsightMonitoringPropertiesArgs']] = None,
                 requests: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 target_platform_identity: Optional[pulumi.Input[str]] = None):
        """
        ApacheTomcat web application.
        :param pulumi.Input['AutomationArtifactArgs'] automation_artifact_properties: Class for automation artifact.
        :param pulumi.Input[Sequence[pulumi.Input['BindingArgs']]] bindings: Gets or sets the bindings for the application.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]] build_container_images: Gets or sets the build container images.
        :param pulumi.Input['AKSDeploymentPropertiesArgs'] cluster_properties: Class for AKSDeployment Properties.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]] configurations: Gets or sets application configuration.
        :param pulumi.Input['ContainerImagePropertiesArgs'] container_image_properties: Class for container image properties.
        :param pulumi.Input[str] deployment_name_prefix: Gets or sets the deployment name prefix.
        :param pulumi.Input['AKSDeploymentSpecificationArgs'] deployment_spec: AKS Deployment Specification.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]] directories: Gets or sets application directories.
        :param pulumi.Input['ResourceRequirementsArgs'] limits: Resource Requirements.
        :param pulumi.Input['AppInsightMonitoringPropertiesArgs'] monitoring_properties: Class for app insight monitoring properties.
        :param pulumi.Input['ResourceRequirementsArgs'] requests: Resource Requirements.
        :param pulumi.Input[str] target_platform_identity: Gets or sets the target platform managed identity.
        """
        if automation_artifact_properties is not None:
            pulumi.set(__self__, "automation_artifact_properties", automation_artifact_properties)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if build_container_images is not None:
            pulumi.set(__self__, "build_container_images", build_container_images)
        if cluster_properties is not None:
            pulumi.set(__self__, "cluster_properties", cluster_properties)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if container_image_properties is not None:
            pulumi.set(__self__, "container_image_properties", container_image_properties)
        if deployment_name_prefix is not None:
            pulumi.set(__self__, "deployment_name_prefix", deployment_name_prefix)
        if deployment_spec is not None:
            pulumi.set(__self__, "deployment_spec", deployment_spec)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if monitoring_properties is not None:
            pulumi.set(__self__, "monitoring_properties", monitoring_properties)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if target_platform_identity is not None:
            pulumi.set(__self__, "target_platform_identity", target_platform_identity)

    @property
    @pulumi.getter(name="automationArtifactProperties")
    def automation_artifact_properties(self) -> Optional[pulumi.Input['AutomationArtifactArgs']]:
        """
        Class for automation artifact.
        """
        return pulumi.get(self, "automation_artifact_properties")

    @automation_artifact_properties.setter
    def automation_artifact_properties(self, value: Optional[pulumi.Input['AutomationArtifactArgs']]):
        pulumi.set(self, "automation_artifact_properties", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter(name="buildContainerImages")
    def build_container_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]]]:
        """
        Gets or sets the build container images.
        """
        return pulumi.get(self, "build_container_images")

    @build_container_images.setter
    def build_container_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]]]):
        pulumi.set(self, "build_container_images", value)

    @property
    @pulumi.getter(name="clusterProperties")
    def cluster_properties(self) -> Optional[pulumi.Input['AKSDeploymentPropertiesArgs']]:
        """
        Class for AKSDeployment Properties.
        """
        return pulumi.get(self, "cluster_properties")

    @cluster_properties.setter
    def cluster_properties(self, value: Optional[pulumi.Input['AKSDeploymentPropertiesArgs']]):
        pulumi.set(self, "cluster_properties", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter(name="containerImageProperties")
    def container_image_properties(self) -> Optional[pulumi.Input['ContainerImagePropertiesArgs']]:
        """
        Class for container image properties.
        """
        return pulumi.get(self, "container_image_properties")

    @container_image_properties.setter
    def container_image_properties(self, value: Optional[pulumi.Input['ContainerImagePropertiesArgs']]):
        pulumi.set(self, "container_image_properties", value)

    @property
    @pulumi.getter(name="deploymentNamePrefix")
    def deployment_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the deployment name prefix.
        """
        return pulumi.get(self, "deployment_name_prefix")

    @deployment_name_prefix.setter
    def deployment_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name_prefix", value)

    @property
    @pulumi.getter(name="deploymentSpec")
    def deployment_spec(self) -> Optional[pulumi.Input['AKSDeploymentSpecificationArgs']]:
        """
        AKS Deployment Specification.
        """
        return pulumi.get(self, "deployment_spec")

    @deployment_spec.setter
    def deployment_spec(self, value: Optional[pulumi.Input['AKSDeploymentSpecificationArgs']]):
        pulumi.set(self, "deployment_spec", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter(name="monitoringProperties")
    def monitoring_properties(self) -> Optional[pulumi.Input['AppInsightMonitoringPropertiesArgs']]:
        """
        Class for app insight monitoring properties.
        """
        return pulumi.get(self, "monitoring_properties")

    @monitoring_properties.setter
    def monitoring_properties(self, value: Optional[pulumi.Input['AppInsightMonitoringPropertiesArgs']]):
        pulumi.set(self, "monitoring_properties", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="targetPlatformIdentity")
    def target_platform_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target platform managed identity.
        """
        return pulumi.get(self, "target_platform_identity")

    @target_platform_identity.setter
    def target_platform_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_platform_identity", value)


@pulumi.input_type
class ApacheTomcatWebApplicationArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_scratch_path: Optional[pulumi.Input[str]] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]] = None,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]] = None,
                 discovered_frameworks: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 limits: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 path: Optional[pulumi.Input['DirectoryPathArgs']] = None,
                 primary_framework: Optional[pulumi.Input['WebApplicationFrameworkArgs']] = None,
                 requests: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 web_server_id: Optional[pulumi.Input[str]] = None,
                 web_server_name: Optional[pulumi.Input[str]] = None):
        """
        ApacheTomcat web application.
        :param pulumi.Input[str] application_id: Gets or sets the web application id.
        :param pulumi.Input[str] application_name: Gets or sets the web application name.
        :param pulumi.Input[str] application_scratch_path: Gets or sets application scratch path.
        :param pulumi.Input[Sequence[pulumi.Input['BindingArgs']]] bindings: Gets or sets the bindings for the application.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]] configurations: Gets or sets application configuration.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]] directories: Gets or sets application directories.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]] discovered_frameworks: Gets or sets the discovered frameworks of application.
        :param pulumi.Input[str] display_name: Gets or sets the display name.
        :param pulumi.Input['ResourceRequirementsArgs'] limits: Resource Requirements.
        :param pulumi.Input['DirectoryPathArgs'] path: Second level entity for virtual directories.
        :param pulumi.Input['WebApplicationFrameworkArgs'] primary_framework: Framework specific data for a web application.
        :param pulumi.Input['ResourceRequirementsArgs'] requests: Resource Requirements.
        :param pulumi.Input[str] web_server_id: Gets or sets the web server id.
        :param pulumi.Input[str] web_server_name: Gets or sets the web server name.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_scratch_path is not None:
            pulumi.set(__self__, "application_scratch_path", application_scratch_path)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if discovered_frameworks is not None:
            pulumi.set(__self__, "discovered_frameworks", discovered_frameworks)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if primary_framework is not None:
            pulumi.set(__self__, "primary_framework", primary_framework)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if web_server_id is not None:
            pulumi.set(__self__, "web_server_id", web_server_id)
        if web_server_name is not None:
            pulumi.set(__self__, "web_server_name", web_server_name)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web application id.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationScratchPath")
    def application_scratch_path(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets application scratch path.
        """
        return pulumi.get(self, "application_scratch_path")

    @application_scratch_path.setter
    def application_scratch_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_scratch_path", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter(name="discoveredFrameworks")
    def discovered_frameworks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]]]:
        """
        Gets or sets the discovered frameworks of application.
        """
        return pulumi.get(self, "discovered_frameworks")

    @discovered_frameworks.setter
    def discovered_frameworks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]]]):
        pulumi.set(self, "discovered_frameworks", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['DirectoryPathArgs']]:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['DirectoryPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="primaryFramework")
    def primary_framework(self) -> Optional[pulumi.Input['WebApplicationFrameworkArgs']]:
        """
        Framework specific data for a web application.
        """
        return pulumi.get(self, "primary_framework")

    @primary_framework.setter
    def primary_framework(self, value: Optional[pulumi.Input['WebApplicationFrameworkArgs']]):
        pulumi.set(self, "primary_framework", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="webServerId")
    def web_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web server id.
        """
        return pulumi.get(self, "web_server_id")

    @web_server_id.setter
    def web_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_server_id", value)

    @property
    @pulumi.getter(name="webServerName")
    def web_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web server name.
        """
        return pulumi.get(self, "web_server_name")

    @web_server_name.setter
    def web_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_server_name", value)


@pulumi.input_type
class ApacheTomcatWorkloadInstanceModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 apache_tomcat_web_application: Optional[pulumi.Input['ApacheTomcatWebApplicationArgs']] = None,
                 web_app_arm_id: Optional[pulumi.Input[str]] = None,
                 web_app_site_name: Optional[pulumi.Input[str]] = None):
        """
        ApacheTomcat workload instance model custom properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'ApacheTomcatWorkloadInstanceModelCustomProperties'.
        :param pulumi.Input['ApacheTomcatWebApplicationArgs'] apache_tomcat_web_application: ApacheTomcat web application.
        :param pulumi.Input[str] web_app_arm_id: Gets or sets the Web application ARM id.
        :param pulumi.Input[str] web_app_site_name: Gets or sets the Web application site name.
        """
        pulumi.set(__self__, "instance_type", 'ApacheTomcatWorkloadInstanceModelCustomProperties')
        if apache_tomcat_web_application is not None:
            pulumi.set(__self__, "apache_tomcat_web_application", apache_tomcat_web_application)
        if web_app_arm_id is not None:
            pulumi.set(__self__, "web_app_arm_id", web_app_arm_id)
        if web_app_site_name is not None:
            pulumi.set(__self__, "web_app_site_name", web_app_site_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'ApacheTomcatWorkloadInstanceModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="apacheTomcatWebApplication")
    def apache_tomcat_web_application(self) -> Optional[pulumi.Input['ApacheTomcatWebApplicationArgs']]:
        """
        ApacheTomcat web application.
        """
        return pulumi.get(self, "apache_tomcat_web_application")

    @apache_tomcat_web_application.setter
    def apache_tomcat_web_application(self, value: Optional[pulumi.Input['ApacheTomcatWebApplicationArgs']]):
        pulumi.set(self, "apache_tomcat_web_application", value)

    @property
    @pulumi.getter(name="webAppArmId")
    def web_app_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Web application ARM id.
        """
        return pulumi.get(self, "web_app_arm_id")

    @web_app_arm_id.setter
    def web_app_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_arm_id", value)

    @property
    @pulumi.getter(name="webAppSiteName")
    def web_app_site_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Web application site name.
        """
        return pulumi.get(self, "web_app_site_name")

    @web_app_site_name.setter
    def web_app_site_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_site_name", value)


@pulumi.input_type
class AppInsightMonitoringPropertiesArgs:
    def __init__(__self__, *,
                 app_insights_name: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 secret_store_details: Optional[pulumi.Input['SecretStoreDetailsArgs']] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Class for app insight monitoring properties.
        :param pulumi.Input[str] app_insights_name: Gets or sets the app insights name.
        :param pulumi.Input[bool] is_enabled: Gets or sets a value indicating whether monitoring is enabled.
        :param pulumi.Input[str] region: Gets or sets the region.
        :param pulumi.Input[str] resource_group: Gets or sets the resource group of the resource.
        :param pulumi.Input[str] subscription_id: Gets or sets the subscription id of the resource.
        """
        if app_insights_name is not None:
            pulumi.set(__self__, "app_insights_name", app_insights_name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if secret_store_details is not None:
            pulumi.set(__self__, "secret_store_details", secret_store_details)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="appInsightsName")
    def app_insights_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the app insights name.
        """
        return pulumi.get(self, "app_insights_name")

    @app_insights_name.setter
    def app_insights_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_insights_name", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether monitoring is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the resource group of the resource.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="secretStoreDetails")
    def secret_store_details(self) -> Optional[pulumi.Input['SecretStoreDetailsArgs']]:
        return pulumi.get(self, "secret_store_details")

    @secret_store_details.setter
    def secret_store_details(self, value: Optional[pulumi.Input['SecretStoreDetailsArgs']]):
        pulumi.set(self, "secret_store_details", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the subscription id of the resource.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class AssessmentPropertiesArgs:
    def __init__(__self__, *,
                 azure_disk_type: pulumi.Input[Union[str, 'AzureDiskType']],
                 azure_hybrid_use_benefit: pulumi.Input[Union[str, 'AzureHybridUseBenefit']],
                 azure_location: pulumi.Input[Union[str, 'AzureLocation']],
                 azure_offer_code: pulumi.Input[Union[str, 'AzureOfferCode']],
                 azure_pricing_tier: pulumi.Input[Union[str, 'AzurePricingTier']],
                 azure_storage_redundancy: pulumi.Input[Union[str, 'AzureStorageRedundancy']],
                 azure_vm_families: pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]],
                 currency: pulumi.Input[Union[str, 'Currency']],
                 discount_percentage: pulumi.Input[float],
                 percentile: pulumi.Input[Union[str, 'Percentile']],
                 reserved_instance: pulumi.Input[Union[str, 'ReservedInstance']],
                 scaling_factor: pulumi.Input[float],
                 sizing_criterion: pulumi.Input[Union[str, 'AssessmentSizingCriterion']],
                 stage: pulumi.Input[Union[str, 'AssessmentStage']],
                 time_range: pulumi.Input[Union[str, 'TimeRange']],
                 vm_uptime: pulumi.Input['VmUptimeArgs']):
        """
        Properties of an assessment.
        :param pulumi.Input[Union[str, 'AzureDiskType']] azure_disk_type: Storage type selected for this disk.
        :param pulumi.Input[Union[str, 'AzureHybridUseBenefit']] azure_hybrid_use_benefit: AHUB discount on windows virtual machines.
        :param pulumi.Input[Union[str, 'AzureLocation']] azure_location: Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        :param pulumi.Input[Union[str, 'AzureOfferCode']] azure_offer_code: Offer code according to which cost estimation is done.
        :param pulumi.Input[Union[str, 'AzurePricingTier']] azure_pricing_tier: Pricing tier for Size evaluation.
        :param pulumi.Input[Union[str, 'AzureStorageRedundancy']] azure_storage_redundancy: Storage Redundancy type offered by Azure.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]] azure_vm_families: List of azure VM families.
        :param pulumi.Input[Union[str, 'Currency']] currency: Currency to report prices in.
        :param pulumi.Input[float] discount_percentage: Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        :param pulumi.Input[Union[str, 'Percentile']] percentile: Percentile of performance data used to recommend Azure size.
        :param pulumi.Input[Union[str, 'ReservedInstance']] reserved_instance: Azure reserved instance.
        :param pulumi.Input[float] scaling_factor: Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        :param pulumi.Input[Union[str, 'AssessmentSizingCriterion']] sizing_criterion: Assessment sizing criterion.
        :param pulumi.Input[Union[str, 'AssessmentStage']] stage: User configurable setting that describes the status of the assessment.
        :param pulumi.Input[Union[str, 'TimeRange']] time_range: Time range of performance data used to recommend a size.
        :param pulumi.Input['VmUptimeArgs'] vm_uptime: Specify the duration for which the VMs are up in the on-premises environment.
        """
        pulumi.set(__self__, "azure_disk_type", azure_disk_type)
        pulumi.set(__self__, "azure_hybrid_use_benefit", azure_hybrid_use_benefit)
        pulumi.set(__self__, "azure_location", azure_location)
        pulumi.set(__self__, "azure_offer_code", azure_offer_code)
        pulumi.set(__self__, "azure_pricing_tier", azure_pricing_tier)
        pulumi.set(__self__, "azure_storage_redundancy", azure_storage_redundancy)
        pulumi.set(__self__, "azure_vm_families", azure_vm_families)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount_percentage", discount_percentage)
        pulumi.set(__self__, "percentile", percentile)
        pulumi.set(__self__, "reserved_instance", reserved_instance)
        pulumi.set(__self__, "scaling_factor", scaling_factor)
        pulumi.set(__self__, "sizing_criterion", sizing_criterion)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "time_range", time_range)
        pulumi.set(__self__, "vm_uptime", vm_uptime)

    @property
    @pulumi.getter(name="azureDiskType")
    def azure_disk_type(self) -> pulumi.Input[Union[str, 'AzureDiskType']]:
        """
        Storage type selected for this disk.
        """
        return pulumi.get(self, "azure_disk_type")

    @azure_disk_type.setter
    def azure_disk_type(self, value: pulumi.Input[Union[str, 'AzureDiskType']]):
        pulumi.set(self, "azure_disk_type", value)

    @property
    @pulumi.getter(name="azureHybridUseBenefit")
    def azure_hybrid_use_benefit(self) -> pulumi.Input[Union[str, 'AzureHybridUseBenefit']]:
        """
        AHUB discount on windows virtual machines.
        """
        return pulumi.get(self, "azure_hybrid_use_benefit")

    @azure_hybrid_use_benefit.setter
    def azure_hybrid_use_benefit(self, value: pulumi.Input[Union[str, 'AzureHybridUseBenefit']]):
        pulumi.set(self, "azure_hybrid_use_benefit", value)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> pulumi.Input[Union[str, 'AzureLocation']]:
        """
        Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: pulumi.Input[Union[str, 'AzureLocation']]):
        pulumi.set(self, "azure_location", value)

    @property
    @pulumi.getter(name="azureOfferCode")
    def azure_offer_code(self) -> pulumi.Input[Union[str, 'AzureOfferCode']]:
        """
        Offer code according to which cost estimation is done.
        """
        return pulumi.get(self, "azure_offer_code")

    @azure_offer_code.setter
    def azure_offer_code(self, value: pulumi.Input[Union[str, 'AzureOfferCode']]):
        pulumi.set(self, "azure_offer_code", value)

    @property
    @pulumi.getter(name="azurePricingTier")
    def azure_pricing_tier(self) -> pulumi.Input[Union[str, 'AzurePricingTier']]:
        """
        Pricing tier for Size evaluation.
        """
        return pulumi.get(self, "azure_pricing_tier")

    @azure_pricing_tier.setter
    def azure_pricing_tier(self, value: pulumi.Input[Union[str, 'AzurePricingTier']]):
        pulumi.set(self, "azure_pricing_tier", value)

    @property
    @pulumi.getter(name="azureStorageRedundancy")
    def azure_storage_redundancy(self) -> pulumi.Input[Union[str, 'AzureStorageRedundancy']]:
        """
        Storage Redundancy type offered by Azure.
        """
        return pulumi.get(self, "azure_storage_redundancy")

    @azure_storage_redundancy.setter
    def azure_storage_redundancy(self, value: pulumi.Input[Union[str, 'AzureStorageRedundancy']]):
        pulumi.set(self, "azure_storage_redundancy", value)

    @property
    @pulumi.getter(name="azureVmFamilies")
    def azure_vm_families(self) -> pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]:
        """
        List of azure VM families.
        """
        return pulumi.get(self, "azure_vm_families")

    @azure_vm_families.setter
    def azure_vm_families(self, value: pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]):
        pulumi.set(self, "azure_vm_families", value)

    @property
    @pulumi.getter
    def currency(self) -> pulumi.Input[Union[str, 'Currency']]:
        """
        Currency to report prices in.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: pulumi.Input[Union[str, 'Currency']]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> pulumi.Input[float]:
        """
        Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
        """
        return pulumi.get(self, "discount_percentage")

    @discount_percentage.setter
    def discount_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "discount_percentage", value)

    @property
    @pulumi.getter
    def percentile(self) -> pulumi.Input[Union[str, 'Percentile']]:
        """
        Percentile of performance data used to recommend Azure size.
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: pulumi.Input[Union[str, 'Percentile']]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="reservedInstance")
    def reserved_instance(self) -> pulumi.Input[Union[str, 'ReservedInstance']]:
        """
        Azure reserved instance.
        """
        return pulumi.get(self, "reserved_instance")

    @reserved_instance.setter
    def reserved_instance(self, value: pulumi.Input[Union[str, 'ReservedInstance']]):
        pulumi.set(self, "reserved_instance", value)

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> pulumi.Input[float]:
        """
        Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
        """
        return pulumi.get(self, "scaling_factor")

    @scaling_factor.setter
    def scaling_factor(self, value: pulumi.Input[float]):
        pulumi.set(self, "scaling_factor", value)

    @property
    @pulumi.getter(name="sizingCriterion")
    def sizing_criterion(self) -> pulumi.Input[Union[str, 'AssessmentSizingCriterion']]:
        """
        Assessment sizing criterion.
        """
        return pulumi.get(self, "sizing_criterion")

    @sizing_criterion.setter
    def sizing_criterion(self, value: pulumi.Input[Union[str, 'AssessmentSizingCriterion']]):
        pulumi.set(self, "sizing_criterion", value)

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Input[Union[str, 'AssessmentStage']]:
        """
        User configurable setting that describes the status of the assessment.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[Union[str, 'AssessmentStage']]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Input[Union[str, 'TimeRange']]:
        """
        Time range of performance data used to recommend a size.
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: pulumi.Input[Union[str, 'TimeRange']]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter(name="vmUptime")
    def vm_uptime(self) -> pulumi.Input['VmUptimeArgs']:
        """
        Specify the duration for which the VMs are up in the on-premises environment.
        """
        return pulumi.get(self, "vm_uptime")

    @vm_uptime.setter
    def vm_uptime(self, value: pulumi.Input['VmUptimeArgs']):
        pulumi.set(self, "vm_uptime", value)


@pulumi.input_type
class AutomationArtifactArgs:
    def __init__(__self__, *,
                 artifacts: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 azure_file_share_profile: Optional[pulumi.Input['AzureFileShareHydrationProfileArgs']] = None,
                 status: Optional[pulumi.Input[Union[str, 'AutomationArtifactStatus']]] = None):
        """
        Class for automation artifact.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] artifacts: Gets or sets the artifacts.
        :param pulumi.Input['AzureFileShareHydrationProfileArgs'] azure_file_share_profile: Azure file share profile for hydration of application folders not mounted on
               the container file system.
        :param pulumi.Input[Union[str, 'AutomationArtifactStatus']] status: Gets or sets the status of automation artifacts.
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if azure_file_share_profile is not None:
            pulumi.set(__self__, "azure_file_share_profile", azure_file_share_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the artifacts.
        """
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "artifacts", value)

    @property
    @pulumi.getter(name="azureFileShareProfile")
    def azure_file_share_profile(self) -> Optional[pulumi.Input['AzureFileShareHydrationProfileArgs']]:
        """
        Azure file share profile for hydration of application folders not mounted on
        the container file system.
        """
        return pulumi.get(self, "azure_file_share_profile")

    @azure_file_share_profile.setter
    def azure_file_share_profile(self, value: Optional[pulumi.Input['AzureFileShareHydrationProfileArgs']]):
        pulumi.set(self, "azure_file_share_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'AutomationArtifactStatus']]]:
        """
        Gets or sets the status of automation artifacts.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'AutomationArtifactStatus']]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AvailabilitySetResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 fault_domain: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None,
                 update_domain: Optional[pulumi.Input[int]] = None):
        """
        Gets or sets the availability set resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Compute/availabilitySets'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[int] fault_domain: Gets or sets the target fault domain.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        :param pulumi.Input[int] update_domain: Gets or sets the target update domain.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Compute/availabilitySets')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if update_domain is not None:
            pulumi.set(__self__, "update_domain", update_domain)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Compute/availabilitySets'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target fault domain.
        """
        return pulumi.get(self, "fault_domain")

    @fault_domain.setter
    def fault_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fault_domain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)

    @property
    @pulumi.getter(name="updateDomain")
    def update_domain(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target update domain.
        """
        return pulumi.get(self, "update_domain")

    @update_domain.setter
    def update_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_domain", value)


@pulumi.input_type
class AzureFileShareHydrationProfileArgs:
    def __init__(__self__, *,
                 azure_file_share_dir_path: Optional[pulumi.Input[str]] = None,
                 azure_file_share_name: Optional[pulumi.Input[str]] = None,
                 azure_file_share_resource_group: Optional[pulumi.Input[str]] = None,
                 azure_file_share_storage_account: Optional[pulumi.Input[str]] = None,
                 azure_file_share_subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Azure file share profile for hydration of application folders not mounted on
        the container file system.
        :param pulumi.Input[str] azure_file_share_dir_path: Gets or sets the cloud directory path of the directory on azure file share.
        :param pulumi.Input[str] azure_file_share_name: Gets or sets the name of the azure file share.
        :param pulumi.Input[str] azure_file_share_resource_group: Gets or sets the name of the azure file share resource group.
        :param pulumi.Input[str] azure_file_share_storage_account: Gets or sets the name of the azure file share storage account.
        :param pulumi.Input[str] azure_file_share_subscription_id: Gets or sets the subscription id of the azure file share.
        """
        if azure_file_share_dir_path is not None:
            pulumi.set(__self__, "azure_file_share_dir_path", azure_file_share_dir_path)
        if azure_file_share_name is not None:
            pulumi.set(__self__, "azure_file_share_name", azure_file_share_name)
        if azure_file_share_resource_group is not None:
            pulumi.set(__self__, "azure_file_share_resource_group", azure_file_share_resource_group)
        if azure_file_share_storage_account is not None:
            pulumi.set(__self__, "azure_file_share_storage_account", azure_file_share_storage_account)
        if azure_file_share_subscription_id is not None:
            pulumi.set(__self__, "azure_file_share_subscription_id", azure_file_share_subscription_id)

    @property
    @pulumi.getter(name="azureFileShareDirPath")
    def azure_file_share_dir_path(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the cloud directory path of the directory on azure file share.
        """
        return pulumi.get(self, "azure_file_share_dir_path")

    @azure_file_share_dir_path.setter
    def azure_file_share_dir_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_file_share_dir_path", value)

    @property
    @pulumi.getter(name="azureFileShareName")
    def azure_file_share_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the name of the azure file share.
        """
        return pulumi.get(self, "azure_file_share_name")

    @azure_file_share_name.setter
    def azure_file_share_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_file_share_name", value)

    @property
    @pulumi.getter(name="azureFileShareResourceGroup")
    def azure_file_share_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the name of the azure file share resource group.
        """
        return pulumi.get(self, "azure_file_share_resource_group")

    @azure_file_share_resource_group.setter
    def azure_file_share_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_file_share_resource_group", value)

    @property
    @pulumi.getter(name="azureFileShareStorageAccount")
    def azure_file_share_storage_account(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the name of the azure file share storage account.
        """
        return pulumi.get(self, "azure_file_share_storage_account")

    @azure_file_share_storage_account.setter
    def azure_file_share_storage_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_file_share_storage_account", value)

    @property
    @pulumi.getter(name="azureFileShareSubscriptionId")
    def azure_file_share_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the subscription id of the azure file share.
        """
        return pulumi.get(self, "azure_file_share_subscription_id")

    @azure_file_share_subscription_id.setter
    def azure_file_share_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_file_share_subscription_id", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input['CertArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 port_mapping: Optional[pulumi.Input['PortMappingArgs']] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        Binding for a web application.
        :param pulumi.Input['CertArgs'] cert: WebApplication certificate.
        :param pulumi.Input[str] host_name: Gets or sets the binding host name.
        :param pulumi.Input[str] ip_address: Gets or sets the IP Address.
        :param pulumi.Input[str] port: Gets or sets the application port.
        :param pulumi.Input['PortMappingArgs'] port_mapping: WebApplication port mapping.
        :param pulumi.Input[str] protocol: Gets or sets the protocol.
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_mapping is not None:
            pulumi.set(__self__, "port_mapping", port_mapping)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input['CertArgs']]:
        """
        WebApplication certificate.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input['CertArgs']]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the binding host name.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the IP Address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the application port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> Optional[pulumi.Input['PortMappingArgs']]:
        """
        WebApplication port mapping.
        """
        return pulumi.get(self, "port_mapping")

    @port_mapping.setter
    def port_mapping(self, value: Optional[pulumi.Input['PortMappingArgs']]):
        pulumi.set(self, "port_mapping", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class CertArgs:
    def __init__(__self__, *,
                 cert_data: Optional[pulumi.Input[str]] = None,
                 cert_needed: Optional[pulumi.Input[bool]] = None,
                 cert_provided: Optional[pulumi.Input[bool]] = None,
                 secret_store: Optional[pulumi.Input[Union[str, 'SecretStoreType']]] = None):
        """
        WebApplication certificate.
        :param pulumi.Input[str] cert_data: Gets or sets the Certificate data.
        :param pulumi.Input[bool] cert_needed: Gets or sets a value indicating whether certificate is needed or not.
        :param pulumi.Input[bool] cert_provided: Gets or sets a value indicating whether certificate is provided or not.
        :param pulumi.Input[Union[str, 'SecretStoreType']] secret_store: Gets or sets the type of secret store for the certificate.
        """
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if cert_needed is not None:
            pulumi.set(__self__, "cert_needed", cert_needed)
        if cert_provided is not None:
            pulumi.set(__self__, "cert_provided", cert_provided)
        if secret_store is not None:
            pulumi.set(__self__, "secret_store", secret_store)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Certificate data.
        """
        return pulumi.get(self, "cert_data")

    @cert_data.setter
    def cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_data", value)

    @property
    @pulumi.getter(name="certNeeded")
    def cert_needed(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether certificate is needed or not.
        """
        return pulumi.get(self, "cert_needed")

    @cert_needed.setter
    def cert_needed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cert_needed", value)

    @property
    @pulumi.getter(name="certProvided")
    def cert_provided(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether certificate is provided or not.
        """
        return pulumi.get(self, "cert_provided")

    @cert_provided.setter
    def cert_provided(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cert_provided", value)

    @property
    @pulumi.getter(name="secretStore")
    def secret_store(self) -> Optional[pulumi.Input[Union[str, 'SecretStoreType']]]:
        """
        Gets or sets the type of secret store for the certificate.
        """
        return pulumi.get(self, "secret_store")

    @secret_store.setter
    def secret_store(self, value: Optional[pulumi.Input[Union[str, 'SecretStoreType']]]):
        pulumi.set(self, "secret_store", value)


@pulumi.input_type
class CollectorAgentPropertiesArgs:
    def __init__(__self__, *,
                 spn_details: Optional[pulumi.Input['CollectorBodyAgentSpnPropertiesArgs']] = None):
        if spn_details is not None:
            pulumi.set(__self__, "spn_details", spn_details)

    @property
    @pulumi.getter(name="spnDetails")
    def spn_details(self) -> Optional[pulumi.Input['CollectorBodyAgentSpnPropertiesArgs']]:
        return pulumi.get(self, "spn_details")

    @spn_details.setter
    def spn_details(self, value: Optional[pulumi.Input['CollectorBodyAgentSpnPropertiesArgs']]):
        pulumi.set(self, "spn_details", value)


@pulumi.input_type
class CollectorBodyAgentSpnPropertiesArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 authority: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_id: Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] audience: Intended audience for the service principal.
        :param pulumi.Input[str] authority: AAD Authority URL which was used to request the token for the service principal.
        :param pulumi.Input[str] object_id: Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        :param pulumi.Input[str] tenant_id: Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Intended audience for the service principal.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        """
        AAD Authority URL which was used to request the token for the service principal.
        """
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class CollectorPropertiesArgs:
    def __init__(__self__, *,
                 agent_properties: Optional[pulumi.Input['CollectorAgentPropertiesArgs']] = None,
                 discovery_site_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] discovery_site_id: The ARM id of the discovery service site.
        """
        if agent_properties is not None:
            pulumi.set(__self__, "agent_properties", agent_properties)
        if discovery_site_id is not None:
            pulumi.set(__self__, "discovery_site_id", discovery_site_id)

    @property
    @pulumi.getter(name="agentProperties")
    def agent_properties(self) -> Optional[pulumi.Input['CollectorAgentPropertiesArgs']]:
        return pulumi.get(self, "agent_properties")

    @agent_properties.setter
    def agent_properties(self, value: Optional[pulumi.Input['CollectorAgentPropertiesArgs']]):
        pulumi.set(self, "agent_properties", value)

    @property
    @pulumi.getter(name="discoverySiteId")
    def discovery_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM id of the discovery service site.
        """
        return pulumi.get(self, "discovery_site_id")

    @discovery_site_id.setter
    def discovery_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_site_id", value)


@pulumi.input_type
class ConnectionStateRequestBodyPropertiesArgs:
    def __init__(__self__, *,
                 private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None):
        """
        Properties of Connection state request.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: Private endpoint connection state.
        """
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        Private endpoint connection state.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)


@pulumi.input_type
class ContainerImagePropertiesArgs:
    def __init__(__self__, *,
                 dockerfile: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 registry_properties: Optional[pulumi.Input['ACRPropertiesArgs']] = None,
                 run_id: Optional[pulumi.Input[str]] = None,
                 run_status: Optional[pulumi.Input[str]] = None):
        """
        Class for container image properties.
        :param pulumi.Input[str] dockerfile: Gets or sets the dockerfile for the container image.
        :param pulumi.Input[str] image_name: Gets or sets the container image name.
        :param pulumi.Input[str] image_tag: Gets or sets the container image tag.
        :param pulumi.Input['ACRPropertiesArgs'] registry_properties: Class for ACR Properties.
        :param pulumi.Input[str] run_id: Gets or sets the RunId.
        :param pulumi.Input[str] run_status: Gets or sets the RunStatus.
        """
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if registry_properties is not None:
            pulumi.set(__self__, "registry_properties", registry_properties)
        if run_id is not None:
            pulumi.set(__self__, "run_id", run_id)
        if run_status is not None:
            pulumi.set(__self__, "run_status", run_status)

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the dockerfile for the container image.
        """
        return pulumi.get(self, "dockerfile")

    @dockerfile.setter
    def dockerfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the container image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the container image tag.
        """
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter(name="registryProperties")
    def registry_properties(self) -> Optional[pulumi.Input['ACRPropertiesArgs']]:
        """
        Class for ACR Properties.
        """
        return pulumi.get(self, "registry_properties")

    @registry_properties.setter
    def registry_properties(self, value: Optional[pulumi.Input['ACRPropertiesArgs']]):
        pulumi.set(self, "registry_properties", value)

    @property
    @pulumi.getter(name="runId")
    def run_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the RunId.
        """
        return pulumi.get(self, "run_id")

    @run_id.setter
    def run_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_id", value)

    @property
    @pulumi.getter(name="runStatus")
    def run_status(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the RunStatus.
        """
        return pulumi.get(self, "run_status")

    @run_status.setter
    def run_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_status", value)


@pulumi.input_type
class DirectoryPathArgs:
    def __init__(__self__, *,
                 physical: Optional[pulumi.Input[str]] = None,
                 virtual: Optional[pulumi.Input[str]] = None):
        """
        Second level entity for virtual directories.
        :param pulumi.Input[str] physical: Gets or sets the physical path of the directory on the web server.
        :param pulumi.Input[str] virtual: Gets or sets the virtual path for the directory.
        """
        if physical is not None:
            pulumi.set(__self__, "physical", physical)
        if virtual is not None:
            pulumi.set(__self__, "virtual", virtual)

    @property
    @pulumi.getter
    def physical(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the physical path of the directory on the web server.
        """
        return pulumi.get(self, "physical")

    @physical.setter
    def physical(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "physical", value)

    @property
    @pulumi.getter
    def virtual(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the virtual path for the directory.
        """
        return pulumi.get(self, "virtual")

    @virtual.setter
    def virtual(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual", value)


@pulumi.input_type
class DiskEncryptionSetResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the disk encryption set resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Compute/diskEncryptionSets'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Compute/diskEncryptionSets')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Compute/diskEncryptionSets'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class GmsaAuthenticationPropertiesArgs:
    def __init__(__self__, *,
                 ad_domain_controller_dns: Optional[pulumi.Input[str]] = None,
                 ad_domain_fqdn: Optional[pulumi.Input[str]] = None,
                 akv_properties: Optional[pulumi.Input['KeyVaultSecretStorePropertiesArgs']] = None,
                 domain_admin_password: Optional[pulumi.Input[str]] = None,
                 domain_admin_username: Optional[pulumi.Input[str]] = None,
                 domain_controller_address: Optional[pulumi.Input[str]] = None,
                 gmsa_account_name: Optional[pulumi.Input[str]] = None,
                 gmsa_user_password: Optional[pulumi.Input[str]] = None,
                 gmsa_username: Optional[pulumi.Input[str]] = None):
        """
        Class for GMSA authentication details to configure Active Directory connectivity.
        :param pulumi.Input[str] ad_domain_controller_dns: Gets or sets the list of dns server that can resolve the Active Directory Domain Name/Address.
        :param pulumi.Input[str] ad_domain_fqdn: Gets or sets the FQDN of the Active Directory Domain. For e.g. 'contoso.local', 'fareast.corp.microsoft.com' etc.
        :param pulumi.Input[str] domain_admin_password: Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.DomainAdminUsername.
        :param pulumi.Input[str] domain_admin_username: Gets or sets the name of the user having admin rights on the Active Directory Domain Controller.
        :param pulumi.Input[str] domain_controller_address: Gets or sets the address of the Active Directory Domain Controller running Domain Services.
        :param pulumi.Input[str] gmsa_account_name: Gets or sets the name to be used for GMSA.
        :param pulumi.Input[str] gmsa_user_password: Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.GmsaUsername.
        :param pulumi.Input[str] gmsa_username: Gets or sets username of the user having authorization to access GMSA on Active Directory.
        """
        if ad_domain_controller_dns is not None:
            pulumi.set(__self__, "ad_domain_controller_dns", ad_domain_controller_dns)
        if ad_domain_fqdn is not None:
            pulumi.set(__self__, "ad_domain_fqdn", ad_domain_fqdn)
        if akv_properties is not None:
            pulumi.set(__self__, "akv_properties", akv_properties)
        if domain_admin_password is not None:
            pulumi.set(__self__, "domain_admin_password", domain_admin_password)
        if domain_admin_username is not None:
            pulumi.set(__self__, "domain_admin_username", domain_admin_username)
        if domain_controller_address is not None:
            pulumi.set(__self__, "domain_controller_address", domain_controller_address)
        if gmsa_account_name is not None:
            pulumi.set(__self__, "gmsa_account_name", gmsa_account_name)
        if gmsa_user_password is not None:
            pulumi.set(__self__, "gmsa_user_password", gmsa_user_password)
        if gmsa_username is not None:
            pulumi.set(__self__, "gmsa_username", gmsa_username)

    @property
    @pulumi.getter(name="adDomainControllerDns")
    def ad_domain_controller_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the list of dns server that can resolve the Active Directory Domain Name/Address.
        """
        return pulumi.get(self, "ad_domain_controller_dns")

    @ad_domain_controller_dns.setter
    def ad_domain_controller_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ad_domain_controller_dns", value)

    @property
    @pulumi.getter(name="adDomainFqdn")
    def ad_domain_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the FQDN of the Active Directory Domain. For e.g. 'contoso.local', 'fareast.corp.microsoft.com' etc.
        """
        return pulumi.get(self, "ad_domain_fqdn")

    @ad_domain_fqdn.setter
    def ad_domain_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ad_domain_fqdn", value)

    @property
    @pulumi.getter(name="akvProperties")
    def akv_properties(self) -> Optional[pulumi.Input['KeyVaultSecretStorePropertiesArgs']]:
        return pulumi.get(self, "akv_properties")

    @akv_properties.setter
    def akv_properties(self, value: Optional[pulumi.Input['KeyVaultSecretStorePropertiesArgs']]):
        pulumi.set(self, "akv_properties", value)

    @property
    @pulumi.getter(name="domainAdminPassword")
    def domain_admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.DomainAdminUsername.
        """
        return pulumi.get(self, "domain_admin_password")

    @domain_admin_password.setter
    def domain_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_admin_password", value)

    @property
    @pulumi.getter(name="domainAdminUsername")
    def domain_admin_username(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the name of the user having admin rights on the Active Directory Domain Controller.
        """
        return pulumi.get(self, "domain_admin_username")

    @domain_admin_username.setter
    def domain_admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_admin_username", value)

    @property
    @pulumi.getter(name="domainControllerAddress")
    def domain_controller_address(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the address of the Active Directory Domain Controller running Domain Services.
        """
        return pulumi.get(self, "domain_controller_address")

    @domain_controller_address.setter
    def domain_controller_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller_address", value)

    @property
    @pulumi.getter(name="gmsaAccountName")
    def gmsa_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the name to be used for GMSA.
        """
        return pulumi.get(self, "gmsa_account_name")

    @gmsa_account_name.setter
    def gmsa_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_account_name", value)

    @property
    @pulumi.getter(name="gmsaUserPassword")
    def gmsa_user_password(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the password of the user specified by RestApi.Controllers.V2022_05_01_preview.Models.WorkloadDeployment.Gmsa.GmsaAuthenticationProperties.GmsaUsername.
        """
        return pulumi.get(self, "gmsa_user_password")

    @gmsa_user_password.setter
    def gmsa_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_user_password", value)

    @property
    @pulumi.getter(name="gmsaUsername")
    def gmsa_username(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets username of the user having authorization to access GMSA on Active Directory.
        """
        return pulumi.get(self, "gmsa_username")

    @gmsa_username.setter
    def gmsa_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_username", value)


@pulumi.input_type
class GroupPropertiesArgs:
    def __init__(__self__, *,
                 group_type: Optional[pulumi.Input[str]] = None):
        """
        Properties of group resource.
        :param pulumi.Input[str] group_type: The type of group.
        """
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of group.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)


@pulumi.input_type
class IISAKSWorkloadDeploymentModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 iis_aks_workload_deployment_properties: Optional[pulumi.Input['IISAKSWorkloadDeploymentArgs']] = None):
        """
        IIS workload instance model custom properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'IISAKSWorkloadDeploymentModelCustomProperties'.
        :param pulumi.Input['IISAKSWorkloadDeploymentArgs'] iis_aks_workload_deployment_properties: IIS AKS workload deployment.
        """
        pulumi.set(__self__, "instance_type", 'IISAKSWorkloadDeploymentModelCustomProperties')
        if iis_aks_workload_deployment_properties is not None:
            pulumi.set(__self__, "iis_aks_workload_deployment_properties", iis_aks_workload_deployment_properties)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'IISAKSWorkloadDeploymentModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="iisAksWorkloadDeploymentProperties")
    def iis_aks_workload_deployment_properties(self) -> Optional[pulumi.Input['IISAKSWorkloadDeploymentArgs']]:
        """
        IIS AKS workload deployment.
        """
        return pulumi.get(self, "iis_aks_workload_deployment_properties")

    @iis_aks_workload_deployment_properties.setter
    def iis_aks_workload_deployment_properties(self, value: Optional[pulumi.Input['IISAKSWorkloadDeploymentArgs']]):
        pulumi.set(self, "iis_aks_workload_deployment_properties", value)


@pulumi.input_type
class IISAKSWorkloadDeploymentArgs:
    def __init__(__self__, *,
                 authentication_properties: Optional[pulumi.Input['GmsaAuthenticationPropertiesArgs']] = None,
                 automation_artifact_properties: Optional[pulumi.Input['AutomationArtifactArgs']] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]] = None,
                 build_container_images: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]]] = None,
                 cluster_properties: Optional[pulumi.Input['AKSDeploymentPropertiesArgs']] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]] = None,
                 container_image_properties: Optional[pulumi.Input['ContainerImagePropertiesArgs']] = None,
                 deployment_name_prefix: Optional[pulumi.Input[str]] = None,
                 deployment_spec: Optional[pulumi.Input['AKSDeploymentSpecificationArgs']] = None,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]] = None,
                 limits: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 monitoring_properties: Optional[pulumi.Input['AppInsightMonitoringPropertiesArgs']] = None,
                 requests: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 target_platform_identity: Optional[pulumi.Input[str]] = None):
        """
        IIS AKS workload deployment.
        :param pulumi.Input['GmsaAuthenticationPropertiesArgs'] authentication_properties: Class for GMSA authentication details to configure Active Directory connectivity.
        :param pulumi.Input['AutomationArtifactArgs'] automation_artifact_properties: Class for automation artifact.
        :param pulumi.Input[Sequence[pulumi.Input['BindingArgs']]] bindings: Gets or sets the bindings for the application.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]] build_container_images: Gets or sets the build container images.
        :param pulumi.Input['AKSDeploymentPropertiesArgs'] cluster_properties: Class for AKSDeployment Properties.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]] configurations: Gets or sets application configuration.
        :param pulumi.Input['ContainerImagePropertiesArgs'] container_image_properties: Class for container image properties.
        :param pulumi.Input[str] deployment_name_prefix: Gets or sets the deployment name prefix.
        :param pulumi.Input['AKSDeploymentSpecificationArgs'] deployment_spec: AKS Deployment Specification.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]] directories: Gets or sets application directories.
        :param pulumi.Input['ResourceRequirementsArgs'] limits: Resource Requirements.
        :param pulumi.Input['AppInsightMonitoringPropertiesArgs'] monitoring_properties: Class for app insight monitoring properties.
        :param pulumi.Input['ResourceRequirementsArgs'] requests: Resource Requirements.
        :param pulumi.Input[str] target_platform_identity: Gets or sets the target platform managed identity.
        """
        if authentication_properties is not None:
            pulumi.set(__self__, "authentication_properties", authentication_properties)
        if automation_artifact_properties is not None:
            pulumi.set(__self__, "automation_artifact_properties", automation_artifact_properties)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if build_container_images is not None:
            pulumi.set(__self__, "build_container_images", build_container_images)
        if cluster_properties is not None:
            pulumi.set(__self__, "cluster_properties", cluster_properties)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if container_image_properties is not None:
            pulumi.set(__self__, "container_image_properties", container_image_properties)
        if deployment_name_prefix is not None:
            pulumi.set(__self__, "deployment_name_prefix", deployment_name_prefix)
        if deployment_spec is not None:
            pulumi.set(__self__, "deployment_spec", deployment_spec)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if monitoring_properties is not None:
            pulumi.set(__self__, "monitoring_properties", monitoring_properties)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if target_platform_identity is not None:
            pulumi.set(__self__, "target_platform_identity", target_platform_identity)

    @property
    @pulumi.getter(name="authenticationProperties")
    def authentication_properties(self) -> Optional[pulumi.Input['GmsaAuthenticationPropertiesArgs']]:
        """
        Class for GMSA authentication details to configure Active Directory connectivity.
        """
        return pulumi.get(self, "authentication_properties")

    @authentication_properties.setter
    def authentication_properties(self, value: Optional[pulumi.Input['GmsaAuthenticationPropertiesArgs']]):
        pulumi.set(self, "authentication_properties", value)

    @property
    @pulumi.getter(name="automationArtifactProperties")
    def automation_artifact_properties(self) -> Optional[pulumi.Input['AutomationArtifactArgs']]:
        """
        Class for automation artifact.
        """
        return pulumi.get(self, "automation_artifact_properties")

    @automation_artifact_properties.setter
    def automation_artifact_properties(self, value: Optional[pulumi.Input['AutomationArtifactArgs']]):
        pulumi.set(self, "automation_artifact_properties", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter(name="buildContainerImages")
    def build_container_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]]]:
        """
        Gets or sets the build container images.
        """
        return pulumi.get(self, "build_container_images")

    @build_container_images.setter
    def build_container_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerImagePropertiesArgs']]]]):
        pulumi.set(self, "build_container_images", value)

    @property
    @pulumi.getter(name="clusterProperties")
    def cluster_properties(self) -> Optional[pulumi.Input['AKSDeploymentPropertiesArgs']]:
        """
        Class for AKSDeployment Properties.
        """
        return pulumi.get(self, "cluster_properties")

    @cluster_properties.setter
    def cluster_properties(self, value: Optional[pulumi.Input['AKSDeploymentPropertiesArgs']]):
        pulumi.set(self, "cluster_properties", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter(name="containerImageProperties")
    def container_image_properties(self) -> Optional[pulumi.Input['ContainerImagePropertiesArgs']]:
        """
        Class for container image properties.
        """
        return pulumi.get(self, "container_image_properties")

    @container_image_properties.setter
    def container_image_properties(self, value: Optional[pulumi.Input['ContainerImagePropertiesArgs']]):
        pulumi.set(self, "container_image_properties", value)

    @property
    @pulumi.getter(name="deploymentNamePrefix")
    def deployment_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the deployment name prefix.
        """
        return pulumi.get(self, "deployment_name_prefix")

    @deployment_name_prefix.setter
    def deployment_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name_prefix", value)

    @property
    @pulumi.getter(name="deploymentSpec")
    def deployment_spec(self) -> Optional[pulumi.Input['AKSDeploymentSpecificationArgs']]:
        """
        AKS Deployment Specification.
        """
        return pulumi.get(self, "deployment_spec")

    @deployment_spec.setter
    def deployment_spec(self, value: Optional[pulumi.Input['AKSDeploymentSpecificationArgs']]):
        pulumi.set(self, "deployment_spec", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter(name="monitoringProperties")
    def monitoring_properties(self) -> Optional[pulumi.Input['AppInsightMonitoringPropertiesArgs']]:
        """
        Class for app insight monitoring properties.
        """
        return pulumi.get(self, "monitoring_properties")

    @monitoring_properties.setter
    def monitoring_properties(self, value: Optional[pulumi.Input['AppInsightMonitoringPropertiesArgs']]):
        pulumi.set(self, "monitoring_properties", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="targetPlatformIdentity")
    def target_platform_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target platform managed identity.
        """
        return pulumi.get(self, "target_platform_identity")

    @target_platform_identity.setter
    def target_platform_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_platform_identity", value)


@pulumi.input_type
class IISApplicationDetailsArgs:
    def __init__(__self__, *,
                 application_pool_name: Optional[pulumi.Input[str]] = None,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]]] = None,
                 enable32_bit_api_on_win64: Optional[pulumi.Input[bool]] = None,
                 managed_pipeline_mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['DirectoryPathArgs']] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None):
        """
        IISApplication details.
        :param pulumi.Input[str] application_pool_name: Gets or sets the application pool name.
        :param pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]] directories: Gets or sets the list of directories.
        :param pulumi.Input[bool] enable32_bit_api_on_win64: Gets or sets a value indicating whether 32 bit applications are allowed to run on 64 bit.
        :param pulumi.Input[str] managed_pipeline_mode: Gets or sets the managed pipeline mode.
        :param pulumi.Input['DirectoryPathArgs'] path: Second level entity for virtual directories.
        :param pulumi.Input[str] runtime_version: Gets or sets the runtime version.
        """
        if application_pool_name is not None:
            pulumi.set(__self__, "application_pool_name", application_pool_name)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if enable32_bit_api_on_win64 is not None:
            pulumi.set(__self__, "enable32_bit_api_on_win64", enable32_bit_api_on_win64)
        if managed_pipeline_mode is not None:
            pulumi.set(__self__, "managed_pipeline_mode", managed_pipeline_mode)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if runtime_version is not None:
            pulumi.set(__self__, "runtime_version", runtime_version)

    @property
    @pulumi.getter(name="applicationPoolName")
    def application_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the application pool name.
        """
        return pulumi.get(self, "application_pool_name")

    @application_pool_name.setter
    def application_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_pool_name", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]]]:
        """
        Gets or sets the list of directories.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter(name="enable32BitApiOnWin64")
    def enable32_bit_api_on_win64(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether 32 bit applications are allowed to run on 64 bit.
        """
        return pulumi.get(self, "enable32_bit_api_on_win64")

    @enable32_bit_api_on_win64.setter
    def enable32_bit_api_on_win64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable32_bit_api_on_win64", value)

    @property
    @pulumi.getter(name="managedPipelineMode")
    def managed_pipeline_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the managed pipeline mode.
        """
        return pulumi.get(self, "managed_pipeline_mode")

    @managed_pipeline_mode.setter
    def managed_pipeline_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_pipeline_mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['DirectoryPathArgs']]:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['DirectoryPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the runtime version.
        """
        return pulumi.get(self, "runtime_version")

    @runtime_version.setter
    def runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_version", value)


@pulumi.input_type
class IISVirtualApplicationDetailsArgs:
    def __init__(__self__, *,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]]] = None,
                 path: Optional[pulumi.Input['DirectoryPathArgs']] = None):
        """
        IIS virtual application details.
        :param pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]] directories: Gets or sets the list of directories.
        :param pulumi.Input['DirectoryPathArgs'] path: Second level entity for virtual directories.
        """
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]]]:
        """
        Gets or sets the list of directories.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DirectoryPathArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['DirectoryPathArgs']]:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['DirectoryPathArgs']]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class IISWebApplicationArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_scratch_path: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['IISApplicationDetailsArgs']]]] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]] = None,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]] = None,
                 discovered_frameworks: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 iis_web_server: Optional[pulumi.Input['IISWebServerArgs']] = None,
                 limits: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 path: Optional[pulumi.Input['DirectoryPathArgs']] = None,
                 primary_framework: Optional[pulumi.Input['WebApplicationFrameworkArgs']] = None,
                 requests: Optional[pulumi.Input['ResourceRequirementsArgs']] = None,
                 virtual_applications: Optional[pulumi.Input[Sequence[pulumi.Input['IISVirtualApplicationDetailsArgs']]]] = None,
                 web_server_id: Optional[pulumi.Input[str]] = None,
                 web_server_name: Optional[pulumi.Input[str]] = None):
        """
        IISWeb application.
        :param pulumi.Input[str] application_id: Gets or sets the web application id.
        :param pulumi.Input[str] application_name: Gets or sets the web application name.
        :param pulumi.Input[str] application_scratch_path: Gets or sets application scratch path.
        :param pulumi.Input[Sequence[pulumi.Input['IISApplicationDetailsArgs']]] applications: Gets or sets the list of applications for the IIS web site.
        :param pulumi.Input[Sequence[pulumi.Input['BindingArgs']]] bindings: Gets or sets the bindings for the application.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]] configurations: Gets or sets application configuration.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]] directories: Gets or sets application directories.
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]] discovered_frameworks: Gets or sets the discovered frameworks of application.
        :param pulumi.Input[str] display_name: Gets or sets the display name.
        :param pulumi.Input['IISWebServerArgs'] iis_web_server: IISWeb server.
        :param pulumi.Input['ResourceRequirementsArgs'] limits: Resource Requirements.
        :param pulumi.Input['DirectoryPathArgs'] path: Second level entity for virtual directories.
        :param pulumi.Input['WebApplicationFrameworkArgs'] primary_framework: Framework specific data for a web application.
        :param pulumi.Input['ResourceRequirementsArgs'] requests: Resource Requirements.
        :param pulumi.Input[Sequence[pulumi.Input['IISVirtualApplicationDetailsArgs']]] virtual_applications: Gets or sets the list of application units for the web site.
        :param pulumi.Input[str] web_server_id: Gets or sets the web server id.
        :param pulumi.Input[str] web_server_name: Gets or sets the web server name.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_scratch_path is not None:
            pulumi.set(__self__, "application_scratch_path", application_scratch_path)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if discovered_frameworks is not None:
            pulumi.set(__self__, "discovered_frameworks", discovered_frameworks)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if iis_web_server is not None:
            pulumi.set(__self__, "iis_web_server", iis_web_server)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if primary_framework is not None:
            pulumi.set(__self__, "primary_framework", primary_framework)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if virtual_applications is not None:
            pulumi.set(__self__, "virtual_applications", virtual_applications)
        if web_server_id is not None:
            pulumi.set(__self__, "web_server_id", web_server_id)
        if web_server_name is not None:
            pulumi.set(__self__, "web_server_name", web_server_name)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web application id.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationScratchPath")
    def application_scratch_path(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets application scratch path.
        """
        return pulumi.get(self, "application_scratch_path")

    @application_scratch_path.setter
    def application_scratch_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_scratch_path", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IISApplicationDetailsArgs']]]]:
        """
        Gets or sets the list of applications for the IIS web site.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IISApplicationDetailsArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]:
        """
        Gets or sets the bindings for the application.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]:
        """
        Gets or sets application configuration.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]:
        """
        Gets or sets application directories.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationDirectoryArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter(name="discoveredFrameworks")
    def discovered_frameworks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]]]:
        """
        Gets or sets the discovered frameworks of application.
        """
        return pulumi.get(self, "discovered_frameworks")

    @discovered_frameworks.setter
    def discovered_frameworks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationFrameworkArgs']]]]):
        pulumi.set(self, "discovered_frameworks", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="iisWebServer")
    def iis_web_server(self) -> Optional[pulumi.Input['IISWebServerArgs']]:
        """
        IISWeb server.
        """
        return pulumi.get(self, "iis_web_server")

    @iis_web_server.setter
    def iis_web_server(self, value: Optional[pulumi.Input['IISWebServerArgs']]):
        pulumi.set(self, "iis_web_server", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['DirectoryPathArgs']]:
        """
        Second level entity for virtual directories.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['DirectoryPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="primaryFramework")
    def primary_framework(self) -> Optional[pulumi.Input['WebApplicationFrameworkArgs']]:
        """
        Framework specific data for a web application.
        """
        return pulumi.get(self, "primary_framework")

    @primary_framework.setter
    def primary_framework(self, value: Optional[pulumi.Input['WebApplicationFrameworkArgs']]):
        pulumi.set(self, "primary_framework", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['ResourceRequirementsArgs']]:
        """
        Resource Requirements.
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['ResourceRequirementsArgs']]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="virtualApplications")
    def virtual_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IISVirtualApplicationDetailsArgs']]]]:
        """
        Gets or sets the list of application units for the web site.
        """
        return pulumi.get(self, "virtual_applications")

    @virtual_applications.setter
    def virtual_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IISVirtualApplicationDetailsArgs']]]]):
        pulumi.set(self, "virtual_applications", value)

    @property
    @pulumi.getter(name="webServerId")
    def web_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web server id.
        """
        return pulumi.get(self, "web_server_id")

    @web_server_id.setter
    def web_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_server_id", value)

    @property
    @pulumi.getter(name="webServerName")
    def web_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web server name.
        """
        return pulumi.get(self, "web_server_name")

    @web_server_name.setter
    def web_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_server_name", value)


@pulumi.input_type
class IISWebServerArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 machines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operating_system_details: Optional[pulumi.Input['OperatingSystemDetailsArgs']] = None,
                 root_configuration_location: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 server_fqdn: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 web_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        IISWeb server.
        :param pulumi.Input[str] display_name: Gets or sets the display name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: Gets or sets list of ip addresses.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] machines: Gets or sets the list of machines.
        :param pulumi.Input[str] root_configuration_location: Gets or sets the server root configuration location.
        :param pulumi.Input[str] run_as_account_id: Gets or sets the run as account id.
        :param pulumi.Input[str] server_fqdn: Gets or sets the server FQDN.
        :param pulumi.Input[str] server_id: Gets or sets the web server id.
        :param pulumi.Input[str] server_name: Gets or sets the web server name.
        :param pulumi.Input[str] version: Gets or sets the server version.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_applications: Gets or sets the list of web applications.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if operating_system_details is not None:
            pulumi.set(__self__, "operating_system_details", operating_system_details)
        if root_configuration_location is not None:
            pulumi.set(__self__, "root_configuration_location", root_configuration_location)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if server_fqdn is not None:
            pulumi.set(__self__, "server_fqdn", server_fqdn)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if web_applications is not None:
            pulumi.set(__self__, "web_applications", web_applications)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets list of ip addresses.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter
    def machines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets the list of machines.
        """
        return pulumi.get(self, "machines")

    @machines.setter
    def machines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "machines", value)

    @property
    @pulumi.getter(name="operatingSystemDetails")
    def operating_system_details(self) -> Optional[pulumi.Input['OperatingSystemDetailsArgs']]:
        return pulumi.get(self, "operating_system_details")

    @operating_system_details.setter
    def operating_system_details(self, value: Optional[pulumi.Input['OperatingSystemDetailsArgs']]):
        pulumi.set(self, "operating_system_details", value)

    @property
    @pulumi.getter(name="rootConfigurationLocation")
    def root_configuration_location(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the server root configuration location.
        """
        return pulumi.get(self, "root_configuration_location")

    @root_configuration_location.setter
    def root_configuration_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_configuration_location", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the run as account id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="serverFqdn")
    def server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the server FQDN.
        """
        return pulumi.get(self, "server_fqdn")

    @server_fqdn.setter
    def server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_fqdn", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web server id.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the web server name.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the server version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="webApplications")
    def web_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets the list of web applications.
        """
        return pulumi.get(self, "web_applications")

    @web_applications.setter
    def web_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "web_applications", value)


@pulumi.input_type
class IISWorkloadInstanceModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 fileshare_name: Optional[pulumi.Input[str]] = None,
                 iis_web_application: Optional[pulumi.Input['IISWebApplicationArgs']] = None,
                 web_app_arm_id: Optional[pulumi.Input[str]] = None,
                 web_app_site_name: Optional[pulumi.Input[str]] = None):
        """
        IIS workload instance model custom properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'IISWorkloadInstanceModelCustomProperties'.
        :param pulumi.Input[str] container_name: Gets or sets the container Id.
        :param pulumi.Input[str] fileshare_name: Gets or sets the fileshare name.
        :param pulumi.Input['IISWebApplicationArgs'] iis_web_application: IISWeb application.
        :param pulumi.Input[str] web_app_arm_id: Gets or sets the Web application ARM id.
        :param pulumi.Input[str] web_app_site_name: Gets or sets the Web application site name.
        """
        pulumi.set(__self__, "instance_type", 'IISWorkloadInstanceModelCustomProperties')
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if fileshare_name is not None:
            pulumi.set(__self__, "fileshare_name", fileshare_name)
        if iis_web_application is not None:
            pulumi.set(__self__, "iis_web_application", iis_web_application)
        if web_app_arm_id is not None:
            pulumi.set(__self__, "web_app_arm_id", web_app_arm_id)
        if web_app_site_name is not None:
            pulumi.set(__self__, "web_app_site_name", web_app_site_name)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'IISWorkloadInstanceModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the container Id.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="fileshareName")
    def fileshare_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the fileshare name.
        """
        return pulumi.get(self, "fileshare_name")

    @fileshare_name.setter
    def fileshare_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fileshare_name", value)

    @property
    @pulumi.getter(name="iisWebApplication")
    def iis_web_application(self) -> Optional[pulumi.Input['IISWebApplicationArgs']]:
        """
        IISWeb application.
        """
        return pulumi.get(self, "iis_web_application")

    @iis_web_application.setter
    def iis_web_application(self, value: Optional[pulumi.Input['IISWebApplicationArgs']]):
        pulumi.set(self, "iis_web_application", value)

    @property
    @pulumi.getter(name="webAppArmId")
    def web_app_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Web application ARM id.
        """
        return pulumi.get(self, "web_app_arm_id")

    @web_app_arm_id.setter
    def web_app_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_arm_id", value)

    @property
    @pulumi.getter(name="webAppSiteName")
    def web_app_site_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Web application site name.
        """
        return pulumi.get(self, "web_app_site_name")

    @web_app_site_name.setter
    def web_app_site_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_site_name", value)


@pulumi.input_type
class IdentityModelArgs:
    def __init__(__self__, *,
                 aad_authority: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Identity model.
        :param pulumi.Input[str] aad_authority: Gets or sets the authority of the SPN with which MigrateAgent communicates to service.
        :param pulumi.Input[str] application_id: Gets or sets the client/application Id of the SPN with which MigrateAgent communicates to
               service.
        :param pulumi.Input[str] audience: Gets or sets the audience of the SPN with which MigrateAgent communicates to service.
        :param pulumi.Input[str] object_id: Gets or sets the object Id of the SPN with which MigrateAgent communicates to service.
        :param pulumi.Input[str] tenant_id: Gets or sets the tenant Id of the SPN with which MigrateAgent communicates to service.
        """
        if aad_authority is not None:
            pulumi.set(__self__, "aad_authority", aad_authority)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the authority of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "aad_authority")

    @aad_authority.setter
    def aad_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_authority", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the client/application Id of the SPN with which MigrateAgent communicates to
        service.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the audience of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the object Id of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the tenant Id of the SPN with which MigrateAgent communicates to service.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class IdentityArgs:
    def __init__(__self__, *,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ResourceIdentityType']]] = None):
        """
        Defines the MSI properties of the Move Collection.
        :param pulumi.Input[str] principal_id: Gets or sets the principal id.
        :param pulumi.Input[str] tenant_id: Gets or sets the tenant id.
        :param pulumi.Input[Union[str, 'ResourceIdentityType']] type: The type of identity used for the resource mover service.
        """
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the principal id.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ResourceIdentityType']]]:
        """
        The type of identity used for the resource mover service.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ResourceIdentityType']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ImportCollectorPropertiesArgs:
    def __init__(__self__, *,
                 discovery_site_id: Optional[pulumi.Input[str]] = None):
        if discovery_site_id is not None:
            pulumi.set(__self__, "discovery_site_id", discovery_site_id)

    @property
    @pulumi.getter(name="discoverySiteId")
    def discovery_site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_site_id")

    @discovery_site_id.setter
    def discovery_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_site_id", value)


@pulumi.input_type
class KeyVaultResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the key vault resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.KeyVault/vaults'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.KeyVault/vaults')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.KeyVault/vaults'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class KeyVaultSecretStorePropertiesArgs:
    def __init__(__self__, *,
                 keyvault_name: Optional[pulumi.Input[str]] = None,
                 managed_identity_properties: Optional[pulumi.Input['ManagedIdentityPropertiesArgs']] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        if keyvault_name is not None:
            pulumi.set(__self__, "keyvault_name", keyvault_name)
        if managed_identity_properties is not None:
            pulumi.set(__self__, "managed_identity_properties", managed_identity_properties)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="keyvaultName")
    def keyvault_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyvault_name")

    @keyvault_name.setter
    def keyvault_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyvault_name", value)

    @property
    @pulumi.getter(name="managedIdentityProperties")
    def managed_identity_properties(self) -> Optional[pulumi.Input['ManagedIdentityPropertiesArgs']]:
        return pulumi.get(self, "managed_identity_properties")

    @managed_identity_properties.setter
    def managed_identity_properties(self, value: Optional[pulumi.Input['ManagedIdentityPropertiesArgs']]):
        pulumi.set(self, "managed_identity_properties", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class LBBackendAddressPoolResourceSettingsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Defines load balancer backend address pool properties.
        :param pulumi.Input[str] name: Gets or sets the backend address pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the backend address pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LBFrontendIPConfigurationResourceSettingsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip_address: Optional[pulumi.Input[str]] = None,
                 private_ip_allocation_method: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input['SubnetReferenceArgs']] = None,
                 zones: Optional[pulumi.Input[str]] = None):
        """
        Defines load balancer frontend IP configuration properties.
        :param pulumi.Input[str] name: Gets or sets the frontend IP configuration name.
        :param pulumi.Input[str] private_ip_address: Gets or sets the IP address of the Load Balancer.This is only specified if a specific
               private IP address shall be allocated from the subnet specified in subnetRef.
        :param pulumi.Input[str] private_ip_allocation_method: Gets or sets PrivateIP allocation method (Static/Dynamic).
        :param pulumi.Input['SubnetReferenceArgs'] subnet: Defines reference to subnet.
        :param pulumi.Input[str] zones: Gets or sets the csv list of zones.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_allocation_method is not None:
            pulumi.set(__self__, "private_ip_allocation_method", private_ip_allocation_method)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the frontend IP configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the IP address of the Load Balancer.This is only specified if a specific
        private IP address shall be allocated from the subnet specified in subnetRef.
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_address", value)

    @property
    @pulumi.getter(name="privateIpAllocationMethod")
    def private_ip_allocation_method(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets PrivateIP allocation method (Static/Dynamic).
        """
        return pulumi.get(self, "private_ip_allocation_method")

    @private_ip_allocation_method.setter
    def private_ip_allocation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_allocation_method", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input['SubnetReferenceArgs']]:
        """
        Defines reference to subnet.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input['SubnetReferenceArgs']]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the csv list of zones.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class LoadBalancerBackendAddressPoolReferenceArgs:
    def __init__(__self__, *,
                 source_arm_resource_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        Defines reference to load balancer backend address pools.
        :param pulumi.Input[str] source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        :param pulumi.Input[str] name: Gets the name of the proxy resource on the target side.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> pulumi.Input[str]:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @source_arm_resource_id.setter
    def source_arm_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_arm_resource_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the name of the proxy resource on the target side.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LoadBalancerNatRuleReferenceArgs:
    def __init__(__self__, *,
                 source_arm_resource_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        Defines reference to load balancer NAT rules.
        :param pulumi.Input[str] source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        :param pulumi.Input[str] name: Gets the name of the proxy resource on the target side.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> pulumi.Input[str]:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @source_arm_resource_id.setter
    def source_arm_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_arm_resource_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the name of the proxy resource on the target side.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LoadBalancerResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 backend_address_pools: Optional[pulumi.Input[Sequence[pulumi.Input['LBBackendAddressPoolResourceSettingsArgs']]]] = None,
                 frontend_ip_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['LBFrontendIPConfigurationResourceSettingsArgs']]]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[str]] = None):
        """
        Defines the load balancer resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/loadBalancers'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[Sequence[pulumi.Input['LBBackendAddressPoolResourceSettingsArgs']]] backend_address_pools: Gets or sets the backend address pools of the load balancer.
        :param pulumi.Input[Sequence[pulumi.Input['LBFrontendIPConfigurationResourceSettingsArgs']]] frontend_ip_configurations: Gets or sets the frontend IP configurations of the load balancer.
        :param pulumi.Input[str] sku: Gets or sets load balancer sku (Basic/Standard).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        :param pulumi.Input[str] zones: Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
                precedence only if frontend IP configurations settings are not present.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/loadBalancers')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if backend_address_pools is not None:
            pulumi.set(__self__, "backend_address_pools", backend_address_pools)
        if frontend_ip_configurations is not None:
            pulumi.set(__self__, "frontend_ip_configurations", frontend_ip_configurations)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/loadBalancers'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="backendAddressPools")
    def backend_address_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LBBackendAddressPoolResourceSettingsArgs']]]]:
        """
        Gets or sets the backend address pools of the load balancer.
        """
        return pulumi.get(self, "backend_address_pools")

    @backend_address_pools.setter
    def backend_address_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LBBackendAddressPoolResourceSettingsArgs']]]]):
        pulumi.set(self, "backend_address_pools", value)

    @property
    @pulumi.getter(name="frontendIPConfigurations")
    def frontend_ip_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LBFrontendIPConfigurationResourceSettingsArgs']]]]:
        """
        Gets or sets the frontend IP configurations of the load balancer.
        """
        return pulumi.get(self, "frontend_ip_configurations")

    @frontend_ip_configurations.setter
    def frontend_ip_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LBFrontendIPConfigurationResourceSettingsArgs']]]]):
        pulumi.set(self, "frontend_ip_configurations", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets load balancer sku (Basic/Standard).
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
         precedence only if frontend IP configurations settings are not present.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class ManagedIdentityPropertiesArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 managed_identity_name: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if managed_identity_name is not None:
            pulumi.set(__self__, "managed_identity_name", managed_identity_name)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="managedIdentityName")
    def managed_identity_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "managed_identity_name")

    @managed_identity_name.setter
    def managed_identity_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_identity_name", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class MigrateAgentModelPropertiesArgs:
    def __init__(__self__, *,
                 authentication_identity: Optional[pulumi.Input['IdentityModelArgs']] = None,
                 custom_properties: Optional[pulumi.Input['VMwareMigrateAgentModelCustomPropertiesArgs']] = None,
                 machine_id: Optional[pulumi.Input[str]] = None,
                 machine_name: Optional[pulumi.Input[str]] = None):
        """
        MigrateAgent model properties.
        :param pulumi.Input['IdentityModelArgs'] authentication_identity: Identity model.
        :param pulumi.Input['VMwareMigrateAgentModelCustomPropertiesArgs'] custom_properties: MigrateAgent model custom properties.
        :param pulumi.Input[str] machine_id: Gets or sets the machine Id where MigrateAgent is running.
        :param pulumi.Input[str] machine_name: Gets or sets the machine name where MigrateAgent is running.
        """
        if authentication_identity is not None:
            pulumi.set(__self__, "authentication_identity", authentication_identity)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if machine_id is not None:
            pulumi.set(__self__, "machine_id", machine_id)
        if machine_name is not None:
            pulumi.set(__self__, "machine_name", machine_name)

    @property
    @pulumi.getter(name="authenticationIdentity")
    def authentication_identity(self) -> Optional[pulumi.Input['IdentityModelArgs']]:
        """
        Identity model.
        """
        return pulumi.get(self, "authentication_identity")

    @authentication_identity.setter
    def authentication_identity(self, value: Optional[pulumi.Input['IdentityModelArgs']]):
        pulumi.set(self, "authentication_identity", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input['VMwareMigrateAgentModelCustomPropertiesArgs']]:
        """
        MigrateAgent model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input['VMwareMigrateAgentModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the machine Id where MigrateAgent is running.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the machine name where MigrateAgent is running.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_name", value)


@pulumi.input_type
class MigrateProjectPropertiesArgs:
    def __init__(__self__, *,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 public_network_access: Optional[pulumi.Input[str]] = None,
                 registered_tools: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_endpoint: Optional[pulumi.Input[str]] = None,
                 utility_storage_account_id: Optional[pulumi.Input[str]] = None):
        """
        Properties of a migrate project.
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: Provisioning state of the migrate project.
        :param pulumi.Input[str] public_network_access: Gets or sets the state of public network access.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] registered_tools: Gets or sets the list of tools registered with the migrate project.
        :param pulumi.Input[str] service_endpoint: Service endpoint.
        :param pulumi.Input[str] utility_storage_account_id: Utility storage account id.
        """
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if registered_tools is not None:
            pulumi.set(__self__, "registered_tools", registered_tools)
        if service_endpoint is not None:
            pulumi.set(__self__, "service_endpoint", service_endpoint)
        if utility_storage_account_id is not None:
            pulumi.set(__self__, "utility_storage_account_id", utility_storage_account_id)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningState']]]:
        """
        Provisioning state of the migrate project.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the state of public network access.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="registeredTools")
    def registered_tools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets the list of tools registered with the migrate project.
        """
        return pulumi.get(self, "registered_tools")

    @registered_tools.setter
    def registered_tools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "registered_tools", value)

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Service endpoint.
        """
        return pulumi.get(self, "service_endpoint")

    @service_endpoint.setter
    def service_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_endpoint", value)

    @property
    @pulumi.getter(name="utilityStorageAccountId")
    def utility_storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Utility storage account id.
        """
        return pulumi.get(self, "utility_storage_account_id")

    @utility_storage_account_id.setter
    def utility_storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utility_storage_account_id", value)


@pulumi.input_type
class MigrateProjectTagsArgs:
    def __init__(__self__, *,
                 additional_properties: Optional[pulumi.Input[str]] = None):
        """
        Gets or sets the tags.
        """
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class MigrationConfigurationArgs:
    def __init__(__self__, *,
                 key_vault_resource_id: Optional[pulumi.Input[str]] = None,
                 migration_solution_resource_id: Optional[pulumi.Input[str]] = None,
                 storage_account_resource_id: Optional[pulumi.Input[str]] = None):
        """
        MigrationConfiguration properties.
        :param pulumi.Input[str] key_vault_resource_id: Gets or sets the key vault resource Id.
        :param pulumi.Input[str] migration_solution_resource_id: Gets or sets the migration solution resource Id.
        :param pulumi.Input[str] storage_account_resource_id: Gets or sets the storage account resource Id.
        """
        if key_vault_resource_id is not None:
            pulumi.set(__self__, "key_vault_resource_id", key_vault_resource_id)
        if migration_solution_resource_id is not None:
            pulumi.set(__self__, "migration_solution_resource_id", migration_solution_resource_id)
        if storage_account_resource_id is not None:
            pulumi.set(__self__, "storage_account_resource_id", storage_account_resource_id)

    @property
    @pulumi.getter(name="keyVaultResourceId")
    def key_vault_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the key vault resource Id.
        """
        return pulumi.get(self, "key_vault_resource_id")

    @key_vault_resource_id.setter
    def key_vault_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_resource_id", value)

    @property
    @pulumi.getter(name="migrationSolutionResourceId")
    def migration_solution_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the migration solution resource Id.
        """
        return pulumi.get(self, "migration_solution_resource_id")

    @migration_solution_resource_id.setter
    def migration_solution_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_solution_resource_id", value)

    @property
    @pulumi.getter(name="storageAccountResourceId")
    def storage_account_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the storage account resource Id.
        """
        return pulumi.get(self, "storage_account_resource_id")

    @storage_account_resource_id.setter
    def storage_account_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_resource_id", value)


@pulumi.input_type
class ModernizeProjectModelPropertiesArgs:
    def __init__(__self__, *,
                 migration_configuration: Optional[pulumi.Input['MigrationConfigurationArgs']] = None):
        """
        ModernizeProject properties.
        :param pulumi.Input['MigrationConfigurationArgs'] migration_configuration: MigrationConfiguration properties.
        """
        if migration_configuration is not None:
            pulumi.set(__self__, "migration_configuration", migration_configuration)

    @property
    @pulumi.getter(name="migrationConfiguration")
    def migration_configuration(self) -> Optional[pulumi.Input['MigrationConfigurationArgs']]:
        """
        MigrationConfiguration properties.
        """
        return pulumi.get(self, "migration_configuration")

    @migration_configuration.setter
    def migration_configuration(self, value: Optional[pulumi.Input['MigrationConfigurationArgs']]):
        pulumi.set(self, "migration_configuration", value)


@pulumi.input_type
class MoveCollectionPropertiesArgs:
    def __init__(__self__, *,
                 source_region: pulumi.Input[str],
                 target_region: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None):
        """
        Defines the move collection properties.
        :param pulumi.Input[str] source_region: Gets or sets the source region.
        :param pulumi.Input[str] target_region: Gets or sets the target region.
        :param pulumi.Input[str] version: Gets or sets the version of move collection.
        """
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "target_region", target_region)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> pulumi.Input[str]:
        """
        Gets or sets the source region.
        """
        return pulumi.get(self, "source_region")

    @source_region.setter
    def source_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_region", value)

    @property
    @pulumi.getter(name="targetRegion")
    def target_region(self) -> pulumi.Input[str]:
        """
        Gets or sets the target region.
        """
        return pulumi.get(self, "target_region")

    @target_region.setter
    def target_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_region", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the version of move collection.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MoveResourceDependencyOverrideArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None):
        """
        Defines the dependency override of the move resource.
        :param pulumi.Input[str] id: Gets or sets the ARM ID of the dependent resource.
        :param pulumi.Input[str] target_id: Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of
               the dependent resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the ARM ID of the dependent resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of
        the dependent resource.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)


@pulumi.input_type
class MoveResourcePropertiesArgs:
    def __init__(__self__, *,
                 source_id: pulumi.Input[str],
                 depends_on_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['MoveResourceDependencyOverrideArgs']]]] = None,
                 existing_target_id: Optional[pulumi.Input[str]] = None,
                 resource_settings: Optional[pulumi.Input[Union['AvailabilitySetResourceSettingsArgs', 'DiskEncryptionSetResourceSettingsArgs', 'KeyVaultResourceSettingsArgs', 'LoadBalancerResourceSettingsArgs', 'NetworkInterfaceResourceSettingsArgs', 'NetworkSecurityGroupResourceSettingsArgs', 'PublicIPAddressResourceSettingsArgs', 'ResourceGroupResourceSettingsArgs', 'SqlDatabaseResourceSettingsArgs', 'SqlElasticPoolResourceSettingsArgs', 'SqlServerResourceSettingsArgs', 'VirtualMachineResourceSettingsArgs', 'VirtualNetworkResourceSettingsArgs']]] = None):
        """
        Defines the move resource properties.
        :param pulumi.Input[str] source_id: Gets or sets the Source ARM Id of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['MoveResourceDependencyOverrideArgs']]] depends_on_overrides: Gets or sets the move resource dependencies overrides.
        :param pulumi.Input[str] existing_target_id: Gets or sets the existing target ARM Id of the resource.
        :param pulumi.Input[Union['AvailabilitySetResourceSettingsArgs', 'DiskEncryptionSetResourceSettingsArgs', 'KeyVaultResourceSettingsArgs', 'LoadBalancerResourceSettingsArgs', 'NetworkInterfaceResourceSettingsArgs', 'NetworkSecurityGroupResourceSettingsArgs', 'PublicIPAddressResourceSettingsArgs', 'ResourceGroupResourceSettingsArgs', 'SqlDatabaseResourceSettingsArgs', 'SqlElasticPoolResourceSettingsArgs', 'SqlServerResourceSettingsArgs', 'VirtualMachineResourceSettingsArgs', 'VirtualNetworkResourceSettingsArgs']] resource_settings: Gets or sets the resource settings.
        """
        pulumi.set(__self__, "source_id", source_id)
        if depends_on_overrides is not None:
            pulumi.set(__self__, "depends_on_overrides", depends_on_overrides)
        if existing_target_id is not None:
            pulumi.set(__self__, "existing_target_id", existing_target_id)
        if resource_settings is not None:
            pulumi.set(__self__, "resource_settings", resource_settings)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Source ARM Id of the resource.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="dependsOnOverrides")
    def depends_on_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MoveResourceDependencyOverrideArgs']]]]:
        """
        Gets or sets the move resource dependencies overrides.
        """
        return pulumi.get(self, "depends_on_overrides")

    @depends_on_overrides.setter
    def depends_on_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MoveResourceDependencyOverrideArgs']]]]):
        pulumi.set(self, "depends_on_overrides", value)

    @property
    @pulumi.getter(name="existingTargetId")
    def existing_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the existing target ARM Id of the resource.
        """
        return pulumi.get(self, "existing_target_id")

    @existing_target_id.setter
    def existing_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_target_id", value)

    @property
    @pulumi.getter(name="resourceSettings")
    def resource_settings(self) -> Optional[pulumi.Input[Union['AvailabilitySetResourceSettingsArgs', 'DiskEncryptionSetResourceSettingsArgs', 'KeyVaultResourceSettingsArgs', 'LoadBalancerResourceSettingsArgs', 'NetworkInterfaceResourceSettingsArgs', 'NetworkSecurityGroupResourceSettingsArgs', 'PublicIPAddressResourceSettingsArgs', 'ResourceGroupResourceSettingsArgs', 'SqlDatabaseResourceSettingsArgs', 'SqlElasticPoolResourceSettingsArgs', 'SqlServerResourceSettingsArgs', 'VirtualMachineResourceSettingsArgs', 'VirtualNetworkResourceSettingsArgs']]]:
        """
        Gets or sets the resource settings.
        """
        return pulumi.get(self, "resource_settings")

    @resource_settings.setter
    def resource_settings(self, value: Optional[pulumi.Input[Union['AvailabilitySetResourceSettingsArgs', 'DiskEncryptionSetResourceSettingsArgs', 'KeyVaultResourceSettingsArgs', 'LoadBalancerResourceSettingsArgs', 'NetworkInterfaceResourceSettingsArgs', 'NetworkSecurityGroupResourceSettingsArgs', 'PublicIPAddressResourceSettingsArgs', 'ResourceGroupResourceSettingsArgs', 'SqlDatabaseResourceSettingsArgs', 'SqlElasticPoolResourceSettingsArgs', 'SqlServerResourceSettingsArgs', 'VirtualMachineResourceSettingsArgs', 'VirtualNetworkResourceSettingsArgs']]]):
        pulumi.set(self, "resource_settings", value)


@pulumi.input_type
class NetworkInterfaceResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 enable_accelerated_networking: Optional[pulumi.Input[bool]] = None,
                 ip_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['NicIpConfigurationResourceSettingsArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the network interface resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/networkInterfaces'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[bool] enable_accelerated_networking: Gets or sets a value indicating whether accelerated networking is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['NicIpConfigurationResourceSettingsArgs']]] ip_configurations: Gets or sets the IP configurations of the NIC.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/networkInterfaces')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if enable_accelerated_networking is not None:
            pulumi.set(__self__, "enable_accelerated_networking", enable_accelerated_networking)
        if ip_configurations is not None:
            pulumi.set(__self__, "ip_configurations", ip_configurations)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/networkInterfaces'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="enableAcceleratedNetworking")
    def enable_accelerated_networking(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether accelerated networking is enabled.
        """
        return pulumi.get(self, "enable_accelerated_networking")

    @enable_accelerated_networking.setter
    def enable_accelerated_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_accelerated_networking", value)

    @property
    @pulumi.getter(name="ipConfigurations")
    def ip_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NicIpConfigurationResourceSettingsArgs']]]]:
        """
        Gets or sets the IP configurations of the NIC.
        """
        return pulumi.get(self, "ip_configurations")

    @ip_configurations.setter
    def ip_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NicIpConfigurationResourceSettingsArgs']]]]):
        pulumi.set(self, "ip_configurations", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class NetworkSecurityGroupResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 security_rules: Optional[pulumi.Input[Sequence[pulumi.Input['NsgSecurityRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the NSG resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/networkSecurityGroups'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[Sequence[pulumi.Input['NsgSecurityRuleArgs']]] security_rules: Gets or sets Security rules of network security group.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/networkSecurityGroups')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if security_rules is not None:
            pulumi.set(__self__, "security_rules", security_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/networkSecurityGroups'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="securityRules")
    def security_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsgSecurityRuleArgs']]]]:
        """
        Gets or sets Security rules of network security group.
        """
        return pulumi.get(self, "security_rules")

    @security_rules.setter
    def security_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsgSecurityRuleArgs']]]]):
        pulumi.set(self, "security_rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class NicIpConfigurationResourceSettingsArgs:
    def __init__(__self__, *,
                 load_balancer_backend_address_pools: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendAddressPoolReferenceArgs']]]] = None,
                 load_balancer_nat_rules: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerNatRuleReferenceArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 private_ip_address: Optional[pulumi.Input[str]] = None,
                 private_ip_allocation_method: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input['PublicIpReferenceArgs']] = None,
                 subnet: Optional[pulumi.Input['SubnetReferenceArgs']] = None):
        """
        Defines NIC IP configuration properties.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendAddressPoolReferenceArgs']]] load_balancer_backend_address_pools: Gets or sets the references of the load balancer backend address pools.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerNatRuleReferenceArgs']]] load_balancer_nat_rules: Gets or sets the references of the load balancer NAT rules.
        :param pulumi.Input[str] name: Gets or sets the IP configuration name.
        :param pulumi.Input[bool] primary: Gets or sets a value indicating whether this IP configuration is the primary.
        :param pulumi.Input[str] private_ip_address: Gets or sets the private IP address of the network interface IP Configuration.
        :param pulumi.Input[str] private_ip_allocation_method: Gets or sets the private IP address allocation method.
        :param pulumi.Input['PublicIpReferenceArgs'] public_ip: Defines reference to a public IP.
        :param pulumi.Input['SubnetReferenceArgs'] subnet: Defines reference to subnet.
        """
        if load_balancer_backend_address_pools is not None:
            pulumi.set(__self__, "load_balancer_backend_address_pools", load_balancer_backend_address_pools)
        if load_balancer_nat_rules is not None:
            pulumi.set(__self__, "load_balancer_nat_rules", load_balancer_nat_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_allocation_method is not None:
            pulumi.set(__self__, "private_ip_allocation_method", private_ip_allocation_method)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="loadBalancerBackendAddressPools")
    def load_balancer_backend_address_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendAddressPoolReferenceArgs']]]]:
        """
        Gets or sets the references of the load balancer backend address pools.
        """
        return pulumi.get(self, "load_balancer_backend_address_pools")

    @load_balancer_backend_address_pools.setter
    def load_balancer_backend_address_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendAddressPoolReferenceArgs']]]]):
        pulumi.set(self, "load_balancer_backend_address_pools", value)

    @property
    @pulumi.getter(name="loadBalancerNatRules")
    def load_balancer_nat_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerNatRuleReferenceArgs']]]]:
        """
        Gets or sets the references of the load balancer NAT rules.
        """
        return pulumi.get(self, "load_balancer_nat_rules")

    @load_balancer_nat_rules.setter
    def load_balancer_nat_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerNatRuleReferenceArgs']]]]):
        pulumi.set(self, "load_balancer_nat_rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the IP configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether this IP configuration is the primary.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the private IP address of the network interface IP Configuration.
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_address", value)

    @property
    @pulumi.getter(name="privateIpAllocationMethod")
    def private_ip_allocation_method(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the private IP address allocation method.
        """
        return pulumi.get(self, "private_ip_allocation_method")

    @private_ip_allocation_method.setter
    def private_ip_allocation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_allocation_method", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input['PublicIpReferenceArgs']]:
        """
        Defines reference to a public IP.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input['PublicIpReferenceArgs']]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input['SubnetReferenceArgs']]:
        """
        Defines reference to subnet.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input['SubnetReferenceArgs']]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class NsgReferenceArgs:
    def __init__(__self__, *,
                 source_arm_resource_id: pulumi.Input[str]):
        """
        Defines reference to NSG.
        :param pulumi.Input[str] source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> pulumi.Input[str]:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @source_arm_resource_id.setter
    def source_arm_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_arm_resource_id", value)


@pulumi.input_type
class NsgSecurityRuleArgs:
    def __init__(__self__, *,
                 access: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_address_prefix: Optional[pulumi.Input[str]] = None,
                 destination_port_range: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_address_prefix: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None):
        """
        Security Rule data model for Network Security Groups.
        :param pulumi.Input[str] access: Gets or sets whether network traffic is allowed or denied.
               Possible values are “Allow” and “Deny”.
        :param pulumi.Input[str] description: Gets or sets a description for this rule. Restricted to 140 chars.
        :param pulumi.Input[str] destination_address_prefix: Gets or sets destination address prefix. CIDR or source IP range.
                A “*” can also be used to match all source IPs. Default tags such
               as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
        :param pulumi.Input[str] destination_port_range: Gets or sets Destination Port or Range. Integer or range between
               0 and 65535. A “*” can also be used to match all ports.
        :param pulumi.Input[str] direction: Gets or sets the direction of the rule.InBound or Outbound. The
               direction specifies if rule will be evaluated on incoming or outgoing traffic.
        :param pulumi.Input[str] name: Gets or sets the Security rule name.
        :param pulumi.Input[int] priority: Gets or sets the priority of the rule. The value can be between
               100 and 4096. The priority number must be unique for each rule in the collection.
               The lower the priority number, the higher the priority of the rule.
        :param pulumi.Input[str] protocol: Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*).
        :param pulumi.Input[str] source_address_prefix: Gets or sets source address prefix. CIDR or source IP range. A
               “*” can also be used to match all source IPs.  Default tags such as ‘VirtualNetwork’,
               ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
               rule, specifies where network traffic originates from.
        :param pulumi.Input[str] source_port_range: Gets or sets Source Port or Range. Integer or range between 0 and
               65535. A “*” can also be used to match all ports.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_address_prefix is not None:
            pulumi.set(__self__, "destination_address_prefix", destination_address_prefix)
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_address_prefix is not None:
            pulumi.set(__self__, "source_address_prefix", source_address_prefix)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def access(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets whether network traffic is allowed or denied.
        Possible values are “Allow” and “Deny”.
        """
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets a description for this rule. Restricted to 140 chars.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationAddressPrefix")
    def destination_address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets destination address prefix. CIDR or source IP range.
         A “*” can also be used to match all source IPs. Default tags such
        as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
        """
        return pulumi.get(self, "destination_address_prefix")

    @destination_address_prefix.setter
    def destination_address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_address_prefix", value)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets Destination Port or Range. Integer or range between
        0 and 65535. A “*” can also be used to match all ports.
        """
        return pulumi.get(self, "destination_port_range")

    @destination_port_range.setter
    def destination_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_range", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the direction of the rule.InBound or Outbound. The
        direction specifies if rule will be evaluated on incoming or outgoing traffic.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Security rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the priority of the rule. The value can be between
        100 and 4096. The priority number must be unique for each rule in the collection.
        The lower the priority number, the higher the priority of the rule.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets source address prefix. CIDR or source IP range. A
        “*” can also be used to match all source IPs.  Default tags such as ‘VirtualNetwork’,
        ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
        rule, specifies where network traffic originates from.
        """
        return pulumi.get(self, "source_address_prefix")

    @source_address_prefix.setter
    def source_address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_prefix", value)

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets Source Port or Range. Integer or range between 0 and
        65535. A “*” can also be used to match all ports.
        """
        return pulumi.get(self, "source_port_range")

    @source_port_range.setter
    def source_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range", value)


@pulumi.input_type
class OperatingSystemDetailsArgs:
    def __init__(__self__, *,
                 os: Optional[pulumi.Input[Union[str, 'OperatingSystemType']]] = None,
                 os_architecture: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None):
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_architecture is not None:
            pulumi.set(__self__, "os_architecture", os_architecture)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[Union[str, 'OperatingSystemType']]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[Union[str, 'OperatingSystemType']]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="osArchitecture")
    def os_architecture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_architecture")

    @os_architecture.setter
    def os_architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_architecture", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)


@pulumi.input_type
class PortMappingArgs:
    def __init__(__self__, *,
                 external_port: Optional[pulumi.Input[int]] = None,
                 internal_port: Optional[pulumi.Input[int]] = None):
        """
        WebApplication port mapping.
        :param pulumi.Input[int] external_port: Gets or sets the External Port.
        :param pulumi.Input[int] internal_port: Gets or sets the Internal Port.
        """
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if internal_port is not None:
            pulumi.set(__self__, "internal_port", internal_port)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the External Port.
        """
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter(name="internalPort")
    def internal_port(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the Internal Port.
        """
        return pulumi.get(self, "internal_port")

    @internal_port.setter
    def internal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internal_port", value)


@pulumi.input_type
class PrivateEndpointConnectionPropertiesArgs:
    def __init__(__self__, *,
                 private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None):
        """
        Private endpoint connection properties.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: State of the private endpoint connection.
        """
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        State of the private endpoint connection.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'Status']]] = None):
        """
        Private endpoint connection state.
        :param pulumi.Input[str] actions_required: Action required.
        :param pulumi.Input[str] description: Description of the object.
        :param pulumi.Input[Union[str, 'Status']] status: Private link connection state.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        Action required.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'Status']]]:
        """
        Private link connection state.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'Status']]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProjectPropertiesArgs:
    def __init__(__self__, *,
                 assessment_solution_id: Optional[pulumi.Input[str]] = None,
                 customer_storage_account_arm_id: Optional[pulumi.Input[str]] = None,
                 customer_workspace_id: Optional[pulumi.Input[str]] = None,
                 customer_workspace_location: Optional[pulumi.Input[str]] = None,
                 project_status: Optional[pulumi.Input[Union[str, 'ProjectStatus']]] = None,
                 public_network_access: Optional[pulumi.Input[str]] = None):
        """
        Properties of a project.
        :param pulumi.Input[str] assessment_solution_id: Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
        :param pulumi.Input[str] customer_storage_account_arm_id: The ARM id of the storage account used for interactions when public access is disabled.
        :param pulumi.Input[str] customer_workspace_id: The ARM id of service map workspace created by customer.
        :param pulumi.Input[str] customer_workspace_location: Location of service map workspace created by customer.
        :param pulumi.Input[Union[str, 'ProjectStatus']] project_status: Assessment project status.
        :param pulumi.Input[str] public_network_access: This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
        """
        if assessment_solution_id is not None:
            pulumi.set(__self__, "assessment_solution_id", assessment_solution_id)
        if customer_storage_account_arm_id is not None:
            pulumi.set(__self__, "customer_storage_account_arm_id", customer_storage_account_arm_id)
        if customer_workspace_id is not None:
            pulumi.set(__self__, "customer_workspace_id", customer_workspace_id)
        if customer_workspace_location is not None:
            pulumi.set(__self__, "customer_workspace_location", customer_workspace_location)
        if project_status is not None:
            pulumi.set(__self__, "project_status", project_status)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)

    @property
    @pulumi.getter(name="assessmentSolutionId")
    def assessment_solution_id(self) -> Optional[pulumi.Input[str]]:
        """
        Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
        """
        return pulumi.get(self, "assessment_solution_id")

    @assessment_solution_id.setter
    def assessment_solution_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assessment_solution_id", value)

    @property
    @pulumi.getter(name="customerStorageAccountArmId")
    def customer_storage_account_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM id of the storage account used for interactions when public access is disabled.
        """
        return pulumi.get(self, "customer_storage_account_arm_id")

    @customer_storage_account_arm_id.setter
    def customer_storage_account_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_storage_account_arm_id", value)

    @property
    @pulumi.getter(name="customerWorkspaceId")
    def customer_workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM id of service map workspace created by customer.
        """
        return pulumi.get(self, "customer_workspace_id")

    @customer_workspace_id.setter
    def customer_workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_workspace_id", value)

    @property
    @pulumi.getter(name="customerWorkspaceLocation")
    def customer_workspace_location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of service map workspace created by customer.
        """
        return pulumi.get(self, "customer_workspace_location")

    @customer_workspace_location.setter
    def customer_workspace_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_workspace_location", value)

    @property
    @pulumi.getter(name="projectStatus")
    def project_status(self) -> Optional[pulumi.Input[Union[str, 'ProjectStatus']]]:
        """
        Assessment project status.
        """
        return pulumi.get(self, "project_status")

    @project_status.setter
    def project_status(self, value: Optional[pulumi.Input[Union[str, 'ProjectStatus']]]):
        pulumi.set(self, "project_status", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[str]]:
        """
        This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_network_access", value)


@pulumi.input_type
class PublicIPAddressResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 domain_name_label: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 public_ip_allocation_method: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[str]] = None):
        """
        Defines the public IP address resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/publicIPAddresses'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[str] domain_name_label: Gets or sets the domain name label.
        :param pulumi.Input[str] fqdn: Gets or sets the fully qualified domain name.
        :param pulumi.Input[str] public_ip_allocation_method: Gets or sets public IP allocation method.
        :param pulumi.Input[str] sku: Gets or sets public IP sku.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        :param pulumi.Input[str] zones: Gets or sets public IP zones.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/publicIPAddresses')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if domain_name_label is not None:
            pulumi.set(__self__, "domain_name_label", domain_name_label)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if public_ip_allocation_method is not None:
            pulumi.set(__self__, "public_ip_allocation_method", public_ip_allocation_method)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/publicIPAddresses'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="domainNameLabel")
    def domain_name_label(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the domain name label.
        """
        return pulumi.get(self, "domain_name_label")

    @domain_name_label.setter
    def domain_name_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name_label", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="publicIpAllocationMethod")
    def public_ip_allocation_method(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets public IP allocation method.
        """
        return pulumi.get(self, "public_ip_allocation_method")

    @public_ip_allocation_method.setter
    def public_ip_allocation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_allocation_method", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets public IP sku.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets public IP zones.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class PublicIpReferenceArgs:
    def __init__(__self__, *,
                 source_arm_resource_id: pulumi.Input[str]):
        """
        Defines reference to a public IP.
        :param pulumi.Input[str] source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> pulumi.Input[str]:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @source_arm_resource_id.setter
    def source_arm_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_arm_resource_id", value)


@pulumi.input_type
class ResourceGroupResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the resource group resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'resourceGroups'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'resourceGroups')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'resourceGroups'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class ResourceIdentityArgs:
    def __init__(__self__, *,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ResourceIdentityTypes']]] = None,
                 user_assigned_identities: Optional[pulumi.Input[Mapping[str, pulumi.Input['UserAssignedIdentityArgs']]]] = None):
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ResourceIdentityTypes']]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ResourceIdentityTypes']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['UserAssignedIdentityArgs']]]]:
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['UserAssignedIdentityArgs']]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class ResourceRequirementsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        Resource Requirements.
        :param pulumi.Input[str] cpu: Gets or sets the Cpu requirement.
        :param pulumi.Input[str] memory: Gets or sets the Memory requirement.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Cpu requirement.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Memory requirement.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class SecretStoreDetailsArgs:
    def __init__(__self__, *,
                 secret_store: Optional[pulumi.Input[Union[str, 'SecretStoreType']]] = None,
                 secret_store_properties: Optional[pulumi.Input['SecretStorePropertiesArgs']] = None):
        if secret_store is not None:
            pulumi.set(__self__, "secret_store", secret_store)
        if secret_store_properties is not None:
            pulumi.set(__self__, "secret_store_properties", secret_store_properties)

    @property
    @pulumi.getter(name="secretStore")
    def secret_store(self) -> Optional[pulumi.Input[Union[str, 'SecretStoreType']]]:
        return pulumi.get(self, "secret_store")

    @secret_store.setter
    def secret_store(self, value: Optional[pulumi.Input[Union[str, 'SecretStoreType']]]):
        pulumi.set(self, "secret_store", value)

    @property
    @pulumi.getter(name="secretStoreProperties")
    def secret_store_properties(self) -> Optional[pulumi.Input['SecretStorePropertiesArgs']]:
        return pulumi.get(self, "secret_store_properties")

    @secret_store_properties.setter
    def secret_store_properties(self, value: Optional[pulumi.Input['SecretStorePropertiesArgs']]):
        pulumi.set(self, "secret_store_properties", value)


@pulumi.input_type
class SecretStorePropertiesArgs:
    def __init__(__self__, *,
                 secret_store_id: Optional[pulumi.Input[str]] = None):
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)


@pulumi.input_type
class SolutionDetailsArgs:
    def __init__(__self__, *,
                 assessment_count: Optional[pulumi.Input[int]] = None,
                 extended_details: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 group_count: Optional[pulumi.Input[int]] = None):
        """
        Class representing the details of the solution.
        :param pulumi.Input[int] assessment_count: Gets or sets the count of assessments reported by the solution.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extended_details: Gets or sets the extended details reported by the solution.
        :param pulumi.Input[int] group_count: Gets or sets the count of groups reported by the solution.
        """
        if assessment_count is not None:
            pulumi.set(__self__, "assessment_count", assessment_count)
        if extended_details is not None:
            pulumi.set(__self__, "extended_details", extended_details)
        if group_count is not None:
            pulumi.set(__self__, "group_count", group_count)

    @property
    @pulumi.getter(name="assessmentCount")
    def assessment_count(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the count of assessments reported by the solution.
        """
        return pulumi.get(self, "assessment_count")

    @assessment_count.setter
    def assessment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assessment_count", value)

    @property
    @pulumi.getter(name="extendedDetails")
    def extended_details(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the extended details reported by the solution.
        """
        return pulumi.get(self, "extended_details")

    @extended_details.setter
    def extended_details(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extended_details", value)

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the count of groups reported by the solution.
        """
        return pulumi.get(self, "group_count")

    @group_count.setter
    def group_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_count", value)


@pulumi.input_type
class SolutionPropertiesArgs:
    def __init__(__self__, *,
                 cleanup_state: Optional[pulumi.Input[Union[str, 'CleanupState']]] = None,
                 details: Optional[pulumi.Input['SolutionDetailsArgs']] = None,
                 goal: Optional[pulumi.Input[Union[str, 'Goal']]] = None,
                 purpose: Optional[pulumi.Input[Union[str, 'Purpose']]] = None,
                 status: Optional[pulumi.Input[Union[str, 'Status']]] = None,
                 tool: Optional[pulumi.Input[Union[str, 'Tool']]] = None):
        """
        Class for solution properties.
        :param pulumi.Input[Union[str, 'CleanupState']] cleanup_state: Gets or sets the cleanup state of the solution.
        :param pulumi.Input['SolutionDetailsArgs'] details: Gets or sets the details of the solution.
        :param pulumi.Input[Union[str, 'Goal']] goal: Gets or sets the goal of the solution.
        :param pulumi.Input[Union[str, 'Purpose']] purpose: Gets or sets the purpose of the solution.
        :param pulumi.Input[Union[str, 'Status']] status: Gets or sets the current status of the solution.
        :param pulumi.Input[Union[str, 'Tool']] tool: Gets or sets the tool being used in the solution.
        """
        if cleanup_state is not None:
            pulumi.set(__self__, "cleanup_state", cleanup_state)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if goal is not None:
            pulumi.set(__self__, "goal", goal)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tool is not None:
            pulumi.set(__self__, "tool", tool)

    @property
    @pulumi.getter(name="cleanupState")
    def cleanup_state(self) -> Optional[pulumi.Input[Union[str, 'CleanupState']]]:
        """
        Gets or sets the cleanup state of the solution.
        """
        return pulumi.get(self, "cleanup_state")

    @cleanup_state.setter
    def cleanup_state(self, value: Optional[pulumi.Input[Union[str, 'CleanupState']]]):
        pulumi.set(self, "cleanup_state", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input['SolutionDetailsArgs']]:
        """
        Gets or sets the details of the solution.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input['SolutionDetailsArgs']]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def goal(self) -> Optional[pulumi.Input[Union[str, 'Goal']]]:
        """
        Gets or sets the goal of the solution.
        """
        return pulumi.get(self, "goal")

    @goal.setter
    def goal(self, value: Optional[pulumi.Input[Union[str, 'Goal']]]):
        pulumi.set(self, "goal", value)

    @property
    @pulumi.getter
    def purpose(self) -> Optional[pulumi.Input[Union[str, 'Purpose']]]:
        """
        Gets or sets the purpose of the solution.
        """
        return pulumi.get(self, "purpose")

    @purpose.setter
    def purpose(self, value: Optional[pulumi.Input[Union[str, 'Purpose']]]):
        pulumi.set(self, "purpose", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'Status']]]:
        """
        Gets or sets the current status of the solution.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'Status']]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tool(self) -> Optional[pulumi.Input[Union[str, 'Tool']]]:
        """
        Gets or sets the tool being used in the solution.
        """
        return pulumi.get(self, "tool")

    @tool.setter
    def tool(self, value: Optional[pulumi.Input[Union[str, 'Tool']]]):
        pulumi.set(self, "tool", value)


@pulumi.input_type
class SqlDatabaseResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None,
                 zone_redundant: Optional[pulumi.Input[Union[str, 'ZoneRedundant']]] = None):
        """
        Defines the Sql Database resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Sql/servers/databases'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        :param pulumi.Input[Union[str, 'ZoneRedundant']] zone_redundant: Defines the zone redundant resource setting.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Sql/servers/databases')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zone_redundant is not None:
            pulumi.set(__self__, "zone_redundant", zone_redundant)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Sql/servers/databases'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)

    @property
    @pulumi.getter(name="zoneRedundant")
    def zone_redundant(self) -> Optional[pulumi.Input[Union[str, 'ZoneRedundant']]]:
        """
        Defines the zone redundant resource setting.
        """
        return pulumi.get(self, "zone_redundant")

    @zone_redundant.setter
    def zone_redundant(self, value: Optional[pulumi.Input[Union[str, 'ZoneRedundant']]]):
        pulumi.set(self, "zone_redundant", value)


@pulumi.input_type
class SqlElasticPoolResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None,
                 zone_redundant: Optional[pulumi.Input[Union[str, 'ZoneRedundant']]] = None):
        """
        Defines the Sql ElasticPool resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Sql/servers/elasticPools'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        :param pulumi.Input[Union[str, 'ZoneRedundant']] zone_redundant: Defines the zone redundant resource setting.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Sql/servers/elasticPools')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if zone_redundant is not None:
            pulumi.set(__self__, "zone_redundant", zone_redundant)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Sql/servers/elasticPools'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)

    @property
    @pulumi.getter(name="zoneRedundant")
    def zone_redundant(self) -> Optional[pulumi.Input[Union[str, 'ZoneRedundant']]]:
        """
        Defines the zone redundant resource setting.
        """
        return pulumi.get(self, "zone_redundant")

    @zone_redundant.setter
    def zone_redundant(self, value: Optional[pulumi.Input[Union[str, 'ZoneRedundant']]]):
        pulumi.set(self, "zone_redundant", value)


@pulumi.input_type
class SqlServerResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the SQL Server resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Sql/servers'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Sql/servers')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Sql/servers'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class SubnetReferenceArgs:
    def __init__(__self__, *,
                 source_arm_resource_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        Defines reference to subnet.
        :param pulumi.Input[str] source_arm_resource_id: Gets the ARM resource ID of the tracked resource being referenced.
        :param pulumi.Input[str] name: Gets the name of the proxy resource on the target side.
        """
        pulumi.set(__self__, "source_arm_resource_id", source_arm_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="sourceArmResourceId")
    def source_arm_resource_id(self) -> pulumi.Input[str]:
        """
        Gets the ARM resource ID of the tracked resource being referenced.
        """
        return pulumi.get(self, "source_arm_resource_id")

    @source_arm_resource_id.setter
    def source_arm_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_arm_resource_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the name of the proxy resource on the target side.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SubnetResourceSettingsArgs:
    def __init__(__self__, *,
                 address_prefix: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_security_group: Optional[pulumi.Input['NsgReferenceArgs']] = None):
        """
        Defines the virtual network subnets resource settings.
        :param pulumi.Input[str] address_prefix: Gets or sets address prefix for the subnet.
        :param pulumi.Input[str] name: Gets or sets the Subnet name.
        :param pulumi.Input['NsgReferenceArgs'] network_security_group: Defines reference to NSG.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_security_group is not None:
            pulumi.set(__self__, "network_security_group", network_security_group)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets address prefix for the subnet.
        """
        return pulumi.get(self, "address_prefix")

    @address_prefix.setter
    def address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_prefix", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Subnet name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkSecurityGroup")
    def network_security_group(self) -> Optional[pulumi.Input['NsgReferenceArgs']]:
        """
        Defines reference to NSG.
        """
        return pulumi.get(self, "network_security_group")

    @network_security_group.setter
    def network_security_group(self, value: Optional[pulumi.Input['NsgReferenceArgs']]):
        pulumi.set(self, "network_security_group", value)


@pulumi.input_type
class TargetStorageProfileArgs:
    def __init__(__self__, *,
                 azure_file_share_profile: Optional[pulumi.Input['AzureFileShareHydrationProfileArgs']] = None,
                 hydration_storage_provider_type: Optional[pulumi.Input[Union[str, 'TargetHydrationStorageProviderType']]] = None,
                 persistent_volume_id: Optional[pulumi.Input[str]] = None,
                 storage_access_type: Optional[pulumi.Input[Union[str, 'TargetStorageAccessType']]] = None,
                 storage_projection_type: Optional[pulumi.Input[Union[str, 'TargetStorageProjectionType']]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 target_size: Optional[pulumi.Input[str]] = None):
        """
        Storage profile for the directory on the target container.
        :param pulumi.Input['AzureFileShareHydrationProfileArgs'] azure_file_share_profile: Azure file share profile for hydration of application folders not mounted on
               the container file system.
        :param pulumi.Input[Union[str, 'TargetHydrationStorageProviderType']] hydration_storage_provider_type: Gets or sets the storage provider type on the target.
               Applicable when StorageProjectionType is not ContainerFileSystem.
        :param pulumi.Input[str] persistent_volume_id: Gets or sets the target persistent volume id.
               Applicable when StorageProjectionType is PersistentVolume and on using an
               existing PersistentVolume.
        :param pulumi.Input[Union[str, 'TargetStorageAccessType']] storage_access_type: Gets or sets the target storage access type.
        :param pulumi.Input[Union[str, 'TargetStorageProjectionType']] storage_projection_type: Gets or sets the target projection type.
        :param pulumi.Input[str] target_name: Gets or sets the name of the projected volume on the target environment.
        :param pulumi.Input[str] target_size: Gets or sets the storage size on the target.
               Applicable when StorageProjectionType is PersistentVolume and on creating a new
               PersistentVolume.
        """
        if azure_file_share_profile is not None:
            pulumi.set(__self__, "azure_file_share_profile", azure_file_share_profile)
        if hydration_storage_provider_type is not None:
            pulumi.set(__self__, "hydration_storage_provider_type", hydration_storage_provider_type)
        if persistent_volume_id is not None:
            pulumi.set(__self__, "persistent_volume_id", persistent_volume_id)
        if storage_access_type is not None:
            pulumi.set(__self__, "storage_access_type", storage_access_type)
        if storage_projection_type is not None:
            pulumi.set(__self__, "storage_projection_type", storage_projection_type)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if target_size is not None:
            pulumi.set(__self__, "target_size", target_size)

    @property
    @pulumi.getter(name="azureFileShareProfile")
    def azure_file_share_profile(self) -> Optional[pulumi.Input['AzureFileShareHydrationProfileArgs']]:
        """
        Azure file share profile for hydration of application folders not mounted on
        the container file system.
        """
        return pulumi.get(self, "azure_file_share_profile")

    @azure_file_share_profile.setter
    def azure_file_share_profile(self, value: Optional[pulumi.Input['AzureFileShareHydrationProfileArgs']]):
        pulumi.set(self, "azure_file_share_profile", value)

    @property
    @pulumi.getter(name="hydrationStorageProviderType")
    def hydration_storage_provider_type(self) -> Optional[pulumi.Input[Union[str, 'TargetHydrationStorageProviderType']]]:
        """
        Gets or sets the storage provider type on the target.
        Applicable when StorageProjectionType is not ContainerFileSystem.
        """
        return pulumi.get(self, "hydration_storage_provider_type")

    @hydration_storage_provider_type.setter
    def hydration_storage_provider_type(self, value: Optional[pulumi.Input[Union[str, 'TargetHydrationStorageProviderType']]]):
        pulumi.set(self, "hydration_storage_provider_type", value)

    @property
    @pulumi.getter(name="persistentVolumeId")
    def persistent_volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target persistent volume id.
        Applicable when StorageProjectionType is PersistentVolume and on using an
        existing PersistentVolume.
        """
        return pulumi.get(self, "persistent_volume_id")

    @persistent_volume_id.setter
    def persistent_volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_volume_id", value)

    @property
    @pulumi.getter(name="storageAccessType")
    def storage_access_type(self) -> Optional[pulumi.Input[Union[str, 'TargetStorageAccessType']]]:
        """
        Gets or sets the target storage access type.
        """
        return pulumi.get(self, "storage_access_type")

    @storage_access_type.setter
    def storage_access_type(self, value: Optional[pulumi.Input[Union[str, 'TargetStorageAccessType']]]):
        pulumi.set(self, "storage_access_type", value)

    @property
    @pulumi.getter(name="storageProjectionType")
    def storage_projection_type(self) -> Optional[pulumi.Input[Union[str, 'TargetStorageProjectionType']]]:
        """
        Gets or sets the target projection type.
        """
        return pulumi.get(self, "storage_projection_type")

    @storage_projection_type.setter
    def storage_projection_type(self, value: Optional[pulumi.Input[Union[str, 'TargetStorageProjectionType']]]):
        pulumi.set(self, "storage_projection_type", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the name of the projected volume on the target environment.
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter(name="targetSize")
    def target_size(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the storage size on the target.
        Applicable when StorageProjectionType is PersistentVolume and on creating a new
        PersistentVolume.
        """
        return pulumi.get(self, "target_size")

    @target_size.setter
    def target_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_size", value)


@pulumi.input_type
class UserAssignedIdentityArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)


@pulumi.input_type
class VMwareMigrateAgentModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 fabric_friendly_name: Optional[pulumi.Input[str]] = None,
                 vmware_site_id: Optional[pulumi.Input[str]] = None):
        """
        VMware MigrateAgent model custom properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'VMwareMigrateAgentModelCustomProperties'.
        :param pulumi.Input[str] fabric_friendly_name: Gets or sets the friendly name of the,of the MigrateAgent fabric.
        :param pulumi.Input[str] vmware_site_id: Gets or sets the master Site Id of the Migrate Agent.
        """
        pulumi.set(__self__, "instance_type", 'VMwareMigrateAgentModelCustomProperties')
        if fabric_friendly_name is not None:
            pulumi.set(__self__, "fabric_friendly_name", fabric_friendly_name)
        if vmware_site_id is not None:
            pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareMigrateAgentModelCustomProperties'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="fabricFriendlyName")
    def fabric_friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the friendly name of the,of the MigrateAgent fabric.
        """
        return pulumi.get(self, "fabric_friendly_name")

    @fabric_friendly_name.setter
    def fabric_friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_friendly_name", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the master Site Id of the Migrate Agent.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmware_site_id", value)


@pulumi.input_type
class VirtualMachineResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_availability_zone: Optional[pulumi.Input[Union[str, 'TargetAvailabilityZone']]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_vm_size: Optional[pulumi.Input[str]] = None,
                 user_managed_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Gets or sets the virtual machine resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Compute/virtualMachines'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_availability_set_id: Gets or sets the target availability set id for virtual machines not in an availability set at source.
        :param pulumi.Input[Union[str, 'TargetAvailabilityZone']] target_availability_zone: Gets or sets the target availability zone.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        :param pulumi.Input[str] target_vm_size: Gets or sets the target virtual machine size.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_managed_identities: Gets or sets user-managed identities
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Compute/virtualMachines')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_availability_zone is not None:
            pulumi.set(__self__, "target_availability_zone", target_availability_zone)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)
        if target_vm_size is not None:
            pulumi.set(__self__, "target_vm_size", target_vm_size)
        if user_managed_identities is not None:
            pulumi.set(__self__, "user_managed_identities", user_managed_identities)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Compute/virtualMachines'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target availability set id for virtual machines not in an availability set at source.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetAvailabilityZone")
    def target_availability_zone(self) -> Optional[pulumi.Input[Union[str, 'TargetAvailabilityZone']]]:
        """
        Gets or sets the target availability zone.
        """
        return pulumi.get(self, "target_availability_zone")

    @target_availability_zone.setter
    def target_availability_zone(self, value: Optional[pulumi.Input[Union[str, 'TargetAvailabilityZone']]]):
        pulumi.set(self, "target_availability_zone", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)

    @property
    @pulumi.getter(name="targetVmSize")
    def target_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target virtual machine size.
        """
        return pulumi.get(self, "target_vm_size")

    @target_vm_size.setter
    def target_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_size", value)

    @property
    @pulumi.getter(name="userManagedIdentities")
    def user_managed_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets user-managed identities
        """
        return pulumi.get(self, "user_managed_identities")

    @user_managed_identities.setter
    def user_managed_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_managed_identities", value)


@pulumi.input_type
class VirtualNetworkResourceSettingsArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 target_resource_name: pulumi.Input[str],
                 address_space: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_ddos_protection: Optional[pulumi.Input[bool]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetResourceSettingsArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Defines the virtual network resource settings.
        :param pulumi.Input[str] resource_type: The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
               Expected value is 'Microsoft.Network/virtualNetworks'.
        :param pulumi.Input[str] target_resource_name: Gets or sets the target Resource name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_space: Gets or sets the address prefixes for the virtual network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
               deployed in the virtual network.
        :param pulumi.Input[bool] enable_ddos_protection: Gets or sets a value indicating whether gets or sets whether the
               DDOS protection should be switched on.
        :param pulumi.Input[Sequence[pulumi.Input['SubnetResourceSettingsArgs']]] subnets: Gets or sets List of subnets in a VirtualNetwork.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Gets or sets the Resource tags.
        :param pulumi.Input[str] target_resource_group_name: Gets or sets the target resource group name.
        """
        pulumi.set(__self__, "resource_type", 'Microsoft.Network/virtualNetworks')
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        if address_space is not None:
            pulumi.set(__self__, "address_space", address_space)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if enable_ddos_protection is not None:
            pulumi.set(__self__, "enable_ddos_protection", enable_ddos_protection)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_resource_group_name is not None:
            pulumi.set(__self__, "target_resource_group_name", target_resource_group_name)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
        Expected value is 'Microsoft.Network/virtualNetworks'.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target Resource name.
        """
        return pulumi.get(self, "target_resource_name")

    @target_resource_name.setter
    def target_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_name", value)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets the address prefixes for the virtual network.
        """
        return pulumi.get(self, "address_space")

    @address_space.setter
    def address_space(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_space", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
        deployed in the virtual network.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="enableDdosProtection")
    def enable_ddos_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether gets or sets whether the
        DDOS protection should be switched on.
        """
        return pulumi.get(self, "enable_ddos_protection")

    @enable_ddos_protection.setter
    def enable_ddos_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ddos_protection", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetResourceSettingsArgs']]]]:
        """
        Gets or sets List of subnets in a VirtualNetwork.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetResourceSettingsArgs']]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Gets or sets the Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetResourceGroupName")
    def target_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target resource group name.
        """
        return pulumi.get(self, "target_resource_group_name")

    @target_resource_group_name.setter
    def target_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_name", value)


@pulumi.input_type
class VmUptimeArgs:
    def __init__(__self__, *,
                 days_per_month: Optional[pulumi.Input[float]] = None,
                 hours_per_day: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] days_per_month: Number of days in a month for VM uptime.
        :param pulumi.Input[float] hours_per_day: Number of hours per day for VM uptime.
        """
        if days_per_month is not None:
            pulumi.set(__self__, "days_per_month", days_per_month)
        if hours_per_day is not None:
            pulumi.set(__self__, "hours_per_day", hours_per_day)

    @property
    @pulumi.getter(name="daysPerMonth")
    def days_per_month(self) -> Optional[pulumi.Input[float]]:
        """
        Number of days in a month for VM uptime.
        """
        return pulumi.get(self, "days_per_month")

    @days_per_month.setter
    def days_per_month(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "days_per_month", value)

    @property
    @pulumi.getter(name="hoursPerDay")
    def hours_per_day(self) -> Optional[pulumi.Input[float]]:
        """
        Number of hours per day for VM uptime.
        """
        return pulumi.get(self, "hours_per_day")

    @hours_per_day.setter
    def hours_per_day(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "hours_per_day", value)


@pulumi.input_type
class WebApplicationConfigurationArgs:
    def __init__(__self__, *,
                 file_path: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 is_deployment_time_editable: Optional[pulumi.Input[bool]] = None,
                 local_file_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 secret_store_details: Optional[pulumi.Input['SecretStoreDetailsArgs']] = None,
                 section: Optional[pulumi.Input[str]] = None,
                 target_file_path: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ConfigurationType']]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Class for web application configurations.
        :param pulumi.Input[str] file_path: Gets or sets the configuration file path.
        :param pulumi.Input[str] identifier: Gets or sets the identifier for the configuration.
        :param pulumi.Input[bool] is_deployment_time_editable: Gets or sets a value indicating whether the configuration is edited or not by the user.
        :param pulumi.Input[str] local_file_path: Gets or sets the configuration local file path.
        :param pulumi.Input[str] name: Gets or sets the configuration name.
        :param pulumi.Input[str] section: Gets or sets the configuration section in the file.
        :param pulumi.Input[str] target_file_path: Gets or sets the configuration target file path.
        :param pulumi.Input[Union[str, 'ConfigurationType']] type: Gets or sets the configuration type.
        :param pulumi.Input[str] value: Gets or sets the configuration value.
        """
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_deployment_time_editable is not None:
            pulumi.set(__self__, "is_deployment_time_editable", is_deployment_time_editable)
        if local_file_path is not None:
            pulumi.set(__self__, "local_file_path", local_file_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret_store_details is not None:
            pulumi.set(__self__, "secret_store_details", secret_store_details)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if target_file_path is not None:
            pulumi.set(__self__, "target_file_path", target_file_path)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the configuration file path.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the identifier for the configuration.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="isDeploymentTimeEditable")
    def is_deployment_time_editable(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether the configuration is edited or not by the user.
        """
        return pulumi.get(self, "is_deployment_time_editable")

    @is_deployment_time_editable.setter
    def is_deployment_time_editable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deployment_time_editable", value)

    @property
    @pulumi.getter(name="localFilePath")
    def local_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the configuration local file path.
        """
        return pulumi.get(self, "local_file_path")

    @local_file_path.setter
    def local_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_file_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretStoreDetails")
    def secret_store_details(self) -> Optional[pulumi.Input['SecretStoreDetailsArgs']]:
        return pulumi.get(self, "secret_store_details")

    @secret_store_details.setter
    def secret_store_details(self, value: Optional[pulumi.Input['SecretStoreDetailsArgs']]):
        pulumi.set(self, "secret_store_details", value)

    @property
    @pulumi.getter
    def section(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the configuration section in the file.
        """
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section", value)

    @property
    @pulumi.getter(name="targetFilePath")
    def target_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the configuration target file path.
        """
        return pulumi.get(self, "target_file_path")

    @target_file_path.setter
    def target_file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_file_path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ConfigurationType']]]:
        """
        Gets or sets the configuration type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ConfigurationType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WebApplicationDirectoryArgs:
    def __init__(__self__, *,
                 is_editable: Optional[pulumi.Input[bool]] = None,
                 source_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_size: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input['TargetStorageProfileArgs']] = None):
        """
        WebApplication directory structure.
        :param pulumi.Input[bool] is_editable: Gets or sets a value indicating whether the directory object is editable.
               True when the directory is added as an optional directory, false when discovery is done
               manually.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_paths: Gets or sets the paths of the directory on the source machine.
        :param pulumi.Input[str] source_size: Gets or sets the size of the directory on the source machine.
        :param pulumi.Input['TargetStorageProfileArgs'] storage_profile: Storage profile for the directory on the target container.
        """
        if is_editable is not None:
            pulumi.set(__self__, "is_editable", is_editable)
        if source_paths is not None:
            pulumi.set(__self__, "source_paths", source_paths)
        if source_size is not None:
            pulumi.set(__self__, "source_size", source_size)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether the directory object is editable.
        True when the directory is added as an optional directory, false when discovery is done
        manually.
        """
        return pulumi.get(self, "is_editable")

    @is_editable.setter
    def is_editable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_editable", value)

    @property
    @pulumi.getter(name="sourcePaths")
    def source_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets the paths of the directory on the source machine.
        """
        return pulumi.get(self, "source_paths")

    @source_paths.setter
    def source_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_paths", value)

    @property
    @pulumi.getter(name="sourceSize")
    def source_size(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the size of the directory on the source machine.
        """
        return pulumi.get(self, "source_size")

    @source_size.setter
    def source_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_size", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['TargetStorageProfileArgs']]:
        """
        Storage profile for the directory on the target container.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['TargetStorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)


@pulumi.input_type
class WebApplicationFrameworkArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Framework specific data for a web application.
        :param pulumi.Input[str] name: Gets or sets Name of the framework.
        :param pulumi.Input[str] version: Gets or sets Version of the framework.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets Name of the framework.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets Version of the framework.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WorkloadDeploymentModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: Optional[pulumi.Input[Union['ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesArgs', 'IISAKSWorkloadDeploymentModelCustomPropertiesArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 target_platform: Optional[pulumi.Input[Union[str, 'WorkloadDeploymentTarget']]] = None,
                 workload_instance_properties: Optional[pulumi.Input['WorkloadInstanceModelPropertiesArgs']] = None):
        """
        Workload deployment model properties.
        :param pulumi.Input[Union['ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesArgs', 'IISAKSWorkloadDeploymentModelCustomPropertiesArgs']] custom_properties: Workload deployment model custom properties.
        :param pulumi.Input[str] display_name: Gets or sets the display name.
        :param pulumi.Input[Union[str, 'WorkloadDeploymentTarget']] target_platform: Gets or sets the deployment target platform.
        :param pulumi.Input['WorkloadInstanceModelPropertiesArgs'] workload_instance_properties: Workload instance model properties.
        """
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if target_platform is not None:
            pulumi.set(__self__, "target_platform", target_platform)
        if workload_instance_properties is not None:
            pulumi.set(__self__, "workload_instance_properties", workload_instance_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Union['ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesArgs', 'IISAKSWorkloadDeploymentModelCustomPropertiesArgs']]]:
        """
        Workload deployment model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Union['ApacheTomcatAKSWorkloadDeploymentModelCustomPropertiesArgs', 'IISAKSWorkloadDeploymentModelCustomPropertiesArgs']]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="targetPlatform")
    def target_platform(self) -> Optional[pulumi.Input[Union[str, 'WorkloadDeploymentTarget']]]:
        """
        Gets or sets the deployment target platform.
        """
        return pulumi.get(self, "target_platform")

    @target_platform.setter
    def target_platform(self, value: Optional[pulumi.Input[Union[str, 'WorkloadDeploymentTarget']]]):
        pulumi.set(self, "target_platform", value)

    @property
    @pulumi.getter(name="workloadInstanceProperties")
    def workload_instance_properties(self) -> Optional[pulumi.Input['WorkloadInstanceModelPropertiesArgs']]:
        """
        Workload instance model properties.
        """
        return pulumi.get(self, "workload_instance_properties")

    @workload_instance_properties.setter
    def workload_instance_properties(self, value: Optional[pulumi.Input['WorkloadInstanceModelPropertiesArgs']]):
        pulumi.set(self, "workload_instance_properties", value)


@pulumi.input_type
class WorkloadInstanceModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: Optional[pulumi.Input[Union['ApacheTomcatWorkloadInstanceModelCustomPropertiesArgs', 'IISWorkloadInstanceModelCustomPropertiesArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 master_site_name: Optional[pulumi.Input[str]] = None,
                 migrate_agent_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_platform: Optional[pulumi.Input[str]] = None):
        """
        Workload instance model properties.
        :param pulumi.Input[Union['ApacheTomcatWorkloadInstanceModelCustomPropertiesArgs', 'IISWorkloadInstanceModelCustomPropertiesArgs']] custom_properties: Workload instance model custom properties.
        :param pulumi.Input[str] display_name: Gets or sets the display name.
        :param pulumi.Input[str] master_site_name: Gets or Sets the master site name.
        :param pulumi.Input[str] migrate_agent_id: Gets or sets the migrate agent id associated with the workload instance.
        :param pulumi.Input[str] name: Gets or sets the workload instance name.
        :param pulumi.Input[str] source_name: Gets or sets the source name.
        :param pulumi.Input[str] source_platform: Gets or sets the source platform.
        """
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if master_site_name is not None:
            pulumi.set(__self__, "master_site_name", master_site_name)
        if migrate_agent_id is not None:
            pulumi.set(__self__, "migrate_agent_id", migrate_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_platform is not None:
            pulumi.set(__self__, "source_platform", source_platform)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Union['ApacheTomcatWorkloadInstanceModelCustomPropertiesArgs', 'IISWorkloadInstanceModelCustomPropertiesArgs']]]:
        """
        Workload instance model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Union['ApacheTomcatWorkloadInstanceModelCustomPropertiesArgs', 'IISWorkloadInstanceModelCustomPropertiesArgs']]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="masterSiteName")
    def master_site_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or Sets the master site name.
        """
        return pulumi.get(self, "master_site_name")

    @master_site_name.setter
    def master_site_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_site_name", value)

    @property
    @pulumi.getter(name="migrateAgentId")
    def migrate_agent_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the migrate agent id associated with the workload instance.
        """
        return pulumi.get(self, "migrate_agent_id")

    @migrate_agent_id.setter
    def migrate_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migrate_agent_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the workload instance name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the source name.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourcePlatform")
    def source_platform(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the source platform.
        """
        return pulumi.get(self, "source_platform")

    @source_platform.setter
    def source_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_platform", value)


