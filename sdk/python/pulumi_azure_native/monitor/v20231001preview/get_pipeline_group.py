# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPipelineGroupResult',
    'AwaitableGetPipelineGroupResult',
    'get_pipeline_group',
    'get_pipeline_group_output',
]

@pulumi.output_type
class GetPipelineGroupResult:
    """
    A pipeline group definition.
    """
    def __init__(__self__, exporters=None, extended_location=None, id=None, location=None, name=None, networking_configurations=None, processors=None, provisioning_state=None, receivers=None, replicas=None, service=None, system_data=None, tags=None, type=None):
        if exporters and not isinstance(exporters, list):
            raise TypeError("Expected argument 'exporters' to be a list")
        pulumi.set(__self__, "exporters", exporters)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networking_configurations and not isinstance(networking_configurations, list):
            raise TypeError("Expected argument 'networking_configurations' to be a list")
        pulumi.set(__self__, "networking_configurations", networking_configurations)
        if processors and not isinstance(processors, list):
            raise TypeError("Expected argument 'processors' to be a list")
        pulumi.set(__self__, "processors", processors)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if receivers and not isinstance(receivers, list):
            raise TypeError("Expected argument 'receivers' to be a list")
        pulumi.set(__self__, "receivers", receivers)
        if replicas and not isinstance(replicas, int):
            raise TypeError("Expected argument 'replicas' to be a int")
        pulumi.set(__self__, "replicas", replicas)
        if service and not isinstance(service, dict):
            raise TypeError("Expected argument 'service' to be a dict")
        pulumi.set(__self__, "service", service)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def exporters(self) -> Sequence['outputs.ExporterResponse']:
        """
        The exporters specified for a pipeline group instance.
        """
        return pulumi.get(self, "exporters")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The extended location for given pipeline group.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkingConfigurations")
    def networking_configurations(self) -> Optional[Sequence['outputs.NetworkingConfigurationResponse']]:
        """
        Networking configurations for the pipeline group instance.
        """
        return pulumi.get(self, "networking_configurations")

    @property
    @pulumi.getter
    def processors(self) -> Sequence['outputs.ProcessorResponse']:
        """
        The processors specified for a pipeline group instance.
        """
        return pulumi.get(self, "processors")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def receivers(self) -> Sequence['outputs.ReceiverResponse']:
        """
        The receivers specified for a pipeline group instance.
        """
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Defines the amount of replicas of the pipeline group instance.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def service(self) -> 'outputs.ServiceResponse':
        """
        The service section for a given pipeline group instance.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPipelineGroupResult(GetPipelineGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineGroupResult(
            exporters=self.exporters,
            extended_location=self.extended_location,
            id=self.id,
            location=self.location,
            name=self.name,
            networking_configurations=self.networking_configurations,
            processors=self.processors,
            provisioning_state=self.provisioning_state,
            receivers=self.receivers,
            replicas=self.replicas,
            service=self.service,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_pipeline_group(pipeline_group_name: Optional[str] = None,
                       resource_group_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineGroupResult:
    """
    Returns the specific pipeline group instance.


    :param str pipeline_group_name: The name of pipeline group. The name is case insensitive.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['pipelineGroupName'] = pipeline_group_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:monitor/v20231001preview:getPipelineGroup', __args__, opts=opts, typ=GetPipelineGroupResult).value

    return AwaitableGetPipelineGroupResult(
        exporters=pulumi.get(__ret__, 'exporters'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        networking_configurations=pulumi.get(__ret__, 'networking_configurations'),
        processors=pulumi.get(__ret__, 'processors'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        receivers=pulumi.get(__ret__, 'receivers'),
        replicas=pulumi.get(__ret__, 'replicas'),
        service=pulumi.get(__ret__, 'service'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_pipeline_group)
def get_pipeline_group_output(pipeline_group_name: Optional[pulumi.Input[str]] = None,
                              resource_group_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPipelineGroupResult]:
    """
    Returns the specific pipeline group instance.


    :param str pipeline_group_name: The name of pipeline group. The name is case insensitive.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
