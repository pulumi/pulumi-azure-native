# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AzureMonitorWorkspaceLogsApiConfigArgs',
    'AzureMonitorWorkspaceLogsExporterArgs',
    'BatchProcessorArgs',
    'CacheConfigurationArgs',
    'ConcurrencyConfigurationArgs',
    'ExporterArgs',
    'ExtendedLocationArgs',
    'NetworkingConfigurationArgs',
    'NetworkingRouteArgs',
    'OtlpReceiverArgs',
    'PersistenceConfigurationsArgs',
    'PipelineArgs',
    'ProcessorArgs',
    'ReceiverArgs',
    'RecordMapArgs',
    'ResourceMapArgs',
    'SchemaMapArgs',
    'ScopeMapArgs',
    'ServiceArgs',
    'SyslogReceiverArgs',
    'TcpExporterArgs',
    'UdpReceiverArgs',
]

@pulumi.input_type
class AzureMonitorWorkspaceLogsApiConfigArgs:
    def __init__(__self__, *,
                 data_collection_endpoint_url: pulumi.Input[str],
                 data_collection_rule: pulumi.Input[str],
                 schema: pulumi.Input['SchemaMapArgs'],
                 stream: pulumi.Input[str]):
        """
        Azure Monitor Workspace Logs Api configurations.
        :param pulumi.Input[str] data_collection_endpoint_url: Data collection endpoint ingestion url.
        :param pulumi.Input[str] data_collection_rule: Data Collection Rule (DCR) immutable id.
        :param pulumi.Input['SchemaMapArgs'] schema: The schema mapping for incoming data.
        :param pulumi.Input[str] stream: Stream name in destination. Azure Monitor stream is related to the destination table.
        """
        pulumi.set(__self__, "data_collection_endpoint_url", data_collection_endpoint_url)
        pulumi.set(__self__, "data_collection_rule", data_collection_rule)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "stream", stream)

    @property
    @pulumi.getter(name="dataCollectionEndpointUrl")
    def data_collection_endpoint_url(self) -> pulumi.Input[str]:
        """
        Data collection endpoint ingestion url.
        """
        return pulumi.get(self, "data_collection_endpoint_url")

    @data_collection_endpoint_url.setter
    def data_collection_endpoint_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_collection_endpoint_url", value)

    @property
    @pulumi.getter(name="dataCollectionRule")
    def data_collection_rule(self) -> pulumi.Input[str]:
        """
        Data Collection Rule (DCR) immutable id.
        """
        return pulumi.get(self, "data_collection_rule")

    @data_collection_rule.setter
    def data_collection_rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_collection_rule", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input['SchemaMapArgs']:
        """
        The schema mapping for incoming data.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input['SchemaMapArgs']):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def stream(self) -> pulumi.Input[str]:
        """
        Stream name in destination. Azure Monitor stream is related to the destination table.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream", value)


@pulumi.input_type
class AzureMonitorWorkspaceLogsExporterArgs:
    def __init__(__self__, *,
                 api: pulumi.Input['AzureMonitorWorkspaceLogsApiConfigArgs'],
                 cache: Optional[pulumi.Input['CacheConfigurationArgs']] = None,
                 concurrency: Optional[pulumi.Input['ConcurrencyConfigurationArgs']] = None):
        """
        Azure Monitor Workspace Logs specific configurations.
        :param pulumi.Input['AzureMonitorWorkspaceLogsApiConfigArgs'] api: API configurations for Azure Monitor workspace exporter.
        :param pulumi.Input['CacheConfigurationArgs'] cache: Cache configurations.
        :param pulumi.Input['ConcurrencyConfigurationArgs'] concurrency: Concurrency configuration for the exporter.
        """
        pulumi.set(__self__, "api", api)
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)

    @property
    @pulumi.getter
    def api(self) -> pulumi.Input['AzureMonitorWorkspaceLogsApiConfigArgs']:
        """
        API configurations for Azure Monitor workspace exporter.
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: pulumi.Input['AzureMonitorWorkspaceLogsApiConfigArgs']):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['CacheConfigurationArgs']]:
        """
        Cache configurations.
        """
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['CacheConfigurationArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input['ConcurrencyConfigurationArgs']]:
        """
        Concurrency configuration for the exporter.
        """
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input['ConcurrencyConfigurationArgs']]):
        pulumi.set(self, "concurrency", value)


@pulumi.input_type
class BatchProcessorArgs:
    def __init__(__self__, *,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        Batch processor.
        :param pulumi.Input[int] batch_size: Size of the batch.
        :param pulumi.Input[int] timeout: Timeout in milliseconds.
        """
        if batch_size is None:
            batch_size = 8192
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if timeout is None:
            timeout = 200
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the batch.
        """
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in milliseconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class CacheConfigurationArgs:
    def __init__(__self__, *,
                 max_storage_usage: Optional[pulumi.Input[int]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        Cache configurations.
        :param pulumi.Input[int] max_storage_usage: Max storage usage in megabytes.
        :param pulumi.Input[int] retention_period: Retention period in minutes.
        """
        if max_storage_usage is not None:
            pulumi.set(__self__, "max_storage_usage", max_storage_usage)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="maxStorageUsage")
    def max_storage_usage(self) -> Optional[pulumi.Input[int]]:
        """
        Max storage usage in megabytes.
        """
        return pulumi.get(self, "max_storage_usage")

    @max_storage_usage.setter
    def max_storage_usage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_storage_usage", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Retention period in minutes.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


@pulumi.input_type
class ConcurrencyConfigurationArgs:
    def __init__(__self__, *,
                 batch_queue_size: Optional[pulumi.Input[int]] = None,
                 worker_count: Optional[pulumi.Input[int]] = None):
        """
        Concurrent publishing configuration.
        :param pulumi.Input[int] batch_queue_size: Size of the queue for log batches.
        :param pulumi.Input[int] worker_count: Number of parallel workers processing the log queues.
        """
        if batch_queue_size is None:
            batch_queue_size = 100
        if batch_queue_size is not None:
            pulumi.set(__self__, "batch_queue_size", batch_queue_size)
        if worker_count is None:
            worker_count = 4
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)

    @property
    @pulumi.getter(name="batchQueueSize")
    def batch_queue_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the queue for log batches.
        """
        return pulumi.get(self, "batch_queue_size")

    @batch_queue_size.setter
    def batch_queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_queue_size", value)

    @property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of parallel workers processing the log queues.
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "worker_count", value)


@pulumi.input_type
class ExporterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ExporterType']],
                 azure_monitor_workspace_logs: Optional[pulumi.Input['AzureMonitorWorkspaceLogsExporterArgs']] = None,
                 tcp: Optional[pulumi.Input['TcpExporterArgs']] = None):
        """
        Exporter Info.
        :param pulumi.Input[str] name: The name of exporter.
        :param pulumi.Input[Union[str, 'ExporterType']] type: The type of exporter.
        :param pulumi.Input['AzureMonitorWorkspaceLogsExporterArgs'] azure_monitor_workspace_logs: Azure Monitor Workspace Logs specific configurations.
        :param pulumi.Input['TcpExporterArgs'] tcp: TCP based exporter. Used for pipelineGroup exporter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if azure_monitor_workspace_logs is not None:
            pulumi.set(__self__, "azure_monitor_workspace_logs", azure_monitor_workspace_logs)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of exporter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ExporterType']]:
        """
        The type of exporter.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ExporterType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="azureMonitorWorkspaceLogs")
    def azure_monitor_workspace_logs(self) -> Optional[pulumi.Input['AzureMonitorWorkspaceLogsExporterArgs']]:
        """
        Azure Monitor Workspace Logs specific configurations.
        """
        return pulumi.get(self, "azure_monitor_workspace_logs")

    @azure_monitor_workspace_logs.setter
    def azure_monitor_workspace_logs(self, value: Optional[pulumi.Input['AzureMonitorWorkspaceLogsExporterArgs']]):
        pulumi.set(self, "azure_monitor_workspace_logs", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['TcpExporterArgs']]:
        """
        TCP based exporter. Used for pipelineGroup exporter.
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['TcpExporterArgs']]):
        pulumi.set(self, "tcp", value)


@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ExtendedLocationType']]):
        """
        The extended location info.
        :param pulumi.Input[str] name: The name of extended location.
        :param pulumi.Input[Union[str, 'ExtendedLocationType']] type: The type of extended location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ExtendedLocationType']]:
        """
        The type of extended location.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ExtendedLocationType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NetworkingConfigurationArgs:
    def __init__(__self__, *,
                 external_networking_mode: pulumi.Input[Union[str, 'ExternalNetworkingMode']],
                 routes: pulumi.Input[Sequence[pulumi.Input['NetworkingRouteArgs']]],
                 host: Optional[pulumi.Input[str]] = None):
        """
        Networking configuration for the pipeline group instance.
        :param pulumi.Input[Union[str, 'ExternalNetworkingMode']] external_networking_mode: External networking mode.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkingRouteArgs']]] routes: Networking routes configuration.
        :param pulumi.Input[str] host: The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
        """
        pulumi.set(__self__, "external_networking_mode", external_networking_mode)
        pulumi.set(__self__, "routes", routes)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="externalNetworkingMode")
    def external_networking_mode(self) -> pulumi.Input[Union[str, 'ExternalNetworkingMode']]:
        """
        External networking mode.
        """
        return pulumi.get(self, "external_networking_mode")

    @external_networking_mode.setter
    def external_networking_mode(self, value: pulumi.Input[Union[str, 'ExternalNetworkingMode']]):
        pulumi.set(self, "external_networking_mode", value)

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Input[Sequence[pulumi.Input['NetworkingRouteArgs']]]:
        """
        Networking routes configuration.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: pulumi.Input[Sequence[pulumi.Input['NetworkingRouteArgs']]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class NetworkingRouteArgs:
    def __init__(__self__, *,
                 receiver: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None):
        """
        Networking route configuration.
        :param pulumi.Input[str] receiver: The name of the previously defined receiver.
        :param pulumi.Input[str] path: Route path.
        :param pulumi.Input[int] port: The port that will be configured externally. If not specified, it will use the port from the receiver definition.
        :param pulumi.Input[str] subdomain: Route subdomain.
        """
        pulumi.set(__self__, "receiver", receiver)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def receiver(self) -> pulumi.Input[str]:
        """
        The name of the previously defined receiver.
        """
        return pulumi.get(self, "receiver")

    @receiver.setter
    def receiver(self, value: pulumi.Input[str]):
        pulumi.set(self, "receiver", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Route path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port that will be configured externally. If not specified, it will use the port from the receiver definition.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Route subdomain.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)


@pulumi.input_type
class OtlpReceiverArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str]):
        """
        OTLP Receiver.
        :param pulumi.Input[str] endpoint: OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
        """
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)


@pulumi.input_type
class PersistenceConfigurationsArgs:
    def __init__(__self__, *,
                 persistent_volume_name: pulumi.Input[str]):
        """
        Persistence options to all pipelines in the instance.
        :param pulumi.Input[str] persistent_volume_name: The name of the mounted persistent volume.
        """
        pulumi.set(__self__, "persistent_volume_name", persistent_volume_name)

    @property
    @pulumi.getter(name="persistentVolumeName")
    def persistent_volume_name(self) -> pulumi.Input[str]:
        """
        The name of the mounted persistent volume.
        """
        return pulumi.get(self, "persistent_volume_name")

    @persistent_volume_name.setter
    def persistent_volume_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "persistent_volume_name", value)


@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 exporters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 receivers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[Union[str, 'PipelineType']],
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Pipeline Info.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exporters: Reference to exporters configured for the pipeline.
        :param pulumi.Input[str] name: Name of the pipeline.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: Reference to receivers configured for the pipeline.
        :param pulumi.Input[Union[str, 'PipelineType']] type: The type of pipeline
        :param pulumi.Input[Sequence[pulumi.Input[str]]] processors: Reference to processors configured for the pipeline.
        """
        pulumi.set(__self__, "exporters", exporters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "receivers", receivers)
        pulumi.set(__self__, "type", type)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)

    @property
    @pulumi.getter
    def exporters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Reference to exporters configured for the pipeline.
        """
        return pulumi.get(self, "exporters")

    @exporters.setter
    def exporters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "exporters", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the pipeline.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def receivers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Reference to receivers configured for the pipeline.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'PipelineType']]:
        """
        The type of pipeline
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'PipelineType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Reference to processors configured for the pipeline.
        """
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "processors", value)


@pulumi.input_type
class ProcessorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ProcessorType']],
                 batch: Optional[pulumi.Input['BatchProcessorArgs']] = None):
        """
        Processor Info.
        :param pulumi.Input[str] name: The name of processor.
        :param pulumi.Input[Union[str, 'ProcessorType']] type: The type of processor.
        :param pulumi.Input['BatchProcessorArgs'] batch: Batch processor configurations.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if batch is not None:
            pulumi.set(__self__, "batch", batch)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of processor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ProcessorType']]:
        """
        The type of processor.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ProcessorType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def batch(self) -> Optional[pulumi.Input['BatchProcessorArgs']]:
        """
        Batch processor configurations.
        """
        return pulumi.get(self, "batch")

    @batch.setter
    def batch(self, value: Optional[pulumi.Input['BatchProcessorArgs']]):
        pulumi.set(self, "batch", value)


@pulumi.input_type
class ReceiverArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ReceiverType']],
                 otlp: Optional[pulumi.Input['OtlpReceiverArgs']] = None,
                 syslog: Optional[pulumi.Input['SyslogReceiverArgs']] = None,
                 udp: Optional[pulumi.Input['UdpReceiverArgs']] = None):
        """
        Receiver Info.
        :param pulumi.Input[str] name: The name of receiver.
        :param pulumi.Input[Union[str, 'ReceiverType']] type: The type of receiver.
        :param pulumi.Input['OtlpReceiverArgs'] otlp: OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
        :param pulumi.Input['SyslogReceiverArgs'] syslog: Syslog configurations. This field is mandatory for syslog type receivers.
        :param pulumi.Input['UdpReceiverArgs'] udp: UDP receiver configurations. This field is mandatory for UDP receivers.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if otlp is not None:
            pulumi.set(__self__, "otlp", otlp)
        if syslog is not None:
            pulumi.set(__self__, "syslog", syslog)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of receiver.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ReceiverType']]:
        """
        The type of receiver.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ReceiverType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def otlp(self) -> Optional[pulumi.Input['OtlpReceiverArgs']]:
        """
        OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
        """
        return pulumi.get(self, "otlp")

    @otlp.setter
    def otlp(self, value: Optional[pulumi.Input['OtlpReceiverArgs']]):
        pulumi.set(self, "otlp", value)

    @property
    @pulumi.getter
    def syslog(self) -> Optional[pulumi.Input['SyslogReceiverArgs']]:
        """
        Syslog configurations. This field is mandatory for syslog type receivers.
        """
        return pulumi.get(self, "syslog")

    @syslog.setter
    def syslog(self, value: Optional[pulumi.Input['SyslogReceiverArgs']]):
        pulumi.set(self, "syslog", value)

    @property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['UdpReceiverArgs']]:
        """
        UDP receiver configurations. This field is mandatory for UDP receivers.
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['UdpReceiverArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class RecordMapArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        Record map for schema in azure monitor.
        :param pulumi.Input[str] from_: Record Map Key.
        :param pulumi.Input[str] to: Record Map Value.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        Record Map Key.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        Record Map Value.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class ResourceMapArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        Resource map for schema in azure monitor.
        :param pulumi.Input[str] from_: Resource Map Key.
        :param pulumi.Input[str] to: Resource Map Value.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        Resource Map Key.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        Resource Map Value.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class SchemaMapArgs:
    def __init__(__self__, *,
                 record_map: pulumi.Input[Sequence[pulumi.Input['RecordMapArgs']]],
                 resource_map: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceMapArgs']]]] = None,
                 scope_map: Optional[pulumi.Input[Sequence[pulumi.Input['ScopeMapArgs']]]] = None):
        """
        Schema map for azure monitor for logs.
        :param pulumi.Input[Sequence[pulumi.Input['RecordMapArgs']]] record_map: Record Map.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceMapArgs']]] resource_map: Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
        :param pulumi.Input[Sequence[pulumi.Input['ScopeMapArgs']]] scope_map: A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
        """
        pulumi.set(__self__, "record_map", record_map)
        if resource_map is not None:
            pulumi.set(__self__, "resource_map", resource_map)
        if scope_map is not None:
            pulumi.set(__self__, "scope_map", scope_map)

    @property
    @pulumi.getter(name="recordMap")
    def record_map(self) -> pulumi.Input[Sequence[pulumi.Input['RecordMapArgs']]]:
        """
        Record Map.
        """
        return pulumi.get(self, "record_map")

    @record_map.setter
    def record_map(self, value: pulumi.Input[Sequence[pulumi.Input['RecordMapArgs']]]):
        pulumi.set(self, "record_map", value)

    @property
    @pulumi.getter(name="resourceMap")
    def resource_map(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceMapArgs']]]]:
        """
        Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
        """
        return pulumi.get(self, "resource_map")

    @resource_map.setter
    def resource_map(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceMapArgs']]]]):
        pulumi.set(self, "resource_map", value)

    @property
    @pulumi.getter(name="scopeMap")
    def scope_map(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScopeMapArgs']]]]:
        """
        A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
        """
        return pulumi.get(self, "scope_map")

    @scope_map.setter
    def scope_map(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScopeMapArgs']]]]):
        pulumi.set(self, "scope_map", value)


@pulumi.input_type
class ScopeMapArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        Scope map for schema in azure monitor.
        :param pulumi.Input[str] from_: Scope Map Key.
        :param pulumi.Input[str] to: Scope Map Value.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        Scope Map Key.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        Scope Map Value.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 pipelines: pulumi.Input[Sequence[pulumi.Input['PipelineArgs']]],
                 persistence: Optional[pulumi.Input['PersistenceConfigurationsArgs']] = None):
        """
        Service Info.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineArgs']]] pipelines: Pipelines belonging to a given pipeline group.
        :param pulumi.Input['PersistenceConfigurationsArgs'] persistence: Persistence options to all pipelines in the instance.
        """
        pulumi.set(__self__, "pipelines", pipelines)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def pipelines(self) -> pulumi.Input[Sequence[pulumi.Input['PipelineArgs']]]:
        """
        Pipelines belonging to a given pipeline group.
        """
        return pulumi.get(self, "pipelines")

    @pipelines.setter
    def pipelines(self, value: pulumi.Input[Sequence[pulumi.Input['PipelineArgs']]]):
        pulumi.set(self, "pipelines", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['PersistenceConfigurationsArgs']]:
        """
        Persistence options to all pipelines in the instance.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['PersistenceConfigurationsArgs']]):
        pulumi.set(self, "persistence", value)


@pulumi.input_type
class SyslogReceiverArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 protocol: Optional[pulumi.Input[Union[str, 'SyslogProtocol']]] = None):
        """
        Base receiver using TCP as transport protocol.
        :param pulumi.Input[str] endpoint: Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
        :param pulumi.Input[Union[str, 'SyslogProtocol']] protocol: Protocol to parse syslog messages. Default rfc3164
        """
        pulumi.set(__self__, "endpoint", endpoint)
        if protocol is None:
            protocol = 'rfc3164'
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[Union[str, 'SyslogProtocol']]]:
        """
        Protocol to parse syslog messages. Default rfc3164
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[Union[str, 'SyslogProtocol']]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class TcpExporterArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        Base exporter using TCP as transport protocol.
        :param pulumi.Input[str] url: TCP url to export.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        TCP url to export.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class UdpReceiverArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 encoding: Optional[pulumi.Input[Union[str, 'StreamEncodingType']]] = None,
                 read_queue_length: Optional[pulumi.Input[int]] = None):
        """
        Receiver using UDP as transport protocol.
        :param pulumi.Input[str] endpoint: TCP endpoint definition. Example: 0.0.0.0:<port>.
        :param pulumi.Input[Union[str, 'StreamEncodingType']] encoding: The encoding of the stream being received.
        :param pulumi.Input[int] read_queue_length: Max read queue length.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        if encoding is None:
            encoding = 'nop'
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if read_queue_length is None:
            read_queue_length = 1000
        if read_queue_length is not None:
            pulumi.set(__self__, "read_queue_length", read_queue_length)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        TCP endpoint definition. Example: 0.0.0.0:<port>.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[Union[str, 'StreamEncodingType']]]:
        """
        The encoding of the stream being received.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[Union[str, 'StreamEncodingType']]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="readQueueLength")
    def read_queue_length(self) -> Optional[pulumi.Input[int]]:
        """
        Max read queue length.
        """
        return pulumi.get(self, "read_queue_length")

    @read_queue_length.setter
    def read_queue_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_queue_length", value)


