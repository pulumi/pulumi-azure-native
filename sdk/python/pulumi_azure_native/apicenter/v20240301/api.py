# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ApiArgs', 'Api']

@pulumi.input_type
class ApiArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[Union[str, 'ApiKind']],
                 resource_group_name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 workspace_name: pulumi.Input[str],
                 api_name: Optional[pulumi.Input[str]] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input['ContactArgs']]]] = None,
                 custom_properties: Optional[Any] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_documentation: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalDocumentationArgs']]]] = None,
                 license: Optional[pulumi.Input['LicenseArgs']] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 terms_of_service: Optional[pulumi.Input['TermsOfServiceArgs']] = None):
        """
        The set of arguments for constructing a Api resource.
        :param pulumi.Input[Union[str, 'ApiKind']] kind: Kind of API. For example, REST or GraphQL.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] service_name: The name of Azure API Center service.
        :param pulumi.Input[str] title: API title.
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        :param pulumi.Input[str] api_name: The name of the API.
        :param Any custom_properties: The custom metadata defined for API catalog entities.
        :param pulumi.Input[str] description: Description of the API.
        :param pulumi.Input['LicenseArgs'] license: The license information for the API.
        :param pulumi.Input[str] summary: Short description of the API.
        :param pulumi.Input['TermsOfServiceArgs'] terms_of_service: Terms of service for the API.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "workspace_name", workspace_name)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_documentation is not None:
            pulumi.set(__self__, "external_documentation", external_documentation)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if terms_of_service is not None:
            pulumi.set(__self__, "terms_of_service", terms_of_service)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[Union[str, 'ApiKind']]:
        """
        Kind of API. For example, REST or GraphQL.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[Union[str, 'ApiKind']]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of Azure API Center service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        API title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Input[str]:
        """
        The name of the workspace.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_name", value)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the API.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_name", value)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContactArgs']]]]:
        return pulumi.get(self, "contacts")

    @contacts.setter
    def contacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContactArgs']]]]):
        pulumi.set(self, "contacts", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Any]:
        """
        The custom metadata defined for API catalog entities.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[Any]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the API.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalDocumentation")
    def external_documentation(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalDocumentationArgs']]]]:
        return pulumi.get(self, "external_documentation")

    @external_documentation.setter
    def external_documentation(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalDocumentationArgs']]]]):
        pulumi.set(self, "external_documentation", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input['LicenseArgs']]:
        """
        The license information for the API.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input['LicenseArgs']]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        Short description of the API.
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="termsOfService")
    def terms_of_service(self) -> Optional[pulumi.Input['TermsOfServiceArgs']]:
        """
        Terms of service for the API.
        """
        return pulumi.get(self, "terms_of_service")

    @terms_of_service.setter
    def terms_of_service(self, value: Optional[pulumi.Input['TermsOfServiceArgs']]):
        pulumi.set(self, "terms_of_service", value)


class Api(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContactArgs']]]]] = None,
                 custom_properties: Optional[Any] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_documentation: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalDocumentationArgs']]]]] = None,
                 kind: Optional[pulumi.Input[Union[str, 'ApiKind']]] = None,
                 license: Optional[pulumi.Input[pulumi.InputType['LicenseArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 terms_of_service: Optional[pulumi.Input[pulumi.InputType['TermsOfServiceArgs']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        API entity.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_name: The name of the API.
        :param Any custom_properties: The custom metadata defined for API catalog entities.
        :param pulumi.Input[str] description: Description of the API.
        :param pulumi.Input[Union[str, 'ApiKind']] kind: Kind of API. For example, REST or GraphQL.
        :param pulumi.Input[pulumi.InputType['LicenseArgs']] license: The license information for the API.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] service_name: The name of Azure API Center service.
        :param pulumi.Input[str] summary: Short description of the API.
        :param pulumi.Input[pulumi.InputType['TermsOfServiceArgs']] terms_of_service: Terms of service for the API.
        :param pulumi.Input[str] title: API title.
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        API entity.

        :param str resource_name: The name of the resource.
        :param ApiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContactArgs']]]]] = None,
                 custom_properties: Optional[Any] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_documentation: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalDocumentationArgs']]]]] = None,
                 kind: Optional[pulumi.Input[Union[str, 'ApiKind']]] = None,
                 license: Optional[pulumi.Input[pulumi.InputType['LicenseArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 terms_of_service: Optional[pulumi.Input[pulumi.InputType['TermsOfServiceArgs']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiArgs.__new__(ApiArgs)

            __props__.__dict__["api_name"] = api_name
            __props__.__dict__["contacts"] = contacts
            __props__.__dict__["custom_properties"] = custom_properties
            __props__.__dict__["description"] = description
            __props__.__dict__["external_documentation"] = external_documentation
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["license"] = license
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["summary"] = summary
            __props__.__dict__["terms_of_service"] = terms_of_service
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if workspace_name is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_name'")
            __props__.__dict__["workspace_name"] = workspace_name
            __props__.__dict__["lifecycle_stage"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:apicenter:Api")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Api, __self__).__init__(
            'azure-native:apicenter/v20240301:Api',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Api':
        """
        Get an existing Api resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ApiArgs.__new__(ApiArgs)

        __props__.__dict__["contacts"] = None
        __props__.__dict__["custom_properties"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["external_documentation"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["license"] = None
        __props__.__dict__["lifecycle_stage"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["summary"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["terms_of_service"] = None
        __props__.__dict__["title"] = None
        __props__.__dict__["type"] = None
        return Api(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def contacts(self) -> pulumi.Output[Optional[Sequence['outputs.ContactResponse']]]:
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Output[Optional[Any]]:
        """
        The custom metadata defined for API catalog entities.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the API.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalDocumentation")
    def external_documentation(self) -> pulumi.Output[Optional[Sequence['outputs.ExternalDocumentationResponse']]]:
        return pulumi.get(self, "external_documentation")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        Kind of API. For example, REST or GraphQL.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[Optional['outputs.LicenseResponse']]:
        """
        The license information for the API.
        """
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="lifecycleStage")
    def lifecycle_stage(self) -> pulumi.Output[str]:
        """
        Current lifecycle stage of the API.
        """
        return pulumi.get(self, "lifecycle_stage")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Output[Optional[str]]:
        """
        Short description of the API.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="termsOfService")
    def terms_of_service(self) -> pulumi.Output[Optional['outputs.TermsOfServiceResponse']]:
        """
        Terms of service for the API.
        """
        return pulumi.get(self, "terms_of_service")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        API title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

