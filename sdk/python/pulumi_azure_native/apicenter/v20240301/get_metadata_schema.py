# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMetadataSchemaResult',
    'AwaitableGetMetadataSchemaResult',
    'get_metadata_schema',
    'get_metadata_schema_output',
]

@pulumi.output_type
class GetMetadataSchemaResult:
    """
    Metadata schema entity. Used to define metadata for the entities in API catalog.
    """
    def __init__(__self__, assigned_to=None, id=None, name=None, schema=None, system_data=None, type=None):
        if assigned_to and not isinstance(assigned_to, list):
            raise TypeError("Expected argument 'assigned_to' to be a list")
        pulumi.set(__self__, "assigned_to", assigned_to)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assignedTo")
    def assigned_to(self) -> Optional[Sequence['outputs.MetadataAssignmentResponse']]:
        return pulumi.get(self, "assigned_to")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        The schema defining the type.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetMetadataSchemaResult(GetMetadataSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataSchemaResult(
            assigned_to=self.assigned_to,
            id=self.id,
            name=self.name,
            schema=self.schema,
            system_data=self.system_data,
            type=self.type)


def get_metadata_schema(metadata_schema_name: Optional[str] = None,
                        resource_group_name: Optional[str] = None,
                        service_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataSchemaResult:
    """
    Returns details of the metadata schema.


    :param str metadata_schema_name: The name of the metadata schema.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str service_name: The name of Azure API Center service.
    """
    __args__ = dict()
    __args__['metadataSchemaName'] = metadata_schema_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:apicenter/v20240301:getMetadataSchema', __args__, opts=opts, typ=GetMetadataSchemaResult).value

    return AwaitableGetMetadataSchemaResult(
        assigned_to=pulumi.get(__ret__, 'assigned_to'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        schema=pulumi.get(__ret__, 'schema'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_metadata_schema)
def get_metadata_schema_output(metadata_schema_name: Optional[pulumi.Input[str]] = None,
                               resource_group_name: Optional[pulumi.Input[str]] = None,
                               service_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataSchemaResult]:
    """
    Returns details of the metadata schema.


    :param str metadata_schema_name: The name of the metadata schema.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str service_name: The name of Azure API Center service.
    """
    ...
