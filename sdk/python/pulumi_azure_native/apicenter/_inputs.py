# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AzureApiManagementSourceArgs',
    'AzureApiManagementSourceArgsDict',
    'ContactArgs',
    'ContactArgsDict',
    'DeploymentServerArgs',
    'DeploymentServerArgsDict',
    'EnvironmentServerArgs',
    'EnvironmentServerArgsDict',
    'ExternalDocumentationArgs',
    'ExternalDocumentationArgsDict',
    'LicenseArgs',
    'LicenseArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'MetadataAssignmentArgs',
    'MetadataAssignmentArgsDict',
    'OnboardingArgs',
    'OnboardingArgsDict',
    'TermsOfServiceArgs',
    'TermsOfServiceArgsDict',
]

MYPY = False

if not MYPY:
    class AzureApiManagementSourceArgsDict(TypedDict):
        """
        API source configuration for Azure API Management.
        """
        resource_id: pulumi.Input[_builtins.str]
        """
        API Management service resource ID.
        """
        msi_resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The resource ID of the managed identity that has access to the API Management instance.
        """
elif False:
    AzureApiManagementSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureApiManagementSourceArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 msi_resource_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        API source configuration for Azure API Management.
        :param pulumi.Input[_builtins.str] resource_id: API Management service resource ID.
        :param pulumi.Input[_builtins.str] msi_resource_id: The resource ID of the managed identity that has access to the API Management instance.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if msi_resource_id is not None:
            pulumi.set(__self__, "msi_resource_id", msi_resource_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        API Management service resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="msiResourceId")
    def msi_resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource ID of the managed identity that has access to the API Management instance.
        """
        return pulumi.get(self, "msi_resource_id")

    @msi_resource_id.setter
    def msi_resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "msi_resource_id", value)


if not MYPY:
    class ContactArgsDict(TypedDict):
        """
        Contact information
        """
        email: NotRequired[pulumi.Input[_builtins.str]]
        """
        Email address of the contact.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the contact.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        URL for the contact.
        """
elif False:
    ContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContactArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Contact information
        :param pulumi.Input[_builtins.str] email: Email address of the contact.
        :param pulumi.Input[_builtins.str] name: Name of the contact.
        :param pulumi.Input[_builtins.str] url: URL for the contact.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email address of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the contact.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for the contact.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class DeploymentServerArgsDict(TypedDict):
        """
        Server
        """
        runtime_uri: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Base runtime URLs for this deployment.
        """
elif False:
    DeploymentServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentServerArgs:
    def __init__(__self__, *,
                 runtime_uri: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Server
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] runtime_uri: Base runtime URLs for this deployment.
        """
        if runtime_uri is not None:
            pulumi.set(__self__, "runtime_uri", runtime_uri)

    @_builtins.property
    @pulumi.getter(name="runtimeUri")
    def runtime_uri(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Base runtime URLs for this deployment.
        """
        return pulumi.get(self, "runtime_uri")

    @runtime_uri.setter
    def runtime_uri(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "runtime_uri", value)


if not MYPY:
    class EnvironmentServerArgsDict(TypedDict):
        """
        Server information of the environment.
        """
        management_portal_uri: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The location of the management portal
        """
        type: NotRequired[pulumi.Input[Union[_builtins.str, 'EnvironmentServerType']]]
        """
        Type of the server that represents the environment.
        """
elif False:
    EnvironmentServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentServerArgs:
    def __init__(__self__, *,
                 management_portal_uri: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[Union[_builtins.str, 'EnvironmentServerType']]] = None):
        """
        Server information of the environment.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] management_portal_uri: The location of the management portal
        :param pulumi.Input[Union[_builtins.str, 'EnvironmentServerType']] type: Type of the server that represents the environment.
        """
        if management_portal_uri is not None:
            pulumi.set(__self__, "management_portal_uri", management_portal_uri)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="managementPortalUri")
    def management_portal_uri(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The location of the management portal
        """
        return pulumi.get(self, "management_portal_uri")

    @management_portal_uri.setter
    def management_portal_uri(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "management_portal_uri", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[_builtins.str, 'EnvironmentServerType']]]:
        """
        Type of the server that represents the environment.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[_builtins.str, 'EnvironmentServerType']]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ExternalDocumentationArgsDict(TypedDict):
        """
        Additional, external documentation for the API.
        """
        url: pulumi.Input[_builtins.str]
        """
        URL pointing to the documentation.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Description of the documentation.
        """
        title: NotRequired[pulumi.Input[_builtins.str]]
        """
        Title of the documentation.
        """
elif False:
    ExternalDocumentationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDocumentationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Additional, external documentation for the API.
        :param pulumi.Input[_builtins.str] url: URL pointing to the documentation.
        :param pulumi.Input[_builtins.str] description: Description of the documentation.
        :param pulumi.Input[_builtins.str] title: Title of the documentation.
        """
        pulumi.set(__self__, "url", url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        URL pointing to the documentation.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the documentation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Title of the documentation.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class LicenseArgsDict(TypedDict):
        """
        The license information for the API.
        """
        identifier: NotRequired[pulumi.Input[_builtins.str]]
        """
        SPDX license information for the API. The identifier field is mutually
        exclusive of the URL field.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the license.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        URL pointing to the license details. The URL field is mutually exclusive of the
        identifier field.
        """
elif False:
    LicenseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LicenseArgs:
    def __init__(__self__, *,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The license information for the API.
        :param pulumi.Input[_builtins.str] identifier: SPDX license information for the API. The identifier field is mutually
               exclusive of the URL field.
        :param pulumi.Input[_builtins.str] name: Name of the license.
        :param pulumi.Input[_builtins.str] url: URL pointing to the license details. The URL field is mutually exclusive of the
               identifier field.
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SPDX license information for the API. The identifier field is mutually
        exclusive of the URL field.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the license.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL pointing to the license details. The URL field is mutually exclusive of the
        identifier field.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[_builtins.str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[_builtins.str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[_builtins.str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[_builtins.str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[_builtins.str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class MetadataAssignmentArgsDict(TypedDict):
        """
        Assignment metadata
        """
        deprecated: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Deprecated assignment
        """
        entity: NotRequired[pulumi.Input[Union[_builtins.str, 'MetadataAssignmentEntity']]]
        """
        The entities this metadata schema component gets applied to.
        """
        required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Required assignment
        """
elif False:
    MetadataAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetadataAssignmentArgs:
    def __init__(__self__, *,
                 deprecated: Optional[pulumi.Input[_builtins.bool]] = None,
                 entity: Optional[pulumi.Input[Union[_builtins.str, 'MetadataAssignmentEntity']]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Assignment metadata
        :param pulumi.Input[_builtins.bool] deprecated: Deprecated assignment
        :param pulumi.Input[Union[_builtins.str, 'MetadataAssignmentEntity']] entity: The entities this metadata schema component gets applied to.
        :param pulumi.Input[_builtins.bool] required: Required assignment
        """
        if deprecated is not None:
            pulumi.set(__self__, "deprecated", deprecated)
        if entity is not None:
            pulumi.set(__self__, "entity", entity)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @_builtins.property
    @pulumi.getter
    def deprecated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecated assignment
        """
        return pulumi.get(self, "deprecated")

    @deprecated.setter
    def deprecated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deprecated", value)

    @_builtins.property
    @pulumi.getter
    def entity(self) -> Optional[pulumi.Input[Union[_builtins.str, 'MetadataAssignmentEntity']]]:
        """
        The entities this metadata schema component gets applied to.
        """
        return pulumi.get(self, "entity")

    @entity.setter
    def entity(self, value: Optional[pulumi.Input[Union[_builtins.str, 'MetadataAssignmentEntity']]]):
        pulumi.set(self, "entity", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Required assignment
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)


if not MYPY:
    class OnboardingArgsDict(TypedDict):
        """
        Onboarding information
        """
        developer_portal_uri: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The location of the development portal
        """
        instructions: NotRequired[pulumi.Input[_builtins.str]]
        """
        Onboarding guide.
        """
elif False:
    OnboardingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnboardingArgs:
    def __init__(__self__, *,
                 developer_portal_uri: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instructions: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Onboarding information
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] developer_portal_uri: The location of the development portal
        :param pulumi.Input[_builtins.str] instructions: Onboarding guide.
        """
        if developer_portal_uri is not None:
            pulumi.set(__self__, "developer_portal_uri", developer_portal_uri)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)

    @_builtins.property
    @pulumi.getter(name="developerPortalUri")
    def developer_portal_uri(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The location of the development portal
        """
        return pulumi.get(self, "developer_portal_uri")

    @developer_portal_uri.setter
    def developer_portal_uri(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "developer_portal_uri", value)

    @_builtins.property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Onboarding guide.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instructions", value)


if not MYPY:
    class TermsOfServiceArgsDict(TypedDict):
        """
        Terms of service for the API.
        """
        url: pulumi.Input[_builtins.str]
        """
        URL pointing to the terms of service.
        """
elif False:
    TermsOfServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TermsOfServiceArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[_builtins.str]):
        """
        Terms of service for the API.
        :param pulumi.Input[_builtins.str] url: URL pointing to the terms of service.
        """
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        URL pointing to the terms of service.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)


