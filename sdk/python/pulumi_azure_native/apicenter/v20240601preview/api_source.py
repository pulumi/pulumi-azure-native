# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ApiSourceArgs', 'ApiSource']

@pulumi.input_type
class ApiSourceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 workspace_name: pulumi.Input[str],
                 api_source_name: Optional[pulumi.Input[str]] = None,
                 azure_api_management_source: Optional[pulumi.Input['AzureApiManagementSourceArgs']] = None,
                 import_specification: Optional[pulumi.Input[Union[str, 'ImportSpecificationOptions']]] = None,
                 target_environment_id: Optional[pulumi.Input[str]] = None,
                 target_lifecycle_stage: Optional[pulumi.Input[Union[str, 'LifecycleStage']]] = None):
        """
        The set of arguments for constructing a ApiSource resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] service_name: The name of Azure API Center service.
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        :param pulumi.Input[str] api_source_name: The name of the API.
        :param pulumi.Input['AzureApiManagementSourceArgs'] azure_api_management_source: API source configuration for Azure API Management.
        :param pulumi.Input[Union[str, 'ImportSpecificationOptions']] import_specification: Indicates if the specification should be imported along with metadata.
        :param pulumi.Input[str] target_environment_id: The target environment resource ID.
        :param pulumi.Input[Union[str, 'LifecycleStage']] target_lifecycle_stage: The target lifecycle stage.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "workspace_name", workspace_name)
        if api_source_name is not None:
            pulumi.set(__self__, "api_source_name", api_source_name)
        if azure_api_management_source is not None:
            pulumi.set(__self__, "azure_api_management_source", azure_api_management_source)
        if import_specification is None:
            import_specification = 'ondemand'
        if import_specification is not None:
            pulumi.set(__self__, "import_specification", import_specification)
        if target_environment_id is not None:
            pulumi.set(__self__, "target_environment_id", target_environment_id)
        if target_lifecycle_stage is not None:
            pulumi.set(__self__, "target_lifecycle_stage", target_lifecycle_stage)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of Azure API Center service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Input[str]:
        """
        The name of the workspace.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_name", value)

    @property
    @pulumi.getter(name="apiSourceName")
    def api_source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the API.
        """
        return pulumi.get(self, "api_source_name")

    @api_source_name.setter
    def api_source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_source_name", value)

    @property
    @pulumi.getter(name="azureApiManagementSource")
    def azure_api_management_source(self) -> Optional[pulumi.Input['AzureApiManagementSourceArgs']]:
        """
        API source configuration for Azure API Management.
        """
        return pulumi.get(self, "azure_api_management_source")

    @azure_api_management_source.setter
    def azure_api_management_source(self, value: Optional[pulumi.Input['AzureApiManagementSourceArgs']]):
        pulumi.set(self, "azure_api_management_source", value)

    @property
    @pulumi.getter(name="importSpecification")
    def import_specification(self) -> Optional[pulumi.Input[Union[str, 'ImportSpecificationOptions']]]:
        """
        Indicates if the specification should be imported along with metadata.
        """
        return pulumi.get(self, "import_specification")

    @import_specification.setter
    def import_specification(self, value: Optional[pulumi.Input[Union[str, 'ImportSpecificationOptions']]]):
        pulumi.set(self, "import_specification", value)

    @property
    @pulumi.getter(name="targetEnvironmentId")
    def target_environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target environment resource ID.
        """
        return pulumi.get(self, "target_environment_id")

    @target_environment_id.setter
    def target_environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_environment_id", value)

    @property
    @pulumi.getter(name="targetLifecycleStage")
    def target_lifecycle_stage(self) -> Optional[pulumi.Input[Union[str, 'LifecycleStage']]]:
        """
        The target lifecycle stage.
        """
        return pulumi.get(self, "target_lifecycle_stage")

    @target_lifecycle_stage.setter
    def target_lifecycle_stage(self, value: Optional[pulumi.Input[Union[str, 'LifecycleStage']]]):
        pulumi.set(self, "target_lifecycle_stage", value)


class ApiSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_source_name: Optional[pulumi.Input[str]] = None,
                 azure_api_management_source: Optional[pulumi.Input[Union['AzureApiManagementSourceArgs', 'AzureApiManagementSourceArgsDict']]] = None,
                 import_specification: Optional[pulumi.Input[Union[str, 'ImportSpecificationOptions']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 target_environment_id: Optional[pulumi.Input[str]] = None,
                 target_lifecycle_stage: Optional[pulumi.Input[Union[str, 'LifecycleStage']]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        API source entity.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_source_name: The name of the API.
        :param pulumi.Input[Union['AzureApiManagementSourceArgs', 'AzureApiManagementSourceArgsDict']] azure_api_management_source: API source configuration for Azure API Management.
        :param pulumi.Input[Union[str, 'ImportSpecificationOptions']] import_specification: Indicates if the specification should be imported along with metadata.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] service_name: The name of Azure API Center service.
        :param pulumi.Input[str] target_environment_id: The target environment resource ID.
        :param pulumi.Input[Union[str, 'LifecycleStage']] target_lifecycle_stage: The target lifecycle stage.
        :param pulumi.Input[str] workspace_name: The name of the workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        API source entity.

        :param str resource_name: The name of the resource.
        :param ApiSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_source_name: Optional[pulumi.Input[str]] = None,
                 azure_api_management_source: Optional[pulumi.Input[Union['AzureApiManagementSourceArgs', 'AzureApiManagementSourceArgsDict']]] = None,
                 import_specification: Optional[pulumi.Input[Union[str, 'ImportSpecificationOptions']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 target_environment_id: Optional[pulumi.Input[str]] = None,
                 target_lifecycle_stage: Optional[pulumi.Input[Union[str, 'LifecycleStage']]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiSourceArgs.__new__(ApiSourceArgs)

            __props__.__dict__["api_source_name"] = api_source_name
            __props__.__dict__["azure_api_management_source"] = azure_api_management_source
            if import_specification is None:
                import_specification = 'ondemand'
            __props__.__dict__["import_specification"] = import_specification
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["target_environment_id"] = target_environment_id
            __props__.__dict__["target_lifecycle_stage"] = target_lifecycle_stage
            if workspace_name is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_name'")
            __props__.__dict__["workspace_name"] = workspace_name
            __props__.__dict__["link_state"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:apicenter:ApiSource")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ApiSource, __self__).__init__(
            'azure-native:apicenter/v20240601preview:ApiSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ApiSource':
        """
        Get an existing ApiSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ApiSourceArgs.__new__(ApiSourceArgs)

        __props__.__dict__["azure_api_management_source"] = None
        __props__.__dict__["import_specification"] = None
        __props__.__dict__["link_state"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["target_environment_id"] = None
        __props__.__dict__["target_lifecycle_stage"] = None
        __props__.__dict__["type"] = None
        return ApiSource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiManagementSource")
    def azure_api_management_source(self) -> pulumi.Output[Optional['outputs.AzureApiManagementSourceResponse']]:
        """
        API source configuration for Azure API Management.
        """
        return pulumi.get(self, "azure_api_management_source")

    @property
    @pulumi.getter(name="importSpecification")
    def import_specification(self) -> pulumi.Output[Optional[str]]:
        """
        Indicates if the specification should be imported along with metadata.
        """
        return pulumi.get(self, "import_specification")

    @property
    @pulumi.getter(name="linkState")
    def link_state(self) -> pulumi.Output['outputs.LinkStateResponse']:
        """
        The state of the API source link
        """
        return pulumi.get(self, "link_state")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetEnvironmentId")
    def target_environment_id(self) -> pulumi.Output[Optional[str]]:
        """
        The target environment resource ID.
        """
        return pulumi.get(self, "target_environment_id")

    @property
    @pulumi.getter(name="targetLifecycleStage")
    def target_lifecycle_stage(self) -> pulumi.Output[Optional[str]]:
        """
        The target lifecycle stage.
        """
        return pulumi.get(self, "target_lifecycle_stage")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

