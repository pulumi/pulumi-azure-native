# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AFDTargetGroupArgs', 'AFDTargetGroup']

@pulumi.input_type
class AFDTargetGroupArgs:
    def __init__(__self__, *,
                 profile_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 target_endpoints: pulumi.Input[Sequence[pulumi.Input['TargetEndpointArgs']]],
                 target_group_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AFDTargetGroup resource.
        :param pulumi.Input[str] profile_name: Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[Sequence[pulumi.Input['TargetEndpointArgs']]] target_endpoints: TargetEndpoint list referenced by this target group.
        :param pulumi.Input[str] target_group_name: Name of the Target Group under the profile.
        """
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "target_endpoints", target_endpoints)
        if target_group_name is not None:
            pulumi.set(__self__, "target_group_name", target_group_name)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> pulumi.Input[str]:
        """
        Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
        """
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Name of the Resource group within the Azure subscription.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="targetEndpoints")
    def target_endpoints(self) -> pulumi.Input[Sequence[pulumi.Input['TargetEndpointArgs']]]:
        """
        TargetEndpoint list referenced by this target group.
        """
        return pulumi.get(self, "target_endpoints")

    @target_endpoints.setter
    def target_endpoints(self, value: pulumi.Input[Sequence[pulumi.Input['TargetEndpointArgs']]]):
        pulumi.set(self, "target_endpoints", value)

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Target Group under the profile.
        """
        return pulumi.get(self, "target_group_name")

    @target_group_name.setter
    def target_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_name", value)


class AFDTargetGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 profile_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetEndpointArgs', 'TargetEndpointArgsDict']]]]] = None,
                 target_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        AFDTargetGroup comprises a list of Endpoints that is used for tunnelling protocols to allow certain traffic.
        Azure REST API version: 2024-06-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] profile_name: Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TargetEndpointArgs', 'TargetEndpointArgsDict']]]] target_endpoints: TargetEndpoint list referenced by this target group.
        :param pulumi.Input[str] target_group_name: Name of the Target Group under the profile.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AFDTargetGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        AFDTargetGroup comprises a list of Endpoints that is used for tunnelling protocols to allow certain traffic.
        Azure REST API version: 2024-06-01-preview.

        :param str resource_name: The name of the resource.
        :param AFDTargetGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AFDTargetGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 profile_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetEndpointArgs', 'TargetEndpointArgsDict']]]]] = None,
                 target_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AFDTargetGroupArgs.__new__(AFDTargetGroupArgs)

            if profile_name is None and not opts.urn:
                raise TypeError("Missing required property 'profile_name'")
            __props__.__dict__["profile_name"] = profile_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if target_endpoints is None and not opts.urn:
                raise TypeError("Missing required property 'target_endpoints'")
            __props__.__dict__["target_endpoints"] = target_endpoints
            __props__.__dict__["target_group_name"] = target_group_name
            __props__.__dict__["deployment_status"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:cdn/v20240601preview:AFDTargetGroup")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(AFDTargetGroup, __self__).__init__(
            'azure-native:cdn:AFDTargetGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AFDTargetGroup':
        """
        Get an existing AFDTargetGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AFDTargetGroupArgs.__new__(AFDTargetGroupArgs)

        __props__.__dict__["deployment_status"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["target_endpoints"] = None
        __props__.__dict__["type"] = None
        return AFDTargetGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning status
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Read only system data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetEndpoints")
    def target_endpoints(self) -> pulumi.Output[Sequence['outputs.TargetEndpointResponse']]:
        """
        TargetEndpoint list referenced by this target group.
        """
        return pulumi.get(self, "target_endpoints")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

