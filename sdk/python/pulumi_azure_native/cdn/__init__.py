# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .afd_custom_domain import *
from .afd_endpoint import *
from .afd_origin import *
from .afd_origin_group import *
from .custom_domain import *
from .endpoint import *
from .get_afd_custom_domain import *
from .get_afd_endpoint import *
from .get_afd_origin import *
from .get_afd_origin_group import *
from .get_custom_domain import *
from .get_endpoint import *
from .get_origin import *
from .get_origin_group import *
from .get_policy import *
from .get_profile import *
from .get_profile_supported_optimization_types import *
from .get_route import *
from .get_rule import *
from .get_rule_set import *
from .get_secret import *
from .get_security_policy import *
from .origin import *
from .origin_group import *
from .policy import *
from .profile import *
from .route import *
from .rule import *
from .rule_set import *
from .secret import *
from .security_policy import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    v20150601,
    v20160402,
    v20161002,
    v20170402,
    v20171012,
    v20190415,
    v20190615,
    v20190615preview,
    v20191231,
    v20200331,
    v20200415,
    v20200901,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:cdn:AFDCustomDomain":
                return AFDCustomDomain(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:AFDEndpoint":
                return AFDEndpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:AFDOrigin":
                return AFDOrigin(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:AFDOriginGroup":
                return AFDOriginGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:CustomDomain":
                return CustomDomain(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Endpoint":
                return Endpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Origin":
                return Origin(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:OriginGroup":
                return OriginGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Policy":
                return Policy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Profile":
                return Profile(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Route":
                return Route(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Rule":
                return Rule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:RuleSet":
                return RuleSet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:Secret":
                return Secret(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cdn:SecurityPolicy":
                return SecurityPolicy(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "cdn", _module_instance)

_register_module()
