# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTunnelPolicyResult',
    'AwaitableGetTunnelPolicyResult',
    'get_tunnel_policy',
    'get_tunnel_policy_output',
]

@pulumi.output_type
class GetTunnelPolicyResult:
    """
    Tunnel Policy maps domains to target endpoints to process traffic over the tunnelling protocol.
    """
    def __init__(__self__, deployment_status=None, domains=None, id=None, name=None, provisioning_state=None, system_data=None, target_groups=None, tunnel_type=None, type=None):
        if deployment_status and not isinstance(deployment_status, str):
            raise TypeError("Expected argument 'deployment_status' to be a str")
        pulumi.set(__self__, "deployment_status", deployment_status)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if target_groups and not isinstance(target_groups, list):
            raise TypeError("Expected argument 'target_groups' to be a list")
        pulumi.set(__self__, "target_groups", target_groups)
        if tunnel_type and not isinstance(tunnel_type, str):
            raise TypeError("Expected argument 'tunnel_type' to be a str")
        pulumi.set(__self__, "tunnel_type", tunnel_type)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> str:
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.ActivatedResourceReferenceResponse']:
        """
        Domains referenced by this tunnel policy.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning status
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Read only system data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Optional[Sequence['outputs.ResourceReferenceResponse']]:
        """
        Target Groups referenced by this tunnel policy.
        """
        return pulumi.get(self, "target_groups")

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> Optional[str]:
        """
        Protocol this tunnel will use for allowing traffic to backends.
        """
        return pulumi.get(self, "tunnel_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetTunnelPolicyResult(GetTunnelPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTunnelPolicyResult(
            deployment_status=self.deployment_status,
            domains=self.domains,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            target_groups=self.target_groups,
            tunnel_type=self.tunnel_type,
            type=self.type)


def get_tunnel_policy(profile_name: Optional[str] = None,
                      resource_group_name: Optional[str] = None,
                      tunnel_policy_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTunnelPolicyResult:
    """
    Gets an existing tunnel policy within a profile.
    Azure REST API version: 2024-06-01-preview.


    :param str profile_name: Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    :param str tunnel_policy_name: Name of the Tunnel Policy under the profile.
    """
    __args__ = dict()
    __args__['profileName'] = profile_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['tunnelPolicyName'] = tunnel_policy_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:cdn:getTunnelPolicy', __args__, opts=opts, typ=GetTunnelPolicyResult).value

    return AwaitableGetTunnelPolicyResult(
        deployment_status=pulumi.get(__ret__, 'deployment_status'),
        domains=pulumi.get(__ret__, 'domains'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        target_groups=pulumi.get(__ret__, 'target_groups'),
        tunnel_type=pulumi.get(__ret__, 'tunnel_type'),
        type=pulumi.get(__ret__, 'type'))
def get_tunnel_policy_output(profile_name: Optional[pulumi.Input[str]] = None,
                             resource_group_name: Optional[pulumi.Input[str]] = None,
                             tunnel_policy_name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTunnelPolicyResult]:
    """
    Gets an existing tunnel policy within a profile.
    Azure REST API version: 2024-06-01-preview.


    :param str profile_name: Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
    :param str resource_group_name: Name of the Resource group within the Azure subscription.
    :param str tunnel_policy_name: Name of the Tunnel Policy under the profile.
    """
    __args__ = dict()
    __args__['profileName'] = profile_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['tunnelPolicyName'] = tunnel_policy_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:cdn:getTunnelPolicy', __args__, opts=opts, typ=GetTunnelPolicyResult)
    return __ret__.apply(lambda __response__: GetTunnelPolicyResult(
        deployment_status=pulumi.get(__response__, 'deployment_status'),
        domains=pulumi.get(__response__, 'domains'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        target_groups=pulumi.get(__response__, 'target_groups'),
        tunnel_type=pulumi.get(__response__, 'tunnel_type'),
        type=pulumi.get(__response__, 'type')))
