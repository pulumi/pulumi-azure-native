# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomDomainHttpsArgs', 'CustomDomainHttps']

@pulumi.input_type
class CustomDomainHttpsArgs:
    def __init__(__self__, *,
                 custom_domain_id: pulumi.Input[builtins.str],
                 https_enabled: pulumi.Input[builtins.bool],
                 https_configuration: Optional[pulumi.Input['HttpsConfigurationArgs']] = None):
        """
        The set of arguments for constructing a CustomDomainHttps resource.
        :param pulumi.Input[builtins.str] custom_domain_id: The resource ID of the CDN Custom Domain.
        :param pulumi.Input[builtins.bool] https_enabled: Whether HTTPS is enabled on the custom domain.
        :param pulumi.Input['HttpsConfigurationArgs'] https_configuration: HTTPS configuration when HTTPS is enabled.
        """
        pulumi.set(__self__, "custom_domain_id", custom_domain_id)
        pulumi.set(__self__, "https_enabled", https_enabled)
        if https_configuration is not None:
            pulumi.set(__self__, "https_configuration", https_configuration)

    @property
    @pulumi.getter(name="customDomainId")
    def custom_domain_id(self) -> pulumi.Input[builtins.str]:
        """
        The resource ID of the CDN Custom Domain.
        """
        return pulumi.get(self, "custom_domain_id")

    @custom_domain_id.setter
    def custom_domain_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "custom_domain_id", value)

    @property
    @pulumi.getter(name="httpsEnabled")
    def https_enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether HTTPS is enabled on the custom domain.
        """
        return pulumi.get(self, "https_enabled")

    @https_enabled.setter
    def https_enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "https_enabled", value)

    @property
    @pulumi.getter(name="httpsConfiguration")
    def https_configuration(self) -> Optional[pulumi.Input['HttpsConfigurationArgs']]:
        """
        HTTPS configuration when HTTPS is enabled.
        """
        return pulumi.get(self, "https_configuration")

    @https_configuration.setter
    def https_configuration(self, value: Optional[pulumi.Input['HttpsConfigurationArgs']]):
        pulumi.set(self, "https_configuration", value)


@pulumi.type_token("azure-native:cdn:CustomDomainHttps")
class CustomDomainHttps(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_domain_id: Optional[pulumi.Input[builtins.str]] = None,
                 https_configuration: Optional[pulumi.Input[Union['HttpsConfigurationArgs', 'HttpsConfigurationArgsDict']]] = None,
                 https_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Enables or disables HTTPS on a CDN custom domain.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] custom_domain_id: The resource ID of the CDN Custom Domain.
        :param pulumi.Input[Union['HttpsConfigurationArgs', 'HttpsConfigurationArgsDict']] https_configuration: HTTPS configuration when HTTPS is enabled.
        :param pulumi.Input[builtins.bool] https_enabled: Whether HTTPS is enabled on the custom domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomDomainHttpsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Enables or disables HTTPS on a CDN custom domain.

        :param str resource_name: The name of the resource.
        :param CustomDomainHttpsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomDomainHttpsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_domain_id: Optional[pulumi.Input[builtins.str]] = None,
                 https_configuration: Optional[pulumi.Input[Union['HttpsConfigurationArgs', 'HttpsConfigurationArgsDict']]] = None,
                 https_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomDomainHttpsArgs.__new__(CustomDomainHttpsArgs)

            if custom_domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'custom_domain_id'")
            __props__.__dict__["custom_domain_id"] = custom_domain_id
            __props__.__dict__["https_configuration"] = https_configuration
            if https_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'https_enabled'")
            __props__.__dict__["https_enabled"] = https_enabled
        super(CustomDomainHttps, __self__).__init__(
            'azure-native:cdn:CustomDomainHttps',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CustomDomainHttps':
        """
        Get an existing CustomDomainHttps resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CustomDomainHttpsArgs.__new__(CustomDomainHttpsArgs)

        __props__.__dict__["custom_domain_id"] = None
        __props__.__dict__["https_configuration"] = None
        __props__.__dict__["https_enabled"] = None
        return CustomDomainHttps(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customDomainId")
    def custom_domain_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The resource ID of the CDN Custom Domain.
        """
        return pulumi.get(self, "custom_domain_id")

    @property
    @pulumi.getter(name="httpsConfiguration")
    def https_configuration(self) -> pulumi.Output[Optional['outputs.HttpsConfiguration']]:
        """
        HTTPS configuration when HTTPS is enabled.
        """
        return pulumi.get(self, "https_configuration")

    @property
    @pulumi.getter(name="httpsEnabled")
    def https_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Whether HTTPS is enabled on the custom domain.
        """
        return pulumi.get(self, "https_enabled")

