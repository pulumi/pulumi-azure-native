# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['TunnelPolicyArgs', 'TunnelPolicy']

@pulumi.input_type
class TunnelPolicyArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[Sequence[pulumi.Input['ActivatedResourceReferenceArgs']]],
                 profile_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 target_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceReferenceArgs']]]] = None,
                 tunnel_policy_name: Optional[pulumi.Input[str]] = None,
                 tunnel_type: Optional[pulumi.Input[Union[str, 'TunnelType']]] = None):
        """
        The set of arguments for constructing a TunnelPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['ActivatedResourceReferenceArgs']]] domains: Domains referenced by this tunnel policy.
        :param pulumi.Input[str] profile_name: Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceReferenceArgs']]] target_groups: Target Groups referenced by this tunnel policy.
        :param pulumi.Input[str] tunnel_policy_name: Name of the Tunnel Policy under the profile.
        :param pulumi.Input[Union[str, 'TunnelType']] tunnel_type: Protocol this tunnel will use for allowing traffic to backends.
        """
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if target_groups is not None:
            pulumi.set(__self__, "target_groups", target_groups)
        if tunnel_policy_name is not None:
            pulumi.set(__self__, "tunnel_policy_name", tunnel_policy_name)
        if tunnel_type is not None:
            pulumi.set(__self__, "tunnel_type", tunnel_type)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input['ActivatedResourceReferenceArgs']]]:
        """
        Domains referenced by this tunnel policy.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input['ActivatedResourceReferenceArgs']]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> pulumi.Input[str]:
        """
        Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
        """
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Name of the Resource group within the Azure subscription.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceReferenceArgs']]]]:
        """
        Target Groups referenced by this tunnel policy.
        """
        return pulumi.get(self, "target_groups")

    @target_groups.setter
    def target_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceReferenceArgs']]]]):
        pulumi.set(self, "target_groups", value)

    @property
    @pulumi.getter(name="tunnelPolicyName")
    def tunnel_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Tunnel Policy under the profile.
        """
        return pulumi.get(self, "tunnel_policy_name")

    @tunnel_policy_name.setter
    def tunnel_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_policy_name", value)

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> Optional[pulumi.Input[Union[str, 'TunnelType']]]:
        """
        Protocol this tunnel will use for allowing traffic to backends.
        """
        return pulumi.get(self, "tunnel_type")

    @tunnel_type.setter
    def tunnel_type(self, value: Optional[pulumi.Input[Union[str, 'TunnelType']]]):
        pulumi.set(self, "tunnel_type", value)


class TunnelPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ActivatedResourceReferenceArgs', 'ActivatedResourceReferenceArgsDict']]]]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceReferenceArgs', 'ResourceReferenceArgsDict']]]]] = None,
                 tunnel_policy_name: Optional[pulumi.Input[str]] = None,
                 tunnel_type: Optional[pulumi.Input[Union[str, 'TunnelType']]] = None,
                 __props__=None):
        """
        Tunnel Policy maps domains to target endpoints to process traffic over the tunnelling protocol.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ActivatedResourceReferenceArgs', 'ActivatedResourceReferenceArgsDict']]]] domains: Domains referenced by this tunnel policy.
        :param pulumi.Input[str] profile_name: Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
        :param pulumi.Input[str] resource_group_name: Name of the Resource group within the Azure subscription.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceReferenceArgs', 'ResourceReferenceArgsDict']]]] target_groups: Target Groups referenced by this tunnel policy.
        :param pulumi.Input[str] tunnel_policy_name: Name of the Tunnel Policy under the profile.
        :param pulumi.Input[Union[str, 'TunnelType']] tunnel_type: Protocol this tunnel will use for allowing traffic to backends.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TunnelPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Tunnel Policy maps domains to target endpoints to process traffic over the tunnelling protocol.

        :param str resource_name: The name of the resource.
        :param TunnelPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TunnelPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ActivatedResourceReferenceArgs', 'ActivatedResourceReferenceArgsDict']]]]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceReferenceArgs', 'ResourceReferenceArgsDict']]]]] = None,
                 tunnel_policy_name: Optional[pulumi.Input[str]] = None,
                 tunnel_type: Optional[pulumi.Input[Union[str, 'TunnelType']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TunnelPolicyArgs.__new__(TunnelPolicyArgs)

            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            if profile_name is None and not opts.urn:
                raise TypeError("Missing required property 'profile_name'")
            __props__.__dict__["profile_name"] = profile_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["target_groups"] = target_groups
            __props__.__dict__["tunnel_policy_name"] = tunnel_policy_name
            __props__.__dict__["tunnel_type"] = tunnel_type
            __props__.__dict__["deployment_status"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:cdn:TunnelPolicy")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(TunnelPolicy, __self__).__init__(
            'azure-native:cdn/v20240601preview:TunnelPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TunnelPolicy':
        """
        Get an existing TunnelPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TunnelPolicyArgs.__new__(TunnelPolicyArgs)

        __props__.__dict__["deployment_status"] = None
        __props__.__dict__["domains"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["target_groups"] = None
        __props__.__dict__["tunnel_type"] = None
        __props__.__dict__["type"] = None
        return TunnelPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence['outputs.ActivatedResourceReferenceResponse']]:
        """
        Domains referenced by this tunnel policy.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning status
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Read only system data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ResourceReferenceResponse']]]:
        """
        Target Groups referenced by this tunnel policy.
        """
        return pulumi.get(self, "target_groups")

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol this tunnel will use for allowing traffic to backends.
        """
        return pulumi.get(self, "tunnel_type")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

