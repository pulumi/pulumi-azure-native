# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetEdgeActionExecutionFilterResult',
    'AwaitableGetEdgeActionExecutionFilterResult',
    'get_edge_action_execution_filter',
    'get_edge_action_execution_filter_output',
]

@pulumi.output_type
class GetEdgeActionExecutionFilterResult:
    """
    Concrete tracked resource types can be created by aliasing this type using a specific property type.
    """
    def __init__(__self__, execution_filter_identifier_header_name=None, execution_filter_identifier_header_value=None, id=None, last_update_time=None, location=None, name=None, provisioning_state=None, system_data=None, tags=None, type=None, version_id=None):
        if execution_filter_identifier_header_name and not isinstance(execution_filter_identifier_header_name, str):
            raise TypeError("Expected argument 'execution_filter_identifier_header_name' to be a str")
        pulumi.set(__self__, "execution_filter_identifier_header_name", execution_filter_identifier_header_name)
        if execution_filter_identifier_header_value and not isinstance(execution_filter_identifier_header_value, str):
            raise TypeError("Expected argument 'execution_filter_identifier_header_value' to be a str")
        pulumi.set(__self__, "execution_filter_identifier_header_value", execution_filter_identifier_header_value)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_update_time and not isinstance(last_update_time, str):
            raise TypeError("Expected argument 'last_update_time' to be a str")
        pulumi.set(__self__, "last_update_time", last_update_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version_id and not isinstance(version_id, str):
            raise TypeError("Expected argument 'version_id' to be a str")
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="executionFilterIdentifierHeaderName")
    def execution_filter_identifier_header_name(self) -> str:
        """
        Custom Header Key associated with the execution filter
        """
        return pulumi.get(self, "execution_filter_identifier_header_name")

    @property
    @pulumi.getter(name="executionFilterIdentifierHeaderValue")
    def execution_filter_identifier_header_value(self) -> str:
        """
        Custom Header Value associated with the execution filter
        """
        return pulumi.get(self, "execution_filter_identifier_header_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time in UTC for the execution filter
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        The referenced versionId of the edgeAction version
        """
        return pulumi.get(self, "version_id")


class AwaitableGetEdgeActionExecutionFilterResult(GetEdgeActionExecutionFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgeActionExecutionFilterResult(
            execution_filter_identifier_header_name=self.execution_filter_identifier_header_name,
            execution_filter_identifier_header_value=self.execution_filter_identifier_header_value,
            id=self.id,
            last_update_time=self.last_update_time,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            version_id=self.version_id)


def get_edge_action_execution_filter(edge_action_name: Optional[str] = None,
                                     execution_filter: Optional[str] = None,
                                     resource_group_name: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEdgeActionExecutionFilterResult:
    """
    Get EdgeActionExecutionFilter resource


    :param str edge_action_name: The name of the Edge Action
    :param str execution_filter: The name of the execution filter
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['edgeActionName'] = edge_action_name
    __args__['executionFilter'] = execution_filter
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:cdn/v20240722preview:getEdgeActionExecutionFilter', __args__, opts=opts, typ=GetEdgeActionExecutionFilterResult).value

    return AwaitableGetEdgeActionExecutionFilterResult(
        execution_filter_identifier_header_name=pulumi.get(__ret__, 'execution_filter_identifier_header_name'),
        execution_filter_identifier_header_value=pulumi.get(__ret__, 'execution_filter_identifier_header_value'),
        id=pulumi.get(__ret__, 'id'),
        last_update_time=pulumi.get(__ret__, 'last_update_time'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        version_id=pulumi.get(__ret__, 'version_id'))
def get_edge_action_execution_filter_output(edge_action_name: Optional[pulumi.Input[str]] = None,
                                            execution_filter: Optional[pulumi.Input[str]] = None,
                                            resource_group_name: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEdgeActionExecutionFilterResult]:
    """
    Get EdgeActionExecutionFilter resource


    :param str edge_action_name: The name of the Edge Action
    :param str execution_filter: The name of the execution filter
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['edgeActionName'] = edge_action_name
    __args__['executionFilter'] = execution_filter
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:cdn/v20240722preview:getEdgeActionExecutionFilter', __args__, opts=opts, typ=GetEdgeActionExecutionFilterResult)
    return __ret__.apply(lambda __response__: GetEdgeActionExecutionFilterResult(
        execution_filter_identifier_header_name=pulumi.get(__response__, 'execution_filter_identifier_header_name'),
        execution_filter_identifier_header_value=pulumi.get(__response__, 'execution_filter_identifier_header_value'),
        id=pulumi.get(__response__, 'id'),
        last_update_time=pulumi.get(__response__, 'last_update_time'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        version_id=pulumi.get(__response__, 'version_id')))
