# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['EdgeActionVersionArgs', 'EdgeActionVersion']

@pulumi.input_type
class EdgeActionVersionArgs:
    def __init__(__self__, *,
                 deployment_type: pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']],
                 edge_action_name: pulumi.Input[str],
                 is_default_version: pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']],
                 resource_group_name: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgeActionVersion resource.
        :param pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']] deployment_type: The deployment type
        :param pulumi.Input[str] edge_action_name: The name of the Edge Action
        :param pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']] is_default_version: The active state
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] version: The name of the Edge Action version
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "edge_action_name", edge_action_name)
        pulumi.set(__self__, "is_default_version", is_default_version)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']]:
        """
        The deployment type
        """
        return pulumi.get(self, "deployment_type")

    @deployment_type.setter
    def deployment_type(self, value: pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']]):
        pulumi.set(self, "deployment_type", value)

    @property
    @pulumi.getter(name="edgeActionName")
    def edge_action_name(self) -> pulumi.Input[str]:
        """
        The name of the Edge Action
        """
        return pulumi.get(self, "edge_action_name")

    @edge_action_name.setter
    def edge_action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "edge_action_name", value)

    @property
    @pulumi.getter(name="isDefaultVersion")
    def is_default_version(self) -> pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']]:
        """
        The active state
        """
        return pulumi.get(self, "is_default_version")

    @is_default_version.setter
    def is_default_version(self, value: pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']]):
        pulumi.set(self, "is_default_version", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Edge Action version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class EdgeActionVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment_type: Optional[pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']]] = None,
                 edge_action_name: Optional[pulumi.Input[str]] = None,
                 is_default_version: Optional[pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Concrete tracked resource types can be created by aliasing this type using a specific property type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']] deployment_type: The deployment type
        :param pulumi.Input[str] edge_action_name: The name of the Edge Action
        :param pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']] is_default_version: The active state
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] version: The name of the Edge Action version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgeActionVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Concrete tracked resource types can be created by aliasing this type using a specific property type.

        :param str resource_name: The name of the resource.
        :param EdgeActionVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgeActionVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment_type: Optional[pulumi.Input[Union[str, 'EdgeActionVersionDeploymentType']]] = None,
                 edge_action_name: Optional[pulumi.Input[str]] = None,
                 is_default_version: Optional[pulumi.Input[Union[str, 'EdgeActionIsDefaultVersion']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgeActionVersionArgs.__new__(EdgeActionVersionArgs)

            if deployment_type is None and not opts.urn:
                raise TypeError("Missing required property 'deployment_type'")
            __props__.__dict__["deployment_type"] = deployment_type
            if edge_action_name is None and not opts.urn:
                raise TypeError("Missing required property 'edge_action_name'")
            __props__.__dict__["edge_action_name"] = edge_action_name
            if is_default_version is None and not opts.urn:
                raise TypeError("Missing required property 'is_default_version'")
            __props__.__dict__["is_default_version"] = is_default_version
            __props__.__dict__["location"] = location
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["version"] = version
            __props__.__dict__["last_package_update_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["validation_status"] = None
        super(EdgeActionVersion, __self__).__init__(
            'azure-native:cdn/v20240722preview:EdgeActionVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'EdgeActionVersion':
        """
        Get an existing EdgeActionVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EdgeActionVersionArgs.__new__(EdgeActionVersionArgs)

        __props__.__dict__["deployment_type"] = None
        __props__.__dict__["is_default_version"] = None
        __props__.__dict__["last_package_update_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["validation_status"] = None
        return EdgeActionVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> pulumi.Output[str]:
        """
        The deployment type
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="isDefaultVersion")
    def is_default_version(self) -> pulumi.Output[str]:
        """
        The active state
        """
        return pulumi.get(self, "is_default_version")

    @property
    @pulumi.getter(name="lastPackageUpdateTime")
    def last_package_update_time(self) -> pulumi.Output[str]:
        """
        The last update time in UTC for package update
        """
        return pulumi.get(self, "last_package_update_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationStatus")
    def validation_status(self) -> pulumi.Output[str]:
        """
        The validation status
        """
        return pulumi.get(self, "validation_status")

