# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetKnowledgeSourceResult',
    'AwaitableGetKnowledgeSourceResult',
    'get_knowledge_source',
    'get_knowledge_source_output',
]

@pulumi.output_type
class GetKnowledgeSourceResult:
    """
    Defines a knowledge source resource for a web agent.
    """
    def __init__(__self__, azure_api_version=None, description=None, id=None, last_refreshed_time=None, name=None, provisioning_state=None, source_type=None, system_data=None, type=None, update_frequency=None, url=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_refreshed_time and not isinstance(last_refreshed_time, str):
            raise TypeError("Expected argument 'last_refreshed_time' to be a str")
        pulumi.set(__self__, "last_refreshed_time", last_refreshed_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_frequency and not isinstance(update_frequency, str):
            raise TypeError("Expected argument 'update_frequency' to be a str")
        pulumi.set(__self__, "update_frequency", update_frequency)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Description of the knowledge source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRefreshedTime")
    def last_refreshed_time(self) -> builtins.str:
        """
        The last time the knowledge source was updated.
        """
        return pulumi.get(self, "last_refreshed_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Provisioning status of the knowledge source.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Format or origin of the knowledge source.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateFrequency")
    def update_frequency(self) -> Optional[builtins.str]:
        """
        Specifies the units of time for scheduling update intervals for the knowledge source.
        """
        return pulumi.get(self, "update_frequency")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        Endpoint or location of the knowledge source.
        """
        return pulumi.get(self, "url")


class AwaitableGetKnowledgeSourceResult(GetKnowledgeSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKnowledgeSourceResult(
            azure_api_version=self.azure_api_version,
            description=self.description,
            id=self.id,
            last_refreshed_time=self.last_refreshed_time,
            name=self.name,
            provisioning_state=self.provisioning_state,
            source_type=self.source_type,
            system_data=self.system_data,
            type=self.type,
            update_frequency=self.update_frequency,
            url=self.url)


def get_knowledge_source(knowledge_source_name: Optional[builtins.str] = None,
                         resource_group_name: Optional[builtins.str] = None,
                         web_agent_name: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKnowledgeSourceResult:
    """
    Gets a knowledge source with the specified name within a web agent.

    Uses Azure REST API version 2025-09-01-preview.


    :param builtins.str knowledge_source_name: The name of the knowledge source.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str web_agent_name: The name of the web agent.
    """
    __args__ = dict()
    __args__['knowledgeSourceName'] = knowledge_source_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['webAgentName'] = web_agent_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:cdn:getKnowledgeSource', __args__, opts=opts, typ=GetKnowledgeSourceResult).value

    return AwaitableGetKnowledgeSourceResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        last_refreshed_time=pulumi.get(__ret__, 'last_refreshed_time'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        source_type=pulumi.get(__ret__, 'source_type'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        update_frequency=pulumi.get(__ret__, 'update_frequency'),
        url=pulumi.get(__ret__, 'url'))
def get_knowledge_source_output(knowledge_source_name: Optional[pulumi.Input[builtins.str]] = None,
                                resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                                web_agent_name: Optional[pulumi.Input[builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKnowledgeSourceResult]:
    """
    Gets a knowledge source with the specified name within a web agent.

    Uses Azure REST API version 2025-09-01-preview.


    :param builtins.str knowledge_source_name: The name of the knowledge source.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str web_agent_name: The name of the web agent.
    """
    __args__ = dict()
    __args__['knowledgeSourceName'] = knowledge_source_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['webAgentName'] = web_agent_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:cdn:getKnowledgeSource', __args__, opts=opts, typ=GetKnowledgeSourceResult)
    return __ret__.apply(lambda __response__: GetKnowledgeSourceResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        last_refreshed_time=pulumi.get(__response__, 'last_refreshed_time'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        source_type=pulumi.get(__response__, 'source_type'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type'),
        update_frequency=pulumi.get(__response__, 'update_frequency'),
        url=pulumi.get(__response__, 'url')))
