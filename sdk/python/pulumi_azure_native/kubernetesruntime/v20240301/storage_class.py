# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['StorageClassArgs', 'StorageClass']

@pulumi.input_type
class StorageClassArgs:
    def __init__(__self__, *,
                 resource_uri: pulumi.Input[str],
                 type_properties: pulumi.Input[Union['BlobStorageClassTypePropertiesArgs', 'NativeStorageClassTypePropertiesArgs', 'NfsStorageClassTypePropertiesArgs', 'RwxStorageClassTypePropertiesArgs', 'SmbStorageClassTypePropertiesArgs']],
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]]] = None,
                 allow_volume_expansion: Optional[pulumi.Input[Union[str, 'VolumeExpansion']]] = None,
                 data_resilience: Optional[pulumi.Input[Union[str, 'DataResilienceTier']]] = None,
                 failover_speed: Optional[pulumi.Input[Union[str, 'FailoverTier']]] = None,
                 limitations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 performance: Optional[pulumi.Input[Union[str, 'PerformanceTier']]] = None,
                 priority: Optional[pulumi.Input[float]] = None,
                 provisioner: Optional[pulumi.Input[str]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 volume_binding_mode: Optional[pulumi.Input[Union[str, 'VolumeBindingMode']]] = None):
        """
        The set of arguments for constructing a StorageClass resource.
        :param pulumi.Input[str] resource_uri: The fully qualified Azure Resource manager identifier of the resource.
        :param pulumi.Input[Union['BlobStorageClassTypePropertiesArgs', 'NativeStorageClassTypePropertiesArgs', 'NfsStorageClassTypePropertiesArgs', 'RwxStorageClassTypePropertiesArgs', 'SmbStorageClassTypePropertiesArgs']] type_properties: Properties of the StorageClass
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]] access_modes: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]
        :param pulumi.Input[Union[str, 'VolumeExpansion']] allow_volume_expansion: Volume can be expanded or not
        :param pulumi.Input[Union[str, 'DataResilienceTier']] data_resilience: Allow single data node failure
        :param pulumi.Input[Union[str, 'FailoverTier']] failover_speed: Failover speed: NA, Slow, Fast
        :param pulumi.Input[Sequence[pulumi.Input[str]]] limitations: Limitations of the storage class
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mount_options: Additional mount options
        :param pulumi.Input[Union[str, 'PerformanceTier']] performance: Performance tier
        :param pulumi.Input[float] priority: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use
        :param pulumi.Input[str] provisioner: Provisioner name
        :param pulumi.Input[str] storage_class_name: The name of the the storage class
        :param pulumi.Input[Union[str, 'VolumeBindingMode']] volume_binding_mode: Binding mode of volumes: Immediate, WaitForFirstConsumer
        """
        pulumi.set(__self__, "resource_uri", resource_uri)
        pulumi.set(__self__, "type_properties", type_properties)
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if allow_volume_expansion is not None:
            pulumi.set(__self__, "allow_volume_expansion", allow_volume_expansion)
        if data_resilience is not None:
            pulumi.set(__self__, "data_resilience", data_resilience)
        if failover_speed is not None:
            pulumi.set(__self__, "failover_speed", failover_speed)
        if limitations is not None:
            pulumi.set(__self__, "limitations", limitations)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if performance is not None:
            pulumi.set(__self__, "performance", performance)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if provisioner is not None:
            pulumi.set(__self__, "provisioner", provisioner)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_binding_mode is not None:
            pulumi.set(__self__, "volume_binding_mode", volume_binding_mode)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> pulumi.Input[str]:
        """
        The fully qualified Azure Resource manager identifier of the resource.
        """
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_uri", value)

    @property
    @pulumi.getter(name="typeProperties")
    def type_properties(self) -> pulumi.Input[Union['BlobStorageClassTypePropertiesArgs', 'NativeStorageClassTypePropertiesArgs', 'NfsStorageClassTypePropertiesArgs', 'RwxStorageClassTypePropertiesArgs', 'SmbStorageClassTypePropertiesArgs']]:
        """
        Properties of the StorageClass
        """
        return pulumi.get(self, "type_properties")

    @type_properties.setter
    def type_properties(self, value: pulumi.Input[Union['BlobStorageClassTypePropertiesArgs', 'NativeStorageClassTypePropertiesArgs', 'NfsStorageClassTypePropertiesArgs', 'RwxStorageClassTypePropertiesArgs', 'SmbStorageClassTypePropertiesArgs']]):
        pulumi.set(self, "type_properties", value)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]]]:
        """
        The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter(name="allowVolumeExpansion")
    def allow_volume_expansion(self) -> Optional[pulumi.Input[Union[str, 'VolumeExpansion']]]:
        """
        Volume can be expanded or not
        """
        return pulumi.get(self, "allow_volume_expansion")

    @allow_volume_expansion.setter
    def allow_volume_expansion(self, value: Optional[pulumi.Input[Union[str, 'VolumeExpansion']]]):
        pulumi.set(self, "allow_volume_expansion", value)

    @property
    @pulumi.getter(name="dataResilience")
    def data_resilience(self) -> Optional[pulumi.Input[Union[str, 'DataResilienceTier']]]:
        """
        Allow single data node failure
        """
        return pulumi.get(self, "data_resilience")

    @data_resilience.setter
    def data_resilience(self, value: Optional[pulumi.Input[Union[str, 'DataResilienceTier']]]):
        pulumi.set(self, "data_resilience", value)

    @property
    @pulumi.getter(name="failoverSpeed")
    def failover_speed(self) -> Optional[pulumi.Input[Union[str, 'FailoverTier']]]:
        """
        Failover speed: NA, Slow, Fast
        """
        return pulumi.get(self, "failover_speed")

    @failover_speed.setter
    def failover_speed(self, value: Optional[pulumi.Input[Union[str, 'FailoverTier']]]):
        pulumi.set(self, "failover_speed", value)

    @property
    @pulumi.getter
    def limitations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Limitations of the storage class
        """
        return pulumi.get(self, "limitations")

    @limitations.setter
    def limitations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limitations", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional mount options
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter
    def performance(self) -> Optional[pulumi.Input[Union[str, 'PerformanceTier']]]:
        """
        Performance tier
        """
        return pulumi.get(self, "performance")

    @performance.setter
    def performance(self, value: Optional[pulumi.Input[Union[str, 'PerformanceTier']]]):
        pulumi.set(self, "performance", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[float]]:
        """
        Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def provisioner(self) -> Optional[pulumi.Input[str]]:
        """
        Provisioner name
        """
        return pulumi.get(self, "provisioner")

    @provisioner.setter
    def provisioner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioner", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the the storage class
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="volumeBindingMode")
    def volume_binding_mode(self) -> Optional[pulumi.Input[Union[str, 'VolumeBindingMode']]]:
        """
        Binding mode of volumes: Immediate, WaitForFirstConsumer
        """
        return pulumi.get(self, "volume_binding_mode")

    @volume_binding_mode.setter
    def volume_binding_mode(self, value: Optional[pulumi.Input[Union[str, 'VolumeBindingMode']]]):
        pulumi.set(self, "volume_binding_mode", value)


class StorageClass(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]]] = None,
                 allow_volume_expansion: Optional[pulumi.Input[Union[str, 'VolumeExpansion']]] = None,
                 data_resilience: Optional[pulumi.Input[Union[str, 'DataResilienceTier']]] = None,
                 failover_speed: Optional[pulumi.Input[Union[str, 'FailoverTier']]] = None,
                 limitations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 performance: Optional[pulumi.Input[Union[str, 'PerformanceTier']]] = None,
                 priority: Optional[pulumi.Input[float]] = None,
                 provisioner: Optional[pulumi.Input[str]] = None,
                 resource_uri: Optional[pulumi.Input[str]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 type_properties: Optional[pulumi.Input[Union[pulumi.InputType['BlobStorageClassTypePropertiesArgs'], pulumi.InputType['NativeStorageClassTypePropertiesArgs'], pulumi.InputType['NfsStorageClassTypePropertiesArgs'], pulumi.InputType['RwxStorageClassTypePropertiesArgs'], pulumi.InputType['SmbStorageClassTypePropertiesArgs']]]] = None,
                 volume_binding_mode: Optional[pulumi.Input[Union[str, 'VolumeBindingMode']]] = None,
                 __props__=None):
        """
        A StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]] access_modes: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]
        :param pulumi.Input[Union[str, 'VolumeExpansion']] allow_volume_expansion: Volume can be expanded or not
        :param pulumi.Input[Union[str, 'DataResilienceTier']] data_resilience: Allow single data node failure
        :param pulumi.Input[Union[str, 'FailoverTier']] failover_speed: Failover speed: NA, Slow, Fast
        :param pulumi.Input[Sequence[pulumi.Input[str]]] limitations: Limitations of the storage class
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mount_options: Additional mount options
        :param pulumi.Input[Union[str, 'PerformanceTier']] performance: Performance tier
        :param pulumi.Input[float] priority: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use
        :param pulumi.Input[str] provisioner: Provisioner name
        :param pulumi.Input[str] resource_uri: The fully qualified Azure Resource manager identifier of the resource.
        :param pulumi.Input[str] storage_class_name: The name of the the storage class
        :param pulumi.Input[Union[pulumi.InputType['BlobStorageClassTypePropertiesArgs'], pulumi.InputType['NativeStorageClassTypePropertiesArgs'], pulumi.InputType['NfsStorageClassTypePropertiesArgs'], pulumi.InputType['RwxStorageClassTypePropertiesArgs'], pulumi.InputType['SmbStorageClassTypePropertiesArgs']]] type_properties: Properties of the StorageClass
        :param pulumi.Input[Union[str, 'VolumeBindingMode']] volume_binding_mode: Binding mode of volumes: Immediate, WaitForFirstConsumer
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StorageClassArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters)

        :param str resource_name: The name of the resource.
        :param StorageClassArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StorageClassArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessMode']]]]] = None,
                 allow_volume_expansion: Optional[pulumi.Input[Union[str, 'VolumeExpansion']]] = None,
                 data_resilience: Optional[pulumi.Input[Union[str, 'DataResilienceTier']]] = None,
                 failover_speed: Optional[pulumi.Input[Union[str, 'FailoverTier']]] = None,
                 limitations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 performance: Optional[pulumi.Input[Union[str, 'PerformanceTier']]] = None,
                 priority: Optional[pulumi.Input[float]] = None,
                 provisioner: Optional[pulumi.Input[str]] = None,
                 resource_uri: Optional[pulumi.Input[str]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 type_properties: Optional[pulumi.Input[Union[pulumi.InputType['BlobStorageClassTypePropertiesArgs'], pulumi.InputType['NativeStorageClassTypePropertiesArgs'], pulumi.InputType['NfsStorageClassTypePropertiesArgs'], pulumi.InputType['RwxStorageClassTypePropertiesArgs'], pulumi.InputType['SmbStorageClassTypePropertiesArgs']]]] = None,
                 volume_binding_mode: Optional[pulumi.Input[Union[str, 'VolumeBindingMode']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StorageClassArgs.__new__(StorageClassArgs)

            __props__.__dict__["access_modes"] = access_modes
            __props__.__dict__["allow_volume_expansion"] = allow_volume_expansion
            __props__.__dict__["data_resilience"] = data_resilience
            __props__.__dict__["failover_speed"] = failover_speed
            __props__.__dict__["limitations"] = limitations
            __props__.__dict__["mount_options"] = mount_options
            __props__.__dict__["performance"] = performance
            __props__.__dict__["priority"] = priority
            __props__.__dict__["provisioner"] = provisioner
            if resource_uri is None and not opts.urn:
                raise TypeError("Missing required property 'resource_uri'")
            __props__.__dict__["resource_uri"] = resource_uri
            __props__.__dict__["storage_class_name"] = storage_class_name
            if type_properties is None and not opts.urn:
                raise TypeError("Missing required property 'type_properties'")
            __props__.__dict__["type_properties"] = type_properties
            __props__.__dict__["volume_binding_mode"] = volume_binding_mode
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:kubernetesruntime:StorageClass"), pulumi.Alias(type_="azure-native:kubernetesruntime/v20231001preview:StorageClass")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(StorageClass, __self__).__init__(
            'azure-native:kubernetesruntime/v20240301:StorageClass',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'StorageClass':
        """
        Get an existing StorageClass resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = StorageClassArgs.__new__(StorageClassArgs)

        __props__.__dict__["access_modes"] = None
        __props__.__dict__["allow_volume_expansion"] = None
        __props__.__dict__["data_resilience"] = None
        __props__.__dict__["failover_speed"] = None
        __props__.__dict__["limitations"] = None
        __props__.__dict__["mount_options"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["performance"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["provisioner"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["type_properties"] = None
        __props__.__dict__["volume_binding_mode"] = None
        return StorageClass(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]
        """
        return pulumi.get(self, "access_modes")

    @property
    @pulumi.getter(name="allowVolumeExpansion")
    def allow_volume_expansion(self) -> pulumi.Output[Optional[str]]:
        """
        Volume can be expanded or not
        """
        return pulumi.get(self, "allow_volume_expansion")

    @property
    @pulumi.getter(name="dataResilience")
    def data_resilience(self) -> pulumi.Output[Optional[str]]:
        """
        Allow single data node failure
        """
        return pulumi.get(self, "data_resilience")

    @property
    @pulumi.getter(name="failoverSpeed")
    def failover_speed(self) -> pulumi.Output[Optional[str]]:
        """
        Failover speed: NA, Slow, Fast
        """
        return pulumi.get(self, "failover_speed")

    @property
    @pulumi.getter
    def limitations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Limitations of the storage class
        """
        return pulumi.get(self, "limitations")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Additional mount options
        """
        return pulumi.get(self, "mount_options")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def performance(self) -> pulumi.Output[Optional[str]]:
        """
        Performance tier
        """
        return pulumi.get(self, "performance")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[float]]:
        """
        Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def provisioner(self) -> pulumi.Output[Optional[str]]:
        """
        Provisioner name
        """
        return pulumi.get(self, "provisioner")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Resource provision state
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeProperties")
    def type_properties(self) -> pulumi.Output[Any]:
        """
        Properties of the StorageClass
        """
        return pulumi.get(self, "type_properties")

    @property
    @pulumi.getter(name="volumeBindingMode")
    def volume_binding_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Binding mode of volumes: Immediate, WaitForFirstConsumer
        """
        return pulumi.get(self, "volume_binding_mode")

