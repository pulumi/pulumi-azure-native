# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'BlobStorageClassTypePropertiesArgs',
    'NativeStorageClassTypePropertiesArgs',
    'NfsStorageClassTypePropertiesArgs',
    'RwxStorageClassTypePropertiesArgs',
    'SmbStorageClassTypePropertiesArgs',
]

@pulumi.input_type
class BlobStorageClassTypePropertiesArgs:
    def __init__(__self__, *,
                 azure_storage_account_key: pulumi.Input[str],
                 azure_storage_account_name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        The properties of Blob StorageClass
        :param pulumi.Input[str] azure_storage_account_key: Azure Storage Account Key
        :param pulumi.Input[str] azure_storage_account_name: Azure Storage Account Name
        :param pulumi.Input[str] type: Type of a storage class
               Expected value is 'Blob'.
        """
        pulumi.set(__self__, "azure_storage_account_key", azure_storage_account_key)
        pulumi.set(__self__, "azure_storage_account_name", azure_storage_account_name)
        pulumi.set(__self__, "type", 'Blob')

    @property
    @pulumi.getter(name="azureStorageAccountKey")
    def azure_storage_account_key(self) -> pulumi.Input[str]:
        """
        Azure Storage Account Key
        """
        return pulumi.get(self, "azure_storage_account_key")

    @azure_storage_account_key.setter
    def azure_storage_account_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_storage_account_key", value)

    @property
    @pulumi.getter(name="azureStorageAccountName")
    def azure_storage_account_name(self) -> pulumi.Input[str]:
        """
        Azure Storage Account Name
        """
        return pulumi.get(self, "azure_storage_account_name")

    @azure_storage_account_name.setter
    def azure_storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_storage_account_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of a storage class
        Expected value is 'Blob'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NativeStorageClassTypePropertiesArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        The properties of Native StorageClass
        :param pulumi.Input[str] type: Type of a storage class
               Expected value is 'Native'.
        """
        pulumi.set(__self__, "type", 'Native')

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of a storage class
        Expected value is 'Native'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NfsStorageClassTypePropertiesArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[str],
                 share: pulumi.Input[str],
                 type: pulumi.Input[str],
                 mount_permissions: Optional[pulumi.Input[str]] = None,
                 on_delete: Optional[pulumi.Input[Union[str, 'NfsDirectoryActionOnVolumeDeletion']]] = None,
                 sub_dir: Optional[pulumi.Input[str]] = None):
        """
        The properties of NFS StorageClass
        :param pulumi.Input[str] server: NFS Server
        :param pulumi.Input[str] share: NFS share
        :param pulumi.Input[str] type: Type of a storage class
               Expected value is 'NFS'.
        :param pulumi.Input[str] mount_permissions: Mounted folder permissions. Default is 0. If set as non-zero, driver will perform `chmod` after mount
        :param pulumi.Input[Union[str, 'NfsDirectoryActionOnVolumeDeletion']] on_delete: The action to take when a NFS volume is deleted. Default is Delete
        :param pulumi.Input[str] sub_dir: Sub directory under share. If the sub directory doesn't exist, driver will create it
        """
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "share", share)
        pulumi.set(__self__, "type", 'NFS')
        if mount_permissions is not None:
            pulumi.set(__self__, "mount_permissions", mount_permissions)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if sub_dir is not None:
            pulumi.set(__self__, "sub_dir", sub_dir)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        NFS Server
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def share(self) -> pulumi.Input[str]:
        """
        NFS share
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: pulumi.Input[str]):
        pulumi.set(self, "share", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of a storage class
        Expected value is 'NFS'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="mountPermissions")
    def mount_permissions(self) -> Optional[pulumi.Input[str]]:
        """
        Mounted folder permissions. Default is 0. If set as non-zero, driver will perform `chmod` after mount
        """
        return pulumi.get(self, "mount_permissions")

    @mount_permissions.setter
    def mount_permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_permissions", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[pulumi.Input[Union[str, 'NfsDirectoryActionOnVolumeDeletion']]]:
        """
        The action to take when a NFS volume is deleted. Default is Delete
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[pulumi.Input[Union[str, 'NfsDirectoryActionOnVolumeDeletion']]]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter(name="subDir")
    def sub_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Sub directory under share. If the sub directory doesn't exist, driver will create it
        """
        return pulumi.get(self, "sub_dir")

    @sub_dir.setter
    def sub_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_dir", value)


@pulumi.input_type
class RwxStorageClassTypePropertiesArgs:
    def __init__(__self__, *,
                 backing_storage_class_name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        The properties of RWX StorageClass
        :param pulumi.Input[str] backing_storage_class_name: The backing storageclass used to create new storageclass
        :param pulumi.Input[str] type: Type of a storage class
               Expected value is 'RWX'.
        """
        pulumi.set(__self__, "backing_storage_class_name", backing_storage_class_name)
        pulumi.set(__self__, "type", 'RWX')

    @property
    @pulumi.getter(name="backingStorageClassName")
    def backing_storage_class_name(self) -> pulumi.Input[str]:
        """
        The backing storageclass used to create new storageclass
        """
        return pulumi.get(self, "backing_storage_class_name")

    @backing_storage_class_name.setter
    def backing_storage_class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "backing_storage_class_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of a storage class
        Expected value is 'RWX'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SmbStorageClassTypePropertiesArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 type: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sub_dir: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The properties of SMB StorageClass
        :param pulumi.Input[str] source: SMB Source
        :param pulumi.Input[str] type: Type of a storage class
               Expected value is 'SMB'.
        :param pulumi.Input[str] domain: Server domain
        :param pulumi.Input[str] password: Server password
        :param pulumi.Input[str] sub_dir: Sub directory under share. If the sub directory doesn't exist, driver will create it
        :param pulumi.Input[str] username: Server username
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "type", 'SMB')
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sub_dir is not None:
            pulumi.set(__self__, "sub_dir", sub_dir)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        SMB Source
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of a storage class
        Expected value is 'SMB'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Server domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Server password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="subDir")
    def sub_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Sub directory under share. If the sub directory doesn't exist, driver will create it
        """
        return pulumi.get(self, "sub_dir")

    @sub_dir.setter
    def sub_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_dir", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Server username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


