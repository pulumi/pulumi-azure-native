# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DependencyOfRelationshipPropertiesResponse',
    'RelationshipMetadataResponse',
    'RelationshipOriginInformationResponse',
    'ServiceGroupMemberRelationshipPropertiesResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class DependencyOfRelationshipPropertiesResponse(dict):
    """
    dependencyOf relationship properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originInformation":
            suggest = "origin_information"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "targetTenant":
            suggest = "target_tenant"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DependencyOfRelationshipPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DependencyOfRelationshipPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DependencyOfRelationshipPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metadata: 'outputs.RelationshipMetadataResponse',
                 origin_information: 'outputs.RelationshipOriginInformationResponse',
                 provisioning_state: builtins.str,
                 source_id: builtins.str,
                 target_id: builtins.str,
                 target_tenant: Optional[builtins.str] = None):
        """
        dependencyOf relationship properties.
        :param 'RelationshipMetadataResponse' metadata: Metadata about the relationship.
        :param 'RelationshipOriginInformationResponse' origin_information: Information about the origin of the relationship.
        :param builtins.str provisioning_state: The provisioning state of the relationship.
        :param builtins.str source_id: The relationship source resource id.
        :param builtins.str target_id: The relationship target resource id.
        :param builtins.str target_tenant: The relationship target tenant id.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "origin_information", origin_information)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "target_id", target_id)
        if target_tenant is not None:
            pulumi.set(__self__, "target_tenant", target_tenant)

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.RelationshipMetadataResponse':
        """
        Metadata about the relationship.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="originInformation")
    def origin_information(self) -> 'outputs.RelationshipOriginInformationResponse':
        """
        Information about the origin of the relationship.
        """
        return pulumi.get(self, "origin_information")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state of the relationship.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> builtins.str:
        """
        The relationship source resource id.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> builtins.str:
        """
        The relationship target resource id.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetTenant")
    def target_tenant(self) -> Optional[builtins.str]:
        """
        The relationship target tenant id.
        """
        return pulumi.get(self, "target_tenant")


@pulumi.output_type
class RelationshipMetadataResponse(dict):
    """
    Provides information about the relationship properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "targetType":
            suggest = "target_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RelationshipMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RelationshipMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RelationshipMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: builtins.str,
                 target_type: builtins.str):
        """
        Provides information about the relationship properties.
        :param builtins.str source_type: The type of the relationship source resource.
        :param builtins.str target_type: The type of the relationship target resource.
        """
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        The type of the relationship source resource.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> builtins.str:
        """
        The type of the relationship target resource.
        """
        return pulumi.get(self, "target_type")


@pulumi.output_type
class RelationshipOriginInformationResponse(dict):
    """
    Provides information about the origin of a relationship.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "discoveryEngine":
            suggest = "discovery_engine"
        elif key == "relationshipOriginType":
            suggest = "relationship_origin_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RelationshipOriginInformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RelationshipOriginInformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RelationshipOriginInformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 discovery_engine: builtins.str,
                 relationship_origin_type: builtins.str):
        """
        Provides information about the origin of a relationship.
        :param builtins.str discovery_engine: The name of the discovery engine that created the relationship.
        :param builtins.str relationship_origin_type: Identifies the origin type of the relationship.
        """
        pulumi.set(__self__, "discovery_engine", discovery_engine)
        pulumi.set(__self__, "relationship_origin_type", relationship_origin_type)

    @property
    @pulumi.getter(name="discoveryEngine")
    def discovery_engine(self) -> builtins.str:
        """
        The name of the discovery engine that created the relationship.
        """
        return pulumi.get(self, "discovery_engine")

    @property
    @pulumi.getter(name="relationshipOriginType")
    def relationship_origin_type(self) -> builtins.str:
        """
        Identifies the origin type of the relationship.
        """
        return pulumi.get(self, "relationship_origin_type")


@pulumi.output_type
class ServiceGroupMemberRelationshipPropertiesResponse(dict):
    """
    ServiceGroupMember relationship properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originInformation":
            suggest = "origin_information"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "targetTenant":
            suggest = "target_tenant"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupMemberRelationshipPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupMemberRelationshipPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupMemberRelationshipPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metadata: 'outputs.RelationshipMetadataResponse',
                 origin_information: 'outputs.RelationshipOriginInformationResponse',
                 provisioning_state: builtins.str,
                 source_id: builtins.str,
                 target_id: builtins.str,
                 target_tenant: Optional[builtins.str] = None):
        """
        ServiceGroupMember relationship properties.
        :param 'RelationshipMetadataResponse' metadata: Metadata about the relationship.
        :param 'RelationshipOriginInformationResponse' origin_information: Information about the origin of the relationship.
        :param builtins.str provisioning_state: The provisioning state of the relationship.
        :param builtins.str source_id: The relationship source resource id.
        :param builtins.str target_id: The relationship target resource id.
        :param builtins.str target_tenant: The relationship target tenant id.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "origin_information", origin_information)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "target_id", target_id)
        if target_tenant is not None:
            pulumi.set(__self__, "target_tenant", target_tenant)

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.RelationshipMetadataResponse':
        """
        Metadata about the relationship.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="originInformation")
    def origin_information(self) -> 'outputs.RelationshipOriginInformationResponse':
        """
        Information about the origin of the relationship.
        """
        return pulumi.get(self, "origin_information")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state of the relationship.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> builtins.str:
        """
        The relationship source resource id.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> builtins.str:
        """
        The relationship target resource id.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetTenant")
    def target_tenant(self) -> Optional[builtins.str]:
        """
        The relationship target tenant id.
        """
        return pulumi.get(self, "target_tenant")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


