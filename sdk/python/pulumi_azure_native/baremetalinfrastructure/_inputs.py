# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'DiskArgs',
    'DiskArgsDict',
    'HardwareProfileArgs',
    'HardwareProfileArgsDict',
    'NetworkInterfaceArgs',
    'NetworkInterfaceArgsDict',
    'NetworkProfileArgs',
    'NetworkProfileArgsDict',
    'OSProfileArgs',
    'OSProfileArgsDict',
    'StorageBillingPropertiesArgs',
    'StorageBillingPropertiesArgsDict',
    'StorageProfileArgs',
    'StorageProfileArgsDict',
    'StoragePropertiesArgs',
    'StoragePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class DiskArgsDict(TypedDict):
        """
        Specifies the disk information fo the Azure Bare Metal Instance
        """
        disk_size_gb: NotRequired[pulumi.Input[int]]
        """
        Specifies the size of an empty data disk in gigabytes.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The disk name.
        """
elif False:
    DiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DiskArgs:
    def __init__(__self__, *,
                 disk_size_gb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Specifies the disk information fo the Azure Bare Metal Instance
        :param pulumi.Input[int] disk_size_gb: Specifies the size of an empty data disk in gigabytes.
        :param pulumi.Input[str] name: The disk name.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the size of an empty data disk in gigabytes.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The disk name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class HardwareProfileArgsDict(TypedDict):
        """
        Specifies the hardware settings for the Azure Bare Metal Instance.
        """
        azure_bare_metal_instance_size: NotRequired[pulumi.Input[Union[str, 'AzureBareMetalInstanceSizeNamesEnum']]]
        """
        Specifies the Azure Bare Metal Instance SKU.
        """
        hardware_type: NotRequired[pulumi.Input[Union[str, 'AzureBareMetalHardwareTypeNamesEnum']]]
        """
        Name of the hardware type (vendor and/or their product name)
        """
elif False:
    HardwareProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HardwareProfileArgs:
    def __init__(__self__, *,
                 azure_bare_metal_instance_size: Optional[pulumi.Input[Union[str, 'AzureBareMetalInstanceSizeNamesEnum']]] = None,
                 hardware_type: Optional[pulumi.Input[Union[str, 'AzureBareMetalHardwareTypeNamesEnum']]] = None):
        """
        Specifies the hardware settings for the Azure Bare Metal Instance.
        :param pulumi.Input[Union[str, 'AzureBareMetalInstanceSizeNamesEnum']] azure_bare_metal_instance_size: Specifies the Azure Bare Metal Instance SKU.
        :param pulumi.Input[Union[str, 'AzureBareMetalHardwareTypeNamesEnum']] hardware_type: Name of the hardware type (vendor and/or their product name)
        """
        if azure_bare_metal_instance_size is not None:
            pulumi.set(__self__, "azure_bare_metal_instance_size", azure_bare_metal_instance_size)
        if hardware_type is not None:
            pulumi.set(__self__, "hardware_type", hardware_type)

    @property
    @pulumi.getter(name="azureBareMetalInstanceSize")
    def azure_bare_metal_instance_size(self) -> Optional[pulumi.Input[Union[str, 'AzureBareMetalInstanceSizeNamesEnum']]]:
        """
        Specifies the Azure Bare Metal Instance SKU.
        """
        return pulumi.get(self, "azure_bare_metal_instance_size")

    @azure_bare_metal_instance_size.setter
    def azure_bare_metal_instance_size(self, value: Optional[pulumi.Input[Union[str, 'AzureBareMetalInstanceSizeNamesEnum']]]):
        pulumi.set(self, "azure_bare_metal_instance_size", value)

    @property
    @pulumi.getter(name="hardwareType")
    def hardware_type(self) -> Optional[pulumi.Input[Union[str, 'AzureBareMetalHardwareTypeNamesEnum']]]:
        """
        Name of the hardware type (vendor and/or their product name)
        """
        return pulumi.get(self, "hardware_type")

    @hardware_type.setter
    def hardware_type(self, value: Optional[pulumi.Input[Union[str, 'AzureBareMetalHardwareTypeNamesEnum']]]):
        pulumi.set(self, "hardware_type", value)


if not MYPY:
    class NetworkInterfaceArgsDict(TypedDict):
        """
        Specifies the network interfaces of a bare metal resource.
        """
        ip_address: NotRequired[pulumi.Input[str]]
        """
        Specifies the IP address of the network interface.
        """
elif False:
    NetworkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkInterfaceArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None):
        """
        Specifies the network interfaces of a bare metal resource.
        :param pulumi.Input[str] ip_address: Specifies the IP address of the network interface.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the IP address of the network interface.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class NetworkProfileArgsDict(TypedDict):
        """
        Specifies the network settings for the Azure Bare Metal Instance disks.
        """
        circuit_id: NotRequired[pulumi.Input[str]]
        """
        Specifies the circuit id for connecting to express route.
        """
        network_interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgsDict']]]]
        """
        Specifies the network interfaces for the Azure Bare Metal Instance.
        """
elif False:
    NetworkProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkProfileArgs:
    def __init__(__self__, *,
                 circuit_id: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]] = None):
        """
        Specifies the network settings for the Azure Bare Metal Instance disks.
        :param pulumi.Input[str] circuit_id: Specifies the circuit id for connecting to express route.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]] network_interfaces: Specifies the network interfaces for the Azure Bare Metal Instance.
        """
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the circuit id for connecting to express route.
        """
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]:
        """
        Specifies the network interfaces for the Azure Bare Metal Instance.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)


if not MYPY:
    class OSProfileArgsDict(TypedDict):
        """
        Specifies the operating system settings for the Azure Bare Metal instance.
        """
        computer_name: NotRequired[pulumi.Input[str]]
        """
        Specifies the host OS name of the Azure Bare Metal instance.
        """
        os_type: NotRequired[pulumi.Input[str]]
        """
        This property allows you to specify the type of the OS.
        """
        ssh_public_key: NotRequired[pulumi.Input[str]]
        """
        Specifies the SSH public key used to access the operating system.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Specifies version of operating system.
        """
elif False:
    OSProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSProfileArgs:
    def __init__(__self__, *,
                 computer_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Specifies the operating system settings for the Azure Bare Metal instance.
        :param pulumi.Input[str] computer_name: Specifies the host OS name of the Azure Bare Metal instance.
        :param pulumi.Input[str] os_type: This property allows you to specify the type of the OS.
        :param pulumi.Input[str] ssh_public_key: Specifies the SSH public key used to access the operating system.
        :param pulumi.Input[str] version: Specifies version of operating system.
        """
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the host OS name of the Azure Bare Metal instance.
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        This property allows you to specify the type of the OS.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the SSH public key used to access the operating system.
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies version of operating system.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class StorageBillingPropertiesArgsDict(TypedDict):
        """
        Describes the billing related details of the AzureBareMetalStorageInstance.
        """
        azure_bare_metal_storage_instance_size: NotRequired[pulumi.Input[str]]
        """
        the SKU type that is provisioned
        """
        billing_mode: NotRequired[pulumi.Input[str]]
        """
        the billing mode for the storage instance
        """
elif False:
    StorageBillingPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageBillingPropertiesArgs:
    def __init__(__self__, *,
                 azure_bare_metal_storage_instance_size: Optional[pulumi.Input[str]] = None,
                 billing_mode: Optional[pulumi.Input[str]] = None):
        """
        Describes the billing related details of the AzureBareMetalStorageInstance.
        :param pulumi.Input[str] azure_bare_metal_storage_instance_size: the SKU type that is provisioned
        :param pulumi.Input[str] billing_mode: the billing mode for the storage instance
        """
        if azure_bare_metal_storage_instance_size is not None:
            pulumi.set(__self__, "azure_bare_metal_storage_instance_size", azure_bare_metal_storage_instance_size)
        if billing_mode is not None:
            pulumi.set(__self__, "billing_mode", billing_mode)

    @property
    @pulumi.getter(name="azureBareMetalStorageInstanceSize")
    def azure_bare_metal_storage_instance_size(self) -> Optional[pulumi.Input[str]]:
        """
        the SKU type that is provisioned
        """
        return pulumi.get(self, "azure_bare_metal_storage_instance_size")

    @azure_bare_metal_storage_instance_size.setter
    def azure_bare_metal_storage_instance_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_bare_metal_storage_instance_size", value)

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> Optional[pulumi.Input[str]]:
        """
        the billing mode for the storage instance
        """
        return pulumi.get(self, "billing_mode")

    @billing_mode.setter
    def billing_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_mode", value)


if not MYPY:
    class StorageProfileArgsDict(TypedDict):
        """
        Specifies the storage settings for the Azure Bare Metal instance disks.
        """
        nfs_ip_address: NotRequired[pulumi.Input[str]]
        """
        IP Address to connect to storage.
        """
        os_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['DiskArgsDict']]]]
        """
        Specifies information about the operating system disk used by bare metal instance.
        """
elif False:
    StorageProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageProfileArgs:
    def __init__(__self__, *,
                 nfs_ip_address: Optional[pulumi.Input[str]] = None,
                 os_disks: Optional[pulumi.Input[Sequence[pulumi.Input['DiskArgs']]]] = None):
        """
        Specifies the storage settings for the Azure Bare Metal instance disks.
        :param pulumi.Input[str] nfs_ip_address: IP Address to connect to storage.
        :param pulumi.Input[Sequence[pulumi.Input['DiskArgs']]] os_disks: Specifies information about the operating system disk used by bare metal instance.
        """
        if nfs_ip_address is not None:
            pulumi.set(__self__, "nfs_ip_address", nfs_ip_address)
        if os_disks is not None:
            pulumi.set(__self__, "os_disks", os_disks)

    @property
    @pulumi.getter(name="nfsIpAddress")
    def nfs_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address to connect to storage.
        """
        return pulumi.get(self, "nfs_ip_address")

    @nfs_ip_address.setter
    def nfs_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nfs_ip_address", value)

    @property
    @pulumi.getter(name="osDisks")
    def os_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DiskArgs']]]]:
        """
        Specifies information about the operating system disk used by bare metal instance.
        """
        return pulumi.get(self, "os_disks")

    @os_disks.setter
    def os_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DiskArgs']]]]):
        pulumi.set(self, "os_disks", value)


if not MYPY:
    class StoragePropertiesArgsDict(TypedDict):
        """
        described the storage properties of the azure baremetalstorage instance
        """
        generation: NotRequired[pulumi.Input[str]]
        """
        the kind of storage instance
        """
        hardware_type: NotRequired[pulumi.Input[str]]
        """
        the hardware type of the storage instance
        """
        offering_type: NotRequired[pulumi.Input[str]]
        """
        the offering type for which the resource is getting provisioned
        """
        provisioning_state: NotRequired[pulumi.Input[Union[str, 'ProvisioningState']]]
        """
        State of provisioning of the AzureBareMetalStorageInstance
        """
        storage_billing_properties: NotRequired[pulumi.Input['StorageBillingPropertiesArgsDict']]
        """
        the billing related information for the resource
        """
        storage_type: NotRequired[pulumi.Input[str]]
        """
        the storage protocol for which the resource is getting provisioned
        """
        workload_type: NotRequired[pulumi.Input[str]]
        """
        the workload for which the resource is getting provisioned
        """
elif False:
    StoragePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StoragePropertiesArgs:
    def __init__(__self__, *,
                 generation: Optional[pulumi.Input[str]] = None,
                 hardware_type: Optional[pulumi.Input[str]] = None,
                 offering_type: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None,
                 storage_billing_properties: Optional[pulumi.Input['StorageBillingPropertiesArgs']] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[str]] = None):
        """
        described the storage properties of the azure baremetalstorage instance
        :param pulumi.Input[str] generation: the kind of storage instance
        :param pulumi.Input[str] hardware_type: the hardware type of the storage instance
        :param pulumi.Input[str] offering_type: the offering type for which the resource is getting provisioned
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: State of provisioning of the AzureBareMetalStorageInstance
        :param pulumi.Input['StorageBillingPropertiesArgs'] storage_billing_properties: the billing related information for the resource
        :param pulumi.Input[str] storage_type: the storage protocol for which the resource is getting provisioned
        :param pulumi.Input[str] workload_type: the workload for which the resource is getting provisioned
        """
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if hardware_type is not None:
            pulumi.set(__self__, "hardware_type", hardware_type)
        if offering_type is not None:
            pulumi.set(__self__, "offering_type", offering_type)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if storage_billing_properties is not None:
            pulumi.set(__self__, "storage_billing_properties", storage_billing_properties)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[str]]:
        """
        the kind of storage instance
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter(name="hardwareType")
    def hardware_type(self) -> Optional[pulumi.Input[str]]:
        """
        the hardware type of the storage instance
        """
        return pulumi.get(self, "hardware_type")

    @hardware_type.setter
    def hardware_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hardware_type", value)

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> Optional[pulumi.Input[str]]:
        """
        the offering type for which the resource is getting provisioned
        """
        return pulumi.get(self, "offering_type")

    @offering_type.setter
    def offering_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offering_type", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningState']]]:
        """
        State of provisioning of the AzureBareMetalStorageInstance
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)

    @property
    @pulumi.getter(name="storageBillingProperties")
    def storage_billing_properties(self) -> Optional[pulumi.Input['StorageBillingPropertiesArgs']]:
        """
        the billing related information for the resource
        """
        return pulumi.get(self, "storage_billing_properties")

    @storage_billing_properties.setter
    def storage_billing_properties(self, value: Optional[pulumi.Input['StorageBillingPropertiesArgs']]):
        pulumi.set(self, "storage_billing_properties", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        the storage protocol for which the resource is getting provisioned
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[str]]:
        """
        the workload for which the resource is getting provisioned
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_type", value)


