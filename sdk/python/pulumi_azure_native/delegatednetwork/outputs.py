# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ControllerDetailsResponse',
    'DelegatedControllerPropertiesResponse',
    'DelegatedSubnetPropertiesResponse',
    'OrchestratorIdentityResponse',
    'OrchestratorResourcePropertiesResponse',
    'SubnetDetailsResponse',
]

@pulumi.output_type
class ControllerDetailsResponse(dict):
    """
    controller details
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        controller details
        :param str id: controller arm resource id
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        controller arm resource id
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DelegatedControllerPropertiesResponse(dict):
    """
    Properties of Delegated controller resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dncAppId":
            suggest = "dnc_app_id"
        elif key == "dncEndpoint":
            suggest = "dnc_endpoint"
        elif key == "dncTenantId":
            suggest = "dnc_tenant_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceGuid":
            suggest = "resource_guid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DelegatedControllerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DelegatedControllerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DelegatedControllerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dnc_app_id: str,
                 dnc_endpoint: str,
                 dnc_tenant_id: str,
                 provisioning_state: str,
                 resource_guid: str):
        """
        Properties of Delegated controller resource.
        :param str dnc_app_id: dnc application id should be used by customer to authenticate with dnc gateway.
        :param str dnc_endpoint: dnc endpoint url that customers can use to connect to
        :param str dnc_tenant_id: tenant id of dnc application id
        :param str provisioning_state: The current state of dnc controller resource.
        :param str resource_guid: Resource guid.
        """
        pulumi.set(__self__, "dnc_app_id", dnc_app_id)
        pulumi.set(__self__, "dnc_endpoint", dnc_endpoint)
        pulumi.set(__self__, "dnc_tenant_id", dnc_tenant_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_guid", resource_guid)

    @property
    @pulumi.getter(name="dncAppId")
    def dnc_app_id(self) -> str:
        """
        dnc application id should be used by customer to authenticate with dnc gateway.
        """
        return pulumi.get(self, "dnc_app_id")

    @property
    @pulumi.getter(name="dncEndpoint")
    def dnc_endpoint(self) -> str:
        """
        dnc endpoint url that customers can use to connect to
        """
        return pulumi.get(self, "dnc_endpoint")

    @property
    @pulumi.getter(name="dncTenantId")
    def dnc_tenant_id(self) -> str:
        """
        tenant id of dnc application id
        """
        return pulumi.get(self, "dnc_tenant_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The current state of dnc controller resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceGuid")
    def resource_guid(self) -> str:
        """
        Resource guid.
        """
        return pulumi.get(self, "resource_guid")


@pulumi.output_type
class DelegatedSubnetPropertiesResponse(dict):
    """
    Properties of delegated subnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceGuid":
            suggest = "resource_guid"
        elif key == "controllerDetails":
            suggest = "controller_details"
        elif key == "subnetDetails":
            suggest = "subnet_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DelegatedSubnetPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DelegatedSubnetPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DelegatedSubnetPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 resource_guid: str,
                 controller_details: Optional['outputs.ControllerDetailsResponse'] = None,
                 subnet_details: Optional['outputs.SubnetDetailsResponse'] = None):
        """
        Properties of delegated subnet
        :param str provisioning_state: The current state of dnc delegated subnet resource.
        :param str resource_guid: Resource guid.
        :param 'ControllerDetailsResponse' controller_details: Properties of the controller.
        :param 'SubnetDetailsResponse' subnet_details: subnet details
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_guid", resource_guid)
        if controller_details is not None:
            pulumi.set(__self__, "controller_details", controller_details)
        if subnet_details is not None:
            pulumi.set(__self__, "subnet_details", subnet_details)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The current state of dnc delegated subnet resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceGuid")
    def resource_guid(self) -> str:
        """
        Resource guid.
        """
        return pulumi.get(self, "resource_guid")

    @property
    @pulumi.getter(name="controllerDetails")
    def controller_details(self) -> Optional['outputs.ControllerDetailsResponse']:
        """
        Properties of the controller.
        """
        return pulumi.get(self, "controller_details")

    @property
    @pulumi.getter(name="subnetDetails")
    def subnet_details(self) -> Optional['outputs.SubnetDetailsResponse']:
        """
        subnet details
        """
        return pulumi.get(self, "subnet_details")


@pulumi.output_type
class OrchestratorIdentityResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrchestratorIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrchestratorIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrchestratorIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        :param str principal_id: The principal id of the system assigned identity which is used by orchestrator.
        :param str tenant_id: The tenant id of the system assigned identity which is used by orchestrator.
        :param str type: The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal id of the system assigned identity which is used by orchestrator.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant id of the system assigned identity which is used by orchestrator.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OrchestratorResourcePropertiesResponse(dict):
    """
    Properties of orchestrator
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerDetails":
            suggest = "controller_details"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceGuid":
            suggest = "resource_guid"
        elif key == "apiServerEndpoint":
            suggest = "api_server_endpoint"
        elif key == "clusterRootCA":
            suggest = "cluster_root_ca"
        elif key == "orchestratorAppId":
            suggest = "orchestrator_app_id"
        elif key == "orchestratorTenantId":
            suggest = "orchestrator_tenant_id"
        elif key == "privateLinkResourceId":
            suggest = "private_link_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrchestratorResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrchestratorResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrchestratorResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_details: 'outputs.ControllerDetailsResponse',
                 provisioning_state: str,
                 resource_guid: str,
                 api_server_endpoint: Optional[str] = None,
                 cluster_root_ca: Optional[str] = None,
                 orchestrator_app_id: Optional[str] = None,
                 orchestrator_tenant_id: Optional[str] = None,
                 private_link_resource_id: Optional[str] = None):
        """
        Properties of orchestrator
        :param 'ControllerDetailsResponse' controller_details: Properties of the controller.
        :param str provisioning_state: The current state of orchestratorInstance resource.
        :param str resource_guid: Resource guid.
        :param str api_server_endpoint: K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
        :param str cluster_root_ca: RootCA certificate of kubernetes cluster base64 encoded
        :param str orchestrator_app_id: AAD ID used with apiserver
        :param str orchestrator_tenant_id: TenantID of server App ID
        :param str private_link_resource_id: private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
        """
        pulumi.set(__self__, "controller_details", controller_details)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_guid", resource_guid)
        if api_server_endpoint is not None:
            pulumi.set(__self__, "api_server_endpoint", api_server_endpoint)
        if cluster_root_ca is not None:
            pulumi.set(__self__, "cluster_root_ca", cluster_root_ca)
        if orchestrator_app_id is not None:
            pulumi.set(__self__, "orchestrator_app_id", orchestrator_app_id)
        if orchestrator_tenant_id is not None:
            pulumi.set(__self__, "orchestrator_tenant_id", orchestrator_tenant_id)
        if private_link_resource_id is not None:
            pulumi.set(__self__, "private_link_resource_id", private_link_resource_id)

    @property
    @pulumi.getter(name="controllerDetails")
    def controller_details(self) -> 'outputs.ControllerDetailsResponse':
        """
        Properties of the controller.
        """
        return pulumi.get(self, "controller_details")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The current state of orchestratorInstance resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceGuid")
    def resource_guid(self) -> str:
        """
        Resource guid.
        """
        return pulumi.get(self, "resource_guid")

    @property
    @pulumi.getter(name="apiServerEndpoint")
    def api_server_endpoint(self) -> Optional[str]:
        """
        K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
        """
        return pulumi.get(self, "api_server_endpoint")

    @property
    @pulumi.getter(name="clusterRootCA")
    def cluster_root_ca(self) -> Optional[str]:
        """
        RootCA certificate of kubernetes cluster base64 encoded
        """
        return pulumi.get(self, "cluster_root_ca")

    @property
    @pulumi.getter(name="orchestratorAppId")
    def orchestrator_app_id(self) -> Optional[str]:
        """
        AAD ID used with apiserver
        """
        return pulumi.get(self, "orchestrator_app_id")

    @property
    @pulumi.getter(name="orchestratorTenantId")
    def orchestrator_tenant_id(self) -> Optional[str]:
        """
        TenantID of server App ID
        """
        return pulumi.get(self, "orchestrator_tenant_id")

    @property
    @pulumi.getter(name="privateLinkResourceId")
    def private_link_resource_id(self) -> Optional[str]:
        """
        private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
        """
        return pulumi.get(self, "private_link_resource_id")


@pulumi.output_type
class SubnetDetailsResponse(dict):
    """
    Properties of orchestrator
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Properties of orchestrator
        :param str id: subnet arm resource id
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        subnet arm resource id
        """
        return pulumi.get(self, "id")


