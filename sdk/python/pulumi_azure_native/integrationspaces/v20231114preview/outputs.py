# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'BusinessProcessDevelopmentArtifactPropertiesResponse',
    'BusinessProcessIdentifierResponse',
    'BusinessProcessMappingItemResponse',
    'BusinessProcessReferenceResponse',
    'BusinessProcessStageResponse',
    'FlowTrackingDefinitionResponse',
    'SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse',
    'SystemDataResponse',
    'TrackingCorrelationContextResponse',
    'TrackingDataStoreResponse',
    'TrackingEventDefinitionResponse',
    'TrackingProfileDefinitionResponse',
]

@pulumi.output_type
class BusinessProcessDevelopmentArtifactPropertiesResponse(dict):
    """
    The properties of business process development artifact.
    """
    def __init__(__self__, *,
                 business_process_mapping: Optional[Mapping[str, 'outputs.BusinessProcessMappingItemResponse']] = None,
                 business_process_stages: Optional[Mapping[str, 'outputs.BusinessProcessStageResponse']] = None,
                 description: Optional[str] = None,
                 identifier: Optional['outputs.BusinessProcessIdentifierResponse'] = None,
                 tracking_profiles: Optional[Mapping[str, 'outputs.TrackingProfileDefinitionResponse']] = None):
        """
        The properties of business process development artifact.
        :param Mapping[str, 'BusinessProcessMappingItemResponse'] business_process_mapping: The business process mapping.
        :param Mapping[str, 'BusinessProcessStageResponse'] business_process_stages: The business process stages.
        :param str description: The description of the business process.
        :param 'BusinessProcessIdentifierResponse' identifier: The business process identifier.
        :param Mapping[str, 'TrackingProfileDefinitionResponse'] tracking_profiles: The tracking profile for the business process.
        """
        if business_process_mapping is not None:
            pulumi.set(__self__, "business_process_mapping", business_process_mapping)
        if business_process_stages is not None:
            pulumi.set(__self__, "business_process_stages", business_process_stages)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if tracking_profiles is not None:
            pulumi.set(__self__, "tracking_profiles", tracking_profiles)

    @property
    @pulumi.getter(name="businessProcessMapping")
    def business_process_mapping(self) -> Optional[Mapping[str, 'outputs.BusinessProcessMappingItemResponse']]:
        """
        The business process mapping.
        """
        return pulumi.get(self, "business_process_mapping")

    @property
    @pulumi.getter(name="businessProcessStages")
    def business_process_stages(self) -> Optional[Mapping[str, 'outputs.BusinessProcessStageResponse']]:
        """
        The business process stages.
        """
        return pulumi.get(self, "business_process_stages")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the business process.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional['outputs.BusinessProcessIdentifierResponse']:
        """
        The business process identifier.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="trackingProfiles")
    def tracking_profiles(self) -> Optional[Mapping[str, 'outputs.TrackingProfileDefinitionResponse']]:
        """
        The tracking profile for the business process.
        """
        return pulumi.get(self, "tracking_profiles")


@pulumi.output_type
class BusinessProcessIdentifierResponse(dict):
    """
    The properties of business process identifier.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyName":
            suggest = "property_name"
        elif key == "propertyType":
            suggest = "property_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BusinessProcessIdentifierResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BusinessProcessIdentifierResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BusinessProcessIdentifierResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_name: Optional[str] = None,
                 property_type: Optional[str] = None):
        """
        The properties of business process identifier.
        :param str property_name: The property name of the business process identifier.
        :param str property_type: The property type of the business process identifier.
        """
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)
        if property_type is not None:
            pulumi.set(__self__, "property_type", property_type)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[str]:
        """
        The property name of the business process identifier.
        """
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter(name="propertyType")
    def property_type(self) -> Optional[str]:
        """
        The property type of the business process identifier.
        """
        return pulumi.get(self, "property_type")


@pulumi.output_type
class BusinessProcessMappingItemResponse(dict):
    """
    The properties of business process mapping.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logicAppResourceId":
            suggest = "logic_app_resource_id"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "operationType":
            suggest = "operation_type"
        elif key == "workflowName":
            suggest = "workflow_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BusinessProcessMappingItemResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BusinessProcessMappingItemResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BusinessProcessMappingItemResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logic_app_resource_id: Optional[str] = None,
                 operation_name: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 workflow_name: Optional[str] = None):
        """
        The properties of business process mapping.
        :param str logic_app_resource_id: The logic app resource id.
        :param str operation_name: The operation name.
        :param str operation_type: The mapping item operation type of the business process.
        :param str workflow_name: The workflow name within the logic app.
        """
        if logic_app_resource_id is not None:
            pulumi.set(__self__, "logic_app_resource_id", logic_app_resource_id)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="logicAppResourceId")
    def logic_app_resource_id(self) -> Optional[str]:
        """
        The logic app resource id.
        """
        return pulumi.get(self, "logic_app_resource_id")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        """
        The operation name.
        """
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        """
        The mapping item operation type of the business process.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[str]:
        """
        The workflow name within the logic app.
        """
        return pulumi.get(self, "workflow_name")


@pulumi.output_type
class BusinessProcessReferenceResponse(dict):
    """
    The business process reference.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        The business process reference.
        :param str name: The business process name.
        :param str version: The business process version.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The business process name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The business process version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class BusinessProcessStageResponse(dict):
    """
    The properties of business process stage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stagesBefore":
            suggest = "stages_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BusinessProcessStageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BusinessProcessStageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BusinessProcessStageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 stages_before: Optional[Sequence[str]] = None):
        """
        The properties of business process stage.
        :param str description: The description of the business stage.
        :param Mapping[str, str] properties: The properties within the properties of the business process stage.
        :param Sequence[str] stages_before: The property to keep track of stages before current in the business process stage.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if stages_before is not None:
            pulumi.set(__self__, "stages_before", stages_before)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the business stage.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        The properties within the properties of the business process stage.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="stagesBefore")
    def stages_before(self) -> Optional[Sequence[str]]:
        """
        The property to keep track of stages before current in the business process stage.
        """
        return pulumi.get(self, "stages_before")


@pulumi.output_type
class FlowTrackingDefinitionResponse(dict):
    """
    The workflow tracking definition.
    """
    def __init__(__self__, *,
                 correlation_context: Optional['outputs.TrackingCorrelationContextResponse'] = None,
                 events: Optional[Mapping[str, 'outputs.TrackingEventDefinitionResponse']] = None):
        """
        The workflow tracking definition.
        :param 'TrackingCorrelationContextResponse' correlation_context: The tracking correlation context.
        :param Mapping[str, 'TrackingEventDefinitionResponse'] events: The tracking events.
        """
        if correlation_context is not None:
            pulumi.set(__self__, "correlation_context", correlation_context)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter(name="correlationContext")
    def correlation_context(self) -> Optional['outputs.TrackingCorrelationContextResponse']:
        """
        The tracking correlation context.
        """
        return pulumi.get(self, "correlation_context")

    @property
    @pulumi.getter
    def events(self) -> Optional[Mapping[str, 'outputs.TrackingEventDefinitionResponse']]:
        """
        The tracking events.
        """
        return pulumi.get(self, "events")


@pulumi.output_type
class SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse(dict):
    """
    The business process development artifact save or get response.
    """
    def __init__(__self__, *,
                 name: str,
                 system_data: 'outputs.SystemDataResponse',
                 properties: Optional['outputs.BusinessProcessDevelopmentArtifactPropertiesResponse'] = None):
        """
        The business process development artifact save or get response.
        :param str name: The name of the business process development artifact.
        :param 'SystemDataResponse' system_data: The system data of the business process development artifact.
        :param 'BusinessProcessDevelopmentArtifactPropertiesResponse' properties: The properties of the business process development artifact.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "system_data", system_data)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the business process development artifact.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        The system data of the business process development artifact.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.BusinessProcessDevelopmentArtifactPropertiesResponse']:
        """
        The properties of the business process development artifact.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TrackingCorrelationContextResponse(dict):
    """
    The tracking correlation context.
    """
    def __init__(__self__, *,
                 operation_name: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 property_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        The tracking correlation context.
        :param str operation_name: The operation name for correlation context.
        :param str operation_type: The operation type for correlation context.
        :param str property_name: The name of the correlation property.
        :param str value: The template expression for correlation context property value.
        """
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        """
        The operation name for correlation context.
        """
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        """
        The operation type for correlation context.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[str]:
        """
        The name of the correlation property.
        """
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The template expression for correlation context property value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TrackingDataStoreResponse(dict):
    """
    The properties of tracking data store.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataStoreIngestionUri":
            suggest = "data_store_ingestion_uri"
        elif key == "dataStoreResourceId":
            suggest = "data_store_resource_id"
        elif key == "dataStoreUri":
            suggest = "data_store_uri"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrackingDataStoreResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrackingDataStoreResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrackingDataStoreResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_store_ingestion_uri: str,
                 data_store_resource_id: str,
                 data_store_uri: str,
                 database_name: str):
        """
        The properties of tracking data store.
        :param str data_store_ingestion_uri: The data store ingestion URI.
        :param str data_store_resource_id: The data store resource id.
        :param str data_store_uri: The data store URI.
        :param str database_name: The database name.
        """
        pulumi.set(__self__, "data_store_ingestion_uri", data_store_ingestion_uri)
        pulumi.set(__self__, "data_store_resource_id", data_store_resource_id)
        pulumi.set(__self__, "data_store_uri", data_store_uri)
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="dataStoreIngestionUri")
    def data_store_ingestion_uri(self) -> str:
        """
        The data store ingestion URI.
        """
        return pulumi.get(self, "data_store_ingestion_uri")

    @property
    @pulumi.getter(name="dataStoreResourceId")
    def data_store_resource_id(self) -> str:
        """
        The data store resource id.
        """
        return pulumi.get(self, "data_store_resource_id")

    @property
    @pulumi.getter(name="dataStoreUri")
    def data_store_uri(self) -> str:
        """
        The data store URI.
        """
        return pulumi.get(self, "data_store_uri")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The database name.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class TrackingEventDefinitionResponse(dict):
    """
    The tracking event definition.
    """
    def __init__(__self__, *,
                 operation_name: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 properties: Optional[Mapping[str, Any]] = None):
        """
        The tracking event definition.
        :param str operation_name: The operation name.
        :param str operation_type: The operation type.
        :param Mapping[str, Any] properties: The properties to be collected for event.
        """
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        """
        The operation name.
        """
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        """
        The operation type.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        """
        The properties to be collected for event.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class TrackingProfileDefinitionResponse(dict):
    """
    The tracking profile for the business process
    """
    def __init__(__self__, *,
                 business_process: Optional['outputs.BusinessProcessReferenceResponse'] = None,
                 schema: Optional[str] = None,
                 tracking_definitions: Optional[Mapping[str, 'outputs.FlowTrackingDefinitionResponse']] = None):
        """
        The tracking profile for the business process
        :param 'BusinessProcessReferenceResponse' business_process: The business process reference.
        :param str schema: The tracking definition schema uri.
        :param Mapping[str, 'FlowTrackingDefinitionResponse'] tracking_definitions: The tracking definitions.
        """
        if business_process is not None:
            pulumi.set(__self__, "business_process", business_process)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if tracking_definitions is not None:
            pulumi.set(__self__, "tracking_definitions", tracking_definitions)

    @property
    @pulumi.getter(name="businessProcess")
    def business_process(self) -> Optional['outputs.BusinessProcessReferenceResponse']:
        """
        The business process reference.
        """
        return pulumi.get(self, "business_process")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        The tracking definition schema uri.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="trackingDefinitions")
    def tracking_definitions(self) -> Optional[Mapping[str, 'outputs.FlowTrackingDefinitionResponse']]:
        """
        The tracking definitions.
        """
        return pulumi.get(self, "tracking_definitions")


