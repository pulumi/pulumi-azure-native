# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBusinessProcessResult',
    'AwaitableGetBusinessProcessResult',
    'get_business_process',
    'get_business_process_output',
]

@pulumi.output_type
class GetBusinessProcessResult:
    """
    A business process under application.
    """
    def __init__(__self__, business_process_mapping=None, business_process_stages=None, description=None, id=None, identifier=None, name=None, provisioning_state=None, system_data=None, table_name=None, tracking_data_store_reference_name=None, type=None, version=None):
        if business_process_mapping and not isinstance(business_process_mapping, dict):
            raise TypeError("Expected argument 'business_process_mapping' to be a dict")
        pulumi.set(__self__, "business_process_mapping", business_process_mapping)
        if business_process_stages and not isinstance(business_process_stages, dict):
            raise TypeError("Expected argument 'business_process_stages' to be a dict")
        pulumi.set(__self__, "business_process_stages", business_process_stages)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, dict):
            raise TypeError("Expected argument 'identifier' to be a dict")
        pulumi.set(__self__, "identifier", identifier)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if table_name and not isinstance(table_name, str):
            raise TypeError("Expected argument 'table_name' to be a str")
        pulumi.set(__self__, "table_name", table_name)
        if tracking_data_store_reference_name and not isinstance(tracking_data_store_reference_name, str):
            raise TypeError("Expected argument 'tracking_data_store_reference_name' to be a str")
        pulumi.set(__self__, "tracking_data_store_reference_name", tracking_data_store_reference_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="businessProcessMapping")
    def business_process_mapping(self) -> Optional[Mapping[str, 'outputs.BusinessProcessMappingItemResponse']]:
        """
        The business process mapping.
        """
        return pulumi.get(self, "business_process_mapping")

    @property
    @pulumi.getter(name="businessProcessStages")
    def business_process_stages(self) -> Optional[Mapping[str, 'outputs.BusinessProcessStageResponse']]:
        """
        The business process stages.
        """
        return pulumi.get(self, "business_process_stages")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the business process.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> Optional['outputs.BusinessProcessIdentifierResponse']:
        """
        The business process identifier.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        The table name of the business process.
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="trackingDataStoreReferenceName")
    def tracking_data_store_reference_name(self) -> Optional[str]:
        """
        The tracking data store reference name.
        """
        return pulumi.get(self, "tracking_data_store_reference_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the business process.
        """
        return pulumi.get(self, "version")


class AwaitableGetBusinessProcessResult(GetBusinessProcessResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBusinessProcessResult(
            business_process_mapping=self.business_process_mapping,
            business_process_stages=self.business_process_stages,
            description=self.description,
            id=self.id,
            identifier=self.identifier,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            table_name=self.table_name,
            tracking_data_store_reference_name=self.tracking_data_store_reference_name,
            type=self.type,
            version=self.version)


def get_business_process(application_name: Optional[str] = None,
                         business_process_name: Optional[str] = None,
                         resource_group_name: Optional[str] = None,
                         space_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBusinessProcessResult:
    """
    Get a BusinessProcess
    Azure REST API version: 2023-11-14-preview.


    :param str application_name: The name of the Application
    :param str business_process_name: The name of the business process
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str space_name: The name of the space
    """
    __args__ = dict()
    __args__['applicationName'] = application_name
    __args__['businessProcessName'] = business_process_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['spaceName'] = space_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:integrationspaces:getBusinessProcess', __args__, opts=opts, typ=GetBusinessProcessResult).value

    return AwaitableGetBusinessProcessResult(
        business_process_mapping=pulumi.get(__ret__, 'business_process_mapping'),
        business_process_stages=pulumi.get(__ret__, 'business_process_stages'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        table_name=pulumi.get(__ret__, 'table_name'),
        tracking_data_store_reference_name=pulumi.get(__ret__, 'tracking_data_store_reference_name'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_business_process)
def get_business_process_output(application_name: Optional[pulumi.Input[str]] = None,
                                business_process_name: Optional[pulumi.Input[str]] = None,
                                resource_group_name: Optional[pulumi.Input[str]] = None,
                                space_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBusinessProcessResult]:
    """
    Get a BusinessProcess
    Azure REST API version: 2023-11-14-preview.


    :param str application_name: The name of the Application
    :param str business_process_name: The name of the business process
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str space_name: The name of the space
    """
    ...
