# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AgentPropertiesArgs',
    'AzureStorageBlobContainerEndpointPropertiesArgs',
    'JobDefinitionPropertiesArgs',
    'NfsMountEndpointPropertiesArgs',
]

@pulumi.input_type
class AgentPropertiesArgs:
    def __init__(__self__, *,
                 arc_resource_id: pulumi.Input[str],
                 arc_vm_uuid: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] arc_resource_id: The fully qualified resource ID of the Hybrid Compute resource for the Agent.
        :param pulumi.Input[str] arc_vm_uuid: The VM UUID of the Hybrid Compute resource for the Agent.
        :param pulumi.Input[str] description: A description for the Agent.
        """
        pulumi.set(__self__, "arc_resource_id", arc_resource_id)
        pulumi.set(__self__, "arc_vm_uuid", arc_vm_uuid)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="arcResourceId")
    def arc_resource_id(self) -> pulumi.Input[str]:
        """
        The fully qualified resource ID of the Hybrid Compute resource for the Agent.
        """
        return pulumi.get(self, "arc_resource_id")

    @arc_resource_id.setter
    def arc_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "arc_resource_id", value)

    @property
    @pulumi.getter(name="arcVmUuid")
    def arc_vm_uuid(self) -> pulumi.Input[str]:
        """
        The VM UUID of the Hybrid Compute resource for the Agent.
        """
        return pulumi.get(self, "arc_vm_uuid")

    @arc_vm_uuid.setter
    def arc_vm_uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "arc_vm_uuid", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Agent.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class AzureStorageBlobContainerEndpointPropertiesArgs:
    def __init__(__self__, *,
                 blob_container_name: pulumi.Input[str],
                 endpoint_type: pulumi.Input[str],
                 storage_account_resource_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] blob_container_name: The name of the Storage blob container that is the target destination.
        :param pulumi.Input[str] endpoint_type: The Endpoint resource type.
               Expected value is 'AzureStorageBlobContainer'.
        :param pulumi.Input[str] storage_account_resource_id: The Azure Resource ID of the storage account that is the target destination.
        :param pulumi.Input[str] description: A description for the Endpoint.
        """
        pulumi.set(__self__, "blob_container_name", blob_container_name)
        pulumi.set(__self__, "endpoint_type", 'AzureStorageBlobContainer')
        pulumi.set(__self__, "storage_account_resource_id", storage_account_resource_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="blobContainerName")
    def blob_container_name(self) -> pulumi.Input[str]:
        """
        The name of the Storage blob container that is the target destination.
        """
        return pulumi.get(self, "blob_container_name")

    @blob_container_name.setter
    def blob_container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_container_name", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Input[str]:
        """
        The Endpoint resource type.
        Expected value is 'AzureStorageBlobContainer'.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="storageAccountResourceId")
    def storage_account_resource_id(self) -> pulumi.Input[str]:
        """
        The Azure Resource ID of the storage account that is the target destination.
        """
        return pulumi.get(self, "storage_account_resource_id")

    @storage_account_resource_id.setter
    def storage_account_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_resource_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Endpoint.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class JobDefinitionPropertiesArgs:
    def __init__(__self__, *,
                 copy_mode: pulumi.Input[Union[str, 'CopyMode']],
                 source_name: pulumi.Input[str],
                 target_name: pulumi.Input[str],
                 agent_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 source_subpath: Optional[pulumi.Input[str]] = None,
                 target_subpath: Optional[pulumi.Input[str]] = None):
        """
        Job definition properties.
        :param pulumi.Input[Union[str, 'CopyMode']] copy_mode: Strategy to use for copy.
        :param pulumi.Input[str] source_name: The name of the source Endpoint.
        :param pulumi.Input[str] target_name: The name of the target Endpoint.
        :param pulumi.Input[str] agent_name: Name of the Agent to assign for new Job Runs of this Job Definition.
        :param pulumi.Input[str] description: A description for the Job Definition.
        :param pulumi.Input[str] source_subpath: The subpath to use when reading from the source Endpoint.
        :param pulumi.Input[str] target_subpath: The subpath to use when writing to the target Endpoint.
        """
        pulumi.set(__self__, "copy_mode", copy_mode)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "target_name", target_name)
        if agent_name is not None:
            pulumi.set(__self__, "agent_name", agent_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if source_subpath is not None:
            pulumi.set(__self__, "source_subpath", source_subpath)
        if target_subpath is not None:
            pulumi.set(__self__, "target_subpath", target_subpath)

    @property
    @pulumi.getter(name="copyMode")
    def copy_mode(self) -> pulumi.Input[Union[str, 'CopyMode']]:
        """
        Strategy to use for copy.
        """
        return pulumi.get(self, "copy_mode")

    @copy_mode.setter
    def copy_mode(self, value: pulumi.Input[Union[str, 'CopyMode']]):
        pulumi.set(self, "copy_mode", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Input[str]:
        """
        The name of the source Endpoint.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> pulumi.Input[str]:
        """
        The name of the target Endpoint.
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter(name="agentName")
    def agent_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Agent to assign for new Job Runs of this Job Definition.
        """
        return pulumi.get(self, "agent_name")

    @agent_name.setter
    def agent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Job Definition.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="sourceSubpath")
    def source_subpath(self) -> Optional[pulumi.Input[str]]:
        """
        The subpath to use when reading from the source Endpoint.
        """
        return pulumi.get(self, "source_subpath")

    @source_subpath.setter
    def source_subpath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_subpath", value)

    @property
    @pulumi.getter(name="targetSubpath")
    def target_subpath(self) -> Optional[pulumi.Input[str]]:
        """
        The subpath to use when writing to the target Endpoint.
        """
        return pulumi.get(self, "target_subpath")

    @target_subpath.setter
    def target_subpath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_subpath", value)


@pulumi.input_type
class NfsMountEndpointPropertiesArgs:
    def __init__(__self__, *,
                 endpoint_type: pulumi.Input[str],
                 export: pulumi.Input[str],
                 host: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 nfs_version: Optional[pulumi.Input[Union[str, 'NfsVersion']]] = None):
        """
        :param pulumi.Input[str] endpoint_type: The Endpoint resource type.
               Expected value is 'NfsMount'.
        :param pulumi.Input[str] export: The directory being exported from the server.
        :param pulumi.Input[str] host: The host name or IP address of the server exporting the file system.
        :param pulumi.Input[str] description: A description for the Endpoint.
        :param pulumi.Input[Union[str, 'NfsVersion']] nfs_version: The NFS protocol version.
        """
        pulumi.set(__self__, "endpoint_type", 'NfsMount')
        pulumi.set(__self__, "export", export)
        pulumi.set(__self__, "host", host)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if nfs_version is not None:
            pulumi.set(__self__, "nfs_version", nfs_version)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Input[str]:
        """
        The Endpoint resource type.
        Expected value is 'NfsMount'.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter
    def export(self) -> pulumi.Input[str]:
        """
        The directory being exported from the server.
        """
        return pulumi.get(self, "export")

    @export.setter
    def export(self, value: pulumi.Input[str]):
        pulumi.set(self, "export", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host name or IP address of the server exporting the file system.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Endpoint.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="nfsVersion")
    def nfs_version(self) -> Optional[pulumi.Input[Union[str, 'NfsVersion']]]:
        """
        The NFS protocol version.
        """
        return pulumi.get(self, "nfs_version")

    @nfs_version.setter
    def nfs_version(self, value: Optional[pulumi.Input[Union[str, 'NfsVersion']]]):
        pulumi.set(self, "nfs_version", value)


