# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AutomaticResourcePredictionsProfileResponse',
    'AzureDevOpsOrganizationProfileResponse',
    'AzureDevOpsPermissionProfileResponse',
    'DataDiskResponse',
    'DevOpsAzureSkuResponse',
    'GitHubOrganizationProfileResponse',
    'GitHubOrganizationResponse',
    'ManagedServiceIdentityResponse',
    'ManualResourcePredictionsProfileResponse',
    'NetworkProfileResponse',
    'OrganizationResponse',
    'OsProfileResponse',
    'PoolImageResponse',
    'SecretsManagementSettingsResponse',
    'StatefulResponse',
    'StatelessAgentProfileResponse',
    'StorageProfileResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'VmssFabricProfileResponse',
]

@pulumi.output_type
class AutomaticResourcePredictionsProfileResponse(dict):
    """
    The stand-by agent scheme is determined based on historical demand.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "predictionPreference":
            suggest = "prediction_preference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomaticResourcePredictionsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomaticResourcePredictionsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomaticResourcePredictionsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: _builtins.str,
                 prediction_preference: Optional[_builtins.str] = None):
        """
        The stand-by agent scheme is determined based on historical demand.
        :param _builtins.str kind: Determines how the stand-by scheme should be provided.
               Expected value is 'Automatic'.
        :param _builtins.str prediction_preference: Determines the balance between cost and performance.
        """
        pulumi.set(__self__, "kind", 'Automatic')
        if prediction_preference is not None:
            pulumi.set(__self__, "prediction_preference", prediction_preference)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Determines how the stand-by scheme should be provided.
        Expected value is 'Automatic'.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="predictionPreference")
    def prediction_preference(self) -> Optional[_builtins.str]:
        """
        Determines the balance between cost and performance.
        """
        return pulumi.get(self, "prediction_preference")


@pulumi.output_type
class AzureDevOpsOrganizationProfileResponse(dict):
    """
    Azure DevOps organization profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "permissionProfile":
            suggest = "permission_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureDevOpsOrganizationProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureDevOpsOrganizationProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureDevOpsOrganizationProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: _builtins.str,
                 organizations: Sequence['outputs.OrganizationResponse'],
                 permission_profile: Optional['outputs.AzureDevOpsPermissionProfileResponse'] = None):
        """
        Azure DevOps organization profile
        :param _builtins.str kind: Discriminator property for OrganizationProfile.
               Expected value is 'AzureDevOps'.
        :param Sequence['OrganizationResponse'] organizations: The list of Azure DevOps organizations the pool should be present in.
        :param 'AzureDevOpsPermissionProfileResponse' permission_profile: The type of permission which determines which accounts are admins on the Azure DevOps pool.
        """
        pulumi.set(__self__, "kind", 'AzureDevOps')
        pulumi.set(__self__, "organizations", organizations)
        if permission_profile is not None:
            pulumi.set(__self__, "permission_profile", permission_profile)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Discriminator property for OrganizationProfile.
        Expected value is 'AzureDevOps'.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.OrganizationResponse']:
        """
        The list of Azure DevOps organizations the pool should be present in.
        """
        return pulumi.get(self, "organizations")

    @_builtins.property
    @pulumi.getter(name="permissionProfile")
    def permission_profile(self) -> Optional['outputs.AzureDevOpsPermissionProfileResponse']:
        """
        The type of permission which determines which accounts are admins on the Azure DevOps pool.
        """
        return pulumi.get(self, "permission_profile")


@pulumi.output_type
class AzureDevOpsPermissionProfileResponse(dict):
    """
    Defines the type of Azure DevOps pool permission.
    """
    def __init__(__self__, *,
                 kind: _builtins.str,
                 groups: Optional[Sequence[_builtins.str]] = None,
                 users: Optional[Sequence[_builtins.str]] = None):
        """
        Defines the type of Azure DevOps pool permission.
        :param _builtins.str kind: Determines who has admin permissions to the Azure DevOps pool.
        :param Sequence[_builtins.str] groups: Group email addresses
        :param Sequence[_builtins.str] users: User email addresses
        """
        pulumi.set(__self__, "kind", kind)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Determines who has admin permissions to the Azure DevOps pool.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Group email addresses
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[Sequence[_builtins.str]]:
        """
        User email addresses
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class DataDiskResponse(dict):
    """
    The data disk of the VMSS.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeGiB":
            suggest = "disk_size_gi_b"
        elif key == "driveLetter":
            suggest = "drive_letter"
        elif key == "storageAccountType":
            suggest = "storage_account_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 caching: Optional[_builtins.str] = None,
                 disk_size_gi_b: Optional[_builtins.int] = None,
                 drive_letter: Optional[_builtins.str] = None,
                 storage_account_type: Optional[_builtins.str] = None):
        """
        The data disk of the VMSS.
        :param _builtins.str caching: The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        :param _builtins.int disk_size_gi_b: The initial disk size in gigabytes.
        :param _builtins.str drive_letter: The drive letter for the empty data disk. If not specified, it will be the first available letter.
        :param _builtins.str storage_account_type: The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs".
        """
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if disk_size_gi_b is not None:
            pulumi.set(__self__, "disk_size_gi_b", disk_size_gi_b)
        if drive_letter is not None:
            pulumi.set(__self__, "drive_letter", drive_letter)
        if storage_account_type is not None:
            pulumi.set(__self__, "storage_account_type", storage_account_type)

    @_builtins.property
    @pulumi.getter
    def caching(self) -> Optional[_builtins.str]:
        """
        The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        """
        return pulumi.get(self, "caching")

    @_builtins.property
    @pulumi.getter(name="diskSizeGiB")
    def disk_size_gi_b(self) -> Optional[_builtins.int]:
        """
        The initial disk size in gigabytes.
        """
        return pulumi.get(self, "disk_size_gi_b")

    @_builtins.property
    @pulumi.getter(name="driveLetter")
    def drive_letter(self) -> Optional[_builtins.str]:
        """
        The drive letter for the empty data disk. If not specified, it will be the first available letter.
        """
        return pulumi.get(self, "drive_letter")

    @_builtins.property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> Optional[_builtins.str]:
        """
        The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs".
        """
        return pulumi.get(self, "storage_account_type")


@pulumi.output_type
class DevOpsAzureSkuResponse(dict):
    """
    The Azure SKU of the machines in the pool.
    """
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        The Azure SKU of the machines in the pool.
        :param _builtins.str name: The Azure SKU name of the machines in the pool.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The Azure SKU name of the machines in the pool.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GitHubOrganizationProfileResponse(dict):
    """
    GitHub organization profile
    """
    def __init__(__self__, *,
                 kind: _builtins.str,
                 organizations: Sequence['outputs.GitHubOrganizationResponse']):
        """
        GitHub organization profile
        :param _builtins.str kind: Discriminator property for OrganizationProfile.
               Expected value is 'GitHub'.
        :param Sequence['GitHubOrganizationResponse'] organizations: The list of GitHub organizations/repositories the pool should be present in.
        """
        pulumi.set(__self__, "kind", 'GitHub')
        pulumi.set(__self__, "organizations", organizations)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Discriminator property for OrganizationProfile.
        Expected value is 'GitHub'.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.GitHubOrganizationResponse']:
        """
        The list of GitHub organizations/repositories the pool should be present in.
        """
        return pulumi.get(self, "organizations")


@pulumi.output_type
class GitHubOrganizationResponse(dict):
    """
    Defines a GitHub organization
    """
    def __init__(__self__, *,
                 url: _builtins.str,
                 repositories: Optional[Sequence[_builtins.str]] = None):
        """
        Defines a GitHub organization
        :param _builtins.str url: The GitHub organization URL in which the pool should be created.
        :param Sequence[_builtins.str] repositories: Optional list of repositories in which the pool should be created.
        """
        pulumi.set(__self__, "url", url)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The GitHub organization URL in which the pool should be created.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence[_builtins.str]]:
        """
        Optional list of repositories in which the pool should be created.
        """
        return pulumi.get(self, "repositories")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param _builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ManualResourcePredictionsProfileResponse(dict):
    """
    Customer provides the stand-by agent scheme.
    """
    def __init__(__self__, *,
                 kind: _builtins.str):
        """
        Customer provides the stand-by agent scheme.
        :param _builtins.str kind: Determines how the stand-by scheme should be provided.
               Expected value is 'Manual'.
        """
        pulumi.set(__self__, "kind", 'Manual')

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Determines how the stand-by scheme should be provided.
        Expected value is 'Manual'.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class NetworkProfileResponse(dict):
    """
    The network profile of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str):
        """
        The network profile of the machines in the pool.
        :param _builtins.str subnet_id: The subnet id on which to put all machines created in the pool.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet id on which to put all machines created in the pool.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class OrganizationResponse(dict):
    """
    Defines an Azure DevOps organization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "openAccess":
            suggest = "open_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: _builtins.str,
                 open_access: Optional[_builtins.bool] = None,
                 parallelism: Optional[_builtins.int] = None,
                 projects: Optional[Sequence[_builtins.str]] = None):
        """
        Defines an Azure DevOps organization.
        :param _builtins.str url: The Azure DevOps organization URL in which the pool should be created.
        :param _builtins.bool open_access: Determines if the pool should have open access to all projects in this organization.
        :param _builtins.int parallelism: How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
        :param Sequence[_builtins.str] projects: Optional list of projects in which the pool should be created.
        """
        pulumi.set(__self__, "url", url)
        if open_access is not None:
            pulumi.set(__self__, "open_access", open_access)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The Azure DevOps organization URL in which the pool should be created.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="openAccess")
    def open_access(self) -> Optional[_builtins.bool]:
        """
        Determines if the pool should have open access to all projects in this organization.
        """
        return pulumi.get(self, "open_access")

    @_builtins.property
    @pulumi.getter
    def parallelism(self) -> Optional[_builtins.int]:
        """
        How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
        """
        return pulumi.get(self, "parallelism")

    @_builtins.property
    @pulumi.getter
    def projects(self) -> Optional[Sequence[_builtins.str]]:
        """
        Optional list of projects in which the pool should be created.
        """
        return pulumi.get(self, "projects")


@pulumi.output_type
class OsProfileResponse(dict):
    """
    The OS profile of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logonType":
            suggest = "logon_type"
        elif key == "secretsManagementSettings":
            suggest = "secrets_management_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logon_type: Optional[_builtins.str] = None,
                 secrets_management_settings: Optional['outputs.SecretsManagementSettingsResponse'] = None):
        """
        The OS profile of the machines in the pool.
        :param _builtins.str logon_type: Determines how the service should be run. By default, this will be set to Service.
        :param 'SecretsManagementSettingsResponse' secrets_management_settings: The secret management settings of the machines in the pool.
        """
        if logon_type is not None:
            pulumi.set(__self__, "logon_type", logon_type)
        if secrets_management_settings is not None:
            pulumi.set(__self__, "secrets_management_settings", secrets_management_settings)

    @_builtins.property
    @pulumi.getter(name="logonType")
    def logon_type(self) -> Optional[_builtins.str]:
        """
        Determines how the service should be run. By default, this will be set to Service.
        """
        return pulumi.get(self, "logon_type")

    @_builtins.property
    @pulumi.getter(name="secretsManagementSettings")
    def secrets_management_settings(self) -> Optional['outputs.SecretsManagementSettingsResponse']:
        """
        The secret management settings of the machines in the pool.
        """
        return pulumi.get(self, "secrets_management_settings")


@pulumi.output_type
class PoolImageResponse(dict):
    """
    The VM image of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ephemeralType":
            suggest = "ephemeral_type"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "wellKnownImageName":
            suggest = "well_known_image_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolImageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolImageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolImageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aliases: Optional[Sequence[_builtins.str]] = None,
                 buffer: Optional[_builtins.str] = None,
                 ephemeral_type: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 well_known_image_name: Optional[_builtins.str] = None):
        """
        The VM image of the machines in the pool.
        :param Sequence[_builtins.str] aliases: List of aliases to reference the image by.
        :param _builtins.str buffer: The percentage of the buffer to be allocated to this image.
        :param _builtins.str ephemeral_type: The ephemeral type of the image.
        :param _builtins.str resource_id: The resource id of the image.
        :param _builtins.str well_known_image_name: The image to use from a well-known set of images made available to customers.
        """
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if buffer is None:
            buffer = '*'
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if ephemeral_type is not None:
            pulumi.set(__self__, "ephemeral_type", ephemeral_type)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if well_known_image_name is not None:
            pulumi.set(__self__, "well_known_image_name", well_known_image_name)

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of aliases to reference the image by.
        """
        return pulumi.get(self, "aliases")

    @_builtins.property
    @pulumi.getter
    def buffer(self) -> Optional[_builtins.str]:
        """
        The percentage of the buffer to be allocated to this image.
        """
        return pulumi.get(self, "buffer")

    @_builtins.property
    @pulumi.getter(name="ephemeralType")
    def ephemeral_type(self) -> Optional[_builtins.str]:
        """
        The ephemeral type of the image.
        """
        return pulumi.get(self, "ephemeral_type")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The resource id of the image.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="wellKnownImageName")
    def well_known_image_name(self) -> Optional[_builtins.str]:
        """
        The image to use from a well-known set of images made available to customers.
        """
        return pulumi.get(self, "well_known_image_name")


@pulumi.output_type
class SecretsManagementSettingsResponse(dict):
    """
    The secret management settings of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyExportable":
            suggest = "key_exportable"
        elif key == "observedCertificates":
            suggest = "observed_certificates"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretsManagementSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretsManagementSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretsManagementSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_exportable: _builtins.bool,
                 observed_certificates: Sequence[_builtins.str],
                 certificate_store_location: Optional[_builtins.str] = None,
                 certificate_store_name: Optional[_builtins.str] = None):
        """
        The secret management settings of the machines in the pool.
        :param _builtins.bool key_exportable: Defines if the key of the certificates should be exportable.
        :param Sequence[_builtins.str] observed_certificates: The list of certificates to install on all machines in the pool.
        :param _builtins.str certificate_store_location: Where to store certificates on the machine.
        :param _builtins.str certificate_store_name: Name of the certificate store to use on the machine, currently 'My' and 'Root' are supported.
        """
        pulumi.set(__self__, "key_exportable", key_exportable)
        pulumi.set(__self__, "observed_certificates", observed_certificates)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)

    @_builtins.property
    @pulumi.getter(name="keyExportable")
    def key_exportable(self) -> _builtins.bool:
        """
        Defines if the key of the certificates should be exportable.
        """
        return pulumi.get(self, "key_exportable")

    @_builtins.property
    @pulumi.getter(name="observedCertificates")
    def observed_certificates(self) -> Sequence[_builtins.str]:
        """
        The list of certificates to install on all machines in the pool.
        """
        return pulumi.get(self, "observed_certificates")

    @_builtins.property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[_builtins.str]:
        """
        Where to store certificates on the machine.
        """
        return pulumi.get(self, "certificate_store_location")

    @_builtins.property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[_builtins.str]:
        """
        Name of the certificate store to use on the machine, currently 'My' and 'Root' are supported.
        """
        return pulumi.get(self, "certificate_store_name")


@pulumi.output_type
class StatefulResponse(dict):
    """
    Stateful profile meaning that the machines will be returned to the pool after running a job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gracePeriodTimeSpan":
            suggest = "grace_period_time_span"
        elif key == "maxAgentLifetime":
            suggest = "max_agent_lifetime"
        elif key == "resourcePredictions":
            suggest = "resource_predictions"
        elif key == "resourcePredictionsProfile":
            suggest = "resource_predictions_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StatefulResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StatefulResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StatefulResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: _builtins.str,
                 grace_period_time_span: Optional[_builtins.str] = None,
                 max_agent_lifetime: Optional[_builtins.str] = None,
                 resource_predictions: Optional[Any] = None,
                 resource_predictions_profile: Optional[Any] = None):
        """
        Stateful profile meaning that the machines will be returned to the pool after running a job.
        :param _builtins.str kind: Discriminator property for AgentProfile.
               Expected value is 'Stateful'.
        :param _builtins.str grace_period_time_span: How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week.
        :param _builtins.str max_agent_lifetime: How long should stateful machines be kept around. The maximum is one week.
        :param Any resource_predictions: Defines pool buffer/stand-by agents.
        :param Union['AutomaticResourcePredictionsProfileResponse', 'ManualResourcePredictionsProfileResponse'] resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        """
        pulumi.set(__self__, "kind", 'Stateful')
        if grace_period_time_span is not None:
            pulumi.set(__self__, "grace_period_time_span", grace_period_time_span)
        if max_agent_lifetime is not None:
            pulumi.set(__self__, "max_agent_lifetime", max_agent_lifetime)
        if resource_predictions is not None:
            pulumi.set(__self__, "resource_predictions", resource_predictions)
        if resource_predictions_profile is not None:
            pulumi.set(__self__, "resource_predictions_profile", resource_predictions_profile)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Discriminator property for AgentProfile.
        Expected value is 'Stateful'.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="gracePeriodTimeSpan")
    def grace_period_time_span(self) -> Optional[_builtins.str]:
        """
        How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week.
        """
        return pulumi.get(self, "grace_period_time_span")

    @_builtins.property
    @pulumi.getter(name="maxAgentLifetime")
    def max_agent_lifetime(self) -> Optional[_builtins.str]:
        """
        How long should stateful machines be kept around. The maximum is one week.
        """
        return pulumi.get(self, "max_agent_lifetime")

    @_builtins.property
    @pulumi.getter(name="resourcePredictions")
    def resource_predictions(self) -> Optional[Any]:
        """
        Defines pool buffer/stand-by agents.
        """
        return pulumi.get(self, "resource_predictions")

    @_builtins.property
    @pulumi.getter(name="resourcePredictionsProfile")
    def resource_predictions_profile(self) -> Optional[Any]:
        """
        Defines how the pool buffer/stand-by agents is provided.
        """
        return pulumi.get(self, "resource_predictions_profile")


@pulumi.output_type
class StatelessAgentProfileResponse(dict):
    """
    Stateless profile meaning that the machines will be cleaned up after running a job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourcePredictions":
            suggest = "resource_predictions"
        elif key == "resourcePredictionsProfile":
            suggest = "resource_predictions_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StatelessAgentProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StatelessAgentProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StatelessAgentProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: _builtins.str,
                 resource_predictions: Optional[Any] = None,
                 resource_predictions_profile: Optional[Any] = None):
        """
        Stateless profile meaning that the machines will be cleaned up after running a job.
        :param _builtins.str kind: Discriminator property for AgentProfile.
               Expected value is 'Stateless'.
        :param Any resource_predictions: Defines pool buffer/stand-by agents.
        :param Union['AutomaticResourcePredictionsProfileResponse', 'ManualResourcePredictionsProfileResponse'] resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        """
        pulumi.set(__self__, "kind", 'Stateless')
        if resource_predictions is not None:
            pulumi.set(__self__, "resource_predictions", resource_predictions)
        if resource_predictions_profile is not None:
            pulumi.set(__self__, "resource_predictions_profile", resource_predictions_profile)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Discriminator property for AgentProfile.
        Expected value is 'Stateless'.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="resourcePredictions")
    def resource_predictions(self) -> Optional[Any]:
        """
        Defines pool buffer/stand-by agents.
        """
        return pulumi.get(self, "resource_predictions")

    @_builtins.property
    @pulumi.getter(name="resourcePredictionsProfile")
    def resource_predictions_profile(self) -> Optional[Any]:
        """
        Defines how the pool buffer/stand-by agents is provided.
        """
        return pulumi.get(self, "resource_predictions_profile")


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    The storage profile of the VMSS.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "osDiskStorageAccountType":
            suggest = "os_disk_storage_account_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.DataDiskResponse']] = None,
                 os_disk_storage_account_type: Optional[_builtins.str] = None):
        """
        The storage profile of the VMSS.
        :param Sequence['DataDiskResponse'] data_disks: A list of empty data disks to attach.
        :param _builtins.str os_disk_storage_account_type: The Azure SKU name of the machines in the pool.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if os_disk_storage_account_type is not None:
            pulumi.set(__self__, "os_disk_storage_account_type", os_disk_storage_account_type)

    @_builtins.property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.DataDiskResponse']]:
        """
        A list of empty data disks to attach.
        """
        return pulumi.get(self, "data_disks")

    @_builtins.property
    @pulumi.getter(name="osDiskStorageAccountType")
    def os_disk_storage_account_type(self) -> Optional[_builtins.str]:
        """
        The Azure SKU name of the machines in the pool.
        """
        return pulumi.get(self, "os_disk_storage_account_type")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        User assigned identity properties
        :param _builtins.str client_id: The client ID of the assigned identity.
        :param _builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VmssFabricProfileResponse(dict):
    """
    The agents will run on Virtual Machine Scale Sets.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkProfile":
            suggest = "network_profile"
        elif key == "osProfile":
            suggest = "os_profile"
        elif key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmssFabricProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmssFabricProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmssFabricProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 images: Sequence['outputs.PoolImageResponse'],
                 kind: _builtins.str,
                 sku: 'outputs.DevOpsAzureSkuResponse',
                 network_profile: Optional['outputs.NetworkProfileResponse'] = None,
                 os_profile: Optional['outputs.OsProfileResponse'] = None,
                 storage_profile: Optional['outputs.StorageProfileResponse'] = None):
        """
        The agents will run on Virtual Machine Scale Sets.
        :param Sequence['PoolImageResponse'] images: The VM images of the machines in the pool.
        :param _builtins.str kind: Discriminator property for FabricProfile.
               Expected value is 'Vmss'.
        :param 'DevOpsAzureSkuResponse' sku: The Azure SKU of the machines in the pool.
        :param 'NetworkProfileResponse' network_profile: The network profile of the machines in the pool.
        :param 'OsProfileResponse' os_profile: The OS profile of the machines in the pool.
        :param 'StorageProfileResponse' storage_profile: The storage profile of the machines in the pool.
        """
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "kind", 'Vmss')
        pulumi.set(__self__, "sku", sku)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)
        if os_profile is not None:
            pulumi.set(__self__, "os_profile", os_profile)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @_builtins.property
    @pulumi.getter
    def images(self) -> Sequence['outputs.PoolImageResponse']:
        """
        The VM images of the machines in the pool.
        """
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Discriminator property for FabricProfile.
        Expected value is 'Vmss'.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def sku(self) -> 'outputs.DevOpsAzureSkuResponse':
        """
        The Azure SKU of the machines in the pool.
        """
        return pulumi.get(self, "sku")

    @_builtins.property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional['outputs.NetworkProfileResponse']:
        """
        The network profile of the machines in the pool.
        """
        return pulumi.get(self, "network_profile")

    @_builtins.property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional['outputs.OsProfileResponse']:
        """
        The OS profile of the machines in the pool.
        """
        return pulumi.get(self, "os_profile")

    @_builtins.property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional['outputs.StorageProfileResponse']:
        """
        The storage profile of the machines in the pool.
        """
        return pulumi.get(self, "storage_profile")


