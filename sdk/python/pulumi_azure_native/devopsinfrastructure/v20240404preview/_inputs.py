# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AutomaticResourcePredictionsProfileArgs',
    'AzureDevOpsOrganizationProfileArgs',
    'AzureDevOpsPermissionProfileArgs',
    'DataDiskArgs',
    'DevOpsAzureSkuArgs',
    'GitHubOrganizationProfileArgs',
    'GitHubOrganizationArgs',
    'ManagedServiceIdentityArgs',
    'ManualResourcePredictionsProfileArgs',
    'NetworkProfileArgs',
    'OrganizationArgs',
    'OsProfileArgs',
    'PoolImageArgs',
    'SecretsManagementSettingsArgs',
    'StatefulArgs',
    'StatelessAgentProfileArgs',
    'StorageProfileArgs',
    'VmssFabricProfileArgs',
]

@pulumi.input_type
class AutomaticResourcePredictionsProfileArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 prediction_preference: Optional[pulumi.Input[Union[str, 'PredictionPreference']]] = None):
        """
        The stand-by agent scheme is determined based on historical demand.
        :param pulumi.Input[str] kind: Determines how the stand-by scheme should be provided.
               Expected value is 'Automatic'.
        :param pulumi.Input[Union[str, 'PredictionPreference']] prediction_preference: Determines the balance between cost and performance.
        """
        pulumi.set(__self__, "kind", 'Automatic')
        if prediction_preference is not None:
            pulumi.set(__self__, "prediction_preference", prediction_preference)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Determines how the stand-by scheme should be provided.
        Expected value is 'Automatic'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="predictionPreference")
    def prediction_preference(self) -> Optional[pulumi.Input[Union[str, 'PredictionPreference']]]:
        """
        Determines the balance between cost and performance.
        """
        return pulumi.get(self, "prediction_preference")

    @prediction_preference.setter
    def prediction_preference(self, value: Optional[pulumi.Input[Union[str, 'PredictionPreference']]]):
        pulumi.set(self, "prediction_preference", value)


@pulumi.input_type
class AzureDevOpsOrganizationProfileArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 organizations: pulumi.Input[Sequence[pulumi.Input['OrganizationArgs']]],
                 permission_profile: Optional[pulumi.Input['AzureDevOpsPermissionProfileArgs']] = None):
        """
        Azure DevOps organization profile
        :param pulumi.Input[str] kind: Discriminator property for OrganizationProfile.
               Expected value is 'AzureDevOps'.
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationArgs']]] organizations: The list of Azure DevOps organizations the pool should be present in.
        :param pulumi.Input['AzureDevOpsPermissionProfileArgs'] permission_profile: The type of permission which determines which accounts are admins on the Azure DevOps pool.
        """
        pulumi.set(__self__, "kind", 'AzureDevOps')
        pulumi.set(__self__, "organizations", organizations)
        if permission_profile is not None:
            pulumi.set(__self__, "permission_profile", permission_profile)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Discriminator property for OrganizationProfile.
        Expected value is 'AzureDevOps'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def organizations(self) -> pulumi.Input[Sequence[pulumi.Input['OrganizationArgs']]]:
        """
        The list of Azure DevOps organizations the pool should be present in.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: pulumi.Input[Sequence[pulumi.Input['OrganizationArgs']]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter(name="permissionProfile")
    def permission_profile(self) -> Optional[pulumi.Input['AzureDevOpsPermissionProfileArgs']]:
        """
        The type of permission which determines which accounts are admins on the Azure DevOps pool.
        """
        return pulumi.get(self, "permission_profile")

    @permission_profile.setter
    def permission_profile(self, value: Optional[pulumi.Input['AzureDevOpsPermissionProfileArgs']]):
        pulumi.set(self, "permission_profile", value)


@pulumi.input_type
class AzureDevOpsPermissionProfileArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[Union[str, 'AzureDevOpsPermissionType']],
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines the type of Azure DevOps pool permission.
        :param pulumi.Input[Union[str, 'AzureDevOpsPermissionType']] kind: Determines who has admin permissions to the Azure DevOps pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Group email addresses
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: User email addresses
        """
        pulumi.set(__self__, "kind", kind)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[Union[str, 'AzureDevOpsPermissionType']]:
        """
        Determines who has admin permissions to the Azure DevOps pool.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[Union[str, 'AzureDevOpsPermissionType']]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Group email addresses
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User email addresses
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class DataDiskArgs:
    def __init__(__self__, *,
                 caching: Optional[pulumi.Input[Union[str, 'CachingType']]] = None,
                 disk_size_gi_b: Optional[pulumi.Input[int]] = None,
                 drive_letter: Optional[pulumi.Input[str]] = None,
                 storage_account_type: Optional[pulumi.Input[Union[str, 'StorageAccountType']]] = None):
        """
        The data disk of the VMSS.
        :param pulumi.Input[Union[str, 'CachingType']] caching: The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        :param pulumi.Input[int] disk_size_gi_b: The initial disk size in gigabytes.
        :param pulumi.Input[str] drive_letter: The drive letter for the empty data disk. If not specified, it will be the first available letter.
        :param pulumi.Input[Union[str, 'StorageAccountType']] storage_account_type: The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs".
        """
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if disk_size_gi_b is not None:
            pulumi.set(__self__, "disk_size_gi_b", disk_size_gi_b)
        if drive_letter is not None:
            pulumi.set(__self__, "drive_letter", drive_letter)
        if storage_account_type is not None:
            pulumi.set(__self__, "storage_account_type", storage_account_type)

    @property
    @pulumi.getter
    def caching(self) -> Optional[pulumi.Input[Union[str, 'CachingType']]]:
        """
        The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        """
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional[pulumi.Input[Union[str, 'CachingType']]]):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="diskSizeGiB")
    def disk_size_gi_b(self) -> Optional[pulumi.Input[int]]:
        """
        The initial disk size in gigabytes.
        """
        return pulumi.get(self, "disk_size_gi_b")

    @disk_size_gi_b.setter
    def disk_size_gi_b(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_gi_b", value)

    @property
    @pulumi.getter(name="driveLetter")
    def drive_letter(self) -> Optional[pulumi.Input[str]]:
        """
        The drive letter for the empty data disk. If not specified, it will be the first available letter.
        """
        return pulumi.get(self, "drive_letter")

    @drive_letter.setter
    def drive_letter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drive_letter", value)

    @property
    @pulumi.getter(name="storageAccountType")
    def storage_account_type(self) -> Optional[pulumi.Input[Union[str, 'StorageAccountType']]]:
        """
        The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs".
        """
        return pulumi.get(self, "storage_account_type")

    @storage_account_type.setter
    def storage_account_type(self, value: Optional[pulumi.Input[Union[str, 'StorageAccountType']]]):
        pulumi.set(self, "storage_account_type", value)


@pulumi.input_type
class DevOpsAzureSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        The Azure SKU of the machines in the pool.
        :param pulumi.Input[str] name: The Azure SKU name of the machines in the pool.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Azure SKU name of the machines in the pool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GitHubOrganizationProfileArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 organizations: pulumi.Input[Sequence[pulumi.Input['GitHubOrganizationArgs']]]):
        """
        GitHub organization profile
        :param pulumi.Input[str] kind: Discriminator property for OrganizationProfile.
               Expected value is 'GitHub'.
        :param pulumi.Input[Sequence[pulumi.Input['GitHubOrganizationArgs']]] organizations: The list of GitHub organizations/repositories the pool should be present in.
        """
        pulumi.set(__self__, "kind", 'GitHub')
        pulumi.set(__self__, "organizations", organizations)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Discriminator property for OrganizationProfile.
        Expected value is 'GitHub'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def organizations(self) -> pulumi.Input[Sequence[pulumi.Input['GitHubOrganizationArgs']]]:
        """
        The list of GitHub organizations/repositories the pool should be present in.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: pulumi.Input[Sequence[pulumi.Input['GitHubOrganizationArgs']]]):
        pulumi.set(self, "organizations", value)


@pulumi.input_type
class GitHubOrganizationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a GitHub organization
        :param pulumi.Input[str] url: The GitHub organization URL in which the pool should be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repositories: Optional list of repositories in which the pool should be created.
        """
        pulumi.set(__self__, "url", url)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The GitHub organization URL in which the pool should be created.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional list of repositories in which the pool should be created.
        """
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repositories", value)


@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class ManualResourcePredictionsProfileArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str]):
        """
        Customer provides the stand-by agent scheme.
        :param pulumi.Input[str] kind: Determines how the stand-by scheme should be provided.
               Expected value is 'Manual'.
        """
        pulumi.set(__self__, "kind", 'Manual')

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Determines how the stand-by scheme should be provided.
        Expected value is 'Manual'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class NetworkProfileArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str]):
        """
        The network profile of the machines in the pool.
        :param pulumi.Input[str] subnet_id: The subnet id on which to put all machines created in the pool.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet id on which to put all machines created in the pool.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class OrganizationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 parallelism: Optional[pulumi.Input[int]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines an Azure DevOps organization.
        :param pulumi.Input[str] url: The Azure DevOps organization URL in which the pool should be created.
        :param pulumi.Input[int] parallelism: How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] projects: Optional list of projects in which the pool should be created.
        """
        pulumi.set(__self__, "url", url)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The Azure DevOps organization URL in which the pool should be created.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
        """
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional list of projects in which the pool should be created.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "projects", value)


@pulumi.input_type
class OsProfileArgs:
    def __init__(__self__, *,
                 logon_type: Optional[pulumi.Input[Union[str, 'LogonType']]] = None,
                 secrets_management_settings: Optional[pulumi.Input['SecretsManagementSettingsArgs']] = None):
        """
        The OS profile of the machines in the pool.
        :param pulumi.Input[Union[str, 'LogonType']] logon_type: Determines how the service should be run. By default, this will be set to Service.
        :param pulumi.Input['SecretsManagementSettingsArgs'] secrets_management_settings: The secret management settings of the machines in the pool.
        """
        if logon_type is not None:
            pulumi.set(__self__, "logon_type", logon_type)
        if secrets_management_settings is not None:
            pulumi.set(__self__, "secrets_management_settings", secrets_management_settings)

    @property
    @pulumi.getter(name="logonType")
    def logon_type(self) -> Optional[pulumi.Input[Union[str, 'LogonType']]]:
        """
        Determines how the service should be run. By default, this will be set to Service.
        """
        return pulumi.get(self, "logon_type")

    @logon_type.setter
    def logon_type(self, value: Optional[pulumi.Input[Union[str, 'LogonType']]]):
        pulumi.set(self, "logon_type", value)

    @property
    @pulumi.getter(name="secretsManagementSettings")
    def secrets_management_settings(self) -> Optional[pulumi.Input['SecretsManagementSettingsArgs']]:
        """
        The secret management settings of the machines in the pool.
        """
        return pulumi.get(self, "secrets_management_settings")

    @secrets_management_settings.setter
    def secrets_management_settings(self, value: Optional[pulumi.Input['SecretsManagementSettingsArgs']]):
        pulumi.set(self, "secrets_management_settings", value)


@pulumi.input_type
class PoolImageArgs:
    def __init__(__self__, *,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 buffer: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 well_known_image_name: Optional[pulumi.Input[str]] = None):
        """
        The VM image of the machines in the pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: List of aliases to reference the image by.
        :param pulumi.Input[str] buffer: The percentage of the buffer to be allocated to this image.
        :param pulumi.Input[str] resource_id: The resource id of the image.
        :param pulumi.Input[str] well_known_image_name: The image to use from a well-known set of images made available to customers.
        """
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if buffer is None:
            buffer = '*'
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if well_known_image_name is not None:
            pulumi.set(__self__, "well_known_image_name", well_known_image_name)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of aliases to reference the image by.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        The percentage of the buffer to be allocated to this image.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the image.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="wellKnownImageName")
    def well_known_image_name(self) -> Optional[pulumi.Input[str]]:
        """
        The image to use from a well-known set of images made available to customers.
        """
        return pulumi.get(self, "well_known_image_name")

    @well_known_image_name.setter
    def well_known_image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "well_known_image_name", value)


@pulumi.input_type
class SecretsManagementSettingsArgs:
    def __init__(__self__, *,
                 key_exportable: pulumi.Input[bool],
                 observed_certificates: pulumi.Input[Sequence[pulumi.Input[str]]],
                 certificate_store_location: Optional[pulumi.Input[str]] = None):
        """
        The secret management settings of the machines in the pool.
        :param pulumi.Input[bool] key_exportable: Defines if the key of the certificates should be exportable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] observed_certificates: The list of certificates to install on all machines in the pool.
        :param pulumi.Input[str] certificate_store_location: Where to store certificates on the machine.
        """
        pulumi.set(__self__, "key_exportable", key_exportable)
        pulumi.set(__self__, "observed_certificates", observed_certificates)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)

    @property
    @pulumi.getter(name="keyExportable")
    def key_exportable(self) -> pulumi.Input[bool]:
        """
        Defines if the key of the certificates should be exportable.
        """
        return pulumi.get(self, "key_exportable")

    @key_exportable.setter
    def key_exportable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "key_exportable", value)

    @property
    @pulumi.getter(name="observedCertificates")
    def observed_certificates(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of certificates to install on all machines in the pool.
        """
        return pulumi.get(self, "observed_certificates")

    @observed_certificates.setter
    def observed_certificates(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "observed_certificates", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        """
        Where to store certificates on the machine.
        """
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)


@pulumi.input_type
class StatefulArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 grace_period_time_span: Optional[pulumi.Input[str]] = None,
                 max_agent_lifetime: Optional[pulumi.Input[str]] = None,
                 resource_predictions: Optional[Any] = None,
                 resource_predictions_profile: Optional[pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']]] = None):
        """
        Stateful profile meaning that the machines will be returned to the pool after running a job.
        :param pulumi.Input[str] kind: Discriminator property for AgentProfile.
               Expected value is 'Stateful'.
        :param pulumi.Input[str] grace_period_time_span: How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week.
        :param pulumi.Input[str] max_agent_lifetime: How long should stateful machines be kept around. The maximum is one week.
        :param Any resource_predictions: Defines pool buffer/stand-by agents.
        :param pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']] resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        """
        pulumi.set(__self__, "kind", 'Stateful')
        if grace_period_time_span is not None:
            pulumi.set(__self__, "grace_period_time_span", grace_period_time_span)
        if max_agent_lifetime is not None:
            pulumi.set(__self__, "max_agent_lifetime", max_agent_lifetime)
        if resource_predictions is not None:
            pulumi.set(__self__, "resource_predictions", resource_predictions)
        if resource_predictions_profile is not None:
            pulumi.set(__self__, "resource_predictions_profile", resource_predictions_profile)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Discriminator property for AgentProfile.
        Expected value is 'Stateful'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="gracePeriodTimeSpan")
    def grace_period_time_span(self) -> Optional[pulumi.Input[str]]:
        """
        How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week.
        """
        return pulumi.get(self, "grace_period_time_span")

    @grace_period_time_span.setter
    def grace_period_time_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grace_period_time_span", value)

    @property
    @pulumi.getter(name="maxAgentLifetime")
    def max_agent_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        How long should stateful machines be kept around. The maximum is one week.
        """
        return pulumi.get(self, "max_agent_lifetime")

    @max_agent_lifetime.setter
    def max_agent_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_agent_lifetime", value)

    @property
    @pulumi.getter(name="resourcePredictions")
    def resource_predictions(self) -> Optional[Any]:
        """
        Defines pool buffer/stand-by agents.
        """
        return pulumi.get(self, "resource_predictions")

    @resource_predictions.setter
    def resource_predictions(self, value: Optional[Any]):
        pulumi.set(self, "resource_predictions", value)

    @property
    @pulumi.getter(name="resourcePredictionsProfile")
    def resource_predictions_profile(self) -> Optional[pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']]]:
        """
        Defines how the pool buffer/stand-by agents is provided.
        """
        return pulumi.get(self, "resource_predictions_profile")

    @resource_predictions_profile.setter
    def resource_predictions_profile(self, value: Optional[pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']]]):
        pulumi.set(self, "resource_predictions_profile", value)


@pulumi.input_type
class StatelessAgentProfileArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 resource_predictions: Optional[Any] = None,
                 resource_predictions_profile: Optional[pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']]] = None):
        """
        Stateless profile meaning that the machines will be cleaned up after running a job.
        :param pulumi.Input[str] kind: Discriminator property for AgentProfile.
               Expected value is 'Stateless'.
        :param Any resource_predictions: Defines pool buffer/stand-by agents.
        :param pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']] resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        """
        pulumi.set(__self__, "kind", 'Stateless')
        if resource_predictions is not None:
            pulumi.set(__self__, "resource_predictions", resource_predictions)
        if resource_predictions_profile is not None:
            pulumi.set(__self__, "resource_predictions_profile", resource_predictions_profile)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Discriminator property for AgentProfile.
        Expected value is 'Stateless'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="resourcePredictions")
    def resource_predictions(self) -> Optional[Any]:
        """
        Defines pool buffer/stand-by agents.
        """
        return pulumi.get(self, "resource_predictions")

    @resource_predictions.setter
    def resource_predictions(self, value: Optional[Any]):
        pulumi.set(self, "resource_predictions", value)

    @property
    @pulumi.getter(name="resourcePredictionsProfile")
    def resource_predictions_profile(self) -> Optional[pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']]]:
        """
        Defines how the pool buffer/stand-by agents is provided.
        """
        return pulumi.get(self, "resource_predictions_profile")

    @resource_predictions_profile.setter
    def resource_predictions_profile(self, value: Optional[pulumi.Input[Union['AutomaticResourcePredictionsProfileArgs', 'ManualResourcePredictionsProfileArgs']]]):
        pulumi.set(self, "resource_predictions_profile", value)


@pulumi.input_type
class StorageProfileArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['DataDiskArgs']]]] = None,
                 os_disk_storage_account_type: Optional[pulumi.Input[Union[str, 'OsDiskStorageAccountType']]] = None):
        """
        The storage profile of the VMSS.
        :param pulumi.Input[Sequence[pulumi.Input['DataDiskArgs']]] data_disks: A list of empty data disks to attach.
        :param pulumi.Input[Union[str, 'OsDiskStorageAccountType']] os_disk_storage_account_type: The Azure SKU name of the machines in the pool.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if os_disk_storage_account_type is not None:
            pulumi.set(__self__, "os_disk_storage_account_type", os_disk_storage_account_type)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataDiskArgs']]]]:
        """
        A list of empty data disks to attach.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="osDiskStorageAccountType")
    def os_disk_storage_account_type(self) -> Optional[pulumi.Input[Union[str, 'OsDiskStorageAccountType']]]:
        """
        The Azure SKU name of the machines in the pool.
        """
        return pulumi.get(self, "os_disk_storage_account_type")

    @os_disk_storage_account_type.setter
    def os_disk_storage_account_type(self, value: Optional[pulumi.Input[Union[str, 'OsDiskStorageAccountType']]]):
        pulumi.set(self, "os_disk_storage_account_type", value)


@pulumi.input_type
class VmssFabricProfileArgs:
    def __init__(__self__, *,
                 images: pulumi.Input[Sequence[pulumi.Input['PoolImageArgs']]],
                 kind: pulumi.Input[str],
                 sku: pulumi.Input['DevOpsAzureSkuArgs'],
                 network_profile: Optional[pulumi.Input['NetworkProfileArgs']] = None,
                 os_profile: Optional[pulumi.Input['OsProfileArgs']] = None,
                 storage_profile: Optional[pulumi.Input['StorageProfileArgs']] = None):
        """
        The agents will run on Virtual Machine Scale Sets.
        :param pulumi.Input[Sequence[pulumi.Input['PoolImageArgs']]] images: The VM images of the machines in the pool.
        :param pulumi.Input[str] kind: Discriminator property for FabricProfile.
               Expected value is 'Vmss'.
        :param pulumi.Input['DevOpsAzureSkuArgs'] sku: The Azure SKU of the machines in the pool.
        :param pulumi.Input['NetworkProfileArgs'] network_profile: The network profile of the machines in the pool.
        :param pulumi.Input['OsProfileArgs'] os_profile: The OS profile of the machines in the pool.
        :param pulumi.Input['StorageProfileArgs'] storage_profile: The storage profile of the machines in the pool.
        """
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "kind", 'Vmss')
        pulumi.set(__self__, "sku", sku)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)
        if os_profile is not None:
            pulumi.set(__self__, "os_profile", os_profile)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter
    def images(self) -> pulumi.Input[Sequence[pulumi.Input['PoolImageArgs']]]:
        """
        The VM images of the machines in the pool.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: pulumi.Input[Sequence[pulumi.Input['PoolImageArgs']]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Discriminator property for FabricProfile.
        Expected value is 'Vmss'.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input['DevOpsAzureSkuArgs']:
        """
        The Azure SKU of the machines in the pool.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input['DevOpsAzureSkuArgs']):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional[pulumi.Input['NetworkProfileArgs']]:
        """
        The network profile of the machines in the pool.
        """
        return pulumi.get(self, "network_profile")

    @network_profile.setter
    def network_profile(self, value: Optional[pulumi.Input['NetworkProfileArgs']]):
        pulumi.set(self, "network_profile", value)

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional[pulumi.Input['OsProfileArgs']]:
        """
        The OS profile of the machines in the pool.
        """
        return pulumi.get(self, "os_profile")

    @os_profile.setter
    def os_profile(self, value: Optional[pulumi.Input['OsProfileArgs']]):
        pulumi.set(self, "os_profile", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['StorageProfileArgs']]:
        """
        The storage profile of the machines in the pool.
        """
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['StorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)


