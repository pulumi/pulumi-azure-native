# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AzureDevOpsOrganizationProfileResponse',
    'DevOpsAzureSkuResponse',
    'ManagedServiceIdentityResponse',
    'NetworkProfileResponse',
    'OrganizationResponse',
    'OsProfileResponse',
    'PoolImageResponse',
    'SecretsManagementSettingsResponse',
    'StatefulResponse',
    'StatelessAgentProfileResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'VmssFabricProfileResponse',
]

@pulumi.output_type
class AzureDevOpsOrganizationProfileResponse(dict):
    """
    Azure DevOps organization profile
    """
    def __init__(__self__, *,
                 kind: str,
                 organizations: Sequence['outputs.OrganizationResponse']):
        """
        Azure DevOps organization profile
        :param str kind: Discriminator property for OrganizationProfile.
               Expected value is 'AzureDevOps'.
        :param Sequence['OrganizationResponse'] organizations: The list of Azure DevOps organizations the pool should be present in.
        """
        pulumi.set(__self__, "kind", 'AzureDevOps')
        pulumi.set(__self__, "organizations", organizations)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Discriminator property for OrganizationProfile.
        Expected value is 'AzureDevOps'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.OrganizationResponse']:
        """
        The list of Azure DevOps organizations the pool should be present in.
        """
        return pulumi.get(self, "organizations")


@pulumi.output_type
class DevOpsAzureSkuResponse(dict):
    """
    The Azure SKU of the machines in the pool.
    """
    def __init__(__self__, *,
                 name: str,
                 tier: Optional[str] = None):
        """
        The Azure SKU of the machines in the pool.
        :param str name: The Azure SKU name of the machines in the pool.
        :param str tier: The Azure SKU tier of the machines in the pool.
        """
        pulumi.set(__self__, "name", name)
        if tier is None:
            tier = 'Standard'
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Azure SKU name of the machines in the pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        The Azure SKU tier of the machines in the pool.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class NetworkProfileResponse(dict):
    """
    The network profile of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str):
        """
        The network profile of the machines in the pool.
        :param str subnet_id: The subnet id on which to put all machines created in the pool.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id on which to put all machines created in the pool.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class OrganizationResponse(dict):
    """
    Defines an Azure DevOps organization.
    """
    def __init__(__self__, *,
                 url: str,
                 parallelism: Optional[int] = None,
                 projects: Optional[Sequence[str]] = None):
        """
        Defines an Azure DevOps organization.
        :param str url: The Azure DevOps organization URL in which the pool should be created.
        :param int parallelism: How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
        :param Sequence[str] projects: Optional list of projects in which the pool should be created.
        """
        pulumi.set(__self__, "url", url)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The Azure DevOps organization URL in which the pool should be created.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[int]:
        """
        How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
        """
        return pulumi.get(self, "parallelism")

    @property
    @pulumi.getter
    def projects(self) -> Optional[Sequence[str]]:
        """
        Optional list of projects in which the pool should be created.
        """
        return pulumi.get(self, "projects")


@pulumi.output_type
class OsProfileResponse(dict):
    """
    The OS profile of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretsManagementSettings":
            suggest = "secrets_management_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secrets_management_settings: 'outputs.SecretsManagementSettingsResponse'):
        """
        The OS profile of the machines in the pool.
        :param 'SecretsManagementSettingsResponse' secrets_management_settings: The secret management settings of the machines in the pool.
        """
        pulumi.set(__self__, "secrets_management_settings", secrets_management_settings)

    @property
    @pulumi.getter(name="secretsManagementSettings")
    def secrets_management_settings(self) -> 'outputs.SecretsManagementSettingsResponse':
        """
        The secret management settings of the machines in the pool.
        """
        return pulumi.get(self, "secrets_management_settings")


@pulumi.output_type
class PoolImageResponse(dict):
    """
    The VM image of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolImageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolImageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolImageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 aliases: Optional[Sequence[str]] = None,
                 buffer: Optional[str] = None):
        """
        The VM image of the machines in the pool.
        :param str resource_id: The resource id of the image.
        :param Sequence[str] aliases: List of aliases to reference the image by.
        :param str buffer: The percentage of the buffer to be allocated to this image.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if buffer is None:
            buffer = '*'
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The resource id of the image.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence[str]]:
        """
        List of aliases to reference the image by.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        The percentage of the buffer to be allocated to this image.
        """
        return pulumi.get(self, "buffer")


@pulumi.output_type
class SecretsManagementSettingsResponse(dict):
    """
    The secret management settings of the machines in the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyExportable":
            suggest = "key_exportable"
        elif key == "observedCertificates":
            suggest = "observed_certificates"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretsManagementSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretsManagementSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretsManagementSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_exportable: bool,
                 observed_certificates: Sequence[str],
                 certificate_store_location: Optional[str] = None):
        """
        The secret management settings of the machines in the pool.
        :param bool key_exportable: Defines if the key of the certificates should be exportable.
        :param Sequence[str] observed_certificates: The list of certificates to install on all machines in the pool.
        :param str certificate_store_location: Where to store certificates on the machine.
        """
        pulumi.set(__self__, "key_exportable", key_exportable)
        pulumi.set(__self__, "observed_certificates", observed_certificates)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)

    @property
    @pulumi.getter(name="keyExportable")
    def key_exportable(self) -> bool:
        """
        Defines if the key of the certificates should be exportable.
        """
        return pulumi.get(self, "key_exportable")

    @property
    @pulumi.getter(name="observedCertificates")
    def observed_certificates(self) -> Sequence[str]:
        """
        The list of certificates to install on all machines in the pool.
        """
        return pulumi.get(self, "observed_certificates")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        """
        Where to store certificates on the machine.
        """
        return pulumi.get(self, "certificate_store_location")


@pulumi.output_type
class StatefulResponse(dict):
    """
    Stateful profile meaning that the machines will be returned to the pool after running a job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAgentLifetime":
            suggest = "max_agent_lifetime"
        elif key == "resourcePredictions":
            suggest = "resource_predictions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StatefulResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StatefulResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StatefulResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 max_agent_lifetime: str,
                 resource_predictions: Optional[Any] = None):
        """
        Stateful profile meaning that the machines will be returned to the pool after running a job.
        :param str kind: Discriminator property for AgentProfile.
               Expected value is 'Stateful'.
        :param str max_agent_lifetime: How long should stateful machines be kept around. The maximum is one week.
        :param Any resource_predictions: Defines pool buffer.
        """
        pulumi.set(__self__, "kind", 'Stateful')
        pulumi.set(__self__, "max_agent_lifetime", max_agent_lifetime)
        if resource_predictions is not None:
            pulumi.set(__self__, "resource_predictions", resource_predictions)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Discriminator property for AgentProfile.
        Expected value is 'Stateful'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="maxAgentLifetime")
    def max_agent_lifetime(self) -> str:
        """
        How long should stateful machines be kept around. The maximum is one week.
        """
        return pulumi.get(self, "max_agent_lifetime")

    @property
    @pulumi.getter(name="resourcePredictions")
    def resource_predictions(self) -> Optional[Any]:
        """
        Defines pool buffer.
        """
        return pulumi.get(self, "resource_predictions")


@pulumi.output_type
class StatelessAgentProfileResponse(dict):
    """
    Stateless profile meaning that the machines will be cleaned up after running a job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourcePredictions":
            suggest = "resource_predictions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StatelessAgentProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StatelessAgentProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StatelessAgentProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 resource_predictions: Optional[Any] = None):
        """
        Stateless profile meaning that the machines will be cleaned up after running a job.
        :param str kind: Discriminator property for AgentProfile.
               Expected value is 'Stateless'.
        :param Any resource_predictions: Defines pool buffer.
        """
        pulumi.set(__self__, "kind", 'Stateless')
        if resource_predictions is not None:
            pulumi.set(__self__, "resource_predictions", resource_predictions)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Discriminator property for AgentProfile.
        Expected value is 'Stateless'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="resourcePredictions")
    def resource_predictions(self) -> Optional[Any]:
        """
        Defines pool buffer.
        """
        return pulumi.get(self, "resource_predictions")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VmssFabricProfileResponse(dict):
    """
    The agents will run on Virtual Machine Scale Sets.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkProfile":
            suggest = "network_profile"
        elif key == "osProfile":
            suggest = "os_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmssFabricProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmssFabricProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmssFabricProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 images: Sequence['outputs.PoolImageResponse'],
                 kind: str,
                 sku: 'outputs.DevOpsAzureSkuResponse',
                 network_profile: Optional['outputs.NetworkProfileResponse'] = None,
                 os_profile: Optional['outputs.OsProfileResponse'] = None):
        """
        The agents will run on Virtual Machine Scale Sets.
        :param Sequence['PoolImageResponse'] images: The VM images of the machines in the pool.
        :param str kind: Discriminator property for FabricProfile.
               Expected value is 'Vmss'.
        :param 'DevOpsAzureSkuResponse' sku: The Azure SKU of the machines in the pool.
        :param 'NetworkProfileResponse' network_profile: The network profile of the machines in the pool.
        :param 'OsProfileResponse' os_profile: The OS profile of the machines in the pool.
        """
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "kind", 'Vmss')
        pulumi.set(__self__, "sku", sku)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)
        if os_profile is not None:
            pulumi.set(__self__, "os_profile", os_profile)

    @property
    @pulumi.getter
    def images(self) -> Sequence['outputs.PoolImageResponse']:
        """
        The VM images of the machines in the pool.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Discriminator property for FabricProfile.
        Expected value is 'Vmss'.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def sku(self) -> 'outputs.DevOpsAzureSkuResponse':
        """
        The Azure SKU of the machines in the pool.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional['outputs.NetworkProfileResponse']:
        """
        The network profile of the machines in the pool.
        """
        return pulumi.get(self, "network_profile")

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional['outputs.OsProfileResponse']:
        """
        The OS profile of the machines in the pool.
        """
        return pulumi.get(self, "os_profile")


