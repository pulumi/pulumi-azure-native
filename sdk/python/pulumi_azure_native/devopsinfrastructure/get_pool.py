# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPoolResult',
    'AwaitableGetPoolResult',
    'get_pool',
    'get_pool_output',
]

@pulumi.output_type
class GetPoolResult:
    """
    Concrete tracked resource types can be created by aliasing this type using a specific property type.
    """
    def __init__(__self__, agent_profile=None, dev_center_project_resource_id=None, fabric_profile=None, id=None, identity=None, location=None, maximum_concurrency=None, name=None, organization_profile=None, provisioning_state=None, system_data=None, tags=None, type=None):
        if agent_profile and not isinstance(agent_profile, dict):
            raise TypeError("Expected argument 'agent_profile' to be a dict")
        pulumi.set(__self__, "agent_profile", agent_profile)
        if dev_center_project_resource_id and not isinstance(dev_center_project_resource_id, str):
            raise TypeError("Expected argument 'dev_center_project_resource_id' to be a str")
        pulumi.set(__self__, "dev_center_project_resource_id", dev_center_project_resource_id)
        if fabric_profile and not isinstance(fabric_profile, dict):
            raise TypeError("Expected argument 'fabric_profile' to be a dict")
        pulumi.set(__self__, "fabric_profile", fabric_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maximum_concurrency and not isinstance(maximum_concurrency, int):
            raise TypeError("Expected argument 'maximum_concurrency' to be a int")
        pulumi.set(__self__, "maximum_concurrency", maximum_concurrency)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_profile and not isinstance(organization_profile, dict):
            raise TypeError("Expected argument 'organization_profile' to be a dict")
        pulumi.set(__self__, "organization_profile", organization_profile)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="agentProfile")
    def agent_profile(self) -> Any:
        """
        Defines how the machine will be handled once it executed a job.
        """
        return pulumi.get(self, "agent_profile")

    @property
    @pulumi.getter(name="devCenterProjectResourceId")
    def dev_center_project_resource_id(self) -> str:
        """
        The resource id of the DevCenter Project the pool belongs to.
        """
        return pulumi.get(self, "dev_center_project_resource_id")

    @property
    @pulumi.getter(name="fabricProfile")
    def fabric_profile(self) -> 'outputs.VmssFabricProfileResponse':
        """
        Defines the type of fabric the agent will run on.
        """
        return pulumi.get(self, "fabric_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumConcurrency")
    def maximum_concurrency(self) -> int:
        """
        Defines how many resources can there be created at any given time.
        """
        return pulumi.get(self, "maximum_concurrency")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationProfile")
    def organization_profile(self) -> 'outputs.AzureDevOpsOrganizationProfileResponse':
        """
        Defines the organization in which the pool will be used.
        """
        return pulumi.get(self, "organization_profile")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        The status of the current operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPoolResult(GetPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoolResult(
            agent_profile=self.agent_profile,
            dev_center_project_resource_id=self.dev_center_project_resource_id,
            fabric_profile=self.fabric_profile,
            id=self.id,
            identity=self.identity,
            location=self.location,
            maximum_concurrency=self.maximum_concurrency,
            name=self.name,
            organization_profile=self.organization_profile,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_pool(pool_name: Optional[str] = None,
             resource_group_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoolResult:
    """
    Get a Pool
    Azure REST API version: 2023-10-30-preview.


    :param str pool_name: Name of the pool. It needs to be globally unique.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:devopsinfrastructure:getPool', __args__, opts=opts, typ=GetPoolResult).value

    return AwaitableGetPoolResult(
        agent_profile=pulumi.get(__ret__, 'agent_profile'),
        dev_center_project_resource_id=pulumi.get(__ret__, 'dev_center_project_resource_id'),
        fabric_profile=pulumi.get(__ret__, 'fabric_profile'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        location=pulumi.get(__ret__, 'location'),
        maximum_concurrency=pulumi.get(__ret__, 'maximum_concurrency'),
        name=pulumi.get(__ret__, 'name'),
        organization_profile=pulumi.get(__ret__, 'organization_profile'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_pool)
def get_pool_output(pool_name: Optional[pulumi.Input[str]] = None,
                    resource_group_name: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPoolResult]:
    """
    Get a Pool
    Azure REST API version: 2023-10-30-preview.


    :param str pool_name: Name of the pool. It needs to be globally unique.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
