# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ARecordResponse',
    'AaaaRecordResponse',
    'CaaRecordResponse',
    'CnameRecordResponse',
    'DelegationSignerInfoResponse',
    'DigestResponse',
    'DnsResourceReferenceResponse',
    'DsRecordResponse',
    'MxRecordResponse',
    'NaptrRecordResponse',
    'NsRecordResponse',
    'PtrRecordResponse',
    'SigningKeyResponse',
    'SoaRecordResponse',
    'SrvRecordResponse',
    'SubResourceResponse',
    'SystemDataResponse',
    'TlsaRecordResponse',
    'TxtRecordResponse',
]

@pulumi.output_type
class ARecordResponse(dict):
    """
    An A record.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ARecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ARecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ARecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[_builtins.str] = None):
        """
        An A record.
        :param _builtins.str ipv4_address: The IPv4 address of this A record.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        The IPv4 address of this A record.
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class AaaaRecordResponse(dict):
    """
    An AAAA record.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Address":
            suggest = "ipv6_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaaRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaaRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaaRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_address: Optional[_builtins.str] = None):
        """
        An AAAA record.
        :param _builtins.str ipv6_address: The IPv6 address of this AAAA record.
        """
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[_builtins.str]:
        """
        The IPv6 address of this AAAA record.
        """
        return pulumi.get(self, "ipv6_address")


@pulumi.output_type
class CaaRecordResponse(dict):
    """
    A CAA record.
    """
    def __init__(__self__, *,
                 flags: Optional[_builtins.int] = None,
                 tag: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        A CAA record.
        :param _builtins.int flags: The flags for this CAA record as an integer between 0 and 255.
        :param _builtins.str tag: The tag for this CAA record.
        :param _builtins.str value: The value for this CAA record.
        """
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def flags(self) -> Optional[_builtins.int]:
        """
        The flags for this CAA record as an integer between 0 and 255.
        """
        return pulumi.get(self, "flags")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        """
        The tag for this CAA record.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value for this CAA record.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CnameRecordResponse(dict):
    """
    A CNAME record.
    """
    def __init__(__self__, *,
                 cname: Optional[_builtins.str] = None):
        """
        A CNAME record.
        :param _builtins.str cname: The canonical name for this CNAME record.
        """
        if cname is not None:
            pulumi.set(__self__, "cname", cname)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> Optional[_builtins.str]:
        """
        The canonical name for this CNAME record.
        """
        return pulumi.get(self, "cname")


@pulumi.output_type
class DelegationSignerInfoResponse(dict):
    """
    The delegation signer information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "digestAlgorithmType":
            suggest = "digest_algorithm_type"
        elif key == "digestValue":
            suggest = "digest_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DelegationSignerInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DelegationSignerInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DelegationSignerInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 digest_algorithm_type: _builtins.int,
                 digest_value: _builtins.str,
                 record: _builtins.str):
        """
        The delegation signer information.
        :param _builtins.int digest_algorithm_type: The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
        :param _builtins.str digest_value: The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
        :param _builtins.str record: The record represents a delegation signer (DS) record.
        """
        pulumi.set(__self__, "digest_algorithm_type", digest_algorithm_type)
        pulumi.set(__self__, "digest_value", digest_value)
        pulumi.set(__self__, "record", record)

    @_builtins.property
    @pulumi.getter(name="digestAlgorithmType")
    def digest_algorithm_type(self) -> _builtins.int:
        """
        The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
        """
        return pulumi.get(self, "digest_algorithm_type")

    @_builtins.property
    @pulumi.getter(name="digestValue")
    def digest_value(self) -> _builtins.str:
        """
        The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
        """
        return pulumi.get(self, "digest_value")

    @_builtins.property
    @pulumi.getter
    def record(self) -> _builtins.str:
        """
        The record represents a delegation signer (DS) record.
        """
        return pulumi.get(self, "record")


@pulumi.output_type
class DigestResponse(dict):
    """
    A digest.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "algorithmType":
            suggest = "algorithm_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DigestResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DigestResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DigestResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm_type: Optional[_builtins.int] = None,
                 value: Optional[_builtins.str] = None):
        """
        A digest.
        :param _builtins.int algorithm_type: The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
        :param _builtins.str value: The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
        """
        if algorithm_type is not None:
            pulumi.set(__self__, "algorithm_type", algorithm_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="algorithmType")
    def algorithm_type(self) -> Optional[_builtins.int]:
        """
        The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
        """
        return pulumi.get(self, "algorithm_type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DnsResourceReferenceResponse(dict):
    """
    Represents a single Azure resource and its referencing DNS records.
    """
    def __init__(__self__, *,
                 dns_resources: Optional[Sequence['outputs.SubResourceResponse']] = None,
                 target_resource: Optional['outputs.SubResourceResponse'] = None):
        """
        Represents a single Azure resource and its referencing DNS records.
        :param Sequence['SubResourceResponse'] dns_resources: A list of dns Records
        :param 'SubResourceResponse' target_resource: A reference to an azure resource from where the dns resource value is taken.
        """
        if dns_resources is not None:
            pulumi.set(__self__, "dns_resources", dns_resources)
        if target_resource is not None:
            pulumi.set(__self__, "target_resource", target_resource)

    @_builtins.property
    @pulumi.getter(name="dnsResources")
    def dns_resources(self) -> Optional[Sequence['outputs.SubResourceResponse']]:
        """
        A list of dns Records
        """
        return pulumi.get(self, "dns_resources")

    @_builtins.property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional['outputs.SubResourceResponse']:
        """
        A reference to an azure resource from where the dns resource value is taken.
        """
        return pulumi.get(self, "target_resource")


@pulumi.output_type
class DsRecordResponse(dict):
    """
    A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyTag":
            suggest = "key_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DsRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DsRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DsRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: Optional[_builtins.int] = None,
                 digest: Optional['outputs.DigestResponse'] = None,
                 key_tag: Optional[_builtins.int] = None):
        """
        A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
        :param _builtins.int algorithm: The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
        :param 'DigestResponse' digest: The digest entity.
        :param _builtins.int key_tag: The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[_builtins.int]:
        """
        The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional['outputs.DigestResponse']:
        """
        The digest entity.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[_builtins.int]:
        """
        The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
        """
        return pulumi.get(self, "key_tag")


@pulumi.output_type
class MxRecordResponse(dict):
    """
    An MX record.
    """
    def __init__(__self__, *,
                 exchange: Optional[_builtins.str] = None,
                 preference: Optional[_builtins.int] = None):
        """
        An MX record.
        :param _builtins.str exchange: The domain name of the mail host for this MX record.
        :param _builtins.int preference: The preference value for this MX record.
        """
        if exchange is not None:
            pulumi.set(__self__, "exchange", exchange)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @_builtins.property
    @pulumi.getter
    def exchange(self) -> Optional[_builtins.str]:
        """
        The domain name of the mail host for this MX record.
        """
        return pulumi.get(self, "exchange")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        The preference value for this MX record.
        """
        return pulumi.get(self, "preference")


@pulumi.output_type
class NaptrRecordResponse(dict):
    """
    A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
    """
    def __init__(__self__, *,
                 flags: Optional[_builtins.str] = None,
                 order: Optional[_builtins.int] = None,
                 preference: Optional[_builtins.int] = None,
                 regexp: Optional[_builtins.str] = None,
                 replacement: Optional[_builtins.str] = None,
                 services: Optional[_builtins.str] = None):
        """
        A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
        :param _builtins.str flags: The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
        :param _builtins.int order: The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
        :param _builtins.int preference: The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
        :param _builtins.str regexp: The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
        :param _builtins.str replacement: The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
        :param _builtins.str services: The services specific to DDDS applications. Enclose Services in quotation marks.
        """
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @_builtins.property
    @pulumi.getter
    def flags(self) -> Optional[_builtins.str]:
        """
        The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
        """
        return pulumi.get(self, "flags")

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[_builtins.int]:
        """
        The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter
    def regexp(self) -> Optional[_builtins.str]:
        """
        The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
        """
        return pulumi.get(self, "regexp")

    @_builtins.property
    @pulumi.getter
    def replacement(self) -> Optional[_builtins.str]:
        """
        The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
        """
        return pulumi.get(self, "replacement")

    @_builtins.property
    @pulumi.getter
    def services(self) -> Optional[_builtins.str]:
        """
        The services specific to DDDS applications. Enclose Services in quotation marks.
        """
        return pulumi.get(self, "services")


@pulumi.output_type
class NsRecordResponse(dict):
    """
    An NS record.
    """
    def __init__(__self__, *,
                 nsdname: Optional[_builtins.str] = None):
        """
        An NS record.
        :param _builtins.str nsdname: The name server name for this NS record.
        """
        if nsdname is not None:
            pulumi.set(__self__, "nsdname", nsdname)

    @_builtins.property
    @pulumi.getter
    def nsdname(self) -> Optional[_builtins.str]:
        """
        The name server name for this NS record.
        """
        return pulumi.get(self, "nsdname")


@pulumi.output_type
class PtrRecordResponse(dict):
    """
    A PTR record.
    """
    def __init__(__self__, *,
                 ptrdname: Optional[_builtins.str] = None):
        """
        A PTR record.
        :param _builtins.str ptrdname: The PTR target domain name for this PTR record.
        """
        if ptrdname is not None:
            pulumi.set(__self__, "ptrdname", ptrdname)

    @_builtins.property
    @pulumi.getter
    def ptrdname(self) -> Optional[_builtins.str]:
        """
        The PTR target domain name for this PTR record.
        """
        return pulumi.get(self, "ptrdname")


@pulumi.output_type
class SigningKeyResponse(dict):
    """
    Represents the signing key.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "delegationSignerInfo":
            suggest = "delegation_signer_info"
        elif key == "keyTag":
            suggest = "key_tag"
        elif key == "publicKey":
            suggest = "public_key"
        elif key == "securityAlgorithmType":
            suggest = "security_algorithm_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SigningKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SigningKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SigningKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delegation_signer_info: Sequence['outputs.DelegationSignerInfoResponse'],
                 flags: _builtins.int,
                 key_tag: _builtins.int,
                 protocol: _builtins.int,
                 public_key: _builtins.str,
                 security_algorithm_type: _builtins.int):
        """
        Represents the signing key.
        :param Sequence['DelegationSignerInfoResponse'] delegation_signer_info: The delegation signer information.
        :param _builtins.int flags: The flags specifies how the key is used.
        :param _builtins.int key_tag: The key tag value of the DNSKEY Resource Record.
        :param _builtins.int protocol: The protocol value. The value is always 3.
        :param _builtins.str public_key: The public key, represented as a Base64 encoding.
        :param _builtins.int security_algorithm_type: The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
        """
        pulumi.set(__self__, "delegation_signer_info", delegation_signer_info)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "key_tag", key_tag)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "security_algorithm_type", security_algorithm_type)

    @_builtins.property
    @pulumi.getter(name="delegationSignerInfo")
    def delegation_signer_info(self) -> Sequence['outputs.DelegationSignerInfoResponse']:
        """
        The delegation signer information.
        """
        return pulumi.get(self, "delegation_signer_info")

    @_builtins.property
    @pulumi.getter
    def flags(self) -> _builtins.int:
        """
        The flags specifies how the key is used.
        """
        return pulumi.get(self, "flags")

    @_builtins.property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> _builtins.int:
        """
        The key tag value of the DNSKEY Resource Record.
        """
        return pulumi.get(self, "key_tag")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.int:
        """
        The protocol value. The value is always 3.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        """
        The public key, represented as a Base64 encoding.
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter(name="securityAlgorithmType")
    def security_algorithm_type(self) -> _builtins.int:
        """
        The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
        """
        return pulumi.get(self, "security_algorithm_type")


@pulumi.output_type
class SoaRecordResponse(dict):
    """
    An SOA record.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"
        elif key == "minimumTtl":
            suggest = "minimum_ttl"
        elif key == "refreshTime":
            suggest = "refresh_time"
        elif key == "retryTime":
            suggest = "retry_time"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoaRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoaRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoaRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[_builtins.str] = None,
                 expire_time: Optional[_builtins.float] = None,
                 host: Optional[_builtins.str] = None,
                 minimum_ttl: Optional[_builtins.float] = None,
                 refresh_time: Optional[_builtins.float] = None,
                 retry_time: Optional[_builtins.float] = None,
                 serial_number: Optional[_builtins.float] = None):
        """
        An SOA record.
        :param _builtins.str email: The email contact for this SOA record.
        :param _builtins.float expire_time: The expire time for this SOA record.
        :param _builtins.str host: The domain name of the authoritative name server for this SOA record.
        :param _builtins.float minimum_ttl: The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
        :param _builtins.float refresh_time: The refresh value for this SOA record.
        :param _builtins.float retry_time: The retry time for this SOA record.
        :param _builtins.float serial_number: The serial number for this SOA record.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if minimum_ttl is not None:
            pulumi.set(__self__, "minimum_ttl", minimum_ttl)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)
        if retry_time is not None:
            pulumi.set(__self__, "retry_time", retry_time)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        The email contact for this SOA record.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[_builtins.float]:
        """
        The expire time for this SOA record.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The domain name of the authoritative name server for this SOA record.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> Optional[_builtins.float]:
        """
        The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
        """
        return pulumi.get(self, "minimum_ttl")

    @_builtins.property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[_builtins.float]:
        """
        The refresh value for this SOA record.
        """
        return pulumi.get(self, "refresh_time")

    @_builtins.property
    @pulumi.getter(name="retryTime")
    def retry_time(self) -> Optional[_builtins.float]:
        """
        The retry time for this SOA record.
        """
        return pulumi.get(self, "retry_time")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[_builtins.float]:
        """
        The serial number for this SOA record.
        """
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class SrvRecordResponse(dict):
    """
    An SRV record.
    """
    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None,
                 priority: Optional[_builtins.int] = None,
                 target: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None):
        """
        An SRV record.
        :param _builtins.int port: The port value for this SRV record.
        :param _builtins.int priority: The priority value for this SRV record.
        :param _builtins.str target: The target domain name for this SRV record.
        :param _builtins.int weight: The weight value for this SRV record.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The port value for this SRV record.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        The priority value for this SRV record.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        """
        The target domain name for this SRV record.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        The weight value for this SRV record.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    A reference to a another resource
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        A reference to a another resource
        :param _builtins.str id: Resource Id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Resource Id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TlsaRecordResponse(dict):
    """
    A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certAssociationData":
            suggest = "cert_association_data"
        elif key == "matchingType":
            suggest = "matching_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TlsaRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TlsaRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TlsaRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_association_data: Optional[_builtins.str] = None,
                 matching_type: Optional[_builtins.int] = None,
                 selector: Optional[_builtins.int] = None,
                 usage: Optional[_builtins.int] = None):
        """
        A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
        :param _builtins.str cert_association_data: This specifies the certificate association data to be matched.
        :param _builtins.int matching_type: The matching type specifies how the certificate association is presented.
        :param _builtins.int selector: The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
        :param _builtins.int usage: The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
        """
        if cert_association_data is not None:
            pulumi.set(__self__, "cert_association_data", cert_association_data)
        if matching_type is not None:
            pulumi.set(__self__, "matching_type", matching_type)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @_builtins.property
    @pulumi.getter(name="certAssociationData")
    def cert_association_data(self) -> Optional[_builtins.str]:
        """
        This specifies the certificate association data to be matched.
        """
        return pulumi.get(self, "cert_association_data")

    @_builtins.property
    @pulumi.getter(name="matchingType")
    def matching_type(self) -> Optional[_builtins.int]:
        """
        The matching type specifies how the certificate association is presented.
        """
        return pulumi.get(self, "matching_type")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional[_builtins.int]:
        """
        The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
        """
        return pulumi.get(self, "selector")

    @_builtins.property
    @pulumi.getter
    def usage(self) -> Optional[_builtins.int]:
        """
        The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class TxtRecordResponse(dict):
    """
    A TXT record.
    """
    def __init__(__self__, *,
                 value: Optional[Sequence[_builtins.str]] = None):
        """
        A TXT record.
        :param Sequence[_builtins.str] value: The text value of this TXT record.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Sequence[_builtins.str]]:
        """
        The text value of this TXT record.
        """
        return pulumi.get(self, "value")


