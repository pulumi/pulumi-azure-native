# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DeviceConfigurationResponse',
    'NicDetailResponse',
    'SecurityComplianceStatusResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class DeviceConfigurationResponse(dict):
    """
    The device Configuration of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nicDetails":
            suggest = "nic_details"
        elif key == "deviceMetadata":
            suggest = "device_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nic_details: Sequence['outputs.NicDetailResponse'],
                 device_metadata: Optional[str] = None):
        """
        The device Configuration of a device.
        :param Sequence['NicDetailResponse'] nic_details: NIC Details of device
        :param str device_metadata: device metadata details.
        """
        pulumi.set(__self__, "nic_details", nic_details)
        if device_metadata is not None:
            pulumi.set(__self__, "device_metadata", device_metadata)

    @property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> Sequence['outputs.NicDetailResponse']:
        """
        NIC Details of device
        """
        return pulumi.get(self, "nic_details")

    @property
    @pulumi.getter(name="deviceMetadata")
    def device_metadata(self) -> Optional[str]:
        """
        device metadata details.
        """
        return pulumi.get(self, "device_metadata")


@pulumi.output_type
class NicDetailResponse(dict):
    """
    The NIC Detail of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterName":
            suggest = "adapter_name"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "defaultGateway":
            suggest = "default_gateway"
        elif key == "defaultIsolationId":
            suggest = "default_isolation_id"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "driverVersion":
            suggest = "driver_version"
        elif key == "interfaceDescription":
            suggest = "interface_description"
        elif key == "ip4Address":
            suggest = "ip4_address"
        elif key == "subnetMask":
            suggest = "subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter_name: str,
                 component_id: Optional[str] = None,
                 default_gateway: Optional[str] = None,
                 default_isolation_id: Optional[str] = None,
                 dns_servers: Optional[Sequence[str]] = None,
                 driver_version: Optional[str] = None,
                 interface_description: Optional[str] = None,
                 ip4_address: Optional[str] = None,
                 subnet_mask: Optional[str] = None):
        """
        The NIC Detail of a device.
        :param str adapter_name: Adapter Name of NIC
        :param str component_id: Component Id of NIC
        :param str default_gateway: Default Gateway of NIC
        :param str default_isolation_id: Default Isolation of Management NIC
        :param Sequence[str] dns_servers: DNS Servers for NIC
        :param str driver_version: Driver Version of NIC
        :param str interface_description: Interface Description of NIC
        :param str ip4_address: Subnet Mask of NIC
        :param str subnet_mask: Subnet Mask of NIC
        """
        pulumi.set(__self__, "adapter_name", adapter_name)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if default_isolation_id is not None:
            pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if driver_version is not None:
            pulumi.set(__self__, "driver_version", driver_version)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if ip4_address is not None:
            pulumi.set(__self__, "ip4_address", ip4_address)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> str:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[str]:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> Optional[str]:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> Optional[str]:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[str]:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> Optional[str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")


@pulumi.output_type
class SecurityComplianceStatusResponse(dict):
    """
    Security compliance properties of the resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAtRestEncrypted":
            suggest = "data_at_rest_encrypted"
        elif key == "dataInTransitProtected":
            suggest = "data_in_transit_protected"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "securedCoreCompliance":
            suggest = "secured_core_compliance"
        elif key == "wdacCompliance":
            suggest = "wdac_compliance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityComplianceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityComplianceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityComplianceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_at_rest_encrypted: str,
                 data_in_transit_protected: str,
                 last_updated: str,
                 secured_core_compliance: str,
                 wdac_compliance: str):
        """
        Security compliance properties of the resource
        :param str data_at_rest_encrypted: Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
        :param str data_in_transit_protected: Indicates whether HCI cluster has data in-transit protection.
        :param str last_updated: Time in UTC when compliance status was last updated.
        :param str secured_core_compliance: Indicates whether HCI hosts meets secured-core server requirements.
        :param str wdac_compliance: Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
        """
        pulumi.set(__self__, "data_at_rest_encrypted", data_at_rest_encrypted)
        pulumi.set(__self__, "data_in_transit_protected", data_in_transit_protected)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "secured_core_compliance", secured_core_compliance)
        pulumi.set(__self__, "wdac_compliance", wdac_compliance)

    @property
    @pulumi.getter(name="dataAtRestEncrypted")
    def data_at_rest_encrypted(self) -> str:
        """
        Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
        """
        return pulumi.get(self, "data_at_rest_encrypted")

    @property
    @pulumi.getter(name="dataInTransitProtected")
    def data_in_transit_protected(self) -> str:
        """
        Indicates whether HCI cluster has data in-transit protection.
        """
        return pulumi.get(self, "data_in_transit_protected")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        """
        Time in UTC when compliance status was last updated.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="securedCoreCompliance")
    def secured_core_compliance(self) -> str:
        """
        Indicates whether HCI hosts meets secured-core server requirements.
        """
        return pulumi.get(self, "secured_core_compliance")

    @property
    @pulumi.getter(name="wdacCompliance")
    def wdac_compliance(self) -> str:
        """
        Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
        """
        return pulumi.get(self, "wdac_compliance")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


