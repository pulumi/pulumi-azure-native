# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdapterPropertyOverridesResponse',
    'ArcConnectivityPropertiesResponse',
    'ClusterDesiredPropertiesResponse',
    'ClusterNodeResponse',
    'ClusterReportedPropertiesResponse',
    'DefaultExtensionDetailsResponse',
    'DeploymentClusterResponse',
    'DeploymentConfigurationResponse',
    'DeploymentDataResponse',
    'DeploymentSecuritySettingsResponse',
    'DeploymentStatusResponse',
    'DeploymentStepResponse',
    'DeviceConfigurationResponse',
    'ExtensionInstanceViewResponse',
    'ExtensionInstanceViewResponseStatus',
    'HostNetworkResponse',
    'InfrastructureNetworkResponse',
    'IntentsResponse',
    'IpPoolsResponse',
    'IsolatedVmAttestationConfigurationResponse',
    'NicDetailResponse',
    'ObservabilityResponse',
    'OptionalServicesResponse',
    'PerNodeExtensionStateResponse',
    'PerNodeStateResponse',
    'PhysicalNodesResponse',
    'QosPolicyOverridesResponse',
    'ReportedPropertiesResponse',
    'ScaleUnitsResponse',
    'SecurityComplianceStatusResponse',
    'ServiceConfigurationResponse',
    'SoftwareAssurancePropertiesResponse',
    'StepResponse',
    'StorageNetworksResponse',
    'StorageResponse',
    'SystemDataResponse',
    'UpdatePrerequisiteResponse',
    'UserAssignedIdentityResponse',
    'ValidationStatusResponse',
    'VirtualSwitchConfigurationOverridesResponse',
]

@pulumi.output_type
class AdapterPropertyOverridesResponse(dict):
    """
    The AdapterPropertyOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jumboPacket":
            suggest = "jumbo_packet"
        elif key == "networkDirect":
            suggest = "network_direct"
        elif key == "networkDirectTechnology":
            suggest = "network_direct_technology"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdapterPropertyOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdapterPropertyOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdapterPropertyOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jumbo_packet: Optional[str] = None,
                 network_direct: Optional[str] = None,
                 network_direct_technology: Optional[str] = None):
        """
        The AdapterPropertyOverrides of a cluster.
        :param str jumbo_packet: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str network_direct: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str network_direct_technology: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        if jumbo_packet is not None:
            pulumi.set(__self__, "jumbo_packet", jumbo_packet)
        if network_direct is not None:
            pulumi.set(__self__, "network_direct", network_direct)
        if network_direct_technology is not None:
            pulumi.set(__self__, "network_direct_technology", network_direct_technology)

    @property
    @pulumi.getter(name="jumboPacket")
    def jumbo_packet(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "jumbo_packet")

    @property
    @pulumi.getter(name="networkDirect")
    def network_direct(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "network_direct")

    @property
    @pulumi.getter(name="networkDirectTechnology")
    def network_direct_technology(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        return pulumi.get(self, "network_direct_technology")


@pulumi.output_type
class ArcConnectivityPropertiesResponse(dict):
    """
    Connectivity related configuration required by arc server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceConfigurations":
            suggest = "service_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArcConnectivityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArcConnectivityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArcConnectivityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 service_configurations: Optional[Sequence['outputs.ServiceConfigurationResponse']] = None):
        """
        Connectivity related configuration required by arc server.
        :param bool enabled: True indicates ARC connectivity is enabled
        :param Sequence['ServiceConfigurationResponse'] service_configurations: Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_configurations is not None:
            pulumi.set(__self__, "service_configurations", service_configurations)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        True indicates ARC connectivity is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="serviceConfigurations")
    def service_configurations(self) -> Optional[Sequence['outputs.ServiceConfigurationResponse']]:
        """
        Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
        """
        return pulumi.get(self, "service_configurations")


@pulumi.output_type
class ClusterDesiredPropertiesResponse(dict):
    """
    Desired properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diagnosticLevel":
            suggest = "diagnostic_level"
        elif key == "windowsServerSubscription":
            suggest = "windows_server_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterDesiredPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterDesiredPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterDesiredPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 diagnostic_level: Optional[str] = None,
                 windows_server_subscription: Optional[str] = None):
        """
        Desired properties of the cluster.
        :param str diagnostic_level: Desired level of diagnostic data emitted by the cluster.
        :param str windows_server_subscription: Desired state of Windows Server Subscription.
        """
        if diagnostic_level is not None:
            pulumi.set(__self__, "diagnostic_level", diagnostic_level)
        if windows_server_subscription is not None:
            pulumi.set(__self__, "windows_server_subscription", windows_server_subscription)

    @property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[str]:
        """
        Desired level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")

    @property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> Optional[str]:
        """
        Desired state of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")


@pulumi.output_type
class ClusterNodeResponse(dict):
    """
    Cluster node details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreCount":
            suggest = "core_count"
        elif key == "ehcResourceId":
            suggest = "ehc_resource_id"
        elif key == "lastLicensingTimestamp":
            suggest = "last_licensing_timestamp"
        elif key == "memoryInGiB":
            suggest = "memory_in_gi_b"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "oemActivation":
            suggest = "oem_activation"
        elif key == "osDisplayVersion":
            suggest = "os_display_version"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "windowsServerSubscription":
            suggest = "windows_server_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_count: float,
                 ehc_resource_id: str,
                 id: float,
                 last_licensing_timestamp: str,
                 manufacturer: str,
                 memory_in_gi_b: float,
                 model: str,
                 name: str,
                 node_type: str,
                 oem_activation: str,
                 os_display_version: str,
                 os_name: str,
                 os_version: str,
                 serial_number: str,
                 windows_server_subscription: str):
        """
        Cluster node details.
        :param float core_count: Number of physical cores on the cluster node.
        :param str ehc_resource_id: Edge Hardware Center Resource Id
        :param float id: Id of the node in the cluster.
        :param str last_licensing_timestamp: Most recent licensing timestamp.
        :param str manufacturer: Manufacturer of the cluster node hardware.
        :param float memory_in_gi_b: Total available memory on the cluster node (in GiB).
        :param str model: Model name of the cluster node hardware.
        :param str name: Name of the cluster node.
        :param str node_type: Type of the cluster node hardware.
        :param str oem_activation: OEM activation status of the node.
        :param str os_display_version: Display version of the operating system running on the cluster node.
        :param str os_name: Operating system running on the cluster node.
        :param str os_version: Version of the operating system running on the cluster node.
        :param str serial_number: Immutable id of the cluster node.
        :param str windows_server_subscription: State of Windows Server Subscription.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "ehc_resource_id", ehc_resource_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_licensing_timestamp", last_licensing_timestamp)
        pulumi.set(__self__, "manufacturer", manufacturer)
        pulumi.set(__self__, "memory_in_gi_b", memory_in_gi_b)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "oem_activation", oem_activation)
        pulumi.set(__self__, "os_display_version", os_display_version)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "windows_server_subscription", windows_server_subscription)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> float:
        """
        Number of physical cores on the cluster node.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="ehcResourceId")
    def ehc_resource_id(self) -> str:
        """
        Edge Hardware Center Resource Id
        """
        return pulumi.get(self, "ehc_resource_id")

    @property
    @pulumi.getter
    def id(self) -> float:
        """
        Id of the node in the cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastLicensingTimestamp")
    def last_licensing_timestamp(self) -> str:
        """
        Most recent licensing timestamp.
        """
        return pulumi.get(self, "last_licensing_timestamp")

    @property
    @pulumi.getter
    def manufacturer(self) -> str:
        """
        Manufacturer of the cluster node hardware.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="memoryInGiB")
    def memory_in_gi_b(self) -> float:
        """
        Total available memory on the cluster node (in GiB).
        """
        return pulumi.get(self, "memory_in_gi_b")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model name of the cluster node hardware.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Type of the cluster node hardware.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="oemActivation")
    def oem_activation(self) -> str:
        """
        OEM activation status of the node.
        """
        return pulumi.get(self, "oem_activation")

    @property
    @pulumi.getter(name="osDisplayVersion")
    def os_display_version(self) -> str:
        """
        Display version of the operating system running on the cluster node.
        """
        return pulumi.get(self, "os_display_version")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Operating system running on the cluster node.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        Version of the operating system running on the cluster node.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        Immutable id of the cluster node.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> str:
        """
        State of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")


@pulumi.output_type
class ClusterReportedPropertiesResponse(dict):
    """
    Properties reported by cluster agent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "clusterVersion":
            suggest = "cluster_version"
        elif key == "imdsAttestation":
            suggest = "imds_attestation"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "oemActivation":
            suggest = "oem_activation"
        elif key == "supportedCapabilities":
            suggest = "supported_capabilities"
        elif key == "diagnosticLevel":
            suggest = "diagnostic_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 cluster_type: str,
                 cluster_version: str,
                 imds_attestation: str,
                 last_updated: str,
                 manufacturer: str,
                 nodes: Sequence['outputs.ClusterNodeResponse'],
                 oem_activation: str,
                 supported_capabilities: Sequence[str],
                 diagnostic_level: Optional[str] = None):
        """
        Properties reported by cluster agent.
        :param str cluster_id: Unique id generated by the on-prem cluster.
        :param str cluster_name: Name of the on-prem cluster connected to this resource.
        :param str cluster_type: The node type of all the nodes of the cluster.
        :param str cluster_version: Version of the cluster software.
        :param str imds_attestation: IMDS attestation status of the cluster.
        :param str last_updated: Last time the cluster reported the data.
        :param str manufacturer: The manufacturer of all the nodes of the cluster.
        :param Sequence['ClusterNodeResponse'] nodes: List of nodes reported by the cluster.
        :param str oem_activation: OEM activation status of the cluster.
        :param Sequence[str] supported_capabilities: Capabilities supported by the cluster.
        :param str diagnostic_level: Level of diagnostic data emitted by the cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "imds_attestation", imds_attestation)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "manufacturer", manufacturer)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "oem_activation", oem_activation)
        pulumi.set(__self__, "supported_capabilities", supported_capabilities)
        if diagnostic_level is not None:
            pulumi.set(__self__, "diagnostic_level", diagnostic_level)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Unique id generated by the on-prem cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Name of the on-prem cluster connected to this resource.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The node type of all the nodes of the cluster.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        Version of the cluster software.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="imdsAttestation")
    def imds_attestation(self) -> str:
        """
        IMDS attestation status of the cluster.
        """
        return pulumi.get(self, "imds_attestation")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        """
        Last time the cluster reported the data.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def manufacturer(self) -> str:
        """
        The manufacturer of all the nodes of the cluster.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.ClusterNodeResponse']:
        """
        List of nodes reported by the cluster.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="oemActivation")
    def oem_activation(self) -> str:
        """
        OEM activation status of the cluster.
        """
        return pulumi.get(self, "oem_activation")

    @property
    @pulumi.getter(name="supportedCapabilities")
    def supported_capabilities(self) -> Sequence[str]:
        """
        Capabilities supported by the cluster.
        """
        return pulumi.get(self, "supported_capabilities")

    @property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[str]:
        """
        Level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")


@pulumi.output_type
class DefaultExtensionDetailsResponse(dict):
    """
    Properties for a particular default extension category.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consentTime":
            suggest = "consent_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultExtensionDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultExtensionDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultExtensionDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 consent_time: str):
        """
        Properties for a particular default extension category.
        :param str category: Default extension category
        :param str consent_time: Consent time for extension category
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "consent_time", consent_time)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Default extension category
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="consentTime")
    def consent_time(self) -> str:
        """
        Consent time for extension category
        """
        return pulumi.get(self, "consent_time")


@pulumi.output_type
class DeploymentClusterResponse(dict):
    """
    AzureStackHCI Cluster deployment properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureServiceEndpoint":
            suggest = "azure_service_endpoint"
        elif key == "cloudAccountName":
            suggest = "cloud_account_name"
        elif key == "witnessPath":
            suggest = "witness_path"
        elif key == "witnessType":
            suggest = "witness_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_service_endpoint: Optional[str] = None,
                 cloud_account_name: Optional[str] = None,
                 name: Optional[str] = None,
                 witness_path: Optional[str] = None,
                 witness_type: Optional[str] = None):
        """
        AzureStackHCI Cluster deployment properties.
        :param str azure_service_endpoint: For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        :param str cloud_account_name: Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        :param str name: The cluster name provided when preparing Active Directory.
        :param str witness_path: Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        :param str witness_type: Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        if azure_service_endpoint is not None:
            pulumi.set(__self__, "azure_service_endpoint", azure_service_endpoint)
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if witness_path is not None:
            pulumi.set(__self__, "witness_path", witness_path)
        if witness_type is not None:
            pulumi.set(__self__, "witness_type", witness_type)

    @property
    @pulumi.getter(name="azureServiceEndpoint")
    def azure_service_endpoint(self) -> Optional[str]:
        """
        For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        """
        return pulumi.get(self, "azure_service_endpoint")

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        """
        Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The cluster name provided when preparing Active Directory.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="witnessPath")
    def witness_path(self) -> Optional[str]:
        """
        Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "witness_path")

    @property
    @pulumi.getter(name="witnessType")
    def witness_type(self) -> Optional[str]:
        """
        Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        return pulumi.get(self, "witness_type")


@pulumi.output_type
class DeploymentConfigurationResponse(dict):
    """
    Deployment Configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleUnits":
            suggest = "scale_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scale_units: Sequence['outputs.ScaleUnitsResponse'],
                 version: Optional[str] = None):
        """
        Deployment Configuration
        :param Sequence['ScaleUnitsResponse'] scale_units: Scale units will contains list of deployment data
        :param str version: deployment template version 
        """
        pulumi.set(__self__, "scale_units", scale_units)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="scaleUnits")
    def scale_units(self) -> Sequence['outputs.ScaleUnitsResponse']:
        """
        Scale units will contains list of deployment data
        """
        return pulumi.get(self, "scale_units")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        deployment template version 
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentDataResponse(dict):
    """
    The Deployment data of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adouPath":
            suggest = "adou_path"
        elif key == "domainFqdn":
            suggest = "domain_fqdn"
        elif key == "hostNetwork":
            suggest = "host_network"
        elif key == "infrastructureNetwork":
            suggest = "infrastructure_network"
        elif key == "namingPrefix":
            suggest = "naming_prefix"
        elif key == "optionalServices":
            suggest = "optional_services"
        elif key == "physicalNodes":
            suggest = "physical_nodes"
        elif key == "secretsLocation":
            suggest = "secrets_location"
        elif key == "securitySettings":
            suggest = "security_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adou_path: Optional[str] = None,
                 cluster: Optional['outputs.DeploymentClusterResponse'] = None,
                 domain_fqdn: Optional[str] = None,
                 host_network: Optional['outputs.HostNetworkResponse'] = None,
                 infrastructure_network: Optional[Sequence['outputs.InfrastructureNetworkResponse']] = None,
                 naming_prefix: Optional[str] = None,
                 observability: Optional['outputs.ObservabilityResponse'] = None,
                 optional_services: Optional['outputs.OptionalServicesResponse'] = None,
                 physical_nodes: Optional[Sequence['outputs.PhysicalNodesResponse']] = None,
                 secrets_location: Optional[str] = None,
                 security_settings: Optional['outputs.DeploymentSecuritySettingsResponse'] = None,
                 storage: Optional['outputs.StorageResponse'] = None):
        """
        The Deployment data of AzureStackHCI Cluster.
        :param str adou_path: The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        :param 'DeploymentClusterResponse' cluster: Observability config to deploy AzureStackHCI Cluster.
        :param str domain_fqdn: FQDN to deploy cluster
        :param 'HostNetworkResponse' host_network: HostNetwork config to deploy AzureStackHCI Cluster.
        :param Sequence['InfrastructureNetworkResponse'] infrastructure_network: InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        :param str naming_prefix: naming prefix to deploy cluster.
        :param 'ObservabilityResponse' observability: Observability config to deploy AzureStackHCI Cluster.
        :param 'OptionalServicesResponse' optional_services: OptionalServices config to deploy AzureStackHCI Cluster.
        :param Sequence['PhysicalNodesResponse'] physical_nodes: list of physical nodes config to deploy AzureStackHCI Cluster.
        :param str secrets_location: The URI to the keyvault / secret store.
        :param 'DeploymentSecuritySettingsResponse' security_settings: SecuritySettings to deploy AzureStackHCI Cluster.
        :param 'StorageResponse' storage: Storage config to deploy AzureStackHCI Cluster.
        """
        if adou_path is not None:
            pulumi.set(__self__, "adou_path", adou_path)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if domain_fqdn is not None:
            pulumi.set(__self__, "domain_fqdn", domain_fqdn)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if infrastructure_network is not None:
            pulumi.set(__self__, "infrastructure_network", infrastructure_network)
        if naming_prefix is not None:
            pulumi.set(__self__, "naming_prefix", naming_prefix)
        if observability is not None:
            pulumi.set(__self__, "observability", observability)
        if optional_services is not None:
            pulumi.set(__self__, "optional_services", optional_services)
        if physical_nodes is not None:
            pulumi.set(__self__, "physical_nodes", physical_nodes)
        if secrets_location is not None:
            pulumi.set(__self__, "secrets_location", secrets_location)
        if security_settings is not None:
            pulumi.set(__self__, "security_settings", security_settings)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="adouPath")
    def adou_path(self) -> Optional[str]:
        """
        The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        """
        return pulumi.get(self, "adou_path")

    @property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.DeploymentClusterResponse']:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="domainFqdn")
    def domain_fqdn(self) -> Optional[str]:
        """
        FQDN to deploy cluster
        """
        return pulumi.get(self, "domain_fqdn")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional['outputs.HostNetworkResponse']:
        """
        HostNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="infrastructureNetwork")
    def infrastructure_network(self) -> Optional[Sequence['outputs.InfrastructureNetworkResponse']]:
        """
        InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "infrastructure_network")

    @property
    @pulumi.getter(name="namingPrefix")
    def naming_prefix(self) -> Optional[str]:
        """
        naming prefix to deploy cluster.
        """
        return pulumi.get(self, "naming_prefix")

    @property
    @pulumi.getter
    def observability(self) -> Optional['outputs.ObservabilityResponse']:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "observability")

    @property
    @pulumi.getter(name="optionalServices")
    def optional_services(self) -> Optional['outputs.OptionalServicesResponse']:
        """
        OptionalServices config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "optional_services")

    @property
    @pulumi.getter(name="physicalNodes")
    def physical_nodes(self) -> Optional[Sequence['outputs.PhysicalNodesResponse']]:
        """
        list of physical nodes config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "physical_nodes")

    @property
    @pulumi.getter(name="secretsLocation")
    def secrets_location(self) -> Optional[str]:
        """
        The URI to the keyvault / secret store.
        """
        return pulumi.get(self, "secrets_location")

    @property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> Optional['outputs.DeploymentSecuritySettingsResponse']:
        """
        SecuritySettings to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "security_settings")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.StorageResponse']:
        """
        Storage config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class DeploymentSecuritySettingsResponse(dict):
    """
    The SecuritySettings of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitlockerBootVolume":
            suggest = "bitlocker_boot_volume"
        elif key == "bitlockerDataVolumes":
            suggest = "bitlocker_data_volumes"
        elif key == "credentialGuardEnforced":
            suggest = "credential_guard_enforced"
        elif key == "driftControlEnforced":
            suggest = "drift_control_enforced"
        elif key == "drtmProtection":
            suggest = "drtm_protection"
        elif key == "hvciProtection":
            suggest = "hvci_protection"
        elif key == "sideChannelMitigationEnforced":
            suggest = "side_channel_mitigation_enforced"
        elif key == "smbClusterEncryption":
            suggest = "smb_cluster_encryption"
        elif key == "smbSigningEnforced":
            suggest = "smb_signing_enforced"
        elif key == "wdacEnforced":
            suggest = "wdac_enforced"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSecuritySettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSecuritySettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSecuritySettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitlocker_boot_volume: Optional[bool] = None,
                 bitlocker_data_volumes: Optional[bool] = None,
                 credential_guard_enforced: Optional[bool] = None,
                 drift_control_enforced: Optional[bool] = None,
                 drtm_protection: Optional[bool] = None,
                 hvci_protection: Optional[bool] = None,
                 side_channel_mitigation_enforced: Optional[bool] = None,
                 smb_cluster_encryption: Optional[bool] = None,
                 smb_signing_enforced: Optional[bool] = None,
                 wdac_enforced: Optional[bool] = None):
        """
        The SecuritySettings of AzureStackHCI Cluster.
        :param bool bitlocker_boot_volume: When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        :param bool bitlocker_data_volumes: When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        :param bool credential_guard_enforced: When set to true, Credential Guard is enabled.
        :param bool drift_control_enforced: When set to true, the security baseline is re-applied regularly.
        :param bool drtm_protection: By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        :param bool hvci_protection: By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        :param bool side_channel_mitigation_enforced: When set to true, all the side channel mitigations are enabled
        :param bool smb_cluster_encryption: When set to true, cluster east-west traffic is encrypted.
        :param bool smb_signing_enforced: When set to true, the SMB default instance requires sign in for the client and server services.
        :param bool wdac_enforced: WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        if bitlocker_boot_volume is None:
            bitlocker_boot_volume = True
        if bitlocker_boot_volume is not None:
            pulumi.set(__self__, "bitlocker_boot_volume", bitlocker_boot_volume)
        if bitlocker_data_volumes is None:
            bitlocker_data_volumes = True
        if bitlocker_data_volumes is not None:
            pulumi.set(__self__, "bitlocker_data_volumes", bitlocker_data_volumes)
        if credential_guard_enforced is None:
            credential_guard_enforced = False
        if credential_guard_enforced is not None:
            pulumi.set(__self__, "credential_guard_enforced", credential_guard_enforced)
        if drift_control_enforced is None:
            drift_control_enforced = True
        if drift_control_enforced is not None:
            pulumi.set(__self__, "drift_control_enforced", drift_control_enforced)
        if drtm_protection is None:
            drtm_protection = True
        if drtm_protection is not None:
            pulumi.set(__self__, "drtm_protection", drtm_protection)
        if hvci_protection is None:
            hvci_protection = True
        if hvci_protection is not None:
            pulumi.set(__self__, "hvci_protection", hvci_protection)
        if side_channel_mitigation_enforced is None:
            side_channel_mitigation_enforced = True
        if side_channel_mitigation_enforced is not None:
            pulumi.set(__self__, "side_channel_mitigation_enforced", side_channel_mitigation_enforced)
        if smb_cluster_encryption is None:
            smb_cluster_encryption = False
        if smb_cluster_encryption is not None:
            pulumi.set(__self__, "smb_cluster_encryption", smb_cluster_encryption)
        if smb_signing_enforced is None:
            smb_signing_enforced = True
        if smb_signing_enforced is not None:
            pulumi.set(__self__, "smb_signing_enforced", smb_signing_enforced)
        if wdac_enforced is None:
            wdac_enforced = True
        if wdac_enforced is not None:
            pulumi.set(__self__, "wdac_enforced", wdac_enforced)

    @property
    @pulumi.getter(name="bitlockerBootVolume")
    def bitlocker_boot_volume(self) -> Optional[bool]:
        """
        When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        """
        return pulumi.get(self, "bitlocker_boot_volume")

    @property
    @pulumi.getter(name="bitlockerDataVolumes")
    def bitlocker_data_volumes(self) -> Optional[bool]:
        """
        When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        """
        return pulumi.get(self, "bitlocker_data_volumes")

    @property
    @pulumi.getter(name="credentialGuardEnforced")
    def credential_guard_enforced(self) -> Optional[bool]:
        """
        When set to true, Credential Guard is enabled.
        """
        return pulumi.get(self, "credential_guard_enforced")

    @property
    @pulumi.getter(name="driftControlEnforced")
    def drift_control_enforced(self) -> Optional[bool]:
        """
        When set to true, the security baseline is re-applied regularly.
        """
        return pulumi.get(self, "drift_control_enforced")

    @property
    @pulumi.getter(name="drtmProtection")
    def drtm_protection(self) -> Optional[bool]:
        """
        By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        """
        return pulumi.get(self, "drtm_protection")

    @property
    @pulumi.getter(name="hvciProtection")
    def hvci_protection(self) -> Optional[bool]:
        """
        By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        """
        return pulumi.get(self, "hvci_protection")

    @property
    @pulumi.getter(name="sideChannelMitigationEnforced")
    def side_channel_mitigation_enforced(self) -> Optional[bool]:
        """
        When set to true, all the side channel mitigations are enabled
        """
        return pulumi.get(self, "side_channel_mitigation_enforced")

    @property
    @pulumi.getter(name="smbClusterEncryption")
    def smb_cluster_encryption(self) -> Optional[bool]:
        """
        When set to true, cluster east-west traffic is encrypted.
        """
        return pulumi.get(self, "smb_cluster_encryption")

    @property
    @pulumi.getter(name="smbSigningEnforced")
    def smb_signing_enforced(self) -> Optional[bool]:
        """
        When set to true, the SMB default instance requires sign in for the client and server services.
        """
        return pulumi.get(self, "smb_signing_enforced")

    @property
    @pulumi.getter(name="wdacEnforced")
    def wdac_enforced(self) -> Optional[bool]:
        """
        WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "wdac_enforced")


@pulumi.output_type
class DeploymentStatusResponse(dict):
    """
    The DeploymentStatus of AzureStackHCI Cluster.
    """
    def __init__(__self__, *,
                 status: str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The DeploymentStatus of AzureStackHCI Cluster.
        :param str status: Status of AzureStackHCI Cluster Deployment.
        :param Sequence['DeploymentStepResponse'] steps: List of steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class DeploymentStepResponse(dict):
    """
    The Step of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "fullStepIndex":
            suggest = "full_step_index"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 end_time_utc: str,
                 exception: Sequence[str],
                 full_step_index: str,
                 name: str,
                 start_time_utc: str,
                 status: str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The Step of AzureStackHCI Cluster.
        :param str description: Description of step.
        :param str end_time_utc: End time of step.
        :param Sequence[str] exception: List of exceptions in AzureStackHCI Cluster Deployment.
        :param str full_step_index: FullStepIndex of step.
        :param str name: Name of step.
        :param str start_time_utc: Start time of step.
        :param str status: Status of step. Allowed values are 'Error', 'Success', 'InProgress'
        :param Sequence['DeploymentStepResponse'] steps: List of nested steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "exception", exception)
        pulumi.set(__self__, "full_step_index", full_step_index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> str:
        """
        End time of step.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter
    def exception(self) -> Sequence[str]:
        """
        List of exceptions in AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "exception")

    @property
    @pulumi.getter(name="fullStepIndex")
    def full_step_index(self) -> str:
        """
        FullStepIndex of step.
        """
        return pulumi.get(self, "full_step_index")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> str:
        """
        Start time of step.
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of step. Allowed values are 'Error', 'Success', 'InProgress'
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of nested steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class DeviceConfigurationResponse(dict):
    """
    The device Configuration of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nicDetails":
            suggest = "nic_details"
        elif key == "deviceMetadata":
            suggest = "device_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nic_details: Sequence['outputs.NicDetailResponse'],
                 device_metadata: Optional[str] = None):
        """
        The device Configuration of a device.
        :param Sequence['NicDetailResponse'] nic_details: NIC Details of device
        :param str device_metadata: device metadata details.
        """
        pulumi.set(__self__, "nic_details", nic_details)
        if device_metadata is not None:
            pulumi.set(__self__, "device_metadata", device_metadata)

    @property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> Sequence['outputs.NicDetailResponse']:
        """
        NIC Details of device
        """
        return pulumi.get(self, "nic_details")

    @property
    @pulumi.getter(name="deviceMetadata")
    def device_metadata(self) -> Optional[str]:
        """
        device metadata details.
        """
        return pulumi.get(self, "device_metadata")


@pulumi.output_type
class ExtensionInstanceViewResponse(dict):
    """
    Describes the Extension Instance View.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 status: Optional['outputs.ExtensionInstanceViewResponseStatus'] = None,
                 type: Optional[str] = None,
                 type_handler_version: Optional[str] = None):
        """
        Describes the Extension Instance View.
        :param str name: The extension name.
        :param 'ExtensionInstanceViewResponseStatus' status: Instance view status.
        :param str type: Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
        :param str type_handler_version: Specifies the version of the script handler.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_handler_version is not None:
            pulumi.set(__self__, "type_handler_version", type_handler_version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extension name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.ExtensionInstanceViewResponseStatus']:
        """
        Instance view status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> Optional[str]:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class ExtensionInstanceViewResponseStatus(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionInstanceViewResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_status: Optional[str] = None,
                 level: Optional[str] = None,
                 message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        Instance view status.
        :param str code: The status code.
        :param str display_status: The short localizable label for the status.
        :param str level: The level code.
        :param str message: The detailed status message, including for alerts and error messages.
        :param str time: The time of the status.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[str]:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class HostNetworkResponse(dict):
    """
    The HostNetwork of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableStorageAutoIp":
            suggest = "enable_storage_auto_ip"
        elif key == "storageConnectivitySwitchless":
            suggest = "storage_connectivity_switchless"
        elif key == "storageNetworks":
            suggest = "storage_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostNetworkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostNetworkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostNetworkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_storage_auto_ip: Optional[bool] = None,
                 intents: Optional[Sequence['outputs.IntentsResponse']] = None,
                 storage_connectivity_switchless: Optional[bool] = None,
                 storage_networks: Optional[Sequence['outputs.StorageNetworksResponse']] = None):
        """
        The HostNetwork of a cluster.
        :param bool enable_storage_auto_ip: Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        :param Sequence['IntentsResponse'] intents: The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        :param bool storage_connectivity_switchless: Defines how the storage adapters between nodes are connected either switch or switch less..
        :param Sequence['StorageNetworksResponse'] storage_networks: List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        if enable_storage_auto_ip is None:
            enable_storage_auto_ip = False
        if enable_storage_auto_ip is not None:
            pulumi.set(__self__, "enable_storage_auto_ip", enable_storage_auto_ip)
        if intents is not None:
            pulumi.set(__self__, "intents", intents)
        if storage_connectivity_switchless is None:
            storage_connectivity_switchless = False
        if storage_connectivity_switchless is not None:
            pulumi.set(__self__, "storage_connectivity_switchless", storage_connectivity_switchless)
        if storage_networks is not None:
            pulumi.set(__self__, "storage_networks", storage_networks)

    @property
    @pulumi.getter(name="enableStorageAutoIp")
    def enable_storage_auto_ip(self) -> Optional[bool]:
        """
        Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        """
        return pulumi.get(self, "enable_storage_auto_ip")

    @property
    @pulumi.getter
    def intents(self) -> Optional[Sequence['outputs.IntentsResponse']]:
        """
        The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        """
        return pulumi.get(self, "intents")

    @property
    @pulumi.getter(name="storageConnectivitySwitchless")
    def storage_connectivity_switchless(self) -> Optional[bool]:
        """
        Defines how the storage adapters between nodes are connected either switch or switch less..
        """
        return pulumi.get(self, "storage_connectivity_switchless")

    @property
    @pulumi.getter(name="storageNetworks")
    def storage_networks(self) -> Optional[Sequence['outputs.StorageNetworksResponse']]:
        """
        List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage_networks")


@pulumi.output_type
class InfrastructureNetworkResponse(dict):
    """
    The InfrastructureNetwork of a AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "ipPools":
            suggest = "ip_pools"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "useDhcp":
            suggest = "use_dhcp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfrastructureNetworkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfrastructureNetworkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfrastructureNetworkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip_pools: Optional[Sequence['outputs.IpPoolsResponse']] = None,
                 subnet_mask: Optional[str] = None,
                 use_dhcp: Optional[bool] = None):
        """
        The InfrastructureNetwork of a AzureStackHCI Cluster.
        :param Sequence[str] dns_servers: IPv4 address of the DNS servers in your environment.
        :param str gateway: Default gateway that should be used for the provided IP address space.
        :param Sequence['IpPoolsResponse'] ip_pools: Range of IP addresses from which addresses are allocated for nodes within a subnet.
        :param str subnet_mask: Subnet mask that matches the provided IP address space.
        :param bool use_dhcp: Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if use_dhcp is not None:
            pulumi.set(__self__, "use_dhcp", use_dhcp)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        IPv4 address of the DNS servers in your environment.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Default gateway that should be used for the provided IP address space.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[Sequence['outputs.IpPoolsResponse']]:
        """
        Range of IP addresses from which addresses are allocated for nodes within a subnet.
        """
        return pulumi.get(self, "ip_pools")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        """
        Subnet mask that matches the provided IP address space.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="useDhcp")
    def use_dhcp(self) -> Optional[bool]:
        """
        Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        return pulumi.get(self, "use_dhcp")


@pulumi.output_type
class IntentsResponse(dict):
    """
    The Intents of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterPropertyOverrides":
            suggest = "adapter_property_overrides"
        elif key == "overrideAdapterProperty":
            suggest = "override_adapter_property"
        elif key == "overrideQosPolicy":
            suggest = "override_qos_policy"
        elif key == "overrideVirtualSwitchConfiguration":
            suggest = "override_virtual_switch_configuration"
        elif key == "qosPolicyOverrides":
            suggest = "qos_policy_overrides"
        elif key == "trafficType":
            suggest = "traffic_type"
        elif key == "virtualSwitchConfigurationOverrides":
            suggest = "virtual_switch_configuration_overrides"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter: Optional[Sequence[str]] = None,
                 adapter_property_overrides: Optional['outputs.AdapterPropertyOverridesResponse'] = None,
                 name: Optional[str] = None,
                 override_adapter_property: Optional[bool] = None,
                 override_qos_policy: Optional[bool] = None,
                 override_virtual_switch_configuration: Optional[bool] = None,
                 qos_policy_overrides: Optional['outputs.QosPolicyOverridesResponse'] = None,
                 traffic_type: Optional[Sequence[str]] = None,
                 virtual_switch_configuration_overrides: Optional['outputs.VirtualSwitchConfigurationOverridesResponse'] = None):
        """
        The Intents of a cluster.
        :param Sequence[str] adapter: Array of network interfaces used for the network intent.
        :param 'AdapterPropertyOverridesResponse' adapter_property_overrides: Set Adapter PropertyOverrides for cluster.
        :param str name: Name of the network intent you wish to create.
        :param bool override_adapter_property: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param bool override_qos_policy: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param bool override_virtual_switch_configuration: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param 'QosPolicyOverridesResponse' qos_policy_overrides: Set QoS PolicyOverrides for cluster.
        :param Sequence[str] traffic_type: List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        :param 'VirtualSwitchConfigurationOverridesResponse' virtual_switch_configuration_overrides: Set virtualSwitch ConfigurationOverrides for cluster.
        """
        if adapter is not None:
            pulumi.set(__self__, "adapter", adapter)
        if adapter_property_overrides is not None:
            pulumi.set(__self__, "adapter_property_overrides", adapter_property_overrides)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_adapter_property is None:
            override_adapter_property = False
        if override_adapter_property is not None:
            pulumi.set(__self__, "override_adapter_property", override_adapter_property)
        if override_qos_policy is None:
            override_qos_policy = False
        if override_qos_policy is not None:
            pulumi.set(__self__, "override_qos_policy", override_qos_policy)
        if override_virtual_switch_configuration is None:
            override_virtual_switch_configuration = False
        if override_virtual_switch_configuration is not None:
            pulumi.set(__self__, "override_virtual_switch_configuration", override_virtual_switch_configuration)
        if qos_policy_overrides is not None:
            pulumi.set(__self__, "qos_policy_overrides", qos_policy_overrides)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if virtual_switch_configuration_overrides is not None:
            pulumi.set(__self__, "virtual_switch_configuration_overrides", virtual_switch_configuration_overrides)

    @property
    @pulumi.getter
    def adapter(self) -> Optional[Sequence[str]]:
        """
        Array of network interfaces used for the network intent.
        """
        return pulumi.get(self, "adapter")

    @property
    @pulumi.getter(name="adapterPropertyOverrides")
    def adapter_property_overrides(self) -> Optional['outputs.AdapterPropertyOverridesResponse']:
        """
        Set Adapter PropertyOverrides for cluster.
        """
        return pulumi.get(self, "adapter_property_overrides")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the network intent you wish to create.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideAdapterProperty")
    def override_adapter_property(self) -> Optional[bool]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_adapter_property")

    @property
    @pulumi.getter(name="overrideQosPolicy")
    def override_qos_policy(self) -> Optional[bool]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_qos_policy")

    @property
    @pulumi.getter(name="overrideVirtualSwitchConfiguration")
    def override_virtual_switch_configuration(self) -> Optional[bool]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_virtual_switch_configuration")

    @property
    @pulumi.getter(name="qosPolicyOverrides")
    def qos_policy_overrides(self) -> Optional['outputs.QosPolicyOverridesResponse']:
        """
        Set QoS PolicyOverrides for cluster.
        """
        return pulumi.get(self, "qos_policy_overrides")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[Sequence[str]]:
        """
        List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        """
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="virtualSwitchConfigurationOverrides")
    def virtual_switch_configuration_overrides(self) -> Optional['outputs.VirtualSwitchConfigurationOverridesResponse']:
        """
        Set virtualSwitch ConfigurationOverrides for cluster.
        """
        return pulumi.get(self, "virtual_switch_configuration_overrides")


@pulumi.output_type
class IpPoolsResponse(dict):
    """
    The dnsServers of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endingAddress":
            suggest = "ending_address"
        elif key == "startingAddress":
            suggest = "starting_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpPoolsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpPoolsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpPoolsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ending_address: Optional[str] = None,
                 starting_address: Optional[str] = None):
        """
        The dnsServers of a device.
        :param str ending_address: Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        :param str starting_address: Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        if ending_address is not None:
            pulumi.set(__self__, "ending_address", ending_address)
        if starting_address is not None:
            pulumi.set(__self__, "starting_address", starting_address)

    @property
    @pulumi.getter(name="endingAddress")
    def ending_address(self) -> Optional[str]:
        """
        Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "ending_address")

    @property
    @pulumi.getter(name="startingAddress")
    def starting_address(self) -> Optional[str]:
        """
        Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "starting_address")


@pulumi.output_type
class IsolatedVmAttestationConfigurationResponse(dict):
    """
    Attestation configurations for isolated VM (e.g. TVM, CVM) of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attestationResourceId":
            suggest = "attestation_resource_id"
        elif key == "attestationServiceEndpoint":
            suggest = "attestation_service_endpoint"
        elif key == "relyingPartyServiceEndpoint":
            suggest = "relying_party_service_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IsolatedVmAttestationConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IsolatedVmAttestationConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IsolatedVmAttestationConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attestation_resource_id: str,
                 attestation_service_endpoint: str,
                 relying_party_service_endpoint: str):
        """
        Attestation configurations for isolated VM (e.g. TVM, CVM) of the cluster.
        :param str attestation_resource_id: Fully qualified Azure resource id of the Microsoft Azure attestation resource associated with this cluster.
        :param str attestation_service_endpoint: Region specific endpoint for Microsoft Azure Attestation service for the cluster
        :param str relying_party_service_endpoint: Region specific endpoint for relying party service.
        """
        pulumi.set(__self__, "attestation_resource_id", attestation_resource_id)
        pulumi.set(__self__, "attestation_service_endpoint", attestation_service_endpoint)
        pulumi.set(__self__, "relying_party_service_endpoint", relying_party_service_endpoint)

    @property
    @pulumi.getter(name="attestationResourceId")
    def attestation_resource_id(self) -> str:
        """
        Fully qualified Azure resource id of the Microsoft Azure attestation resource associated with this cluster.
        """
        return pulumi.get(self, "attestation_resource_id")

    @property
    @pulumi.getter(name="attestationServiceEndpoint")
    def attestation_service_endpoint(self) -> str:
        """
        Region specific endpoint for Microsoft Azure Attestation service for the cluster
        """
        return pulumi.get(self, "attestation_service_endpoint")

    @property
    @pulumi.getter(name="relyingPartyServiceEndpoint")
    def relying_party_service_endpoint(self) -> str:
        """
        Region specific endpoint for relying party service.
        """
        return pulumi.get(self, "relying_party_service_endpoint")


@pulumi.output_type
class NicDetailResponse(dict):
    """
    The NIC Detail of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterName":
            suggest = "adapter_name"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "defaultGateway":
            suggest = "default_gateway"
        elif key == "defaultIsolationId":
            suggest = "default_isolation_id"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "driverVersion":
            suggest = "driver_version"
        elif key == "interfaceDescription":
            suggest = "interface_description"
        elif key == "ip4Address":
            suggest = "ip4_address"
        elif key == "subnetMask":
            suggest = "subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter_name: str,
                 component_id: Optional[str] = None,
                 default_gateway: Optional[str] = None,
                 default_isolation_id: Optional[str] = None,
                 dns_servers: Optional[Sequence[str]] = None,
                 driver_version: Optional[str] = None,
                 interface_description: Optional[str] = None,
                 ip4_address: Optional[str] = None,
                 subnet_mask: Optional[str] = None):
        """
        The NIC Detail of a device.
        :param str adapter_name: Adapter Name of NIC
        :param str component_id: Component Id of NIC
        :param str default_gateway: Default Gateway of NIC
        :param str default_isolation_id: Default Isolation of Management NIC
        :param Sequence[str] dns_servers: DNS Servers for NIC
        :param str driver_version: Driver Version of NIC
        :param str interface_description: Interface Description of NIC
        :param str ip4_address: Subnet Mask of NIC
        :param str subnet_mask: Subnet Mask of NIC
        """
        pulumi.set(__self__, "adapter_name", adapter_name)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if default_isolation_id is not None:
            pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if driver_version is not None:
            pulumi.set(__self__, "driver_version", driver_version)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if ip4_address is not None:
            pulumi.set(__self__, "ip4_address", ip4_address)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> str:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[str]:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> Optional[str]:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> Optional[str]:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[str]:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> Optional[str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")


@pulumi.output_type
class ObservabilityResponse(dict):
    """
    The Observability of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "episodicDataUpload":
            suggest = "episodic_data_upload"
        elif key == "euLocation":
            suggest = "eu_location"
        elif key == "streamingDataClient":
            suggest = "streaming_data_client"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObservabilityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObservabilityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObservabilityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 episodic_data_upload: Optional[bool] = None,
                 eu_location: Optional[bool] = None,
                 streaming_data_client: Optional[bool] = None):
        """
        The Observability of AzureStackHCI Cluster.
        :param bool episodic_data_upload: When set to true, collects log data to facilitate quicker issue resolution.
        :param bool eu_location: Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        :param bool streaming_data_client: Enables telemetry data to be sent to Microsoft
        """
        if episodic_data_upload is None:
            episodic_data_upload = True
        if episodic_data_upload is not None:
            pulumi.set(__self__, "episodic_data_upload", episodic_data_upload)
        if eu_location is None:
            eu_location = False
        if eu_location is not None:
            pulumi.set(__self__, "eu_location", eu_location)
        if streaming_data_client is None:
            streaming_data_client = True
        if streaming_data_client is not None:
            pulumi.set(__self__, "streaming_data_client", streaming_data_client)

    @property
    @pulumi.getter(name="episodicDataUpload")
    def episodic_data_upload(self) -> Optional[bool]:
        """
        When set to true, collects log data to facilitate quicker issue resolution.
        """
        return pulumi.get(self, "episodic_data_upload")

    @property
    @pulumi.getter(name="euLocation")
    def eu_location(self) -> Optional[bool]:
        """
        Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        """
        return pulumi.get(self, "eu_location")

    @property
    @pulumi.getter(name="streamingDataClient")
    def streaming_data_client(self) -> Optional[bool]:
        """
        Enables telemetry data to be sent to Microsoft
        """
        return pulumi.get(self, "streaming_data_client")


@pulumi.output_type
class OptionalServicesResponse(dict):
    """
    The OptionalServices of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLocation":
            suggest = "custom_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OptionalServicesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OptionalServicesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OptionalServicesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_location: Optional[str] = None):
        """
        The OptionalServices of AzureStackHCI Cluster.
        :param str custom_location: The name of custom location.
        """
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional[str]:
        """
        The name of custom location.
        """
        return pulumi.get(self, "custom_location")


@pulumi.output_type
class PerNodeExtensionStateResponse(dict):
    """
    Status of Arc Extension for a particular node in HCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceView":
            suggest = "instance_view"
        elif key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeExtensionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeExtensionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeExtensionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extension: str,
                 instance_view: 'outputs.ExtensionInstanceViewResponse',
                 name: str,
                 state: str,
                 type_handler_version: str):
        """
        Status of Arc Extension for a particular node in HCI Cluster.
        :param str extension: Fully qualified resource ID for the particular Arc Extension on this node.
        :param 'ExtensionInstanceViewResponse' instance_view: The extension instance view.
        :param str name: Name of the node in HCI Cluster.
        :param str state: State of Arc Extension in this node.
        :param str type_handler_version: Specifies the version of the script handler.
        """
        pulumi.set(__self__, "extension", extension)
        pulumi.set(__self__, "instance_view", instance_view)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type_handler_version", type_handler_version)

    @property
    @pulumi.getter
    def extension(self) -> str:
        """
        Fully qualified resource ID for the particular Arc Extension on this node.
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter(name="instanceView")
    def instance_view(self) -> 'outputs.ExtensionInstanceViewResponse':
        """
        The extension instance view.
        """
        return pulumi.get(self, "instance_view")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the node in HCI Cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of Arc Extension in this node.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> str:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class PerNodeStateResponse(dict):
    """
    Status of Arc agent for a particular node in HCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcInstance":
            suggest = "arc_instance"
        elif key == "arcNodeServicePrincipalObjectId":
            suggest = "arc_node_service_principal_object_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_instance: str,
                 arc_node_service_principal_object_id: str,
                 name: str,
                 state: str):
        """
        Status of Arc agent for a particular node in HCI Cluster.
        :param str arc_instance: Fully qualified resource ID for the Arc agent of this node.
        :param str arc_node_service_principal_object_id: The service principal id of the arc for server node
        :param str name: Name of the Node in HCI Cluster
        :param str state: State of Arc agent in this node.
        """
        pulumi.set(__self__, "arc_instance", arc_instance)
        pulumi.set(__self__, "arc_node_service_principal_object_id", arc_node_service_principal_object_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="arcInstance")
    def arc_instance(self) -> str:
        """
        Fully qualified resource ID for the Arc agent of this node.
        """
        return pulumi.get(self, "arc_instance")

    @property
    @pulumi.getter(name="arcNodeServicePrincipalObjectId")
    def arc_node_service_principal_object_id(self) -> str:
        """
        The service principal id of the arc for server node
        """
        return pulumi.get(self, "arc_node_service_principal_object_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Node in HCI Cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of Arc agent in this node.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class PhysicalNodesResponse(dict):
    """
    The PhysicalNodes of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhysicalNodesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhysicalNodesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhysicalNodesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The PhysicalNodes of a cluster.
        :param str ipv4_address: The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        :param str name: NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class QosPolicyOverridesResponse(dict):
    """
    The QoSPolicyOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPercentageSMB":
            suggest = "bandwidth_percentage_smb"
        elif key == "priorityValue8021ActionCluster":
            suggest = "priority_value8021_action_cluster"
        elif key == "priorityValue8021ActionSMB":
            suggest = "priority_value8021_action_smb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QosPolicyOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QosPolicyOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QosPolicyOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_percentage_smb: Optional[str] = None,
                 priority_value8021_action_cluster: Optional[str] = None,
                 priority_value8021_action_smb: Optional[str] = None):
        """
        The QoSPolicyOverrides of a cluster.
        :param str bandwidth_percentage_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str priority_value8021_action_cluster: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str priority_value8021_action_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        if bandwidth_percentage_smb is not None:
            pulumi.set(__self__, "bandwidth_percentage_smb", bandwidth_percentage_smb)
        if priority_value8021_action_cluster is not None:
            pulumi.set(__self__, "priority_value8021_action_cluster", priority_value8021_action_cluster)
        if priority_value8021_action_smb is not None:
            pulumi.set(__self__, "priority_value8021_action_smb", priority_value8021_action_smb)

    @property
    @pulumi.getter(name="bandwidthPercentageSMB")
    def bandwidth_percentage_smb(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "bandwidth_percentage_smb")

    @property
    @pulumi.getter(name="priorityValue8021ActionCluster")
    def priority_value8021_action_cluster(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_cluster")

    @property
    @pulumi.getter(name="priorityValue8021ActionSMB")
    def priority_value8021_action_smb(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_smb")


@pulumi.output_type
class ReportedPropertiesResponse(dict):
    """
    The DeploymentStatus of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentStatus":
            suggest = "deployment_status"
        elif key == "validationStatus":
            suggest = "validation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_status: 'outputs.DeploymentStatusResponse',
                 validation_status: 'outputs.ValidationStatusResponse'):
        """
        The DeploymentStatus of AzureStackHCI Cluster.
        :param 'DeploymentStatusResponse' deployment_status: Deployment status of AzureStackHCI Cluster Deployment.
        :param 'ValidationStatusResponse' validation_status: validation status of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "validation_status", validation_status)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> 'outputs.DeploymentStatusResponse':
        """
        Deployment status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter(name="validationStatus")
    def validation_status(self) -> 'outputs.ValidationStatusResponse':
        """
        validation status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "validation_status")


@pulumi.output_type
class ScaleUnitsResponse(dict):
    """
    Scale units will contains list of deployment data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentData":
            suggest = "deployment_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleUnitsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleUnitsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleUnitsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_data: 'outputs.DeploymentDataResponse'):
        """
        Scale units will contains list of deployment data
        :param 'DeploymentDataResponse' deployment_data: Deployment Data to deploy AzureStackHCI Cluster.
        """
        pulumi.set(__self__, "deployment_data", deployment_data)

    @property
    @pulumi.getter(name="deploymentData")
    def deployment_data(self) -> 'outputs.DeploymentDataResponse':
        """
        Deployment Data to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "deployment_data")


@pulumi.output_type
class SecurityComplianceStatusResponse(dict):
    """
    Security compliance properties of the resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAtRestEncrypted":
            suggest = "data_at_rest_encrypted"
        elif key == "dataInTransitProtected":
            suggest = "data_in_transit_protected"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "securedCoreCompliance":
            suggest = "secured_core_compliance"
        elif key == "wdacCompliance":
            suggest = "wdac_compliance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityComplianceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityComplianceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityComplianceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_at_rest_encrypted: str,
                 data_in_transit_protected: str,
                 last_updated: str,
                 secured_core_compliance: str,
                 wdac_compliance: str):
        """
        Security compliance properties of the resource
        :param str data_at_rest_encrypted: Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
        :param str data_in_transit_protected: Indicates whether HCI cluster has data in-transit protection.
        :param str last_updated: Time in UTC when compliance status was last updated.
        :param str secured_core_compliance: Indicates whether HCI hosts meets secured-core server requirements.
        :param str wdac_compliance: Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
        """
        pulumi.set(__self__, "data_at_rest_encrypted", data_at_rest_encrypted)
        pulumi.set(__self__, "data_in_transit_protected", data_in_transit_protected)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "secured_core_compliance", secured_core_compliance)
        pulumi.set(__self__, "wdac_compliance", wdac_compliance)

    @property
    @pulumi.getter(name="dataAtRestEncrypted")
    def data_at_rest_encrypted(self) -> str:
        """
        Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
        """
        return pulumi.get(self, "data_at_rest_encrypted")

    @property
    @pulumi.getter(name="dataInTransitProtected")
    def data_in_transit_protected(self) -> str:
        """
        Indicates whether HCI cluster has data in-transit protection.
        """
        return pulumi.get(self, "data_in_transit_protected")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        """
        Time in UTC when compliance status was last updated.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="securedCoreCompliance")
    def secured_core_compliance(self) -> str:
        """
        Indicates whether HCI hosts meets secured-core server requirements.
        """
        return pulumi.get(self, "secured_core_compliance")

    @property
    @pulumi.getter(name="wdacCompliance")
    def wdac_compliance(self) -> str:
        """
        Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
        """
        return pulumi.get(self, "wdac_compliance")


@pulumi.output_type
class ServiceConfigurationResponse(dict):
    """
    Service configuration details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: float,
                 service_name: str):
        """
        Service configuration details
        :param float port: The port on which service is enabled.
        :param str service_name: Name of the service.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port on which service is enabled.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Name of the service.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class SoftwareAssurancePropertiesResponse(dict):
    """
    Software Assurance properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdated":
            suggest = "last_updated"
        elif key == "softwareAssuranceStatus":
            suggest = "software_assurance_status"
        elif key == "softwareAssuranceIntent":
            suggest = "software_assurance_intent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareAssurancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareAssurancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareAssurancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_updated: str,
                 software_assurance_status: str,
                 software_assurance_intent: Optional[str] = None):
        """
        Software Assurance properties of the cluster.
        :param str last_updated: TimeStamp denoting the latest SA benefit applicability is validated.
        :param str software_assurance_status: Status of the Software Assurance for the cluster.
        :param str software_assurance_intent: Customer Intent for Software Assurance Benefit.
        """
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "software_assurance_status", software_assurance_status)
        if software_assurance_intent is not None:
            pulumi.set(__self__, "software_assurance_intent", software_assurance_intent)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        """
        TimeStamp denoting the latest SA benefit applicability is validated.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="softwareAssuranceStatus")
    def software_assurance_status(self) -> str:
        """
        Status of the Software Assurance for the cluster.
        """
        return pulumi.get(self, "software_assurance_status")

    @property
    @pulumi.getter(name="softwareAssuranceIntent")
    def software_assurance_intent(self) -> Optional[str]:
        """
        Customer Intent for Software Assurance Benefit.
        """
        return pulumi.get(self, "software_assurance_intent")


@pulumi.output_type
class StepResponse(dict):
    """
    Progress representation of the update run steps.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "lastUpdatedTimeUtc":
            suggest = "last_updated_time_utc"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 end_time_utc: Optional[str] = None,
                 error_message: Optional[str] = None,
                 last_updated_time_utc: Optional[str] = None,
                 name: Optional[str] = None,
                 start_time_utc: Optional[str] = None,
                 status: Optional[str] = None,
                 steps: Optional[Sequence['outputs.StepResponse']] = None):
        """
        Progress representation of the update run steps.
        :param str description: More detailed description of the step.
        :param str end_time_utc: When the step reached a terminal state.
        :param str error_message: Error message, specified if the step is in a failed state.
        :param str last_updated_time_utc: Completion time of this step or the last completed sub-step.
        :param str name: Name of the step.
        :param str start_time_utc: When the step started, or empty if it has not started executing.
        :param str status: Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        :param Sequence['StepResponse'] steps: Recursive model for child steps of this step.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time_utc is not None:
            pulumi.set(__self__, "end_time_utc", end_time_utc)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if last_updated_time_utc is not None:
            pulumi.set(__self__, "last_updated_time_utc", last_updated_time_utc)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time_utc is not None:
            pulumi.set(__self__, "start_time_utc", start_time_utc)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        More detailed description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> Optional[str]:
        """
        When the step reached a terminal state.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message, specified if the step is in a failed state.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="lastUpdatedTimeUtc")
    def last_updated_time_utc(self) -> Optional[str]:
        """
        Completion time of this step or the last completed sub-step.
        """
        return pulumi.get(self, "last_updated_time_utc")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> Optional[str]:
        """
        When the step started, or empty if it has not started executing.
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.StepResponse']]:
        """
        Recursive model for child steps of this step.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class StorageNetworksResponse(dict):
    """
    The StorageNetworks of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAdapterName":
            suggest = "network_adapter_name"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworksResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworksResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworksResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 network_adapter_name: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        """
        The StorageNetworks of a cluster.
        :param str name: Name of the storage network.
        :param str network_adapter_name: Name of the storage network adapter.
        :param str vlan_id: ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_adapter_name is not None:
            pulumi.set(__self__, "network_adapter_name", network_adapter_name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the storage network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAdapterName")
    def network_adapter_name(self) -> Optional[str]:
        """
        Name of the storage network adapter.
        """
        return pulumi.get(self, "network_adapter_name")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        """
        ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class StorageResponse(dict):
    """
    The Storage config of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationMode":
            suggest = "configuration_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_mode: Optional[str] = None):
        """
        The Storage config of AzureStackHCI Cluster.
        :param str configuration_mode: By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        if configuration_mode is None:
            configuration_mode = 'Express'
        if configuration_mode is not None:
            pulumi.set(__self__, "configuration_mode", configuration_mode)

    @property
    @pulumi.getter(name="configurationMode")
    def configuration_mode(self) -> Optional[str]:
        """
        By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        return pulumi.get(self, "configuration_mode")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UpdatePrerequisiteResponse(dict):
    """
    If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageName":
            suggest = "package_name"
        elif key == "updateType":
            suggest = "update_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpdatePrerequisiteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpdatePrerequisiteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpdatePrerequisiteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_name: Optional[str] = None,
                 update_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
        :param str package_name: Friendly name of the prerequisite.
        :param str update_type: Updatable component type.
        :param str version: Version of the prerequisite.
        """
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        """
        Friendly name of the prerequisite.
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[str]:
        """
        Updatable component type.
        """
        return pulumi.get(self, "update_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the prerequisite.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class ValidationStatusResponse(dict):
    """
    The ValidationStatus of AzureStackHCI Cluster.
    """
    def __init__(__self__, *,
                 status: str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The ValidationStatus of AzureStackHCI Cluster.
        :param str status: Status of AzureStackHCI Cluster Deployment.
        :param Sequence['DeploymentStepResponse'] steps: List of steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class VirtualSwitchConfigurationOverridesResponse(dict):
    """
    The VirtualSwitchConfigurationOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableIov":
            suggest = "enable_iov"
        elif key == "loadBalancingAlgorithm":
            suggest = "load_balancing_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualSwitchConfigurationOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualSwitchConfigurationOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualSwitchConfigurationOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_iov: Optional[str] = None,
                 load_balancing_algorithm: Optional[str] = None):
        """
        The VirtualSwitchConfigurationOverrides of a cluster.
        :param str enable_iov: Enable IoV for Virtual Switch
        :param str load_balancing_algorithm: Load Balancing Algorithm for Virtual Switch
        """
        if enable_iov is not None:
            pulumi.set(__self__, "enable_iov", enable_iov)
        if load_balancing_algorithm is not None:
            pulumi.set(__self__, "load_balancing_algorithm", load_balancing_algorithm)

    @property
    @pulumi.getter(name="enableIov")
    def enable_iov(self) -> Optional[str]:
        """
        Enable IoV for Virtual Switch
        """
        return pulumi.get(self, "enable_iov")

    @property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> Optional[str]:
        """
        Load Balancing Algorithm for Virtual Switch
        """
        return pulumi.get(self, "load_balancing_algorithm")


