# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'DeviceConfigurationArgs',
    'DeviceConfigurationArgsDict',
    'NicDetailArgs',
    'NicDetailArgsDict',
]

MYPY = False

if not MYPY:
    class DeviceConfigurationArgsDict(TypedDict):
        """
        The device Configuration of a device.
        """
        nic_details: pulumi.Input[Sequence[pulumi.Input['NicDetailArgsDict']]]
        """
        NIC Details of device
        """
        device_metadata: NotRequired[pulumi.Input[str]]
        """
        device metadata details.
        """
elif False:
    DeviceConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceConfigurationArgs:
    def __init__(__self__, *,
                 nic_details: pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]],
                 device_metadata: Optional[pulumi.Input[str]] = None):
        """
        The device Configuration of a device.
        :param pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]] nic_details: NIC Details of device
        :param pulumi.Input[str] device_metadata: device metadata details.
        """
        pulumi.set(__self__, "nic_details", nic_details)
        if device_metadata is not None:
            pulumi.set(__self__, "device_metadata", device_metadata)

    @property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]]:
        """
        NIC Details of device
        """
        return pulumi.get(self, "nic_details")

    @nic_details.setter
    def nic_details(self, value: pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]]):
        pulumi.set(self, "nic_details", value)

    @property
    @pulumi.getter(name="deviceMetadata")
    def device_metadata(self) -> Optional[pulumi.Input[str]]:
        """
        device metadata details.
        """
        return pulumi.get(self, "device_metadata")

    @device_metadata.setter
    def device_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_metadata", value)


if not MYPY:
    class NicDetailArgsDict(TypedDict):
        """
        The NIC Detail of a device.
        """
        adapter_name: pulumi.Input[str]
        """
        Adapter Name of NIC
        """
        component_id: NotRequired[pulumi.Input[str]]
        """
        Component Id of NIC
        """
        default_gateway: NotRequired[pulumi.Input[str]]
        """
        Default Gateway of NIC
        """
        default_isolation_id: NotRequired[pulumi.Input[str]]
        """
        Default Isolation of Management NIC
        """
        dns_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNS Servers for NIC
        """
        driver_version: NotRequired[pulumi.Input[str]]
        """
        Driver Version of NIC
        """
        interface_description: NotRequired[pulumi.Input[str]]
        """
        Interface Description of NIC
        """
        ip4_address: NotRequired[pulumi.Input[str]]
        """
        Subnet Mask of NIC
        """
        subnet_mask: NotRequired[pulumi.Input[str]]
        """
        Subnet Mask of NIC
        """
elif False:
    NicDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NicDetailArgs:
    def __init__(__self__, *,
                 adapter_name: pulumi.Input[str],
                 component_id: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 default_isolation_id: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 driver_version: Optional[pulumi.Input[str]] = None,
                 interface_description: Optional[pulumi.Input[str]] = None,
                 ip4_address: Optional[pulumi.Input[str]] = None,
                 subnet_mask: Optional[pulumi.Input[str]] = None):
        """
        The NIC Detail of a device.
        :param pulumi.Input[str] adapter_name: Adapter Name of NIC
        :param pulumi.Input[str] component_id: Component Id of NIC
        :param pulumi.Input[str] default_gateway: Default Gateway of NIC
        :param pulumi.Input[str] default_isolation_id: Default Isolation of Management NIC
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: DNS Servers for NIC
        :param pulumi.Input[str] driver_version: Driver Version of NIC
        :param pulumi.Input[str] interface_description: Interface Description of NIC
        :param pulumi.Input[str] ip4_address: Subnet Mask of NIC
        :param pulumi.Input[str] subnet_mask: Subnet Mask of NIC
        """
        pulumi.set(__self__, "adapter_name", adapter_name)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if default_isolation_id is not None:
            pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if driver_version is not None:
            pulumi.set(__self__, "driver_version", driver_version)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if ip4_address is not None:
            pulumi.set(__self__, "ip4_address", ip4_address)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> pulumi.Input[str]:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @adapter_name.setter
    def adapter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "adapter_name", value)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[str]]:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_id", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @default_isolation_id.setter
    def default_isolation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_isolation_id", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> Optional[pulumi.Input[str]]:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @driver_version.setter
    def driver_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_version", value)

    @property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_description", value)

    @property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @ip4_address.setter
    def ip4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_address", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_mask", value)


