# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AdapterPropertyOverridesArgs',
    'ArcConnectivityPropertiesArgs',
    'ClusterDesiredPropertiesArgs',
    'DeploymentClusterArgs',
    'DeploymentConfigurationArgs',
    'DeploymentDataArgs',
    'DeploymentSecuritySettingsArgs',
    'DeviceConfigurationArgs',
    'HostNetworkArgs',
    'InfrastructureNetworkArgs',
    'IntentsArgs',
    'IpPoolsArgs',
    'NicDetailArgs',
    'ObservabilityArgs',
    'OptionalServicesArgs',
    'PhysicalNodesArgs',
    'QosPolicyOverridesArgs',
    'ScaleUnitsArgs',
    'ServiceConfigurationArgs',
    'SoftwareAssurancePropertiesArgs',
    'StepArgs',
    'StorageNetworksArgs',
    'StorageArgs',
    'UpdatePrerequisiteArgs',
    'VirtualSwitchConfigurationOverridesArgs',
]

@pulumi.input_type
class AdapterPropertyOverridesArgs:
    def __init__(__self__, *,
                 jumbo_packet: Optional[pulumi.Input[str]] = None,
                 network_direct: Optional[pulumi.Input[str]] = None,
                 network_direct_technology: Optional[pulumi.Input[str]] = None):
        """
        The AdapterPropertyOverrides of a cluster.
        :param pulumi.Input[str] jumbo_packet: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input[str] network_direct: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input[str] network_direct_technology: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        if jumbo_packet is not None:
            pulumi.set(__self__, "jumbo_packet", jumbo_packet)
        if network_direct is not None:
            pulumi.set(__self__, "network_direct", network_direct)
        if network_direct_technology is not None:
            pulumi.set(__self__, "network_direct_technology", network_direct_technology)

    @property
    @pulumi.getter(name="jumboPacket")
    def jumbo_packet(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "jumbo_packet")

    @jumbo_packet.setter
    def jumbo_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jumbo_packet", value)

    @property
    @pulumi.getter(name="networkDirect")
    def network_direct(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "network_direct")

    @network_direct.setter
    def network_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_direct", value)

    @property
    @pulumi.getter(name="networkDirectTechnology")
    def network_direct_technology(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        return pulumi.get(self, "network_direct_technology")

    @network_direct_technology.setter
    def network_direct_technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_direct_technology", value)


@pulumi.input_type
class ArcConnectivityPropertiesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceConfigurationArgs']]]] = None):
        """
        Connectivity related configuration required by arc server.
        :param pulumi.Input[bool] enabled: True indicates ARC connectivity is enabled
        :param pulumi.Input[Sequence[pulumi.Input['ServiceConfigurationArgs']]] service_configurations: Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_configurations is not None:
            pulumi.set(__self__, "service_configurations", service_configurations)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True indicates ARC connectivity is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceConfigurations")
    def service_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceConfigurationArgs']]]]:
        """
        Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
        """
        return pulumi.get(self, "service_configurations")

    @service_configurations.setter
    def service_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceConfigurationArgs']]]]):
        pulumi.set(self, "service_configurations", value)


@pulumi.input_type
class ClusterDesiredPropertiesArgs:
    def __init__(__self__, *,
                 diagnostic_level: Optional[pulumi.Input[Union[str, 'DiagnosticLevel']]] = None,
                 windows_server_subscription: Optional[pulumi.Input[Union[str, 'WindowsServerSubscription']]] = None):
        """
        Desired properties of the cluster.
        :param pulumi.Input[Union[str, 'DiagnosticLevel']] diagnostic_level: Desired level of diagnostic data emitted by the cluster.
        :param pulumi.Input[Union[str, 'WindowsServerSubscription']] windows_server_subscription: Desired state of Windows Server Subscription.
        """
        if diagnostic_level is not None:
            pulumi.set(__self__, "diagnostic_level", diagnostic_level)
        if windows_server_subscription is not None:
            pulumi.set(__self__, "windows_server_subscription", windows_server_subscription)

    @property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[pulumi.Input[Union[str, 'DiagnosticLevel']]]:
        """
        Desired level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")

    @diagnostic_level.setter
    def diagnostic_level(self, value: Optional[pulumi.Input[Union[str, 'DiagnosticLevel']]]):
        pulumi.set(self, "diagnostic_level", value)

    @property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> Optional[pulumi.Input[Union[str, 'WindowsServerSubscription']]]:
        """
        Desired state of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")

    @windows_server_subscription.setter
    def windows_server_subscription(self, value: Optional[pulumi.Input[Union[str, 'WindowsServerSubscription']]]):
        pulumi.set(self, "windows_server_subscription", value)


@pulumi.input_type
class DeploymentClusterArgs:
    def __init__(__self__, *,
                 azure_service_endpoint: Optional[pulumi.Input[str]] = None,
                 cloud_account_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 witness_path: Optional[pulumi.Input[str]] = None,
                 witness_type: Optional[pulumi.Input[str]] = None):
        """
        AzureStackHCI Cluster deployment properties.
        :param pulumi.Input[str] azure_service_endpoint: For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        :param pulumi.Input[str] cloud_account_name: Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        :param pulumi.Input[str] name: The cluster name provided when preparing Active Directory.
        :param pulumi.Input[str] witness_path: Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        :param pulumi.Input[str] witness_type: Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        if azure_service_endpoint is not None:
            pulumi.set(__self__, "azure_service_endpoint", azure_service_endpoint)
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if witness_path is not None:
            pulumi.set(__self__, "witness_path", witness_path)
        if witness_type is not None:
            pulumi.set(__self__, "witness_type", witness_type)

    @property
    @pulumi.getter(name="azureServiceEndpoint")
    def azure_service_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        """
        return pulumi.get(self, "azure_service_endpoint")

    @azure_service_endpoint.setter
    def azure_service_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_service_endpoint", value)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "cloud_account_name")

    @cloud_account_name.setter
    def cloud_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_account_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster name provided when preparing Active Directory.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="witnessPath")
    def witness_path(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "witness_path")

    @witness_path.setter
    def witness_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "witness_path", value)

    @property
    @pulumi.getter(name="witnessType")
    def witness_type(self) -> Optional[pulumi.Input[str]]:
        """
        Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        return pulumi.get(self, "witness_type")

    @witness_type.setter
    def witness_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "witness_type", value)


@pulumi.input_type
class DeploymentConfigurationArgs:
    def __init__(__self__, *,
                 scale_units: pulumi.Input[Sequence[pulumi.Input['ScaleUnitsArgs']]],
                 version: Optional[pulumi.Input[str]] = None):
        """
        Deployment Configuration
        :param pulumi.Input[Sequence[pulumi.Input['ScaleUnitsArgs']]] scale_units: Scale units will contains list of deployment data
        :param pulumi.Input[str] version: deployment template version 
        """
        pulumi.set(__self__, "scale_units", scale_units)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="scaleUnits")
    def scale_units(self) -> pulumi.Input[Sequence[pulumi.Input['ScaleUnitsArgs']]]:
        """
        Scale units will contains list of deployment data
        """
        return pulumi.get(self, "scale_units")

    @scale_units.setter
    def scale_units(self, value: pulumi.Input[Sequence[pulumi.Input['ScaleUnitsArgs']]]):
        pulumi.set(self, "scale_units", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        deployment template version 
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentDataArgs:
    def __init__(__self__, *,
                 adou_path: Optional[pulumi.Input[str]] = None,
                 cluster: Optional[pulumi.Input['DeploymentClusterArgs']] = None,
                 domain_fqdn: Optional[pulumi.Input[str]] = None,
                 host_network: Optional[pulumi.Input['HostNetworkArgs']] = None,
                 infrastructure_network: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureNetworkArgs']]]] = None,
                 naming_prefix: Optional[pulumi.Input[str]] = None,
                 observability: Optional[pulumi.Input['ObservabilityArgs']] = None,
                 optional_services: Optional[pulumi.Input['OptionalServicesArgs']] = None,
                 physical_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['PhysicalNodesArgs']]]] = None,
                 secrets_location: Optional[pulumi.Input[str]] = None,
                 security_settings: Optional[pulumi.Input['DeploymentSecuritySettingsArgs']] = None,
                 storage: Optional[pulumi.Input['StorageArgs']] = None):
        """
        The Deployment data of AzureStackHCI Cluster.
        :param pulumi.Input[str] adou_path: The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        :param pulumi.Input['DeploymentClusterArgs'] cluster: Observability config to deploy AzureStackHCI Cluster.
        :param pulumi.Input[str] domain_fqdn: FQDN to deploy cluster
        :param pulumi.Input['HostNetworkArgs'] host_network: HostNetwork config to deploy AzureStackHCI Cluster.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructureNetworkArgs']]] infrastructure_network: InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        :param pulumi.Input[str] naming_prefix: naming prefix to deploy cluster.
        :param pulumi.Input['ObservabilityArgs'] observability: Observability config to deploy AzureStackHCI Cluster.
        :param pulumi.Input['OptionalServicesArgs'] optional_services: OptionalServices config to deploy AzureStackHCI Cluster.
        :param pulumi.Input[Sequence[pulumi.Input['PhysicalNodesArgs']]] physical_nodes: list of physical nodes config to deploy AzureStackHCI Cluster.
        :param pulumi.Input[str] secrets_location: The URI to the keyvault / secret store.
        :param pulumi.Input['DeploymentSecuritySettingsArgs'] security_settings: SecuritySettings to deploy AzureStackHCI Cluster.
        :param pulumi.Input['StorageArgs'] storage: Storage config to deploy AzureStackHCI Cluster.
        """
        if adou_path is not None:
            pulumi.set(__self__, "adou_path", adou_path)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if domain_fqdn is not None:
            pulumi.set(__self__, "domain_fqdn", domain_fqdn)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if infrastructure_network is not None:
            pulumi.set(__self__, "infrastructure_network", infrastructure_network)
        if naming_prefix is not None:
            pulumi.set(__self__, "naming_prefix", naming_prefix)
        if observability is not None:
            pulumi.set(__self__, "observability", observability)
        if optional_services is not None:
            pulumi.set(__self__, "optional_services", optional_services)
        if physical_nodes is not None:
            pulumi.set(__self__, "physical_nodes", physical_nodes)
        if secrets_location is not None:
            pulumi.set(__self__, "secrets_location", secrets_location)
        if security_settings is not None:
            pulumi.set(__self__, "security_settings", security_settings)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="adouPath")
    def adou_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        """
        return pulumi.get(self, "adou_path")

    @adou_path.setter
    def adou_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adou_path", value)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input['DeploymentClusterArgs']]:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input['DeploymentClusterArgs']]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter(name="domainFqdn")
    def domain_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN to deploy cluster
        """
        return pulumi.get(self, "domain_fqdn")

    @domain_fqdn.setter
    def domain_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_fqdn", value)

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input['HostNetworkArgs']]:
        """
        HostNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input['HostNetworkArgs']]):
        pulumi.set(self, "host_network", value)

    @property
    @pulumi.getter(name="infrastructureNetwork")
    def infrastructure_network(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureNetworkArgs']]]]:
        """
        InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "infrastructure_network")

    @infrastructure_network.setter
    def infrastructure_network(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureNetworkArgs']]]]):
        pulumi.set(self, "infrastructure_network", value)

    @property
    @pulumi.getter(name="namingPrefix")
    def naming_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        naming prefix to deploy cluster.
        """
        return pulumi.get(self, "naming_prefix")

    @naming_prefix.setter
    def naming_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "naming_prefix", value)

    @property
    @pulumi.getter
    def observability(self) -> Optional[pulumi.Input['ObservabilityArgs']]:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "observability")

    @observability.setter
    def observability(self, value: Optional[pulumi.Input['ObservabilityArgs']]):
        pulumi.set(self, "observability", value)

    @property
    @pulumi.getter(name="optionalServices")
    def optional_services(self) -> Optional[pulumi.Input['OptionalServicesArgs']]:
        """
        OptionalServices config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "optional_services")

    @optional_services.setter
    def optional_services(self, value: Optional[pulumi.Input['OptionalServicesArgs']]):
        pulumi.set(self, "optional_services", value)

    @property
    @pulumi.getter(name="physicalNodes")
    def physical_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PhysicalNodesArgs']]]]:
        """
        list of physical nodes config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "physical_nodes")

    @physical_nodes.setter
    def physical_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PhysicalNodesArgs']]]]):
        pulumi.set(self, "physical_nodes", value)

    @property
    @pulumi.getter(name="secretsLocation")
    def secrets_location(self) -> Optional[pulumi.Input[str]]:
        """
        The URI to the keyvault / secret store.
        """
        return pulumi.get(self, "secrets_location")

    @secrets_location.setter
    def secrets_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets_location", value)

    @property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> Optional[pulumi.Input['DeploymentSecuritySettingsArgs']]:
        """
        SecuritySettings to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "security_settings")

    @security_settings.setter
    def security_settings(self, value: Optional[pulumi.Input['DeploymentSecuritySettingsArgs']]):
        pulumi.set(self, "security_settings", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['StorageArgs']]:
        """
        Storage config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['StorageArgs']]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DeploymentSecuritySettingsArgs:
    def __init__(__self__, *,
                 bitlocker_boot_volume: Optional[pulumi.Input[bool]] = None,
                 bitlocker_data_volumes: Optional[pulumi.Input[bool]] = None,
                 credential_guard_enforced: Optional[pulumi.Input[bool]] = None,
                 drift_control_enforced: Optional[pulumi.Input[bool]] = None,
                 drtm_protection: Optional[pulumi.Input[bool]] = None,
                 hvci_protection: Optional[pulumi.Input[bool]] = None,
                 side_channel_mitigation_enforced: Optional[pulumi.Input[bool]] = None,
                 smb_cluster_encryption: Optional[pulumi.Input[bool]] = None,
                 smb_signing_enforced: Optional[pulumi.Input[bool]] = None,
                 wdac_enforced: Optional[pulumi.Input[bool]] = None):
        """
        The SecuritySettings of AzureStackHCI Cluster.
        :param pulumi.Input[bool] bitlocker_boot_volume: When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        :param pulumi.Input[bool] bitlocker_data_volumes: When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        :param pulumi.Input[bool] credential_guard_enforced: When set to true, Credential Guard is enabled.
        :param pulumi.Input[bool] drift_control_enforced: When set to true, the security baseline is re-applied regularly.
        :param pulumi.Input[bool] drtm_protection: By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        :param pulumi.Input[bool] hvci_protection: By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        :param pulumi.Input[bool] side_channel_mitigation_enforced: When set to true, all the side channel mitigations are enabled
        :param pulumi.Input[bool] smb_cluster_encryption: When set to true, cluster east-west traffic is encrypted.
        :param pulumi.Input[bool] smb_signing_enforced: When set to true, the SMB default instance requires sign in for the client and server services.
        :param pulumi.Input[bool] wdac_enforced: WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        if bitlocker_boot_volume is None:
            bitlocker_boot_volume = True
        if bitlocker_boot_volume is not None:
            pulumi.set(__self__, "bitlocker_boot_volume", bitlocker_boot_volume)
        if bitlocker_data_volumes is None:
            bitlocker_data_volumes = True
        if bitlocker_data_volumes is not None:
            pulumi.set(__self__, "bitlocker_data_volumes", bitlocker_data_volumes)
        if credential_guard_enforced is None:
            credential_guard_enforced = False
        if credential_guard_enforced is not None:
            pulumi.set(__self__, "credential_guard_enforced", credential_guard_enforced)
        if drift_control_enforced is None:
            drift_control_enforced = True
        if drift_control_enforced is not None:
            pulumi.set(__self__, "drift_control_enforced", drift_control_enforced)
        if drtm_protection is None:
            drtm_protection = True
        if drtm_protection is not None:
            pulumi.set(__self__, "drtm_protection", drtm_protection)
        if hvci_protection is None:
            hvci_protection = True
        if hvci_protection is not None:
            pulumi.set(__self__, "hvci_protection", hvci_protection)
        if side_channel_mitigation_enforced is None:
            side_channel_mitigation_enforced = True
        if side_channel_mitigation_enforced is not None:
            pulumi.set(__self__, "side_channel_mitigation_enforced", side_channel_mitigation_enforced)
        if smb_cluster_encryption is None:
            smb_cluster_encryption = False
        if smb_cluster_encryption is not None:
            pulumi.set(__self__, "smb_cluster_encryption", smb_cluster_encryption)
        if smb_signing_enforced is None:
            smb_signing_enforced = True
        if smb_signing_enforced is not None:
            pulumi.set(__self__, "smb_signing_enforced", smb_signing_enforced)
        if wdac_enforced is None:
            wdac_enforced = True
        if wdac_enforced is not None:
            pulumi.set(__self__, "wdac_enforced", wdac_enforced)

    @property
    @pulumi.getter(name="bitlockerBootVolume")
    def bitlocker_boot_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        """
        return pulumi.get(self, "bitlocker_boot_volume")

    @bitlocker_boot_volume.setter
    def bitlocker_boot_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bitlocker_boot_volume", value)

    @property
    @pulumi.getter(name="bitlockerDataVolumes")
    def bitlocker_data_volumes(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        """
        return pulumi.get(self, "bitlocker_data_volumes")

    @bitlocker_data_volumes.setter
    def bitlocker_data_volumes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bitlocker_data_volumes", value)

    @property
    @pulumi.getter(name="credentialGuardEnforced")
    def credential_guard_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, Credential Guard is enabled.
        """
        return pulumi.get(self, "credential_guard_enforced")

    @credential_guard_enforced.setter
    def credential_guard_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "credential_guard_enforced", value)

    @property
    @pulumi.getter(name="driftControlEnforced")
    def drift_control_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, the security baseline is re-applied regularly.
        """
        return pulumi.get(self, "drift_control_enforced")

    @drift_control_enforced.setter
    def drift_control_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drift_control_enforced", value)

    @property
    @pulumi.getter(name="drtmProtection")
    def drtm_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        """
        return pulumi.get(self, "drtm_protection")

    @drtm_protection.setter
    def drtm_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drtm_protection", value)

    @property
    @pulumi.getter(name="hvciProtection")
    def hvci_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        """
        return pulumi.get(self, "hvci_protection")

    @hvci_protection.setter
    def hvci_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hvci_protection", value)

    @property
    @pulumi.getter(name="sideChannelMitigationEnforced")
    def side_channel_mitigation_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, all the side channel mitigations are enabled
        """
        return pulumi.get(self, "side_channel_mitigation_enforced")

    @side_channel_mitigation_enforced.setter
    def side_channel_mitigation_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "side_channel_mitigation_enforced", value)

    @property
    @pulumi.getter(name="smbClusterEncryption")
    def smb_cluster_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, cluster east-west traffic is encrypted.
        """
        return pulumi.get(self, "smb_cluster_encryption")

    @smb_cluster_encryption.setter
    def smb_cluster_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "smb_cluster_encryption", value)

    @property
    @pulumi.getter(name="smbSigningEnforced")
    def smb_signing_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, the SMB default instance requires sign in for the client and server services.
        """
        return pulumi.get(self, "smb_signing_enforced")

    @smb_signing_enforced.setter
    def smb_signing_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "smb_signing_enforced", value)

    @property
    @pulumi.getter(name="wdacEnforced")
    def wdac_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "wdac_enforced")

    @wdac_enforced.setter
    def wdac_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wdac_enforced", value)


@pulumi.input_type
class DeviceConfigurationArgs:
    def __init__(__self__, *,
                 nic_details: pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]],
                 device_metadata: Optional[pulumi.Input[str]] = None):
        """
        The device Configuration of a device.
        :param pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]] nic_details: NIC Details of device
        :param pulumi.Input[str] device_metadata: device metadata details.
        """
        pulumi.set(__self__, "nic_details", nic_details)
        if device_metadata is not None:
            pulumi.set(__self__, "device_metadata", device_metadata)

    @property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]]:
        """
        NIC Details of device
        """
        return pulumi.get(self, "nic_details")

    @nic_details.setter
    def nic_details(self, value: pulumi.Input[Sequence[pulumi.Input['NicDetailArgs']]]):
        pulumi.set(self, "nic_details", value)

    @property
    @pulumi.getter(name="deviceMetadata")
    def device_metadata(self) -> Optional[pulumi.Input[str]]:
        """
        device metadata details.
        """
        return pulumi.get(self, "device_metadata")

    @device_metadata.setter
    def device_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_metadata", value)


@pulumi.input_type
class HostNetworkArgs:
    def __init__(__self__, *,
                 enable_storage_auto_ip: Optional[pulumi.Input[bool]] = None,
                 intents: Optional[pulumi.Input[Sequence[pulumi.Input['IntentsArgs']]]] = None,
                 storage_connectivity_switchless: Optional[pulumi.Input[bool]] = None,
                 storage_networks: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworksArgs']]]] = None):
        """
        The HostNetwork of a cluster.
        :param pulumi.Input[bool] enable_storage_auto_ip: Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        :param pulumi.Input[Sequence[pulumi.Input['IntentsArgs']]] intents: The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        :param pulumi.Input[bool] storage_connectivity_switchless: Defines how the storage adapters between nodes are connected either switch or switch less..
        :param pulumi.Input[Sequence[pulumi.Input['StorageNetworksArgs']]] storage_networks: List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        if enable_storage_auto_ip is None:
            enable_storage_auto_ip = False
        if enable_storage_auto_ip is not None:
            pulumi.set(__self__, "enable_storage_auto_ip", enable_storage_auto_ip)
        if intents is not None:
            pulumi.set(__self__, "intents", intents)
        if storage_connectivity_switchless is None:
            storage_connectivity_switchless = False
        if storage_connectivity_switchless is not None:
            pulumi.set(__self__, "storage_connectivity_switchless", storage_connectivity_switchless)
        if storage_networks is not None:
            pulumi.set(__self__, "storage_networks", storage_networks)

    @property
    @pulumi.getter(name="enableStorageAutoIp")
    def enable_storage_auto_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        """
        return pulumi.get(self, "enable_storage_auto_ip")

    @enable_storage_auto_ip.setter
    def enable_storage_auto_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_storage_auto_ip", value)

    @property
    @pulumi.getter
    def intents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntentsArgs']]]]:
        """
        The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        """
        return pulumi.get(self, "intents")

    @intents.setter
    def intents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntentsArgs']]]]):
        pulumi.set(self, "intents", value)

    @property
    @pulumi.getter(name="storageConnectivitySwitchless")
    def storage_connectivity_switchless(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines how the storage adapters between nodes are connected either switch or switch less..
        """
        return pulumi.get(self, "storage_connectivity_switchless")

    @storage_connectivity_switchless.setter
    def storage_connectivity_switchless(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storage_connectivity_switchless", value)

    @property
    @pulumi.getter(name="storageNetworks")
    def storage_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworksArgs']]]]:
        """
        List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage_networks")

    @storage_networks.setter
    def storage_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworksArgs']]]]):
        pulumi.set(self, "storage_networks", value)


@pulumi.input_type
class InfrastructureNetworkArgs:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['IpPoolsArgs']]]] = None,
                 subnet_mask: Optional[pulumi.Input[str]] = None,
                 use_dhcp: Optional[pulumi.Input[bool]] = None):
        """
        The InfrastructureNetwork of a AzureStackHCI Cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: IPv4 address of the DNS servers in your environment.
        :param pulumi.Input[str] gateway: Default gateway that should be used for the provided IP address space.
        :param pulumi.Input[Sequence[pulumi.Input['IpPoolsArgs']]] ip_pools: Range of IP addresses from which addresses are allocated for nodes within a subnet.
        :param pulumi.Input[str] subnet_mask: Subnet mask that matches the provided IP address space.
        :param pulumi.Input[bool] use_dhcp: Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if use_dhcp is not None:
            pulumi.set(__self__, "use_dhcp", use_dhcp)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPv4 address of the DNS servers in your environment.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default gateway that should be used for the provided IP address space.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpPoolsArgs']]]]:
        """
        Range of IP addresses from which addresses are allocated for nodes within a subnet.
        """
        return pulumi.get(self, "ip_pools")

    @ip_pools.setter
    def ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpPoolsArgs']]]]):
        pulumi.set(self, "ip_pools", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet mask that matches the provided IP address space.
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_mask", value)

    @property
    @pulumi.getter(name="useDhcp")
    def use_dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        return pulumi.get(self, "use_dhcp")

    @use_dhcp.setter
    def use_dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_dhcp", value)


@pulumi.input_type
class IntentsArgs:
    def __init__(__self__, *,
                 adapter: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 adapter_property_overrides: Optional[pulumi.Input['AdapterPropertyOverridesArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_adapter_property: Optional[pulumi.Input[bool]] = None,
                 override_qos_policy: Optional[pulumi.Input[bool]] = None,
                 override_virtual_switch_configuration: Optional[pulumi.Input[bool]] = None,
                 qos_policy_overrides: Optional[pulumi.Input['QosPolicyOverridesArgs']] = None,
                 traffic_type: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 virtual_switch_configuration_overrides: Optional[pulumi.Input['VirtualSwitchConfigurationOverridesArgs']] = None):
        """
        The Intents of a cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] adapter: Array of network interfaces used for the network intent.
        :param pulumi.Input['AdapterPropertyOverridesArgs'] adapter_property_overrides: Set Adapter PropertyOverrides for cluster.
        :param pulumi.Input[str] name: Name of the network intent you wish to create.
        :param pulumi.Input[bool] override_adapter_property: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input[bool] override_qos_policy: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input[bool] override_virtual_switch_configuration: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input['QosPolicyOverridesArgs'] qos_policy_overrides: Set QoS PolicyOverrides for cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_type: List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        :param pulumi.Input['VirtualSwitchConfigurationOverridesArgs'] virtual_switch_configuration_overrides: Set virtualSwitch ConfigurationOverrides for cluster.
        """
        if adapter is not None:
            pulumi.set(__self__, "adapter", adapter)
        if adapter_property_overrides is not None:
            pulumi.set(__self__, "adapter_property_overrides", adapter_property_overrides)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_adapter_property is None:
            override_adapter_property = False
        if override_adapter_property is not None:
            pulumi.set(__self__, "override_adapter_property", override_adapter_property)
        if override_qos_policy is None:
            override_qos_policy = False
        if override_qos_policy is not None:
            pulumi.set(__self__, "override_qos_policy", override_qos_policy)
        if override_virtual_switch_configuration is None:
            override_virtual_switch_configuration = False
        if override_virtual_switch_configuration is not None:
            pulumi.set(__self__, "override_virtual_switch_configuration", override_virtual_switch_configuration)
        if qos_policy_overrides is not None:
            pulumi.set(__self__, "qos_policy_overrides", qos_policy_overrides)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if virtual_switch_configuration_overrides is not None:
            pulumi.set(__self__, "virtual_switch_configuration_overrides", virtual_switch_configuration_overrides)

    @property
    @pulumi.getter
    def adapter(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of network interfaces used for the network intent.
        """
        return pulumi.get(self, "adapter")

    @adapter.setter
    def adapter(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "adapter", value)

    @property
    @pulumi.getter(name="adapterPropertyOverrides")
    def adapter_property_overrides(self) -> Optional[pulumi.Input['AdapterPropertyOverridesArgs']]:
        """
        Set Adapter PropertyOverrides for cluster.
        """
        return pulumi.get(self, "adapter_property_overrides")

    @adapter_property_overrides.setter
    def adapter_property_overrides(self, value: Optional[pulumi.Input['AdapterPropertyOverridesArgs']]):
        pulumi.set(self, "adapter_property_overrides", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network intent you wish to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideAdapterProperty")
    def override_adapter_property(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_adapter_property")

    @override_adapter_property.setter
    def override_adapter_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_adapter_property", value)

    @property
    @pulumi.getter(name="overrideQosPolicy")
    def override_qos_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_qos_policy")

    @override_qos_policy.setter
    def override_qos_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_qos_policy", value)

    @property
    @pulumi.getter(name="overrideVirtualSwitchConfiguration")
    def override_virtual_switch_configuration(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_virtual_switch_configuration")

    @override_virtual_switch_configuration.setter
    def override_virtual_switch_configuration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_virtual_switch_configuration", value)

    @property
    @pulumi.getter(name="qosPolicyOverrides")
    def qos_policy_overrides(self) -> Optional[pulumi.Input['QosPolicyOverridesArgs']]:
        """
        Set QoS PolicyOverrides for cluster.
        """
        return pulumi.get(self, "qos_policy_overrides")

    @qos_policy_overrides.setter
    def qos_policy_overrides(self, value: Optional[pulumi.Input['QosPolicyOverridesArgs']]):
        pulumi.set(self, "qos_policy_overrides", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter(name="virtualSwitchConfigurationOverrides")
    def virtual_switch_configuration_overrides(self) -> Optional[pulumi.Input['VirtualSwitchConfigurationOverridesArgs']]:
        """
        Set virtualSwitch ConfigurationOverrides for cluster.
        """
        return pulumi.get(self, "virtual_switch_configuration_overrides")

    @virtual_switch_configuration_overrides.setter
    def virtual_switch_configuration_overrides(self, value: Optional[pulumi.Input['VirtualSwitchConfigurationOverridesArgs']]):
        pulumi.set(self, "virtual_switch_configuration_overrides", value)


@pulumi.input_type
class IpPoolsArgs:
    def __init__(__self__, *,
                 ending_address: Optional[pulumi.Input[str]] = None,
                 starting_address: Optional[pulumi.Input[str]] = None):
        """
        The dnsServers of a device.
        :param pulumi.Input[str] ending_address: Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        :param pulumi.Input[str] starting_address: Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        if ending_address is not None:
            pulumi.set(__self__, "ending_address", ending_address)
        if starting_address is not None:
            pulumi.set(__self__, "starting_address", starting_address)

    @property
    @pulumi.getter(name="endingAddress")
    def ending_address(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "ending_address")

    @ending_address.setter
    def ending_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ending_address", value)

    @property
    @pulumi.getter(name="startingAddress")
    def starting_address(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "starting_address")

    @starting_address.setter
    def starting_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_address", value)


@pulumi.input_type
class NicDetailArgs:
    def __init__(__self__, *,
                 adapter_name: pulumi.Input[str],
                 component_id: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 default_isolation_id: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 driver_version: Optional[pulumi.Input[str]] = None,
                 interface_description: Optional[pulumi.Input[str]] = None,
                 ip4_address: Optional[pulumi.Input[str]] = None,
                 subnet_mask: Optional[pulumi.Input[str]] = None):
        """
        The NIC Detail of a device.
        :param pulumi.Input[str] adapter_name: Adapter Name of NIC
        :param pulumi.Input[str] component_id: Component Id of NIC
        :param pulumi.Input[str] default_gateway: Default Gateway of NIC
        :param pulumi.Input[str] default_isolation_id: Default Isolation of Management NIC
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: DNS Servers for NIC
        :param pulumi.Input[str] driver_version: Driver Version of NIC
        :param pulumi.Input[str] interface_description: Interface Description of NIC
        :param pulumi.Input[str] ip4_address: Subnet Mask of NIC
        :param pulumi.Input[str] subnet_mask: Subnet Mask of NIC
        """
        pulumi.set(__self__, "adapter_name", adapter_name)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if default_isolation_id is not None:
            pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if driver_version is not None:
            pulumi.set(__self__, "driver_version", driver_version)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if ip4_address is not None:
            pulumi.set(__self__, "ip4_address", ip4_address)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> pulumi.Input[str]:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @adapter_name.setter
    def adapter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "adapter_name", value)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[str]]:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_id", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @default_isolation_id.setter
    def default_isolation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_isolation_id", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> Optional[pulumi.Input[str]]:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @driver_version.setter
    def driver_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_version", value)

    @property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_description", value)

    @property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @ip4_address.setter
    def ip4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_address", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_mask", value)


@pulumi.input_type
class ObservabilityArgs:
    def __init__(__self__, *,
                 episodic_data_upload: Optional[pulumi.Input[bool]] = None,
                 eu_location: Optional[pulumi.Input[bool]] = None,
                 streaming_data_client: Optional[pulumi.Input[bool]] = None):
        """
        The Observability of AzureStackHCI Cluster.
        :param pulumi.Input[bool] episodic_data_upload: When set to true, collects log data to facilitate quicker issue resolution.
        :param pulumi.Input[bool] eu_location: Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        :param pulumi.Input[bool] streaming_data_client: Enables telemetry data to be sent to Microsoft
        """
        if episodic_data_upload is None:
            episodic_data_upload = True
        if episodic_data_upload is not None:
            pulumi.set(__self__, "episodic_data_upload", episodic_data_upload)
        if eu_location is None:
            eu_location = False
        if eu_location is not None:
            pulumi.set(__self__, "eu_location", eu_location)
        if streaming_data_client is None:
            streaming_data_client = True
        if streaming_data_client is not None:
            pulumi.set(__self__, "streaming_data_client", streaming_data_client)

    @property
    @pulumi.getter(name="episodicDataUpload")
    def episodic_data_upload(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, collects log data to facilitate quicker issue resolution.
        """
        return pulumi.get(self, "episodic_data_upload")

    @episodic_data_upload.setter
    def episodic_data_upload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "episodic_data_upload", value)

    @property
    @pulumi.getter(name="euLocation")
    def eu_location(self) -> Optional[pulumi.Input[bool]]:
        """
        Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        """
        return pulumi.get(self, "eu_location")

    @eu_location.setter
    def eu_location(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eu_location", value)

    @property
    @pulumi.getter(name="streamingDataClient")
    def streaming_data_client(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables telemetry data to be sent to Microsoft
        """
        return pulumi.get(self, "streaming_data_client")

    @streaming_data_client.setter
    def streaming_data_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "streaming_data_client", value)


@pulumi.input_type
class OptionalServicesArgs:
    def __init__(__self__, *,
                 custom_location: Optional[pulumi.Input[str]] = None):
        """
        The OptionalServices of AzureStackHCI Cluster.
        :param pulumi.Input[str] custom_location: The name of custom location.
        """
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional[pulumi.Input[str]]:
        """
        The name of custom location.
        """
        return pulumi.get(self, "custom_location")

    @custom_location.setter
    def custom_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_location", value)


@pulumi.input_type
class PhysicalNodesArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The PhysicalNodes of a cluster.
        :param pulumi.Input[str] ipv4_address: The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        :param pulumi.Input[str] name: NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class QosPolicyOverridesArgs:
    def __init__(__self__, *,
                 bandwidth_percentage_smb: Optional[pulumi.Input[str]] = None,
                 priority_value8021_action_cluster: Optional[pulumi.Input[str]] = None,
                 priority_value8021_action_smb: Optional[pulumi.Input[str]] = None):
        """
        The QoSPolicyOverrides of a cluster.
        :param pulumi.Input[str] bandwidth_percentage_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input[str] priority_value8021_action_cluster: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param pulumi.Input[str] priority_value8021_action_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        if bandwidth_percentage_smb is not None:
            pulumi.set(__self__, "bandwidth_percentage_smb", bandwidth_percentage_smb)
        if priority_value8021_action_cluster is not None:
            pulumi.set(__self__, "priority_value8021_action_cluster", priority_value8021_action_cluster)
        if priority_value8021_action_smb is not None:
            pulumi.set(__self__, "priority_value8021_action_smb", priority_value8021_action_smb)

    @property
    @pulumi.getter(name="bandwidthPercentageSMB")
    def bandwidth_percentage_smb(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "bandwidth_percentage_smb")

    @bandwidth_percentage_smb.setter
    def bandwidth_percentage_smb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_percentage_smb", value)

    @property
    @pulumi.getter(name="priorityValue8021ActionCluster")
    def priority_value8021_action_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_cluster")

    @priority_value8021_action_cluster.setter
    def priority_value8021_action_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_value8021_action_cluster", value)

    @property
    @pulumi.getter(name="priorityValue8021ActionSMB")
    def priority_value8021_action_smb(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_smb")

    @priority_value8021_action_smb.setter
    def priority_value8021_action_smb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_value8021_action_smb", value)


@pulumi.input_type
class ScaleUnitsArgs:
    def __init__(__self__, *,
                 deployment_data: pulumi.Input['DeploymentDataArgs']):
        """
        Scale units will contains list of deployment data
        :param pulumi.Input['DeploymentDataArgs'] deployment_data: Deployment Data to deploy AzureStackHCI Cluster.
        """
        pulumi.set(__self__, "deployment_data", deployment_data)

    @property
    @pulumi.getter(name="deploymentData")
    def deployment_data(self) -> pulumi.Input['DeploymentDataArgs']:
        """
        Deployment Data to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "deployment_data")

    @deployment_data.setter
    def deployment_data(self, value: pulumi.Input['DeploymentDataArgs']):
        pulumi.set(self, "deployment_data", value)


@pulumi.input_type
class ServiceConfigurationArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[float],
                 service_name: pulumi.Input[Union[str, 'ServiceName']]):
        """
        Service configuration details
        :param pulumi.Input[float] port: The port on which service is enabled.
        :param pulumi.Input[Union[str, 'ServiceName']] service_name: Name of the service.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        The port on which service is enabled.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[Union[str, 'ServiceName']]:
        """
        Name of the service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[Union[str, 'ServiceName']]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class SoftwareAssurancePropertiesArgs:
    def __init__(__self__, *,
                 software_assurance_intent: Optional[pulumi.Input[Union[str, 'SoftwareAssuranceIntent']]] = None):
        """
        Software Assurance properties of the cluster.
        :param pulumi.Input[Union[str, 'SoftwareAssuranceIntent']] software_assurance_intent: Customer Intent for Software Assurance Benefit.
        """
        if software_assurance_intent is not None:
            pulumi.set(__self__, "software_assurance_intent", software_assurance_intent)

    @property
    @pulumi.getter(name="softwareAssuranceIntent")
    def software_assurance_intent(self) -> Optional[pulumi.Input[Union[str, 'SoftwareAssuranceIntent']]]:
        """
        Customer Intent for Software Assurance Benefit.
        """
        return pulumi.get(self, "software_assurance_intent")

    @software_assurance_intent.setter
    def software_assurance_intent(self, value: Optional[pulumi.Input[Union[str, 'SoftwareAssuranceIntent']]]):
        pulumi.set(self, "software_assurance_intent", value)


@pulumi.input_type
class StepArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 end_time_utc: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 last_updated_time_utc: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_time_utc: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['StepArgs']]]] = None):
        """
        Progress representation of the update run steps.
        :param pulumi.Input[str] description: More detailed description of the step.
        :param pulumi.Input[str] end_time_utc: When the step reached a terminal state.
        :param pulumi.Input[str] error_message: Error message, specified if the step is in a failed state.
        :param pulumi.Input[str] last_updated_time_utc: Completion time of this step or the last completed sub-step.
        :param pulumi.Input[str] name: Name of the step.
        :param pulumi.Input[str] start_time_utc: When the step started, or empty if it has not started executing.
        :param pulumi.Input[str] status: Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        :param pulumi.Input[Sequence[pulumi.Input['StepArgs']]] steps: Recursive model for child steps of this step.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time_utc is not None:
            pulumi.set(__self__, "end_time_utc", end_time_utc)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if last_updated_time_utc is not None:
            pulumi.set(__self__, "last_updated_time_utc", last_updated_time_utc)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time_utc is not None:
            pulumi.set(__self__, "start_time_utc", start_time_utc)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        More detailed description of the step.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        When the step reached a terminal state.
        """
        return pulumi.get(self, "end_time_utc")

    @end_time_utc.setter
    def end_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_utc", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        Error message, specified if the step is in a failed state.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="lastUpdatedTimeUtc")
    def last_updated_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Completion time of this step or the last completed sub-step.
        """
        return pulumi.get(self, "last_updated_time_utc")

    @last_updated_time_utc.setter
    def last_updated_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_time_utc", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> Optional[pulumi.Input[str]]:
        """
        When the step started, or empty if it has not started executing.
        """
        return pulumi.get(self, "start_time_utc")

    @start_time_utc.setter
    def start_time_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_utc", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StepArgs']]]]:
        """
        Recursive model for child steps of this step.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StepArgs']]]]):
        pulumi.set(self, "steps", value)


@pulumi.input_type
class StorageNetworksArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 network_adapter_name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None):
        """
        The StorageNetworks of a cluster.
        :param pulumi.Input[str] name: Name of the storage network.
        :param pulumi.Input[str] network_adapter_name: Name of the storage network adapter.
        :param pulumi.Input[str] vlan_id: ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_adapter_name is not None:
            pulumi.set(__self__, "network_adapter_name", network_adapter_name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the storage network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkAdapterName")
    def network_adapter_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the storage network adapter.
        """
        return pulumi.get(self, "network_adapter_name")

    @network_adapter_name.setter
    def network_adapter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_adapter_name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class StorageArgs:
    def __init__(__self__, *,
                 configuration_mode: Optional[pulumi.Input[str]] = None):
        """
        The Storage config of AzureStackHCI Cluster.
        :param pulumi.Input[str] configuration_mode: By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        if configuration_mode is None:
            configuration_mode = 'Express'
        if configuration_mode is not None:
            pulumi.set(__self__, "configuration_mode", configuration_mode)

    @property
    @pulumi.getter(name="configurationMode")
    def configuration_mode(self) -> Optional[pulumi.Input[str]]:
        """
        By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        return pulumi.get(self, "configuration_mode")

    @configuration_mode.setter
    def configuration_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_mode", value)


@pulumi.input_type
class UpdatePrerequisiteArgs:
    def __init__(__self__, *,
                 package_name: Optional[pulumi.Input[str]] = None,
                 update_type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
        :param pulumi.Input[str] package_name: Friendly name of the prerequisite.
        :param pulumi.Input[str] update_type: Updatable component type.
        :param pulumi.Input[str] version: Version of the prerequisite.
        """
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the prerequisite.
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[str]]:
        """
        Updatable component type.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the prerequisite.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class VirtualSwitchConfigurationOverridesArgs:
    def __init__(__self__, *,
                 enable_iov: Optional[pulumi.Input[str]] = None,
                 load_balancing_algorithm: Optional[pulumi.Input[str]] = None):
        """
        The VirtualSwitchConfigurationOverrides of a cluster.
        :param pulumi.Input[str] enable_iov: Enable IoV for Virtual Switch
        :param pulumi.Input[str] load_balancing_algorithm: Load Balancing Algorithm for Virtual Switch
        """
        if enable_iov is not None:
            pulumi.set(__self__, "enable_iov", enable_iov)
        if load_balancing_algorithm is not None:
            pulumi.set(__self__, "load_balancing_algorithm", load_balancing_algorithm)

    @property
    @pulumi.getter(name="enableIov")
    def enable_iov(self) -> Optional[pulumi.Input[str]]:
        """
        Enable IoV for Virtual Switch
        """
        return pulumi.get(self, "enable_iov")

    @enable_iov.setter
    def enable_iov(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_iov", value)

    @property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Load Balancing Algorithm for Virtual Switch
        """
        return pulumi.get(self, "load_balancing_algorithm")

    @load_balancing_algorithm.setter
    def load_balancing_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_algorithm", value)


