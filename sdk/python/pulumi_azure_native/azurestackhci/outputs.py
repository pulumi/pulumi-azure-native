# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdapterPropertyOverridesResponse',
    'ArcConnectivityPropertiesResponse',
    'ClusterDesiredPropertiesResponse',
    'ClusterNodeResponse',
    'ClusterReportedPropertiesResponse',
    'DefaultExtensionDetailsResponse',
    'DeploymentClusterResponse',
    'DeploymentConfigurationResponse',
    'DeploymentDataResponse',
    'DeploymentSecuritySettingsResponse',
    'DeploymentStepResponse',
    'DeviceConfigurationResponse',
    'EceActionStatusResponse',
    'EceDeploymentSecretsResponse',
    'EceReportedPropertiesResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'ExtendedLocationResponse',
    'ExtensionInstanceViewResponse',
    'ExtensionInstanceViewResponseStatus',
    'ExtensionProfileResponse',
    'ExtensionResponse',
    'GalleryImageIdentifierResponse',
    'GalleryImageStatusDownloadStatusResponse',
    'GalleryImageStatusProvisioningStatusResponse',
    'GalleryImageStatusResponse',
    'GalleryImageVersionResponse',
    'GalleryImageVersionStorageProfileResponse',
    'GalleryOSDiskImageResponse',
    'GuestAgentInstallStatusResponse',
    'GuestAgentProfileResponse',
    'GuestCredentialResponse',
    'HciCollectLogJobPropertiesResponse',
    'HciEdgeDevicePropertiesResponse',
    'HciNetworkProfileResponse',
    'HciNicDetailResponse',
    'HciOsProfileResponse',
    'HciRemoteSupportJobPropertiesResponse',
    'HciReportedPropertiesResponse',
    'HostNetworkResponse',
    'HttpProxyConfigurationResponse',
    'IPConfigurationPropertiesResponse',
    'IPConfigurationResponse',
    'IPPoolInfoResponse',
    'IPPoolResponse',
    'IdentityResponse',
    'ImageArmReferenceResponse',
    'InfrastructureNetworkResponse',
    'InstanceViewStatusResponse',
    'IntentsResponse',
    'InterfaceDNSSettingsResponse',
    'IpPoolsResponse',
    'IsolatedVmAttestationConfigurationResponse',
    'LogCollectionErrorResponse',
    'LogCollectionJobSessionResponse',
    'LogCollectionPropertiesResponse',
    'LogCollectionReportedPropertiesResponse',
    'LogCollectionSessionResponse',
    'LogicalNetworkArmReferenceResponse',
    'LogicalNetworkPropertiesDhcpOptionsResponse',
    'LogicalNetworkStatusProvisioningStatusResponse',
    'LogicalNetworkStatusResponse',
    'MachineExtensionInstanceViewResponseStatus',
    'MachineExtensionPropertiesResponseInstanceView',
    'ManagedServiceIdentityResponse',
    'MarketplaceGalleryImageStatusDownloadStatusResponse',
    'MarketplaceGalleryImageStatusProvisioningStatusResponse',
    'MarketplaceGalleryImageStatusResponse',
    'NetworkControllerResponse',
    'NetworkInterfaceArmReferenceResponse',
    'NetworkInterfaceStatusProvisioningStatusResponse',
    'NetworkInterfaceStatusResponse',
    'NetworkSecurityGroupArmReferenceResponse',
    'NetworkSecurityGroupStatusProvisioningStatusResponse',
    'NetworkSecurityGroupStatusResponse',
    'NicDetailResponse',
    'ObservabilityResponse',
    'OptionalServicesResponse',
    'PerNodeExtensionStateResponse',
    'PerNodeRemoteSupportSessionResponse',
    'PerNodeStateResponse',
    'PhysicalNodesResponse',
    'QosPolicyOverridesResponse',
    'RemoteSupportJobNodeSettingsResponse',
    'RemoteSupportJobReportedPropertiesResponse',
    'RemoteSupportNodeSettingsResponse',
    'RemoteSupportPropertiesResponse',
    'RemoteSupportSessionResponse',
    'RouteResponse',
    'RouteTableResponse',
    'SbeCredentialsResponse',
    'SbeDeploymentInfoResponse',
    'SbeDeploymentPackageInfoResponse',
    'SbePartnerInfoResponse',
    'SbePartnerPropertiesResponse',
    'ScaleUnitsResponse',
    'SdnIntegrationResponse',
    'SecurityComplianceStatusResponse',
    'ServiceConfigurationResponse',
    'SoftwareAssurancePropertiesResponse',
    'SshConfigurationResponse',
    'SshPublicKeyResponse',
    'StepResponse',
    'StorageAdapterIPInfoResponse',
    'StorageContainerStatusProvisioningStatusResponse',
    'StorageContainerStatusResponse',
    'StorageNetworksResponse',
    'StorageResponse',
    'SubnetIpConfigurationReferenceResponse',
    'SubnetResponse',
    'SwitchDetailResponse',
    'SwitchExtensionResponse',
    'SystemDataResponse',
    'UpdatePrerequisiteResponse',
    'UserAssignedIdentityResponse',
    'VMDiskSecurityProfileResponse',
    'VirtualHardDiskArmReferenceResponse',
    'VirtualHardDiskDownloadStatusResponse',
    'VirtualHardDiskStatusProvisioningStatusResponse',
    'VirtualHardDiskStatusResponse',
    'VirtualHardDiskUploadStatusResponse',
    'VirtualMachineConfigAgentInstanceViewResponse',
    'VirtualMachineInstanceManagedDiskParametersResponse',
    'VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse',
    'VirtualMachineInstancePropertiesHardwareProfileResponse',
    'VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse',
    'VirtualMachineInstancePropertiesNetworkProfileResponse',
    'VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse',
    'VirtualMachineInstancePropertiesOsProfileResponse',
    'VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse',
    'VirtualMachineInstancePropertiesSecurityProfileResponse',
    'VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse',
    'VirtualMachineInstancePropertiesStorageProfileOsDiskResponse',
    'VirtualMachineInstancePropertiesStorageProfileResponse',
    'VirtualMachineInstanceStatusProvisioningStatusResponse',
    'VirtualMachineInstanceStatusResponse',
    'VirtualMachineInstanceViewResponse',
    'VirtualMachinePropertiesResponseDataDisks',
    'VirtualMachinePropertiesResponseDynamicMemoryConfig',
    'VirtualMachinePropertiesResponseHardwareProfile',
    'VirtualMachinePropertiesResponseImageReference',
    'VirtualMachinePropertiesResponseLinuxConfiguration',
    'VirtualMachinePropertiesResponseNetworkInterfaces',
    'VirtualMachinePropertiesResponseNetworkProfile',
    'VirtualMachinePropertiesResponseOsDisk',
    'VirtualMachinePropertiesResponseOsProfile',
    'VirtualMachinePropertiesResponsePublicKeys',
    'VirtualMachinePropertiesResponsePublicKeysPublicKeys',
    'VirtualMachinePropertiesResponseSecurityProfile',
    'VirtualMachinePropertiesResponseSsh',
    'VirtualMachinePropertiesResponseSshSsh',
    'VirtualMachinePropertiesResponseStorageProfile',
    'VirtualMachinePropertiesResponseUefiSettings',
    'VirtualMachinePropertiesResponseWindowsConfiguration',
    'VirtualMachineStatusResponse',
    'VirtualMachineStatusResponseProvisioningStatus',
    'VirtualNetworkPropertiesResponseDhcpOptions',
    'VirtualNetworkPropertiesResponseIpConfigurationReferences',
    'VirtualNetworkPropertiesResponseRouteTable',
    'VirtualNetworkPropertiesResponseRoutes',
    'VirtualNetworkPropertiesResponseSubnets',
    'VirtualNetworkStatusResponse',
    'VirtualNetworkStatusResponseProvisioningStatus',
    'VirtualSwitchConfigurationOverridesResponse',
    'VmImageRepositoryCredentialsResponse',
]

@pulumi.output_type
class AdapterPropertyOverridesResponse(dict):
    """
    The AdapterPropertyOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jumboPacket":
            suggest = "jumbo_packet"
        elif key == "networkDirect":
            suggest = "network_direct"
        elif key == "networkDirectTechnology":
            suggest = "network_direct_technology"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdapterPropertyOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdapterPropertyOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdapterPropertyOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jumbo_packet: _builtins.str,
                 network_direct: _builtins.str,
                 network_direct_technology: _builtins.str):
        """
        The AdapterPropertyOverrides of a cluster.
        :param _builtins.str jumbo_packet: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param _builtins.str network_direct: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param _builtins.str network_direct_technology: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        pulumi.set(__self__, "jumbo_packet", jumbo_packet)
        pulumi.set(__self__, "network_direct", network_direct)
        pulumi.set(__self__, "network_direct_technology", network_direct_technology)

    @_builtins.property
    @pulumi.getter(name="jumboPacket")
    def jumbo_packet(self) -> _builtins.str:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "jumbo_packet")

    @_builtins.property
    @pulumi.getter(name="networkDirect")
    def network_direct(self) -> _builtins.str:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "network_direct")

    @_builtins.property
    @pulumi.getter(name="networkDirectTechnology")
    def network_direct_technology(self) -> _builtins.str:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        return pulumi.get(self, "network_direct_technology")


@pulumi.output_type
class ArcConnectivityPropertiesResponse(dict):
    """
    Connectivity related configuration required by arc server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceConfigurations":
            suggest = "service_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArcConnectivityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArcConnectivityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArcConnectivityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None,
                 service_configurations: Optional[Sequence['outputs.ServiceConfigurationResponse']] = None):
        """
        Connectivity related configuration required by arc server.
        :param _builtins.bool enabled: True indicates ARC connectivity is enabled
        :param Sequence['ServiceConfigurationResponse'] service_configurations: Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_configurations is not None:
            pulumi.set(__self__, "service_configurations", service_configurations)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        True indicates ARC connectivity is enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="serviceConfigurations")
    def service_configurations(self) -> Optional[Sequence['outputs.ServiceConfigurationResponse']]:
        """
        Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
        """
        return pulumi.get(self, "service_configurations")


@pulumi.output_type
class ClusterDesiredPropertiesResponse(dict):
    """
    Desired properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diagnosticLevel":
            suggest = "diagnostic_level"
        elif key == "windowsServerSubscription":
            suggest = "windows_server_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterDesiredPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterDesiredPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterDesiredPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 diagnostic_level: Optional[_builtins.str] = None,
                 windows_server_subscription: Optional[_builtins.str] = None):
        """
        Desired properties of the cluster.
        :param _builtins.str diagnostic_level: Desired level of diagnostic data emitted by the cluster.
        :param _builtins.str windows_server_subscription: Desired state of Windows Server Subscription.
        """
        if diagnostic_level is not None:
            pulumi.set(__self__, "diagnostic_level", diagnostic_level)
        if windows_server_subscription is not None:
            pulumi.set(__self__, "windows_server_subscription", windows_server_subscription)

    @_builtins.property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[_builtins.str]:
        """
        Desired level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")

    @_builtins.property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> Optional[_builtins.str]:
        """
        Desired state of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")


@pulumi.output_type
class ClusterNodeResponse(dict):
    """
    Cluster node details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreCount":
            suggest = "core_count"
        elif key == "ehcResourceId":
            suggest = "ehc_resource_id"
        elif key == "lastLicensingTimestamp":
            suggest = "last_licensing_timestamp"
        elif key == "memoryInGiB":
            suggest = "memory_in_gi_b"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "oemActivation":
            suggest = "oem_activation"
        elif key == "osDisplayVersion":
            suggest = "os_display_version"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "windowsServerSubscription":
            suggest = "windows_server_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_count: _builtins.float,
                 ehc_resource_id: _builtins.str,
                 id: _builtins.float,
                 last_licensing_timestamp: _builtins.str,
                 manufacturer: _builtins.str,
                 memory_in_gi_b: _builtins.float,
                 model: _builtins.str,
                 name: _builtins.str,
                 node_type: _builtins.str,
                 oem_activation: _builtins.str,
                 os_display_version: _builtins.str,
                 os_name: _builtins.str,
                 os_version: _builtins.str,
                 serial_number: _builtins.str,
                 windows_server_subscription: _builtins.str):
        """
        Cluster node details.
        :param _builtins.float core_count: Number of physical cores on the cluster node.
        :param _builtins.str ehc_resource_id: Edge Hardware Center Resource Id
        :param _builtins.float id: Id of the node in the cluster.
        :param _builtins.str last_licensing_timestamp: Most recent licensing timestamp.
        :param _builtins.str manufacturer: Manufacturer of the cluster node hardware.
        :param _builtins.float memory_in_gi_b: Total available memory on the cluster node (in GiB).
        :param _builtins.str model: Model name of the cluster node hardware.
        :param _builtins.str name: Name of the cluster node.
        :param _builtins.str node_type: Type of the cluster node hardware.
        :param _builtins.str oem_activation: OEM activation status of the node.
        :param _builtins.str os_display_version: Display version of the operating system running on the cluster node.
        :param _builtins.str os_name: Operating system running on the cluster node.
        :param _builtins.str os_version: Version of the operating system running on the cluster node.
        :param _builtins.str serial_number: Immutable id of the cluster node.
        :param _builtins.str windows_server_subscription: State of Windows Server Subscription.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "ehc_resource_id", ehc_resource_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_licensing_timestamp", last_licensing_timestamp)
        pulumi.set(__self__, "manufacturer", manufacturer)
        pulumi.set(__self__, "memory_in_gi_b", memory_in_gi_b)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "oem_activation", oem_activation)
        pulumi.set(__self__, "os_display_version", os_display_version)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "windows_server_subscription", windows_server_subscription)

    @_builtins.property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> _builtins.float:
        """
        Number of physical cores on the cluster node.
        """
        return pulumi.get(self, "core_count")

    @_builtins.property
    @pulumi.getter(name="ehcResourceId")
    def ehc_resource_id(self) -> _builtins.str:
        """
        Edge Hardware Center Resource Id
        """
        return pulumi.get(self, "ehc_resource_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        """
        Id of the node in the cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastLicensingTimestamp")
    def last_licensing_timestamp(self) -> _builtins.str:
        """
        Most recent licensing timestamp.
        """
        return pulumi.get(self, "last_licensing_timestamp")

    @_builtins.property
    @pulumi.getter
    def manufacturer(self) -> _builtins.str:
        """
        Manufacturer of the cluster node hardware.
        """
        return pulumi.get(self, "manufacturer")

    @_builtins.property
    @pulumi.getter(name="memoryInGiB")
    def memory_in_gi_b(self) -> _builtins.float:
        """
        Total available memory on the cluster node (in GiB).
        """
        return pulumi.get(self, "memory_in_gi_b")

    @_builtins.property
    @pulumi.getter
    def model(self) -> _builtins.str:
        """
        Model name of the cluster node hardware.
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the cluster node.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> _builtins.str:
        """
        Type of the cluster node hardware.
        """
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter(name="oemActivation")
    def oem_activation(self) -> _builtins.str:
        """
        OEM activation status of the node.
        """
        return pulumi.get(self, "oem_activation")

    @_builtins.property
    @pulumi.getter(name="osDisplayVersion")
    def os_display_version(self) -> _builtins.str:
        """
        Display version of the operating system running on the cluster node.
        """
        return pulumi.get(self, "os_display_version")

    @_builtins.property
    @pulumi.getter(name="osName")
    def os_name(self) -> _builtins.str:
        """
        Operating system running on the cluster node.
        """
        return pulumi.get(self, "os_name")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        Version of the operating system running on the cluster node.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        Immutable id of the cluster node.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> _builtins.str:
        """
        State of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")


@pulumi.output_type
class ClusterReportedPropertiesResponse(dict):
    """
    Properties reported by cluster agent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "clusterVersion":
            suggest = "cluster_version"
        elif key == "imdsAttestation":
            suggest = "imds_attestation"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "oemActivation":
            suggest = "oem_activation"
        elif key == "supportedCapabilities":
            suggest = "supported_capabilities"
        elif key == "diagnosticLevel":
            suggest = "diagnostic_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 cluster_type: _builtins.str,
                 cluster_version: _builtins.str,
                 imds_attestation: _builtins.str,
                 last_updated: _builtins.str,
                 manufacturer: _builtins.str,
                 nodes: Sequence['outputs.ClusterNodeResponse'],
                 oem_activation: _builtins.str,
                 supported_capabilities: Sequence[_builtins.str],
                 diagnostic_level: Optional[_builtins.str] = None):
        """
        Properties reported by cluster agent.
        :param _builtins.str cluster_id: Unique id generated by the on-prem cluster.
        :param _builtins.str cluster_name: Name of the on-prem cluster connected to this resource.
        :param _builtins.str cluster_type: The node type of all the nodes of the cluster.
        :param _builtins.str cluster_version: Version of the cluster software.
        :param _builtins.str imds_attestation: IMDS attestation status of the cluster.
        :param _builtins.str last_updated: Last time the cluster reported the data.
        :param _builtins.str manufacturer: The manufacturer of all the nodes of the cluster.
        :param Sequence['ClusterNodeResponse'] nodes: List of nodes reported by the cluster.
        :param _builtins.str oem_activation: OEM activation status of the cluster.
        :param Sequence[_builtins.str] supported_capabilities: Capabilities supported by the cluster.
        :param _builtins.str diagnostic_level: Level of diagnostic data emitted by the cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "imds_attestation", imds_attestation)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "manufacturer", manufacturer)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "oem_activation", oem_activation)
        pulumi.set(__self__, "supported_capabilities", supported_capabilities)
        if diagnostic_level is not None:
            pulumi.set(__self__, "diagnostic_level", diagnostic_level)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        Unique id generated by the on-prem cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        Name of the on-prem cluster connected to this resource.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The node type of all the nodes of the cluster.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> _builtins.str:
        """
        Version of the cluster software.
        """
        return pulumi.get(self, "cluster_version")

    @_builtins.property
    @pulumi.getter(name="imdsAttestation")
    def imds_attestation(self) -> _builtins.str:
        """
        IMDS attestation status of the cluster.
        """
        return pulumi.get(self, "imds_attestation")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        """
        Last time the cluster reported the data.
        """
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def manufacturer(self) -> _builtins.str:
        """
        The manufacturer of all the nodes of the cluster.
        """
        return pulumi.get(self, "manufacturer")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.ClusterNodeResponse']:
        """
        List of nodes reported by the cluster.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="oemActivation")
    def oem_activation(self) -> _builtins.str:
        """
        OEM activation status of the cluster.
        """
        return pulumi.get(self, "oem_activation")

    @_builtins.property
    @pulumi.getter(name="supportedCapabilities")
    def supported_capabilities(self) -> Sequence[_builtins.str]:
        """
        Capabilities supported by the cluster.
        """
        return pulumi.get(self, "supported_capabilities")

    @_builtins.property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[_builtins.str]:
        """
        Level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")


@pulumi.output_type
class DefaultExtensionDetailsResponse(dict):
    """
    Properties for a particular default extension category.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consentTime":
            suggest = "consent_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultExtensionDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultExtensionDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultExtensionDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: _builtins.str,
                 consent_time: _builtins.str):
        """
        Properties for a particular default extension category.
        :param _builtins.str category: Default extension category
        :param _builtins.str consent_time: Consent time for extension category
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "consent_time", consent_time)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Default extension category
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="consentTime")
    def consent_time(self) -> _builtins.str:
        """
        Consent time for extension category
        """
        return pulumi.get(self, "consent_time")


@pulumi.output_type
class DeploymentClusterResponse(dict):
    """
    AzureStackHCI Cluster deployment properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureServiceEndpoint":
            suggest = "azure_service_endpoint"
        elif key == "cloudAccountName":
            suggest = "cloud_account_name"
        elif key == "witnessPath":
            suggest = "witness_path"
        elif key == "witnessType":
            suggest = "witness_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_service_endpoint: Optional[_builtins.str] = None,
                 cloud_account_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 witness_path: Optional[_builtins.str] = None,
                 witness_type: Optional[_builtins.str] = None):
        """
        AzureStackHCI Cluster deployment properties.
        :param _builtins.str azure_service_endpoint: For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        :param _builtins.str cloud_account_name: Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        :param _builtins.str name: The cluster name provided when preparing Active Directory.
        :param _builtins.str witness_path: Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        :param _builtins.str witness_type: Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        if azure_service_endpoint is not None:
            pulumi.set(__self__, "azure_service_endpoint", azure_service_endpoint)
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if witness_path is not None:
            pulumi.set(__self__, "witness_path", witness_path)
        if witness_type is not None:
            pulumi.set(__self__, "witness_type", witness_type)

    @_builtins.property
    @pulumi.getter(name="azureServiceEndpoint")
    def azure_service_endpoint(self) -> Optional[_builtins.str]:
        """
        For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        """
        return pulumi.get(self, "azure_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[_builtins.str]:
        """
        Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "cloud_account_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The cluster name provided when preparing Active Directory.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="witnessPath")
    def witness_path(self) -> Optional[_builtins.str]:
        """
        Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "witness_path")

    @_builtins.property
    @pulumi.getter(name="witnessType")
    def witness_type(self) -> Optional[_builtins.str]:
        """
        Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        return pulumi.get(self, "witness_type")


@pulumi.output_type
class DeploymentConfigurationResponse(dict):
    """
    Deployment Configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleUnits":
            suggest = "scale_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scale_units: Sequence['outputs.ScaleUnitsResponse'],
                 version: Optional[_builtins.str] = None):
        """
        Deployment Configuration
        :param Sequence['ScaleUnitsResponse'] scale_units: Scale units will contains list of deployment data
        :param _builtins.str version: deployment template version 
        """
        pulumi.set(__self__, "scale_units", scale_units)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="scaleUnits")
    def scale_units(self) -> Sequence['outputs.ScaleUnitsResponse']:
        """
        Scale units will contains list of deployment data
        """
        return pulumi.get(self, "scale_units")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        deployment template version 
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentDataResponse(dict):
    """
    The Deployment data of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adouPath":
            suggest = "adou_path"
        elif key == "domainFqdn":
            suggest = "domain_fqdn"
        elif key == "hostNetwork":
            suggest = "host_network"
        elif key == "infrastructureNetwork":
            suggest = "infrastructure_network"
        elif key == "namingPrefix":
            suggest = "naming_prefix"
        elif key == "optionalServices":
            suggest = "optional_services"
        elif key == "physicalNodes":
            suggest = "physical_nodes"
        elif key == "sdnIntegration":
            suggest = "sdn_integration"
        elif key == "secretsLocation":
            suggest = "secrets_location"
        elif key == "securitySettings":
            suggest = "security_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adou_path: Optional[_builtins.str] = None,
                 cluster: Optional['outputs.DeploymentClusterResponse'] = None,
                 domain_fqdn: Optional[_builtins.str] = None,
                 host_network: Optional['outputs.HostNetworkResponse'] = None,
                 infrastructure_network: Optional[Sequence['outputs.InfrastructureNetworkResponse']] = None,
                 naming_prefix: Optional[_builtins.str] = None,
                 observability: Optional['outputs.ObservabilityResponse'] = None,
                 optional_services: Optional['outputs.OptionalServicesResponse'] = None,
                 physical_nodes: Optional[Sequence['outputs.PhysicalNodesResponse']] = None,
                 sdn_integration: Optional['outputs.SdnIntegrationResponse'] = None,
                 secrets: Optional[Sequence['outputs.EceDeploymentSecretsResponse']] = None,
                 secrets_location: Optional[_builtins.str] = None,
                 security_settings: Optional['outputs.DeploymentSecuritySettingsResponse'] = None,
                 storage: Optional['outputs.StorageResponse'] = None):
        """
        The Deployment data of AzureStackHCI Cluster.
        :param _builtins.str adou_path: The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        :param 'DeploymentClusterResponse' cluster: Observability config to deploy AzureStackHCI Cluster.
        :param _builtins.str domain_fqdn: FQDN to deploy cluster
        :param 'HostNetworkResponse' host_network: HostNetwork config to deploy AzureStackHCI Cluster.
        :param Sequence['InfrastructureNetworkResponse'] infrastructure_network: InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        :param _builtins.str naming_prefix: naming prefix to deploy cluster.
        :param 'ObservabilityResponse' observability: Observability config to deploy AzureStackHCI Cluster.
        :param 'OptionalServicesResponse' optional_services: OptionalServices config to deploy AzureStackHCI Cluster.
        :param Sequence['PhysicalNodesResponse'] physical_nodes: list of physical nodes config to deploy AzureStackHCI Cluster.
        :param 'SdnIntegrationResponse' sdn_integration: SDN Integration config to deploy AzureStackHCI Cluster.
        :param Sequence['EceDeploymentSecretsResponse'] secrets: secrets used for cloud deployment.
        :param _builtins.str secrets_location: Azure keyvault endpoint. This property is deprecated from 2023-12-01-preview. Please use secrets property instead.
        :param 'DeploymentSecuritySettingsResponse' security_settings: SecuritySettings to deploy AzureStackHCI Cluster.
        :param 'StorageResponse' storage: Storage config to deploy AzureStackHCI Cluster.
        """
        if adou_path is not None:
            pulumi.set(__self__, "adou_path", adou_path)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if domain_fqdn is not None:
            pulumi.set(__self__, "domain_fqdn", domain_fqdn)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if infrastructure_network is not None:
            pulumi.set(__self__, "infrastructure_network", infrastructure_network)
        if naming_prefix is not None:
            pulumi.set(__self__, "naming_prefix", naming_prefix)
        if observability is not None:
            pulumi.set(__self__, "observability", observability)
        if optional_services is not None:
            pulumi.set(__self__, "optional_services", optional_services)
        if physical_nodes is not None:
            pulumi.set(__self__, "physical_nodes", physical_nodes)
        if sdn_integration is not None:
            pulumi.set(__self__, "sdn_integration", sdn_integration)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if secrets_location is not None:
            pulumi.set(__self__, "secrets_location", secrets_location)
        if security_settings is not None:
            pulumi.set(__self__, "security_settings", security_settings)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="adouPath")
    def adou_path(self) -> Optional[_builtins.str]:
        """
        The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        """
        return pulumi.get(self, "adou_path")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.DeploymentClusterResponse']:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="domainFqdn")
    def domain_fqdn(self) -> Optional[_builtins.str]:
        """
        FQDN to deploy cluster
        """
        return pulumi.get(self, "domain_fqdn")

    @_builtins.property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional['outputs.HostNetworkResponse']:
        """
        HostNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "host_network")

    @_builtins.property
    @pulumi.getter(name="infrastructureNetwork")
    def infrastructure_network(self) -> Optional[Sequence['outputs.InfrastructureNetworkResponse']]:
        """
        InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "infrastructure_network")

    @_builtins.property
    @pulumi.getter(name="namingPrefix")
    def naming_prefix(self) -> Optional[_builtins.str]:
        """
        naming prefix to deploy cluster.
        """
        return pulumi.get(self, "naming_prefix")

    @_builtins.property
    @pulumi.getter
    def observability(self) -> Optional['outputs.ObservabilityResponse']:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "observability")

    @_builtins.property
    @pulumi.getter(name="optionalServices")
    def optional_services(self) -> Optional['outputs.OptionalServicesResponse']:
        """
        OptionalServices config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "optional_services")

    @_builtins.property
    @pulumi.getter(name="physicalNodes")
    def physical_nodes(self) -> Optional[Sequence['outputs.PhysicalNodesResponse']]:
        """
        list of physical nodes config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "physical_nodes")

    @_builtins.property
    @pulumi.getter(name="sdnIntegration")
    def sdn_integration(self) -> Optional['outputs.SdnIntegrationResponse']:
        """
        SDN Integration config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "sdn_integration")

    @_builtins.property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.EceDeploymentSecretsResponse']]:
        """
        secrets used for cloud deployment.
        """
        return pulumi.get(self, "secrets")

    @_builtins.property
    @pulumi.getter(name="secretsLocation")
    def secrets_location(self) -> Optional[_builtins.str]:
        """
        Azure keyvault endpoint. This property is deprecated from 2023-12-01-preview. Please use secrets property instead.
        """
        return pulumi.get(self, "secrets_location")

    @_builtins.property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> Optional['outputs.DeploymentSecuritySettingsResponse']:
        """
        SecuritySettings to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "security_settings")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional['outputs.StorageResponse']:
        """
        Storage config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class DeploymentSecuritySettingsResponse(dict):
    """
    The SecuritySettings of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitlockerBootVolume":
            suggest = "bitlocker_boot_volume"
        elif key == "bitlockerDataVolumes":
            suggest = "bitlocker_data_volumes"
        elif key == "credentialGuardEnforced":
            suggest = "credential_guard_enforced"
        elif key == "driftControlEnforced":
            suggest = "drift_control_enforced"
        elif key == "drtmProtection":
            suggest = "drtm_protection"
        elif key == "hvciProtection":
            suggest = "hvci_protection"
        elif key == "sideChannelMitigationEnforced":
            suggest = "side_channel_mitigation_enforced"
        elif key == "smbClusterEncryption":
            suggest = "smb_cluster_encryption"
        elif key == "smbSigningEnforced":
            suggest = "smb_signing_enforced"
        elif key == "wdacEnforced":
            suggest = "wdac_enforced"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSecuritySettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSecuritySettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSecuritySettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitlocker_boot_volume: Optional[_builtins.bool] = None,
                 bitlocker_data_volumes: Optional[_builtins.bool] = None,
                 credential_guard_enforced: Optional[_builtins.bool] = None,
                 drift_control_enforced: Optional[_builtins.bool] = None,
                 drtm_protection: Optional[_builtins.bool] = None,
                 hvci_protection: Optional[_builtins.bool] = None,
                 side_channel_mitigation_enforced: Optional[_builtins.bool] = None,
                 smb_cluster_encryption: Optional[_builtins.bool] = None,
                 smb_signing_enforced: Optional[_builtins.bool] = None,
                 wdac_enforced: Optional[_builtins.bool] = None):
        """
        The SecuritySettings of AzureStackHCI Cluster.
        :param _builtins.bool bitlocker_boot_volume: When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        :param _builtins.bool bitlocker_data_volumes: When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        :param _builtins.bool credential_guard_enforced: When set to true, Credential Guard is enabled.
        :param _builtins.bool drift_control_enforced: When set to true, the security baseline is re-applied regularly.
        :param _builtins.bool drtm_protection: By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        :param _builtins.bool hvci_protection: By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        :param _builtins.bool side_channel_mitigation_enforced: When set to true, all the side channel mitigations are enabled
        :param _builtins.bool smb_cluster_encryption: When set to true, cluster east-west traffic is encrypted.
        :param _builtins.bool smb_signing_enforced: When set to true, the SMB default instance requires sign in for the client and server services.
        :param _builtins.bool wdac_enforced: WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        if bitlocker_boot_volume is None:
            bitlocker_boot_volume = True
        if bitlocker_boot_volume is not None:
            pulumi.set(__self__, "bitlocker_boot_volume", bitlocker_boot_volume)
        if bitlocker_data_volumes is None:
            bitlocker_data_volumes = True
        if bitlocker_data_volumes is not None:
            pulumi.set(__self__, "bitlocker_data_volumes", bitlocker_data_volumes)
        if credential_guard_enforced is None:
            credential_guard_enforced = False
        if credential_guard_enforced is not None:
            pulumi.set(__self__, "credential_guard_enforced", credential_guard_enforced)
        if drift_control_enforced is None:
            drift_control_enforced = True
        if drift_control_enforced is not None:
            pulumi.set(__self__, "drift_control_enforced", drift_control_enforced)
        if drtm_protection is None:
            drtm_protection = True
        if drtm_protection is not None:
            pulumi.set(__self__, "drtm_protection", drtm_protection)
        if hvci_protection is None:
            hvci_protection = True
        if hvci_protection is not None:
            pulumi.set(__self__, "hvci_protection", hvci_protection)
        if side_channel_mitigation_enforced is None:
            side_channel_mitigation_enforced = True
        if side_channel_mitigation_enforced is not None:
            pulumi.set(__self__, "side_channel_mitigation_enforced", side_channel_mitigation_enforced)
        if smb_cluster_encryption is None:
            smb_cluster_encryption = False
        if smb_cluster_encryption is not None:
            pulumi.set(__self__, "smb_cluster_encryption", smb_cluster_encryption)
        if smb_signing_enforced is None:
            smb_signing_enforced = True
        if smb_signing_enforced is not None:
            pulumi.set(__self__, "smb_signing_enforced", smb_signing_enforced)
        if wdac_enforced is None:
            wdac_enforced = True
        if wdac_enforced is not None:
            pulumi.set(__self__, "wdac_enforced", wdac_enforced)

    @_builtins.property
    @pulumi.getter(name="bitlockerBootVolume")
    def bitlocker_boot_volume(self) -> Optional[_builtins.bool]:
        """
        When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        """
        return pulumi.get(self, "bitlocker_boot_volume")

    @_builtins.property
    @pulumi.getter(name="bitlockerDataVolumes")
    def bitlocker_data_volumes(self) -> Optional[_builtins.bool]:
        """
        When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        """
        return pulumi.get(self, "bitlocker_data_volumes")

    @_builtins.property
    @pulumi.getter(name="credentialGuardEnforced")
    def credential_guard_enforced(self) -> Optional[_builtins.bool]:
        """
        When set to true, Credential Guard is enabled.
        """
        return pulumi.get(self, "credential_guard_enforced")

    @_builtins.property
    @pulumi.getter(name="driftControlEnforced")
    def drift_control_enforced(self) -> Optional[_builtins.bool]:
        """
        When set to true, the security baseline is re-applied regularly.
        """
        return pulumi.get(self, "drift_control_enforced")

    @_builtins.property
    @pulumi.getter(name="drtmProtection")
    def drtm_protection(self) -> Optional[_builtins.bool]:
        """
        By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        """
        return pulumi.get(self, "drtm_protection")

    @_builtins.property
    @pulumi.getter(name="hvciProtection")
    def hvci_protection(self) -> Optional[_builtins.bool]:
        """
        By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        """
        return pulumi.get(self, "hvci_protection")

    @_builtins.property
    @pulumi.getter(name="sideChannelMitigationEnforced")
    def side_channel_mitigation_enforced(self) -> Optional[_builtins.bool]:
        """
        When set to true, all the side channel mitigations are enabled
        """
        return pulumi.get(self, "side_channel_mitigation_enforced")

    @_builtins.property
    @pulumi.getter(name="smbClusterEncryption")
    def smb_cluster_encryption(self) -> Optional[_builtins.bool]:
        """
        When set to true, cluster east-west traffic is encrypted.
        """
        return pulumi.get(self, "smb_cluster_encryption")

    @_builtins.property
    @pulumi.getter(name="smbSigningEnforced")
    def smb_signing_enforced(self) -> Optional[_builtins.bool]:
        """
        When set to true, the SMB default instance requires sign in for the client and server services.
        """
        return pulumi.get(self, "smb_signing_enforced")

    @_builtins.property
    @pulumi.getter(name="wdacEnforced")
    def wdac_enforced(self) -> Optional[_builtins.bool]:
        """
        WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "wdac_enforced")


@pulumi.output_type
class DeploymentStepResponse(dict):
    """
    The Step of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "fullStepIndex":
            suggest = "full_step_index"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: _builtins.str,
                 end_time_utc: _builtins.str,
                 exception: Sequence[_builtins.str],
                 full_step_index: _builtins.str,
                 name: _builtins.str,
                 start_time_utc: _builtins.str,
                 status: _builtins.str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The Step of AzureStackHCI Cluster.
        :param _builtins.str description: Description of step.
        :param _builtins.str end_time_utc: End time of step.
        :param Sequence[_builtins.str] exception: List of exceptions in AzureStackHCI Cluster Deployment.
        :param _builtins.str full_step_index: FullStepIndex of step.
        :param _builtins.str name: Name of step.
        :param _builtins.str start_time_utc: Start time of step.
        :param _builtins.str status: Status of step. Allowed values are 'Error', 'Success', 'InProgress'
        :param Sequence['DeploymentStepResponse'] steps: List of nested steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "exception", exception)
        pulumi.set(__self__, "full_step_index", full_step_index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of step.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> _builtins.str:
        """
        End time of step.
        """
        return pulumi.get(self, "end_time_utc")

    @_builtins.property
    @pulumi.getter
    def exception(self) -> Sequence[_builtins.str]:
        """
        List of exceptions in AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "exception")

    @_builtins.property
    @pulumi.getter(name="fullStepIndex")
    def full_step_index(self) -> _builtins.str:
        """
        FullStepIndex of step.
        """
        return pulumi.get(self, "full_step_index")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of step.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> _builtins.str:
        """
        Start time of step.
        """
        return pulumi.get(self, "start_time_utc")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of step. Allowed values are 'Error', 'Success', 'InProgress'
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of nested steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class DeviceConfigurationResponse(dict):
    """
    The device Configuration for edge device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceMetadata":
            suggest = "device_metadata"
        elif key == "nicDetails":
            suggest = "nic_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_metadata: Optional[_builtins.str] = None,
                 nic_details: Optional[Sequence['outputs.NicDetailResponse']] = None):
        """
        The device Configuration for edge device.
        :param _builtins.str device_metadata: Device metadata details.
        :param Sequence['NicDetailResponse'] nic_details: NIC Details of device
        """
        if device_metadata is not None:
            pulumi.set(__self__, "device_metadata", device_metadata)
        if nic_details is not None:
            pulumi.set(__self__, "nic_details", nic_details)

    @_builtins.property
    @pulumi.getter(name="deviceMetadata")
    def device_metadata(self) -> Optional[_builtins.str]:
        """
        Device metadata details.
        """
        return pulumi.get(self, "device_metadata")

    @_builtins.property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> Optional[Sequence['outputs.NicDetailResponse']]:
        """
        NIC Details of device
        """
        return pulumi.get(self, "nic_details")


@pulumi.output_type
class EceActionStatusResponse(dict):
    """
    The ECE action plan deployment status for AzureStackHCI Cluster.
    """
    def __init__(__self__, *,
                 status: _builtins.str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The ECE action plan deployment status for AzureStackHCI Cluster.
        :param _builtins.str status: Status of ECE action AzureStackHCI Cluster Deployment.
        :param Sequence['DeploymentStepResponse'] steps: List of steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of ECE action AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class EceDeploymentSecretsResponse(dict):
    """
    Protected parameters list stored in keyvault.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eceSecretName":
            suggest = "ece_secret_name"
        elif key == "secretLocation":
            suggest = "secret_location"
        elif key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EceDeploymentSecretsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EceDeploymentSecretsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EceDeploymentSecretsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ece_secret_name: Optional[_builtins.str] = None,
                 secret_location: Optional[_builtins.str] = None,
                 secret_name: Optional[_builtins.str] = None):
        """
        Protected parameters list stored in keyvault.
        :param _builtins.str ece_secret_name: Secret name expected for Enterprise Cloud Engine (ECE) deployment.
        :param _builtins.str secret_location: Secret URI stored in keyvault.
        :param _builtins.str secret_name: Secret name stored in keyvault.
        """
        if ece_secret_name is not None:
            pulumi.set(__self__, "ece_secret_name", ece_secret_name)
        if secret_location is not None:
            pulumi.set(__self__, "secret_location", secret_location)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @_builtins.property
    @pulumi.getter(name="eceSecretName")
    def ece_secret_name(self) -> Optional[_builtins.str]:
        """
        Secret name expected for Enterprise Cloud Engine (ECE) deployment.
        """
        return pulumi.get(self, "ece_secret_name")

    @_builtins.property
    @pulumi.getter(name="secretLocation")
    def secret_location(self) -> Optional[_builtins.str]:
        """
        Secret URI stored in keyvault.
        """
        return pulumi.get(self, "secret_location")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[_builtins.str]:
        """
        Secret name stored in keyvault.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class EceReportedPropertiesResponse(dict):
    """
    The DeploymentStatus of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentStatus":
            suggest = "deployment_status"
        elif key == "validationStatus":
            suggest = "validation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EceReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EceReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EceReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_status: 'outputs.EceActionStatusResponse',
                 validation_status: 'outputs.EceActionStatusResponse'):
        """
        The DeploymentStatus of AzureStackHCI Cluster.
        :param 'EceActionStatusResponse' deployment_status: Deployment status of AzureStackHCI Cluster Deployment.
        :param 'EceActionStatusResponse' validation_status: validation status of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "validation_status", validation_status)

    @_builtins.property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> 'outputs.EceActionStatusResponse':
        """
        Deployment status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "deployment_status")

    @_builtins.property
    @pulumi.getter(name="validationStatus")
    def validation_status(self) -> 'outputs.EceActionStatusResponse':
        """
        validation status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "validation_status")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: _builtins.str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param _builtins.str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: _builtins.str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: _builtins.str,
                 target: _builtins.str,
                 exception: Optional[_builtins.str] = None):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param _builtins.str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param _builtins.str message: The error message.
        :param _builtins.str target: The error target.
        :param _builtins.str exception: Exception details while installing extension.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)
        if exception is not None:
            pulumi.set(__self__, "exception", exception)

    @_builtins.property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        The error target.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def exception(self) -> Optional[_builtins.str]:
        """
        Exception details while installing extension.
        """
        return pulumi.get(self, "exception")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    The complex type of the extended location.
    """
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        The complex type of the extended location.
        :param _builtins.str name: The name of the extended location.
        :param _builtins.str type: The type of the extended location.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExtensionInstanceViewResponse(dict):
    """
    Describes the Extension Instance View.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 status: Optional['outputs.ExtensionInstanceViewResponseStatus'] = None,
                 type: Optional[_builtins.str] = None,
                 type_handler_version: Optional[_builtins.str] = None):
        """
        Describes the Extension Instance View.
        :param _builtins.str name: The extension name.
        :param 'ExtensionInstanceViewResponseStatus' status: Instance view status.
        :param _builtins.str type: Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
        :param _builtins.str type_handler_version: Specifies the version of the script handler.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_handler_version is not None:
            pulumi.set(__self__, "type_handler_version", type_handler_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The extension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.ExtensionInstanceViewResponseStatus']:
        """
        Instance view status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> Optional[_builtins.str]:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class ExtensionInstanceViewResponseStatus(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionInstanceViewResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 display_status: Optional[_builtins.str] = None,
                 level: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 time: Optional[_builtins.str] = None):
        """
        Instance view status.
        :param _builtins.str code: The status code.
        :param _builtins.str display_status: The short localizable label for the status.
        :param _builtins.str level: The level code.
        :param _builtins.str message: The detailed status message, including for alerts and error messages.
        :param _builtins.str time: The time of the status.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[_builtins.str]:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.str]:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class ExtensionProfileResponse(dict):
    """
    Extensions details for edge device.
    """
    def __init__(__self__, *,
                 extensions: Sequence['outputs.ExtensionResponse']):
        """
        Extensions details for edge device.
        :param Sequence['ExtensionResponse'] extensions: List of Arc extensions installed on edge device.
        """
        pulumi.set(__self__, "extensions", extensions)

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Sequence['outputs.ExtensionResponse']:
        """
        List of Arc extensions installed on edge device.
        """
        return pulumi.get(self, "extensions")


@pulumi.output_type
class ExtensionResponse(dict):
    """
    Arc extension installed on edge device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDetails":
            suggest = "error_details"
        elif key == "extensionName":
            suggest = "extension_name"
        elif key == "extensionResourceId":
            suggest = "extension_resource_id"
        elif key == "managedBy":
            suggest = "managed_by"
        elif key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_details: Sequence['outputs.ErrorDetailResponse'],
                 extension_name: _builtins.str,
                 extension_resource_id: _builtins.str,
                 managed_by: Optional[_builtins.str] = None,
                 state: _builtins.str,
                 type_handler_version: _builtins.str):
        """
        Arc extension installed on edge device.
        :param Sequence['ErrorDetailResponse'] error_details: Error details while installing Arc extension.
        :param _builtins.str extension_name: Arc extension name installed on edge device.
        :param _builtins.str extension_resource_id: Arc Extension Azure resource id.
        :param _builtins.str managed_by: Extension managed by user or Azure.
        :param _builtins.str state: Arc extension state from arc machine extension.
        :param _builtins.str type_handler_version: Extension version installed.
        """
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "extension_name", extension_name)
        pulumi.set(__self__, "extension_resource_id", extension_resource_id)
        if managed_by is None:
            managed_by = 'Azure'
        pulumi.set(__self__, "managed_by", managed_by)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type_handler_version", type_handler_version)

    @_builtins.property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        Error details while installing Arc extension.
        """
        return pulumi.get(self, "error_details")

    @_builtins.property
    @pulumi.getter(name="extensionName")
    def extension_name(self) -> _builtins.str:
        """
        Arc extension name installed on edge device.
        """
        return pulumi.get(self, "extension_name")

    @_builtins.property
    @pulumi.getter(name="extensionResourceId")
    def extension_resource_id(self) -> _builtins.str:
        """
        Arc Extension Azure resource id.
        """
        return pulumi.get(self, "extension_resource_id")

    @_builtins.property
    @pulumi.getter(name="managedBy")
    def managed_by(self) -> _builtins.str:
        """
        Extension managed by user or Azure.
        """
        return pulumi.get(self, "managed_by")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Arc extension state from arc machine extension.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> _builtins.str:
        """
        Extension version installed.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class GalleryImageIdentifierResponse(dict):
    """
    This is the gallery image definition identifier.
    """
    def __init__(__self__, *,
                 offer: _builtins.str,
                 publisher: _builtins.str,
                 sku: _builtins.str):
        """
        This is the gallery image definition identifier.
        :param _builtins.str offer: The name of the gallery image definition offer.
        :param _builtins.str publisher: The name of the gallery image definition publisher.
        :param _builtins.str sku: The name of the gallery image definition SKU.
        """
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)

    @_builtins.property
    @pulumi.getter
    def offer(self) -> _builtins.str:
        """
        The name of the gallery image definition offer.
        """
        return pulumi.get(self, "offer")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> _builtins.str:
        """
        The name of the gallery image definition publisher.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter
    def sku(self) -> _builtins.str:
        """
        The name of the gallery image definition SKU.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class GalleryImageStatusDownloadStatusResponse(dict):
    """
    The download status of the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadSizeInMB":
            suggest = "download_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusDownloadStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusDownloadStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusDownloadStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_size_in_mb: Optional[_builtins.float] = None):
        """
        The download status of the gallery image
        :param _builtins.float download_size_in_mb: The downloaded sized of the image in MB
        """
        if download_size_in_mb is not None:
            pulumi.set(__self__, "download_size_in_mb", download_size_in_mb)

    @_builtins.property
    @pulumi.getter(name="downloadSizeInMB")
    def download_size_in_mb(self) -> Optional[_builtins.float]:
        """
        The downloaded sized of the image in MB
        """
        return pulumi.get(self, "download_size_in_mb")


@pulumi.output_type
class GalleryImageStatusProvisioningStatusResponse(dict):
    """
    The status of the operation performed on the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        The status of the operation performed on the gallery image
        :param _builtins.str status: The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the gallery image
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the gallery image
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class GalleryImageStatusResponse(dict):
    """
    The observed state of gallery images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.GalleryImageStatusDownloadStatusResponse'] = None,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 progress_percentage: Optional[_builtins.float] = None,
                 provisioning_status: Optional['outputs.GalleryImageStatusProvisioningStatusResponse'] = None):
        """
        The observed state of gallery images
        :param 'GalleryImageStatusDownloadStatusResponse' download_status: The download status of the gallery image
        :param _builtins.str error_code: GalleryImage provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param _builtins.float progress_percentage: The progress of the operation in percentage
        :param 'GalleryImageStatusProvisioningStatusResponse' provisioning_status: provisioning status of the gallery image
        """
        if download_status is not None:
            pulumi.set(__self__, "download_status", download_status)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if progress_percentage is not None:
            pulumi.set(__self__, "progress_percentage", progress_percentage)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.GalleryImageStatusDownloadStatusResponse']:
        """
        The download status of the gallery image
        """
        return pulumi.get(self, "download_status")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        GalleryImage provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[_builtins.float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.GalleryImageStatusProvisioningStatusResponse']:
        """
        provisioning status of the gallery image
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class GalleryImageVersionResponse(dict):
    """
    Specifies information about the gallery image version that you want to create or update.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_profile: 'outputs.GalleryImageVersionStorageProfileResponse',
                 name: Optional[_builtins.str] = None):
        """
        Specifies information about the gallery image version that you want to create or update.
        :param 'GalleryImageVersionStorageProfileResponse' storage_profile: This is the storage profile of a Gallery Image Version.
        :param _builtins.str name: This is the version of the gallery image.
        """
        pulumi.set(__self__, "storage_profile", storage_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> 'outputs.GalleryImageVersionStorageProfileResponse':
        """
        This is the storage profile of a Gallery Image Version.
        """
        return pulumi.get(self, "storage_profile")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        This is the version of the gallery image.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GalleryImageVersionStorageProfileResponse(dict):
    """
    This is the storage profile of a Gallery Image Version.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osDiskImage":
            suggest = "os_disk_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageVersionStorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageVersionStorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageVersionStorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_disk_image: Optional['outputs.GalleryOSDiskImageResponse'] = None):
        """
        This is the storage profile of a Gallery Image Version.
        :param 'GalleryOSDiskImageResponse' os_disk_image: This is the OS disk image.
        """
        if os_disk_image is not None:
            pulumi.set(__self__, "os_disk_image", os_disk_image)

    @_builtins.property
    @pulumi.getter(name="osDiskImage")
    def os_disk_image(self) -> Optional['outputs.GalleryOSDiskImageResponse']:
        """
        This is the OS disk image.
        """
        return pulumi.get(self, "os_disk_image")


@pulumi.output_type
class GalleryOSDiskImageResponse(dict):
    """
    This is the OS disk image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeInMB":
            suggest = "size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryOSDiskImageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryOSDiskImageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryOSDiskImageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_in_mb: _builtins.float):
        """
        This is the OS disk image.
        :param _builtins.float size_in_mb: This property indicates the size of the VHD to be created.
        """
        pulumi.set(__self__, "size_in_mb", size_in_mb)

    @_builtins.property
    @pulumi.getter(name="sizeInMB")
    def size_in_mb(self) -> _builtins.float:
        """
        This property indicates the size of the VHD to be created.
        """
        return pulumi.get(self, "size_in_mb")


@pulumi.output_type
class GuestAgentInstallStatusResponse(dict):
    """
    Defines the status of a guest agent installation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "lastStatusChange":
            suggest = "last_status_change"
        elif key == "vmUuid":
            suggest = "vm_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuestAgentInstallStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuestAgentInstallStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuestAgentInstallStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: _builtins.str,
                 error_details: Sequence['outputs.ErrorDetailResponse'],
                 last_status_change: _builtins.str,
                 status: _builtins.str,
                 vm_uuid: _builtins.str):
        """
        Defines the status of a guest agent installation.
        :param _builtins.str agent_version: The hybrid machine agent full version.
        :param Sequence['ErrorDetailResponse'] error_details: Details about the error state.
        :param _builtins.str last_status_change: The time of the last status change.
        :param _builtins.str status: The installation status of the hybrid machine agent installation.
        :param _builtins.str vm_uuid: Specifies the VM's unique SMBIOS ID.
        """
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "last_status_change", last_status_change)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vm_uuid", vm_uuid)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        """
        The hybrid machine agent full version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        Details about the error state.
        """
        return pulumi.get(self, "error_details")

    @_builtins.property
    @pulumi.getter(name="lastStatusChange")
    def last_status_change(self) -> _builtins.str:
        """
        The time of the last status change.
        """
        return pulumi.get(self, "last_status_change")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The installation status of the hybrid machine agent installation.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vmUuid")
    def vm_uuid(self) -> _builtins.str:
        """
        Specifies the VM's unique SMBIOS ID.
        """
        return pulumi.get(self, "vm_uuid")


@pulumi.output_type
class GuestAgentProfileResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "lastStatusChange":
            suggest = "last_status_change"
        elif key == "vmUuid":
            suggest = "vm_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuestAgentProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuestAgentProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuestAgentProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: _builtins.str,
                 error_details: Sequence['outputs.ErrorDetailResponse'],
                 last_status_change: _builtins.str,
                 status: _builtins.str,
                 vm_uuid: _builtins.str):
        """
        Defines the resource properties.
        :param _builtins.str agent_version: The hybrid machine agent full version.
        :param Sequence['ErrorDetailResponse'] error_details: Details about the error state.
        :param _builtins.str last_status_change: The time of the last status change.
        :param _builtins.str status: The status of the hybrid machine agent.
        :param _builtins.str vm_uuid: Specifies the VM's unique SMBIOS ID.
        """
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "last_status_change", last_status_change)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vm_uuid", vm_uuid)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        """
        The hybrid machine agent full version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        Details about the error state.
        """
        return pulumi.get(self, "error_details")

    @_builtins.property
    @pulumi.getter(name="lastStatusChange")
    def last_status_change(self) -> _builtins.str:
        """
        The time of the last status change.
        """
        return pulumi.get(self, "last_status_change")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the hybrid machine agent.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vmUuid")
    def vm_uuid(self) -> _builtins.str:
        """
        Specifies the VM's unique SMBIOS ID.
        """
        return pulumi.get(self, "vm_uuid")


@pulumi.output_type
class GuestCredentialResponse(dict):
    """
    Username / Password Credentials to connect to guest.
    """
    def __init__(__self__, *,
                 username: Optional[_builtins.str] = None):
        """
        Username / Password Credentials to connect to guest.
        :param _builtins.str username: The username to connect with the guest.
        """
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        """
        The username to connect with the guest.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class HciCollectLogJobPropertiesResponse(dict):
    """
    Represents the properties of an HCI Collect Log job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "fromDate":
            suggest = "from_date"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "jobType":
            suggest = "job_type"
        elif key == "lastLogGenerated":
            suggest = "last_log_generated"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "reportedProperties":
            suggest = "reported_properties"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"
        elif key == "toDate":
            suggest = "to_date"
        elif key == "deploymentMode":
            suggest = "deployment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciCollectLogJobPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciCollectLogJobPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciCollectLogJobPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time_utc: _builtins.str,
                 from_date: _builtins.str,
                 job_id: _builtins.str,
                 job_type: _builtins.str,
                 last_log_generated: _builtins.str,
                 provisioning_state: _builtins.str,
                 reported_properties: 'outputs.LogCollectionReportedPropertiesResponse',
                 start_time_utc: _builtins.str,
                 status: _builtins.str,
                 to_date: _builtins.str,
                 deployment_mode: Optional[_builtins.str] = None):
        """
        Represents the properties of an HCI Collect Log job.
        :param _builtins.str end_time_utc: The UTC date and time at which the job completed.
        :param _builtins.str from_date: From date for log collection.
        :param _builtins.str job_id: Unique, immutable job id.
        :param _builtins.str job_type: Job Type supported.
               Expected value is 'CollectLog'.
        :param _builtins.str last_log_generated: To date for log collection.
        :param _builtins.str provisioning_state: Job provisioning state
        :param 'LogCollectionReportedPropertiesResponse' reported_properties: log collection job reported properties.
        :param _builtins.str start_time_utc: The UTC date and time at which the job started.
        :param _builtins.str status: Status of Edge device job.
        :param _builtins.str to_date: To date for log collection.
        :param _builtins.str deployment_mode: Deployment mode to trigger job.
        """
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "from_date", from_date)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_type", 'CollectLog')
        pulumi.set(__self__, "last_log_generated", last_log_generated)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "reported_properties", reported_properties)
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "to_date", to_date)
        if deployment_mode is not None:
            pulumi.set(__self__, "deployment_mode", deployment_mode)

    @_builtins.property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> _builtins.str:
        """
        The UTC date and time at which the job completed.
        """
        return pulumi.get(self, "end_time_utc")

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> _builtins.str:
        """
        From date for log collection.
        """
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Unique, immutable job id.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> _builtins.str:
        """
        Job Type supported.
        Expected value is 'CollectLog'.
        """
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter(name="lastLogGenerated")
    def last_log_generated(self) -> _builtins.str:
        """
        To date for log collection.
        """
        return pulumi.get(self, "last_log_generated")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Job provisioning state
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="reportedProperties")
    def reported_properties(self) -> 'outputs.LogCollectionReportedPropertiesResponse':
        """
        log collection job reported properties.
        """
        return pulumi.get(self, "reported_properties")

    @_builtins.property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> _builtins.str:
        """
        The UTC date and time at which the job started.
        """
        return pulumi.get(self, "start_time_utc")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of Edge device job.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> _builtins.str:
        """
        To date for log collection.
        """
        return pulumi.get(self, "to_date")

    @_builtins.property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> Optional[_builtins.str]:
        """
        Deployment mode to trigger job.
        """
        return pulumi.get(self, "deployment_mode")


@pulumi.output_type
class HciEdgeDevicePropertiesResponse(dict):
    """
    properties for Arc-enabled edge device with HCI OS.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "reportedProperties":
            suggest = "reported_properties"
        elif key == "deviceConfiguration":
            suggest = "device_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciEdgeDevicePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciEdgeDevicePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciEdgeDevicePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 reported_properties: 'outputs.HciReportedPropertiesResponse',
                 device_configuration: Optional['outputs.DeviceConfigurationResponse'] = None):
        """
        properties for Arc-enabled edge device with HCI OS.
        :param _builtins.str provisioning_state: Provisioning state of edgeDevice resource
        :param 'HciReportedPropertiesResponse' reported_properties: The instance view of all current configurations on HCI device.
        :param 'DeviceConfigurationResponse' device_configuration: Device Configuration
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "reported_properties", reported_properties)
        if device_configuration is not None:
            pulumi.set(__self__, "device_configuration", device_configuration)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of edgeDevice resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="reportedProperties")
    def reported_properties(self) -> 'outputs.HciReportedPropertiesResponse':
        """
        The instance view of all current configurations on HCI device.
        """
        return pulumi.get(self, "reported_properties")

    @_builtins.property
    @pulumi.getter(name="deviceConfiguration")
    def device_configuration(self) -> Optional['outputs.DeviceConfigurationResponse']:
        """
        Device Configuration
        """
        return pulumi.get(self, "device_configuration")


@pulumi.output_type
class HciNetworkProfileResponse(dict):
    """
    The network profile of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostNetwork":
            suggest = "host_network"
        elif key == "nicDetails":
            suggest = "nic_details"
        elif key == "switchDetails":
            suggest = "switch_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciNetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciNetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciNetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_network: 'outputs.HostNetworkResponse',
                 nic_details: Sequence['outputs.HciNicDetailResponse'],
                 switch_details: Sequence['outputs.SwitchDetailResponse']):
        """
        The network profile of a device.
        :param 'HostNetworkResponse' host_network: HostNetwork config to deploy AzureStackHCI Cluster.
        :param Sequence['HciNicDetailResponse'] nic_details: List of NIC Details of device.
        :param Sequence['SwitchDetailResponse'] switch_details: List of switch details for edge device.
        """
        pulumi.set(__self__, "host_network", host_network)
        pulumi.set(__self__, "nic_details", nic_details)
        pulumi.set(__self__, "switch_details", switch_details)

    @_builtins.property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> 'outputs.HostNetworkResponse':
        """
        HostNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "host_network")

    @_builtins.property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> Sequence['outputs.HciNicDetailResponse']:
        """
        List of NIC Details of device.
        """
        return pulumi.get(self, "nic_details")

    @_builtins.property
    @pulumi.getter(name="switchDetails")
    def switch_details(self) -> Sequence['outputs.SwitchDetailResponse']:
        """
        List of switch details for edge device.
        """
        return pulumi.get(self, "switch_details")


@pulumi.output_type
class HciNicDetailResponse(dict):
    """
    The NIC Detail of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterName":
            suggest = "adapter_name"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "defaultGateway":
            suggest = "default_gateway"
        elif key == "defaultIsolationId":
            suggest = "default_isolation_id"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "driverVersion":
            suggest = "driver_version"
        elif key == "interfaceDescription":
            suggest = "interface_description"
        elif key == "ip4Address":
            suggest = "ip4_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "nicStatus":
            suggest = "nic_status"
        elif key == "nicType":
            suggest = "nic_type"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "switchName":
            suggest = "switch_name"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciNicDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciNicDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciNicDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter_name: _builtins.str,
                 component_id: _builtins.str,
                 default_gateway: _builtins.str,
                 default_isolation_id: _builtins.str,
                 dns_servers: Sequence[_builtins.str],
                 driver_version: _builtins.str,
                 interface_description: _builtins.str,
                 ip4_address: _builtins.str,
                 mac_address: _builtins.str,
                 nic_status: _builtins.str,
                 nic_type: _builtins.str,
                 slot: _builtins.str,
                 subnet_mask: _builtins.str,
                 switch_name: _builtins.str,
                 vlan_id: _builtins.str):
        """
        The NIC Detail of a device.
        :param _builtins.str adapter_name: Adapter Name of NIC
        :param _builtins.str component_id: Component Id of NIC
        :param _builtins.str default_gateway: Default Gateway of NIC
        :param _builtins.str default_isolation_id: Default Isolation of Management NIC
        :param Sequence[_builtins.str] dns_servers: DNS Servers for NIC
        :param _builtins.str driver_version: Driver Version of NIC
        :param _builtins.str interface_description: Interface Description of NIC
        :param _builtins.str ip4_address: Subnet Mask of NIC
        :param _builtins.str mac_address: MAC address information of NIC.
        :param _builtins.str nic_status: The status of NIC, up, disconnected.
        :param _builtins.str nic_type: The type of NIC, physical, virtual, management.
        :param _builtins.str slot: The slot attached to the NIC.
        :param _builtins.str subnet_mask: Subnet Mask of NIC
        :param _builtins.str switch_name: The switch attached to the NIC, if any.
        :param _builtins.str vlan_id: The VLAN ID of the physical NIC.
        """
        pulumi.set(__self__, "adapter_name", adapter_name)
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "default_gateway", default_gateway)
        pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "driver_version", driver_version)
        pulumi.set(__self__, "interface_description", interface_description)
        pulumi.set(__self__, "ip4_address", ip4_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "nic_status", nic_status)
        pulumi.set(__self__, "nic_type", nic_type)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "switch_name", switch_name)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> _builtins.str:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> _builtins.str:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> _builtins.str:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @_builtins.property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> _builtins.str:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence[_builtins.str]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @_builtins.property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> _builtins.str:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> _builtins.str:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC address information of NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="nicStatus")
    def nic_status(self) -> _builtins.str:
        """
        The status of NIC, up, disconnected.
        """
        return pulumi.get(self, "nic_status")

    @_builtins.property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> _builtins.str:
        """
        The type of NIC, physical, virtual, management.
        """
        return pulumi.get(self, "nic_type")

    @_builtins.property
    @pulumi.getter
    def slot(self) -> _builtins.str:
        """
        The slot attached to the NIC.
        """
        return pulumi.get(self, "slot")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="switchName")
    def switch_name(self) -> _builtins.str:
        """
        The switch attached to the NIC, if any.
        """
        return pulumi.get(self, "switch_name")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.str:
        """
        The VLAN ID of the physical NIC.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class HciOsProfileResponse(dict):
    """
    OS configurations for HCI device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assemblyVersion":
            suggest = "assembly_version"
        elif key == "bootType":
            suggest = "boot_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciOsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciOsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciOsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assembly_version: _builtins.str,
                 boot_type: _builtins.str):
        """
        OS configurations for HCI device.
        :param _builtins.str assembly_version: Version of assembly present on device
        :param _builtins.str boot_type: The boot type of the device. e.g. UEFI, Legacy etc
        """
        pulumi.set(__self__, "assembly_version", assembly_version)
        pulumi.set(__self__, "boot_type", boot_type)

    @_builtins.property
    @pulumi.getter(name="assemblyVersion")
    def assembly_version(self) -> _builtins.str:
        """
        Version of assembly present on device
        """
        return pulumi.get(self, "assembly_version")

    @_builtins.property
    @pulumi.getter(name="bootType")
    def boot_type(self) -> _builtins.str:
        """
        The boot type of the device. e.g. UEFI, Legacy etc
        """
        return pulumi.get(self, "boot_type")


@pulumi.output_type
class HciRemoteSupportJobPropertiesResponse(dict):
    """
    Represents the properties of a remote support job for HCI.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "expirationTimestamp":
            suggest = "expiration_timestamp"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "jobType":
            suggest = "job_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "reportedProperties":
            suggest = "reported_properties"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"
        elif key == "deploymentMode":
            suggest = "deployment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciRemoteSupportJobPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciRemoteSupportJobPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciRemoteSupportJobPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: _builtins.str,
                 end_time_utc: _builtins.str,
                 expiration_timestamp: _builtins.str,
                 job_id: _builtins.str,
                 job_type: _builtins.str,
                 provisioning_state: _builtins.str,
                 reported_properties: 'outputs.RemoteSupportJobReportedPropertiesResponse',
                 start_time_utc: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 deployment_mode: Optional[_builtins.str] = None):
        """
        Represents the properties of a remote support job for HCI.
        :param _builtins.str access_level: Remote support access level.
        :param _builtins.str end_time_utc: The UTC date and time at which the job completed.
        :param _builtins.str expiration_timestamp: Remote support expiration timestamp.
        :param _builtins.str job_id: Unique, immutable job id.
        :param _builtins.str job_type: Job Type supported.
               Expected value is 'RemoteSupport'.
        :param _builtins.str provisioning_state: Job provisioning state
        :param 'RemoteSupportJobReportedPropertiesResponse' reported_properties: log collection job reported properties.
        :param _builtins.str start_time_utc: The UTC date and time at which the job started.
        :param _builtins.str status: Status of Edge device job.
        :param _builtins.str type: Remote support type.
        :param _builtins.str deployment_mode: Deployment mode to trigger job.
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "expiration_timestamp", expiration_timestamp)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_type", 'RemoteSupport')
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "reported_properties", reported_properties)
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if deployment_mode is not None:
            pulumi.set(__self__, "deployment_mode", deployment_mode)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> _builtins.str:
        """
        Remote support access level.
        """
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> _builtins.str:
        """
        The UTC date and time at which the job completed.
        """
        return pulumi.get(self, "end_time_utc")

    @_builtins.property
    @pulumi.getter(name="expirationTimestamp")
    def expiration_timestamp(self) -> _builtins.str:
        """
        Remote support expiration timestamp.
        """
        return pulumi.get(self, "expiration_timestamp")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Unique, immutable job id.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> _builtins.str:
        """
        Job Type supported.
        Expected value is 'RemoteSupport'.
        """
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Job provisioning state
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="reportedProperties")
    def reported_properties(self) -> 'outputs.RemoteSupportJobReportedPropertiesResponse':
        """
        log collection job reported properties.
        """
        return pulumi.get(self, "reported_properties")

    @_builtins.property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> _builtins.str:
        """
        The UTC date and time at which the job started.
        """
        return pulumi.get(self, "start_time_utc")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of Edge device job.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Remote support type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> Optional[_builtins.str]:
        """
        Deployment mode to trigger job.
        """
        return pulumi.get(self, "deployment_mode")


@pulumi.output_type
class HciReportedPropertiesResponse(dict):
    """
    The device Configuration for HCI device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceState":
            suggest = "device_state"
        elif key == "extensionProfile":
            suggest = "extension_profile"
        elif key == "networkProfile":
            suggest = "network_profile"
        elif key == "osProfile":
            suggest = "os_profile"
        elif key == "sbeDeploymentPackageInfo":
            suggest = "sbe_deployment_package_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HciReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HciReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HciReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_state: _builtins.str,
                 extension_profile: 'outputs.ExtensionProfileResponse',
                 network_profile: 'outputs.HciNetworkProfileResponse',
                 os_profile: 'outputs.HciOsProfileResponse',
                 sbe_deployment_package_info: 'outputs.SbeDeploymentPackageInfoResponse'):
        """
        The device Configuration for HCI device.
        :param _builtins.str device_state: edge device state.
        :param 'ExtensionProfileResponse' extension_profile: Extensions details for edge device.
        :param 'HciNetworkProfileResponse' network_profile: HCI device network information.
        :param 'HciOsProfileResponse' os_profile: HCI device OS specific information.
        :param 'SbeDeploymentPackageInfoResponse' sbe_deployment_package_info: Solution builder extension (SBE) deployment package information.
        """
        pulumi.set(__self__, "device_state", device_state)
        pulumi.set(__self__, "extension_profile", extension_profile)
        pulumi.set(__self__, "network_profile", network_profile)
        pulumi.set(__self__, "os_profile", os_profile)
        pulumi.set(__self__, "sbe_deployment_package_info", sbe_deployment_package_info)

    @_builtins.property
    @pulumi.getter(name="deviceState")
    def device_state(self) -> _builtins.str:
        """
        edge device state.
        """
        return pulumi.get(self, "device_state")

    @_builtins.property
    @pulumi.getter(name="extensionProfile")
    def extension_profile(self) -> 'outputs.ExtensionProfileResponse':
        """
        Extensions details for edge device.
        """
        return pulumi.get(self, "extension_profile")

    @_builtins.property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> 'outputs.HciNetworkProfileResponse':
        """
        HCI device network information.
        """
        return pulumi.get(self, "network_profile")

    @_builtins.property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> 'outputs.HciOsProfileResponse':
        """
        HCI device OS specific information.
        """
        return pulumi.get(self, "os_profile")

    @_builtins.property
    @pulumi.getter(name="sbeDeploymentPackageInfo")
    def sbe_deployment_package_info(self) -> 'outputs.SbeDeploymentPackageInfoResponse':
        """
        Solution builder extension (SBE) deployment package information.
        """
        return pulumi.get(self, "sbe_deployment_package_info")


@pulumi.output_type
class HostNetworkResponse(dict):
    """
    The HostNetwork of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableStorageAutoIp":
            suggest = "enable_storage_auto_ip"
        elif key == "storageConnectivitySwitchless":
            suggest = "storage_connectivity_switchless"
        elif key == "storageNetworks":
            suggest = "storage_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostNetworkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostNetworkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostNetworkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_storage_auto_ip: _builtins.bool,
                 intents: Sequence['outputs.IntentsResponse'],
                 storage_connectivity_switchless: _builtins.bool,
                 storage_networks: Sequence['outputs.StorageNetworksResponse']):
        """
        The HostNetwork of a cluster.
        :param _builtins.bool enable_storage_auto_ip: Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        :param Sequence['IntentsResponse'] intents: The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        :param _builtins.bool storage_connectivity_switchless: Defines how the storage adapters between nodes are connected either switch or switch less.
        :param Sequence['StorageNetworksResponse'] storage_networks: List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        pulumi.set(__self__, "enable_storage_auto_ip", enable_storage_auto_ip)
        pulumi.set(__self__, "intents", intents)
        pulumi.set(__self__, "storage_connectivity_switchless", storage_connectivity_switchless)
        pulumi.set(__self__, "storage_networks", storage_networks)

    @_builtins.property
    @pulumi.getter(name="enableStorageAutoIp")
    def enable_storage_auto_ip(self) -> _builtins.bool:
        """
        Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        """
        return pulumi.get(self, "enable_storage_auto_ip")

    @_builtins.property
    @pulumi.getter
    def intents(self) -> Sequence['outputs.IntentsResponse']:
        """
        The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        """
        return pulumi.get(self, "intents")

    @_builtins.property
    @pulumi.getter(name="storageConnectivitySwitchless")
    def storage_connectivity_switchless(self) -> _builtins.bool:
        """
        Defines how the storage adapters between nodes are connected either switch or switch less.
        """
        return pulumi.get(self, "storage_connectivity_switchless")

    @_builtins.property
    @pulumi.getter(name="storageNetworks")
    def storage_networks(self) -> Sequence['outputs.StorageNetworksResponse']:
        """
        List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage_networks")


@pulumi.output_type
class HttpProxyConfigurationResponse(dict):
    """
    HTTP Proxy configuration for the VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpProxy":
            suggest = "http_proxy"
        elif key == "httpsProxy":
            suggest = "https_proxy"
        elif key == "noProxy":
            suggest = "no_proxy"
        elif key == "trustedCa":
            suggest = "trusted_ca"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpProxyConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_proxy: Optional[_builtins.str] = None,
                 https_proxy: Optional[_builtins.str] = None,
                 no_proxy: Optional[Sequence[_builtins.str]] = None,
                 trusted_ca: Optional[_builtins.str] = None):
        """
        HTTP Proxy configuration for the VM.
        :param _builtins.str http_proxy: The HTTP proxy server endpoint to use.
        :param _builtins.str https_proxy: The HTTPS proxy server endpoint to use.
        :param Sequence[_builtins.str] no_proxy: The endpoints that should not go through proxy.
        :param _builtins.str trusted_ca: Alternative CA cert to use for connecting to proxy servers.
        """
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if no_proxy is not None:
            pulumi.set(__self__, "no_proxy", no_proxy)
        if trusted_ca is not None:
            pulumi.set(__self__, "trusted_ca", trusted_ca)

    @_builtins.property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> Optional[_builtins.str]:
        """
        The HTTP proxy server endpoint to use.
        """
        return pulumi.get(self, "http_proxy")

    @_builtins.property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[_builtins.str]:
        """
        The HTTPS proxy server endpoint to use.
        """
        return pulumi.get(self, "https_proxy")

    @_builtins.property
    @pulumi.getter(name="noProxy")
    def no_proxy(self) -> Optional[Sequence[_builtins.str]]:
        """
        The endpoints that should not go through proxy.
        """
        return pulumi.get(self, "no_proxy")

    @_builtins.property
    @pulumi.getter(name="trustedCa")
    def trusted_ca(self) -> Optional[_builtins.str]:
        """
        Alternative CA cert to use for connecting to proxy servers.
        """
        return pulumi.get(self, "trusted_ca")


@pulumi.output_type
class IPConfigurationPropertiesResponse(dict):
    """
    InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"
        elif key == "privateIPAddress":
            suggest = "private_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: _builtins.str,
                 prefix_length: _builtins.str,
                 private_ip_address: Optional[_builtins.str] = None,
                 subnet: Optional['outputs.LogicalNetworkArmReferenceResponse'] = None):
        """
        InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
        :param _builtins.str gateway: Gateway for network interface
        :param _builtins.str prefix_length: prefixLength for network interface
        :param _builtins.str private_ip_address: PrivateIPAddress - Private IP address of the IP configuration.
        :param 'LogicalNetworkArmReferenceResponse' subnet: Subnet - Name of Subnet bound to the IP configuration.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix_length", prefix_length)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway for network interface
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> _builtins.str:
        """
        prefixLength for network interface
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="privateIPAddress")
    def private_ip_address(self) -> Optional[_builtins.str]:
        """
        PrivateIPAddress - Private IP address of the IP configuration.
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional['outputs.LogicalNetworkArmReferenceResponse']:
        """
        Subnet - Name of Subnet bound to the IP configuration.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class IPConfigurationResponse(dict):
    """
    InterfaceIPConfiguration IPConfiguration in a network interface.
    """
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 properties: Optional['outputs.IPConfigurationPropertiesResponse'] = None):
        """
        InterfaceIPConfiguration IPConfiguration in a network interface.
        :param _builtins.str name: Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        :param 'IPConfigurationPropertiesResponse' properties: InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional['outputs.IPConfigurationPropertiesResponse']:
        """
        InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class IPPoolInfoResponse(dict):
    """
    IP Pool info
    """
    def __init__(__self__, *,
                 available: _builtins.str,
                 used: _builtins.str):
        """
        IP Pool info
        :param _builtins.str available: Number of IP addresses available in the IP Pool
        :param _builtins.str used: Number of IP addresses allocated from the IP Pool
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def available(self) -> _builtins.str:
        """
        Number of IP addresses available in the IP Pool
        """
        return pulumi.get(self, "available")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.str:
        """
        Number of IP addresses allocated from the IP Pool
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class IPPoolResponse(dict):
    """
    Describes IPPool
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipPoolType":
            suggest = "ip_pool_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPPoolResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPPoolResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPPoolResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end: Optional[_builtins.str] = None,
                 info: Optional['outputs.IPPoolInfoResponse'] = None,
                 ip_pool_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 start: Optional[_builtins.str] = None):
        """
        Describes IPPool
        :param _builtins.str end: End of the IP address pool
        :param 'IPPoolInfoResponse' info: IPPool info
        :param _builtins.str ip_pool_type: Type of the IP Pool [vm, vippool]
        :param _builtins.str name: Name of the IP-Pool
        :param _builtins.str start: Start of the IP address pool
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if ip_pool_type is not None:
            pulumi.set(__self__, "ip_pool_type", ip_pool_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @_builtins.property
    @pulumi.getter
    def end(self) -> Optional[_builtins.str]:
        """
        End of the IP address pool
        """
        return pulumi.get(self, "end")

    @_builtins.property
    @pulumi.getter
    def info(self) -> Optional['outputs.IPPoolInfoResponse']:
        """
        IPPool info
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter(name="ipPoolType")
    def ip_pool_type(self) -> Optional[_builtins.str]:
        """
        Type of the IP Pool [vm, vippool]
        """
        return pulumi.get(self, "ip_pool_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the IP-Pool
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def start(self) -> Optional[_builtins.str]:
        """
        Start of the IP address pool
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: Optional[_builtins.str] = None):
        """
        Identity for the resource.
        :param _builtins.str principal_id: The principal ID of resource identity.
        :param _builtins.str tenant_id: The tenant ID of resource.
        :param _builtins.str type: The identity type.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ImageArmReferenceResponse(dict):
    """
    The ARM ID for a Gallery Image.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ARM ID for a Gallery Image.
        :param _builtins.str id: The ARM ID for an image resource used by the virtual machine instance.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for an image resource used by the virtual machine instance.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class InfrastructureNetworkResponse(dict):
    """
    The InfrastructureNetwork of a AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "ipPools":
            suggest = "ip_pools"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "useDhcp":
            suggest = "use_dhcp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfrastructureNetworkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfrastructureNetworkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfrastructureNetworkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[_builtins.str]] = None,
                 gateway: Optional[_builtins.str] = None,
                 ip_pools: Optional[Sequence['outputs.IpPoolsResponse']] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 use_dhcp: Optional[_builtins.bool] = None):
        """
        The InfrastructureNetwork of a AzureStackHCI Cluster.
        :param Sequence[_builtins.str] dns_servers: IPv4 address of the DNS servers in your environment.
        :param _builtins.str gateway: Default gateway that should be used for the provided IP address space.
        :param Sequence['IpPoolsResponse'] ip_pools: Range of IP addresses from which addresses are allocated for nodes within a subnet.
        :param _builtins.str subnet_mask: Subnet mask that matches the provided IP address space.
        :param _builtins.bool use_dhcp: Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if use_dhcp is not None:
            pulumi.set(__self__, "use_dhcp", use_dhcp)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[_builtins.str]]:
        """
        IPv4 address of the DNS servers in your environment.
        """
        return pulumi.get(self, "dns_servers")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Default gateway that should be used for the provided IP address space.
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[Sequence['outputs.IpPoolsResponse']]:
        """
        Range of IP addresses from which addresses are allocated for nodes within a subnet.
        """
        return pulumi.get(self, "ip_pools")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet mask that matches the provided IP address space.
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="useDhcp")
    def use_dhcp(self) -> Optional[_builtins.bool]:
        """
        Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        return pulumi.get(self, "use_dhcp")


@pulumi.output_type
class InstanceViewStatusResponse(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceViewStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceViewStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceViewStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 display_status: Optional[_builtins.str] = None,
                 level: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 time: Optional[_builtins.str] = None):
        """
        Instance view status.
        :param _builtins.str code: The status code.
        :param _builtins.str display_status: The short localizable label for the status.
        :param _builtins.str level: The level code.
        :param _builtins.str message: The detailed status message, including for alerts and error messages.
        :param _builtins.str time: The time of the status.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[_builtins.str]:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.str]:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class IntentsResponse(dict):
    """
    The Intents of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterPropertyOverrides":
            suggest = "adapter_property_overrides"
        elif key == "intentAdapters":
            suggest = "intent_adapters"
        elif key == "intentName":
            suggest = "intent_name"
        elif key == "intentType":
            suggest = "intent_type"
        elif key == "isComputeIntentSet":
            suggest = "is_compute_intent_set"
        elif key == "isManagementIntentSet":
            suggest = "is_management_intent_set"
        elif key == "isNetworkIntentType":
            suggest = "is_network_intent_type"
        elif key == "isOnlyStorage":
            suggest = "is_only_storage"
        elif key == "isOnlyStretch":
            suggest = "is_only_stretch"
        elif key == "isStorageIntentSet":
            suggest = "is_storage_intent_set"
        elif key == "isStretchIntentSet":
            suggest = "is_stretch_intent_set"
        elif key == "overrideAdapterProperty":
            suggest = "override_adapter_property"
        elif key == "overrideQosPolicy":
            suggest = "override_qos_policy"
        elif key == "overrideVirtualSwitchConfiguration":
            suggest = "override_virtual_switch_configuration"
        elif key == "qosPolicyOverrides":
            suggest = "qos_policy_overrides"
        elif key == "virtualSwitchConfigurationOverrides":
            suggest = "virtual_switch_configuration_overrides"
        elif key == "trafficType":
            suggest = "traffic_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter_property_overrides: 'outputs.AdapterPropertyOverridesResponse',
                 intent_adapters: Sequence[_builtins.str],
                 intent_name: _builtins.str,
                 intent_type: _builtins.float,
                 is_compute_intent_set: _builtins.bool,
                 is_management_intent_set: _builtins.bool,
                 is_network_intent_type: _builtins.bool,
                 is_only_storage: _builtins.bool,
                 is_only_stretch: _builtins.bool,
                 is_storage_intent_set: _builtins.bool,
                 is_stretch_intent_set: _builtins.bool,
                 override_adapter_property: _builtins.bool,
                 override_qos_policy: _builtins.bool,
                 override_virtual_switch_configuration: _builtins.bool,
                 qos_policy_overrides: 'outputs.QosPolicyOverridesResponse',
                 scope: _builtins.float,
                 virtual_switch_configuration_overrides: 'outputs.VirtualSwitchConfigurationOverridesResponse',
                 adapter: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None,
                 traffic_type: Optional[Sequence[_builtins.str]] = None):
        """
        The Intents of a cluster.
        :param 'AdapterPropertyOverridesResponse' adapter_property_overrides: Set Adapter PropertyOverrides for cluster.
        :param Sequence[_builtins.str] intent_adapters: Array of adapters used for the network intent.
        :param _builtins.str intent_name: Name of the network intent you wish to create.
        :param _builtins.float intent_type: IntentType for host network intent.
        :param _builtins.bool is_compute_intent_set: IsComputeIntentSet for host network intent.
        :param _builtins.bool is_management_intent_set: IsManagementIntentSet for host network intent.
        :param _builtins.bool is_network_intent_type: IsNetworkIntentType for host network intent.
        :param _builtins.bool is_only_storage: IntentType for host network intent.
        :param _builtins.bool is_only_stretch: IsOnlyStretch for host network intent.
        :param _builtins.bool is_storage_intent_set: IsStorageIntentSet for host network intent.
        :param _builtins.bool is_stretch_intent_set: IsStretchIntentSet for host network intent.
        :param _builtins.bool override_adapter_property: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param _builtins.bool override_qos_policy: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param _builtins.bool override_virtual_switch_configuration: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param 'QosPolicyOverridesResponse' qos_policy_overrides: Set QoS PolicyOverrides for cluster.
        :param _builtins.float scope: Scope for host network intent.
        :param 'VirtualSwitchConfigurationOverridesResponse' virtual_switch_configuration_overrides: Set virtualSwitch ConfigurationOverrides for cluster.
        :param Sequence[_builtins.str] adapter: Array of network interfaces used for the network intent.
        :param _builtins.str name: Name of the network intent you wish to create.
        :param Sequence[_builtins.str] traffic_type: List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        """
        pulumi.set(__self__, "adapter_property_overrides", adapter_property_overrides)
        pulumi.set(__self__, "intent_adapters", intent_adapters)
        pulumi.set(__self__, "intent_name", intent_name)
        pulumi.set(__self__, "intent_type", intent_type)
        pulumi.set(__self__, "is_compute_intent_set", is_compute_intent_set)
        pulumi.set(__self__, "is_management_intent_set", is_management_intent_set)
        pulumi.set(__self__, "is_network_intent_type", is_network_intent_type)
        pulumi.set(__self__, "is_only_storage", is_only_storage)
        pulumi.set(__self__, "is_only_stretch", is_only_stretch)
        pulumi.set(__self__, "is_storage_intent_set", is_storage_intent_set)
        pulumi.set(__self__, "is_stretch_intent_set", is_stretch_intent_set)
        pulumi.set(__self__, "override_adapter_property", override_adapter_property)
        pulumi.set(__self__, "override_qos_policy", override_qos_policy)
        pulumi.set(__self__, "override_virtual_switch_configuration", override_virtual_switch_configuration)
        pulumi.set(__self__, "qos_policy_overrides", qos_policy_overrides)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "virtual_switch_configuration_overrides", virtual_switch_configuration_overrides)
        if adapter is not None:
            pulumi.set(__self__, "adapter", adapter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="adapterPropertyOverrides")
    def adapter_property_overrides(self) -> 'outputs.AdapterPropertyOverridesResponse':
        """
        Set Adapter PropertyOverrides for cluster.
        """
        return pulumi.get(self, "adapter_property_overrides")

    @_builtins.property
    @pulumi.getter(name="intentAdapters")
    def intent_adapters(self) -> Sequence[_builtins.str]:
        """
        Array of adapters used for the network intent.
        """
        return pulumi.get(self, "intent_adapters")

    @_builtins.property
    @pulumi.getter(name="intentName")
    def intent_name(self) -> _builtins.str:
        """
        Name of the network intent you wish to create.
        """
        return pulumi.get(self, "intent_name")

    @_builtins.property
    @pulumi.getter(name="intentType")
    def intent_type(self) -> _builtins.float:
        """
        IntentType for host network intent.
        """
        return pulumi.get(self, "intent_type")

    @_builtins.property
    @pulumi.getter(name="isComputeIntentSet")
    def is_compute_intent_set(self) -> _builtins.bool:
        """
        IsComputeIntentSet for host network intent.
        """
        return pulumi.get(self, "is_compute_intent_set")

    @_builtins.property
    @pulumi.getter(name="isManagementIntentSet")
    def is_management_intent_set(self) -> _builtins.bool:
        """
        IsManagementIntentSet for host network intent.
        """
        return pulumi.get(self, "is_management_intent_set")

    @_builtins.property
    @pulumi.getter(name="isNetworkIntentType")
    def is_network_intent_type(self) -> _builtins.bool:
        """
        IsNetworkIntentType for host network intent.
        """
        return pulumi.get(self, "is_network_intent_type")

    @_builtins.property
    @pulumi.getter(name="isOnlyStorage")
    def is_only_storage(self) -> _builtins.bool:
        """
        IntentType for host network intent.
        """
        return pulumi.get(self, "is_only_storage")

    @_builtins.property
    @pulumi.getter(name="isOnlyStretch")
    def is_only_stretch(self) -> _builtins.bool:
        """
        IsOnlyStretch for host network intent.
        """
        return pulumi.get(self, "is_only_stretch")

    @_builtins.property
    @pulumi.getter(name="isStorageIntentSet")
    def is_storage_intent_set(self) -> _builtins.bool:
        """
        IsStorageIntentSet for host network intent.
        """
        return pulumi.get(self, "is_storage_intent_set")

    @_builtins.property
    @pulumi.getter(name="isStretchIntentSet")
    def is_stretch_intent_set(self) -> _builtins.bool:
        """
        IsStretchIntentSet for host network intent.
        """
        return pulumi.get(self, "is_stretch_intent_set")

    @_builtins.property
    @pulumi.getter(name="overrideAdapterProperty")
    def override_adapter_property(self) -> _builtins.bool:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_adapter_property")

    @_builtins.property
    @pulumi.getter(name="overrideQosPolicy")
    def override_qos_policy(self) -> _builtins.bool:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_qos_policy")

    @_builtins.property
    @pulumi.getter(name="overrideVirtualSwitchConfiguration")
    def override_virtual_switch_configuration(self) -> _builtins.bool:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_virtual_switch_configuration")

    @_builtins.property
    @pulumi.getter(name="qosPolicyOverrides")
    def qos_policy_overrides(self) -> 'outputs.QosPolicyOverridesResponse':
        """
        Set QoS PolicyOverrides for cluster.
        """
        return pulumi.get(self, "qos_policy_overrides")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.float:
        """
        Scope for host network intent.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="virtualSwitchConfigurationOverrides")
    def virtual_switch_configuration_overrides(self) -> 'outputs.VirtualSwitchConfigurationOverridesResponse':
        """
        Set virtualSwitch ConfigurationOverrides for cluster.
        """
        return pulumi.get(self, "virtual_switch_configuration_overrides")

    @_builtins.property
    @pulumi.getter
    def adapter(self) -> Optional[Sequence[_builtins.str]]:
        """
        Array of network interfaces used for the network intent.
        """
        return pulumi.get(self, "adapter")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the network intent you wish to create.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        """
        return pulumi.get(self, "traffic_type")


@pulumi.output_type
class InterfaceDNSSettingsResponse(dict):
    """
    DNS Settings of the interface
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceDNSSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceDNSSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceDNSSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[_builtins.str]] = None):
        """
        DNS Settings of the interface
        :param Sequence[_builtins.str] dns_servers: List of DNS server IP Addresses for the interface
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of DNS server IP Addresses for the interface
        """
        return pulumi.get(self, "dns_servers")


@pulumi.output_type
class IpPoolsResponse(dict):
    """
    The dnsServers of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endingAddress":
            suggest = "ending_address"
        elif key == "startingAddress":
            suggest = "starting_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpPoolsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpPoolsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpPoolsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ending_address: Optional[_builtins.str] = None,
                 starting_address: Optional[_builtins.str] = None):
        """
        The dnsServers of a device.
        :param _builtins.str ending_address: Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        :param _builtins.str starting_address: Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        if ending_address is not None:
            pulumi.set(__self__, "ending_address", ending_address)
        if starting_address is not None:
            pulumi.set(__self__, "starting_address", starting_address)

    @_builtins.property
    @pulumi.getter(name="endingAddress")
    def ending_address(self) -> Optional[_builtins.str]:
        """
        Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "ending_address")

    @_builtins.property
    @pulumi.getter(name="startingAddress")
    def starting_address(self) -> Optional[_builtins.str]:
        """
        Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "starting_address")


@pulumi.output_type
class IsolatedVmAttestationConfigurationResponse(dict):
    """
    Attestation configurations for isolated VM (e.g. TVM, CVM) of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attestationResourceId":
            suggest = "attestation_resource_id"
        elif key == "attestationServiceEndpoint":
            suggest = "attestation_service_endpoint"
        elif key == "relyingPartyServiceEndpoint":
            suggest = "relying_party_service_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IsolatedVmAttestationConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IsolatedVmAttestationConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IsolatedVmAttestationConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attestation_resource_id: _builtins.str,
                 attestation_service_endpoint: _builtins.str,
                 relying_party_service_endpoint: _builtins.str):
        """
        Attestation configurations for isolated VM (e.g. TVM, CVM) of the cluster.
        :param _builtins.str attestation_resource_id: Fully qualified Azure resource id of the Microsoft Azure attestation resource associated with this cluster.
        :param _builtins.str attestation_service_endpoint: Region specific endpoint for Microsoft Azure Attestation service for the cluster
        :param _builtins.str relying_party_service_endpoint: Region specific endpoint for relying party service.
        """
        pulumi.set(__self__, "attestation_resource_id", attestation_resource_id)
        pulumi.set(__self__, "attestation_service_endpoint", attestation_service_endpoint)
        pulumi.set(__self__, "relying_party_service_endpoint", relying_party_service_endpoint)

    @_builtins.property
    @pulumi.getter(name="attestationResourceId")
    def attestation_resource_id(self) -> _builtins.str:
        """
        Fully qualified Azure resource id of the Microsoft Azure attestation resource associated with this cluster.
        """
        return pulumi.get(self, "attestation_resource_id")

    @_builtins.property
    @pulumi.getter(name="attestationServiceEndpoint")
    def attestation_service_endpoint(self) -> _builtins.str:
        """
        Region specific endpoint for Microsoft Azure Attestation service for the cluster
        """
        return pulumi.get(self, "attestation_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="relyingPartyServiceEndpoint")
    def relying_party_service_endpoint(self) -> _builtins.str:
        """
        Region specific endpoint for relying party service.
        """
        return pulumi.get(self, "relying_party_service_endpoint")


@pulumi.output_type
class LogCollectionErrorResponse(dict):
    """
    Log Collection Error details of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogCollectionErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogCollectionErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogCollectionErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: _builtins.str,
                 error_message: _builtins.str):
        """
        Log Collection Error details of the cluster.
        :param _builtins.str error_code: Error Code of the log collection
        :param _builtins.str error_message: Error Message of the log collection
        """
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_message", error_message)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Error Code of the log collection
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        """
        Error Message of the log collection
        """
        return pulumi.get(self, "error_message")


@pulumi.output_type
class LogCollectionJobSessionResponse(dict):
    """
    Represents a session for collecting logs from an edge device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "correlationId":
            suggest = "correlation_id"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "logSize":
            suggest = "log_size"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeCollected":
            suggest = "time_collected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogCollectionJobSessionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogCollectionJobSessionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogCollectionJobSessionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 correlation_id: _builtins.str,
                 end_time: _builtins.str,
                 log_size: _builtins.int,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 time_collected: _builtins.str):
        """
        Represents a session for collecting logs from an edge device.
        :param _builtins.str correlation_id: A unique identifier for correlating this log collection session with other operations or sessions.
        :param _builtins.str end_time: The timestamp when log collection ended, in ISO 8601 format.
        :param _builtins.int log_size: The size of the collected logs in bytes.
        :param _builtins.str start_time: The timestamp when log collection started, in ISO 8601 format.
        :param _builtins.str status: The status of the log collection session.
        :param _builtins.str time_collected: The total time logs were collected for, in ISO 8601 duration format.
        """
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "log_size", log_size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_collected", time_collected)

    @_builtins.property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> _builtins.str:
        """
        A unique identifier for correlating this log collection session with other operations or sessions.
        """
        return pulumi.get(self, "correlation_id")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The timestamp when log collection ended, in ISO 8601 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="logSize")
    def log_size(self) -> _builtins.int:
        """
        The size of the collected logs in bytes.
        """
        return pulumi.get(self, "log_size")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The timestamp when log collection started, in ISO 8601 format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the log collection session.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> _builtins.str:
        """
        The total time logs were collected for, in ISO 8601 duration format.
        """
        return pulumi.get(self, "time_collected")


@pulumi.output_type
class LogCollectionPropertiesResponse(dict):
    """
    Log Collection properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromDate":
            suggest = "from_date"
        elif key == "lastLogGenerated":
            suggest = "last_log_generated"
        elif key == "logCollectionSessionDetails":
            suggest = "log_collection_session_details"
        elif key == "toDate":
            suggest = "to_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogCollectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogCollectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogCollectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_date: _builtins.str,
                 last_log_generated: _builtins.str,
                 log_collection_session_details: Sequence['outputs.LogCollectionSessionResponse'],
                 to_date: _builtins.str):
        """
        Log Collection properties of the cluster.
        :param _builtins.str from_date: From DateTimeStamp from when logs need to be connected
        :param _builtins.str last_log_generated: Recent DateTimeStamp where logs are successfully generated
        :param _builtins.str to_date: To DateTimeStamp till when logs need to be connected
        """
        pulumi.set(__self__, "from_date", from_date)
        pulumi.set(__self__, "last_log_generated", last_log_generated)
        pulumi.set(__self__, "log_collection_session_details", log_collection_session_details)
        pulumi.set(__self__, "to_date", to_date)

    @_builtins.property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> _builtins.str:
        """
        From DateTimeStamp from when logs need to be connected
        """
        return pulumi.get(self, "from_date")

    @_builtins.property
    @pulumi.getter(name="lastLogGenerated")
    def last_log_generated(self) -> _builtins.str:
        """
        Recent DateTimeStamp where logs are successfully generated
        """
        return pulumi.get(self, "last_log_generated")

    @_builtins.property
    @pulumi.getter(name="logCollectionSessionDetails")
    def log_collection_session_details(self) -> Sequence['outputs.LogCollectionSessionResponse']:
        return pulumi.get(self, "log_collection_session_details")

    @_builtins.property
    @pulumi.getter(name="toDate")
    def to_date(self) -> _builtins.str:
        """
        To DateTimeStamp till when logs need to be connected
        """
        return pulumi.get(self, "to_date")


@pulumi.output_type
class LogCollectionReportedPropertiesResponse(dict):
    """
    Represents the reported properties of a log collection job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentStatus":
            suggest = "deployment_status"
        elif key == "logCollectionSessionDetails":
            suggest = "log_collection_session_details"
        elif key == "percentComplete":
            suggest = "percent_complete"
        elif key == "validationStatus":
            suggest = "validation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogCollectionReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogCollectionReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogCollectionReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_status: 'outputs.EceActionStatusResponse',
                 log_collection_session_details: Sequence['outputs.LogCollectionJobSessionResponse'],
                 percent_complete: _builtins.int,
                 validation_status: 'outputs.EceActionStatusResponse'):
        """
        Represents the reported properties of a log collection job.
        :param 'EceActionStatusResponse' deployment_status: Deployment status of job.
        :param Sequence['LogCollectionJobSessionResponse'] log_collection_session_details: Details of the log collection session.
        :param _builtins.int percent_complete: The percentage of the job that is complete.
        :param 'EceActionStatusResponse' validation_status: Validation status of job.
        """
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "log_collection_session_details", log_collection_session_details)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "validation_status", validation_status)

    @_builtins.property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> 'outputs.EceActionStatusResponse':
        """
        Deployment status of job.
        """
        return pulumi.get(self, "deployment_status")

    @_builtins.property
    @pulumi.getter(name="logCollectionSessionDetails")
    def log_collection_session_details(self) -> Sequence['outputs.LogCollectionJobSessionResponse']:
        """
        Details of the log collection session.
        """
        return pulumi.get(self, "log_collection_session_details")

    @_builtins.property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> _builtins.int:
        """
        The percentage of the job that is complete.
        """
        return pulumi.get(self, "percent_complete")

    @_builtins.property
    @pulumi.getter(name="validationStatus")
    def validation_status(self) -> 'outputs.EceActionStatusResponse':
        """
        Validation status of job.
        """
        return pulumi.get(self, "validation_status")


@pulumi.output_type
class LogCollectionSessionResponse(dict):
    """
    Log Collection Session details of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "correlationId":
            suggest = "correlation_id"
        elif key == "endTimeCollected":
            suggest = "end_time_collected"
        elif key == "logCollectionError":
            suggest = "log_collection_error"
        elif key == "logCollectionJobType":
            suggest = "log_collection_job_type"
        elif key == "logCollectionStatus":
            suggest = "log_collection_status"
        elif key == "logEndTime":
            suggest = "log_end_time"
        elif key == "logSize":
            suggest = "log_size"
        elif key == "logStartTime":
            suggest = "log_start_time"
        elif key == "timeCollected":
            suggest = "time_collected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogCollectionSessionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogCollectionSessionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogCollectionSessionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 correlation_id: _builtins.str,
                 end_time_collected: _builtins.str,
                 log_collection_error: 'outputs.LogCollectionErrorResponse',
                 log_collection_job_type: _builtins.str,
                 log_collection_status: _builtins.str,
                 log_end_time: _builtins.str,
                 log_size: _builtins.float,
                 log_start_time: _builtins.str,
                 time_collected: _builtins.str):
        """
        Log Collection Session details of the cluster.
        :param _builtins.str correlation_id: CorrelationId of the log collection
        :param _builtins.str end_time_collected: End Time of the logs when it was collected
        :param 'LogCollectionErrorResponse' log_collection_error: Log Collection Error details of the cluster.
        :param _builtins.str log_collection_job_type: LogCollection job type
        :param _builtins.str log_collection_status: LogCollection status
        :param _builtins.str log_end_time: End Time of the logs when it was collected
        :param _builtins.float log_size: Size of the logs collected
        :param _builtins.str log_start_time: Start Time of the logs when it was collected
        :param _builtins.str time_collected: Duration of logs collected
        """
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "end_time_collected", end_time_collected)
        pulumi.set(__self__, "log_collection_error", log_collection_error)
        pulumi.set(__self__, "log_collection_job_type", log_collection_job_type)
        pulumi.set(__self__, "log_collection_status", log_collection_status)
        pulumi.set(__self__, "log_end_time", log_end_time)
        pulumi.set(__self__, "log_size", log_size)
        pulumi.set(__self__, "log_start_time", log_start_time)
        pulumi.set(__self__, "time_collected", time_collected)

    @_builtins.property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> _builtins.str:
        """
        CorrelationId of the log collection
        """
        return pulumi.get(self, "correlation_id")

    @_builtins.property
    @pulumi.getter(name="endTimeCollected")
    def end_time_collected(self) -> _builtins.str:
        """
        End Time of the logs when it was collected
        """
        return pulumi.get(self, "end_time_collected")

    @_builtins.property
    @pulumi.getter(name="logCollectionError")
    def log_collection_error(self) -> 'outputs.LogCollectionErrorResponse':
        """
        Log Collection Error details of the cluster.
        """
        return pulumi.get(self, "log_collection_error")

    @_builtins.property
    @pulumi.getter(name="logCollectionJobType")
    def log_collection_job_type(self) -> _builtins.str:
        """
        LogCollection job type
        """
        return pulumi.get(self, "log_collection_job_type")

    @_builtins.property
    @pulumi.getter(name="logCollectionStatus")
    def log_collection_status(self) -> _builtins.str:
        """
        LogCollection status
        """
        return pulumi.get(self, "log_collection_status")

    @_builtins.property
    @pulumi.getter(name="logEndTime")
    def log_end_time(self) -> _builtins.str:
        """
        End Time of the logs when it was collected
        """
        return pulumi.get(self, "log_end_time")

    @_builtins.property
    @pulumi.getter(name="logSize")
    def log_size(self) -> _builtins.float:
        """
        Size of the logs collected
        """
        return pulumi.get(self, "log_size")

    @_builtins.property
    @pulumi.getter(name="logStartTime")
    def log_start_time(self) -> _builtins.str:
        """
        Start Time of the logs when it was collected
        """
        return pulumi.get(self, "log_start_time")

    @_builtins.property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> _builtins.str:
        """
        Duration of logs collected
        """
        return pulumi.get(self, "time_collected")


@pulumi.output_type
class LogicalNetworkArmReferenceResponse(dict):
    """
    The ARM ID for a Logical Network.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ARM ID for a Logical Network.
        :param _builtins.str id: The ARM ID for a Logical Network.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for a Logical Network.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LogicalNetworkPropertiesDhcpOptionsResponse(dict):
    """
    DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalNetworkPropertiesDhcpOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalNetworkPropertiesDhcpOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalNetworkPropertiesDhcpOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[_builtins.str]] = None):
        """
        DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
        :param Sequence[_builtins.str] dns_servers: The list of DNS servers IP addresses.
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of DNS servers IP addresses.
        """
        return pulumi.get(self, "dns_servers")


@pulumi.output_type
class LogicalNetworkStatusProvisioningStatusResponse(dict):
    """
    Describes the status of the provisioning.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalNetworkStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalNetworkStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalNetworkStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        Describes the status of the provisioning.
        :param _builtins.str status: The status of the operation performed on the logical network [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the logical network
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the logical network [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the logical network
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class LogicalNetworkStatusResponse(dict):
    """
    The observed state of logical networks
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalNetworkStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalNetworkStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalNetworkStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.LogicalNetworkStatusProvisioningStatusResponse'] = None):
        """
        The observed state of logical networks
        :param _builtins.str error_code: LogicalNetwork provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param 'LogicalNetworkStatusProvisioningStatusResponse' provisioning_status: Logical network provisioning status
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        LogicalNetwork provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.LogicalNetworkStatusProvisioningStatusResponse']:
        """
        Logical network provisioning status
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class MachineExtensionInstanceViewResponseStatus(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineExtensionInstanceViewResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: _builtins.str,
                 display_status: _builtins.str,
                 level: _builtins.str,
                 message: _builtins.str,
                 time: _builtins.str):
        """
        Instance view status.
        :param _builtins.str code: The status code.
        :param _builtins.str display_status: The short localizable label for the status.
        :param _builtins.str level: The level code.
        :param _builtins.str message: The detailed status message, including for alerts and error messages.
        :param _builtins.str time: The time of the status.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "display_status", display_status)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> _builtins.str:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MachineExtensionPropertiesResponseInstanceView(dict):
    """
    The machine extension instance view.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineExtensionPropertiesResponseInstanceView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineExtensionPropertiesResponseInstanceView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineExtensionPropertiesResponseInstanceView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 type: _builtins.str,
                 type_handler_version: _builtins.str,
                 status: Optional['outputs.MachineExtensionInstanceViewResponseStatus'] = None):
        """
        The machine extension instance view.
        :param _builtins.str name: The machine extension name.
        :param _builtins.str type: Specifies the type of the extension; an example is "CustomScriptExtension".
        :param _builtins.str type_handler_version: Specifies the version of the script handler.
        :param 'MachineExtensionInstanceViewResponseStatus' status: Instance view status.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_handler_version", type_handler_version)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The machine extension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the extension; an example is "CustomScriptExtension".
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> _builtins.str:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.MachineExtensionInstanceViewResponseStatus']:
        """
        Instance view status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param _builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class MarketplaceGalleryImageStatusDownloadStatusResponse(dict):
    """
    The download status of the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadSizeInMB":
            suggest = "download_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusDownloadStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusDownloadStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusDownloadStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_size_in_mb: Optional[_builtins.float] = None):
        """
        The download status of the gallery image
        :param _builtins.float download_size_in_mb: The downloaded sized of the image in MB
        """
        if download_size_in_mb is not None:
            pulumi.set(__self__, "download_size_in_mb", download_size_in_mb)

    @_builtins.property
    @pulumi.getter(name="downloadSizeInMB")
    def download_size_in_mb(self) -> Optional[_builtins.float]:
        """
        The downloaded sized of the image in MB
        """
        return pulumi.get(self, "download_size_in_mb")


@pulumi.output_type
class MarketplaceGalleryImageStatusProvisioningStatusResponse(dict):
    """
    Marketplace GalleryImage provisioning status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        Marketplace GalleryImage provisioning status
        :param _builtins.str status: The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the gallery image
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the gallery image
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponse(dict):
    """
    The observed state of marketplace gallery images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.MarketplaceGalleryImageStatusDownloadStatusResponse'] = None,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 progress_percentage: Optional[_builtins.float] = None,
                 provisioning_status: Optional['outputs.MarketplaceGalleryImageStatusProvisioningStatusResponse'] = None):
        """
        The observed state of marketplace gallery images
        :param 'MarketplaceGalleryImageStatusDownloadStatusResponse' download_status: The download status of the gallery image
        :param _builtins.str error_code: MarketplaceGalleryImage provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param _builtins.float progress_percentage: The progress of the operation in percentage
        :param 'MarketplaceGalleryImageStatusProvisioningStatusResponse' provisioning_status: Provisioning status of marketplace gallery image
        """
        if download_status is not None:
            pulumi.set(__self__, "download_status", download_status)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if progress_percentage is not None:
            pulumi.set(__self__, "progress_percentage", progress_percentage)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.MarketplaceGalleryImageStatusDownloadStatusResponse']:
        """
        The download status of the gallery image
        """
        return pulumi.get(self, "download_status")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        MarketplaceGalleryImage provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[_builtins.float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.MarketplaceGalleryImageStatusProvisioningStatusResponse']:
        """
        Provisioning status of marketplace gallery image
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class NetworkControllerResponse(dict):
    """
    network controller config for SDN Integration to deploy AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macAddressPoolStart":
            suggest = "mac_address_pool_start"
        elif key == "macAddressPoolStop":
            suggest = "mac_address_pool_stop"
        elif key == "networkVirtualizationEnabled":
            suggest = "network_virtualization_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkControllerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkControllerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkControllerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac_address_pool_start: Optional[_builtins.str] = None,
                 mac_address_pool_stop: Optional[_builtins.str] = None,
                 network_virtualization_enabled: Optional[_builtins.bool] = None):
        """
        network controller config for SDN Integration to deploy AzureStackHCI Cluster.
        :param _builtins.str mac_address_pool_start: macAddressPoolStart of network controller used for SDN Integration.
        :param _builtins.str mac_address_pool_stop: macAddressPoolStop of network controller used for SDN Integration.
        :param _builtins.bool network_virtualization_enabled: NetworkVirtualizationEnabled of network controller used for SDN Integration.
        """
        if mac_address_pool_start is not None:
            pulumi.set(__self__, "mac_address_pool_start", mac_address_pool_start)
        if mac_address_pool_stop is not None:
            pulumi.set(__self__, "mac_address_pool_stop", mac_address_pool_stop)
        if network_virtualization_enabled is not None:
            pulumi.set(__self__, "network_virtualization_enabled", network_virtualization_enabled)

    @_builtins.property
    @pulumi.getter(name="macAddressPoolStart")
    def mac_address_pool_start(self) -> Optional[_builtins.str]:
        """
        macAddressPoolStart of network controller used for SDN Integration.
        """
        return pulumi.get(self, "mac_address_pool_start")

    @_builtins.property
    @pulumi.getter(name="macAddressPoolStop")
    def mac_address_pool_stop(self) -> Optional[_builtins.str]:
        """
        macAddressPoolStop of network controller used for SDN Integration.
        """
        return pulumi.get(self, "mac_address_pool_stop")

    @_builtins.property
    @pulumi.getter(name="networkVirtualizationEnabled")
    def network_virtualization_enabled(self) -> Optional[_builtins.bool]:
        """
        NetworkVirtualizationEnabled of network controller used for SDN Integration.
        """
        return pulumi.get(self, "network_virtualization_enabled")


@pulumi.output_type
class NetworkInterfaceArmReferenceResponse(dict):
    """
    The ARM ID for a Network Interface.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ARM ID for a Network Interface.
        :param _builtins.str id: The ARM ID for a Network Interface.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for a Network Interface.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class NetworkInterfaceStatusProvisioningStatusResponse(dict):
    """
    Network interface provisioning status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        Network interface provisioning status
        :param _builtins.str status: The status of the operation performed on the network interface [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the network interface
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the network interface [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the network interface
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class NetworkInterfaceStatusResponse(dict):
    """
    The observed state of network interfaces
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.NetworkInterfaceStatusProvisioningStatusResponse'] = None):
        """
        The observed state of network interfaces
        :param _builtins.str error_code: NetworkInterface provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param 'NetworkInterfaceStatusProvisioningStatusResponse' provisioning_status: Network interface provisioning status
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        NetworkInterface provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.NetworkInterfaceStatusProvisioningStatusResponse']:
        """
        Network interface provisioning status
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class NetworkSecurityGroupArmReferenceResponse(dict):
    """
    The ARM ID for a Network Security Group.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ARM ID for a Network Security Group.
        :param _builtins.str id: The ARM ID for a Network Security Group.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for a Network Security Group.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class NetworkSecurityGroupStatusProvisioningStatusResponse(dict):
    """
    network security group provisioning status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityGroupStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityGroupStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityGroupStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        network security group provisioning status
        :param _builtins.str status: The status of the operation performed on the network security group [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the network security group
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the network security group [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the network security group
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class NetworkSecurityGroupStatusResponse(dict):
    """
    The observed state of network security group
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityGroupStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityGroupStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityGroupStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.NetworkSecurityGroupStatusProvisioningStatusResponse'] = None):
        """
        The observed state of network security group
        :param _builtins.str error_code: NetworkSecurityGroup provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param 'NetworkSecurityGroupStatusProvisioningStatusResponse' provisioning_status: network security group provisioning status
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        NetworkSecurityGroup provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.NetworkSecurityGroupStatusProvisioningStatusResponse']:
        """
        network security group provisioning status
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class NicDetailResponse(dict):
    """
    The NIC Detail of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterName":
            suggest = "adapter_name"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "defaultGateway":
            suggest = "default_gateway"
        elif key == "defaultIsolationId":
            suggest = "default_isolation_id"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "driverVersion":
            suggest = "driver_version"
        elif key == "interfaceDescription":
            suggest = "interface_description"
        elif key == "ip4Address":
            suggest = "ip4_address"
        elif key == "subnetMask":
            suggest = "subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter_name: Optional[_builtins.str] = None,
                 component_id: Optional[_builtins.str] = None,
                 default_gateway: Optional[_builtins.str] = None,
                 default_isolation_id: Optional[_builtins.str] = None,
                 dns_servers: Optional[Sequence[_builtins.str]] = None,
                 driver_version: Optional[_builtins.str] = None,
                 interface_description: Optional[_builtins.str] = None,
                 ip4_address: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None):
        """
        The NIC Detail of a device.
        :param _builtins.str adapter_name: Adapter Name of NIC
        :param _builtins.str component_id: Component Id of NIC
        :param _builtins.str default_gateway: Default Gateway of NIC
        :param _builtins.str default_isolation_id: Default Isolation of Management NIC
        :param Sequence[_builtins.str] dns_servers: DNS Servers for NIC
        :param _builtins.str driver_version: Driver Version of NIC
        :param _builtins.str interface_description: Interface Description of NIC
        :param _builtins.str ip4_address: Subnet Mask of NIC
        :param _builtins.str subnet_mask: Subnet Mask of NIC
        """
        if adapter_name is not None:
            pulumi.set(__self__, "adapter_name", adapter_name)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if default_isolation_id is not None:
            pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if driver_version is not None:
            pulumi.set(__self__, "driver_version", driver_version)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if ip4_address is not None:
            pulumi.set(__self__, "ip4_address", ip4_address)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @_builtins.property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> Optional[_builtins.str]:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[_builtins.str]:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[_builtins.str]:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @_builtins.property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> Optional[_builtins.str]:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[_builtins.str]]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @_builtins.property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> Optional[_builtins.str]:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[_builtins.str]:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> Optional[_builtins.str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")


@pulumi.output_type
class ObservabilityResponse(dict):
    """
    The Observability of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "episodicDataUpload":
            suggest = "episodic_data_upload"
        elif key == "euLocation":
            suggest = "eu_location"
        elif key == "streamingDataClient":
            suggest = "streaming_data_client"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObservabilityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObservabilityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObservabilityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 episodic_data_upload: Optional[_builtins.bool] = None,
                 eu_location: Optional[_builtins.bool] = None,
                 streaming_data_client: Optional[_builtins.bool] = None):
        """
        The Observability of AzureStackHCI Cluster.
        :param _builtins.bool episodic_data_upload: When set to true, collects log data to facilitate quicker issue resolution.
        :param _builtins.bool eu_location: Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        :param _builtins.bool streaming_data_client: Enables telemetry data to be sent to Microsoft
        """
        if episodic_data_upload is None:
            episodic_data_upload = True
        if episodic_data_upload is not None:
            pulumi.set(__self__, "episodic_data_upload", episodic_data_upload)
        if eu_location is None:
            eu_location = False
        if eu_location is not None:
            pulumi.set(__self__, "eu_location", eu_location)
        if streaming_data_client is None:
            streaming_data_client = True
        if streaming_data_client is not None:
            pulumi.set(__self__, "streaming_data_client", streaming_data_client)

    @_builtins.property
    @pulumi.getter(name="episodicDataUpload")
    def episodic_data_upload(self) -> Optional[_builtins.bool]:
        """
        When set to true, collects log data to facilitate quicker issue resolution.
        """
        return pulumi.get(self, "episodic_data_upload")

    @_builtins.property
    @pulumi.getter(name="euLocation")
    def eu_location(self) -> Optional[_builtins.bool]:
        """
        Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        """
        return pulumi.get(self, "eu_location")

    @_builtins.property
    @pulumi.getter(name="streamingDataClient")
    def streaming_data_client(self) -> Optional[_builtins.bool]:
        """
        Enables telemetry data to be sent to Microsoft
        """
        return pulumi.get(self, "streaming_data_client")


@pulumi.output_type
class OptionalServicesResponse(dict):
    """
    The OptionalServices of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLocation":
            suggest = "custom_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OptionalServicesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OptionalServicesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OptionalServicesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_location: Optional[_builtins.str] = None):
        """
        The OptionalServices of AzureStackHCI Cluster.
        :param _builtins.str custom_location: The name of custom location.
        """
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @_builtins.property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional[_builtins.str]:
        """
        The name of custom location.
        """
        return pulumi.get(self, "custom_location")


@pulumi.output_type
class PerNodeExtensionStateResponse(dict):
    """
    Status of Arc Extension for a particular node in HCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceView":
            suggest = "instance_view"
        elif key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeExtensionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeExtensionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeExtensionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extension: _builtins.str,
                 instance_view: 'outputs.ExtensionInstanceViewResponse',
                 name: _builtins.str,
                 state: _builtins.str,
                 type_handler_version: _builtins.str):
        """
        Status of Arc Extension for a particular node in HCI Cluster.
        :param _builtins.str extension: Fully qualified resource ID for the particular Arc Extension on this node.
        :param 'ExtensionInstanceViewResponse' instance_view: The extension instance view.
        :param _builtins.str name: Name of the node in HCI Cluster.
        :param _builtins.str state: State of Arc Extension in this node.
        :param _builtins.str type_handler_version: Specifies the version of the script handler.
        """
        pulumi.set(__self__, "extension", extension)
        pulumi.set(__self__, "instance_view", instance_view)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type_handler_version", type_handler_version)

    @_builtins.property
    @pulumi.getter
    def extension(self) -> _builtins.str:
        """
        Fully qualified resource ID for the particular Arc Extension on this node.
        """
        return pulumi.get(self, "extension")

    @_builtins.property
    @pulumi.getter(name="instanceView")
    def instance_view(self) -> 'outputs.ExtensionInstanceViewResponse':
        """
        The extension instance view.
        """
        return pulumi.get(self, "instance_view")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the node in HCI Cluster.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of Arc Extension in this node.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> _builtins.str:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class PerNodeRemoteSupportSessionResponse(dict):
    """
    Remote Support Node Session Details on the Node.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "nodeName":
            suggest = "node_name"
        elif key == "sessionEndTime":
            suggest = "session_end_time"
        elif key == "sessionStartTime":
            suggest = "session_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeRemoteSupportSessionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeRemoteSupportSessionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeRemoteSupportSessionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: _builtins.str,
                 duration: _builtins.float,
                 node_name: _builtins.str,
                 session_end_time: _builtins.str,
                 session_start_time: _builtins.str):
        """
        Remote Support Node Session Details on the Node.
        :param _builtins.str access_level: Remote Support Access Level
        :param _builtins.float duration: Duration of Remote Support Enablement
        :param _builtins.str node_name: Name of the node
        :param _builtins.str session_end_time: Remote Support Session EndTime on the Node
        :param _builtins.str session_start_time: Remote Support Session StartTime on the Node
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "session_end_time", session_end_time)
        pulumi.set(__self__, "session_start_time", session_start_time)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> _builtins.str:
        """
        Remote Support Access Level
        """
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.float:
        """
        Duration of Remote Support Enablement
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        Name of the node
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter(name="sessionEndTime")
    def session_end_time(self) -> _builtins.str:
        """
        Remote Support Session EndTime on the Node
        """
        return pulumi.get(self, "session_end_time")

    @_builtins.property
    @pulumi.getter(name="sessionStartTime")
    def session_start_time(self) -> _builtins.str:
        """
        Remote Support Session StartTime on the Node
        """
        return pulumi.get(self, "session_start_time")


@pulumi.output_type
class PerNodeStateResponse(dict):
    """
    Status of Arc agent for a particular node in HCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcInstance":
            suggest = "arc_instance"
        elif key == "arcNodeServicePrincipalObjectId":
            suggest = "arc_node_service_principal_object_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_instance: _builtins.str,
                 arc_node_service_principal_object_id: _builtins.str,
                 name: _builtins.str,
                 state: _builtins.str):
        """
        Status of Arc agent for a particular node in HCI Cluster.
        :param _builtins.str arc_instance: Fully qualified resource ID for the Arc agent of this node.
        :param _builtins.str arc_node_service_principal_object_id: The service principal id of the arc for server node
        :param _builtins.str name: Name of the Node in HCI Cluster
        :param _builtins.str state: State of Arc agent in this node.
        """
        pulumi.set(__self__, "arc_instance", arc_instance)
        pulumi.set(__self__, "arc_node_service_principal_object_id", arc_node_service_principal_object_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="arcInstance")
    def arc_instance(self) -> _builtins.str:
        """
        Fully qualified resource ID for the Arc agent of this node.
        """
        return pulumi.get(self, "arc_instance")

    @_builtins.property
    @pulumi.getter(name="arcNodeServicePrincipalObjectId")
    def arc_node_service_principal_object_id(self) -> _builtins.str:
        """
        The service principal id of the arc for server node
        """
        return pulumi.get(self, "arc_node_service_principal_object_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Node in HCI Cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of Arc agent in this node.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class PhysicalNodesResponse(dict):
    """
    The PhysicalNodes of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhysicalNodesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhysicalNodesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhysicalNodesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        The PhysicalNodes of a cluster.
        :param _builtins.str ipv4_address: The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        :param _builtins.str name: NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class QosPolicyOverridesResponse(dict):
    """
    The QoSPolicyOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPercentageSMB":
            suggest = "bandwidth_percentage_smb"
        elif key == "priorityValue8021ActionCluster":
            suggest = "priority_value8021_action_cluster"
        elif key == "priorityValue8021ActionSMB":
            suggest = "priority_value8021_action_smb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QosPolicyOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QosPolicyOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QosPolicyOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_percentage_smb: Optional[_builtins.str] = None,
                 priority_value8021_action_cluster: Optional[_builtins.str] = None,
                 priority_value8021_action_smb: Optional[_builtins.str] = None):
        """
        The QoSPolicyOverrides of a cluster.
        :param _builtins.str bandwidth_percentage_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param _builtins.str priority_value8021_action_cluster: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param _builtins.str priority_value8021_action_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        if bandwidth_percentage_smb is not None:
            pulumi.set(__self__, "bandwidth_percentage_smb", bandwidth_percentage_smb)
        if priority_value8021_action_cluster is not None:
            pulumi.set(__self__, "priority_value8021_action_cluster", priority_value8021_action_cluster)
        if priority_value8021_action_smb is not None:
            pulumi.set(__self__, "priority_value8021_action_smb", priority_value8021_action_smb)

    @_builtins.property
    @pulumi.getter(name="bandwidthPercentageSMB")
    def bandwidth_percentage_smb(self) -> Optional[_builtins.str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "bandwidth_percentage_smb")

    @_builtins.property
    @pulumi.getter(name="priorityValue8021ActionCluster")
    def priority_value8021_action_cluster(self) -> Optional[_builtins.str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_cluster")

    @_builtins.property
    @pulumi.getter(name="priorityValue8021ActionSMB")
    def priority_value8021_action_smb(self) -> Optional[_builtins.str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_smb")


@pulumi.output_type
class RemoteSupportJobNodeSettingsResponse(dict):
    """
    Represents the settings of a remote support node.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionErrorMessage":
            suggest = "connection_error_message"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemoteSupportJobNodeSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemoteSupportJobNodeSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemoteSupportJobNodeSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_error_message: _builtins.str,
                 connection_status: _builtins.str,
                 created_at: _builtins.str,
                 state: _builtins.str,
                 updated_at: _builtins.str):
        """
        Represents the settings of a remote support node.
        :param _builtins.str connection_error_message: The error message, if any, from the last connection attempt.
        :param _builtins.str connection_status: The current connection status of the remote support session.
        :param _builtins.str created_at: The timestamp when the node settings were created, in UTC.
        :param _builtins.str state: The state of the remote support node.
        :param _builtins.str updated_at: The timestamp when the node settings were last updated, in UTC.
        """
        pulumi.set(__self__, "connection_error_message", connection_error_message)
        pulumi.set(__self__, "connection_status", connection_status)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="connectionErrorMessage")
    def connection_error_message(self) -> _builtins.str:
        """
        The error message, if any, from the last connection attempt.
        """
        return pulumi.get(self, "connection_error_message")

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> _builtins.str:
        """
        The current connection status of the remote support session.
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The timestamp when the node settings were created, in UTC.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the remote support node.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The timestamp when the node settings were last updated, in UTC.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class RemoteSupportJobReportedPropertiesResponse(dict):
    """
    Represents the reported properties of a remote support job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentStatus":
            suggest = "deployment_status"
        elif key == "nodeSettings":
            suggest = "node_settings"
        elif key == "percentComplete":
            suggest = "percent_complete"
        elif key == "sessionDetails":
            suggest = "session_details"
        elif key == "validationStatus":
            suggest = "validation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemoteSupportJobReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemoteSupportJobReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemoteSupportJobReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_status: 'outputs.EceActionStatusResponse',
                 node_settings: 'outputs.RemoteSupportJobNodeSettingsResponse',
                 percent_complete: _builtins.int,
                 session_details: Sequence['outputs.RemoteSupportSessionResponse'],
                 validation_status: 'outputs.EceActionStatusResponse'):
        """
        Represents the reported properties of a remote support job.
        :param 'EceActionStatusResponse' deployment_status: Deployment status of job.
        :param 'RemoteSupportJobNodeSettingsResponse' node_settings: Optional settings for configuring the node for remote support.
        :param _builtins.int percent_complete: The percentage of the job that is complete.
        :param Sequence['RemoteSupportSessionResponse'] session_details: Details of the remote support session.
        :param 'EceActionStatusResponse' validation_status: Validation status of job.
        """
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "node_settings", node_settings)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "session_details", session_details)
        pulumi.set(__self__, "validation_status", validation_status)

    @_builtins.property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> 'outputs.EceActionStatusResponse':
        """
        Deployment status of job.
        """
        return pulumi.get(self, "deployment_status")

    @_builtins.property
    @pulumi.getter(name="nodeSettings")
    def node_settings(self) -> 'outputs.RemoteSupportJobNodeSettingsResponse':
        """
        Optional settings for configuring the node for remote support.
        """
        return pulumi.get(self, "node_settings")

    @_builtins.property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> _builtins.int:
        """
        The percentage of the job that is complete.
        """
        return pulumi.get(self, "percent_complete")

    @_builtins.property
    @pulumi.getter(name="sessionDetails")
    def session_details(self) -> Sequence['outputs.RemoteSupportSessionResponse']:
        """
        Details of the remote support session.
        """
        return pulumi.get(self, "session_details")

    @_builtins.property
    @pulumi.getter(name="validationStatus")
    def validation_status(self) -> 'outputs.EceActionStatusResponse':
        """
        Validation status of job.
        """
        return pulumi.get(self, "validation_status")


@pulumi.output_type
class RemoteSupportNodeSettingsResponse(dict):
    """
    Remote Support Node Settings of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcResourceId":
            suggest = "arc_resource_id"
        elif key == "connectionErrorMessage":
            suggest = "connection_error_message"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "transcriptLocation":
            suggest = "transcript_location"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemoteSupportNodeSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemoteSupportNodeSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemoteSupportNodeSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_resource_id: _builtins.str,
                 connection_error_message: _builtins.str,
                 connection_status: _builtins.str,
                 created_at: _builtins.str,
                 state: _builtins.str,
                 transcript_location: _builtins.str,
                 updated_at: _builtins.str):
        """
        Remote Support Node Settings of the cluster.
        :param _builtins.str arc_resource_id: Arc ResourceId of the Node
        :param _builtins.str connection_error_message: Remote Support Access Connection Error Message on the Node
        :param _builtins.str connection_status: Remote Support Access Connection Status on the Node
        :param _builtins.str created_at: Remote Support Enablement Request Created TimeStamp on the Node
        :param _builtins.str state: Remote Support Access Connection State on the Node
        :param _builtins.str transcript_location: Remote Support Transcript location on the node
        :param _builtins.str updated_at: Remote Support Enablement Request Updated TimeStamp on the Node
        """
        pulumi.set(__self__, "arc_resource_id", arc_resource_id)
        pulumi.set(__self__, "connection_error_message", connection_error_message)
        pulumi.set(__self__, "connection_status", connection_status)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "transcript_location", transcript_location)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="arcResourceId")
    def arc_resource_id(self) -> _builtins.str:
        """
        Arc ResourceId of the Node
        """
        return pulumi.get(self, "arc_resource_id")

    @_builtins.property
    @pulumi.getter(name="connectionErrorMessage")
    def connection_error_message(self) -> _builtins.str:
        """
        Remote Support Access Connection Error Message on the Node
        """
        return pulumi.get(self, "connection_error_message")

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> _builtins.str:
        """
        Remote Support Access Connection Status on the Node
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Remote Support Enablement Request Created TimeStamp on the Node
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Remote Support Access Connection State on the Node
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="transcriptLocation")
    def transcript_location(self) -> _builtins.str:
        """
        Remote Support Transcript location on the node
        """
        return pulumi.get(self, "transcript_location")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Remote Support Enablement Request Updated TimeStamp on the Node
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class RemoteSupportPropertiesResponse(dict):
    """
    Remote Support properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "expirationTimeStamp":
            suggest = "expiration_time_stamp"
        elif key == "remoteSupportNodeSettings":
            suggest = "remote_support_node_settings"
        elif key == "remoteSupportSessionDetails":
            suggest = "remote_support_session_details"
        elif key == "remoteSupportType":
            suggest = "remote_support_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemoteSupportPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemoteSupportPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemoteSupportPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: _builtins.str,
                 expiration_time_stamp: _builtins.str,
                 remote_support_node_settings: Sequence['outputs.RemoteSupportNodeSettingsResponse'],
                 remote_support_session_details: Sequence['outputs.PerNodeRemoteSupportSessionResponse'],
                 remote_support_type: _builtins.str):
        """
        Remote Support properties of the cluster.
        :param _builtins.str access_level: Remote Support Access Level
        :param _builtins.str expiration_time_stamp: Expiration DateTimeStamp when Remote Support Access will be expired
        :param _builtins.str remote_support_type: Remote Support Type for cluster
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "expiration_time_stamp", expiration_time_stamp)
        pulumi.set(__self__, "remote_support_node_settings", remote_support_node_settings)
        pulumi.set(__self__, "remote_support_session_details", remote_support_session_details)
        pulumi.set(__self__, "remote_support_type", remote_support_type)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> _builtins.str:
        """
        Remote Support Access Level
        """
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter(name="expirationTimeStamp")
    def expiration_time_stamp(self) -> _builtins.str:
        """
        Expiration DateTimeStamp when Remote Support Access will be expired
        """
        return pulumi.get(self, "expiration_time_stamp")

    @_builtins.property
    @pulumi.getter(name="remoteSupportNodeSettings")
    def remote_support_node_settings(self) -> Sequence['outputs.RemoteSupportNodeSettingsResponse']:
        return pulumi.get(self, "remote_support_node_settings")

    @_builtins.property
    @pulumi.getter(name="remoteSupportSessionDetails")
    def remote_support_session_details(self) -> Sequence['outputs.PerNodeRemoteSupportSessionResponse']:
        return pulumi.get(self, "remote_support_session_details")

    @_builtins.property
    @pulumi.getter(name="remoteSupportType")
    def remote_support_type(self) -> _builtins.str:
        """
        Remote Support Type for cluster
        """
        return pulumi.get(self, "remote_support_type")


@pulumi.output_type
class RemoteSupportSessionResponse(dict):
    """
    Represents a remote support session.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLevel":
            suggest = "access_level"
        elif key == "sessionEndTime":
            suggest = "session_end_time"
        elif key == "sessionId":
            suggest = "session_id"
        elif key == "sessionStartTime":
            suggest = "session_start_time"
        elif key == "transcriptLocation":
            suggest = "transcript_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemoteSupportSessionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemoteSupportSessionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemoteSupportSessionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_level: _builtins.str,
                 session_end_time: _builtins.str,
                 session_id: _builtins.str,
                 session_start_time: _builtins.str,
                 transcript_location: _builtins.str):
        """
        Represents a remote support session.
        :param _builtins.str access_level: The level of access granted during the remote support session.
        :param _builtins.str session_end_time: The end time of the remote support session, in UTC.
        :param _builtins.str session_id: Unique session Id.
        :param _builtins.str session_start_time: The start time of the remote support session, in UTC.
        :param _builtins.str transcript_location: The location where the session transcript is stored.
        """
        pulumi.set(__self__, "access_level", access_level)
        pulumi.set(__self__, "session_end_time", session_end_time)
        pulumi.set(__self__, "session_id", session_id)
        pulumi.set(__self__, "session_start_time", session_start_time)
        pulumi.set(__self__, "transcript_location", transcript_location)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> _builtins.str:
        """
        The level of access granted during the remote support session.
        """
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter(name="sessionEndTime")
    def session_end_time(self) -> _builtins.str:
        """
        The end time of the remote support session, in UTC.
        """
        return pulumi.get(self, "session_end_time")

    @_builtins.property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> _builtins.str:
        """
        Unique session Id.
        """
        return pulumi.get(self, "session_id")

    @_builtins.property
    @pulumi.getter(name="sessionStartTime")
    def session_start_time(self) -> _builtins.str:
        """
        The start time of the remote support session, in UTC.
        """
        return pulumi.get(self, "session_start_time")

    @_builtins.property
    @pulumi.getter(name="transcriptLocation")
    def transcript_location(self) -> _builtins.str:
        """
        The location where the session transcript is stored.
        """
        return pulumi.get(self, "transcript_location")


@pulumi.output_type
class RouteResponse(dict):
    """
    Route - Route resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "nextHopIpAddress":
            suggest = "next_hop_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 next_hop_ip_address: Optional[_builtins.str] = None):
        """
        Route - Route resource.
        :param _builtins.str address_prefix: The destination CIDR to which the route applies.
        :param _builtins.str name: Name - name of the subnet
        :param _builtins.str next_hop_ip_address: The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_ip_address is not None:
            pulumi.set(__self__, "next_hop_ip_address", next_hop_ip_address)

    @_builtins.property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[_builtins.str]:
        """
        The destination CIDR to which the route applies.
        """
        return pulumi.get(self, "address_prefix")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name - name of the subnet
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> Optional[_builtins.str]:
        """
        The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        return pulumi.get(self, "next_hop_ip_address")


@pulumi.output_type
class RouteTableResponse(dict):
    """
    Route table resource.
    """
    def __init__(__self__, *,
                 etag: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 routes: Optional[Sequence['outputs.RouteResponse']] = None):
        """
        Route table resource.
        :param _builtins.str etag: A unique read-only string that changes whenever the resource is updated.
        :param _builtins.str name: Resource name.
        :param _builtins.str type: Resource type.
        :param Sequence['RouteResponse'] routes: Collection of routes contained within a route table.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.RouteResponse']]:
        """
        Collection of routes contained within a route table.
        """
        return pulumi.get(self, "routes")


@pulumi.output_type
class SbeCredentialsResponse(dict):
    """
    secrets used for solution builder extension (SBE) partner extensibility.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eceSecretName":
            suggest = "ece_secret_name"
        elif key == "secretLocation":
            suggest = "secret_location"
        elif key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SbeCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SbeCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SbeCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ece_secret_name: Optional[_builtins.str] = None,
                 secret_location: Optional[_builtins.str] = None,
                 secret_name: Optional[_builtins.str] = None):
        """
        secrets used for solution builder extension (SBE) partner extensibility.
        :param _builtins.str ece_secret_name: secret name expected for Enterprise Cloud Engine (ECE).
        :param _builtins.str secret_location: secret URI stored in keyvault.
        :param _builtins.str secret_name: secret name stored in keyvault.
        """
        if ece_secret_name is not None:
            pulumi.set(__self__, "ece_secret_name", ece_secret_name)
        if secret_location is not None:
            pulumi.set(__self__, "secret_location", secret_location)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @_builtins.property
    @pulumi.getter(name="eceSecretName")
    def ece_secret_name(self) -> Optional[_builtins.str]:
        """
        secret name expected for Enterprise Cloud Engine (ECE).
        """
        return pulumi.get(self, "ece_secret_name")

    @_builtins.property
    @pulumi.getter(name="secretLocation")
    def secret_location(self) -> Optional[_builtins.str]:
        """
        secret URI stored in keyvault.
        """
        return pulumi.get(self, "secret_location")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[_builtins.str]:
        """
        secret name stored in keyvault.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class SbeDeploymentInfoResponse(dict):
    """
    Solution builder extension (SBE) package and manifest information for the solution builder extension staged for AzureStackHCI cluster deployment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sbeManifestCreationDate":
            suggest = "sbe_manifest_creation_date"
        elif key == "sbeManifestSource":
            suggest = "sbe_manifest_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SbeDeploymentInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SbeDeploymentInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SbeDeploymentInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family: Optional[_builtins.str] = None,
                 publisher: Optional[_builtins.str] = None,
                 sbe_manifest_creation_date: Optional[_builtins.str] = None,
                 sbe_manifest_source: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        Solution builder extension (SBE) package and manifest information for the solution builder extension staged for AzureStackHCI cluster deployment.
        :param _builtins.str family: SBE family name.
        :param _builtins.str publisher: SBE manifest publisher.
        :param _builtins.str sbe_manifest_creation_date: SBE Manifest Creation Date.
        :param _builtins.str sbe_manifest_source: SBE Manifest Source.
        :param _builtins.str version: SBE package version.
        """
        if family is not None:
            pulumi.set(__self__, "family", family)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sbe_manifest_creation_date is not None:
            pulumi.set(__self__, "sbe_manifest_creation_date", sbe_manifest_creation_date)
        if sbe_manifest_source is not None:
            pulumi.set(__self__, "sbe_manifest_source", sbe_manifest_source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def family(self) -> Optional[_builtins.str]:
        """
        SBE family name.
        """
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> Optional[_builtins.str]:
        """
        SBE manifest publisher.
        """
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter(name="sbeManifestCreationDate")
    def sbe_manifest_creation_date(self) -> Optional[_builtins.str]:
        """
        SBE Manifest Creation Date.
        """
        return pulumi.get(self, "sbe_manifest_creation_date")

    @_builtins.property
    @pulumi.getter(name="sbeManifestSource")
    def sbe_manifest_source(self) -> Optional[_builtins.str]:
        """
        SBE Manifest Source.
        """
        return pulumi.get(self, "sbe_manifest_source")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        SBE package version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SbeDeploymentPackageInfoResponse(dict):
    """
    Solution builder extension (SBE) deployment package information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sbeManifest":
            suggest = "sbe_manifest"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SbeDeploymentPackageInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SbeDeploymentPackageInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SbeDeploymentPackageInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: _builtins.str,
                 message: _builtins.str,
                 sbe_manifest: _builtins.str):
        """
        Solution builder extension (SBE) deployment package information.
        :param _builtins.str code: SBE deployment validation code.
        :param _builtins.str message: A detailed message that explains the SBE package validation result.
        :param _builtins.str sbe_manifest: This represents discovered update results for matching updates and store it as SBE manifest.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "sbe_manifest", sbe_manifest)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        SBE deployment validation code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        A detailed message that explains the SBE package validation result.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="sbeManifest")
    def sbe_manifest(self) -> _builtins.str:
        """
        This represents discovered update results for matching updates and store it as SBE manifest.
        """
        return pulumi.get(self, "sbe_manifest")


@pulumi.output_type
class SbePartnerInfoResponse(dict):
    """
    The solution builder extension (SBE) partner deployment info for cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialList":
            suggest = "credential_list"
        elif key == "partnerProperties":
            suggest = "partner_properties"
        elif key == "sbeDeploymentInfo":
            suggest = "sbe_deployment_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SbePartnerInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SbePartnerInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SbePartnerInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_list: Optional[Sequence['outputs.SbeCredentialsResponse']] = None,
                 partner_properties: Optional[Sequence['outputs.SbePartnerPropertiesResponse']] = None,
                 sbe_deployment_info: Optional['outputs.SbeDeploymentInfoResponse'] = None):
        """
        The solution builder extension (SBE) partner deployment info for cluster.
        :param Sequence['SbeCredentialsResponse'] credential_list: SBE credentials list for AzureStackHCI cluster deployment.
        :param Sequence['SbePartnerPropertiesResponse'] partner_properties: List of SBE partner properties for AzureStackHCI cluster deployment.
        :param 'SbeDeploymentInfoResponse' sbe_deployment_info: SBE package and manifest information for the solution Builder Extension staged for AzureStackHCI cluster deployment.
        """
        if credential_list is not None:
            pulumi.set(__self__, "credential_list", credential_list)
        if partner_properties is not None:
            pulumi.set(__self__, "partner_properties", partner_properties)
        if sbe_deployment_info is not None:
            pulumi.set(__self__, "sbe_deployment_info", sbe_deployment_info)

    @_builtins.property
    @pulumi.getter(name="credentialList")
    def credential_list(self) -> Optional[Sequence['outputs.SbeCredentialsResponse']]:
        """
        SBE credentials list for AzureStackHCI cluster deployment.
        """
        return pulumi.get(self, "credential_list")

    @_builtins.property
    @pulumi.getter(name="partnerProperties")
    def partner_properties(self) -> Optional[Sequence['outputs.SbePartnerPropertiesResponse']]:
        """
        List of SBE partner properties for AzureStackHCI cluster deployment.
        """
        return pulumi.get(self, "partner_properties")

    @_builtins.property
    @pulumi.getter(name="sbeDeploymentInfo")
    def sbe_deployment_info(self) -> Optional['outputs.SbeDeploymentInfoResponse']:
        """
        SBE package and manifest information for the solution Builder Extension staged for AzureStackHCI cluster deployment.
        """
        return pulumi.get(self, "sbe_deployment_info")


@pulumi.output_type
class SbePartnerPropertiesResponse(dict):
    """
    Solution builder extension (SBE) partner properties object.
    """
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        Solution builder extension (SBE) partner properties object.
        :param _builtins.str name: SBE partner property name.
        :param _builtins.str value: SBE partner property value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        SBE partner property name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        SBE partner property value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ScaleUnitsResponse(dict):
    """
    Scale units will contains list of deployment data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentData":
            suggest = "deployment_data"
        elif key == "sbePartnerInfo":
            suggest = "sbe_partner_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleUnitsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleUnitsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleUnitsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_data: 'outputs.DeploymentDataResponse',
                 sbe_partner_info: Optional['outputs.SbePartnerInfoResponse'] = None):
        """
        Scale units will contains list of deployment data
        :param 'DeploymentDataResponse' deployment_data: Deployment Data to deploy AzureStackHCI Cluster.
        :param 'SbePartnerInfoResponse' sbe_partner_info: Solution builder extension (SBE) partner properties
        """
        pulumi.set(__self__, "deployment_data", deployment_data)
        if sbe_partner_info is not None:
            pulumi.set(__self__, "sbe_partner_info", sbe_partner_info)

    @_builtins.property
    @pulumi.getter(name="deploymentData")
    def deployment_data(self) -> 'outputs.DeploymentDataResponse':
        """
        Deployment Data to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "deployment_data")

    @_builtins.property
    @pulumi.getter(name="sbePartnerInfo")
    def sbe_partner_info(self) -> Optional['outputs.SbePartnerInfoResponse']:
        """
        Solution builder extension (SBE) partner properties
        """
        return pulumi.get(self, "sbe_partner_info")


@pulumi.output_type
class SdnIntegrationResponse(dict):
    """
    SDN Integration config to deploy AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkController":
            suggest = "network_controller"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnIntegrationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnIntegrationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnIntegrationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_controller: Optional['outputs.NetworkControllerResponse'] = None):
        """
        SDN Integration config to deploy AzureStackHCI Cluster.
        :param 'NetworkControllerResponse' network_controller: network controller config for SDN Integration to deploy AzureStackHCI Cluster.
        """
        if network_controller is not None:
            pulumi.set(__self__, "network_controller", network_controller)

    @_builtins.property
    @pulumi.getter(name="networkController")
    def network_controller(self) -> Optional['outputs.NetworkControllerResponse']:
        """
        network controller config for SDN Integration to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "network_controller")


@pulumi.output_type
class SecurityComplianceStatusResponse(dict):
    """
    Security compliance properties of the resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAtRestEncrypted":
            suggest = "data_at_rest_encrypted"
        elif key == "dataInTransitProtected":
            suggest = "data_in_transit_protected"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "securedCoreCompliance":
            suggest = "secured_core_compliance"
        elif key == "wdacCompliance":
            suggest = "wdac_compliance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityComplianceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityComplianceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityComplianceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_at_rest_encrypted: _builtins.str,
                 data_in_transit_protected: _builtins.str,
                 last_updated: _builtins.str,
                 secured_core_compliance: _builtins.str,
                 wdac_compliance: _builtins.str):
        """
        Security compliance properties of the resource
        :param _builtins.str data_at_rest_encrypted: Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
        :param _builtins.str data_in_transit_protected: Indicates whether HCI cluster has data in-transit protection.
        :param _builtins.str last_updated: Time in UTC when compliance status was last updated.
        :param _builtins.str secured_core_compliance: Indicates whether HCI hosts meets secured-core server requirements.
        :param _builtins.str wdac_compliance: Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
        """
        pulumi.set(__self__, "data_at_rest_encrypted", data_at_rest_encrypted)
        pulumi.set(__self__, "data_in_transit_protected", data_in_transit_protected)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "secured_core_compliance", secured_core_compliance)
        pulumi.set(__self__, "wdac_compliance", wdac_compliance)

    @_builtins.property
    @pulumi.getter(name="dataAtRestEncrypted")
    def data_at_rest_encrypted(self) -> _builtins.str:
        """
        Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
        """
        return pulumi.get(self, "data_at_rest_encrypted")

    @_builtins.property
    @pulumi.getter(name="dataInTransitProtected")
    def data_in_transit_protected(self) -> _builtins.str:
        """
        Indicates whether HCI cluster has data in-transit protection.
        """
        return pulumi.get(self, "data_in_transit_protected")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        """
        Time in UTC when compliance status was last updated.
        """
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="securedCoreCompliance")
    def secured_core_compliance(self) -> _builtins.str:
        """
        Indicates whether HCI hosts meets secured-core server requirements.
        """
        return pulumi.get(self, "secured_core_compliance")

    @_builtins.property
    @pulumi.getter(name="wdacCompliance")
    def wdac_compliance(self) -> _builtins.str:
        """
        Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
        """
        return pulumi.get(self, "wdac_compliance")


@pulumi.output_type
class ServiceConfigurationResponse(dict):
    """
    Service configuration details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: _builtins.float,
                 service_name: _builtins.str):
        """
        Service configuration details
        :param _builtins.float port: The port on which service is enabled.
        :param _builtins.str service_name: Name of the service.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        """
        The port on which service is enabled.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Name of the service.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class SoftwareAssurancePropertiesResponse(dict):
    """
    Software Assurance properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdated":
            suggest = "last_updated"
        elif key == "softwareAssuranceStatus":
            suggest = "software_assurance_status"
        elif key == "softwareAssuranceIntent":
            suggest = "software_assurance_intent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareAssurancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareAssurancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareAssurancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_updated: _builtins.str,
                 software_assurance_status: _builtins.str,
                 software_assurance_intent: Optional[_builtins.str] = None):
        """
        Software Assurance properties of the cluster.
        :param _builtins.str last_updated: TimeStamp denoting the latest SA benefit applicability is validated.
        :param _builtins.str software_assurance_status: Status of the Software Assurance for the cluster.
        :param _builtins.str software_assurance_intent: Customer Intent for Software Assurance Benefit.
        """
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "software_assurance_status", software_assurance_status)
        if software_assurance_intent is not None:
            pulumi.set(__self__, "software_assurance_intent", software_assurance_intent)

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        """
        TimeStamp denoting the latest SA benefit applicability is validated.
        """
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter(name="softwareAssuranceStatus")
    def software_assurance_status(self) -> _builtins.str:
        """
        Status of the Software Assurance for the cluster.
        """
        return pulumi.get(self, "software_assurance_status")

    @_builtins.property
    @pulumi.getter(name="softwareAssuranceIntent")
    def software_assurance_intent(self) -> Optional[_builtins.str]:
        """
        Customer Intent for Software Assurance Benefit.
        """
        return pulumi.get(self, "software_assurance_intent")


@pulumi.output_type
class SshConfigurationResponse(dict):
    """
    SSH configuration for Linux based VMs running on Azure
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.SshPublicKeyResponse']] = None):
        """
        SSH configuration for Linux based VMs running on Azure
        :param Sequence['SshPublicKeyResponse'] public_keys: The list of SSH public keys used to authenticate with linux based VMs.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @_builtins.property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.SshPublicKeyResponse']]:
        """
        The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class SshPublicKeyResponse(dict):
    """
    Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshPublicKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None):
        """
        Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
        :param _builtins.str key_data: SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://learn.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        :param _builtins.str path: Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[_builtins.str]:
        """
        SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://learn.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        """
        return pulumi.get(self, "key_data")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StepResponse(dict):
    """
    Progress representation of the update run steps.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "expectedExecutionTime":
            suggest = "expected_execution_time"
        elif key == "lastUpdatedTimeUtc":
            suggest = "last_updated_time_utc"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 end_time_utc: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 expected_execution_time: Optional[_builtins.str] = None,
                 last_updated_time_utc: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 start_time_utc: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 steps: Optional[Sequence['outputs.StepResponse']] = None):
        """
        Progress representation of the update run steps.
        :param _builtins.str description: More detailed description of the step.
        :param _builtins.str end_time_utc: When the step reached a terminal state.
        :param _builtins.str error_message: Error message, specified if the step is in a failed state.
        :param _builtins.str expected_execution_time: Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
        :param _builtins.str last_updated_time_utc: Completion time of this step or the last completed sub-step.
        :param _builtins.str name: Name of the step.
        :param _builtins.str start_time_utc: When the step started, or empty if it has not started executing.
        :param _builtins.str status: Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        :param Sequence['StepResponse'] steps: Recursive model for child steps of this step.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time_utc is not None:
            pulumi.set(__self__, "end_time_utc", end_time_utc)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if expected_execution_time is not None:
            pulumi.set(__self__, "expected_execution_time", expected_execution_time)
        if last_updated_time_utc is not None:
            pulumi.set(__self__, "last_updated_time_utc", last_updated_time_utc)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_time_utc is not None:
            pulumi.set(__self__, "start_time_utc", start_time_utc)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        More detailed description of the step.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> Optional[_builtins.str]:
        """
        When the step reached a terminal state.
        """
        return pulumi.get(self, "end_time_utc")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Error message, specified if the step is in a failed state.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="expectedExecutionTime")
    def expected_execution_time(self) -> Optional[_builtins.str]:
        """
        Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
        """
        return pulumi.get(self, "expected_execution_time")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimeUtc")
    def last_updated_time_utc(self) -> Optional[_builtins.str]:
        """
        Completion time of this step or the last completed sub-step.
        """
        return pulumi.get(self, "last_updated_time_utc")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> Optional[_builtins.str]:
        """
        When the step started, or empty if it has not started executing.
        """
        return pulumi.get(self, "start_time_utc")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.StepResponse']]:
        """
        Recursive model for child steps of this step.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class StorageAdapterIPInfoResponse(dict):
    """
    The StorageAdapter physical nodes of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "physicalNode":
            suggest = "physical_node"
        elif key == "subnetMask":
            suggest = "subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageAdapterIPInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageAdapterIPInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageAdapterIPInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: _builtins.str,
                 physical_node: _builtins.str,
                 subnet_mask: _builtins.str):
        """
        The StorageAdapter physical nodes of a cluster.
        :param _builtins.str ipv4_address: The IPv4 address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
        :param _builtins.str physical_node: storage adapter physical node name.
        :param _builtins.str subnet_mask: The SubnetMask address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
        """
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "physical_node", physical_node)
        pulumi.set(__self__, "subnet_mask", subnet_mask)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        The IPv4 address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="physicalNode")
    def physical_node(self) -> _builtins.str:
        """
        storage adapter physical node name.
        """
        return pulumi.get(self, "physical_node")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        The SubnetMask address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "subnet_mask")


@pulumi.output_type
class StorageContainerStatusProvisioningStatusResponse(dict):
    """
    Storage container provisioning status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageContainerStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageContainerStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageContainerStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        Storage container provisioning status
        :param _builtins.str status: The status of the operation performed on the storage container [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the storage container
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the storage container [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the storage container
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class StorageContainerStatusResponse(dict):
    """
    The observed state of storage containers
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableSizeMB":
            suggest = "available_size_mb"
        elif key == "containerSizeMB":
            suggest = "container_size_mb"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageContainerStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageContainerStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageContainerStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 available_size_mb: Optional[_builtins.float] = None,
                 container_size_mb: Optional[_builtins.float] = None,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.StorageContainerStatusProvisioningStatusResponse'] = None):
        """
        The observed state of storage containers
        :param _builtins.float available_size_mb: Amount of space available on the disk in MB
        :param _builtins.float container_size_mb: Total size of the disk in MB
        :param _builtins.str error_code: StorageContainer provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param 'StorageContainerStatusProvisioningStatusResponse' provisioning_status: Storage container's provisioning status
        """
        if available_size_mb is not None:
            pulumi.set(__self__, "available_size_mb", available_size_mb)
        if container_size_mb is not None:
            pulumi.set(__self__, "container_size_mb", container_size_mb)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="availableSizeMB")
    def available_size_mb(self) -> Optional[_builtins.float]:
        """
        Amount of space available on the disk in MB
        """
        return pulumi.get(self, "available_size_mb")

    @_builtins.property
    @pulumi.getter(name="containerSizeMB")
    def container_size_mb(self) -> Optional[_builtins.float]:
        """
        Total size of the disk in MB
        """
        return pulumi.get(self, "container_size_mb")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        StorageContainer provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.StorageContainerStatusProvisioningStatusResponse']:
        """
        Storage container's provisioning status
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class StorageNetworksResponse(dict):
    """
    The StorageNetworks of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAdapterName":
            suggest = "network_adapter_name"
        elif key == "storageAdapterIPInfo":
            suggest = "storage_adapter_ip_info"
        elif key == "storageVlanId":
            suggest = "storage_vlan_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworksResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworksResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworksResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 network_adapter_name: _builtins.str,
                 storage_adapter_ip_info: Sequence['outputs.StorageAdapterIPInfoResponse'],
                 storage_vlan_id: _builtins.str,
                 vlan_id: Optional[_builtins.str] = None):
        """
        The StorageNetworks of a cluster.
        :param _builtins.str name: Name of the storage network.
        :param _builtins.str network_adapter_name: Name of the storage network adapter.
        :param Sequence['StorageAdapterIPInfoResponse'] storage_adapter_ip_info: List of Storage adapter physical nodes config to deploy AzureStackHCI Cluster.
        :param _builtins.str storage_vlan_id: ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        :param _builtins.str vlan_id: ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_adapter_name", network_adapter_name)
        pulumi.set(__self__, "storage_adapter_ip_info", storage_adapter_ip_info)
        pulumi.set(__self__, "storage_vlan_id", storage_vlan_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the storage network.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAdapterName")
    def network_adapter_name(self) -> _builtins.str:
        """
        Name of the storage network adapter.
        """
        return pulumi.get(self, "network_adapter_name")

    @_builtins.property
    @pulumi.getter(name="storageAdapterIPInfo")
    def storage_adapter_ip_info(self) -> Sequence['outputs.StorageAdapterIPInfoResponse']:
        """
        List of Storage adapter physical nodes config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage_adapter_ip_info")

    @_builtins.property
    @pulumi.getter(name="storageVlanId")
    def storage_vlan_id(self) -> _builtins.str:
        """
        ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        return pulumi.get(self, "storage_vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[_builtins.str]:
        """
        ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class StorageResponse(dict):
    """
    The Storage config of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationMode":
            suggest = "configuration_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_mode: Optional[_builtins.str] = None):
        """
        The Storage config of AzureStackHCI Cluster.
        :param _builtins.str configuration_mode: By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        if configuration_mode is None:
            configuration_mode = 'Express'
        if configuration_mode is not None:
            pulumi.set(__self__, "configuration_mode", configuration_mode)

    @_builtins.property
    @pulumi.getter(name="configurationMode")
    def configuration_mode(self) -> Optional[_builtins.str]:
        """
        By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        return pulumi.get(self, "configuration_mode")


@pulumi.output_type
class SubnetIpConfigurationReferenceResponse(dict):
    """
    The ARM ID for a Network Interface.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ARM ID for a Network Interface.
        :param _builtins.str id: The ARM ID for a Network Interface.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for a Network Interface.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SubnetResponse(dict):
    """
    Properties of the subnet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "addressPrefixes":
            suggest = "address_prefixes"
        elif key == "ipAllocationMethod":
            suggest = "ip_allocation_method"
        elif key == "ipConfigurationReferences":
            suggest = "ip_configuration_references"
        elif key == "ipPools":
            suggest = "ip_pools"
        elif key == "networkSecurityGroup":
            suggest = "network_security_group"
        elif key == "routeTable":
            suggest = "route_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[_builtins.str] = None,
                 address_prefixes: Optional[Sequence[_builtins.str]] = None,
                 ip_allocation_method: Optional[_builtins.str] = None,
                 ip_configuration_references: Optional[Sequence['outputs.SubnetIpConfigurationReferenceResponse']] = None,
                 ip_pools: Optional[Sequence['outputs.IPPoolResponse']] = None,
                 name: Optional[_builtins.str] = None,
                 network_security_group: Optional['outputs.NetworkSecurityGroupArmReferenceResponse'] = None,
                 route_table: Optional['outputs.RouteTableResponse'] = None,
                 vlan: Optional[_builtins.int] = None):
        """
        Properties of the subnet.
        :param _builtins.str address_prefix: The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
        :param Sequence[_builtins.str] address_prefixes: List of address prefixes for the subnet.
        :param _builtins.str ip_allocation_method: IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        :param Sequence['SubnetIpConfigurationReferenceResponse'] ip_configuration_references: IPConfigurationReferences - list of IPConfigurationReferences
        :param Sequence['IPPoolResponse'] ip_pools: network associated pool of IP Addresses
        :param _builtins.str name: Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        :param 'NetworkSecurityGroupArmReferenceResponse' network_security_group: NetworkSecurityGroup - Network Security Group attached to the logical network.
        :param 'RouteTableResponse' route_table: Route table resource.
        :param _builtins.int vlan: Vlan to use for the subnet
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefixes is not None:
            pulumi.set(__self__, "address_prefixes", address_prefixes)
        if ip_allocation_method is not None:
            pulumi.set(__self__, "ip_allocation_method", ip_allocation_method)
        if ip_configuration_references is not None:
            pulumi.set(__self__, "ip_configuration_references", ip_configuration_references)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_security_group is not None:
            pulumi.set(__self__, "network_security_group", network_security_group)
        if route_table is not None:
            pulumi.set(__self__, "route_table", route_table)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[_builtins.str]:
        """
        The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
        """
        return pulumi.get(self, "address_prefix")

    @_builtins.property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of address prefixes for the subnet.
        """
        return pulumi.get(self, "address_prefixes")

    @_builtins.property
    @pulumi.getter(name="ipAllocationMethod")
    def ip_allocation_method(self) -> Optional[_builtins.str]:
        """
        IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        """
        return pulumi.get(self, "ip_allocation_method")

    @_builtins.property
    @pulumi.getter(name="ipConfigurationReferences")
    def ip_configuration_references(self) -> Optional[Sequence['outputs.SubnetIpConfigurationReferenceResponse']]:
        """
        IPConfigurationReferences - list of IPConfigurationReferences
        """
        return pulumi.get(self, "ip_configuration_references")

    @_builtins.property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[Sequence['outputs.IPPoolResponse']]:
        """
        network associated pool of IP Addresses
        """
        return pulumi.get(self, "ip_pools")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroup")
    def network_security_group(self) -> Optional['outputs.NetworkSecurityGroupArmReferenceResponse']:
        """
        NetworkSecurityGroup - Network Security Group attached to the logical network.
        """
        return pulumi.get(self, "network_security_group")

    @_builtins.property
    @pulumi.getter(name="routeTable")
    def route_table(self) -> Optional['outputs.RouteTableResponse']:
        """
        Route table resource.
        """
        return pulumi.get(self, "route_table")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[_builtins.int]:
        """
        Vlan to use for the subnet
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SwitchDetailResponse(dict):
    """
    List of switch details for edge device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "switchName":
            suggest = "switch_name"
        elif key == "switchType":
            suggest = "switch_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extensions: Sequence['outputs.SwitchExtensionResponse'],
                 switch_name: _builtins.str,
                 switch_type: _builtins.str):
        """
        List of switch details for edge device.
        :param Sequence['SwitchExtensionResponse'] extensions: This represents extensions installed on virtualSwitch.
        :param _builtins.str switch_name: The name of the switch.
        :param _builtins.str switch_type: The type of the switch. e.g. external, internal.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "switch_name", switch_name)
        pulumi.set(__self__, "switch_type", switch_type)

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Sequence['outputs.SwitchExtensionResponse']:
        """
        This represents extensions installed on virtualSwitch.
        """
        return pulumi.get(self, "extensions")

    @_builtins.property
    @pulumi.getter(name="switchName")
    def switch_name(self) -> _builtins.str:
        """
        The name of the switch.
        """
        return pulumi.get(self, "switch_name")

    @_builtins.property
    @pulumi.getter(name="switchType")
    def switch_type(self) -> _builtins.str:
        """
        The type of the switch. e.g. external, internal.
        """
        return pulumi.get(self, "switch_type")


@pulumi.output_type
class SwitchExtensionResponse(dict):
    """
    This represents extensions installed on virtualSwitch.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionEnabled":
            suggest = "extension_enabled"
        elif key == "extensionName":
            suggest = "extension_name"
        elif key == "switchId":
            suggest = "switch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchExtensionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchExtensionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchExtensionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extension_enabled: _builtins.bool,
                 extension_name: _builtins.str,
                 switch_id: _builtins.str):
        """
        This represents extensions installed on virtualSwitch.
        :param _builtins.bool extension_enabled: This represents whether extension is enabled on virtualSwitch.
        :param _builtins.str extension_name: This will show extension name for virtualSwitch.
        :param _builtins.str switch_id: Unique identifier for virtualSwitch.
        """
        pulumi.set(__self__, "extension_enabled", extension_enabled)
        pulumi.set(__self__, "extension_name", extension_name)
        pulumi.set(__self__, "switch_id", switch_id)

    @_builtins.property
    @pulumi.getter(name="extensionEnabled")
    def extension_enabled(self) -> _builtins.bool:
        """
        This represents whether extension is enabled on virtualSwitch.
        """
        return pulumi.get(self, "extension_enabled")

    @_builtins.property
    @pulumi.getter(name="extensionName")
    def extension_name(self) -> _builtins.str:
        """
        This will show extension name for virtualSwitch.
        """
        return pulumi.get(self, "extension_name")

    @_builtins.property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> _builtins.str:
        """
        Unique identifier for virtualSwitch.
        """
        return pulumi.get(self, "switch_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UpdatePrerequisiteResponse(dict):
    """
    If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageName":
            suggest = "package_name"
        elif key == "updateType":
            suggest = "update_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpdatePrerequisiteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpdatePrerequisiteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpdatePrerequisiteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_name: Optional[_builtins.str] = None,
                 update_type: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
        :param _builtins.str package_name: Friendly name of the prerequisite.
        :param _builtins.str update_type: Updatable component type.
        :param _builtins.str version: Version of the prerequisite.
        """
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[_builtins.str]:
        """
        Friendly name of the prerequisite.
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[_builtins.str]:
        """
        Updatable component type.
        """
        return pulumi.get(self, "update_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Version of the prerequisite.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        User assigned identity properties
        :param _builtins.str client_id: The client ID of the assigned identity.
        :param _builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VMDiskSecurityProfileResponse(dict):
    """
    Specifies the security profile settings for the managed disk. NOTE: It can only be set for Confidential VMs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityEncryptionType":
            suggest = "security_encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMDiskSecurityProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMDiskSecurityProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMDiskSecurityProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_encryption_type: Optional[_builtins.str] = None):
        """
        Specifies the security profile settings for the managed disk. NOTE: It can only be set for Confidential VMs
        :param _builtins.str security_encryption_type: Specifies the EncryptionType of the managed disk. It is set to NonPersistedTPM for not persisting firmware state in the VMGuestState blob. NOTE: It can be set for only Confidential VMs.
        """
        if security_encryption_type is not None:
            pulumi.set(__self__, "security_encryption_type", security_encryption_type)

    @_builtins.property
    @pulumi.getter(name="securityEncryptionType")
    def security_encryption_type(self) -> Optional[_builtins.str]:
        """
        Specifies the EncryptionType of the managed disk. It is set to NonPersistedTPM for not persisting firmware state in the VMGuestState blob. NOTE: It can be set for only Confidential VMs.
        """
        return pulumi.get(self, "security_encryption_type")


@pulumi.output_type
class VirtualHardDiskArmReferenceResponse(dict):
    """
    The ARM ID for a Virtual Hard Disk.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ARM ID for a Virtual Hard Disk.
        :param _builtins.str id: The ARM ID for a Virtual Hard Disk.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for a Virtual Hard Disk.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualHardDiskDownloadStatusResponse(dict):
    """
    The download status of the virtual hard disk
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadedSizeInMB":
            suggest = "downloaded_size_in_mb"
        elif key == "progressPercentage":
            suggest = "progress_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualHardDiskDownloadStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualHardDiskDownloadStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualHardDiskDownloadStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 downloaded_size_in_mb: Optional[_builtins.float] = None,
                 progress_percentage: Optional[_builtins.float] = None):
        """
        The download status of the virtual hard disk
        :param _builtins.str status: The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]
        :param _builtins.float downloaded_size_in_mb: The downloaded sized of the virtual hard disk in MB
        :param _builtins.float progress_percentage: The progress of the operation in percentage
        """
        pulumi.set(__self__, "status", status)
        if downloaded_size_in_mb is not None:
            pulumi.set(__self__, "downloaded_size_in_mb", downloaded_size_in_mb)
        if progress_percentage is not None:
            pulumi.set(__self__, "progress_percentage", progress_percentage)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="downloadedSizeInMB")
    def downloaded_size_in_mb(self) -> Optional[_builtins.float]:
        """
        The downloaded sized of the virtual hard disk in MB
        """
        return pulumi.get(self, "downloaded_size_in_mb")

    @_builtins.property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[_builtins.float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")


@pulumi.output_type
class VirtualHardDiskStatusProvisioningStatusResponse(dict):
    """
    VHD Status provisioning status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualHardDiskStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualHardDiskStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualHardDiskStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        VHD Status provisioning status
        :param _builtins.str status: The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the virtual hard disk
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the virtual hard disk
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class VirtualHardDiskStatusResponse(dict):
    """
    The observed state of virtual hard disks
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"
        elif key == "uploadStatus":
            suggest = "upload_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualHardDiskStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualHardDiskStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualHardDiskStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.VirtualHardDiskDownloadStatusResponse'] = None,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.VirtualHardDiskStatusProvisioningStatusResponse'] = None,
                 upload_status: Optional['outputs.VirtualHardDiskUploadStatusResponse'] = None):
        """
        The observed state of virtual hard disks
        :param 'VirtualHardDiskDownloadStatusResponse' download_status: The download status of the virtual hard disk
        :param _builtins.str error_code: VirtualHardDisk provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param 'VirtualHardDiskStatusProvisioningStatusResponse' provisioning_status: Provisioning status of the vhd
        :param 'VirtualHardDiskUploadStatusResponse' upload_status: The upload status of the virtual hard disk
        """
        if download_status is not None:
            pulumi.set(__self__, "download_status", download_status)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)
        if upload_status is not None:
            pulumi.set(__self__, "upload_status", upload_status)

    @_builtins.property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.VirtualHardDiskDownloadStatusResponse']:
        """
        The download status of the virtual hard disk
        """
        return pulumi.get(self, "download_status")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        VirtualHardDisk provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualHardDiskStatusProvisioningStatusResponse']:
        """
        Provisioning status of the vhd
        """
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="uploadStatus")
    def upload_status(self) -> Optional['outputs.VirtualHardDiskUploadStatusResponse']:
        """
        The upload status of the virtual hard disk
        """
        return pulumi.get(self, "upload_status")


@pulumi.output_type
class VirtualHardDiskUploadStatusResponse(dict):
    """
    The upload status of the virtual hard disk
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "uploadedSizeInMB":
            suggest = "uploaded_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualHardDiskUploadStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualHardDiskUploadStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualHardDiskUploadStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 progress_percentage: Optional[_builtins.float] = None,
                 uploaded_size_in_mb: Optional[_builtins.float] = None):
        """
        The upload status of the virtual hard disk
        :param _builtins.str status: The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]
        :param _builtins.str error_code: VirtualHardDisk upload error code
        :param _builtins.str error_message: Descriptive upload error message
        :param _builtins.float progress_percentage: The progress of the operation in percentage
        :param _builtins.float uploaded_size_in_mb: The uploaded sized of the virtual hard disk in MB
        """
        pulumi.set(__self__, "status", status)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if progress_percentage is not None:
            pulumi.set(__self__, "progress_percentage", progress_percentage)
        if uploaded_size_in_mb is not None:
            pulumi.set(__self__, "uploaded_size_in_mb", uploaded_size_in_mb)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        VirtualHardDisk upload error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive upload error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[_builtins.float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @_builtins.property
    @pulumi.getter(name="uploadedSizeInMB")
    def uploaded_size_in_mb(self) -> Optional[_builtins.float]:
        """
        The uploaded sized of the virtual hard disk in MB
        """
        return pulumi.get(self, "uploaded_size_in_mb")


@pulumi.output_type
class VirtualMachineConfigAgentInstanceViewResponse(dict):
    """
    The instance view of the VM Config Agent running on the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmConfigAgentVersion":
            suggest = "vm_config_agent_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineConfigAgentInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineConfigAgentInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineConfigAgentInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 statuses: Optional[Sequence['outputs.InstanceViewStatusResponse']] = None,
                 vm_config_agent_version: Optional[_builtins.str] = None):
        """
        The instance view of the VM Config Agent running on the virtual machine.
        :param Sequence['InstanceViewStatusResponse'] statuses: The resource status information.
        :param _builtins.str vm_config_agent_version: The VM Config Agent full version.
        """
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if vm_config_agent_version is not None:
            pulumi.set(__self__, "vm_config_agent_version", vm_config_agent_version)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.InstanceViewStatusResponse']]:
        """
        The resource status information.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="vmConfigAgentVersion")
    def vm_config_agent_version(self) -> Optional[_builtins.str]:
        """
        The VM Config Agent full version.
        """
        return pulumi.get(self, "vm_config_agent_version")


@pulumi.output_type
class VirtualMachineInstanceManagedDiskParametersResponse(dict):
    """
    The parameters of a managed disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityProfile":
            suggest = "security_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceManagedDiskParametersResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceManagedDiskParametersResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceManagedDiskParametersResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_profile: Optional['outputs.VMDiskSecurityProfileResponse'] = None):
        """
        The parameters of a managed disk.
        :param 'VMDiskSecurityProfileResponse' security_profile: Specifies the security profile for the managed disk.
        """
        if security_profile is not None:
            pulumi.set(__self__, "security_profile", security_profile)

    @_builtins.property
    @pulumi.getter(name="securityProfile")
    def security_profile(self) -> Optional['outputs.VMDiskSecurityProfileResponse']:
        """
        Specifies the security profile for the managed disk.
        """
        return pulumi.get(self, "security_profile")


@pulumi.output_type
class VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse(dict):
    """
    Dynamic memory config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumMemoryMB":
            suggest = "maximum_memory_mb"
        elif key == "minimumMemoryMB":
            suggest = "minimum_memory_mb"
        elif key == "targetMemoryBuffer":
            suggest = "target_memory_buffer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_memory_mb: Optional[_builtins.float] = None,
                 minimum_memory_mb: Optional[_builtins.float] = None,
                 target_memory_buffer: Optional[_builtins.int] = None):
        """
        Dynamic memory config
        :param _builtins.float maximum_memory_mb: Maximum memory in MB
        :param _builtins.float minimum_memory_mb: Minimum memory in MB
        :param _builtins.int target_memory_buffer: Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        if maximum_memory_mb is not None:
            pulumi.set(__self__, "maximum_memory_mb", maximum_memory_mb)
        if minimum_memory_mb is not None:
            pulumi.set(__self__, "minimum_memory_mb", minimum_memory_mb)
        if target_memory_buffer is not None:
            pulumi.set(__self__, "target_memory_buffer", target_memory_buffer)

    @_builtins.property
    @pulumi.getter(name="maximumMemoryMB")
    def maximum_memory_mb(self) -> Optional[_builtins.float]:
        """
        Maximum memory in MB
        """
        return pulumi.get(self, "maximum_memory_mb")

    @_builtins.property
    @pulumi.getter(name="minimumMemoryMB")
    def minimum_memory_mb(self) -> Optional[_builtins.float]:
        """
        Minimum memory in MB
        """
        return pulumi.get(self, "minimum_memory_mb")

    @_builtins.property
    @pulumi.getter(name="targetMemoryBuffer")
    def target_memory_buffer(self) -> Optional[_builtins.int]:
        """
        Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        return pulumi.get(self, "target_memory_buffer")


@pulumi.output_type
class VirtualMachineInstancePropertiesHardwareProfileResponse(dict):
    """
    HardwareProfile - Specifies the hardware settings for the virtual machine instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicMemoryConfig":
            suggest = "dynamic_memory_config"
        elif key == "memoryMB":
            suggest = "memory_mb"
        elif key == "virtualMachineGPUs":
            suggest = "virtual_machine_gpus"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesHardwareProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesHardwareProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesHardwareProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_memory_config: Optional['outputs.VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse'] = None,
                 memory_mb: Optional[_builtins.float] = None,
                 processors: Optional[_builtins.int] = None,
                 virtual_machine_gpus: Optional[Sequence['outputs.VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse']] = None,
                 vm_size: Optional[_builtins.str] = None):
        """
        HardwareProfile - Specifies the hardware settings for the virtual machine instance.
        :param 'VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse' dynamic_memory_config: Dynamic memory config
        :param _builtins.float memory_mb: RAM in MB for the virtual machine instance
        :param _builtins.int processors: number of processors for the virtual machine instance
        :param Sequence['VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse'] virtual_machine_gpus: virtualMachineGPUs - list of gpus to be attached to the virtual machine instance
        :param _builtins.str vm_size: Enum of VM Sizes
        """
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if virtual_machine_gpus is not None:
            pulumi.set(__self__, "virtual_machine_gpus", virtual_machine_gpus)
        if vm_size is None:
            vm_size = 'Default'
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @_builtins.property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional['outputs.VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse']:
        """
        Dynamic memory config
        """
        return pulumi.get(self, "dynamic_memory_config")

    @_builtins.property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[_builtins.float]:
        """
        RAM in MB for the virtual machine instance
        """
        return pulumi.get(self, "memory_mb")

    @_builtins.property
    @pulumi.getter
    def processors(self) -> Optional[_builtins.int]:
        """
        number of processors for the virtual machine instance
        """
        return pulumi.get(self, "processors")

    @_builtins.property
    @pulumi.getter(name="virtualMachineGPUs")
    def virtual_machine_gpus(self) -> Optional[Sequence['outputs.VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse']]:
        """
        virtualMachineGPUs - list of gpus to be attached to the virtual machine instance
        """
        return pulumi.get(self, "virtual_machine_gpus")

    @_builtins.property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[_builtins.str]:
        """
        Enum of VM Sizes
        """
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse(dict):
    """
    GPU properties - describes the GPU configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentType":
            suggest = "assignment_type"
        elif key == "gpuName":
            suggest = "gpu_name"
        elif key == "partitionSizeMB":
            suggest = "partition_size_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assignment_type: _builtins.str,
                 gpu_name: Optional[_builtins.str] = None,
                 partition_size_mb: Optional[_builtins.float] = None):
        """
        GPU properties - describes the GPU configuration.
        :param _builtins.str assignment_type: GPU assignment type
        :param _builtins.str gpu_name: Name of the GPU
        :param _builtins.float partition_size_mb: Size of gpu partition in MB for GPU-P
        """
        pulumi.set(__self__, "assignment_type", assignment_type)
        if gpu_name is not None:
            pulumi.set(__self__, "gpu_name", gpu_name)
        if partition_size_mb is not None:
            pulumi.set(__self__, "partition_size_mb", partition_size_mb)

    @_builtins.property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> _builtins.str:
        """
        GPU assignment type
        """
        return pulumi.get(self, "assignment_type")

    @_builtins.property
    @pulumi.getter(name="gpuName")
    def gpu_name(self) -> Optional[_builtins.str]:
        """
        Name of the GPU
        """
        return pulumi.get(self, "gpu_name")

    @_builtins.property
    @pulumi.getter(name="partitionSizeMB")
    def partition_size_mb(self) -> Optional[_builtins.float]:
        """
        Size of gpu partition in MB for GPU-P
        """
        return pulumi.get(self, "partition_size_mb")


@pulumi.output_type
class VirtualMachineInstancePropertiesNetworkProfileResponse(dict):
    """
    NetworkProfile - describes the network configuration the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaces":
            suggest = "network_interfaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesNetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesNetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesNetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interfaces: Optional[Sequence['outputs.NetworkInterfaceArmReferenceResponse']] = None):
        """
        NetworkProfile - describes the network configuration the virtual machine instance
        :param Sequence['NetworkInterfaceArmReferenceResponse'] network_interfaces: NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
        """
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.NetworkInterfaceArmReferenceResponse']]:
        """
        NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
        """
        return pulumi.get(self, "network_interfaces")


@pulumi.output_type
class VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse(dict):
    """
    LinuxConfiguration - linux specific configuration values for the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePasswordAuthentication":
            suggest = "disable_password_authentication"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"
        elif key == "provisionVMConfigAgent":
            suggest = "provision_vm_config_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_password_authentication: Optional[_builtins.bool] = None,
                 provision_vm_agent: Optional[_builtins.bool] = None,
                 provision_vm_config_agent: Optional[_builtins.bool] = None,
                 ssh: Optional['outputs.SshConfigurationResponse'] = None):
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine instance
        :param _builtins.bool disable_password_authentication: DisablePasswordAuthentication - whether password authentication should be disabled
        :param _builtins.bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        :param _builtins.bool provision_vm_config_agent: Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        :param 'SshConfigurationResponse' ssh: Specifies the ssh key configuration for a Linux OS.
        """
        if disable_password_authentication is not None:
            pulumi.set(__self__, "disable_password_authentication", disable_password_authentication)
        if provision_vm_agent is None:
            provision_vm_agent = True
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if provision_vm_config_agent is None:
            provision_vm_config_agent = True
        if provision_vm_config_agent is not None:
            pulumi.set(__self__, "provision_vm_config_agent", provision_vm_config_agent)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @_builtins.property
    @pulumi.getter(name="disablePasswordAuthentication")
    def disable_password_authentication(self) -> Optional[_builtins.bool]:
        """
        DisablePasswordAuthentication - whether password authentication should be disabled
        """
        return pulumi.get(self, "disable_password_authentication")

    @_builtins.property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[_builtins.bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @_builtins.property
    @pulumi.getter(name="provisionVMConfigAgent")
    def provision_vm_config_agent(self) -> Optional[_builtins.bool]:
        """
        Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_config_agent")

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.SshConfigurationResponse']:
        """
        Specifies the ssh key configuration for a Linux OS.
        """
        return pulumi.get(self, "ssh")


@pulumi.output_type
class VirtualMachineInstancePropertiesOsProfileResponse(dict):
    """
    OsProfile - describes the configuration of the operating system and sets login data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUsername":
            suggest = "admin_username"
        elif key == "computerName":
            suggest = "computer_name"
        elif key == "linuxConfiguration":
            suggest = "linux_configuration"
        elif key == "windowsConfiguration":
            suggest = "windows_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesOsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesOsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesOsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_username: Optional[_builtins.str] = None,
                 computer_name: Optional[_builtins.str] = None,
                 linux_configuration: Optional['outputs.VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse'] = None,
                 windows_configuration: Optional['outputs.VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse'] = None):
        """
        OsProfile - describes the configuration of the operating system and sets login data
        :param _builtins.str admin_username: AdminUsername - admin username
        :param _builtins.str computer_name: ComputerName - name of the compute
        :param 'VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse' linux_configuration: LinuxConfiguration - linux specific configuration values for the virtual machine instance
        :param 'VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse' windows_configuration: Windows Configuration for the virtual machine instance
        """
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if linux_configuration is not None:
            pulumi.set(__self__, "linux_configuration", linux_configuration)
        if windows_configuration is not None:
            pulumi.set(__self__, "windows_configuration", windows_configuration)

    @_builtins.property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[_builtins.str]:
        """
        AdminUsername - admin username
        """
        return pulumi.get(self, "admin_username")

    @_builtins.property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[_builtins.str]:
        """
        ComputerName - name of the compute
        """
        return pulumi.get(self, "computer_name")

    @_builtins.property
    @pulumi.getter(name="linuxConfiguration")
    def linux_configuration(self) -> Optional['outputs.VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse']:
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine instance
        """
        return pulumi.get(self, "linux_configuration")

    @_builtins.property
    @pulumi.getter(name="windowsConfiguration")
    def windows_configuration(self) -> Optional['outputs.VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse']:
        """
        Windows Configuration for the virtual machine instance
        """
        return pulumi.get(self, "windows_configuration")


@pulumi.output_type
class VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse(dict):
    """
    Windows Configuration for the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutomaticUpdates":
            suggest = "enable_automatic_updates"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"
        elif key == "provisionVMConfigAgent":
            suggest = "provision_vm_config_agent"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_automatic_updates: Optional[_builtins.bool] = None,
                 provision_vm_agent: Optional[_builtins.bool] = None,
                 provision_vm_config_agent: Optional[_builtins.bool] = None,
                 ssh: Optional['outputs.SshConfigurationResponse'] = None,
                 time_zone: Optional[_builtins.str] = None):
        """
        Windows Configuration for the virtual machine instance
        :param _builtins.bool enable_automatic_updates: Whether to EnableAutomaticUpdates on the machine
        :param _builtins.bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        :param _builtins.bool provision_vm_config_agent: Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        :param 'SshConfigurationResponse' ssh: Specifies the ssh key configuration for Windows OS.
        :param _builtins.str time_zone: TimeZone for the virtual machine instance
        """
        if enable_automatic_updates is not None:
            pulumi.set(__self__, "enable_automatic_updates", enable_automatic_updates)
        if provision_vm_agent is None:
            provision_vm_agent = True
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if provision_vm_config_agent is None:
            provision_vm_config_agent = True
        if provision_vm_config_agent is not None:
            pulumi.set(__self__, "provision_vm_config_agent", provision_vm_config_agent)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="enableAutomaticUpdates")
    def enable_automatic_updates(self) -> Optional[_builtins.bool]:
        """
        Whether to EnableAutomaticUpdates on the machine
        """
        return pulumi.get(self, "enable_automatic_updates")

    @_builtins.property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[_builtins.bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @_builtins.property
    @pulumi.getter(name="provisionVMConfigAgent")
    def provision_vm_config_agent(self) -> Optional[_builtins.bool]:
        """
        Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_config_agent")

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.SshConfigurationResponse']:
        """
        Specifies the ssh key configuration for Windows OS.
        """
        return pulumi.get(self, "ssh")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[_builtins.str]:
        """
        TimeZone for the virtual machine instance
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class VirtualMachineInstancePropertiesSecurityProfileResponse(dict):
    """
    SecurityProfile - Specifies the security settings for the virtual machine instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTPM":
            suggest = "enable_tpm"
        elif key == "securityType":
            suggest = "security_type"
        elif key == "uefiSettings":
            suggest = "uefi_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesSecurityProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesSecurityProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesSecurityProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tpm: Optional[_builtins.bool] = None,
                 security_type: Optional[_builtins.str] = None,
                 uefi_settings: Optional['outputs.VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse'] = None):
        """
        SecurityProfile - Specifies the security settings for the virtual machine instance.
        :param _builtins.bool enable_tpm: Enable TPM flag
        :param _builtins.str security_type: Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
        :param 'VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse' uefi_settings: Uefi settings of the virtual machine instance
        """
        if enable_tpm is None:
            enable_tpm = False
        if enable_tpm is not None:
            pulumi.set(__self__, "enable_tpm", enable_tpm)
        if security_type is not None:
            pulumi.set(__self__, "security_type", security_type)
        if uefi_settings is not None:
            pulumi.set(__self__, "uefi_settings", uefi_settings)

    @_builtins.property
    @pulumi.getter(name="enableTPM")
    def enable_tpm(self) -> Optional[_builtins.bool]:
        """
        Enable TPM flag
        """
        return pulumi.get(self, "enable_tpm")

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> Optional[_builtins.str]:
        """
        Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
        """
        return pulumi.get(self, "security_type")

    @_builtins.property
    @pulumi.getter(name="uefiSettings")
    def uefi_settings(self) -> Optional['outputs.VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse']:
        """
        Uefi settings of the virtual machine instance
        """
        return pulumi.get(self, "uefi_settings")


@pulumi.output_type
class VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse(dict):
    """
    Uefi settings - Specifies whether secure boot should be enabled on the virtual machine instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureBootEnabled":
            suggest = "secure_boot_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secure_boot_enabled: Optional[_builtins.bool] = None):
        """
        Uefi settings - Specifies whether secure boot should be enabled on the virtual machine instance.
        :param _builtins.bool secure_boot_enabled: Specifies whether secure boot should be enabled on the virtual machine instance.
        """
        if secure_boot_enabled is None:
            secure_boot_enabled = False
        if secure_boot_enabled is not None:
            pulumi.set(__self__, "secure_boot_enabled", secure_boot_enabled)

    @_builtins.property
    @pulumi.getter(name="secureBootEnabled")
    def secure_boot_enabled(self) -> Optional[_builtins.bool]:
        """
        Specifies whether secure boot should be enabled on the virtual machine instance.
        """
        return pulumi.get(self, "secure_boot_enabled")


@pulumi.output_type
class VirtualMachineInstancePropertiesStorageProfileOsDiskResponse(dict):
    """
    VHD to attach as OS disk
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedDisk":
            suggest = "managed_disk"
        elif key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesStorageProfileOsDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesStorageProfileOsDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesStorageProfileOsDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 managed_disk: Optional['outputs.VirtualMachineInstanceManagedDiskParametersResponse'] = None,
                 os_type: Optional[_builtins.str] = None):
        """
        VHD to attach as OS disk
        :param _builtins.str id: The ARM ID for a Virtual Hard Disk.
        :param 'VirtualMachineInstanceManagedDiskParametersResponse' managed_disk: The managed disk parameters.
        :param _builtins.str os_type: This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_disk is not None:
            pulumi.set(__self__, "managed_disk", managed_disk)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM ID for a Virtual Hard Disk.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="managedDisk")
    def managed_disk(self) -> Optional['outputs.VirtualMachineInstanceManagedDiskParametersResponse']:
        """
        The managed disk parameters.
        """
        return pulumi.get(self, "managed_disk")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class VirtualMachineInstancePropertiesStorageProfileResponse(dict):
    """
    StorageProfile - contains information about the disks and storage information for the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "imageReference":
            suggest = "image_reference"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "vmConfigStoragePathId":
            suggest = "vm_config_storage_path_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesStorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesStorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesStorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.VirtualHardDiskArmReferenceResponse']] = None,
                 image_reference: Optional['outputs.ImageArmReferenceResponse'] = None,
                 os_disk: Optional['outputs.VirtualMachineInstancePropertiesStorageProfileOsDiskResponse'] = None,
                 vm_config_storage_path_id: Optional[_builtins.str] = None):
        """
        StorageProfile - contains information about the disks and storage information for the virtual machine instance
        :param Sequence['VirtualHardDiskArmReferenceResponse'] data_disks: adds data disks to the virtual machine instance
        :param 'ImageArmReferenceResponse' image_reference: Which Image to use for the virtual machine instance
        :param 'VirtualMachineInstancePropertiesStorageProfileOsDiskResponse' os_disk: VHD to attach as OS disk
        :param _builtins.str vm_config_storage_path_id: Id of the storage container that hosts the VM configuration file
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if vm_config_storage_path_id is not None:
            pulumi.set(__self__, "vm_config_storage_path_id", vm_config_storage_path_id)

    @_builtins.property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.VirtualHardDiskArmReferenceResponse']]:
        """
        adds data disks to the virtual machine instance
        """
        return pulumi.get(self, "data_disks")

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional['outputs.ImageArmReferenceResponse']:
        """
        Which Image to use for the virtual machine instance
        """
        return pulumi.get(self, "image_reference")

    @_builtins.property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional['outputs.VirtualMachineInstancePropertiesStorageProfileOsDiskResponse']:
        """
        VHD to attach as OS disk
        """
        return pulumi.get(self, "os_disk")

    @_builtins.property
    @pulumi.getter(name="vmConfigStoragePathId")
    def vm_config_storage_path_id(self) -> Optional[_builtins.str]:
        """
        Id of the storage container that hosts the VM configuration file
        """
        return pulumi.get(self, "vm_config_storage_path_id")


@pulumi.output_type
class VirtualMachineInstanceStatusProvisioningStatusResponse(dict):
    """
    Virtual machine instance provisioning status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceStatusProvisioningStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceStatusProvisioningStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceStatusProvisioningStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 operation_id: Optional[_builtins.str] = None):
        """
        Virtual machine instance provisioning status.
        :param _builtins.str status: The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]
        :param _builtins.str operation_id: The ID of the operation performed on the virtual machine instance
        """
        pulumi.set(__self__, "status", status)
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the virtual machine instance
        """
        return pulumi.get(self, "operation_id")


@pulumi.output_type
class VirtualMachineInstanceStatusResponse(dict):
    """
    The observed state of virtual machine instances
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 power_state: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.VirtualMachineInstanceStatusProvisioningStatusResponse'] = None):
        """
        The observed state of virtual machine instances
        :param _builtins.str error_code: VirtualMachine provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param _builtins.str power_state: The power state of the virtual machine instance
        :param 'VirtualMachineInstanceStatusProvisioningStatusResponse' provisioning_status: Provisioning status of the virtual machine instance
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        VirtualMachine provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[_builtins.str]:
        """
        The power state of the virtual machine instance
        """
        return pulumi.get(self, "power_state")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualMachineInstanceStatusProvisioningStatusResponse']:
        """
        Provisioning status of the virtual machine instance
        """
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualMachineInstanceViewResponse(dict):
    """
    The instance view of a virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmAgent":
            suggest = "vm_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_agent: Optional['outputs.VirtualMachineConfigAgentInstanceViewResponse'] = None):
        """
        The instance view of a virtual machine.
        :param 'VirtualMachineConfigAgentInstanceViewResponse' vm_agent: The VM Config Agent running on the virtual machine.
        """
        if vm_agent is not None:
            pulumi.set(__self__, "vm_agent", vm_agent)

    @_builtins.property
    @pulumi.getter(name="vmAgent")
    def vm_agent(self) -> Optional['outputs.VirtualMachineConfigAgentInstanceViewResponse']:
        """
        The VM Config Agent running on the virtual machine.
        """
        return pulumi.get(self, "vm_agent")


@pulumi.output_type
class VirtualMachinePropertiesResponseDataDisks(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Resource ID of the data disk
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Resource ID of the data disk
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseDynamicMemoryConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumMemoryMB":
            suggest = "maximum_memory_mb"
        elif key == "minimumMemoryMB":
            suggest = "minimum_memory_mb"
        elif key == "targetMemoryBuffer":
            suggest = "target_memory_buffer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseDynamicMemoryConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseDynamicMemoryConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseDynamicMemoryConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_memory_mb: Optional[_builtins.float] = None,
                 minimum_memory_mb: Optional[_builtins.float] = None,
                 target_memory_buffer: Optional[_builtins.int] = None):
        """
        :param _builtins.int target_memory_buffer: Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        if maximum_memory_mb is not None:
            pulumi.set(__self__, "maximum_memory_mb", maximum_memory_mb)
        if minimum_memory_mb is not None:
            pulumi.set(__self__, "minimum_memory_mb", minimum_memory_mb)
        if target_memory_buffer is not None:
            pulumi.set(__self__, "target_memory_buffer", target_memory_buffer)

    @_builtins.property
    @pulumi.getter(name="maximumMemoryMB")
    def maximum_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "maximum_memory_mb")

    @_builtins.property
    @pulumi.getter(name="minimumMemoryMB")
    def minimum_memory_mb(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "minimum_memory_mb")

    @_builtins.property
    @pulumi.getter(name="targetMemoryBuffer")
    def target_memory_buffer(self) -> Optional[_builtins.int]:
        """
        Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        return pulumi.get(self, "target_memory_buffer")


@pulumi.output_type
class VirtualMachinePropertiesResponseHardwareProfile(dict):
    """
    HardwareProfile - Specifies the hardware settings for the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicMemoryConfig":
            suggest = "dynamic_memory_config"
        elif key == "memoryMB":
            suggest = "memory_mb"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseHardwareProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseHardwareProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseHardwareProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_memory_config: Optional['outputs.VirtualMachinePropertiesResponseDynamicMemoryConfig'] = None,
                 memory_mb: Optional[_builtins.float] = None,
                 processors: Optional[_builtins.int] = None,
                 vm_size: Optional[_builtins.str] = None):
        """
        HardwareProfile - Specifies the hardware settings for the virtual machine.
        :param _builtins.float memory_mb: RAM in MB for the virtual machine
        :param _builtins.int processors: number of processors for the virtual machine
        """
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if vm_size is None:
            vm_size = 'Default'
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @_builtins.property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional['outputs.VirtualMachinePropertiesResponseDynamicMemoryConfig']:
        return pulumi.get(self, "dynamic_memory_config")

    @_builtins.property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[_builtins.float]:
        """
        RAM in MB for the virtual machine
        """
        return pulumi.get(self, "memory_mb")

    @_builtins.property
    @pulumi.getter
    def processors(self) -> Optional[_builtins.int]:
        """
        number of processors for the virtual machine
        """
        return pulumi.get(self, "processors")

    @_builtins.property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class VirtualMachinePropertiesResponseImageReference(dict):
    """
    Which Image to use for the virtual machine
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        Which Image to use for the virtual machine
        :param _builtins.str id: Resource ID of the image
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Resource ID of the image
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseLinuxConfiguration(dict):
    """
    LinuxConfiguration - linux specific configuration values for the virtual machine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePasswordAuthentication":
            suggest = "disable_password_authentication"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseLinuxConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseLinuxConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseLinuxConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_password_authentication: Optional[_builtins.bool] = None,
                 provision_vm_agent: Optional[_builtins.bool] = None,
                 ssh: Optional['outputs.VirtualMachinePropertiesResponseSsh'] = None):
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine
        :param _builtins.bool disable_password_authentication: DisablePasswordAuthentication - whether password authentication should be disabled
        :param _builtins.bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        :param 'VirtualMachinePropertiesResponseSsh' ssh: SSH - contains settings related to ssh configuration
        """
        if disable_password_authentication is not None:
            pulumi.set(__self__, "disable_password_authentication", disable_password_authentication)
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @_builtins.property
    @pulumi.getter(name="disablePasswordAuthentication")
    def disable_password_authentication(self) -> Optional[_builtins.bool]:
        """
        DisablePasswordAuthentication - whether password authentication should be disabled
        """
        return pulumi.get(self, "disable_password_authentication")

    @_builtins.property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[_builtins.bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.VirtualMachinePropertiesResponseSsh']:
        """
        SSH - contains settings related to ssh configuration
        """
        return pulumi.get(self, "ssh")


@pulumi.output_type
class VirtualMachinePropertiesResponseNetworkInterfaces(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: ID - Resource Id of the network interface
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        ID - Resource Id of the network interface
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseNetworkProfile(dict):
    """
    NetworkProfile - describes the network configuration the virtual machine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaces":
            suggest = "network_interfaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseNetworkProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseNetworkProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseNetworkProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interfaces: Optional[Sequence['outputs.VirtualMachinePropertiesResponseNetworkInterfaces']] = None):
        """
        NetworkProfile - describes the network configuration the virtual machine
        :param Sequence['VirtualMachinePropertiesResponseNetworkInterfaces'] network_interfaces: NetworkInterfaces - list of network interfaces to be attached to the virtual machine
        """
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponseNetworkInterfaces']]:
        """
        NetworkInterfaces - list of network interfaces to be attached to the virtual machine
        """
        return pulumi.get(self, "network_interfaces")


@pulumi.output_type
class VirtualMachinePropertiesResponseOsDisk(dict):
    """
    VHD to attach as OS disk
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        VHD to attach as OS disk
        :param _builtins.str id: Resource ID of the OS disk
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Resource ID of the OS disk
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseOsProfile(dict):
    """
    OsProfile - describes the configuration of the operating system and sets login data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUsername":
            suggest = "admin_username"
        elif key == "computerName":
            suggest = "computer_name"
        elif key == "linuxConfiguration":
            suggest = "linux_configuration"
        elif key == "osType":
            suggest = "os_type"
        elif key == "windowsConfiguration":
            suggest = "windows_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseOsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseOsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseOsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_username: Optional[_builtins.str] = None,
                 computer_name: Optional[_builtins.str] = None,
                 linux_configuration: Optional['outputs.VirtualMachinePropertiesResponseLinuxConfiguration'] = None,
                 os_type: Optional[_builtins.str] = None,
                 windows_configuration: Optional['outputs.VirtualMachinePropertiesResponseWindowsConfiguration'] = None):
        """
        OsProfile - describes the configuration of the operating system and sets login data
        :param _builtins.str admin_username: AdminUsername - admin username
        :param _builtins.str computer_name: ComputerName - name of the compute
        :param 'VirtualMachinePropertiesResponseLinuxConfiguration' linux_configuration: LinuxConfiguration - linux specific configuration values for the virtual machine
        :param _builtins.str os_type: OsType - string specifying whether the OS is Linux or Windows
        :param 'VirtualMachinePropertiesResponseWindowsConfiguration' windows_configuration: Windows Configuration for the virtual machine 
        """
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if linux_configuration is not None:
            pulumi.set(__self__, "linux_configuration", linux_configuration)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if windows_configuration is not None:
            pulumi.set(__self__, "windows_configuration", windows_configuration)

    @_builtins.property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[_builtins.str]:
        """
        AdminUsername - admin username
        """
        return pulumi.get(self, "admin_username")

    @_builtins.property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[_builtins.str]:
        """
        ComputerName - name of the compute
        """
        return pulumi.get(self, "computer_name")

    @_builtins.property
    @pulumi.getter(name="linuxConfiguration")
    def linux_configuration(self) -> Optional['outputs.VirtualMachinePropertiesResponseLinuxConfiguration']:
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine
        """
        return pulumi.get(self, "linux_configuration")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        OsType - string specifying whether the OS is Linux or Windows
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="windowsConfiguration")
    def windows_configuration(self) -> Optional['outputs.VirtualMachinePropertiesResponseWindowsConfiguration']:
        """
        Windows Configuration for the virtual machine 
        """
        return pulumi.get(self, "windows_configuration")


@pulumi.output_type
class VirtualMachinePropertiesResponsePublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponsePublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponsePublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponsePublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None):
        """
        :param _builtins.str key_data: KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        :param _builtins.str path: Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[_builtins.str]:
        """
        KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "key_data")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class VirtualMachinePropertiesResponsePublicKeysPublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponsePublicKeysPublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponsePublicKeysPublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponsePublicKeysPublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None):
        """
        :param _builtins.str key_data: KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        :param _builtins.str path: Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[_builtins.str]:
        """
        KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "key_data")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class VirtualMachinePropertiesResponseSecurityProfile(dict):
    """
    SecurityProfile - Specifies the security settings for the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTPM":
            suggest = "enable_tpm"
        elif key == "uefiSettings":
            suggest = "uefi_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseSecurityProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseSecurityProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseSecurityProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tpm: Optional[_builtins.bool] = None,
                 uefi_settings: Optional['outputs.VirtualMachinePropertiesResponseUefiSettings'] = None):
        """
        SecurityProfile - Specifies the security settings for the virtual machine.
        """
        if enable_tpm is None:
            enable_tpm = False
        if enable_tpm is not None:
            pulumi.set(__self__, "enable_tpm", enable_tpm)
        if uefi_settings is not None:
            pulumi.set(__self__, "uefi_settings", uefi_settings)

    @_builtins.property
    @pulumi.getter(name="enableTPM")
    def enable_tpm(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enable_tpm")

    @_builtins.property
    @pulumi.getter(name="uefiSettings")
    def uefi_settings(self) -> Optional['outputs.VirtualMachinePropertiesResponseUefiSettings']:
        return pulumi.get(self, "uefi_settings")


@pulumi.output_type
class VirtualMachinePropertiesResponseSsh(dict):
    """
    SSH - contains settings related to ssh configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeys']] = None):
        """
        SSH - contains settings related to ssh configuration
        :param Sequence['VirtualMachinePropertiesResponsePublicKeys'] public_keys: PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @_builtins.property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeys']]:
        """
        PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class VirtualMachinePropertiesResponseSshSsh(dict):
    """
    SSH Configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseSshSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseSshSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseSshSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeysPublicKeys']] = None):
        """
        SSH Configuration
        :param Sequence['VirtualMachinePropertiesResponsePublicKeysPublicKeys'] public_keys: PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @_builtins.property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeysPublicKeys']]:
        """
        PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class VirtualMachinePropertiesResponseStorageProfile(dict):
    """
    StorageProfile - contains information about the disks and storage information for the virtual machine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "imageReference":
            suggest = "image_reference"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "vmConfigStoragePathId":
            suggest = "vm_config_storage_path_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseStorageProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseStorageProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseStorageProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.VirtualMachinePropertiesResponseDataDisks']] = None,
                 image_reference: Optional['outputs.VirtualMachinePropertiesResponseImageReference'] = None,
                 os_disk: Optional['outputs.VirtualMachinePropertiesResponseOsDisk'] = None,
                 vm_config_storage_path_id: Optional[_builtins.str] = None):
        """
        StorageProfile - contains information about the disks and storage information for the virtual machine
        :param Sequence['VirtualMachinePropertiesResponseDataDisks'] data_disks: adds data disks to the virtual machine
        :param 'VirtualMachinePropertiesResponseImageReference' image_reference: Which Image to use for the virtual machine
        :param 'VirtualMachinePropertiesResponseOsDisk' os_disk: VHD to attach as OS disk
        :param _builtins.str vm_config_storage_path_id: Id of the storage container that hosts the VM configuration file
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if vm_config_storage_path_id is not None:
            pulumi.set(__self__, "vm_config_storage_path_id", vm_config_storage_path_id)

    @_builtins.property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponseDataDisks']]:
        """
        adds data disks to the virtual machine
        """
        return pulumi.get(self, "data_disks")

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional['outputs.VirtualMachinePropertiesResponseImageReference']:
        """
        Which Image to use for the virtual machine
        """
        return pulumi.get(self, "image_reference")

    @_builtins.property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional['outputs.VirtualMachinePropertiesResponseOsDisk']:
        """
        VHD to attach as OS disk
        """
        return pulumi.get(self, "os_disk")

    @_builtins.property
    @pulumi.getter(name="vmConfigStoragePathId")
    def vm_config_storage_path_id(self) -> Optional[_builtins.str]:
        """
        Id of the storage container that hosts the VM configuration file
        """
        return pulumi.get(self, "vm_config_storage_path_id")


@pulumi.output_type
class VirtualMachinePropertiesResponseUefiSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureBootEnabled":
            suggest = "secure_boot_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseUefiSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseUefiSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseUefiSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secure_boot_enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool secure_boot_enabled: Specifies whether secure boot should be enabled on the virtual machine.
        """
        if secure_boot_enabled is None:
            secure_boot_enabled = False
        if secure_boot_enabled is not None:
            pulumi.set(__self__, "secure_boot_enabled", secure_boot_enabled)

    @_builtins.property
    @pulumi.getter(name="secureBootEnabled")
    def secure_boot_enabled(self) -> Optional[_builtins.bool]:
        """
        Specifies whether secure boot should be enabled on the virtual machine.
        """
        return pulumi.get(self, "secure_boot_enabled")


@pulumi.output_type
class VirtualMachinePropertiesResponseWindowsConfiguration(dict):
    """
    Windows Configuration for the virtual machine 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutomaticUpdates":
            suggest = "enable_automatic_updates"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseWindowsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseWindowsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseWindowsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_automatic_updates: Optional[_builtins.bool] = None,
                 provision_vm_agent: Optional[_builtins.bool] = None,
                 ssh: Optional['outputs.VirtualMachinePropertiesResponseSshSsh'] = None,
                 time_zone: Optional[_builtins.str] = None):
        """
        Windows Configuration for the virtual machine 
        :param _builtins.bool enable_automatic_updates: Whether to EnableAutomaticUpdates on the machine
        :param _builtins.bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        :param 'VirtualMachinePropertiesResponseSshSsh' ssh: SSH Configuration
        :param _builtins.str time_zone: TimeZone for the virtual machine
        """
        if enable_automatic_updates is not None:
            pulumi.set(__self__, "enable_automatic_updates", enable_automatic_updates)
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="enableAutomaticUpdates")
    def enable_automatic_updates(self) -> Optional[_builtins.bool]:
        """
        Whether to EnableAutomaticUpdates on the machine
        """
        return pulumi.get(self, "enable_automatic_updates")

    @_builtins.property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[_builtins.bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.VirtualMachinePropertiesResponseSshSsh']:
        """
        SSH Configuration
        """
        return pulumi.get(self, "ssh")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[_builtins.str]:
        """
        TimeZone for the virtual machine
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class VirtualMachineStatusResponse(dict):
    """
    The observed state of virtual machines
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 power_state: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.VirtualMachineStatusResponseProvisioningStatus'] = None):
        """
        The observed state of virtual machines
        :param _builtins.str error_code: VirtualMachine provisioning error code
        :param _builtins.str error_message: Descriptive error message
        :param _builtins.str power_state: The power state of the virtual machine
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        VirtualMachine provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[_builtins.str]:
        """
        The power state of the virtual machine
        """
        return pulumi.get(self, "power_state")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualMachineStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualMachineStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str operation_id: The ID of the operation performed on the virtual machine
        :param _builtins.str status: The status of the operation performed on the virtual machine [Succeeded, Failed, InProgress]
        """
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the virtual machine
        """
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the operation performed on the virtual machine [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VirtualNetworkPropertiesResponseDhcpOptions(dict):
    """
    DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseDhcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseDhcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseDhcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[_builtins.str]] = None):
        """
        DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
        :param Sequence[_builtins.str] dns_servers: The list of DNS servers IP addresses.
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of DNS servers IP addresses.
        """
        return pulumi.get(self, "dns_servers")


@pulumi.output_type
class VirtualNetworkPropertiesResponseIpConfigurationReferences(dict):
    """
    IPConfigurationReference - Describes a IPConfiguration under the virtual network
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        IPConfigurationReference - Describes a IPConfiguration under the virtual network
        :param _builtins.str id: IPConfigurationID
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        IPConfigurationID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualNetworkPropertiesResponseRouteTable(dict):
    """
    RouteTable for the subnet
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 routes: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseRoutes']] = None,
                 type: Optional[_builtins.str] = None):
        """
        RouteTable for the subnet
        :param _builtins.str id: Etag - Gets a unique read-only string that changes whenever the resource is updated.
        :param _builtins.str name: Name - READ-ONLY; Resource name.
        :param Sequence['VirtualNetworkPropertiesResponseRoutes'] routes: Routes - Collection of routes contained within a route table.
        :param _builtins.str type: Type - READ-ONLY; Resource type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Etag - Gets a unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name - READ-ONLY; Resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.VirtualNetworkPropertiesResponseRoutes']]:
        """
        Routes - Collection of routes contained within a route table.
        """
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Type - READ-ONLY; Resource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualNetworkPropertiesResponseRoutes(dict):
    """
    Route is associated with a subnet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "nextHopIpAddress":
            suggest = "next_hop_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseRoutes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseRoutes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseRoutes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 next_hop_ip_address: Optional[_builtins.str] = None):
        """
        Route is associated with a subnet.
        :param _builtins.str address_prefix: AddressPrefix - The destination CIDR to which the route applies.
        :param _builtins.str name: Name - name of the subnet
        :param _builtins.str next_hop_ip_address: NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_ip_address is not None:
            pulumi.set(__self__, "next_hop_ip_address", next_hop_ip_address)

    @_builtins.property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[_builtins.str]:
        """
        AddressPrefix - The destination CIDR to which the route applies.
        """
        return pulumi.get(self, "address_prefix")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name - name of the subnet
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> Optional[_builtins.str]:
        """
        NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        return pulumi.get(self, "next_hop_ip_address")


@pulumi.output_type
class VirtualNetworkPropertiesResponseSubnets(dict):
    """
    Subnet subnet in a virtual network resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "addressPrefixes":
            suggest = "address_prefixes"
        elif key == "ipAllocationMethod":
            suggest = "ip_allocation_method"
        elif key == "ipConfigurationReferences":
            suggest = "ip_configuration_references"
        elif key == "routeTable":
            suggest = "route_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseSubnets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseSubnets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseSubnets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[_builtins.str] = None,
                 address_prefixes: Optional[Sequence[_builtins.str]] = None,
                 ip_allocation_method: Optional[_builtins.str] = None,
                 ip_configuration_references: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseIpConfigurationReferences']] = None,
                 name: Optional[_builtins.str] = None,
                 route_table: Optional['outputs.VirtualNetworkPropertiesResponseRouteTable'] = None,
                 vlan: Optional[_builtins.int] = None):
        """
        Subnet subnet in a virtual network resource.
        :param _builtins.str address_prefix: Cidr for this subnet - IPv4, IPv6
        :param Sequence[_builtins.str] address_prefixes: AddressPrefixes - List of address prefixes for the subnet.
        :param _builtins.str ip_allocation_method: IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        :param Sequence['VirtualNetworkPropertiesResponseIpConfigurationReferences'] ip_configuration_references: IPConfigurationReferences - list of IPConfigurationReferences
        :param _builtins.str name: Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        :param 'VirtualNetworkPropertiesResponseRouteTable' route_table: RouteTable for the subnet
        :param _builtins.int vlan: Vlan to use for the subnet
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefixes is not None:
            pulumi.set(__self__, "address_prefixes", address_prefixes)
        if ip_allocation_method is not None:
            pulumi.set(__self__, "ip_allocation_method", ip_allocation_method)
        if ip_configuration_references is not None:
            pulumi.set(__self__, "ip_configuration_references", ip_configuration_references)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_table is not None:
            pulumi.set(__self__, "route_table", route_table)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[_builtins.str]:
        """
        Cidr for this subnet - IPv4, IPv6
        """
        return pulumi.get(self, "address_prefix")

    @_builtins.property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Optional[Sequence[_builtins.str]]:
        """
        AddressPrefixes - List of address prefixes for the subnet.
        """
        return pulumi.get(self, "address_prefixes")

    @_builtins.property
    @pulumi.getter(name="ipAllocationMethod")
    def ip_allocation_method(self) -> Optional[_builtins.str]:
        """
        IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        """
        return pulumi.get(self, "ip_allocation_method")

    @_builtins.property
    @pulumi.getter(name="ipConfigurationReferences")
    def ip_configuration_references(self) -> Optional[Sequence['outputs.VirtualNetworkPropertiesResponseIpConfigurationReferences']]:
        """
        IPConfigurationReferences - list of IPConfigurationReferences
        """
        return pulumi.get(self, "ip_configuration_references")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="routeTable")
    def route_table(self) -> Optional['outputs.VirtualNetworkPropertiesResponseRouteTable']:
        """
        RouteTable for the subnet
        """
        return pulumi.get(self, "route_table")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[_builtins.int]:
        """
        Vlan to use for the subnet
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class VirtualNetworkStatusResponse(dict):
    """
    The observed state of virtual networks
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 provisioning_status: Optional['outputs.VirtualNetworkStatusResponseProvisioningStatus'] = None):
        """
        The observed state of virtual networks
        :param _builtins.str error_code: VirtualNetwork provisioning error code
        :param _builtins.str error_message: Descriptive error message
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        VirtualNetwork provisioning error code
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualNetworkStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualNetworkStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str operation_id: The ID of the operation performed on the virtual network
        :param _builtins.str status: The status of the operation performed on the virtual network [Succeeded, Failed, InProgress]
        """
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[_builtins.str]:
        """
        The ID of the operation performed on the virtual network
        """
        return pulumi.get(self, "operation_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the operation performed on the virtual network [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VirtualSwitchConfigurationOverridesResponse(dict):
    """
    The VirtualSwitchConfigurationOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableIov":
            suggest = "enable_iov"
        elif key == "loadBalancingAlgorithm":
            suggest = "load_balancing_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualSwitchConfigurationOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualSwitchConfigurationOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualSwitchConfigurationOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_iov: _builtins.str,
                 load_balancing_algorithm: _builtins.str):
        """
        The VirtualSwitchConfigurationOverrides of a cluster.
        :param _builtins.str enable_iov: Enable IoV for Virtual Switch
        :param _builtins.str load_balancing_algorithm: Load Balancing Algorithm for Virtual Switch
        """
        pulumi.set(__self__, "enable_iov", enable_iov)
        pulumi.set(__self__, "load_balancing_algorithm", load_balancing_algorithm)

    @_builtins.property
    @pulumi.getter(name="enableIov")
    def enable_iov(self) -> _builtins.str:
        """
        Enable IoV for Virtual Switch
        """
        return pulumi.get(self, "enable_iov")

    @_builtins.property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> _builtins.str:
        """
        Load Balancing Algorithm for Virtual Switch
        """
        return pulumi.get(self, "load_balancing_algorithm")


@pulumi.output_type
class VmImageRepositoryCredentialsResponse(dict):
    """
    The credentials used to login to the image repository that has access to the specified image
    """
    def __init__(__self__, *,
                 password: _builtins.str,
                 username: _builtins.str):
        """
        The credentials used to login to the image repository that has access to the specified image
        :param _builtins.str password: Password for accessing image repository
        :param _builtins.str username: Username for accessing image repository
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Password for accessing image repository
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username for accessing image repository
        """
        return pulumi.get(self, "username")


