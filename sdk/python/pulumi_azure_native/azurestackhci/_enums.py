# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AvailabilityType',
    'CloudInitDataSource',
    'ComplianceAssignmentType',
    'DeploymentMode',
    'DeviceKind',
    'DiagnosticLevel',
    'DiskFileFormat',
    'EceSecrets',
    'EdgeDeviceKind',
    'ExtendedLocationTypes',
    'GpuAssignmentTypeEnum',
    'HciEdgeDeviceJobType',
    'HyperVGeneration',
    'IPPoolTypeEnum',
    'IpAllocationMethodEnum',
    'ManagedServiceIdentityType',
    'NetworkTypeEnum',
    'OperatingSystemTypes',
    'OperationType',
    'OsTypeEnum',
    'ProvisioningAction',
    'RemoteSupportAccessLevel',
    'RemoteSupportType',
    'ResourceIdentityType',
    'SecurityEncryptionType',
    'SecurityRuleAccess',
    'SecurityRuleDirection',
    'SecurityRuleProtocol',
    'SecurityTypes',
    'ServiceName',
    'SoftwareAssuranceIntent',
    'State',
    'UpdateRunPropertiesState',
    'UpdateSummariesPropertiesState',
    'VmSizeEnum',
    'WindowsServerSubscription',
]


class AvailabilityType(str, Enum):
    """
    Indicates the way the update content can be downloaded.
    """
    LOCAL = "Local"
    ONLINE = "Online"
    NOTIFY = "Notify"


class CloudInitDataSource(str, Enum):
    """
    Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
    """
    NO_CLOUD = "NoCloud"
    """
    NoCloud is used as the datasource
    """
    AZURE = "Azure"
    """
    Azure is used as the datasource
    """


class ComplianceAssignmentType(str, Enum):
    """
    WDAC Compliance Assignment
    """
    AUDIT = "Audit"
    """
    Report on the state of the machine, but don't make changes.
    """
    APPLY_AND_AUTO_CORRECT = "ApplyAndAutoCorrect"
    """
    Applied to the machine. If it drifts, the local service inside the machine makes a correction at the next evaluation.
    """


class DeploymentMode(str, Enum):
    """
    Deployment mode to trigger job.
    """
    VALIDATE = "Validate"
    """
    Validate ECE action deployment for a cluster.
    """
    DEPLOY = "Deploy"
    """
    Deploy ECE action deployment for a cluster.
    """


class DeviceKind(str, Enum):
    """
    Device kind to support polymorphic resource.
    """
    HCI = "HCI"
    """
    Arc-enabled edge device with HCI OS.
    """


class DiagnosticLevel(str, Enum):
    """
    Desired level of diagnostic data emitted by the cluster.
    """
    OFF = "Off"
    BASIC = "Basic"
    ENHANCED = "Enhanced"


class DiskFileFormat(str, Enum):
    """
    The format of the actual VHD file [vhd, vhdx]
    """
    VHDX = "vhdx"
    """
    VHDX file format
    """
    VHD = "vhd"
    """
    VHD file format
    """


class EceSecrets(str, Enum):
    """
    Secret name expected for Enterprise Cloud Engine (ECE) deployment.
    """
    AZURE_STACK_LCMUSER_CREDENTIAL = "AzureStackLCMUserCredential"
    """
    AzureStackLCMUserCredential used for LCM operations for AzureStackHCI cluster.
    """
    DEFAULT_ARB_APPLICATION = "DefaultARBApplication"
    """
    DefaultARBApplication used to manage Azure Arc resource bridge (ARB) for AzureStackHCI cluster.
    """
    LOCAL_ADMIN_CREDENTIAL = "LocalAdminCredential"
    """
    LocalAdminCredential used for admin operations for AzureStackHCI cluster.
    """
    WITNESS_STORAGE_KEY = "WitnessStorageKey"
    """
    WitnessStorageKey used for setting up a cloud witness for AzureStackHCI cluster.
    """


class EdgeDeviceKind(str, Enum):
    """
    Edge Solution type to support polymorphic resource.
    """
    HCI = "HCI"
    """
    Arc-enabled edge device with HCI OS.
    """


class ExtendedLocationTypes(str, Enum):
    """
    The type of the extended location.
    """
    CUSTOM_LOCATION = "CustomLocation"


class GpuAssignmentTypeEnum(str, Enum):
    """
    GPU assignment type
    """
    GPU_DDA = "GpuDDA"
    """
    Attach Graphics Processing Unit (GPU) using Discrete Device Assignment (DDA)
    """
    GPU_P = "GpuP"
    """
    Attach Graphics Processing Unit (GPU) using GPU Partitioning
    """


class HciEdgeDeviceJobType(str, Enum):
    """
    Job Type to support polymorphic resource.
    """
    COLLECT_LOG = "CollectLog"
    """
    Job to collect logs from the device.
    """
    REMOTE_SUPPORT = "RemoteSupport"
    """
    Job to provide remote support to the device.
    """


class HyperVGeneration(str, Enum):
    """
    The hypervisor generation of the Virtual Machine [V1, V2]
    """
    V1 = "V1"
    """
    Generation 1 (V1) hypervisor
    """
    V2 = "V2"
    """
    Generation 2 (V2) hypervisor
    """


class IPPoolTypeEnum(str, Enum):
    """
    Type of the IP Pool [vm, vippool]
    """
    VM = "vm"
    """
    Virtual Machine IP Pool
    """
    VIPPOOL = "vippool"
    """
    VIP Pool
    """


class IpAllocationMethodEnum(str, Enum):
    """
    IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
    """
    DYNAMIC = "Dynamic"
    STATIC = "Static"


class ManagedServiceIdentityType(str, Enum):
    """
    Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    """
    NONE = "None"
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned,UserAssigned"


class NetworkTypeEnum(str, Enum):
    """
    Type of the network
    """
    NAT = "NAT"
    TRANSPARENT = "Transparent"
    L2_BRIDGE = "L2Bridge"
    L2_TUNNEL = "L2Tunnel"
    ICS = "ICS"
    PRIVATE = "Private"
    OVERLAY = "Overlay"
    INTERNAL = "Internal"
    MIRRORED = "Mirrored"


class OperatingSystemTypes(str, Enum):
    """
    This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
    """
    WINDOWS = "Windows"
    """
    Windows operating system
    """
    LINUX = "Linux"
    """
    Linux operating system
    """


class OperationType(str, Enum):
    """
    The intended operation for a cluster.
    """
    CLUSTER_PROVISIONING = "ClusterProvisioning"
    """
    Cluster provisioning operation.
    """
    CLUSTER_UPGRADE = "ClusterUpgrade"
    """
    Cluster upgrade operation.
    """


class OsTypeEnum(str, Enum):
    """
    OsType - string specifying whether the OS is Linux or Windows
    """
    LINUX = "Linux"
    WINDOWS = "Windows"


class ProvisioningAction(str, Enum):
    """
    The guest agent provisioning action.
    """
    INSTALL = "install"
    """
    Install guest agent
    """
    UNINSTALL = "uninstall"
    """
    Uninstall guest agent
    """
    REPAIR = "repair"
    """
    Repair guest agent
    """


class RemoteSupportAccessLevel(str, Enum):
    """
    Remote support access level.
    """
    NONE = "None"
    """
    No remote support access is granted.
    """
    DIAGNOSTICS = "Diagnostics"
    """
    Access is limited to diagnostics information only.
    """
    DIAGNOSTICS_AND_REPAIR = "DiagnosticsAndRepair"
    """
    Access includes diagnostics information and the ability to perform repairs.
    """


class RemoteSupportType(str, Enum):
    """
    Remote support type.
    """
    ENABLE = "Enable"
    """
    Enables remote support for the edge device.
    """
    REVOKE = "Revoke"
    """
    Revokes previously granted remote support access for the edge device.
    """


class ResourceIdentityType(str, Enum):
    """
    The identity type.
    """
    SYSTEM_ASSIGNED = "SystemAssigned"


class SecurityEncryptionType(str, Enum):
    """
    Specifies the EncryptionType of the managed disk. It is set to NonPersistedTPM for not persisting firmware state in the VMGuestState blob. NOTE: It can be set for only Confidential VMs.
    """
    NON_PERSISTED_TPM = "NonPersistedTPM"
    """
    Non-persisted TPM encryption type
    """


class SecurityRuleAccess(str, Enum):
    """
    The network traffic is allowed or denied.
    """
    ALLOW = "Allow"
    """
    Network traffic is allowed
    """
    DENY = "Deny"
    """
    Network traffic is denied
    """


class SecurityRuleDirection(str, Enum):
    """
    The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    """
    INBOUND = "Inbound"
    """
    Rule is evaluated on incoming traffic
    """
    OUTBOUND = "Outbound"
    """
    Rule is evaluated on outgoing traffic
    """


class SecurityRuleProtocol(str, Enum):
    """
    Network protocol this rule applies to.
    """
    TCP = "Tcp"
    """
    Transmission Control Protocol
    """
    UDP = "Udp"
    """
    User Datagram Protocol
    """
    ICMP = "Icmp"
    """
    Internet Control Message Protocol
    """
    ASTERISK = "*"
    """
    Wildcard rule for all protocols
    """


class SecurityTypes(str, Enum):
    """
    Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
    """
    TRUSTED_LAUNCH = "TrustedLaunch"
    """
    Trusted Launch security type
    """
    CONFIDENTIAL_VM = "ConfidentialVM"
    """
    Confidential VM security type
    """


class ServiceName(str, Enum):
    """
    Name of the service.
    """
    WAC = "WAC"


class SoftwareAssuranceIntent(str, Enum):
    """
    Customer Intent for Software Assurance Benefit.
    """
    ENABLE = "Enable"
    DISABLE = "Disable"


class State(str, Enum):
    """
    State of the update as it relates to this stamp.
    """
    HAS_PREREQUISITE = "HasPrerequisite"
    OBSOLETE = "Obsolete"
    READY = "Ready"
    NOT_APPLICABLE_BECAUSE_ANOTHER_UPDATE_IS_IN_PROGRESS = "NotApplicableBecauseAnotherUpdateIsInProgress"
    PREPARING = "Preparing"
    INSTALLING = "Installing"
    INSTALLED = "Installed"
    PREPARATION_FAILED = "PreparationFailed"
    INSTALLATION_FAILED = "InstallationFailed"
    INVALID = "Invalid"
    RECALLED = "Recalled"
    DOWNLOADING = "Downloading"
    DOWNLOAD_FAILED = "DownloadFailed"
    HEALTH_CHECKING = "HealthChecking"
    HEALTH_CHECK_FAILED = "HealthCheckFailed"
    READY_TO_INSTALL = "ReadyToInstall"
    SCAN_IN_PROGRESS = "ScanInProgress"
    SCAN_FAILED = "ScanFailed"
    ADDITIONAL_CONTENT_REQUIRED = "AdditionalContentRequired"


class UpdateRunPropertiesState(str, Enum):
    """
    State of the update run.
    """
    UNKNOWN = "Unknown"
    SUCCEEDED = "Succeeded"
    IN_PROGRESS = "InProgress"
    FAILED = "Failed"


class UpdateSummariesPropertiesState(str, Enum):
    """
    Overall update state of the stamp.
    """
    UNKNOWN = "Unknown"
    APPLIED_SUCCESSFULLY = "AppliedSuccessfully"
    UPDATE_AVAILABLE = "UpdateAvailable"
    UPDATE_IN_PROGRESS = "UpdateInProgress"
    UPDATE_FAILED = "UpdateFailed"
    NEEDS_ATTENTION = "NeedsAttention"
    PREPARATION_IN_PROGRESS = "PreparationInProgress"
    PREPARATION_FAILED = "PreparationFailed"


class VmSizeEnum(str, Enum):
    """
    Enum of VM Sizes
    """
    DEFAULT = "Default"
    """
    Default virtual machine size
    """
    STANDARD_A2_V2 = "Standard_A2_v2"
    """
    Standard A2 v2 virtual machine size
    """
    STANDARD_A4_V2 = "Standard_A4_v2"
    """
    Standard A4 v2 virtual machine size
    """
    STANDARD_D2S_V3 = "Standard_D2s_v3"
    """
    Standard D2s v3 virtual machine size
    """
    STANDARD_D4S_V3 = "Standard_D4s_v3"
    """
    Standard D4s v3 virtual machine size
    """
    STANDARD_D8S_V3 = "Standard_D8s_v3"
    """
    Standard D8s v3 virtual machine size
    """
    STANDARD_D16S_V3 = "Standard_D16s_v3"
    """
    Standard D16s v3 virtual machine size
    """
    STANDARD_D32S_V3 = "Standard_D32s_v3"
    """
    Standard D32s v3 virtual machine size
    """
    STANDARD_DS2_V2 = "Standard_DS2_v2"
    """
    Standard DS2 v2 virtual machine size
    """
    STANDARD_DS3_V2 = "Standard_DS3_v2"
    """
    Standard DS3 v2 virtual machine size
    """
    STANDARD_DS4_V2 = "Standard_DS4_v2"
    """
    Standard DS4 v2 virtual machine size
    """
    STANDARD_DS5_V2 = "Standard_DS5_v2"
    """
    Standard DS5 v2 virtual machine size
    """
    STANDARD_DS13_V2 = "Standard_DS13_v2"
    """
    Standard DS13 v2 virtual machine size
    """
    STANDARD_K8_S_V1 = "Standard_K8S_v1"
    """
    Standard K8S v1 virtual machine size
    """
    STANDARD_K8_S2_V1 = "Standard_K8S2_v1"
    """
    Standard K8S2 v1 virtual machine size
    """
    STANDARD_K8_S3_V1 = "Standard_K8S3_v1"
    """
    Standard K8S3 v1 virtual machine size
    """
    STANDARD_K8_S4_V1 = "Standard_K8S4_v1"
    """
    Standard K8S4 v1 virtual machine size
    """
    STANDARD_NK6 = "Standard_NK6"
    """
    Standard NK6 virtual machine size
    """
    STANDARD_NK12 = "Standard_NK12"
    """
    Standard NK12 virtual machine size
    """
    STANDARD_NV6 = "Standard_NV6"
    """
    Standard NV6 virtual machine size
    """
    STANDARD_NV12 = "Standard_NV12"
    """
    Standard NV12 virtual machine size
    """
    STANDARD_K8_S5_V1 = "Standard_K8S5_v1"
    """
    Standard K8S5 v1 virtual machine size
    """
    CUSTOM = "Custom"
    """
    Custom virtual machine size
    """


class WindowsServerSubscription(str, Enum):
    """
    Desired state of Windows Server Subscription.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"
