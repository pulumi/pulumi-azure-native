# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetVirtualmachineRetrieveResult',
    'AwaitableGetVirtualmachineRetrieveResult',
    'get_virtualmachine_retrieve',
    'get_virtualmachine_retrieve_output',
]

@pulumi.output_type
class GetVirtualmachineRetrieveResult:
    """
    The virtual machine resource definition.
    """
    def __init__(__self__, extended_location=None, guest_agent_profile=None, hardware_profile=None, id=None, identity=None, location=None, name=None, network_profile=None, os_profile=None, provisioning_state=None, resource_name=None, security_profile=None, status=None, storage_profile=None, system_data=None, tags=None, type=None, vm_id=None):
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if guest_agent_profile and not isinstance(guest_agent_profile, dict):
            raise TypeError("Expected argument 'guest_agent_profile' to be a dict")
        pulumi.set(__self__, "guest_agent_profile", guest_agent_profile)
        if hardware_profile and not isinstance(hardware_profile, dict):
            raise TypeError("Expected argument 'hardware_profile' to be a dict")
        pulumi.set(__self__, "hardware_profile", hardware_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_profile and not isinstance(network_profile, dict):
            raise TypeError("Expected argument 'network_profile' to be a dict")
        pulumi.set(__self__, "network_profile", network_profile)
        if os_profile and not isinstance(os_profile, dict):
            raise TypeError("Expected argument 'os_profile' to be a dict")
        pulumi.set(__self__, "os_profile", os_profile)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if security_profile and not isinstance(security_profile, dict):
            raise TypeError("Expected argument 'security_profile' to be a dict")
        pulumi.set(__self__, "security_profile", security_profile)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if storage_profile and not isinstance(storage_profile, dict):
            raise TypeError("Expected argument 'storage_profile' to be a dict")
        pulumi.set(__self__, "storage_profile", storage_profile)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The extendedLocation of the resource.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="guestAgentProfile")
    def guest_agent_profile(self) -> Optional['outputs.GuestAgentProfileResponse']:
        """
        Guest agent status properties.
        """
        return pulumi.get(self, "guest_agent_profile")

    @property
    @pulumi.getter(name="hardwareProfile")
    def hardware_profile(self) -> Optional['outputs.VirtualmachinesPropertiesResponseHardwareProfile']:
        """
        HardwareProfile - Specifies the hardware settings for the virtual machine.
        """
        return pulumi.get(self, "hardware_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.IdentityResponse']:
        """
        Identity for the resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional['outputs.VirtualmachinesPropertiesResponseNetworkProfile']:
        """
        NetworkProfile - describes the network configuration the virtual machine
        """
        return pulumi.get(self, "network_profile")

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional['outputs.VirtualmachinesPropertiesResponseOsProfile']:
        """
        OsProfile - describes the configuration of the operating system and sets login data
        """
        return pulumi.get(self, "os_profile")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        name of the object to be used in moc
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="securityProfile")
    def security_profile(self) -> Optional['outputs.VirtualmachinesPropertiesResponseSecurityProfile']:
        """
        SecurityProfile - Specifies the security settings for the virtual machine.
        """
        return pulumi.get(self, "security_profile")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.VirtualMachineStatusResponse':
        """
        VirtualMachineStatus defines the observed state of virtualmachines
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional['outputs.VirtualmachinesPropertiesResponseStorageProfile']:
        """
        StorageProfile - contains information about the disks and storage information for the virtual machine
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        """
        Unique identifier for the vm resource.
        """
        return pulumi.get(self, "vm_id")


class AwaitableGetVirtualmachineRetrieveResult(GetVirtualmachineRetrieveResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualmachineRetrieveResult(
            extended_location=self.extended_location,
            guest_agent_profile=self.guest_agent_profile,
            hardware_profile=self.hardware_profile,
            id=self.id,
            identity=self.identity,
            location=self.location,
            name=self.name,
            network_profile=self.network_profile,
            os_profile=self.os_profile,
            provisioning_state=self.provisioning_state,
            resource_name=self.resource_name,
            security_profile=self.security_profile,
            status=self.status,
            storage_profile=self.storage_profile,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            vm_id=self.vm_id)


def get_virtualmachine_retrieve(resource_group_name: Optional[str] = None,
                                virtualmachines_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualmachineRetrieveResult:
    """
    Gets virtual machines by resource name


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualmachinesName'] = virtualmachines_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azurestackhci/v20210901preview:getVirtualmachineRetrieve', __args__, opts=opts, typ=GetVirtualmachineRetrieveResult).value

    return AwaitableGetVirtualmachineRetrieveResult(
        extended_location=pulumi.get(__ret__, 'extended_location'),
        guest_agent_profile=pulumi.get(__ret__, 'guest_agent_profile'),
        hardware_profile=pulumi.get(__ret__, 'hardware_profile'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        network_profile=pulumi.get(__ret__, 'network_profile'),
        os_profile=pulumi.get(__ret__, 'os_profile'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        security_profile=pulumi.get(__ret__, 'security_profile'),
        status=pulumi.get(__ret__, 'status'),
        storage_profile=pulumi.get(__ret__, 'storage_profile'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        vm_id=pulumi.get(__ret__, 'vm_id'))


@_utilities.lift_output_func(get_virtualmachine_retrieve)
def get_virtualmachine_retrieve_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                                       virtualmachines_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVirtualmachineRetrieveResult]:
    """
    Gets virtual machines by resource name


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
