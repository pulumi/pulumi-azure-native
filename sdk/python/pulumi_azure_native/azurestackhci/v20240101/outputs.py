# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdapterPropertyOverridesResponse',
    'DeploymentClusterResponse',
    'DeploymentConfigurationResponse',
    'DeploymentDataResponse',
    'DeploymentSecuritySettingsResponse',
    'DeploymentStatusResponse',
    'DeploymentStepResponse',
    'DeviceConfigurationResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'ExtendedLocationResponse',
    'GalleryImageIdentifierResponse',
    'GalleryImageStatusResponse',
    'GalleryImageStatusResponseDownloadStatus',
    'GalleryImageStatusResponseProvisioningStatus',
    'GalleryImageVersionResponse',
    'GalleryImageVersionStorageProfileResponse',
    'GalleryOSDiskImageResponse',
    'GuestAgentInstallStatusResponse',
    'HostNetworkResponse',
    'HttpProxyConfigurationResponse',
    'IPPoolInfoResponse',
    'IPPoolResponse',
    'IdentityResponse',
    'InfrastructureNetworkResponse',
    'InstanceViewStatusResponse',
    'IntentsResponse',
    'IpPoolsResponse',
    'LogicalNetworkPropertiesResponseDhcpOptions',
    'LogicalNetworkStatusResponse',
    'LogicalNetworkStatusResponseProvisioningStatus',
    'MarketplaceGalleryImageStatusResponse',
    'MarketplaceGalleryImageStatusResponseDownloadStatus',
    'MarketplaceGalleryImageStatusResponseProvisioningStatus',
    'NicDetailResponse',
    'ObservabilityResponse',
    'OptionalServicesResponse',
    'PhysicalNodesResponse',
    'QosPolicyOverridesResponse',
    'ReportedPropertiesResponse',
    'RouteResponse',
    'RouteTableResponse',
    'ScaleUnitsResponse',
    'SshConfigurationResponse',
    'SshPublicKeyResponse',
    'StorageNetworksResponse',
    'StorageResponse',
    'SubnetPropertiesFormatResponseIpConfigurationReferences',
    'SubnetResponse',
    'SystemDataResponse',
    'ValidationStatusResponse',
    'VirtualMachineConfigAgentInstanceViewResponse',
    'VirtualMachineInstancePropertiesResponseDataDisks',
    'VirtualMachineInstancePropertiesResponseDynamicMemoryConfig',
    'VirtualMachineInstancePropertiesResponseHardwareProfile',
    'VirtualMachineInstancePropertiesResponseImageReference',
    'VirtualMachineInstancePropertiesResponseLinuxConfiguration',
    'VirtualMachineInstancePropertiesResponseNetworkInterfaces',
    'VirtualMachineInstancePropertiesResponseNetworkProfile',
    'VirtualMachineInstancePropertiesResponseOsDisk',
    'VirtualMachineInstancePropertiesResponseOsProfile',
    'VirtualMachineInstancePropertiesResponseSecurityProfile',
    'VirtualMachineInstancePropertiesResponseStorageProfile',
    'VirtualMachineInstancePropertiesResponseUefiSettings',
    'VirtualMachineInstancePropertiesResponseWindowsConfiguration',
    'VirtualMachineInstanceStatusResponse',
    'VirtualMachineInstanceStatusResponseProvisioningStatus',
    'VirtualMachineInstanceViewResponse',
    'VirtualSwitchConfigurationOverridesResponse',
]

@pulumi.output_type
class AdapterPropertyOverridesResponse(dict):
    """
    The AdapterPropertyOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jumboPacket":
            suggest = "jumbo_packet"
        elif key == "networkDirect":
            suggest = "network_direct"
        elif key == "networkDirectTechnology":
            suggest = "network_direct_technology"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdapterPropertyOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdapterPropertyOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdapterPropertyOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jumbo_packet: Optional[str] = None,
                 network_direct: Optional[str] = None,
                 network_direct_technology: Optional[str] = None):
        """
        The AdapterPropertyOverrides of a cluster.
        :param str jumbo_packet: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str network_direct: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str network_direct_technology: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        if jumbo_packet is not None:
            pulumi.set(__self__, "jumbo_packet", jumbo_packet)
        if network_direct is not None:
            pulumi.set(__self__, "network_direct", network_direct)
        if network_direct_technology is not None:
            pulumi.set(__self__, "network_direct_technology", network_direct_technology)

    @property
    @pulumi.getter(name="jumboPacket")
    def jumbo_packet(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "jumbo_packet")

    @property
    @pulumi.getter(name="networkDirect")
    def network_direct(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "network_direct")

    @property
    @pulumi.getter(name="networkDirectTechnology")
    def network_direct_technology(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
        """
        return pulumi.get(self, "network_direct_technology")


@pulumi.output_type
class DeploymentClusterResponse(dict):
    """
    AzureStackHCI Cluster deployment properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureServiceEndpoint":
            suggest = "azure_service_endpoint"
        elif key == "cloudAccountName":
            suggest = "cloud_account_name"
        elif key == "witnessPath":
            suggest = "witness_path"
        elif key == "witnessType":
            suggest = "witness_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_service_endpoint: Optional[str] = None,
                 cloud_account_name: Optional[str] = None,
                 name: Optional[str] = None,
                 witness_path: Optional[str] = None,
                 witness_type: Optional[str] = None):
        """
        AzureStackHCI Cluster deployment properties.
        :param str azure_service_endpoint: For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        :param str cloud_account_name: Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        :param str name: The cluster name provided when preparing Active Directory.
        :param str witness_path: Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        :param str witness_type: Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        if azure_service_endpoint is not None:
            pulumi.set(__self__, "azure_service_endpoint", azure_service_endpoint)
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if witness_path is not None:
            pulumi.set(__self__, "witness_path", witness_path)
        if witness_type is not None:
            pulumi.set(__self__, "witness_type", witness_type)

    @property
    @pulumi.getter(name="azureServiceEndpoint")
    def azure_service_endpoint(self) -> Optional[str]:
        """
        For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
        """
        return pulumi.get(self, "azure_service_endpoint")

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        """
        Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The cluster name provided when preparing Active Directory.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="witnessPath")
    def witness_path(self) -> Optional[str]:
        """
        Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "witness_path")

    @property
    @pulumi.getter(name="witnessType")
    def witness_type(self) -> Optional[str]:
        """
        Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
        """
        return pulumi.get(self, "witness_type")


@pulumi.output_type
class DeploymentConfigurationResponse(dict):
    """
    Deployment Configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleUnits":
            suggest = "scale_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scale_units: Sequence['outputs.ScaleUnitsResponse'],
                 version: Optional[str] = None):
        """
        Deployment Configuration
        :param Sequence['ScaleUnitsResponse'] scale_units: Scale units will contains list of deployment data
        :param str version: deployment template version 
        """
        pulumi.set(__self__, "scale_units", scale_units)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="scaleUnits")
    def scale_units(self) -> Sequence['outputs.ScaleUnitsResponse']:
        """
        Scale units will contains list of deployment data
        """
        return pulumi.get(self, "scale_units")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        deployment template version 
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentDataResponse(dict):
    """
    The Deployment data of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adouPath":
            suggest = "adou_path"
        elif key == "domainFqdn":
            suggest = "domain_fqdn"
        elif key == "hostNetwork":
            suggest = "host_network"
        elif key == "infrastructureNetwork":
            suggest = "infrastructure_network"
        elif key == "namingPrefix":
            suggest = "naming_prefix"
        elif key == "optionalServices":
            suggest = "optional_services"
        elif key == "physicalNodes":
            suggest = "physical_nodes"
        elif key == "secretsLocation":
            suggest = "secrets_location"
        elif key == "securitySettings":
            suggest = "security_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adou_path: Optional[str] = None,
                 cluster: Optional['outputs.DeploymentClusterResponse'] = None,
                 domain_fqdn: Optional[str] = None,
                 host_network: Optional['outputs.HostNetworkResponse'] = None,
                 infrastructure_network: Optional[Sequence['outputs.InfrastructureNetworkResponse']] = None,
                 naming_prefix: Optional[str] = None,
                 observability: Optional['outputs.ObservabilityResponse'] = None,
                 optional_services: Optional['outputs.OptionalServicesResponse'] = None,
                 physical_nodes: Optional[Sequence['outputs.PhysicalNodesResponse']] = None,
                 secrets_location: Optional[str] = None,
                 security_settings: Optional['outputs.DeploymentSecuritySettingsResponse'] = None,
                 storage: Optional['outputs.StorageResponse'] = None):
        """
        The Deployment data of AzureStackHCI Cluster.
        :param str adou_path: The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        :param 'DeploymentClusterResponse' cluster: Observability config to deploy AzureStackHCI Cluster.
        :param str domain_fqdn: FQDN to deploy cluster
        :param 'HostNetworkResponse' host_network: HostNetwork config to deploy AzureStackHCI Cluster.
        :param Sequence['InfrastructureNetworkResponse'] infrastructure_network: InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        :param str naming_prefix: naming prefix to deploy cluster.
        :param 'ObservabilityResponse' observability: Observability config to deploy AzureStackHCI Cluster.
        :param 'OptionalServicesResponse' optional_services: OptionalServices config to deploy AzureStackHCI Cluster.
        :param Sequence['PhysicalNodesResponse'] physical_nodes: list of physical nodes config to deploy AzureStackHCI Cluster.
        :param str secrets_location: The URI to the keyvault / secret store.
        :param 'DeploymentSecuritySettingsResponse' security_settings: SecuritySettings to deploy AzureStackHCI Cluster.
        :param 'StorageResponse' storage: Storage config to deploy AzureStackHCI Cluster.
        """
        if adou_path is not None:
            pulumi.set(__self__, "adou_path", adou_path)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if domain_fqdn is not None:
            pulumi.set(__self__, "domain_fqdn", domain_fqdn)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if infrastructure_network is not None:
            pulumi.set(__self__, "infrastructure_network", infrastructure_network)
        if naming_prefix is not None:
            pulumi.set(__self__, "naming_prefix", naming_prefix)
        if observability is not None:
            pulumi.set(__self__, "observability", observability)
        if optional_services is not None:
            pulumi.set(__self__, "optional_services", optional_services)
        if physical_nodes is not None:
            pulumi.set(__self__, "physical_nodes", physical_nodes)
        if secrets_location is not None:
            pulumi.set(__self__, "secrets_location", secrets_location)
        if security_settings is not None:
            pulumi.set(__self__, "security_settings", security_settings)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="adouPath")
    def adou_path(self) -> Optional[str]:
        """
        The path to the Active Directory Organizational Unit container object prepared for the deployment. 
        """
        return pulumi.get(self, "adou_path")

    @property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.DeploymentClusterResponse']:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="domainFqdn")
    def domain_fqdn(self) -> Optional[str]:
        """
        FQDN to deploy cluster
        """
        return pulumi.get(self, "domain_fqdn")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional['outputs.HostNetworkResponse']:
        """
        HostNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="infrastructureNetwork")
    def infrastructure_network(self) -> Optional[Sequence['outputs.InfrastructureNetworkResponse']]:
        """
        InfrastructureNetwork config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "infrastructure_network")

    @property
    @pulumi.getter(name="namingPrefix")
    def naming_prefix(self) -> Optional[str]:
        """
        naming prefix to deploy cluster.
        """
        return pulumi.get(self, "naming_prefix")

    @property
    @pulumi.getter
    def observability(self) -> Optional['outputs.ObservabilityResponse']:
        """
        Observability config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "observability")

    @property
    @pulumi.getter(name="optionalServices")
    def optional_services(self) -> Optional['outputs.OptionalServicesResponse']:
        """
        OptionalServices config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "optional_services")

    @property
    @pulumi.getter(name="physicalNodes")
    def physical_nodes(self) -> Optional[Sequence['outputs.PhysicalNodesResponse']]:
        """
        list of physical nodes config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "physical_nodes")

    @property
    @pulumi.getter(name="secretsLocation")
    def secrets_location(self) -> Optional[str]:
        """
        The URI to the keyvault / secret store.
        """
        return pulumi.get(self, "secrets_location")

    @property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> Optional['outputs.DeploymentSecuritySettingsResponse']:
        """
        SecuritySettings to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "security_settings")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.StorageResponse']:
        """
        Storage config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class DeploymentSecuritySettingsResponse(dict):
    """
    The SecuritySettings of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitlockerBootVolume":
            suggest = "bitlocker_boot_volume"
        elif key == "bitlockerDataVolumes":
            suggest = "bitlocker_data_volumes"
        elif key == "credentialGuardEnforced":
            suggest = "credential_guard_enforced"
        elif key == "driftControlEnforced":
            suggest = "drift_control_enforced"
        elif key == "drtmProtection":
            suggest = "drtm_protection"
        elif key == "hvciProtection":
            suggest = "hvci_protection"
        elif key == "sideChannelMitigationEnforced":
            suggest = "side_channel_mitigation_enforced"
        elif key == "smbClusterEncryption":
            suggest = "smb_cluster_encryption"
        elif key == "smbSigningEnforced":
            suggest = "smb_signing_enforced"
        elif key == "wdacEnforced":
            suggest = "wdac_enforced"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSecuritySettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSecuritySettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSecuritySettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitlocker_boot_volume: Optional[bool] = None,
                 bitlocker_data_volumes: Optional[bool] = None,
                 credential_guard_enforced: Optional[bool] = None,
                 drift_control_enforced: Optional[bool] = None,
                 drtm_protection: Optional[bool] = None,
                 hvci_protection: Optional[bool] = None,
                 side_channel_mitigation_enforced: Optional[bool] = None,
                 smb_cluster_encryption: Optional[bool] = None,
                 smb_signing_enforced: Optional[bool] = None,
                 wdac_enforced: Optional[bool] = None):
        """
        The SecuritySettings of AzureStackHCI Cluster.
        :param bool bitlocker_boot_volume: When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        :param bool bitlocker_data_volumes: When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        :param bool credential_guard_enforced: When set to true, Credential Guard is enabled.
        :param bool drift_control_enforced: When set to true, the security baseline is re-applied regularly.
        :param bool drtm_protection: By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        :param bool hvci_protection: By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        :param bool side_channel_mitigation_enforced: When set to true, all the side channel mitigations are enabled
        :param bool smb_cluster_encryption: When set to true, cluster east-west traffic is encrypted.
        :param bool smb_signing_enforced: When set to true, the SMB default instance requires sign in for the client and server services.
        :param bool wdac_enforced: WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        if bitlocker_boot_volume is None:
            bitlocker_boot_volume = True
        if bitlocker_boot_volume is not None:
            pulumi.set(__self__, "bitlocker_boot_volume", bitlocker_boot_volume)
        if bitlocker_data_volumes is None:
            bitlocker_data_volumes = True
        if bitlocker_data_volumes is not None:
            pulumi.set(__self__, "bitlocker_data_volumes", bitlocker_data_volumes)
        if credential_guard_enforced is None:
            credential_guard_enforced = False
        if credential_guard_enforced is not None:
            pulumi.set(__self__, "credential_guard_enforced", credential_guard_enforced)
        if drift_control_enforced is None:
            drift_control_enforced = True
        if drift_control_enforced is not None:
            pulumi.set(__self__, "drift_control_enforced", drift_control_enforced)
        if drtm_protection is None:
            drtm_protection = True
        if drtm_protection is not None:
            pulumi.set(__self__, "drtm_protection", drtm_protection)
        if hvci_protection is None:
            hvci_protection = True
        if hvci_protection is not None:
            pulumi.set(__self__, "hvci_protection", hvci_protection)
        if side_channel_mitigation_enforced is None:
            side_channel_mitigation_enforced = True
        if side_channel_mitigation_enforced is not None:
            pulumi.set(__self__, "side_channel_mitigation_enforced", side_channel_mitigation_enforced)
        if smb_cluster_encryption is None:
            smb_cluster_encryption = False
        if smb_cluster_encryption is not None:
            pulumi.set(__self__, "smb_cluster_encryption", smb_cluster_encryption)
        if smb_signing_enforced is None:
            smb_signing_enforced = True
        if smb_signing_enforced is not None:
            pulumi.set(__self__, "smb_signing_enforced", smb_signing_enforced)
        if wdac_enforced is None:
            wdac_enforced = True
        if wdac_enforced is not None:
            pulumi.set(__self__, "wdac_enforced", wdac_enforced)

    @property
    @pulumi.getter(name="bitlockerBootVolume")
    def bitlocker_boot_volume(self) -> Optional[bool]:
        """
        When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
        """
        return pulumi.get(self, "bitlocker_boot_volume")

    @property
    @pulumi.getter(name="bitlockerDataVolumes")
    def bitlocker_data_volumes(self) -> Optional[bool]:
        """
        When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
        """
        return pulumi.get(self, "bitlocker_data_volumes")

    @property
    @pulumi.getter(name="credentialGuardEnforced")
    def credential_guard_enforced(self) -> Optional[bool]:
        """
        When set to true, Credential Guard is enabled.
        """
        return pulumi.get(self, "credential_guard_enforced")

    @property
    @pulumi.getter(name="driftControlEnforced")
    def drift_control_enforced(self) -> Optional[bool]:
        """
        When set to true, the security baseline is re-applied regularly.
        """
        return pulumi.get(self, "drift_control_enforced")

    @property
    @pulumi.getter(name="drtmProtection")
    def drtm_protection(self) -> Optional[bool]:
        """
        By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
        """
        return pulumi.get(self, "drtm_protection")

    @property
    @pulumi.getter(name="hvciProtection")
    def hvci_protection(self) -> Optional[bool]:
        """
        By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
        """
        return pulumi.get(self, "hvci_protection")

    @property
    @pulumi.getter(name="sideChannelMitigationEnforced")
    def side_channel_mitigation_enforced(self) -> Optional[bool]:
        """
        When set to true, all the side channel mitigations are enabled
        """
        return pulumi.get(self, "side_channel_mitigation_enforced")

    @property
    @pulumi.getter(name="smbClusterEncryption")
    def smb_cluster_encryption(self) -> Optional[bool]:
        """
        When set to true, cluster east-west traffic is encrypted.
        """
        return pulumi.get(self, "smb_cluster_encryption")

    @property
    @pulumi.getter(name="smbSigningEnforced")
    def smb_signing_enforced(self) -> Optional[bool]:
        """
        When set to true, the SMB default instance requires sign in for the client and server services.
        """
        return pulumi.get(self, "smb_signing_enforced")

    @property
    @pulumi.getter(name="wdacEnforced")
    def wdac_enforced(self) -> Optional[bool]:
        """
        WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "wdac_enforced")


@pulumi.output_type
class DeploymentStatusResponse(dict):
    """
    The DeploymentStatus of AzureStackHCI Cluster.
    """
    def __init__(__self__, *,
                 status: str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The DeploymentStatus of AzureStackHCI Cluster.
        :param str status: Status of AzureStackHCI Cluster Deployment.
        :param Sequence['DeploymentStepResponse'] steps: List of steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class DeploymentStepResponse(dict):
    """
    The Step of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "fullStepIndex":
            suggest = "full_step_index"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 end_time_utc: str,
                 exception: Sequence[str],
                 full_step_index: str,
                 name: str,
                 start_time_utc: str,
                 status: str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The Step of AzureStackHCI Cluster.
        :param str description: Description of step.
        :param str end_time_utc: End time of step.
        :param Sequence[str] exception: List of exceptions in AzureStackHCI Cluster Deployment.
        :param str full_step_index: FullStepIndex of step.
        :param str name: Name of step.
        :param str start_time_utc: Start time of step.
        :param str status: Status of step. Allowed values are 'Error', 'Success', 'InProgress'
        :param Sequence['DeploymentStepResponse'] steps: List of nested steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time_utc", end_time_utc)
        pulumi.set(__self__, "exception", exception)
        pulumi.set(__self__, "full_step_index", full_step_index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time_utc", start_time_utc)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> str:
        """
        End time of step.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter
    def exception(self) -> Sequence[str]:
        """
        List of exceptions in AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "exception")

    @property
    @pulumi.getter(name="fullStepIndex")
    def full_step_index(self) -> str:
        """
        FullStepIndex of step.
        """
        return pulumi.get(self, "full_step_index")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> str:
        """
        Start time of step.
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of step. Allowed values are 'Error', 'Success', 'InProgress'
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of nested steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class DeviceConfigurationResponse(dict):
    """
    The device Configuration of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceMetadata":
            suggest = "device_metadata"
        elif key == "nicDetails":
            suggest = "nic_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_metadata: Optional[str] = None,
                 nic_details: Optional[Sequence['outputs.NicDetailResponse']] = None):
        """
        The device Configuration of a device.
        :param str device_metadata: device metadata details.
        :param Sequence['NicDetailResponse'] nic_details: NIC Details of device
        """
        if device_metadata is not None:
            pulumi.set(__self__, "device_metadata", device_metadata)
        if nic_details is not None:
            pulumi.set(__self__, "nic_details", nic_details)

    @property
    @pulumi.getter(name="deviceMetadata")
    def device_metadata(self) -> Optional[str]:
        """
        device metadata details.
        """
        return pulumi.get(self, "device_metadata")

    @property
    @pulumi.getter(name="nicDetails")
    def nic_details(self) -> Optional[Sequence['outputs.NicDetailResponse']]:
        """
        NIC Details of device
        """
        return pulumi.get(self, "nic_details")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: str,
                 target: str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param str message: The error message.
        :param str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    The complex type of the extended location.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The complex type of the extended location.
        :param str name: The name of the extended location.
        :param str type: The type of the extended location.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GalleryImageIdentifierResponse(dict):
    """
    This is the gallery image definition identifier.
    """
    def __init__(__self__, *,
                 offer: str,
                 publisher: str,
                 sku: str):
        """
        This is the gallery image definition identifier.
        :param str offer: The name of the gallery image definition offer.
        :param str publisher: The name of the gallery image definition publisher.
        :param str sku: The name of the gallery image definition SKU.
        """
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def offer(self) -> str:
        """
        The name of the gallery image definition offer.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        """
        The name of the gallery image definition publisher.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        The name of the gallery image definition SKU.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class GalleryImageStatusResponse(dict):
    """
    The observed state of gallery images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.GalleryImageStatusResponseDownloadStatus'] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 progress_percentage: Optional[float] = None,
                 provisioning_status: Optional['outputs.GalleryImageStatusResponseProvisioningStatus'] = None):
        """
        The observed state of gallery images
        :param 'GalleryImageStatusResponseDownloadStatus' download_status: The download status of the gallery image
        :param str error_code: GalleryImage provisioning error code
        :param str error_message: Descriptive error message
        :param float progress_percentage: The progress of the operation in percentage
        """
        if download_status is not None:
            pulumi.set(__self__, "download_status", download_status)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if progress_percentage is not None:
            pulumi.set(__self__, "progress_percentage", progress_percentage)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.GalleryImageStatusResponseDownloadStatus']:
        """
        The download status of the gallery image
        """
        return pulumi.get(self, "download_status")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        GalleryImage provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.GalleryImageStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class GalleryImageStatusResponseDownloadStatus(dict):
    """
    The download status of the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadSizeInMB":
            suggest = "download_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponseDownloadStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_size_in_mb: Optional[float] = None):
        """
        The download status of the gallery image
        :param float download_size_in_mb: The downloaded sized of the image in MB
        """
        if download_size_in_mb is not None:
            pulumi.set(__self__, "download_size_in_mb", download_size_in_mb)

    @property
    @pulumi.getter(name="downloadSizeInMB")
    def download_size_in_mb(self) -> Optional[float]:
        """
        The downloaded sized of the image in MB
        """
        return pulumi.get(self, "download_size_in_mb")


@pulumi.output_type
class GalleryImageStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the gallery image
        :param str status: The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the gallery image
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GalleryImageVersionResponse(dict):
    """
    Specifies information about the gallery image version that you want to create or update.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_profile: 'outputs.GalleryImageVersionStorageProfileResponse',
                 name: Optional[str] = None):
        """
        Specifies information about the gallery image version that you want to create or update.
        :param 'GalleryImageVersionStorageProfileResponse' storage_profile: This is the storage profile of a Gallery Image Version.
        :param str name: This is the version of the gallery image.
        """
        pulumi.set(__self__, "storage_profile", storage_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> 'outputs.GalleryImageVersionStorageProfileResponse':
        """
        This is the storage profile of a Gallery Image Version.
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        This is the version of the gallery image.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GalleryImageVersionStorageProfileResponse(dict):
    """
    This is the storage profile of a Gallery Image Version.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osDiskImage":
            suggest = "os_disk_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageVersionStorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageVersionStorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageVersionStorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_disk_image: Optional['outputs.GalleryOSDiskImageResponse'] = None):
        """
        This is the storage profile of a Gallery Image Version.
        :param 'GalleryOSDiskImageResponse' os_disk_image: This is the OS disk image.
        """
        if os_disk_image is not None:
            pulumi.set(__self__, "os_disk_image", os_disk_image)

    @property
    @pulumi.getter(name="osDiskImage")
    def os_disk_image(self) -> Optional['outputs.GalleryOSDiskImageResponse']:
        """
        This is the OS disk image.
        """
        return pulumi.get(self, "os_disk_image")


@pulumi.output_type
class GalleryOSDiskImageResponse(dict):
    """
    This is the OS disk image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeInMB":
            suggest = "size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryOSDiskImageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryOSDiskImageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryOSDiskImageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_in_mb: float):
        """
        This is the OS disk image.
        :param float size_in_mb: This property indicates the size of the VHD to be created.
        """
        pulumi.set(__self__, "size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="sizeInMB")
    def size_in_mb(self) -> float:
        """
        This property indicates the size of the VHD to be created.
        """
        return pulumi.get(self, "size_in_mb")


@pulumi.output_type
class GuestAgentInstallStatusResponse(dict):
    """
    Defines the status of a guest agent installation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "lastStatusChange":
            suggest = "last_status_change"
        elif key == "vmUuid":
            suggest = "vm_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuestAgentInstallStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuestAgentInstallStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuestAgentInstallStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: str,
                 error_details: Sequence['outputs.ErrorDetailResponse'],
                 last_status_change: str,
                 status: str,
                 vm_uuid: str):
        """
        Defines the status of a guest agent installation.
        :param str agent_version: The hybrid machine agent full version.
        :param Sequence['ErrorDetailResponse'] error_details: Details about the error state.
        :param str last_status_change: The time of the last status change.
        :param str status: The installation status of the hybrid machine agent installation.
        :param str vm_uuid: Specifies the VM's unique SMBIOS ID.
        """
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "last_status_change", last_status_change)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vm_uuid", vm_uuid)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> str:
        """
        The hybrid machine agent full version.
        """
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        Details about the error state.
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter(name="lastStatusChange")
    def last_status_change(self) -> str:
        """
        The time of the last status change.
        """
        return pulumi.get(self, "last_status_change")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The installation status of the hybrid machine agent installation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vmUuid")
    def vm_uuid(self) -> str:
        """
        Specifies the VM's unique SMBIOS ID.
        """
        return pulumi.get(self, "vm_uuid")


@pulumi.output_type
class HostNetworkResponse(dict):
    """
    The HostNetwork of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableStorageAutoIp":
            suggest = "enable_storage_auto_ip"
        elif key == "storageConnectivitySwitchless":
            suggest = "storage_connectivity_switchless"
        elif key == "storageNetworks":
            suggest = "storage_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostNetworkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostNetworkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostNetworkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_storage_auto_ip: Optional[bool] = None,
                 intents: Optional[Sequence['outputs.IntentsResponse']] = None,
                 storage_connectivity_switchless: Optional[bool] = None,
                 storage_networks: Optional[Sequence['outputs.StorageNetworksResponse']] = None):
        """
        The HostNetwork of a cluster.
        :param bool enable_storage_auto_ip: Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        :param Sequence['IntentsResponse'] intents: The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        :param bool storage_connectivity_switchless: Defines how the storage adapters between nodes are connected either switch or switch less..
        :param Sequence['StorageNetworksResponse'] storage_networks: List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        if enable_storage_auto_ip is None:
            enable_storage_auto_ip = False
        if enable_storage_auto_ip is not None:
            pulumi.set(__self__, "enable_storage_auto_ip", enable_storage_auto_ip)
        if intents is not None:
            pulumi.set(__self__, "intents", intents)
        if storage_connectivity_switchless is None:
            storage_connectivity_switchless = False
        if storage_connectivity_switchless is not None:
            pulumi.set(__self__, "storage_connectivity_switchless", storage_connectivity_switchless)
        if storage_networks is not None:
            pulumi.set(__self__, "storage_networks", storage_networks)

    @property
    @pulumi.getter(name="enableStorageAutoIp")
    def enable_storage_auto_ip(self) -> Optional[bool]:
        """
        Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
        """
        return pulumi.get(self, "enable_storage_auto_ip")

    @property
    @pulumi.getter
    def intents(self) -> Optional[Sequence['outputs.IntentsResponse']]:
        """
        The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
        """
        return pulumi.get(self, "intents")

    @property
    @pulumi.getter(name="storageConnectivitySwitchless")
    def storage_connectivity_switchless(self) -> Optional[bool]:
        """
        Defines how the storage adapters between nodes are connected either switch or switch less..
        """
        return pulumi.get(self, "storage_connectivity_switchless")

    @property
    @pulumi.getter(name="storageNetworks")
    def storage_networks(self) -> Optional[Sequence['outputs.StorageNetworksResponse']]:
        """
        List of StorageNetworks config to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "storage_networks")


@pulumi.output_type
class HttpProxyConfigurationResponse(dict):
    """
    HTTP Proxy configuration for the VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpProxy":
            suggest = "http_proxy"
        elif key == "httpsProxy":
            suggest = "https_proxy"
        elif key == "noProxy":
            suggest = "no_proxy"
        elif key == "trustedCa":
            suggest = "trusted_ca"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpProxyConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_proxy: Optional[str] = None,
                 https_proxy: Optional[str] = None,
                 no_proxy: Optional[Sequence[str]] = None,
                 trusted_ca: Optional[str] = None):
        """
        HTTP Proxy configuration for the VM.
        :param str http_proxy: The HTTP proxy server endpoint to use.
        :param str https_proxy: The HTTPS proxy server endpoint to use.
        :param Sequence[str] no_proxy: The endpoints that should not go through proxy.
        :param str trusted_ca: Alternative CA cert to use for connecting to proxy servers.
        """
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if no_proxy is not None:
            pulumi.set(__self__, "no_proxy", no_proxy)
        if trusted_ca is not None:
            pulumi.set(__self__, "trusted_ca", trusted_ca)

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> Optional[str]:
        """
        The HTTP proxy server endpoint to use.
        """
        return pulumi.get(self, "http_proxy")

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[str]:
        """
        The HTTPS proxy server endpoint to use.
        """
        return pulumi.get(self, "https_proxy")

    @property
    @pulumi.getter(name="noProxy")
    def no_proxy(self) -> Optional[Sequence[str]]:
        """
        The endpoints that should not go through proxy.
        """
        return pulumi.get(self, "no_proxy")

    @property
    @pulumi.getter(name="trustedCa")
    def trusted_ca(self) -> Optional[str]:
        """
        Alternative CA cert to use for connecting to proxy servers.
        """
        return pulumi.get(self, "trusted_ca")


@pulumi.output_type
class IPPoolInfoResponse(dict):
    def __init__(__self__, *,
                 available: str,
                 used: str):
        """
        :param str available: Number of IP addresses available in the IP Pool
        :param str used: Number of IP addresses allocated from the IP Pool
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def available(self) -> str:
        """
        Number of IP addresses available in the IP Pool
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def used(self) -> str:
        """
        Number of IP addresses allocated from the IP Pool
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class IPPoolResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipPoolType":
            suggest = "ip_pool_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPPoolResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPPoolResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPPoolResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end: Optional[str] = None,
                 info: Optional['outputs.IPPoolInfoResponse'] = None,
                 ip_pool_type: Optional[str] = None,
                 name: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param str end: End of the IP address pool
        :param str ip_pool_type: Type of the IP Pool [vm, vippool]
        :param str name: Name of the IP-Pool
        :param str start: Start of the IP address pool
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if ip_pool_type is not None:
            pulumi.set(__self__, "ip_pool_type", ip_pool_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        End of the IP address pool
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def info(self) -> Optional['outputs.IPPoolInfoResponse']:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="ipPoolType")
    def ip_pool_type(self) -> Optional[str]:
        """
        Type of the IP Pool [vm, vippool]
        """
        return pulumi.get(self, "ip_pool_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the IP-Pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        Start of the IP address pool
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        Identity for the resource.
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InfrastructureNetworkResponse(dict):
    """
    The InfrastructureNetwork of a AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "ipPools":
            suggest = "ip_pools"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "useDhcp":
            suggest = "use_dhcp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfrastructureNetworkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfrastructureNetworkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfrastructureNetworkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip_pools: Optional[Sequence['outputs.IpPoolsResponse']] = None,
                 subnet_mask: Optional[str] = None,
                 use_dhcp: Optional[bool] = None):
        """
        The InfrastructureNetwork of a AzureStackHCI Cluster.
        :param Sequence[str] dns_servers: IPv4 address of the DNS servers in your environment.
        :param str gateway: Default gateway that should be used for the provided IP address space.
        :param Sequence['IpPoolsResponse'] ip_pools: Range of IP addresses from which addresses are allocated for nodes within a subnet.
        :param str subnet_mask: Subnet mask that matches the provided IP address space.
        :param bool use_dhcp: Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if use_dhcp is not None:
            pulumi.set(__self__, "use_dhcp", use_dhcp)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        IPv4 address of the DNS servers in your environment.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Default gateway that should be used for the provided IP address space.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[Sequence['outputs.IpPoolsResponse']]:
        """
        Range of IP addresses from which addresses are allocated for nodes within a subnet.
        """
        return pulumi.get(self, "ip_pools")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        """
        Subnet mask that matches the provided IP address space.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="useDhcp")
    def use_dhcp(self) -> Optional[bool]:
        """
        Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
        """
        return pulumi.get(self, "use_dhcp")


@pulumi.output_type
class InstanceViewStatusResponse(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceViewStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceViewStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceViewStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_status: Optional[str] = None,
                 level: Optional[str] = None,
                 message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        Instance view status.
        :param str code: The status code.
        :param str display_status: The short localizable label for the status.
        :param str level: The level code.
        :param str message: The detailed status message, including for alerts and error messages.
        :param str time: The time of the status.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[str]:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class IntentsResponse(dict):
    """
    The Intents of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterPropertyOverrides":
            suggest = "adapter_property_overrides"
        elif key == "overrideAdapterProperty":
            suggest = "override_adapter_property"
        elif key == "overrideQosPolicy":
            suggest = "override_qos_policy"
        elif key == "overrideVirtualSwitchConfiguration":
            suggest = "override_virtual_switch_configuration"
        elif key == "qosPolicyOverrides":
            suggest = "qos_policy_overrides"
        elif key == "trafficType":
            suggest = "traffic_type"
        elif key == "virtualSwitchConfigurationOverrides":
            suggest = "virtual_switch_configuration_overrides"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter: Optional[Sequence[str]] = None,
                 adapter_property_overrides: Optional['outputs.AdapterPropertyOverridesResponse'] = None,
                 name: Optional[str] = None,
                 override_adapter_property: Optional[bool] = None,
                 override_qos_policy: Optional[bool] = None,
                 override_virtual_switch_configuration: Optional[bool] = None,
                 qos_policy_overrides: Optional['outputs.QosPolicyOverridesResponse'] = None,
                 traffic_type: Optional[Sequence[str]] = None,
                 virtual_switch_configuration_overrides: Optional['outputs.VirtualSwitchConfigurationOverridesResponse'] = None):
        """
        The Intents of a cluster.
        :param Sequence[str] adapter: Array of network interfaces used for the network intent.
        :param 'AdapterPropertyOverridesResponse' adapter_property_overrides: Set Adapter PropertyOverrides for cluster.
        :param str name: Name of the network intent you wish to create.
        :param bool override_adapter_property: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param bool override_qos_policy: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param bool override_virtual_switch_configuration: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param 'QosPolicyOverridesResponse' qos_policy_overrides: Set QoS PolicyOverrides for cluster.
        :param Sequence[str] traffic_type: List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        :param 'VirtualSwitchConfigurationOverridesResponse' virtual_switch_configuration_overrides: Set virtualSwitch ConfigurationOverrides for cluster.
        """
        if adapter is not None:
            pulumi.set(__self__, "adapter", adapter)
        if adapter_property_overrides is not None:
            pulumi.set(__self__, "adapter_property_overrides", adapter_property_overrides)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_adapter_property is None:
            override_adapter_property = False
        if override_adapter_property is not None:
            pulumi.set(__self__, "override_adapter_property", override_adapter_property)
        if override_qos_policy is None:
            override_qos_policy = False
        if override_qos_policy is not None:
            pulumi.set(__self__, "override_qos_policy", override_qos_policy)
        if override_virtual_switch_configuration is None:
            override_virtual_switch_configuration = False
        if override_virtual_switch_configuration is not None:
            pulumi.set(__self__, "override_virtual_switch_configuration", override_virtual_switch_configuration)
        if qos_policy_overrides is not None:
            pulumi.set(__self__, "qos_policy_overrides", qos_policy_overrides)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if virtual_switch_configuration_overrides is not None:
            pulumi.set(__self__, "virtual_switch_configuration_overrides", virtual_switch_configuration_overrides)

    @property
    @pulumi.getter
    def adapter(self) -> Optional[Sequence[str]]:
        """
        Array of network interfaces used for the network intent.
        """
        return pulumi.get(self, "adapter")

    @property
    @pulumi.getter(name="adapterPropertyOverrides")
    def adapter_property_overrides(self) -> Optional['outputs.AdapterPropertyOverridesResponse']:
        """
        Set Adapter PropertyOverrides for cluster.
        """
        return pulumi.get(self, "adapter_property_overrides")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the network intent you wish to create.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideAdapterProperty")
    def override_adapter_property(self) -> Optional[bool]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_adapter_property")

    @property
    @pulumi.getter(name="overrideQosPolicy")
    def override_qos_policy(self) -> Optional[bool]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_qos_policy")

    @property
    @pulumi.getter(name="overrideVirtualSwitchConfiguration")
    def override_virtual_switch_configuration(self) -> Optional[bool]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "override_virtual_switch_configuration")

    @property
    @pulumi.getter(name="qosPolicyOverrides")
    def qos_policy_overrides(self) -> Optional['outputs.QosPolicyOverridesResponse']:
        """
        Set QoS PolicyOverrides for cluster.
        """
        return pulumi.get(self, "qos_policy_overrides")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[Sequence[str]]:
        """
        List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
        """
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="virtualSwitchConfigurationOverrides")
    def virtual_switch_configuration_overrides(self) -> Optional['outputs.VirtualSwitchConfigurationOverridesResponse']:
        """
        Set virtualSwitch ConfigurationOverrides for cluster.
        """
        return pulumi.get(self, "virtual_switch_configuration_overrides")


@pulumi.output_type
class IpPoolsResponse(dict):
    """
    The dnsServers of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endingAddress":
            suggest = "ending_address"
        elif key == "startingAddress":
            suggest = "starting_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpPoolsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpPoolsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpPoolsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ending_address: Optional[str] = None,
                 starting_address: Optional[str] = None):
        """
        The dnsServers of a device.
        :param str ending_address: Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        :param str starting_address: Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        if ending_address is not None:
            pulumi.set(__self__, "ending_address", ending_address)
        if starting_address is not None:
            pulumi.set(__self__, "starting_address", starting_address)

    @property
    @pulumi.getter(name="endingAddress")
    def ending_address(self) -> Optional[str]:
        """
        Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "ending_address")

    @property
    @pulumi.getter(name="startingAddress")
    def starting_address(self) -> Optional[str]:
        """
        Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
        """
        return pulumi.get(self, "starting_address")


@pulumi.output_type
class LogicalNetworkPropertiesResponseDhcpOptions(dict):
    """
    DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalNetworkPropertiesResponseDhcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalNetworkPropertiesResponseDhcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalNetworkPropertiesResponseDhcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None):
        """
        DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
        :param Sequence[str] dns_servers: The list of DNS servers IP addresses.
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        The list of DNS servers IP addresses.
        """
        return pulumi.get(self, "dns_servers")


@pulumi.output_type
class LogicalNetworkStatusResponse(dict):
    """
    The observed state of logical networks
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalNetworkStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalNetworkStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalNetworkStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 provisioning_status: Optional['outputs.LogicalNetworkStatusResponseProvisioningStatus'] = None):
        """
        The observed state of logical networks
        :param str error_code: LogicalNetwork provisioning error code
        :param str error_message: Descriptive error message
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        LogicalNetwork provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.LogicalNetworkStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class LogicalNetworkStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogicalNetworkStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogicalNetworkStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogicalNetworkStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the logical network
        :param str status: The status of the operation performed on the logical network [Succeeded, Failed, InProgress]
        """
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the logical network
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the logical network [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponse(dict):
    """
    The observed state of marketplace gallery images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.MarketplaceGalleryImageStatusResponseDownloadStatus'] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 progress_percentage: Optional[float] = None,
                 provisioning_status: Optional['outputs.MarketplaceGalleryImageStatusResponseProvisioningStatus'] = None):
        """
        The observed state of marketplace gallery images
        :param 'MarketplaceGalleryImageStatusResponseDownloadStatus' download_status: The download status of the gallery image
        :param str error_code: MarketplaceGalleryImage provisioning error code
        :param str error_message: Descriptive error message
        :param float progress_percentage: The progress of the operation in percentage
        """
        if download_status is not None:
            pulumi.set(__self__, "download_status", download_status)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if progress_percentage is not None:
            pulumi.set(__self__, "progress_percentage", progress_percentage)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.MarketplaceGalleryImageStatusResponseDownloadStatus']:
        """
        The download status of the gallery image
        """
        return pulumi.get(self, "download_status")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        MarketplaceGalleryImage provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.MarketplaceGalleryImageStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponseDownloadStatus(dict):
    """
    The download status of the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadSizeInMB":
            suggest = "download_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponseDownloadStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_size_in_mb: Optional[float] = None):
        """
        The download status of the gallery image
        :param float download_size_in_mb: The downloaded sized of the image in MB
        """
        if download_size_in_mb is not None:
            pulumi.set(__self__, "download_size_in_mb", download_size_in_mb)

    @property
    @pulumi.getter(name="downloadSizeInMB")
    def download_size_in_mb(self) -> Optional[float]:
        """
        The downloaded sized of the image in MB
        """
        return pulumi.get(self, "download_size_in_mb")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the gallery image
        :param str status: The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the gallery image
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NicDetailResponse(dict):
    """
    The NIC Detail of a device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adapterName":
            suggest = "adapter_name"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "defaultGateway":
            suggest = "default_gateway"
        elif key == "defaultIsolationId":
            suggest = "default_isolation_id"
        elif key == "dnsServers":
            suggest = "dns_servers"
        elif key == "driverVersion":
            suggest = "driver_version"
        elif key == "interfaceDescription":
            suggest = "interface_description"
        elif key == "ip4Address":
            suggest = "ip4_address"
        elif key == "subnetMask":
            suggest = "subnet_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapter_name: str,
                 component_id: Optional[str] = None,
                 default_gateway: Optional[str] = None,
                 default_isolation_id: Optional[str] = None,
                 dns_servers: Optional[Sequence[str]] = None,
                 driver_version: Optional[str] = None,
                 interface_description: Optional[str] = None,
                 ip4_address: Optional[str] = None,
                 subnet_mask: Optional[str] = None):
        """
        The NIC Detail of a device.
        :param str adapter_name: Adapter Name of NIC
        :param str component_id: Component Id of NIC
        :param str default_gateway: Default Gateway of NIC
        :param str default_isolation_id: Default Isolation of Management NIC
        :param Sequence[str] dns_servers: DNS Servers for NIC
        :param str driver_version: Driver Version of NIC
        :param str interface_description: Interface Description of NIC
        :param str ip4_address: Subnet Mask of NIC
        :param str subnet_mask: Subnet Mask of NIC
        """
        pulumi.set(__self__, "adapter_name", adapter_name)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if default_isolation_id is not None:
            pulumi.set(__self__, "default_isolation_id", default_isolation_id)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if driver_version is not None:
            pulumi.set(__self__, "driver_version", driver_version)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if ip4_address is not None:
            pulumi.set(__self__, "ip4_address", ip4_address)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter(name="adapterName")
    def adapter_name(self) -> str:
        """
        Adapter Name of NIC
        """
        return pulumi.get(self, "adapter_name")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        """
        Component Id of NIC
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[str]:
        """
        Default Gateway of NIC
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="defaultIsolationId")
    def default_isolation_id(self) -> Optional[str]:
        """
        Default Isolation of Management NIC
        """
        return pulumi.get(self, "default_isolation_id")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        DNS Servers for NIC
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="driverVersion")
    def driver_version(self) -> Optional[str]:
        """
        Driver Version of NIC
        """
        return pulumi.get(self, "driver_version")

    @property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[str]:
        """
        Interface Description of NIC
        """
        return pulumi.get(self, "interface_description")

    @property
    @pulumi.getter(name="ip4Address")
    def ip4_address(self) -> Optional[str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "ip4_address")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[str]:
        """
        Subnet Mask of NIC
        """
        return pulumi.get(self, "subnet_mask")


@pulumi.output_type
class ObservabilityResponse(dict):
    """
    The Observability of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "episodicDataUpload":
            suggest = "episodic_data_upload"
        elif key == "euLocation":
            suggest = "eu_location"
        elif key == "streamingDataClient":
            suggest = "streaming_data_client"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObservabilityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObservabilityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObservabilityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 episodic_data_upload: Optional[bool] = None,
                 eu_location: Optional[bool] = None,
                 streaming_data_client: Optional[bool] = None):
        """
        The Observability of AzureStackHCI Cluster.
        :param bool episodic_data_upload: When set to true, collects log data to facilitate quicker issue resolution.
        :param bool eu_location: Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        :param bool streaming_data_client: Enables telemetry data to be sent to Microsoft
        """
        if episodic_data_upload is None:
            episodic_data_upload = True
        if episodic_data_upload is not None:
            pulumi.set(__self__, "episodic_data_upload", episodic_data_upload)
        if eu_location is None:
            eu_location = False
        if eu_location is not None:
            pulumi.set(__self__, "eu_location", eu_location)
        if streaming_data_client is None:
            streaming_data_client = True
        if streaming_data_client is not None:
            pulumi.set(__self__, "streaming_data_client", streaming_data_client)

    @property
    @pulumi.getter(name="episodicDataUpload")
    def episodic_data_upload(self) -> Optional[bool]:
        """
        When set to true, collects log data to facilitate quicker issue resolution.
        """
        return pulumi.get(self, "episodic_data_upload")

    @property
    @pulumi.getter(name="euLocation")
    def eu_location(self) -> Optional[bool]:
        """
        Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
        """
        return pulumi.get(self, "eu_location")

    @property
    @pulumi.getter(name="streamingDataClient")
    def streaming_data_client(self) -> Optional[bool]:
        """
        Enables telemetry data to be sent to Microsoft
        """
        return pulumi.get(self, "streaming_data_client")


@pulumi.output_type
class OptionalServicesResponse(dict):
    """
    The OptionalServices of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLocation":
            suggest = "custom_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OptionalServicesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OptionalServicesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OptionalServicesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_location: Optional[str] = None):
        """
        The OptionalServices of AzureStackHCI Cluster.
        :param str custom_location: The name of custom location.
        """
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional[str]:
        """
        The name of custom location.
        """
        return pulumi.get(self, "custom_location")


@pulumi.output_type
class PhysicalNodesResponse(dict):
    """
    The PhysicalNodes of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhysicalNodesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhysicalNodesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhysicalNodesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The PhysicalNodes of a cluster.
        :param str ipv4_address: The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        :param str name: NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        NETBIOS name of each physical server on your Azure Stack HCI cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class QosPolicyOverridesResponse(dict):
    """
    The QoSPolicyOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPercentageSMB":
            suggest = "bandwidth_percentage_smb"
        elif key == "priorityValue8021ActionCluster":
            suggest = "priority_value8021_action_cluster"
        elif key == "priorityValue8021ActionSMB":
            suggest = "priority_value8021_action_smb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QosPolicyOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QosPolicyOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QosPolicyOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_percentage_smb: Optional[str] = None,
                 priority_value8021_action_cluster: Optional[str] = None,
                 priority_value8021_action_smb: Optional[str] = None):
        """
        The QoSPolicyOverrides of a cluster.
        :param str bandwidth_percentage_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str priority_value8021_action_cluster: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        :param str priority_value8021_action_smb: This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        if bandwidth_percentage_smb is not None:
            pulumi.set(__self__, "bandwidth_percentage_smb", bandwidth_percentage_smb)
        if priority_value8021_action_cluster is not None:
            pulumi.set(__self__, "priority_value8021_action_cluster", priority_value8021_action_cluster)
        if priority_value8021_action_smb is not None:
            pulumi.set(__self__, "priority_value8021_action_smb", priority_value8021_action_smb)

    @property
    @pulumi.getter(name="bandwidthPercentageSMB")
    def bandwidth_percentage_smb(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "bandwidth_percentage_smb")

    @property
    @pulumi.getter(name="priorityValue8021ActionCluster")
    def priority_value8021_action_cluster(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_cluster")

    @property
    @pulumi.getter(name="priorityValue8021ActionSMB")
    def priority_value8021_action_smb(self) -> Optional[str]:
        """
        This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
        """
        return pulumi.get(self, "priority_value8021_action_smb")


@pulumi.output_type
class ReportedPropertiesResponse(dict):
    """
    The DeploymentStatus of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentStatus":
            suggest = "deployment_status"
        elif key == "validationStatus":
            suggest = "validation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_status: 'outputs.DeploymentStatusResponse',
                 validation_status: 'outputs.ValidationStatusResponse'):
        """
        The DeploymentStatus of AzureStackHCI Cluster.
        :param 'DeploymentStatusResponse' deployment_status: Deployment status of AzureStackHCI Cluster Deployment.
        :param 'ValidationStatusResponse' validation_status: validation status of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "validation_status", validation_status)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> 'outputs.DeploymentStatusResponse':
        """
        Deployment status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter(name="validationStatus")
    def validation_status(self) -> 'outputs.ValidationStatusResponse':
        """
        validation status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "validation_status")


@pulumi.output_type
class RouteResponse(dict):
    """
    Route - Route resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "nextHopIpAddress":
            suggest = "next_hop_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[str] = None,
                 name: Optional[str] = None,
                 next_hop_ip_address: Optional[str] = None):
        """
        Route - Route resource.
        :param str address_prefix: The destination CIDR to which the route applies.
        :param str name: Name - name of the subnet
        :param str next_hop_ip_address: The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_ip_address is not None:
            pulumi.set(__self__, "next_hop_ip_address", next_hop_ip_address)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[str]:
        """
        The destination CIDR to which the route applies.
        """
        return pulumi.get(self, "address_prefix")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - name of the subnet
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> Optional[str]:
        """
        The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        return pulumi.get(self, "next_hop_ip_address")


@pulumi.output_type
class RouteTableResponse(dict):
    """
    Route table resource.
    """
    def __init__(__self__, *,
                 etag: str,
                 name: str,
                 type: str,
                 routes: Optional[Sequence['outputs.RouteResponse']] = None):
        """
        Route table resource.
        :param str etag: A unique read-only string that changes whenever the resource is updated.
        :param str name: Resource name.
        :param str type: Resource type.
        :param Sequence['RouteResponse'] routes: Collection of routes contained within a route table.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.RouteResponse']]:
        """
        Collection of routes contained within a route table.
        """
        return pulumi.get(self, "routes")


@pulumi.output_type
class ScaleUnitsResponse(dict):
    """
    Scale units will contains list of deployment data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentData":
            suggest = "deployment_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleUnitsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleUnitsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleUnitsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_data: 'outputs.DeploymentDataResponse'):
        """
        Scale units will contains list of deployment data
        :param 'DeploymentDataResponse' deployment_data: Deployment Data to deploy AzureStackHCI Cluster.
        """
        pulumi.set(__self__, "deployment_data", deployment_data)

    @property
    @pulumi.getter(name="deploymentData")
    def deployment_data(self) -> 'outputs.DeploymentDataResponse':
        """
        Deployment Data to deploy AzureStackHCI Cluster.
        """
        return pulumi.get(self, "deployment_data")


@pulumi.output_type
class SshConfigurationResponse(dict):
    """
    SSH configuration for Linux based VMs running on Azure
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.SshPublicKeyResponse']] = None):
        """
        SSH configuration for Linux based VMs running on Azure
        :param Sequence['SshPublicKeyResponse'] public_keys: The list of SSH public keys used to authenticate with linux based VMs.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.SshPublicKeyResponse']]:
        """
        The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class SshPublicKeyResponse(dict):
    """
    Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshPublicKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[str] = None,
                 path: Optional[str] = None):
        """
        Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
        :param str key_data: SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        :param str path: Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StorageNetworksResponse(dict):
    """
    The StorageNetworks of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAdapterName":
            suggest = "network_adapter_name"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworksResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworksResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworksResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 network_adapter_name: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        """
        The StorageNetworks of a cluster.
        :param str name: Name of the storage network.
        :param str network_adapter_name: Name of the storage network adapter.
        :param str vlan_id: ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_adapter_name is not None:
            pulumi.set(__self__, "network_adapter_name", network_adapter_name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the storage network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAdapterName")
    def network_adapter_name(self) -> Optional[str]:
        """
        Name of the storage network adapter.
        """
        return pulumi.get(self, "network_adapter_name")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        """
        ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class StorageResponse(dict):
    """
    The Storage config of AzureStackHCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationMode":
            suggest = "configuration_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_mode: Optional[str] = None):
        """
        The Storage config of AzureStackHCI Cluster.
        :param str configuration_mode: By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        if configuration_mode is None:
            configuration_mode = 'Express'
        if configuration_mode is not None:
            pulumi.set(__self__, "configuration_mode", configuration_mode)

    @property
    @pulumi.getter(name="configurationMode")
    def configuration_mode(self) -> Optional[str]:
        """
        By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
        """
        return pulumi.get(self, "configuration_mode")


@pulumi.output_type
class SubnetPropertiesFormatResponseIpConfigurationReferences(dict):
    """
    IPConfigurationReference - Describes a IPConfiguration under the virtual network
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        IPConfigurationReference - Describes a IPConfiguration under the virtual network
        :param str id: IPConfigurationID
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        IPConfigurationID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SubnetResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "addressPrefixes":
            suggest = "address_prefixes"
        elif key == "ipAllocationMethod":
            suggest = "ip_allocation_method"
        elif key == "ipConfigurationReferences":
            suggest = "ip_configuration_references"
        elif key == "ipPools":
            suggest = "ip_pools"
        elif key == "routeTable":
            suggest = "route_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[str] = None,
                 address_prefixes: Optional[Sequence[str]] = None,
                 ip_allocation_method: Optional[str] = None,
                 ip_configuration_references: Optional[Sequence['outputs.SubnetPropertiesFormatResponseIpConfigurationReferences']] = None,
                 ip_pools: Optional[Sequence['outputs.IPPoolResponse']] = None,
                 name: Optional[str] = None,
                 route_table: Optional['outputs.RouteTableResponse'] = None,
                 vlan: Optional[int] = None):
        """
        :param str address_prefix: The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
        :param Sequence[str] address_prefixes: List of address prefixes for the subnet.
        :param str ip_allocation_method: IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        :param Sequence['SubnetPropertiesFormatResponseIpConfigurationReferences'] ip_configuration_references: IPConfigurationReferences - list of IPConfigurationReferences
        :param Sequence['IPPoolResponse'] ip_pools: network associated pool of IP Addresses
        :param str name: Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        :param 'RouteTableResponse' route_table: Route table resource.
        :param int vlan: Vlan to use for the subnet
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefixes is not None:
            pulumi.set(__self__, "address_prefixes", address_prefixes)
        if ip_allocation_method is not None:
            pulumi.set(__self__, "ip_allocation_method", ip_allocation_method)
        if ip_configuration_references is not None:
            pulumi.set(__self__, "ip_configuration_references", ip_configuration_references)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_table is not None:
            pulumi.set(__self__, "route_table", route_table)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[str]:
        """
        The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
        """
        return pulumi.get(self, "address_prefix")

    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Optional[Sequence[str]]:
        """
        List of address prefixes for the subnet.
        """
        return pulumi.get(self, "address_prefixes")

    @property
    @pulumi.getter(name="ipAllocationMethod")
    def ip_allocation_method(self) -> Optional[str]:
        """
        IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        """
        return pulumi.get(self, "ip_allocation_method")

    @property
    @pulumi.getter(name="ipConfigurationReferences")
    def ip_configuration_references(self) -> Optional[Sequence['outputs.SubnetPropertiesFormatResponseIpConfigurationReferences']]:
        """
        IPConfigurationReferences - list of IPConfigurationReferences
        """
        return pulumi.get(self, "ip_configuration_references")

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[Sequence['outputs.IPPoolResponse']]:
        """
        network associated pool of IP Addresses
        """
        return pulumi.get(self, "ip_pools")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeTable")
    def route_table(self) -> Optional['outputs.RouteTableResponse']:
        """
        Route table resource.
        """
        return pulumi.get(self, "route_table")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        Vlan to use for the subnet
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ValidationStatusResponse(dict):
    """
    The ValidationStatus of AzureStackHCI Cluster.
    """
    def __init__(__self__, *,
                 status: str,
                 steps: Sequence['outputs.DeploymentStepResponse']):
        """
        The ValidationStatus of AzureStackHCI Cluster.
        :param str status: Status of AzureStackHCI Cluster Deployment.
        :param Sequence['DeploymentStepResponse'] steps: List of steps of AzureStackHCI Cluster Deployment.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.DeploymentStepResponse']:
        """
        List of steps of AzureStackHCI Cluster Deployment.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class VirtualMachineConfigAgentInstanceViewResponse(dict):
    """
    The instance view of the VM Config Agent running on the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmConfigAgentVersion":
            suggest = "vm_config_agent_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineConfigAgentInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineConfigAgentInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineConfigAgentInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 statuses: Optional[Sequence['outputs.InstanceViewStatusResponse']] = None,
                 vm_config_agent_version: Optional[str] = None):
        """
        The instance view of the VM Config Agent running on the virtual machine.
        :param Sequence['InstanceViewStatusResponse'] statuses: The resource status information.
        :param str vm_config_agent_version: The VM Config Agent full version.
        """
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if vm_config_agent_version is not None:
            pulumi.set(__self__, "vm_config_agent_version", vm_config_agent_version)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.InstanceViewStatusResponse']]:
        """
        The resource status information.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="vmConfigAgentVersion")
    def vm_config_agent_version(self) -> Optional[str]:
        """
        The VM Config Agent full version.
        """
        return pulumi.get(self, "vm_config_agent_version")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseDataDisks(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Resource ID of the data disk
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID of the data disk
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseDynamicMemoryConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumMemoryMB":
            suggest = "maximum_memory_mb"
        elif key == "minimumMemoryMB":
            suggest = "minimum_memory_mb"
        elif key == "targetMemoryBuffer":
            suggest = "target_memory_buffer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseDynamicMemoryConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseDynamicMemoryConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseDynamicMemoryConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_memory_mb: Optional[float] = None,
                 minimum_memory_mb: Optional[float] = None,
                 target_memory_buffer: Optional[int] = None):
        """
        :param int target_memory_buffer: Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        if maximum_memory_mb is not None:
            pulumi.set(__self__, "maximum_memory_mb", maximum_memory_mb)
        if minimum_memory_mb is not None:
            pulumi.set(__self__, "minimum_memory_mb", minimum_memory_mb)
        if target_memory_buffer is not None:
            pulumi.set(__self__, "target_memory_buffer", target_memory_buffer)

    @property
    @pulumi.getter(name="maximumMemoryMB")
    def maximum_memory_mb(self) -> Optional[float]:
        return pulumi.get(self, "maximum_memory_mb")

    @property
    @pulumi.getter(name="minimumMemoryMB")
    def minimum_memory_mb(self) -> Optional[float]:
        return pulumi.get(self, "minimum_memory_mb")

    @property
    @pulumi.getter(name="targetMemoryBuffer")
    def target_memory_buffer(self) -> Optional[int]:
        """
        Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        return pulumi.get(self, "target_memory_buffer")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseHardwareProfile(dict):
    """
    HardwareProfile - Specifies the hardware settings for the virtual machine instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicMemoryConfig":
            suggest = "dynamic_memory_config"
        elif key == "memoryMB":
            suggest = "memory_mb"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseHardwareProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseHardwareProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseHardwareProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_memory_config: Optional['outputs.VirtualMachineInstancePropertiesResponseDynamicMemoryConfig'] = None,
                 memory_mb: Optional[float] = None,
                 processors: Optional[int] = None,
                 vm_size: Optional[str] = None):
        """
        HardwareProfile - Specifies the hardware settings for the virtual machine instance.
        :param float memory_mb: RAM in MB for the virtual machine instance
        :param int processors: number of processors for the virtual machine instance
        """
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if vm_size is None:
            vm_size = 'Default'
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional['outputs.VirtualMachineInstancePropertiesResponseDynamicMemoryConfig']:
        return pulumi.get(self, "dynamic_memory_config")

    @property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[float]:
        """
        RAM in MB for the virtual machine instance
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter
    def processors(self) -> Optional[int]:
        """
        number of processors for the virtual machine instance
        """
        return pulumi.get(self, "processors")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[str]:
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseImageReference(dict):
    """
    Which Image to use for the virtual machine instance
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Which Image to use for the virtual machine instance
        :param str id: Resource ID of the image
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID of the image
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseLinuxConfiguration(dict):
    """
    LinuxConfiguration - linux specific configuration values for the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePasswordAuthentication":
            suggest = "disable_password_authentication"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"
        elif key == "provisionVMConfigAgent":
            suggest = "provision_vm_config_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseLinuxConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseLinuxConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseLinuxConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_password_authentication: Optional[bool] = None,
                 provision_vm_agent: Optional[bool] = None,
                 provision_vm_config_agent: Optional[bool] = None,
                 ssh: Optional['outputs.SshConfigurationResponse'] = None):
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine instance
        :param bool disable_password_authentication: DisablePasswordAuthentication - whether password authentication should be disabled
        :param bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        :param bool provision_vm_config_agent: Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        :param 'SshConfigurationResponse' ssh: Specifies the ssh key configuration for a Linux OS.
        """
        if disable_password_authentication is not None:
            pulumi.set(__self__, "disable_password_authentication", disable_password_authentication)
        if provision_vm_agent is None:
            provision_vm_agent = True
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if provision_vm_config_agent is None:
            provision_vm_config_agent = True
        if provision_vm_config_agent is not None:
            pulumi.set(__self__, "provision_vm_config_agent", provision_vm_config_agent)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter(name="disablePasswordAuthentication")
    def disable_password_authentication(self) -> Optional[bool]:
        """
        DisablePasswordAuthentication - whether password authentication should be disabled
        """
        return pulumi.get(self, "disable_password_authentication")

    @property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @property
    @pulumi.getter(name="provisionVMConfigAgent")
    def provision_vm_config_agent(self) -> Optional[bool]:
        """
        Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_config_agent")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.SshConfigurationResponse']:
        """
        Specifies the ssh key configuration for a Linux OS.
        """
        return pulumi.get(self, "ssh")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseNetworkInterfaces(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: ID - Resource Id of the network interface
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID - Resource Id of the network interface
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseNetworkProfile(dict):
    """
    NetworkProfile - describes the network configuration the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaces":
            suggest = "network_interfaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseNetworkProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseNetworkProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseNetworkProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interfaces: Optional[Sequence['outputs.VirtualMachineInstancePropertiesResponseNetworkInterfaces']] = None):
        """
        NetworkProfile - describes the network configuration the virtual machine instance
        :param Sequence['VirtualMachineInstancePropertiesResponseNetworkInterfaces'] network_interfaces: NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
        """
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.VirtualMachineInstancePropertiesResponseNetworkInterfaces']]:
        """
        NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
        """
        return pulumi.get(self, "network_interfaces")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseOsDisk(dict):
    """
    VHD to attach as OS disk
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseOsDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseOsDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseOsDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 os_type: Optional[str] = None):
        """
        VHD to attach as OS disk
        :param str id: Resource ID of the OS disk
        :param str os_type: This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID of the OS disk
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseOsProfile(dict):
    """
    OsProfile - describes the configuration of the operating system and sets login data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUsername":
            suggest = "admin_username"
        elif key == "computerName":
            suggest = "computer_name"
        elif key == "linuxConfiguration":
            suggest = "linux_configuration"
        elif key == "windowsConfiguration":
            suggest = "windows_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseOsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseOsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseOsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_username: Optional[str] = None,
                 computer_name: Optional[str] = None,
                 linux_configuration: Optional['outputs.VirtualMachineInstancePropertiesResponseLinuxConfiguration'] = None,
                 windows_configuration: Optional['outputs.VirtualMachineInstancePropertiesResponseWindowsConfiguration'] = None):
        """
        OsProfile - describes the configuration of the operating system and sets login data
        :param str admin_username: AdminUsername - admin username
        :param str computer_name: ComputerName - name of the compute
        :param 'VirtualMachineInstancePropertiesResponseLinuxConfiguration' linux_configuration: LinuxConfiguration - linux specific configuration values for the virtual machine instance
        :param 'VirtualMachineInstancePropertiesResponseWindowsConfiguration' windows_configuration: Windows Configuration for the virtual machine instance 
        """
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)
        if linux_configuration is not None:
            pulumi.set(__self__, "linux_configuration", linux_configuration)
        if windows_configuration is not None:
            pulumi.set(__self__, "windows_configuration", windows_configuration)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        """
        AdminUsername - admin username
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[str]:
        """
        ComputerName - name of the compute
        """
        return pulumi.get(self, "computer_name")

    @property
    @pulumi.getter(name="linuxConfiguration")
    def linux_configuration(self) -> Optional['outputs.VirtualMachineInstancePropertiesResponseLinuxConfiguration']:
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine instance
        """
        return pulumi.get(self, "linux_configuration")

    @property
    @pulumi.getter(name="windowsConfiguration")
    def windows_configuration(self) -> Optional['outputs.VirtualMachineInstancePropertiesResponseWindowsConfiguration']:
        """
        Windows Configuration for the virtual machine instance 
        """
        return pulumi.get(self, "windows_configuration")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseSecurityProfile(dict):
    """
    SecurityProfile - Specifies the security settings for the virtual machine instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTPM":
            suggest = "enable_tpm"
        elif key == "securityType":
            suggest = "security_type"
        elif key == "uefiSettings":
            suggest = "uefi_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseSecurityProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseSecurityProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseSecurityProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tpm: Optional[bool] = None,
                 security_type: Optional[str] = None,
                 uefi_settings: Optional['outputs.VirtualMachineInstancePropertiesResponseUefiSettings'] = None):
        """
        SecurityProfile - Specifies the security settings for the virtual machine instance.
        :param str security_type: Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
        """
        if enable_tpm is None:
            enable_tpm = False
        if enable_tpm is not None:
            pulumi.set(__self__, "enable_tpm", enable_tpm)
        if security_type is not None:
            pulumi.set(__self__, "security_type", security_type)
        if uefi_settings is not None:
            pulumi.set(__self__, "uefi_settings", uefi_settings)

    @property
    @pulumi.getter(name="enableTPM")
    def enable_tpm(self) -> Optional[bool]:
        return pulumi.get(self, "enable_tpm")

    @property
    @pulumi.getter(name="securityType")
    def security_type(self) -> Optional[str]:
        """
        Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
        """
        return pulumi.get(self, "security_type")

    @property
    @pulumi.getter(name="uefiSettings")
    def uefi_settings(self) -> Optional['outputs.VirtualMachineInstancePropertiesResponseUefiSettings']:
        return pulumi.get(self, "uefi_settings")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseStorageProfile(dict):
    """
    StorageProfile - contains information about the disks and storage information for the virtual machine instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "imageReference":
            suggest = "image_reference"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "vmConfigStoragePathId":
            suggest = "vm_config_storage_path_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseStorageProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseStorageProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseStorageProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.VirtualMachineInstancePropertiesResponseDataDisks']] = None,
                 image_reference: Optional['outputs.VirtualMachineInstancePropertiesResponseImageReference'] = None,
                 os_disk: Optional['outputs.VirtualMachineInstancePropertiesResponseOsDisk'] = None,
                 vm_config_storage_path_id: Optional[str] = None):
        """
        StorageProfile - contains information about the disks and storage information for the virtual machine instance
        :param Sequence['VirtualMachineInstancePropertiesResponseDataDisks'] data_disks: adds data disks to the virtual machine instance
        :param 'VirtualMachineInstancePropertiesResponseImageReference' image_reference: Which Image to use for the virtual machine instance
        :param 'VirtualMachineInstancePropertiesResponseOsDisk' os_disk: VHD to attach as OS disk
        :param str vm_config_storage_path_id: Id of the storage container that hosts the VM configuration file
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if vm_config_storage_path_id is not None:
            pulumi.set(__self__, "vm_config_storage_path_id", vm_config_storage_path_id)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.VirtualMachineInstancePropertiesResponseDataDisks']]:
        """
        adds data disks to the virtual machine instance
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional['outputs.VirtualMachineInstancePropertiesResponseImageReference']:
        """
        Which Image to use for the virtual machine instance
        """
        return pulumi.get(self, "image_reference")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional['outputs.VirtualMachineInstancePropertiesResponseOsDisk']:
        """
        VHD to attach as OS disk
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="vmConfigStoragePathId")
    def vm_config_storage_path_id(self) -> Optional[str]:
        """
        Id of the storage container that hosts the VM configuration file
        """
        return pulumi.get(self, "vm_config_storage_path_id")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseUefiSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureBootEnabled":
            suggest = "secure_boot_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseUefiSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseUefiSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseUefiSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secure_boot_enabled: Optional[bool] = None):
        """
        :param bool secure_boot_enabled: Specifies whether secure boot should be enabled on the virtual machine instance.
        """
        if secure_boot_enabled is None:
            secure_boot_enabled = False
        if secure_boot_enabled is not None:
            pulumi.set(__self__, "secure_boot_enabled", secure_boot_enabled)

    @property
    @pulumi.getter(name="secureBootEnabled")
    def secure_boot_enabled(self) -> Optional[bool]:
        """
        Specifies whether secure boot should be enabled on the virtual machine instance.
        """
        return pulumi.get(self, "secure_boot_enabled")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseWindowsConfiguration(dict):
    """
    Windows Configuration for the virtual machine instance 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutomaticUpdates":
            suggest = "enable_automatic_updates"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"
        elif key == "provisionVMConfigAgent":
            suggest = "provision_vm_config_agent"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstancePropertiesResponseWindowsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstancePropertiesResponseWindowsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstancePropertiesResponseWindowsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_automatic_updates: Optional[bool] = None,
                 provision_vm_agent: Optional[bool] = None,
                 provision_vm_config_agent: Optional[bool] = None,
                 ssh: Optional['outputs.SshConfigurationResponse'] = None,
                 time_zone: Optional[str] = None):
        """
        Windows Configuration for the virtual machine instance 
        :param bool enable_automatic_updates: Whether to EnableAutomaticUpdates on the machine
        :param bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        :param bool provision_vm_config_agent: Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        :param 'SshConfigurationResponse' ssh: Specifies the ssh key configuration for Windows OS.
        :param str time_zone: TimeZone for the virtual machine instance
        """
        if enable_automatic_updates is not None:
            pulumi.set(__self__, "enable_automatic_updates", enable_automatic_updates)
        if provision_vm_agent is None:
            provision_vm_agent = True
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if provision_vm_config_agent is None:
            provision_vm_config_agent = True
        if provision_vm_config_agent is not None:
            pulumi.set(__self__, "provision_vm_config_agent", provision_vm_config_agent)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="enableAutomaticUpdates")
    def enable_automatic_updates(self) -> Optional[bool]:
        """
        Whether to EnableAutomaticUpdates on the machine
        """
        return pulumi.get(self, "enable_automatic_updates")

    @property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @property
    @pulumi.getter(name="provisionVMConfigAgent")
    def provision_vm_config_agent(self) -> Optional[bool]:
        """
        Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_config_agent")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.SshConfigurationResponse']:
        """
        Specifies the ssh key configuration for Windows OS.
        """
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        TimeZone for the virtual machine instance
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class VirtualMachineInstanceStatusResponse(dict):
    """
    The observed state of virtual machine instances
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 power_state: Optional[str] = None,
                 provisioning_status: Optional['outputs.VirtualMachineInstanceStatusResponseProvisioningStatus'] = None):
        """
        The observed state of virtual machine instances
        :param str error_code: VirtualMachine provisioning error code
        :param str error_message: Descriptive error message
        :param str power_state: The power state of the virtual machine instance
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        VirtualMachine provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        """
        The power state of the virtual machine instance
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualMachineInstanceStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualMachineInstanceStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the virtual machine instance
        :param str status: The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]
        """
        if operation_id is not None:
            pulumi.set(__self__, "operation_id", operation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the virtual machine instance
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VirtualMachineInstanceViewResponse(dict):
    """
    The instance view of a virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmAgent":
            suggest = "vm_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_agent: Optional['outputs.VirtualMachineConfigAgentInstanceViewResponse'] = None):
        """
        The instance view of a virtual machine.
        :param 'VirtualMachineConfigAgentInstanceViewResponse' vm_agent: The VM Config Agent running on the virtual machine.
        """
        if vm_agent is not None:
            pulumi.set(__self__, "vm_agent", vm_agent)

    @property
    @pulumi.getter(name="vmAgent")
    def vm_agent(self) -> Optional['outputs.VirtualMachineConfigAgentInstanceViewResponse']:
        """
        The VM Config Agent running on the virtual machine.
        """
        return pulumi.get(self, "vm_agent")


@pulumi.output_type
class VirtualSwitchConfigurationOverridesResponse(dict):
    """
    The VirtualSwitchConfigurationOverrides of a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableIov":
            suggest = "enable_iov"
        elif key == "loadBalancingAlgorithm":
            suggest = "load_balancing_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualSwitchConfigurationOverridesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualSwitchConfigurationOverridesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualSwitchConfigurationOverridesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_iov: Optional[str] = None,
                 load_balancing_algorithm: Optional[str] = None):
        """
        The VirtualSwitchConfigurationOverrides of a cluster.
        :param str enable_iov: Enable IoV for Virtual Switch
        :param str load_balancing_algorithm: Load Balancing Algorithm for Virtual Switch
        """
        if enable_iov is not None:
            pulumi.set(__self__, "enable_iov", enable_iov)
        if load_balancing_algorithm is not None:
            pulumi.set(__self__, "load_balancing_algorithm", load_balancing_algorithm)

    @property
    @pulumi.getter(name="enableIov")
    def enable_iov(self) -> Optional[str]:
        """
        Enable IoV for Virtual Switch
        """
        return pulumi.get(self, "enable_iov")

    @property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> Optional[str]:
        """
        Load Balancing Algorithm for Virtual Switch
        """
        return pulumi.get(self, "load_balancing_algorithm")


