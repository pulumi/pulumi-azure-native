# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ArcConnectivityPropertiesResponse',
    'ClusterDesiredPropertiesResponse',
    'ClusterNodeResponse',
    'ClusterReportedPropertiesResponse',
    'DefaultExtensionDetailsResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'ExtendedLocationResponse',
    'ExtensionInstanceViewResponse',
    'ExtensionInstanceViewResponseStatus',
    'GalleryImageIdentifierResponse',
    'GalleryImageStatusResponse',
    'GalleryImageStatusResponseDownloadStatus',
    'GalleryImageStatusResponseProvisioningStatus',
    'GalleryImageVersionResponse',
    'GalleryImageVersionStorageProfileResponse',
    'GalleryOSDiskImageResponse',
    'GuestAgentProfileResponse',
    'GuestCredentialResponse',
    'HttpProxyConfigurationResponse',
    'IPConfigurationResponse',
    'IPConfigurationResponseProperties',
    'IPConfigurationResponseSubnet',
    'IPPoolInfoResponse',
    'IPPoolResponse',
    'IdentityResponse',
    'InterfaceDNSSettingsResponse',
    'MachineExtensionInstanceViewResponseStatus',
    'MachineExtensionPropertiesResponseInstanceView',
    'MarketplaceGalleryImageStatusResponse',
    'MarketplaceGalleryImageStatusResponseDownloadStatus',
    'MarketplaceGalleryImageStatusResponseProvisioningStatus',
    'NetworkInterfaceStatusResponse',
    'NetworkInterfaceStatusResponseProvisioningStatus',
    'PerNodeExtensionStateResponse',
    'PerNodeStateResponse',
    'SoftwareAssurancePropertiesResponse',
    'StepResponse',
    'StorageContainerStatusResponse',
    'StorageContainerStatusResponseProvisioningStatus',
    'SystemDataResponse',
    'UpdatePrerequisiteResponse',
    'UserAssignedIdentityResponse',
    'VirtualHardDiskStatusResponse',
    'VirtualHardDiskStatusResponseProvisioningStatus',
    'VirtualMachinePropertiesResponseDataDisks',
    'VirtualMachinePropertiesResponseDynamicMemoryConfig',
    'VirtualMachinePropertiesResponseHardwareProfile',
    'VirtualMachinePropertiesResponseImageReference',
    'VirtualMachinePropertiesResponseLinuxConfiguration',
    'VirtualMachinePropertiesResponseNetworkInterfaces',
    'VirtualMachinePropertiesResponseNetworkProfile',
    'VirtualMachinePropertiesResponseOsDisk',
    'VirtualMachinePropertiesResponseOsProfile',
    'VirtualMachinePropertiesResponsePublicKeys',
    'VirtualMachinePropertiesResponsePublicKeysPublicKeys',
    'VirtualMachinePropertiesResponseSecurityProfile',
    'VirtualMachinePropertiesResponseSsh',
    'VirtualMachinePropertiesResponseSshSsh',
    'VirtualMachinePropertiesResponseStorageProfile',
    'VirtualMachinePropertiesResponseUefiSettings',
    'VirtualMachinePropertiesResponseWindowsConfiguration',
    'VirtualMachineStatusResponse',
    'VirtualMachineStatusResponseProvisioningStatus',
    'VirtualNetworkPropertiesResponseDhcpOptions',
    'VirtualNetworkPropertiesResponseIpConfigurationReferences',
    'VirtualNetworkPropertiesResponseRouteTable',
    'VirtualNetworkPropertiesResponseRoutes',
    'VirtualNetworkPropertiesResponseSubnets',
    'VirtualNetworkStatusResponse',
    'VirtualNetworkStatusResponseProvisioningStatus',
]

@pulumi.output_type
class ArcConnectivityPropertiesResponse(dict):
    """
    Connectivity related configuration required by arc server.
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        Connectivity related configuration required by arc server.
        :param bool enabled: True indicates ARC connectivity is enabled
        """
        ArcConnectivityPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        True indicates ARC connectivity is enabled
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterDesiredPropertiesResponse(dict):
    """
    Desired properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diagnosticLevel":
            suggest = "diagnostic_level"
        elif key == "windowsServerSubscription":
            suggest = "windows_server_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterDesiredPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterDesiredPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterDesiredPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 diagnostic_level: Optional[str] = None,
                 windows_server_subscription: Optional[str] = None):
        """
        Desired properties of the cluster.
        :param str diagnostic_level: Desired level of diagnostic data emitted by the cluster.
        :param str windows_server_subscription: Desired state of Windows Server Subscription.
        """
        ClusterDesiredPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            diagnostic_level=diagnostic_level,
            windows_server_subscription=windows_server_subscription,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             diagnostic_level: Optional[str] = None,
             windows_server_subscription: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if diagnostic_level is not None:
            _setter("diagnostic_level", diagnostic_level)
        if windows_server_subscription is not None:
            _setter("windows_server_subscription", windows_server_subscription)

    @property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[str]:
        """
        Desired level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")

    @property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> Optional[str]:
        """
        Desired state of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")


@pulumi.output_type
class ClusterNodeResponse(dict):
    """
    Cluster node details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreCount":
            suggest = "core_count"
        elif key == "ehcResourceId":
            suggest = "ehc_resource_id"
        elif key == "memoryInGiB":
            suggest = "memory_in_gi_b"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "osDisplayVersion":
            suggest = "os_display_version"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "windowsServerSubscription":
            suggest = "windows_server_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_count: float,
                 ehc_resource_id: str,
                 id: float,
                 manufacturer: str,
                 memory_in_gi_b: float,
                 model: str,
                 name: str,
                 node_type: str,
                 os_display_version: str,
                 os_name: str,
                 os_version: str,
                 serial_number: str,
                 windows_server_subscription: str):
        """
        Cluster node details.
        :param float core_count: Number of physical cores on the cluster node.
        :param str ehc_resource_id: Edge Hardware Center Resource Id
        :param float id: Id of the node in the cluster.
        :param str manufacturer: Manufacturer of the cluster node hardware.
        :param float memory_in_gi_b: Total available memory on the cluster node (in GiB).
        :param str model: Model name of the cluster node hardware.
        :param str name: Name of the cluster node.
        :param str node_type: Type of the cluster node hardware.
        :param str os_display_version: Display version of the operating system running on the cluster node.
        :param str os_name: Operating system running on the cluster node.
        :param str os_version: Version of the operating system running on the cluster node.
        :param str serial_number: Immutable id of the cluster node.
        :param str windows_server_subscription: State of Windows Server Subscription.
        """
        ClusterNodeResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            core_count=core_count,
            ehc_resource_id=ehc_resource_id,
            id=id,
            manufacturer=manufacturer,
            memory_in_gi_b=memory_in_gi_b,
            model=model,
            name=name,
            node_type=node_type,
            os_display_version=os_display_version,
            os_name=os_name,
            os_version=os_version,
            serial_number=serial_number,
            windows_server_subscription=windows_server_subscription,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             core_count: float,
             ehc_resource_id: str,
             id: float,
             manufacturer: str,
             memory_in_gi_b: float,
             model: str,
             name: str,
             node_type: str,
             os_display_version: str,
             os_name: str,
             os_version: str,
             serial_number: str,
             windows_server_subscription: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("core_count", core_count)
        _setter("ehc_resource_id", ehc_resource_id)
        _setter("id", id)
        _setter("manufacturer", manufacturer)
        _setter("memory_in_gi_b", memory_in_gi_b)
        _setter("model", model)
        _setter("name", name)
        _setter("node_type", node_type)
        _setter("os_display_version", os_display_version)
        _setter("os_name", os_name)
        _setter("os_version", os_version)
        _setter("serial_number", serial_number)
        _setter("windows_server_subscription", windows_server_subscription)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> float:
        """
        Number of physical cores on the cluster node.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="ehcResourceId")
    def ehc_resource_id(self) -> str:
        """
        Edge Hardware Center Resource Id
        """
        return pulumi.get(self, "ehc_resource_id")

    @property
    @pulumi.getter
    def id(self) -> float:
        """
        Id of the node in the cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def manufacturer(self) -> str:
        """
        Manufacturer of the cluster node hardware.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="memoryInGiB")
    def memory_in_gi_b(self) -> float:
        """
        Total available memory on the cluster node (in GiB).
        """
        return pulumi.get(self, "memory_in_gi_b")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model name of the cluster node hardware.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Type of the cluster node hardware.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="osDisplayVersion")
    def os_display_version(self) -> str:
        """
        Display version of the operating system running on the cluster node.
        """
        return pulumi.get(self, "os_display_version")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Operating system running on the cluster node.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        Version of the operating system running on the cluster node.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        Immutable id of the cluster node.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="windowsServerSubscription")
    def windows_server_subscription(self) -> str:
        """
        State of Windows Server Subscription.
        """
        return pulumi.get(self, "windows_server_subscription")


@pulumi.output_type
class ClusterReportedPropertiesResponse(dict):
    """
    Properties reported by cluster agent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterVersion":
            suggest = "cluster_version"
        elif key == "imdsAttestation":
            suggest = "imds_attestation"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "supportedCapabilities":
            suggest = "supported_capabilities"
        elif key == "diagnosticLevel":
            suggest = "diagnostic_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterReportedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterReportedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterReportedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 cluster_version: str,
                 imds_attestation: str,
                 last_updated: str,
                 nodes: Sequence['outputs.ClusterNodeResponse'],
                 supported_capabilities: Sequence[str],
                 diagnostic_level: Optional[str] = None):
        """
        Properties reported by cluster agent.
        :param str cluster_id: Unique id generated by the on-prem cluster.
        :param str cluster_name: Name of the on-prem cluster connected to this resource.
        :param str cluster_version: Version of the cluster software.
        :param str imds_attestation: IMDS attestation status of the cluster.
        :param str last_updated: Last time the cluster reported the data.
        :param Sequence['ClusterNodeResponse'] nodes: List of nodes reported by the cluster.
        :param Sequence[str] supported_capabilities: Capabilities supported by the cluster.
        :param str diagnostic_level: Level of diagnostic data emitted by the cluster.
        """
        ClusterReportedPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            cluster_version=cluster_version,
            imds_attestation=imds_attestation,
            last_updated=last_updated,
            nodes=nodes,
            supported_capabilities=supported_capabilities,
            diagnostic_level=diagnostic_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: str,
             cluster_name: str,
             cluster_version: str,
             imds_attestation: str,
             last_updated: str,
             nodes: Sequence['outputs.ClusterNodeResponse'],
             supported_capabilities: Sequence[str],
             diagnostic_level: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_id", cluster_id)
        _setter("cluster_name", cluster_name)
        _setter("cluster_version", cluster_version)
        _setter("imds_attestation", imds_attestation)
        _setter("last_updated", last_updated)
        _setter("nodes", nodes)
        _setter("supported_capabilities", supported_capabilities)
        if diagnostic_level is not None:
            _setter("diagnostic_level", diagnostic_level)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Unique id generated by the on-prem cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Name of the on-prem cluster connected to this resource.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        Version of the cluster software.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="imdsAttestation")
    def imds_attestation(self) -> str:
        """
        IMDS attestation status of the cluster.
        """
        return pulumi.get(self, "imds_attestation")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        """
        Last time the cluster reported the data.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.ClusterNodeResponse']:
        """
        List of nodes reported by the cluster.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="supportedCapabilities")
    def supported_capabilities(self) -> Sequence[str]:
        """
        Capabilities supported by the cluster.
        """
        return pulumi.get(self, "supported_capabilities")

    @property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> Optional[str]:
        """
        Level of diagnostic data emitted by the cluster.
        """
        return pulumi.get(self, "diagnostic_level")


@pulumi.output_type
class DefaultExtensionDetailsResponse(dict):
    """
    Consent time for a particular default extension category.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consentTime":
            suggest = "consent_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultExtensionDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultExtensionDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultExtensionDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 consent_time: str):
        """
        Consent time for a particular default extension category.
        :param str category: Default extension category
        :param str consent_time: Consent time for extension category
        """
        DefaultExtensionDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            consent_time=consent_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: str,
             consent_time: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category", category)
        _setter("consent_time", consent_time)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Default extension category
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="consentTime")
    def consent_time(self) -> str:
        """
        Consent time for extension category
        """
        return pulumi.get(self, "consent_time")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param str type: The additional info type.
        """
        ErrorAdditionalInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info=info,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info: Any,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("info", info)
        _setter("type", type)

    @property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: str,
                 target: str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param str message: The error message.
        :param str target: The error target.
        """
        ErrorDetailResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_info=additional_info,
            code=code,
            details=details,
            message=message,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
             code: str,
             details: Sequence['outputs.ErrorDetailResponse'],
             message: str,
             target: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("additional_info", additional_info)
        _setter("code", code)
        _setter("details", details)
        _setter("message", message)
        _setter("target", target)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    The complex type of the extended location.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The complex type of the extended location.
        :param str name: The name of the extended location.
        :param str type: The type of the extended location.
        """
        ExtendedLocationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExtensionInstanceViewResponse(dict):
    """
    Describes the Extension Instance View.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 status: Optional['outputs.ExtensionInstanceViewResponseStatus'] = None,
                 type: Optional[str] = None,
                 type_handler_version: Optional[str] = None):
        """
        Describes the Extension Instance View.
        :param str name: The extension name.
        :param 'ExtensionInstanceViewResponseStatus' status: Instance view status.
        :param str type: Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
        :param str type_handler_version: Specifies the version of the script handler.
        """
        ExtensionInstanceViewResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            status=status,
            type=type,
            type_handler_version=type_handler_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             status: Optional['outputs.ExtensionInstanceViewResponseStatus'] = None,
             type: Optional[str] = None,
             type_handler_version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if status is not None:
            _setter("status", status)
        if type is not None:
            _setter("type", type)
        if type_handler_version is not None:
            _setter("type_handler_version", type_handler_version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extension name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.ExtensionInstanceViewResponseStatus']:
        """
        Instance view status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> Optional[str]:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class ExtensionInstanceViewResponseStatus(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionInstanceViewResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_status: Optional[str] = None,
                 level: Optional[str] = None,
                 message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        Instance view status.
        :param str code: The status code.
        :param str display_status: The short localizable label for the status.
        :param str level: The level code.
        :param str message: The detailed status message, including for alerts and error messages.
        :param str time: The time of the status.
        """
        ExtensionInstanceViewResponseStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            display_status=display_status,
            level=level,
            message=message,
            time=time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             display_status: Optional[str] = None,
             level: Optional[str] = None,
             message: Optional[str] = None,
             time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)
        if display_status is not None:
            _setter("display_status", display_status)
        if level is not None:
            _setter("level", level)
        if message is not None:
            _setter("message", message)
        if time is not None:
            _setter("time", time)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[str]:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GalleryImageIdentifierResponse(dict):
    """
    This is the gallery image definition identifier.
    """
    def __init__(__self__, *,
                 offer: str,
                 publisher: str,
                 sku: str):
        """
        This is the gallery image definition identifier.
        :param str offer: The name of the gallery image definition offer.
        :param str publisher: The name of the gallery image definition publisher.
        :param str sku: The name of the gallery image definition SKU.
        """
        GalleryImageIdentifierResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            offer=offer,
            publisher=publisher,
            sku=sku,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             offer: str,
             publisher: str,
             sku: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("offer", offer)
        _setter("publisher", publisher)
        _setter("sku", sku)

    @property
    @pulumi.getter
    def offer(self) -> str:
        """
        The name of the gallery image definition offer.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        """
        The name of the gallery image definition publisher.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        The name of the gallery image definition SKU.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class GalleryImageStatusResponse(dict):
    """
    The observed state of gallery images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.GalleryImageStatusResponseDownloadStatus'] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 progress_percentage: Optional[float] = None,
                 provisioning_status: Optional['outputs.GalleryImageStatusResponseProvisioningStatus'] = None):
        """
        The observed state of gallery images
        :param 'GalleryImageStatusResponseDownloadStatus' download_status: The download status of the gallery image
        :param str error_code: GalleryImage provisioning error code
        :param str error_message: Descriptive error message
        :param float progress_percentage: The progress of the operation in percentage
        """
        GalleryImageStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            download_status=download_status,
            error_code=error_code,
            error_message=error_message,
            progress_percentage=progress_percentage,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             download_status: Optional['outputs.GalleryImageStatusResponseDownloadStatus'] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             progress_percentage: Optional[float] = None,
             provisioning_status: Optional['outputs.GalleryImageStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if download_status is not None:
            _setter("download_status", download_status)
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if progress_percentage is not None:
            _setter("progress_percentage", progress_percentage)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.GalleryImageStatusResponseDownloadStatus']:
        """
        The download status of the gallery image
        """
        return pulumi.get(self, "download_status")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        GalleryImage provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.GalleryImageStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class GalleryImageStatusResponseDownloadStatus(dict):
    """
    The download status of the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadSizeInMB":
            suggest = "download_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponseDownloadStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_size_in_mb: Optional[float] = None):
        """
        The download status of the gallery image
        :param float download_size_in_mb: The downloaded sized of the image in MB
        """
        GalleryImageStatusResponseDownloadStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            download_size_in_mb=download_size_in_mb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             download_size_in_mb: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if download_size_in_mb is not None:
            _setter("download_size_in_mb", download_size_in_mb)

    @property
    @pulumi.getter(name="downloadSizeInMB")
    def download_size_in_mb(self) -> Optional[float]:
        """
        The downloaded sized of the image in MB
        """
        return pulumi.get(self, "download_size_in_mb")


@pulumi.output_type
class GalleryImageStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the gallery image
        :param str status: The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        GalleryImageStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the gallery image
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GalleryImageVersionResponse(dict):
    """
    Specifies information about the gallery image version that you want to create or update.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_profile: 'outputs.GalleryImageVersionStorageProfileResponse',
                 name: Optional[str] = None):
        """
        Specifies information about the gallery image version that you want to create or update.
        :param 'GalleryImageVersionStorageProfileResponse' storage_profile: This is the storage profile of a Gallery Image Version.
        :param str name: This is the version of the gallery image.
        """
        GalleryImageVersionResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            storage_profile=storage_profile,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             storage_profile: 'outputs.GalleryImageVersionStorageProfileResponse',
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("storage_profile", storage_profile)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> 'outputs.GalleryImageVersionStorageProfileResponse':
        """
        This is the storage profile of a Gallery Image Version.
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        This is the version of the gallery image.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GalleryImageVersionStorageProfileResponse(dict):
    """
    This is the storage profile of a Gallery Image Version.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osDiskImage":
            suggest = "os_disk_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryImageVersionStorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryImageVersionStorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryImageVersionStorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_disk_image: Optional['outputs.GalleryOSDiskImageResponse'] = None):
        """
        This is the storage profile of a Gallery Image Version.
        :param 'GalleryOSDiskImageResponse' os_disk_image: This is the OS disk image.
        """
        GalleryImageVersionStorageProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            os_disk_image=os_disk_image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             os_disk_image: Optional['outputs.GalleryOSDiskImageResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if os_disk_image is not None:
            _setter("os_disk_image", os_disk_image)

    @property
    @pulumi.getter(name="osDiskImage")
    def os_disk_image(self) -> Optional['outputs.GalleryOSDiskImageResponse']:
        """
        This is the OS disk image.
        """
        return pulumi.get(self, "os_disk_image")


@pulumi.output_type
class GalleryOSDiskImageResponse(dict):
    """
    This is the OS disk image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeInMB":
            suggest = "size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GalleryOSDiskImageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GalleryOSDiskImageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GalleryOSDiskImageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_in_mb: float):
        """
        This is the OS disk image.
        :param float size_in_mb: This property indicates the size of the VHD to be created.
        """
        GalleryOSDiskImageResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            size_in_mb=size_in_mb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             size_in_mb: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("size_in_mb", size_in_mb)

    @property
    @pulumi.getter(name="sizeInMB")
    def size_in_mb(self) -> float:
        """
        This property indicates the size of the VHD to be created.
        """
        return pulumi.get(self, "size_in_mb")


@pulumi.output_type
class GuestAgentProfileResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "lastStatusChange":
            suggest = "last_status_change"
        elif key == "vmUuid":
            suggest = "vm_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuestAgentProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuestAgentProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuestAgentProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: str,
                 error_details: Sequence['outputs.ErrorDetailResponse'],
                 last_status_change: str,
                 status: str,
                 vm_uuid: str):
        """
        Defines the resource properties.
        :param str agent_version: The hybrid machine agent full version.
        :param Sequence['ErrorDetailResponse'] error_details: Details about the error state.
        :param str last_status_change: The time of the last status change.
        :param str status: The status of the hybrid machine agent.
        :param str vm_uuid: Specifies the VM's unique SMBIOS ID.
        """
        GuestAgentProfileResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            agent_version=agent_version,
            error_details=error_details,
            last_status_change=last_status_change,
            status=status,
            vm_uuid=vm_uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             agent_version: str,
             error_details: Sequence['outputs.ErrorDetailResponse'],
             last_status_change: str,
             status: str,
             vm_uuid: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("agent_version", agent_version)
        _setter("error_details", error_details)
        _setter("last_status_change", last_status_change)
        _setter("status", status)
        _setter("vm_uuid", vm_uuid)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> str:
        """
        The hybrid machine agent full version.
        """
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        Details about the error state.
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter(name="lastStatusChange")
    def last_status_change(self) -> str:
        """
        The time of the last status change.
        """
        return pulumi.get(self, "last_status_change")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the hybrid machine agent.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vmUuid")
    def vm_uuid(self) -> str:
        """
        Specifies the VM's unique SMBIOS ID.
        """
        return pulumi.get(self, "vm_uuid")


@pulumi.output_type
class GuestCredentialResponse(dict):
    """
    Username / Password Credentials to connect to guest.
    """
    def __init__(__self__, *,
                 username: Optional[str] = None):
        """
        Username / Password Credentials to connect to guest.
        :param str username: The username to connect with the guest.
        """
        GuestCredentialResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username to connect with the guest.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class HttpProxyConfigurationResponse(dict):
    """
    HTTP Proxy configuration for the VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpsProxy":
            suggest = "https_proxy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpProxyConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 https_proxy: Optional[str] = None):
        """
        HTTP Proxy configuration for the VM.
        :param str https_proxy: The httpsProxy url.
        """
        HttpProxyConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            https_proxy=https_proxy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             https_proxy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if https_proxy is not None:
            _setter("https_proxy", https_proxy)

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[str]:
        """
        The httpsProxy url.
        """
        return pulumi.get(self, "https_proxy")


@pulumi.output_type
class IPConfigurationResponse(dict):
    """
    InterfaceIPConfiguration iPConfiguration in a network interface.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 properties: Optional['outputs.IPConfigurationResponseProperties'] = None):
        """
        InterfaceIPConfiguration iPConfiguration in a network interface.
        :param str name: Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        :param 'IPConfigurationResponseProperties' properties: InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
        """
        IPConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             properties: Optional['outputs.IPConfigurationResponseProperties'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if properties is not None:
            _setter("properties", properties)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.IPConfigurationResponseProperties']:
        """
        InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class IPConfigurationResponseProperties(dict):
    """
    InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"
        elif key == "privateIPAddress":
            suggest = "private_ip_address"
        elif key == "privateIPAllocationMethod":
            suggest = "private_ip_allocation_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPConfigurationResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPConfigurationResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPConfigurationResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefix_length: Optional[str] = None,
                 private_ip_address: Optional[str] = None,
                 private_ip_allocation_method: Optional[str] = None,
                 subnet: Optional['outputs.IPConfigurationResponseSubnet'] = None):
        """
        InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
        :param str prefix_length: prefixLength for network interface
        :param str private_ip_address: PrivateIPAddress - Private IP address of the IP configuration.
        :param str private_ip_allocation_method: PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
        :param 'IPConfigurationResponseSubnet' subnet: Subnet - Name of Subnet bound to the IP configuration.
        """
        IPConfigurationResponseProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix_length=prefix_length,
            private_ip_address=private_ip_address,
            private_ip_allocation_method=private_ip_allocation_method,
            subnet=subnet,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix_length: Optional[str] = None,
             private_ip_address: Optional[str] = None,
             private_ip_allocation_method: Optional[str] = None,
             subnet: Optional['outputs.IPConfigurationResponseSubnet'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if prefix_length is not None:
            _setter("prefix_length", prefix_length)
        if private_ip_address is not None:
            _setter("private_ip_address", private_ip_address)
        if private_ip_allocation_method is not None:
            _setter("private_ip_allocation_method", private_ip_allocation_method)
        if subnet is not None:
            _setter("subnet", subnet)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[str]:
        """
        prefixLength for network interface
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="privateIPAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        PrivateIPAddress - Private IP address of the IP configuration.
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="privateIPAllocationMethod")
    def private_ip_allocation_method(self) -> Optional[str]:
        """
        PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
        """
        return pulumi.get(self, "private_ip_allocation_method")

    @property
    @pulumi.getter
    def subnet(self) -> Optional['outputs.IPConfigurationResponseSubnet']:
        """
        Subnet - Name of Subnet bound to the IP configuration.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class IPConfigurationResponseSubnet(dict):
    """
    Subnet - Name of Subnet bound to the IP configuration.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Subnet - Name of Subnet bound to the IP configuration.
        :param str id: ID - The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
        """
        IPConfigurationResponseSubnet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID - The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class IPPoolInfoResponse(dict):
    def __init__(__self__, *,
                 available: str,
                 used: str):
        """
        :param str available: no. of ip addresses available in the ip pool
        :param str used: no. of ip addresses allocated from the ip pool
        """
        IPPoolInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available=available,
            used=used,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available: str,
             used: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("available", available)
        _setter("used", used)

    @property
    @pulumi.getter
    def available(self) -> str:
        """
        no. of ip addresses available in the ip pool
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def used(self) -> str:
        """
        no. of ip addresses allocated from the ip pool
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class IPPoolResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipPoolType":
            suggest = "ip_pool_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPPoolResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPPoolResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPPoolResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end: Optional[str] = None,
                 info: Optional['outputs.IPPoolInfoResponse'] = None,
                 ip_pool_type: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param str end: end of the ip address pool
        :param str ip_pool_type: ip pool type
        :param str start: start of the ip address pool
        """
        IPPoolResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            info=info,
            ip_pool_type=ip_pool_type,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: Optional[str] = None,
             info: Optional['outputs.IPPoolInfoResponse'] = None,
             ip_pool_type: Optional[str] = None,
             start: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end is not None:
            _setter("end", end)
        if info is not None:
            _setter("info", info)
        if ip_pool_type is not None:
            _setter("ip_pool_type", ip_pool_type)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        end of the ip address pool
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def info(self) -> Optional['outputs.IPPoolInfoResponse']:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="ipPoolType")
    def ip_pool_type(self) -> Optional[str]:
        """
        ip pool type
        """
        return pulumi.get(self, "ip_pool_type")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        start of the ip address pool
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        Identity for the resource.
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        """
        IdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: str,
             tenant_id: str,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InterfaceDNSSettingsResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceDNSSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceDNSSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceDNSSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] dns_servers: List of DNS server IP Addresses for the interface
        """
        InterfaceDNSSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_servers=dns_servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_servers: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dns_servers is not None:
            _setter("dns_servers", dns_servers)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        List of DNS server IP Addresses for the interface
        """
        return pulumi.get(self, "dns_servers")


@pulumi.output_type
class MachineExtensionInstanceViewResponseStatus(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineExtensionInstanceViewResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: str,
                 display_status: str,
                 level: str,
                 message: str,
                 time: str):
        """
        Instance view status.
        :param str code: The status code.
        :param str display_status: The short localizable label for the status.
        :param str level: The level code.
        :param str message: The detailed status message, including for alerts and error messages.
        :param str time: The time of the status.
        """
        MachineExtensionInstanceViewResponseStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            display_status=display_status,
            level=level,
            message=message,
            time=time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: str,
             display_status: str,
             level: str,
             message: str,
             time: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("code", code)
        _setter("display_status", display_status)
        _setter("level", level)
        _setter("message", message)
        _setter("time", time)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> str:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MachineExtensionPropertiesResponseInstanceView(dict):
    """
    The machine extension instance view.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineExtensionPropertiesResponseInstanceView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineExtensionPropertiesResponseInstanceView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineExtensionPropertiesResponseInstanceView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 type_handler_version: str,
                 status: Optional['outputs.MachineExtensionInstanceViewResponseStatus'] = None):
        """
        The machine extension instance view.
        :param str name: The machine extension name.
        :param str type: Specifies the type of the extension; an example is "CustomScriptExtension".
        :param str type_handler_version: Specifies the version of the script handler.
        :param 'MachineExtensionInstanceViewResponseStatus' status: Instance view status.
        """
        MachineExtensionPropertiesResponseInstanceView._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            type_handler_version=type_handler_version,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             type: str,
             type_handler_version: str,
             status: Optional['outputs.MachineExtensionInstanceViewResponseStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)
        _setter("type_handler_version", type_handler_version)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The machine extension name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of the extension; an example is "CustomScriptExtension".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> str:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.MachineExtensionInstanceViewResponseStatus']:
        """
        Instance view status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponse(dict):
    """
    The observed state of marketplace gallery images
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadStatus":
            suggest = "download_status"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "progressPercentage":
            suggest = "progress_percentage"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_status: Optional['outputs.MarketplaceGalleryImageStatusResponseDownloadStatus'] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 progress_percentage: Optional[float] = None,
                 provisioning_status: Optional['outputs.MarketplaceGalleryImageStatusResponseProvisioningStatus'] = None):
        """
        The observed state of marketplace gallery images
        :param 'MarketplaceGalleryImageStatusResponseDownloadStatus' download_status: The download status of the gallery image
        :param str error_code: MarketplaceGalleryImage provisioning error code
        :param str error_message: Descriptive error message
        :param float progress_percentage: The progress of the operation in percentage
        """
        MarketplaceGalleryImageStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            download_status=download_status,
            error_code=error_code,
            error_message=error_message,
            progress_percentage=progress_percentage,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             download_status: Optional['outputs.MarketplaceGalleryImageStatusResponseDownloadStatus'] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             progress_percentage: Optional[float] = None,
             provisioning_status: Optional['outputs.MarketplaceGalleryImageStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if download_status is not None:
            _setter("download_status", download_status)
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if progress_percentage is not None:
            _setter("progress_percentage", progress_percentage)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> Optional['outputs.MarketplaceGalleryImageStatusResponseDownloadStatus']:
        """
        The download status of the gallery image
        """
        return pulumi.get(self, "download_status")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        MarketplaceGalleryImage provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="progressPercentage")
    def progress_percentage(self) -> Optional[float]:
        """
        The progress of the operation in percentage
        """
        return pulumi.get(self, "progress_percentage")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.MarketplaceGalleryImageStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponseDownloadStatus(dict):
    """
    The download status of the gallery image
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadSizeInMB":
            suggest = "download_size_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponseDownloadStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponseDownloadStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_size_in_mb: Optional[float] = None):
        """
        The download status of the gallery image
        :param float download_size_in_mb: The downloaded sized of the image in MB
        """
        MarketplaceGalleryImageStatusResponseDownloadStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            download_size_in_mb=download_size_in_mb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             download_size_in_mb: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if download_size_in_mb is not None:
            _setter("download_size_in_mb", download_size_in_mb)

    @property
    @pulumi.getter(name="downloadSizeInMB")
    def download_size_in_mb(self) -> Optional[float]:
        """
        The downloaded sized of the image in MB
        """
        return pulumi.get(self, "download_size_in_mb")


@pulumi.output_type
class MarketplaceGalleryImageStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceGalleryImageStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceGalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceGalleryImageStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the gallery image
        :param str status: The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        MarketplaceGalleryImageStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the gallery image
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NetworkInterfaceStatusResponse(dict):
    """
    The observed state of network interfaces
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 provisioning_status: Optional['outputs.NetworkInterfaceStatusResponseProvisioningStatus'] = None):
        """
        The observed state of network interfaces
        :param str error_code: NetworkInterface provisioning error code
        :param str error_message: Descriptive error message
        """
        NetworkInterfaceStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_message=error_message,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             provisioning_status: Optional['outputs.NetworkInterfaceStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        NetworkInterface provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.NetworkInterfaceStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class NetworkInterfaceStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the network interface
        :param str status: The status of the operation performed on the network interface [Succeeded, Failed, InProgress]
        """
        NetworkInterfaceStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the network interface
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the network interface [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PerNodeExtensionStateResponse(dict):
    """
    Status of Arc Extension for a particular node in HCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceView":
            suggest = "instance_view"
        elif key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeExtensionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeExtensionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeExtensionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extension: str,
                 instance_view: 'outputs.ExtensionInstanceViewResponse',
                 name: str,
                 state: str,
                 type_handler_version: str):
        """
        Status of Arc Extension for a particular node in HCI Cluster.
        :param str extension: Fully qualified resource ID for the particular Arc Extension on this node.
        :param 'ExtensionInstanceViewResponse' instance_view: The extension instance view.
        :param str name: Name of the node in HCI Cluster.
        :param str state: State of Arc Extension in this node.
        :param str type_handler_version: Specifies the version of the script handler.
        """
        PerNodeExtensionStateResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extension=extension,
            instance_view=instance_view,
            name=name,
            state=state,
            type_handler_version=type_handler_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extension: str,
             instance_view: 'outputs.ExtensionInstanceViewResponse',
             name: str,
             state: str,
             type_handler_version: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("extension", extension)
        _setter("instance_view", instance_view)
        _setter("name", name)
        _setter("state", state)
        _setter("type_handler_version", type_handler_version)

    @property
    @pulumi.getter
    def extension(self) -> str:
        """
        Fully qualified resource ID for the particular Arc Extension on this node.
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter(name="instanceView")
    def instance_view(self) -> 'outputs.ExtensionInstanceViewResponse':
        """
        The extension instance view.
        """
        return pulumi.get(self, "instance_view")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the node in HCI Cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of Arc Extension in this node.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> str:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")


@pulumi.output_type
class PerNodeStateResponse(dict):
    """
    Status of Arc agent for a particular node in HCI Cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcInstance":
            suggest = "arc_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerNodeStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerNodeStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerNodeStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_instance: str,
                 name: str,
                 state: str):
        """
        Status of Arc agent for a particular node in HCI Cluster.
        :param str arc_instance: Fully qualified resource ID for the Arc agent of this node.
        :param str name: Name of the Node in HCI Cluster
        :param str state: State of Arc agent in this node.
        """
        PerNodeStateResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_instance=arc_instance,
            name=name,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_instance: str,
             name: str,
             state: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arc_instance", arc_instance)
        _setter("name", name)
        _setter("state", state)

    @property
    @pulumi.getter(name="arcInstance")
    def arc_instance(self) -> str:
        """
        Fully qualified resource ID for the Arc agent of this node.
        """
        return pulumi.get(self, "arc_instance")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Node in HCI Cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of Arc agent in this node.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class SoftwareAssurancePropertiesResponse(dict):
    """
    Software Assurance properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdated":
            suggest = "last_updated"
        elif key == "softwareAssuranceIntent":
            suggest = "software_assurance_intent"
        elif key == "softwareAssuranceStatus":
            suggest = "software_assurance_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareAssurancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareAssurancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareAssurancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_updated: str,
                 software_assurance_intent: Optional[str] = None,
                 software_assurance_status: Optional[str] = None):
        """
        Software Assurance properties of the cluster.
        :param str last_updated: TimeStamp denoting the latest SA benefit applicability is validated.
        :param str software_assurance_intent: Customer Intent for Software Assurance Benefit.
        :param str software_assurance_status: Status of the Software Assurance for the cluster.
        """
        SoftwareAssurancePropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            last_updated=last_updated,
            software_assurance_intent=software_assurance_intent,
            software_assurance_status=software_assurance_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             last_updated: str,
             software_assurance_intent: Optional[str] = None,
             software_assurance_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("last_updated", last_updated)
        if software_assurance_intent is not None:
            _setter("software_assurance_intent", software_assurance_intent)
        if software_assurance_status is not None:
            _setter("software_assurance_status", software_assurance_status)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        """
        TimeStamp denoting the latest SA benefit applicability is validated.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="softwareAssuranceIntent")
    def software_assurance_intent(self) -> Optional[str]:
        """
        Customer Intent for Software Assurance Benefit.
        """
        return pulumi.get(self, "software_assurance_intent")

    @property
    @pulumi.getter(name="softwareAssuranceStatus")
    def software_assurance_status(self) -> Optional[str]:
        """
        Status of the Software Assurance for the cluster.
        """
        return pulumi.get(self, "software_assurance_status")


@pulumi.output_type
class StepResponse(dict):
    """
    Progress representation of the update run steps.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeUtc":
            suggest = "end_time_utc"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "expectedExecutionTime":
            suggest = "expected_execution_time"
        elif key == "lastUpdatedTimeUtc":
            suggest = "last_updated_time_utc"
        elif key == "startTimeUtc":
            suggest = "start_time_utc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 end_time_utc: Optional[str] = None,
                 error_message: Optional[str] = None,
                 expected_execution_time: Optional[str] = None,
                 last_updated_time_utc: Optional[str] = None,
                 name: Optional[str] = None,
                 start_time_utc: Optional[str] = None,
                 status: Optional[str] = None,
                 steps: Optional[Sequence['outputs.StepResponse']] = None):
        """
        Progress representation of the update run steps.
        :param str description: More detailed description of the step.
        :param str end_time_utc: When the step reached a terminal state.
        :param str error_message: Error message, specified if the step is in a failed state.
        :param str expected_execution_time: Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
        :param str last_updated_time_utc: Completion time of this step or the last completed sub-step.
        :param str name: Name of the step.
        :param str start_time_utc: When the step started, or empty if it has not started executing.
        :param str status: Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        :param Sequence['StepResponse'] steps: Recursive model for child steps of this step.
        """
        StepResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            end_time_utc=end_time_utc,
            error_message=error_message,
            expected_execution_time=expected_execution_time,
            last_updated_time_utc=last_updated_time_utc,
            name=name,
            start_time_utc=start_time_utc,
            status=status,
            steps=steps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             end_time_utc: Optional[str] = None,
             error_message: Optional[str] = None,
             expected_execution_time: Optional[str] = None,
             last_updated_time_utc: Optional[str] = None,
             name: Optional[str] = None,
             start_time_utc: Optional[str] = None,
             status: Optional[str] = None,
             steps: Optional[Sequence['outputs.StepResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if end_time_utc is not None:
            _setter("end_time_utc", end_time_utc)
        if error_message is not None:
            _setter("error_message", error_message)
        if expected_execution_time is not None:
            _setter("expected_execution_time", expected_execution_time)
        if last_updated_time_utc is not None:
            _setter("last_updated_time_utc", last_updated_time_utc)
        if name is not None:
            _setter("name", name)
        if start_time_utc is not None:
            _setter("start_time_utc", start_time_utc)
        if status is not None:
            _setter("status", status)
        if steps is not None:
            _setter("steps", steps)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        More detailed description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endTimeUtc")
    def end_time_utc(self) -> Optional[str]:
        """
        When the step reached a terminal state.
        """
        return pulumi.get(self, "end_time_utc")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error message, specified if the step is in a failed state.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="expectedExecutionTime")
    def expected_execution_time(self) -> Optional[str]:
        """
        Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
        """
        return pulumi.get(self, "expected_execution_time")

    @property
    @pulumi.getter(name="lastUpdatedTimeUtc")
    def last_updated_time_utc(self) -> Optional[str]:
        """
        Completion time of this step or the last completed sub-step.
        """
        return pulumi.get(self, "last_updated_time_utc")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTimeUtc")
    def start_time_utc(self) -> Optional[str]:
        """
        When the step started, or empty if it has not started executing.
        """
        return pulumi.get(self, "start_time_utc")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.StepResponse']]:
        """
        Recursive model for child steps of this step.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class StorageContainerStatusResponse(dict):
    """
    The observed state of storage containers
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableSizeMB":
            suggest = "available_size_mb"
        elif key == "containerSizeMB":
            suggest = "container_size_mb"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageContainerStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageContainerStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageContainerStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 available_size_mb: Optional[float] = None,
                 container_size_mb: Optional[float] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 provisioning_status: Optional['outputs.StorageContainerStatusResponseProvisioningStatus'] = None):
        """
        The observed state of storage containers
        :param float available_size_mb: Amount of space available on the disk in MB
        :param float container_size_mb: Total size of the disk in MB
        :param str error_code: StorageContainer provisioning error code
        :param str error_message: Descriptive error message
        """
        StorageContainerStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available_size_mb=available_size_mb,
            container_size_mb=container_size_mb,
            error_code=error_code,
            error_message=error_message,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available_size_mb: Optional[float] = None,
             container_size_mb: Optional[float] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             provisioning_status: Optional['outputs.StorageContainerStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if available_size_mb is not None:
            _setter("available_size_mb", available_size_mb)
        if container_size_mb is not None:
            _setter("container_size_mb", container_size_mb)
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="availableSizeMB")
    def available_size_mb(self) -> Optional[float]:
        """
        Amount of space available on the disk in MB
        """
        return pulumi.get(self, "available_size_mb")

    @property
    @pulumi.getter(name="containerSizeMB")
    def container_size_mb(self) -> Optional[float]:
        """
        Total size of the disk in MB
        """
        return pulumi.get(self, "container_size_mb")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        StorageContainer provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.StorageContainerStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class StorageContainerStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageContainerStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageContainerStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageContainerStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the storage container
        :param str status: The status of the operation performed on the storage container [Succeeded, Failed, InProgress]
        """
        StorageContainerStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the storage container
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the storage container [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        SystemDataResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            created_by=created_by,
            created_by_type=created_by_type,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            last_modified_by_type=last_modified_by_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             created_by: Optional[str] = None,
             created_by_type: Optional[str] = None,
             last_modified_at: Optional[str] = None,
             last_modified_by: Optional[str] = None,
             last_modified_by_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_type is not None:
            _setter("created_by_type", created_by_type)
        if last_modified_at is not None:
            _setter("last_modified_at", last_modified_at)
        if last_modified_by is not None:
            _setter("last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            _setter("last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UpdatePrerequisiteResponse(dict):
    """
    If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageName":
            suggest = "package_name"
        elif key == "updateType":
            suggest = "update_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpdatePrerequisiteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpdatePrerequisiteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpdatePrerequisiteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_name: Optional[str] = None,
                 update_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
        :param str package_name: Friendly name of the prerequisite.
        :param str update_type: Updatable component type.
        :param str version: Version of the prerequisite.
        """
        UpdatePrerequisiteResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package_name=package_name,
            update_type=update_type,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package_name: Optional[str] = None,
             update_type: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if package_name is not None:
            _setter("package_name", package_name)
        if update_type is not None:
            _setter("update_type", update_type)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        """
        Friendly name of the prerequisite.
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[str]:
        """
        Updatable component type.
        """
        return pulumi.get(self, "update_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the prerequisite.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        UserAssignedIdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            principal_id=principal_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: str,
             principal_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_id", client_id)
        _setter("principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VirtualHardDiskStatusResponse(dict):
    """
    The observed state of virtual hard disks
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualHardDiskStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualHardDiskStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualHardDiskStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 provisioning_status: Optional['outputs.VirtualHardDiskStatusResponseProvisioningStatus'] = None):
        """
        The observed state of virtual hard disks
        :param str error_code: VirtualHardDisk provisioning error code
        :param str error_message: Descriptive error message
        """
        VirtualHardDiskStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_message=error_message,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             provisioning_status: Optional['outputs.VirtualHardDiskStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        VirtualHardDisk provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualHardDiskStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualHardDiskStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualHardDiskStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualHardDiskStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualHardDiskStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the virtual hard disk
        :param str status: The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]
        """
        VirtualHardDiskStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the virtual hard disk
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VirtualMachinePropertiesResponseDataDisks(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Resource ID of the data disk
        """
        VirtualMachinePropertiesResponseDataDisks._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID of the data disk
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseDynamicMemoryConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumMemoryMB":
            suggest = "maximum_memory_mb"
        elif key == "minimumMemoryMB":
            suggest = "minimum_memory_mb"
        elif key == "targetMemoryBuffer":
            suggest = "target_memory_buffer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseDynamicMemoryConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseDynamicMemoryConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseDynamicMemoryConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_memory_mb: Optional[float] = None,
                 minimum_memory_mb: Optional[float] = None,
                 target_memory_buffer: Optional[int] = None):
        """
        :param int target_memory_buffer: Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        VirtualMachinePropertiesResponseDynamicMemoryConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum_memory_mb=maximum_memory_mb,
            minimum_memory_mb=minimum_memory_mb,
            target_memory_buffer=target_memory_buffer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum_memory_mb: Optional[float] = None,
             minimum_memory_mb: Optional[float] = None,
             target_memory_buffer: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if maximum_memory_mb is not None:
            _setter("maximum_memory_mb", maximum_memory_mb)
        if minimum_memory_mb is not None:
            _setter("minimum_memory_mb", minimum_memory_mb)
        if target_memory_buffer is not None:
            _setter("target_memory_buffer", target_memory_buffer)

    @property
    @pulumi.getter(name="maximumMemoryMB")
    def maximum_memory_mb(self) -> Optional[float]:
        return pulumi.get(self, "maximum_memory_mb")

    @property
    @pulumi.getter(name="minimumMemoryMB")
    def minimum_memory_mb(self) -> Optional[float]:
        return pulumi.get(self, "minimum_memory_mb")

    @property
    @pulumi.getter(name="targetMemoryBuffer")
    def target_memory_buffer(self) -> Optional[int]:
        """
        Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
        """
        return pulumi.get(self, "target_memory_buffer")


@pulumi.output_type
class VirtualMachinePropertiesResponseHardwareProfile(dict):
    """
    HardwareProfile - Specifies the hardware settings for the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicMemoryConfig":
            suggest = "dynamic_memory_config"
        elif key == "memoryMB":
            suggest = "memory_mb"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseHardwareProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseHardwareProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseHardwareProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_memory_config: Optional['outputs.VirtualMachinePropertiesResponseDynamicMemoryConfig'] = None,
                 memory_mb: Optional[float] = None,
                 processors: Optional[int] = None,
                 vm_size: Optional[str] = None):
        """
        HardwareProfile - Specifies the hardware settings for the virtual machine.
        :param float memory_mb: RAM in MB for the virtual machine
        :param int processors: number of processors for the virtual machine
        """
        VirtualMachinePropertiesResponseHardwareProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_memory_config=dynamic_memory_config,
            memory_mb=memory_mb,
            processors=processors,
            vm_size=vm_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_memory_config: Optional['outputs.VirtualMachinePropertiesResponseDynamicMemoryConfig'] = None,
             memory_mb: Optional[float] = None,
             processors: Optional[int] = None,
             vm_size: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_memory_config is not None:
            _setter("dynamic_memory_config", dynamic_memory_config)
        if memory_mb is not None:
            _setter("memory_mb", memory_mb)
        if processors is not None:
            _setter("processors", processors)
        if vm_size is None:
            vm_size = 'Default'
        if vm_size is not None:
            _setter("vm_size", vm_size)

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional['outputs.VirtualMachinePropertiesResponseDynamicMemoryConfig']:
        return pulumi.get(self, "dynamic_memory_config")

    @property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[float]:
        """
        RAM in MB for the virtual machine
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter
    def processors(self) -> Optional[int]:
        """
        number of processors for the virtual machine
        """
        return pulumi.get(self, "processors")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[str]:
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class VirtualMachinePropertiesResponseImageReference(dict):
    """
    Which Image to use for the virtual machine
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Which Image to use for the virtual machine
        :param str id: Resource ID of the image
        """
        VirtualMachinePropertiesResponseImageReference._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID of the image
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseLinuxConfiguration(dict):
    """
    LinuxConfiguration - linux specific configuration values for the virtual machine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePasswordAuthentication":
            suggest = "disable_password_authentication"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseLinuxConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseLinuxConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseLinuxConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_password_authentication: Optional[bool] = None,
                 provision_vm_agent: Optional[bool] = None,
                 ssh: Optional['outputs.VirtualMachinePropertiesResponseSsh'] = None):
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine
        :param bool disable_password_authentication: DisablePasswordAuthentication - whether password authentication should be disabled
        :param bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        :param 'VirtualMachinePropertiesResponseSsh' ssh: SSH - contains settings related to ssh configuration
        """
        VirtualMachinePropertiesResponseLinuxConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disable_password_authentication=disable_password_authentication,
            provision_vm_agent=provision_vm_agent,
            ssh=ssh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disable_password_authentication: Optional[bool] = None,
             provision_vm_agent: Optional[bool] = None,
             ssh: Optional['outputs.VirtualMachinePropertiesResponseSsh'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disable_password_authentication is not None:
            _setter("disable_password_authentication", disable_password_authentication)
        if provision_vm_agent is not None:
            _setter("provision_vm_agent", provision_vm_agent)
        if ssh is not None:
            _setter("ssh", ssh)

    @property
    @pulumi.getter(name="disablePasswordAuthentication")
    def disable_password_authentication(self) -> Optional[bool]:
        """
        DisablePasswordAuthentication - whether password authentication should be disabled
        """
        return pulumi.get(self, "disable_password_authentication")

    @property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.VirtualMachinePropertiesResponseSsh']:
        """
        SSH - contains settings related to ssh configuration
        """
        return pulumi.get(self, "ssh")


@pulumi.output_type
class VirtualMachinePropertiesResponseNetworkInterfaces(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: ID - Resource Id of the network interface
        """
        VirtualMachinePropertiesResponseNetworkInterfaces._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID - Resource Id of the network interface
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseNetworkProfile(dict):
    """
    NetworkProfile - describes the network configuration the virtual machine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaces":
            suggest = "network_interfaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseNetworkProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseNetworkProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseNetworkProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interfaces: Optional[Sequence['outputs.VirtualMachinePropertiesResponseNetworkInterfaces']] = None):
        """
        NetworkProfile - describes the network configuration the virtual machine
        :param Sequence['VirtualMachinePropertiesResponseNetworkInterfaces'] network_interfaces: NetworkInterfaces - list of network interfaces to be attached to the virtual machine
        """
        VirtualMachinePropertiesResponseNetworkProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_interfaces=network_interfaces,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_interfaces: Optional[Sequence['outputs.VirtualMachinePropertiesResponseNetworkInterfaces']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if network_interfaces is not None:
            _setter("network_interfaces", network_interfaces)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponseNetworkInterfaces']]:
        """
        NetworkInterfaces - list of network interfaces to be attached to the virtual machine
        """
        return pulumi.get(self, "network_interfaces")


@pulumi.output_type
class VirtualMachinePropertiesResponseOsDisk(dict):
    """
    VHD to attach as OS disk
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        VHD to attach as OS disk
        :param str id: Resource ID of the OS disk
        """
        VirtualMachinePropertiesResponseOsDisk._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID of the OS disk
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualMachinePropertiesResponseOsProfile(dict):
    """
    OsProfile - describes the configuration of the operating system and sets login data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUsername":
            suggest = "admin_username"
        elif key == "computerName":
            suggest = "computer_name"
        elif key == "linuxConfiguration":
            suggest = "linux_configuration"
        elif key == "osType":
            suggest = "os_type"
        elif key == "windowsConfiguration":
            suggest = "windows_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseOsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseOsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseOsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_username: Optional[str] = None,
                 computer_name: Optional[str] = None,
                 linux_configuration: Optional['outputs.VirtualMachinePropertiesResponseLinuxConfiguration'] = None,
                 os_type: Optional[str] = None,
                 windows_configuration: Optional['outputs.VirtualMachinePropertiesResponseWindowsConfiguration'] = None):
        """
        OsProfile - describes the configuration of the operating system and sets login data
        :param str admin_username: AdminUsername - admin username
        :param str computer_name: ComputerName - name of the compute
        :param 'VirtualMachinePropertiesResponseLinuxConfiguration' linux_configuration: LinuxConfiguration - linux specific configuration values for the virtual machine
        :param str os_type: OsType - string specifying whether the OS is Linux or Windows
        :param 'VirtualMachinePropertiesResponseWindowsConfiguration' windows_configuration: Windows Configuration for the virtual machine 
        """
        VirtualMachinePropertiesResponseOsProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_username=admin_username,
            computer_name=computer_name,
            linux_configuration=linux_configuration,
            os_type=os_type,
            windows_configuration=windows_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_username: Optional[str] = None,
             computer_name: Optional[str] = None,
             linux_configuration: Optional['outputs.VirtualMachinePropertiesResponseLinuxConfiguration'] = None,
             os_type: Optional[str] = None,
             windows_configuration: Optional['outputs.VirtualMachinePropertiesResponseWindowsConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if admin_username is not None:
            _setter("admin_username", admin_username)
        if computer_name is not None:
            _setter("computer_name", computer_name)
        if linux_configuration is not None:
            _setter("linux_configuration", linux_configuration)
        if os_type is not None:
            _setter("os_type", os_type)
        if windows_configuration is not None:
            _setter("windows_configuration", windows_configuration)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        """
        AdminUsername - admin username
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[str]:
        """
        ComputerName - name of the compute
        """
        return pulumi.get(self, "computer_name")

    @property
    @pulumi.getter(name="linuxConfiguration")
    def linux_configuration(self) -> Optional['outputs.VirtualMachinePropertiesResponseLinuxConfiguration']:
        """
        LinuxConfiguration - linux specific configuration values for the virtual machine
        """
        return pulumi.get(self, "linux_configuration")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        OsType - string specifying whether the OS is Linux or Windows
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="windowsConfiguration")
    def windows_configuration(self) -> Optional['outputs.VirtualMachinePropertiesResponseWindowsConfiguration']:
        """
        Windows Configuration for the virtual machine 
        """
        return pulumi.get(self, "windows_configuration")


@pulumi.output_type
class VirtualMachinePropertiesResponsePublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponsePublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponsePublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponsePublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str key_data: KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        :param str path: Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        VirtualMachinePropertiesResponsePublicKeys._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_data=key_data,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_data: Optional[str] = None,
             path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key_data is not None:
            _setter("key_data", key_data)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class VirtualMachinePropertiesResponsePublicKeysPublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponsePublicKeysPublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponsePublicKeysPublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponsePublicKeysPublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str key_data: KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        :param str path: Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        VirtualMachinePropertiesResponsePublicKeysPublicKeys._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_data=key_data,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_data: Optional[str] = None,
             path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key_data is not None:
            _setter("key_data", key_data)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class VirtualMachinePropertiesResponseSecurityProfile(dict):
    """
    SecurityProfile - Specifies the security settings for the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTPM":
            suggest = "enable_tpm"
        elif key == "uefiSettings":
            suggest = "uefi_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseSecurityProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseSecurityProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseSecurityProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tpm: Optional[bool] = None,
                 uefi_settings: Optional['outputs.VirtualMachinePropertiesResponseUefiSettings'] = None):
        """
        SecurityProfile - Specifies the security settings for the virtual machine.
        """
        VirtualMachinePropertiesResponseSecurityProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_tpm=enable_tpm,
            uefi_settings=uefi_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_tpm: Optional[bool] = None,
             uefi_settings: Optional['outputs.VirtualMachinePropertiesResponseUefiSettings'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_tpm is None:
            enable_tpm = False
        if enable_tpm is not None:
            _setter("enable_tpm", enable_tpm)
        if uefi_settings is not None:
            _setter("uefi_settings", uefi_settings)

    @property
    @pulumi.getter(name="enableTPM")
    def enable_tpm(self) -> Optional[bool]:
        return pulumi.get(self, "enable_tpm")

    @property
    @pulumi.getter(name="uefiSettings")
    def uefi_settings(self) -> Optional['outputs.VirtualMachinePropertiesResponseUefiSettings']:
        return pulumi.get(self, "uefi_settings")


@pulumi.output_type
class VirtualMachinePropertiesResponseSsh(dict):
    """
    SSH - contains settings related to ssh configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeys']] = None):
        """
        SSH - contains settings related to ssh configuration
        :param Sequence['VirtualMachinePropertiesResponsePublicKeys'] public_keys: PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        VirtualMachinePropertiesResponseSsh._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_keys=public_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_keys: Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeys']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if public_keys is not None:
            _setter("public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeys']]:
        """
        PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class VirtualMachinePropertiesResponseSshSsh(dict):
    """
    SSH Configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseSshSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseSshSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseSshSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeysPublicKeys']] = None):
        """
        SSH Configuration
        :param Sequence['VirtualMachinePropertiesResponsePublicKeysPublicKeys'] public_keys: PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        VirtualMachinePropertiesResponseSshSsh._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_keys=public_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_keys: Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeysPublicKeys']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if public_keys is not None:
            _setter("public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponsePublicKeysPublicKeys']]:
        """
        PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class VirtualMachinePropertiesResponseStorageProfile(dict):
    """
    StorageProfile - contains information about the disks and storage information for the virtual machine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "imageReference":
            suggest = "image_reference"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "vmConfigStoragePathId":
            suggest = "vm_config_storage_path_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseStorageProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseStorageProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseStorageProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.VirtualMachinePropertiesResponseDataDisks']] = None,
                 image_reference: Optional['outputs.VirtualMachinePropertiesResponseImageReference'] = None,
                 os_disk: Optional['outputs.VirtualMachinePropertiesResponseOsDisk'] = None,
                 vm_config_storage_path_id: Optional[str] = None):
        """
        StorageProfile - contains information about the disks and storage information for the virtual machine
        :param Sequence['VirtualMachinePropertiesResponseDataDisks'] data_disks: adds data disks to the virtual machine
        :param 'VirtualMachinePropertiesResponseImageReference' image_reference: Which Image to use for the virtual machine
        :param 'VirtualMachinePropertiesResponseOsDisk' os_disk: VHD to attach as OS disk
        :param str vm_config_storage_path_id: Id of the storage container that hosts the VM configuration file
        """
        VirtualMachinePropertiesResponseStorageProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_disks=data_disks,
            image_reference=image_reference,
            os_disk=os_disk,
            vm_config_storage_path_id=vm_config_storage_path_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_disks: Optional[Sequence['outputs.VirtualMachinePropertiesResponseDataDisks']] = None,
             image_reference: Optional['outputs.VirtualMachinePropertiesResponseImageReference'] = None,
             os_disk: Optional['outputs.VirtualMachinePropertiesResponseOsDisk'] = None,
             vm_config_storage_path_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_disks is not None:
            _setter("data_disks", data_disks)
        if image_reference is not None:
            _setter("image_reference", image_reference)
        if os_disk is not None:
            _setter("os_disk", os_disk)
        if vm_config_storage_path_id is not None:
            _setter("vm_config_storage_path_id", vm_config_storage_path_id)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.VirtualMachinePropertiesResponseDataDisks']]:
        """
        adds data disks to the virtual machine
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional['outputs.VirtualMachinePropertiesResponseImageReference']:
        """
        Which Image to use for the virtual machine
        """
        return pulumi.get(self, "image_reference")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional['outputs.VirtualMachinePropertiesResponseOsDisk']:
        """
        VHD to attach as OS disk
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="vmConfigStoragePathId")
    def vm_config_storage_path_id(self) -> Optional[str]:
        """
        Id of the storage container that hosts the VM configuration file
        """
        return pulumi.get(self, "vm_config_storage_path_id")


@pulumi.output_type
class VirtualMachinePropertiesResponseUefiSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureBootEnabled":
            suggest = "secure_boot_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseUefiSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseUefiSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseUefiSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secure_boot_enabled: Optional[bool] = None):
        """
        :param bool secure_boot_enabled: Specifies whether secure boot should be enabled on the virtual machine.
        """
        VirtualMachinePropertiesResponseUefiSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secure_boot_enabled=secure_boot_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secure_boot_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if secure_boot_enabled is None:
            secure_boot_enabled = False
        if secure_boot_enabled is not None:
            _setter("secure_boot_enabled", secure_boot_enabled)

    @property
    @pulumi.getter(name="secureBootEnabled")
    def secure_boot_enabled(self) -> Optional[bool]:
        """
        Specifies whether secure boot should be enabled on the virtual machine.
        """
        return pulumi.get(self, "secure_boot_enabled")


@pulumi.output_type
class VirtualMachinePropertiesResponseWindowsConfiguration(dict):
    """
    Windows Configuration for the virtual machine 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutomaticUpdates":
            suggest = "enable_automatic_updates"
        elif key == "provisionVMAgent":
            suggest = "provision_vm_agent"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePropertiesResponseWindowsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePropertiesResponseWindowsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePropertiesResponseWindowsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_automatic_updates: Optional[bool] = None,
                 provision_vm_agent: Optional[bool] = None,
                 ssh: Optional['outputs.VirtualMachinePropertiesResponseSshSsh'] = None,
                 time_zone: Optional[str] = None):
        """
        Windows Configuration for the virtual machine 
        :param bool enable_automatic_updates: Whether to EnableAutomaticUpdates on the machine
        :param bool provision_vm_agent: Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        :param 'VirtualMachinePropertiesResponseSshSsh' ssh: SSH Configuration
        :param str time_zone: TimeZone for the virtual machine
        """
        VirtualMachinePropertiesResponseWindowsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_automatic_updates=enable_automatic_updates,
            provision_vm_agent=provision_vm_agent,
            ssh=ssh,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_automatic_updates: Optional[bool] = None,
             provision_vm_agent: Optional[bool] = None,
             ssh: Optional['outputs.VirtualMachinePropertiesResponseSshSsh'] = None,
             time_zone: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_automatic_updates is not None:
            _setter("enable_automatic_updates", enable_automatic_updates)
        if provision_vm_agent is not None:
            _setter("provision_vm_agent", provision_vm_agent)
        if ssh is not None:
            _setter("ssh", ssh)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter(name="enableAutomaticUpdates")
    def enable_automatic_updates(self) -> Optional[bool]:
        """
        Whether to EnableAutomaticUpdates on the machine
        """
        return pulumi.get(self, "enable_automatic_updates")

    @property
    @pulumi.getter(name="provisionVMAgent")
    def provision_vm_agent(self) -> Optional[bool]:
        """
        Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        """
        return pulumi.get(self, "provision_vm_agent")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.VirtualMachinePropertiesResponseSshSsh']:
        """
        SSH Configuration
        """
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        TimeZone for the virtual machine
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class VirtualMachineStatusResponse(dict):
    """
    The observed state of virtual machines
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 power_state: Optional[str] = None,
                 provisioning_status: Optional['outputs.VirtualMachineStatusResponseProvisioningStatus'] = None):
        """
        The observed state of virtual machines
        :param str error_code: VirtualMachine provisioning error code
        :param str error_message: Descriptive error message
        :param str power_state: The power state of the virtual machine
        """
        VirtualMachineStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_message=error_message,
            power_state=power_state,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             power_state: Optional[str] = None,
             provisioning_status: Optional['outputs.VirtualMachineStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if power_state is not None:
            _setter("power_state", power_state)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        VirtualMachine provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        """
        The power state of the virtual machine
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualMachineStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualMachineStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the virtual machine
        :param str status: The status of the operation performed on the virtual machine [Succeeded, Failed, InProgress]
        """
        VirtualMachineStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the virtual machine
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the virtual machine [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VirtualNetworkPropertiesResponseDhcpOptions(dict):
    """
    DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseDhcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseDhcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseDhcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None):
        """
        DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
        :param Sequence[str] dns_servers: The list of DNS servers IP addresses.
        """
        VirtualNetworkPropertiesResponseDhcpOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_servers=dns_servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_servers: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dns_servers is not None:
            _setter("dns_servers", dns_servers)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        The list of DNS servers IP addresses.
        """
        return pulumi.get(self, "dns_servers")


@pulumi.output_type
class VirtualNetworkPropertiesResponseIpConfigurationReferences(dict):
    """
    IPConfigurationReference - Describes a IPConfiguration under the virtual network
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        IPConfigurationReference - Describes a IPConfiguration under the virtual network
        :param str id: IPConfigurationID
        """
        VirtualNetworkPropertiesResponseIpConfigurationReferences._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        IPConfigurationID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualNetworkPropertiesResponseRouteTable(dict):
    """
    RouteTable for the subnet
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 routes: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseRoutes']] = None,
                 type: Optional[str] = None):
        """
        RouteTable for the subnet
        :param str id: Etag - Gets a unique read-only string that changes whenever the resource is updated.
        :param str name: Name - READ-ONLY; Resource name.
        :param Sequence['VirtualNetworkPropertiesResponseRoutes'] routes: Routes - Collection of routes contained within a route table.
        :param str type: Type - READ-ONLY; Resource type.
        """
        VirtualNetworkPropertiesResponseRouteTable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            routes=routes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             name: Optional[str] = None,
             routes: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseRoutes']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if routes is not None:
            _setter("routes", routes)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Etag - Gets a unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - READ-ONLY; Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.VirtualNetworkPropertiesResponseRoutes']]:
        """
        Routes - Collection of routes contained within a route table.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type - READ-ONLY; Resource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualNetworkPropertiesResponseRoutes(dict):
    """
    Route is associated with a subnet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "nextHopIpAddress":
            suggest = "next_hop_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseRoutes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseRoutes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseRoutes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[str] = None,
                 name: Optional[str] = None,
                 next_hop_ip_address: Optional[str] = None):
        """
        Route is associated with a subnet.
        :param str address_prefix: AddressPrefix - The destination CIDR to which the route applies.
        :param str name: Name - name of the subnet
        :param str next_hop_ip_address: NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        VirtualNetworkPropertiesResponseRoutes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_prefix=address_prefix,
            name=name,
            next_hop_ip_address=next_hop_ip_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_prefix: Optional[str] = None,
             name: Optional[str] = None,
             next_hop_ip_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if address_prefix is not None:
            _setter("address_prefix", address_prefix)
        if name is not None:
            _setter("name", name)
        if next_hop_ip_address is not None:
            _setter("next_hop_ip_address", next_hop_ip_address)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[str]:
        """
        AddressPrefix - The destination CIDR to which the route applies.
        """
        return pulumi.get(self, "address_prefix")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - name of the subnet
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> Optional[str]:
        """
        NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        """
        return pulumi.get(self, "next_hop_ip_address")


@pulumi.output_type
class VirtualNetworkPropertiesResponseSubnets(dict):
    """
    Subnet subnet in a virtual network resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefix":
            suggest = "address_prefix"
        elif key == "addressPrefixes":
            suggest = "address_prefixes"
        elif key == "ipAllocationMethod":
            suggest = "ip_allocation_method"
        elif key == "ipConfigurationReferences":
            suggest = "ip_configuration_references"
        elif key == "ipPools":
            suggest = "ip_pools"
        elif key == "routeTable":
            suggest = "route_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkPropertiesResponseSubnets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkPropertiesResponseSubnets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkPropertiesResponseSubnets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefix: Optional[str] = None,
                 address_prefixes: Optional[Sequence[str]] = None,
                 ip_allocation_method: Optional[str] = None,
                 ip_configuration_references: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseIpConfigurationReferences']] = None,
                 ip_pools: Optional[Sequence['outputs.IPPoolResponse']] = None,
                 name: Optional[str] = None,
                 route_table: Optional['outputs.VirtualNetworkPropertiesResponseRouteTable'] = None,
                 vlan: Optional[int] = None):
        """
        Subnet subnet in a virtual network resource.
        :param str address_prefix: Cidr for this subnet - IPv4, IPv6
        :param Sequence[str] address_prefixes: AddressPrefixes - List of address prefixes for the subnet.
        :param str ip_allocation_method: IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        :param Sequence['VirtualNetworkPropertiesResponseIpConfigurationReferences'] ip_configuration_references: IPConfigurationReferences - list of IPConfigurationReferences
        :param Sequence['IPPoolResponse'] ip_pools: network associated pool of IP Addresses
        :param str name: Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        :param 'VirtualNetworkPropertiesResponseRouteTable' route_table: RouteTable for the subnet
        :param int vlan: Vlan to use for the subnet
        """
        VirtualNetworkPropertiesResponseSubnets._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_prefix=address_prefix,
            address_prefixes=address_prefixes,
            ip_allocation_method=ip_allocation_method,
            ip_configuration_references=ip_configuration_references,
            ip_pools=ip_pools,
            name=name,
            route_table=route_table,
            vlan=vlan,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_prefix: Optional[str] = None,
             address_prefixes: Optional[Sequence[str]] = None,
             ip_allocation_method: Optional[str] = None,
             ip_configuration_references: Optional[Sequence['outputs.VirtualNetworkPropertiesResponseIpConfigurationReferences']] = None,
             ip_pools: Optional[Sequence['outputs.IPPoolResponse']] = None,
             name: Optional[str] = None,
             route_table: Optional['outputs.VirtualNetworkPropertiesResponseRouteTable'] = None,
             vlan: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if address_prefix is not None:
            _setter("address_prefix", address_prefix)
        if address_prefixes is not None:
            _setter("address_prefixes", address_prefixes)
        if ip_allocation_method is not None:
            _setter("ip_allocation_method", ip_allocation_method)
        if ip_configuration_references is not None:
            _setter("ip_configuration_references", ip_configuration_references)
        if ip_pools is not None:
            _setter("ip_pools", ip_pools)
        if name is not None:
            _setter("name", name)
        if route_table is not None:
            _setter("route_table", route_table)
        if vlan is not None:
            _setter("vlan", vlan)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[str]:
        """
        Cidr for this subnet - IPv4, IPv6
        """
        return pulumi.get(self, "address_prefix")

    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Optional[Sequence[str]]:
        """
        AddressPrefixes - List of address prefixes for the subnet.
        """
        return pulumi.get(self, "address_prefixes")

    @property
    @pulumi.getter(name="ipAllocationMethod")
    def ip_allocation_method(self) -> Optional[str]:
        """
        IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        """
        return pulumi.get(self, "ip_allocation_method")

    @property
    @pulumi.getter(name="ipConfigurationReferences")
    def ip_configuration_references(self) -> Optional[Sequence['outputs.VirtualNetworkPropertiesResponseIpConfigurationReferences']]:
        """
        IPConfigurationReferences - list of IPConfigurationReferences
        """
        return pulumi.get(self, "ip_configuration_references")

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[Sequence['outputs.IPPoolResponse']]:
        """
        network associated pool of IP Addresses
        """
        return pulumi.get(self, "ip_pools")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeTable")
    def route_table(self) -> Optional['outputs.VirtualNetworkPropertiesResponseRouteTable']:
        """
        RouteTable for the subnet
        """
        return pulumi.get(self, "route_table")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        Vlan to use for the subnet
        """
        return pulumi.get(self, "vlan")


@pulumi.output_type
class VirtualNetworkStatusResponse(dict):
    """
    The observed state of virtual networks
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "provisioningStatus":
            suggest = "provisioning_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 provisioning_status: Optional['outputs.VirtualNetworkStatusResponseProvisioningStatus'] = None):
        """
        The observed state of virtual networks
        :param str error_code: VirtualNetwork provisioning error code
        :param str error_message: Descriptive error message
        """
        VirtualNetworkStatusResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_message=error_message,
            provisioning_status=provisioning_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             provisioning_status: Optional['outputs.VirtualNetworkStatusResponseProvisioningStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if provisioning_status is not None:
            _setter("provisioning_status", provisioning_status)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        VirtualNetwork provisioning error code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Descriptive error message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional['outputs.VirtualNetworkStatusResponseProvisioningStatus']:
        return pulumi.get(self, "provisioning_status")


@pulumi.output_type
class VirtualNetworkStatusResponseProvisioningStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationId":
            suggest = "operation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkStatusResponseProvisioningStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkStatusResponseProvisioningStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkStatusResponseProvisioningStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str operation_id: The ID of the operation performed on the virtual network
        :param str status: The status of the operation performed on the virtual network [Succeeded, Failed, InProgress]
        """
        VirtualNetworkStatusResponseProvisioningStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_id=operation_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operation_id is not None:
            _setter("operation_id", operation_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        """
        The ID of the operation performed on the virtual network
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the operation performed on the virtual network [Succeeded, Failed, InProgress]
        """
        return pulumi.get(self, "status")


