# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ArmResourceDefinitionResourceElementTemplateDetailsResponse',
    'ArmResourceDefinitionResourceElementTemplateResponse',
    'ArmTemplateArtifactProfileResponse',
    'ArmTemplateMappingRuleProfileResponse',
    'ArtifactManifestPropertiesFormatResponse',
    'ArtifactStorePropertiesFormatResponse',
    'ArtifactStorePropertiesFormatResponseManagedResourceGroupConfiguration',
    'AzureArcK8sClusterNFVIDetailsResponse',
    'AzureArcKubernetesArtifactProfileResponse',
    'AzureArcKubernetesDeployMappingRuleProfileResponse',
    'AzureArcKubernetesHelmApplicationResponse',
    'AzureArcKubernetesNetworkFunctionTemplateResponse',
    'AzureCoreArmTemplateArtifactProfileResponse',
    'AzureCoreArmTemplateDeployMappingRuleProfileResponse',
    'AzureCoreNFVIDetailsResponse',
    'AzureCoreNetworkFunctionArmTemplateApplicationResponse',
    'AzureCoreNetworkFunctionTemplateResponse',
    'AzureCoreNetworkFunctionVhdApplicationResponse',
    'AzureCoreVhdImageArtifactProfileResponse',
    'AzureCoreVhdImageDeployMappingRuleProfileResponse',
    'AzureOperatorNexusArmTemplateArtifactProfileResponse',
    'AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse',
    'AzureOperatorNexusClusterNFVIDetailsResponse',
    'AzureOperatorNexusImageArtifactProfileResponse',
    'AzureOperatorNexusImageDeployMappingRuleProfileResponse',
    'AzureOperatorNexusNetworkFunctionArmTemplateApplicationResponse',
    'AzureOperatorNexusNetworkFunctionImageApplicationResponse',
    'AzureOperatorNexusNetworkFunctionTemplateResponse',
    'ConfigurationGroupSchemaPropertiesFormatResponse',
    'ConfigurationValueWithSecretsResponse',
    'ConfigurationValueWithoutSecretsResponse',
    'ContainerizedNetworkFunctionDefinitionVersionResponse',
    'CustomProfileResponse',
    'DataDiskResponse',
    'DependsOnProfileResponse',
    'HelmArtifactProfileResponse',
    'HelmInstallOptionsResponse',
    'HelmMappingRuleProfileResponse',
    'HelmMappingRuleProfileResponseOptions',
    'HelmUpgradeOptionsResponse',
    'ImageArtifactProfileResponse',
    'ImageMappingRuleProfileResponse',
    'ImageReferenceResponse',
    'LinuxConfigurationResponse',
    'ManagedResourceGroupConfigurationResponse',
    'ManagedServiceIdentityResponse',
    'ManifestArtifactFormatResponse',
    'NSDArtifactProfileResponse',
    'NetworkFunctionDefinitionGroupPropertiesFormatResponse',
    'NetworkFunctionDefinitionResourceElementTemplateDetailsResponse',
    'NetworkFunctionRoleConfigurationResponse',
    'NetworkFunctionTemplateResponse',
    'NetworkFunctionUserConfigurationResponse',
    'NetworkFunctionUserConfigurationResponseOsProfile',
    'NetworkInterfaceIPConfigurationResponse',
    'NetworkInterfaceResponse',
    'NetworkServiceDesignGroupPropertiesFormatResponse',
    'NetworkServiceDesignVersionPropertiesFormatResponse',
    'NfviDetailsResponse',
    'OpenDeploymentResourceReferenceResponse',
    'OsDiskResponse',
    'OsProfileResponse',
    'PublisherPropertiesFormatResponse',
    'ReferencedResourceResponse',
    'SecretDeploymentResourceReferenceResponse',
    'SiteNetworkServicePropertiesFormatResponse',
    'SitePropertiesFormatResponse',
    'SkuResponse',
    'SshConfigurationResponse',
    'SshPublicKeyResponse',
    'StorageProfileResponse',
    'SubResourceResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'VhdImageArtifactProfileResponse',
    'VhdImageMappingRuleProfileResponse',
    'VirtualNetworkFunctionNetworkFunctionDefinitionVersionResponse',
]

@pulumi.output_type
class ArmResourceDefinitionResourceElementTemplateDetailsResponse(dict):
    """
    The arm resource definition resource element template details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceElementType":
            suggest = "resource_element_type"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArmResourceDefinitionResourceElementTemplateDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArmResourceDefinitionResourceElementTemplateDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArmResourceDefinitionResourceElementTemplateDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_element_type: str,
                 configuration: Optional['outputs.ArmResourceDefinitionResourceElementTemplateResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        The arm resource definition resource element template details.
        :param str resource_element_type: The resource element template type.
               Expected value is 'ArmResourceDefinition'.
        :param 'ArmResourceDefinitionResourceElementTemplateResponse' configuration: The resource element template type.
        :param 'DependsOnProfileResponse' depends_on_profile: The depends on profile.
        :param str name: Name of the resource element template.
        """
        pulumi.set(__self__, "resource_element_type", 'ArmResourceDefinition')
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="resourceElementType")
    def resource_element_type(self) -> str:
        """
        The resource element template type.
        Expected value is 'ArmResourceDefinition'.
        """
        return pulumi.get(self, "resource_element_type")

    @property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.ArmResourceDefinitionResourceElementTemplateResponse']:
        """
        The resource element template type.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        The depends on profile.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource element template.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ArmResourceDefinitionResourceElementTemplateResponse(dict):
    """
    The arm template RE.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactProfile":
            suggest = "artifact_profile"
        elif key == "parameterValues":
            suggest = "parameter_values"
        elif key == "templateType":
            suggest = "template_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArmResourceDefinitionResourceElementTemplateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArmResourceDefinitionResourceElementTemplateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArmResourceDefinitionResourceElementTemplateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_profile: Optional['outputs.NSDArtifactProfileResponse'] = None,
                 parameter_values: Optional[str] = None,
                 template_type: Optional[str] = None):
        """
        The arm template RE.
        :param 'NSDArtifactProfileResponse' artifact_profile: Artifact profile properties.
        :param str parameter_values: Name and value pairs that define the parameter values. It can be  a well formed escaped JSON string.
        :param str template_type: The template type.
        """
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional['outputs.NSDArtifactProfileResponse']:
        """
        Artifact profile properties.
        """
        return pulumi.get(self, "artifact_profile")

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[str]:
        """
        Name and value pairs that define the parameter values. It can be  a well formed escaped JSON string.
        """
        return pulumi.get(self, "parameter_values")

    @property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[str]:
        """
        The template type.
        """
        return pulumi.get(self, "template_type")


@pulumi.output_type
class ArmTemplateArtifactProfileResponse(dict):
    """
    Template artifact profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateName":
            suggest = "template_name"
        elif key == "templateVersion":
            suggest = "template_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArmTemplateArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArmTemplateArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArmTemplateArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_name: Optional[str] = None,
                 template_version: Optional[str] = None):
        """
        Template artifact profile.
        :param str template_name: Template name.
        :param str template_version: Template version.
        """
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if template_version is not None:
            pulumi.set(__self__, "template_version", template_version)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[str]:
        """
        Template name.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[str]:
        """
        Template version.
        """
        return pulumi.get(self, "template_version")


@pulumi.output_type
class ArmTemplateMappingRuleProfileResponse(dict):
    """
    Template mapping rule profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateParameters":
            suggest = "template_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArmTemplateMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArmTemplateMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArmTemplateMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_parameters: Optional[str] = None):
        """
        Template mapping rule profile
        :param str template_parameters: List of template parameters.
        """
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[str]:
        """
        List of template parameters.
        """
        return pulumi.get(self, "template_parameters")


@pulumi.output_type
class ArtifactManifestPropertiesFormatResponse(dict):
    """
    Artifact manifest properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactManifestState":
            suggest = "artifact_manifest_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArtifactManifestPropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArtifactManifestPropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArtifactManifestPropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_manifest_state: str,
                 provisioning_state: str,
                 artifacts: Optional[Sequence['outputs.ManifestArtifactFormatResponse']] = None):
        """
        Artifact manifest properties.
        :param str artifact_manifest_state: The artifact manifest state.
        :param str provisioning_state: The provisioning state of the ArtifactManifest resource.
        :param Sequence['ManifestArtifactFormatResponse'] artifacts: The artifacts list.
        """
        pulumi.set(__self__, "artifact_manifest_state", artifact_manifest_state)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)

    @property
    @pulumi.getter(name="artifactManifestState")
    def artifact_manifest_state(self) -> str:
        """
        The artifact manifest state.
        """
        return pulumi.get(self, "artifact_manifest_state")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the ArtifactManifest resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.ManifestArtifactFormatResponse']]:
        """
        The artifacts list.
        """
        return pulumi.get(self, "artifacts")


@pulumi.output_type
class ArtifactStorePropertiesFormatResponse(dict):
    """
    Artifact store properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "storageResourceId":
            suggest = "storage_resource_id"
        elif key == "managedResourceGroupConfiguration":
            suggest = "managed_resource_group_configuration"
        elif key == "replicationStrategy":
            suggest = "replication_strategy"
        elif key == "storeType":
            suggest = "store_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArtifactStorePropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArtifactStorePropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArtifactStorePropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 storage_resource_id: str,
                 managed_resource_group_configuration: Optional['outputs.ArtifactStorePropertiesFormatResponseManagedResourceGroupConfiguration'] = None,
                 replication_strategy: Optional[str] = None,
                 store_type: Optional[str] = None):
        """
        Artifact store properties.
        :param str provisioning_state: The provisioning state of the application groups resource.
        :param str storage_resource_id: The created storage resource id
        :param str replication_strategy: The replication strategy.
        :param str store_type: The artifact store type.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "storage_resource_id", storage_resource_id)
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        if replication_strategy is not None:
            pulumi.set(__self__, "replication_strategy", replication_strategy)
        if store_type is not None:
            pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the application groups resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="storageResourceId")
    def storage_resource_id(self) -> str:
        """
        The created storage resource id
        """
        return pulumi.get(self, "storage_resource_id")

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional['outputs.ArtifactStorePropertiesFormatResponseManagedResourceGroupConfiguration']:
        return pulumi.get(self, "managed_resource_group_configuration")

    @property
    @pulumi.getter(name="replicationStrategy")
    def replication_strategy(self) -> Optional[str]:
        """
        The replication strategy.
        """
        return pulumi.get(self, "replication_strategy")

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> Optional[str]:
        """
        The artifact store type.
        """
        return pulumi.get(self, "store_type")


@pulumi.output_type
class ArtifactStorePropertiesFormatResponseManagedResourceGroupConfiguration(dict):
    def __init__(__self__, *,
                 location: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str location: The managed resource group location.
        :param str name: The managed resource group name.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The managed resource group location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The managed resource group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureArcK8sClusterNFVIDetailsResponse(dict):
    """
    The AzureArcK8sCluster NFVI detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfviType":
            suggest = "nfvi_type"
        elif key == "customLocationReference":
            suggest = "custom_location_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureArcK8sClusterNFVIDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureArcK8sClusterNFVIDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureArcK8sClusterNFVIDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfvi_type: str,
                 custom_location_reference: Optional['outputs.ReferencedResourceResponse'] = None,
                 name: Optional[str] = None):
        """
        The AzureArcK8sCluster NFVI detail.
        :param str nfvi_type: The NFVI type.
               Expected value is 'AzureArcKubernetes'.
        :param 'ReferencedResourceResponse' custom_location_reference: The reference to the custom location.
        :param str name: Name of the nfvi.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureArcKubernetes')
        if custom_location_reference is not None:
            pulumi.set(__self__, "custom_location_reference", custom_location_reference)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> str:
        """
        The NFVI type.
        Expected value is 'AzureArcKubernetes'.
        """
        return pulumi.get(self, "nfvi_type")

    @property
    @pulumi.getter(name="customLocationReference")
    def custom_location_reference(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to the custom location.
        """
        return pulumi.get(self, "custom_location_reference")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the nfvi.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureArcKubernetesArtifactProfileResponse(dict):
    """
    Azure arc kubernetes artifact profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactStore":
            suggest = "artifact_store"
        elif key == "helmArtifactProfile":
            suggest = "helm_artifact_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureArcKubernetesArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureArcKubernetesArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureArcKubernetesArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_store: Optional['outputs.ReferencedResourceResponse'] = None,
                 helm_artifact_profile: Optional['outputs.HelmArtifactProfileResponse'] = None):
        """
        Azure arc kubernetes artifact profile properties.
        :param 'ReferencedResourceResponse' artifact_store: The reference to artifact store.
        :param 'HelmArtifactProfileResponse' helm_artifact_profile: Helm artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if helm_artifact_profile is not None:
            pulumi.set(__self__, "helm_artifact_profile", helm_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @property
    @pulumi.getter(name="helmArtifactProfile")
    def helm_artifact_profile(self) -> Optional['outputs.HelmArtifactProfileResponse']:
        """
        Helm artifact profile.
        """
        return pulumi.get(self, "helm_artifact_profile")


@pulumi.output_type
class AzureArcKubernetesDeployMappingRuleProfileResponse(dict):
    """
    Azure arc kubernetes deploy mapping rule profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationEnablement":
            suggest = "application_enablement"
        elif key == "helmMappingRuleProfile":
            suggest = "helm_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureArcKubernetesDeployMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureArcKubernetesDeployMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureArcKubernetesDeployMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_enablement: Optional[str] = None,
                 helm_mapping_rule_profile: Optional['outputs.HelmMappingRuleProfileResponse'] = None):
        """
        Azure arc kubernetes deploy mapping rule profile.
        :param str application_enablement: The application enablement.
        :param 'HelmMappingRuleProfileResponse' helm_mapping_rule_profile: The helm mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if helm_mapping_rule_profile is not None:
            pulumi.set(__self__, "helm_mapping_rule_profile", helm_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[str]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @property
    @pulumi.getter(name="helmMappingRuleProfile")
    def helm_mapping_rule_profile(self) -> Optional['outputs.HelmMappingRuleProfileResponse']:
        """
        The helm mapping rule profile.
        """
        return pulumi.get(self, "helm_mapping_rule_profile")


@pulumi.output_type
class AzureArcKubernetesHelmApplicationResponse(dict):
    """
    Azure arc kubernetes helm application configurations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactType":
            suggest = "artifact_type"
        elif key == "artifactProfile":
            suggest = "artifact_profile"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"
        elif key == "deployParametersMappingRuleProfile":
            suggest = "deploy_parameters_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureArcKubernetesHelmApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureArcKubernetesHelmApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureArcKubernetesHelmApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_type: str,
                 artifact_profile: Optional['outputs.AzureArcKubernetesArtifactProfileResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 deploy_parameters_mapping_rule_profile: Optional['outputs.AzureArcKubernetesDeployMappingRuleProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        Azure arc kubernetes helm application configurations.
        :param str artifact_type: The artifact type.
               Expected value is 'HelmPackage'.
        :param 'AzureArcKubernetesArtifactProfileResponse' artifact_profile: Azure arc kubernetes artifact profile.
        :param 'DependsOnProfileResponse' depends_on_profile: Depends on profile definition.
        :param 'AzureArcKubernetesDeployMappingRuleProfileResponse' deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param str name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'HelmPackage')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> str:
        """
        The artifact type.
        Expected value is 'HelmPackage'.
        """
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional['outputs.AzureArcKubernetesArtifactProfileResponse']:
        """
        Azure arc kubernetes artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional['outputs.AzureArcKubernetesDeployMappingRuleProfileResponse']:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureArcKubernetesNetworkFunctionTemplateResponse(dict):
    """
    Azure Arc kubernetes network function template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfviType":
            suggest = "nfvi_type"
        elif key == "networkFunctionApplications":
            suggest = "network_function_applications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureArcKubernetesNetworkFunctionTemplateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureArcKubernetesNetworkFunctionTemplateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureArcKubernetesNetworkFunctionTemplateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfvi_type: str,
                 network_function_applications: Optional[Sequence['outputs.AzureArcKubernetesHelmApplicationResponse']] = None):
        """
        Azure Arc kubernetes network function template.
        :param str nfvi_type: The network function type.
               Expected value is 'AzureArcKubernetes'.
        :param Sequence['AzureArcKubernetesHelmApplicationResponse'] network_function_applications: Network function applications.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureArcKubernetes')
        if network_function_applications is not None:
            pulumi.set(__self__, "network_function_applications", network_function_applications)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> str:
        """
        The network function type.
        Expected value is 'AzureArcKubernetes'.
        """
        return pulumi.get(self, "nfvi_type")

    @property
    @pulumi.getter(name="networkFunctionApplications")
    def network_function_applications(self) -> Optional[Sequence['outputs.AzureArcKubernetesHelmApplicationResponse']]:
        """
        Network function applications.
        """
        return pulumi.get(self, "network_function_applications")


@pulumi.output_type
class AzureCoreArmTemplateArtifactProfileResponse(dict):
    """
    Azure template artifact profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactStore":
            suggest = "artifact_store"
        elif key == "templateArtifactProfile":
            suggest = "template_artifact_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreArmTemplateArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreArmTemplateArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreArmTemplateArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_store: Optional['outputs.ReferencedResourceResponse'] = None,
                 template_artifact_profile: Optional['outputs.ArmTemplateArtifactProfileResponse'] = None):
        """
        Azure template artifact profile properties.
        :param 'ReferencedResourceResponse' artifact_store: The reference to artifact store.
        :param 'ArmTemplateArtifactProfileResponse' template_artifact_profile: Template artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if template_artifact_profile is not None:
            pulumi.set(__self__, "template_artifact_profile", template_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @property
    @pulumi.getter(name="templateArtifactProfile")
    def template_artifact_profile(self) -> Optional['outputs.ArmTemplateArtifactProfileResponse']:
        """
        Template artifact profile.
        """
        return pulumi.get(self, "template_artifact_profile")


@pulumi.output_type
class AzureCoreArmTemplateDeployMappingRuleProfileResponse(dict):
    """
    Azure template deploy mapping rule profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationEnablement":
            suggest = "application_enablement"
        elif key == "templateMappingRuleProfile":
            suggest = "template_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreArmTemplateDeployMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreArmTemplateDeployMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreArmTemplateDeployMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_enablement: Optional[str] = None,
                 template_mapping_rule_profile: Optional['outputs.ArmTemplateMappingRuleProfileResponse'] = None):
        """
        Azure template deploy mapping rule profile.
        :param str application_enablement: The application enablement.
        :param 'ArmTemplateMappingRuleProfileResponse' template_mapping_rule_profile: The template mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if template_mapping_rule_profile is not None:
            pulumi.set(__self__, "template_mapping_rule_profile", template_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[str]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @property
    @pulumi.getter(name="templateMappingRuleProfile")
    def template_mapping_rule_profile(self) -> Optional['outputs.ArmTemplateMappingRuleProfileResponse']:
        """
        The template mapping rule profile.
        """
        return pulumi.get(self, "template_mapping_rule_profile")


@pulumi.output_type
class AzureCoreNFVIDetailsResponse(dict):
    """
    The Azure Core NFVI detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfviType":
            suggest = "nfvi_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreNFVIDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreNFVIDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreNFVIDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfvi_type: str,
                 location: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The Azure Core NFVI detail.
        :param str nfvi_type: The NFVI type.
               Expected value is 'AzureCore'.
        :param str location: Location of the Azure core.
        :param str name: Name of the nfvi.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureCore')
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> str:
        """
        The NFVI type.
        Expected value is 'AzureCore'.
        """
        return pulumi.get(self, "nfvi_type")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Location of the Azure core.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the nfvi.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureCoreNetworkFunctionArmTemplateApplicationResponse(dict):
    """
    Azure core network function Template application definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactType":
            suggest = "artifact_type"
        elif key == "artifactProfile":
            suggest = "artifact_profile"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"
        elif key == "deployParametersMappingRuleProfile":
            suggest = "deploy_parameters_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreNetworkFunctionArmTemplateApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreNetworkFunctionArmTemplateApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreNetworkFunctionArmTemplateApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_type: str,
                 artifact_profile: Optional['outputs.AzureCoreArmTemplateArtifactProfileResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 deploy_parameters_mapping_rule_profile: Optional['outputs.AzureCoreArmTemplateDeployMappingRuleProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        Azure core network function Template application definition.
        :param str artifact_type: The artifact type.
               Expected value is 'ArmTemplate'.
        :param 'AzureCoreArmTemplateArtifactProfileResponse' artifact_profile: Azure template artifact profile.
        :param 'DependsOnProfileResponse' depends_on_profile: Depends on profile definition.
        :param 'AzureCoreArmTemplateDeployMappingRuleProfileResponse' deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param str name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'ArmTemplate')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> str:
        """
        The artifact type.
        Expected value is 'ArmTemplate'.
        """
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional['outputs.AzureCoreArmTemplateArtifactProfileResponse']:
        """
        Azure template artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional['outputs.AzureCoreArmTemplateDeployMappingRuleProfileResponse']:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureCoreNetworkFunctionTemplateResponse(dict):
    """
    Azure virtual network function template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfviType":
            suggest = "nfvi_type"
        elif key == "networkFunctionApplications":
            suggest = "network_function_applications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreNetworkFunctionTemplateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreNetworkFunctionTemplateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreNetworkFunctionTemplateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfvi_type: str,
                 network_function_applications: Optional[Sequence[Any]] = None):
        """
        Azure virtual network function template.
        :param str nfvi_type: The network function type.
               Expected value is 'AzureCore'.
        :param Sequence[Union['AzureCoreNetworkFunctionArmTemplateApplicationResponse', 'AzureCoreNetworkFunctionVhdApplicationResponse']] network_function_applications: Network function applications.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureCore')
        if network_function_applications is not None:
            pulumi.set(__self__, "network_function_applications", network_function_applications)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> str:
        """
        The network function type.
        Expected value is 'AzureCore'.
        """
        return pulumi.get(self, "nfvi_type")

    @property
    @pulumi.getter(name="networkFunctionApplications")
    def network_function_applications(self) -> Optional[Sequence[Any]]:
        """
        Network function applications.
        """
        return pulumi.get(self, "network_function_applications")


@pulumi.output_type
class AzureCoreNetworkFunctionVhdApplicationResponse(dict):
    """
    Azure core network function vhd application definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactType":
            suggest = "artifact_type"
        elif key == "artifactProfile":
            suggest = "artifact_profile"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"
        elif key == "deployParametersMappingRuleProfile":
            suggest = "deploy_parameters_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreNetworkFunctionVhdApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreNetworkFunctionVhdApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreNetworkFunctionVhdApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_type: str,
                 artifact_profile: Optional['outputs.AzureCoreVhdImageArtifactProfileResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 deploy_parameters_mapping_rule_profile: Optional['outputs.AzureCoreVhdImageDeployMappingRuleProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        Azure core network function vhd application definition.
        :param str artifact_type: The artifact type.
               Expected value is 'VhdImageFile'.
        :param 'AzureCoreVhdImageArtifactProfileResponse' artifact_profile: Azure vhd image artifact profile.
        :param 'DependsOnProfileResponse' depends_on_profile: Depends on profile definition.
        :param 'AzureCoreVhdImageDeployMappingRuleProfileResponse' deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param str name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'VhdImageFile')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> str:
        """
        The artifact type.
        Expected value is 'VhdImageFile'.
        """
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional['outputs.AzureCoreVhdImageArtifactProfileResponse']:
        """
        Azure vhd image artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional['outputs.AzureCoreVhdImageDeployMappingRuleProfileResponse']:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureCoreVhdImageArtifactProfileResponse(dict):
    """
    Azure vhd artifact profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactStore":
            suggest = "artifact_store"
        elif key == "vhdArtifactProfile":
            suggest = "vhd_artifact_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreVhdImageArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreVhdImageArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreVhdImageArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_store: Optional['outputs.ReferencedResourceResponse'] = None,
                 vhd_artifact_profile: Optional['outputs.VhdImageArtifactProfileResponse'] = None):
        """
        Azure vhd artifact profile properties.
        :param 'ReferencedResourceResponse' artifact_store: The reference to artifact store.
        :param 'VhdImageArtifactProfileResponse' vhd_artifact_profile: Vhd artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if vhd_artifact_profile is not None:
            pulumi.set(__self__, "vhd_artifact_profile", vhd_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @property
    @pulumi.getter(name="vhdArtifactProfile")
    def vhd_artifact_profile(self) -> Optional['outputs.VhdImageArtifactProfileResponse']:
        """
        Vhd artifact profile.
        """
        return pulumi.get(self, "vhd_artifact_profile")


@pulumi.output_type
class AzureCoreVhdImageDeployMappingRuleProfileResponse(dict):
    """
    Azure vhd deploy mapping rule profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationEnablement":
            suggest = "application_enablement"
        elif key == "vhdImageMappingRuleProfile":
            suggest = "vhd_image_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCoreVhdImageDeployMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCoreVhdImageDeployMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCoreVhdImageDeployMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_enablement: Optional[str] = None,
                 vhd_image_mapping_rule_profile: Optional['outputs.VhdImageMappingRuleProfileResponse'] = None):
        """
        Azure vhd deploy mapping rule profile.
        :param str application_enablement: The application enablement.
        :param 'VhdImageMappingRuleProfileResponse' vhd_image_mapping_rule_profile: The vhd mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if vhd_image_mapping_rule_profile is not None:
            pulumi.set(__self__, "vhd_image_mapping_rule_profile", vhd_image_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[str]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @property
    @pulumi.getter(name="vhdImageMappingRuleProfile")
    def vhd_image_mapping_rule_profile(self) -> Optional['outputs.VhdImageMappingRuleProfileResponse']:
        """
        The vhd mapping rule profile.
        """
        return pulumi.get(self, "vhd_image_mapping_rule_profile")


@pulumi.output_type
class AzureOperatorNexusArmTemplateArtifactProfileResponse(dict):
    """
    Azure Operator Distributed Services vhd artifact profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactStore":
            suggest = "artifact_store"
        elif key == "templateArtifactProfile":
            suggest = "template_artifact_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusArmTemplateArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusArmTemplateArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusArmTemplateArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_store: Optional['outputs.ReferencedResourceResponse'] = None,
                 template_artifact_profile: Optional['outputs.ArmTemplateArtifactProfileResponse'] = None):
        """
        Azure Operator Distributed Services vhd artifact profile properties.
        :param 'ReferencedResourceResponse' artifact_store: The reference to artifact store.
        :param 'ArmTemplateArtifactProfileResponse' template_artifact_profile: Template artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if template_artifact_profile is not None:
            pulumi.set(__self__, "template_artifact_profile", template_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @property
    @pulumi.getter(name="templateArtifactProfile")
    def template_artifact_profile(self) -> Optional['outputs.ArmTemplateArtifactProfileResponse']:
        """
        Template artifact profile.
        """
        return pulumi.get(self, "template_artifact_profile")


@pulumi.output_type
class AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse(dict):
    """
    Azure Operator Distributed Services template deploy mapping rule profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationEnablement":
            suggest = "application_enablement"
        elif key == "templateMappingRuleProfile":
            suggest = "template_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_enablement: Optional[str] = None,
                 template_mapping_rule_profile: Optional['outputs.ArmTemplateMappingRuleProfileResponse'] = None):
        """
        Azure Operator Distributed Services template deploy mapping rule profile.
        :param str application_enablement: The application enablement.
        :param 'ArmTemplateMappingRuleProfileResponse' template_mapping_rule_profile: The template mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if template_mapping_rule_profile is not None:
            pulumi.set(__self__, "template_mapping_rule_profile", template_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[str]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @property
    @pulumi.getter(name="templateMappingRuleProfile")
    def template_mapping_rule_profile(self) -> Optional['outputs.ArmTemplateMappingRuleProfileResponse']:
        """
        The template mapping rule profile.
        """
        return pulumi.get(self, "template_mapping_rule_profile")


@pulumi.output_type
class AzureOperatorNexusClusterNFVIDetailsResponse(dict):
    """
    The AzureOperatorNexusCluster NFVI detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfviType":
            suggest = "nfvi_type"
        elif key == "customLocationReference":
            suggest = "custom_location_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusClusterNFVIDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusClusterNFVIDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusClusterNFVIDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfvi_type: str,
                 custom_location_reference: Optional['outputs.ReferencedResourceResponse'] = None,
                 name: Optional[str] = None):
        """
        The AzureOperatorNexusCluster NFVI detail.
        :param str nfvi_type: The NFVI type.
               Expected value is 'AzureOperatorNexus'.
        :param 'ReferencedResourceResponse' custom_location_reference: The reference to the custom location.
        :param str name: Name of the nfvi.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureOperatorNexus')
        if custom_location_reference is not None:
            pulumi.set(__self__, "custom_location_reference", custom_location_reference)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> str:
        """
        The NFVI type.
        Expected value is 'AzureOperatorNexus'.
        """
        return pulumi.get(self, "nfvi_type")

    @property
    @pulumi.getter(name="customLocationReference")
    def custom_location_reference(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to the custom location.
        """
        return pulumi.get(self, "custom_location_reference")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the nfvi.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureOperatorNexusImageArtifactProfileResponse(dict):
    """
    Azure Operator Distributed Services image artifact profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactStore":
            suggest = "artifact_store"
        elif key == "imageArtifactProfile":
            suggest = "image_artifact_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusImageArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusImageArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusImageArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_store: Optional['outputs.ReferencedResourceResponse'] = None,
                 image_artifact_profile: Optional['outputs.ImageArtifactProfileResponse'] = None):
        """
        Azure Operator Distributed Services image artifact profile properties.
        :param 'ReferencedResourceResponse' artifact_store: The reference to artifact store.
        :param 'ImageArtifactProfileResponse' image_artifact_profile: Image artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if image_artifact_profile is not None:
            pulumi.set(__self__, "image_artifact_profile", image_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @property
    @pulumi.getter(name="imageArtifactProfile")
    def image_artifact_profile(self) -> Optional['outputs.ImageArtifactProfileResponse']:
        """
        Image artifact profile.
        """
        return pulumi.get(self, "image_artifact_profile")


@pulumi.output_type
class AzureOperatorNexusImageDeployMappingRuleProfileResponse(dict):
    """
    Azure Operator Distributed Services image deploy mapping rule profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationEnablement":
            suggest = "application_enablement"
        elif key == "imageMappingRuleProfile":
            suggest = "image_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusImageDeployMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusImageDeployMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusImageDeployMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_enablement: Optional[str] = None,
                 image_mapping_rule_profile: Optional['outputs.ImageMappingRuleProfileResponse'] = None):
        """
        Azure Operator Distributed Services image deploy mapping rule profile.
        :param str application_enablement: The application enablement.
        :param 'ImageMappingRuleProfileResponse' image_mapping_rule_profile: The vhd mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if image_mapping_rule_profile is not None:
            pulumi.set(__self__, "image_mapping_rule_profile", image_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[str]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @property
    @pulumi.getter(name="imageMappingRuleProfile")
    def image_mapping_rule_profile(self) -> Optional['outputs.ImageMappingRuleProfileResponse']:
        """
        The vhd mapping rule profile.
        """
        return pulumi.get(self, "image_mapping_rule_profile")


@pulumi.output_type
class AzureOperatorNexusNetworkFunctionArmTemplateApplicationResponse(dict):
    """
    Azure Operator Distributed Services network function Template application definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactType":
            suggest = "artifact_type"
        elif key == "artifactProfile":
            suggest = "artifact_profile"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"
        elif key == "deployParametersMappingRuleProfile":
            suggest = "deploy_parameters_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusNetworkFunctionArmTemplateApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusNetworkFunctionArmTemplateApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusNetworkFunctionArmTemplateApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_type: str,
                 artifact_profile: Optional['outputs.AzureOperatorNexusArmTemplateArtifactProfileResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 deploy_parameters_mapping_rule_profile: Optional['outputs.AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        Azure Operator Distributed Services network function Template application definition.
        :param str artifact_type: The artifact type.
               Expected value is 'ArmTemplate'.
        :param 'AzureOperatorNexusArmTemplateArtifactProfileResponse' artifact_profile: Azure Operator Distributed Services Template artifact profile.
        :param 'DependsOnProfileResponse' depends_on_profile: Depends on profile definition.
        :param 'AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse' deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param str name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'ArmTemplate')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> str:
        """
        The artifact type.
        Expected value is 'ArmTemplate'.
        """
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional['outputs.AzureOperatorNexusArmTemplateArtifactProfileResponse']:
        """
        Azure Operator Distributed Services Template artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional['outputs.AzureOperatorNexusArmTemplateDeployMappingRuleProfileResponse']:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureOperatorNexusNetworkFunctionImageApplicationResponse(dict):
    """
    Azure Operator Distributed Services network function image application definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactType":
            suggest = "artifact_type"
        elif key == "artifactProfile":
            suggest = "artifact_profile"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"
        elif key == "deployParametersMappingRuleProfile":
            suggest = "deploy_parameters_mapping_rule_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusNetworkFunctionImageApplicationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusNetworkFunctionImageApplicationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusNetworkFunctionImageApplicationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_type: str,
                 artifact_profile: Optional['outputs.AzureOperatorNexusImageArtifactProfileResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 deploy_parameters_mapping_rule_profile: Optional['outputs.AzureOperatorNexusImageDeployMappingRuleProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        Azure Operator Distributed Services network function image application definition.
        :param str artifact_type: The artifact type.
               Expected value is 'ImageFile'.
        :param 'AzureOperatorNexusImageArtifactProfileResponse' artifact_profile: Azure Operator Distributed Services image artifact profile.
        :param 'DependsOnProfileResponse' depends_on_profile: Depends on profile definition.
        :param 'AzureOperatorNexusImageDeployMappingRuleProfileResponse' deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param str name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'ImageFile')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> str:
        """
        The artifact type.
        Expected value is 'ImageFile'.
        """
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional['outputs.AzureOperatorNexusImageArtifactProfileResponse']:
        """
        Azure Operator Distributed Services image artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional['outputs.AzureOperatorNexusImageDeployMappingRuleProfileResponse']:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AzureOperatorNexusNetworkFunctionTemplateResponse(dict):
    """
    Azure Operator Distributed Services network function template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfviType":
            suggest = "nfvi_type"
        elif key == "networkFunctionApplications":
            suggest = "network_function_applications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureOperatorNexusNetworkFunctionTemplateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureOperatorNexusNetworkFunctionTemplateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureOperatorNexusNetworkFunctionTemplateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfvi_type: str,
                 network_function_applications: Optional[Sequence[Any]] = None):
        """
        Azure Operator Distributed Services network function template.
        :param str nfvi_type: The network function type.
               Expected value is 'AzureOperatorNexus'.
        :param Sequence[Union['AzureOperatorNexusNetworkFunctionArmTemplateApplicationResponse', 'AzureOperatorNexusNetworkFunctionImageApplicationResponse']] network_function_applications: Network function applications.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureOperatorNexus')
        if network_function_applications is not None:
            pulumi.set(__self__, "network_function_applications", network_function_applications)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> str:
        """
        The network function type.
        Expected value is 'AzureOperatorNexus'.
        """
        return pulumi.get(self, "nfvi_type")

    @property
    @pulumi.getter(name="networkFunctionApplications")
    def network_function_applications(self) -> Optional[Sequence[Any]]:
        """
        Network function applications.
        """
        return pulumi.get(self, "network_function_applications")


@pulumi.output_type
class ConfigurationGroupSchemaPropertiesFormatResponse(dict):
    """
    Configuration group schema properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "versionState":
            suggest = "version_state"
        elif key == "schemaDefinition":
            suggest = "schema_definition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationGroupSchemaPropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationGroupSchemaPropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationGroupSchemaPropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 version_state: str,
                 description: Optional[str] = None,
                 schema_definition: Optional[str] = None):
        """
        Configuration group schema properties.
        :param str provisioning_state: The provisioning state of the Configuration group schema resource.
        :param str version_state: The configuration group schema version state.
        :param str description: Description of what schema can contain.
        :param str schema_definition: Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version_state", version_state)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if schema_definition is not None:
            pulumi.set(__self__, "schema_definition", schema_definition)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the Configuration group schema resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="versionState")
    def version_state(self) -> str:
        """
        The configuration group schema version state.
        """
        return pulumi.get(self, "version_state")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of what schema can contain.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="schemaDefinition")
    def schema_definition(self) -> Optional[str]:
        """
        Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        return pulumi.get(self, "schema_definition")


@pulumi.output_type
class ConfigurationValueWithSecretsResponse(dict):
    """
    The ConfigurationValue with secrets.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationGroupSchemaName":
            suggest = "configuration_group_schema_name"
        elif key == "configurationGroupSchemaOfferingLocation":
            suggest = "configuration_group_schema_offering_location"
        elif key == "configurationType":
            suggest = "configuration_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "publisherName":
            suggest = "publisher_name"
        elif key == "publisherScope":
            suggest = "publisher_scope"
        elif key == "configurationGroupSchemaResourceReference":
            suggest = "configuration_group_schema_resource_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationValueWithSecretsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationValueWithSecretsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationValueWithSecretsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_group_schema_name: str,
                 configuration_group_schema_offering_location: str,
                 configuration_type: str,
                 provisioning_state: str,
                 publisher_name: str,
                 publisher_scope: str,
                 configuration_group_schema_resource_reference: Optional[Any] = None):
        """
        The ConfigurationValue with secrets.
        :param str configuration_group_schema_name: The configuration group schema name.
        :param str configuration_group_schema_offering_location: The location of the configuration group schema offering.
        :param str configuration_type: The secret type which indicates if secret or not.
               Expected value is 'Secret'.
        :param str provisioning_state: The provisioning state of the site resource.
        :param str publisher_name: The publisher name for the configuration group schema.
        :param str publisher_scope: The scope of the publisher.
        :param Union['OpenDeploymentResourceReferenceResponse', 'SecretDeploymentResourceReferenceResponse'] configuration_group_schema_resource_reference: The configuration group schema resource reference.
        """
        pulumi.set(__self__, "configuration_group_schema_name", configuration_group_schema_name)
        pulumi.set(__self__, "configuration_group_schema_offering_location", configuration_group_schema_offering_location)
        pulumi.set(__self__, "configuration_type", 'Secret')
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "publisher_scope", publisher_scope)
        if configuration_group_schema_resource_reference is not None:
            pulumi.set(__self__, "configuration_group_schema_resource_reference", configuration_group_schema_resource_reference)

    @property
    @pulumi.getter(name="configurationGroupSchemaName")
    def configuration_group_schema_name(self) -> str:
        """
        The configuration group schema name.
        """
        return pulumi.get(self, "configuration_group_schema_name")

    @property
    @pulumi.getter(name="configurationGroupSchemaOfferingLocation")
    def configuration_group_schema_offering_location(self) -> str:
        """
        The location of the configuration group schema offering.
        """
        return pulumi.get(self, "configuration_group_schema_offering_location")

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The secret type which indicates if secret or not.
        Expected value is 'Secret'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the site resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> str:
        """
        The publisher name for the configuration group schema.
        """
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter(name="publisherScope")
    def publisher_scope(self) -> str:
        """
        The scope of the publisher.
        """
        return pulumi.get(self, "publisher_scope")

    @property
    @pulumi.getter(name="configurationGroupSchemaResourceReference")
    def configuration_group_schema_resource_reference(self) -> Optional[Any]:
        """
        The configuration group schema resource reference.
        """
        return pulumi.get(self, "configuration_group_schema_resource_reference")


@pulumi.output_type
class ConfigurationValueWithoutSecretsResponse(dict):
    """
    The ConfigurationValue with no secrets.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationGroupSchemaName":
            suggest = "configuration_group_schema_name"
        elif key == "configurationGroupSchemaOfferingLocation":
            suggest = "configuration_group_schema_offering_location"
        elif key == "configurationType":
            suggest = "configuration_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "publisherName":
            suggest = "publisher_name"
        elif key == "publisherScope":
            suggest = "publisher_scope"
        elif key == "configurationGroupSchemaResourceReference":
            suggest = "configuration_group_schema_resource_reference"
        elif key == "configurationValue":
            suggest = "configuration_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationValueWithoutSecretsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationValueWithoutSecretsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationValueWithoutSecretsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_group_schema_name: str,
                 configuration_group_schema_offering_location: str,
                 configuration_type: str,
                 provisioning_state: str,
                 publisher_name: str,
                 publisher_scope: str,
                 configuration_group_schema_resource_reference: Optional[Any] = None,
                 configuration_value: Optional[str] = None):
        """
        The ConfigurationValue with no secrets.
        :param str configuration_group_schema_name: The configuration group schema name.
        :param str configuration_group_schema_offering_location: The location of the configuration group schema offering.
        :param str configuration_type: The secret type which indicates if secret or not.
               Expected value is 'Open'.
        :param str provisioning_state: The provisioning state of the site resource.
        :param str publisher_name: The publisher name for the configuration group schema.
        :param str publisher_scope: The scope of the publisher.
        :param Union['OpenDeploymentResourceReferenceResponse', 'SecretDeploymentResourceReferenceResponse'] configuration_group_schema_resource_reference: The configuration group schema resource reference.
        :param str configuration_value: Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        pulumi.set(__self__, "configuration_group_schema_name", configuration_group_schema_name)
        pulumi.set(__self__, "configuration_group_schema_offering_location", configuration_group_schema_offering_location)
        pulumi.set(__self__, "configuration_type", 'Open')
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "publisher_scope", publisher_scope)
        if configuration_group_schema_resource_reference is not None:
            pulumi.set(__self__, "configuration_group_schema_resource_reference", configuration_group_schema_resource_reference)
        if configuration_value is not None:
            pulumi.set(__self__, "configuration_value", configuration_value)

    @property
    @pulumi.getter(name="configurationGroupSchemaName")
    def configuration_group_schema_name(self) -> str:
        """
        The configuration group schema name.
        """
        return pulumi.get(self, "configuration_group_schema_name")

    @property
    @pulumi.getter(name="configurationGroupSchemaOfferingLocation")
    def configuration_group_schema_offering_location(self) -> str:
        """
        The location of the configuration group schema offering.
        """
        return pulumi.get(self, "configuration_group_schema_offering_location")

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The secret type which indicates if secret or not.
        Expected value is 'Open'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the site resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> str:
        """
        The publisher name for the configuration group schema.
        """
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter(name="publisherScope")
    def publisher_scope(self) -> str:
        """
        The scope of the publisher.
        """
        return pulumi.get(self, "publisher_scope")

    @property
    @pulumi.getter(name="configurationGroupSchemaResourceReference")
    def configuration_group_schema_resource_reference(self) -> Optional[Any]:
        """
        The configuration group schema resource reference.
        """
        return pulumi.get(self, "configuration_group_schema_resource_reference")

    @property
    @pulumi.getter(name="configurationValue")
    def configuration_value(self) -> Optional[str]:
        """
        Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        return pulumi.get(self, "configuration_value")


@pulumi.output_type
class ContainerizedNetworkFunctionDefinitionVersionResponse(dict):
    """
    Containerized network function network function definition version properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkFunctionType":
            suggest = "network_function_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "versionState":
            suggest = "version_state"
        elif key == "deployParameters":
            suggest = "deploy_parameters"
        elif key == "networkFunctionTemplate":
            suggest = "network_function_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerizedNetworkFunctionDefinitionVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerizedNetworkFunctionDefinitionVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerizedNetworkFunctionDefinitionVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_function_type: str,
                 provisioning_state: str,
                 version_state: str,
                 deploy_parameters: Optional[str] = None,
                 description: Optional[str] = None,
                 network_function_template: Optional['outputs.AzureArcKubernetesNetworkFunctionTemplateResponse'] = None):
        """
        Containerized network function network function definition version properties.
        :param str network_function_type: The network function type.
               Expected value is 'ContainerizedNetworkFunction'.
        :param str provisioning_state: The provisioning state of the network function definition version resource.
        :param str version_state: The network function definition version state.
        :param str deploy_parameters: The deployment parameters of the network function definition version.
        :param str description: The network function definition version description.
        :param 'AzureArcKubernetesNetworkFunctionTemplateResponse' network_function_template: Containerized network function template.
        """
        pulumi.set(__self__, "network_function_type", 'ContainerizedNetworkFunction')
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version_state", version_state)
        if deploy_parameters is not None:
            pulumi.set(__self__, "deploy_parameters", deploy_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if network_function_template is not None:
            pulumi.set(__self__, "network_function_template", network_function_template)

    @property
    @pulumi.getter(name="networkFunctionType")
    def network_function_type(self) -> str:
        """
        The network function type.
        Expected value is 'ContainerizedNetworkFunction'.
        """
        return pulumi.get(self, "network_function_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the network function definition version resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="versionState")
    def version_state(self) -> str:
        """
        The network function definition version state.
        """
        return pulumi.get(self, "version_state")

    @property
    @pulumi.getter(name="deployParameters")
    def deploy_parameters(self) -> Optional[str]:
        """
        The deployment parameters of the network function definition version.
        """
        return pulumi.get(self, "deploy_parameters")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The network function definition version description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="networkFunctionTemplate")
    def network_function_template(self) -> Optional['outputs.AzureArcKubernetesNetworkFunctionTemplateResponse']:
        """
        Containerized network function template.
        """
        return pulumi.get(self, "network_function_template")


@pulumi.output_type
class CustomProfileResponse(dict):
    """
    Specifies the custom settings for the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metadataConfigurationPath":
            suggest = "metadata_configuration_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metadata_configuration_path: Optional[str] = None):
        """
        Specifies the custom settings for the virtual machine.
        :param str metadata_configuration_path: Path for metadata configuration.
        """
        if metadata_configuration_path is not None:
            pulumi.set(__self__, "metadata_configuration_path", metadata_configuration_path)

    @property
    @pulumi.getter(name="metadataConfigurationPath")
    def metadata_configuration_path(self) -> Optional[str]:
        """
        Path for metadata configuration.
        """
        return pulumi.get(self, "metadata_configuration_path")


@pulumi.output_type
class DataDiskResponse(dict):
    """
    Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createOption":
            suggest = "create_option"
        elif key == "diskSizeGB":
            suggest = "disk_size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_option: Optional[str] = None,
                 disk_size_gb: Optional[int] = None,
                 name: Optional[str] = None):
        """
        Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
        :param str create_option: Specifies how the virtual machine should be created.
        :param int disk_size_gb: Specifies the size of an empty disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
        :param str name: The name of data disk.
        """
        if create_option is not None:
            pulumi.set(__self__, "create_option", create_option)
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createOption")
    def create_option(self) -> Optional[str]:
        """
        Specifies how the virtual machine should be created.
        """
        return pulumi.get(self, "create_option")

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[int]:
        """
        Specifies the size of an empty disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of data disk.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DependsOnProfileResponse(dict):
    """
    Depends on profile definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installDependsOn":
            suggest = "install_depends_on"
        elif key == "uninstallDependsOn":
            suggest = "uninstall_depends_on"
        elif key == "updateDependsOn":
            suggest = "update_depends_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DependsOnProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DependsOnProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DependsOnProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 install_depends_on: Optional[Sequence[str]] = None,
                 uninstall_depends_on: Optional[Sequence[str]] = None,
                 update_depends_on: Optional[Sequence[str]] = None):
        """
        Depends on profile definition.
        :param Sequence[str] install_depends_on: Application installation operation dependency.
        :param Sequence[str] uninstall_depends_on: Application deletion operation dependency.
        :param Sequence[str] update_depends_on: Application update operation dependency.
        """
        if install_depends_on is not None:
            pulumi.set(__self__, "install_depends_on", install_depends_on)
        if uninstall_depends_on is not None:
            pulumi.set(__self__, "uninstall_depends_on", uninstall_depends_on)
        if update_depends_on is not None:
            pulumi.set(__self__, "update_depends_on", update_depends_on)

    @property
    @pulumi.getter(name="installDependsOn")
    def install_depends_on(self) -> Optional[Sequence[str]]:
        """
        Application installation operation dependency.
        """
        return pulumi.get(self, "install_depends_on")

    @property
    @pulumi.getter(name="uninstallDependsOn")
    def uninstall_depends_on(self) -> Optional[Sequence[str]]:
        """
        Application deletion operation dependency.
        """
        return pulumi.get(self, "uninstall_depends_on")

    @property
    @pulumi.getter(name="updateDependsOn")
    def update_depends_on(self) -> Optional[Sequence[str]]:
        """
        Application update operation dependency.
        """
        return pulumi.get(self, "update_depends_on")


@pulumi.output_type
class HelmArtifactProfileResponse(dict):
    """
    Helm artifact profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helmPackageName":
            suggest = "helm_package_name"
        elif key == "helmPackageVersionRange":
            suggest = "helm_package_version_range"
        elif key == "imagePullSecretsValuesPaths":
            suggest = "image_pull_secrets_values_paths"
        elif key == "registryValuesPaths":
            suggest = "registry_values_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HelmArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HelmArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HelmArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 helm_package_name: Optional[str] = None,
                 helm_package_version_range: Optional[str] = None,
                 image_pull_secrets_values_paths: Optional[Sequence[str]] = None,
                 registry_values_paths: Optional[Sequence[str]] = None):
        """
        Helm artifact profile.
        :param str helm_package_name: Helm package name.
        :param str helm_package_version_range: Helm package version range.
        :param Sequence[str] image_pull_secrets_values_paths: The image pull secrets values path list.
        :param Sequence[str] registry_values_paths: The registry values path list.
        """
        if helm_package_name is not None:
            pulumi.set(__self__, "helm_package_name", helm_package_name)
        if helm_package_version_range is not None:
            pulumi.set(__self__, "helm_package_version_range", helm_package_version_range)
        if image_pull_secrets_values_paths is not None:
            pulumi.set(__self__, "image_pull_secrets_values_paths", image_pull_secrets_values_paths)
        if registry_values_paths is not None:
            pulumi.set(__self__, "registry_values_paths", registry_values_paths)

    @property
    @pulumi.getter(name="helmPackageName")
    def helm_package_name(self) -> Optional[str]:
        """
        Helm package name.
        """
        return pulumi.get(self, "helm_package_name")

    @property
    @pulumi.getter(name="helmPackageVersionRange")
    def helm_package_version_range(self) -> Optional[str]:
        """
        Helm package version range.
        """
        return pulumi.get(self, "helm_package_version_range")

    @property
    @pulumi.getter(name="imagePullSecretsValuesPaths")
    def image_pull_secrets_values_paths(self) -> Optional[Sequence[str]]:
        """
        The image pull secrets values path list.
        """
        return pulumi.get(self, "image_pull_secrets_values_paths")

    @property
    @pulumi.getter(name="registryValuesPaths")
    def registry_values_paths(self) -> Optional[Sequence[str]]:
        """
        The registry values path list.
        """
        return pulumi.get(self, "registry_values_paths")


@pulumi.output_type
class HelmInstallOptionsResponse(dict):
    """
    The helm deployment install options
    """
    def __init__(__self__, *,
                 atomic: Optional[str] = None,
                 timeout: Optional[str] = None,
                 wait: Optional[str] = None):
        """
        The helm deployment install options
        :param str atomic: The helm deployment atomic options
        :param str timeout: The helm deployment timeout options
        :param str wait: The helm deployment wait options
        """
        if atomic is not None:
            pulumi.set(__self__, "atomic", atomic)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def atomic(self) -> Optional[str]:
        """
        The helm deployment atomic options
        """
        return pulumi.get(self, "atomic")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        The helm deployment timeout options
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def wait(self) -> Optional[str]:
        """
        The helm deployment wait options
        """
        return pulumi.get(self, "wait")


@pulumi.output_type
class HelmMappingRuleProfileResponse(dict):
    """
    Helm mapping rule profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helmPackageVersion":
            suggest = "helm_package_version"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "releaseNamespace":
            suggest = "release_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HelmMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HelmMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HelmMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 helm_package_version: Optional[str] = None,
                 options: Optional['outputs.HelmMappingRuleProfileResponseOptions'] = None,
                 release_name: Optional[str] = None,
                 release_namespace: Optional[str] = None,
                 values: Optional[str] = None):
        """
        Helm mapping rule profile
        :param str helm_package_version: Helm package version.
        :param 'HelmMappingRuleProfileResponseOptions' options: The helm deployment options
        :param str release_name: Helm release name.
        :param str release_namespace: Helm release namespace.
        :param str values: Helm release values.
        """
        if helm_package_version is not None:
            pulumi.set(__self__, "helm_package_version", helm_package_version)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if release_namespace is not None:
            pulumi.set(__self__, "release_namespace", release_namespace)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="helmPackageVersion")
    def helm_package_version(self) -> Optional[str]:
        """
        Helm package version.
        """
        return pulumi.get(self, "helm_package_version")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.HelmMappingRuleProfileResponseOptions']:
        """
        The helm deployment options
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="releaseNamespace")
    def release_namespace(self) -> Optional[str]:
        """
        Helm release namespace.
        """
        return pulumi.get(self, "release_namespace")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Helm release values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class HelmMappingRuleProfileResponseOptions(dict):
    """
    The helm deployment options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installOptions":
            suggest = "install_options"
        elif key == "upgradeOptions":
            suggest = "upgrade_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HelmMappingRuleProfileResponseOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HelmMappingRuleProfileResponseOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HelmMappingRuleProfileResponseOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 install_options: Optional['outputs.HelmInstallOptionsResponse'] = None,
                 upgrade_options: Optional['outputs.HelmUpgradeOptionsResponse'] = None):
        """
        The helm deployment options
        :param 'HelmInstallOptionsResponse' install_options: The helm deployment install options
        :param 'HelmUpgradeOptionsResponse' upgrade_options: The helm deployment upgrade options
        """
        if install_options is not None:
            pulumi.set(__self__, "install_options", install_options)
        if upgrade_options is not None:
            pulumi.set(__self__, "upgrade_options", upgrade_options)

    @property
    @pulumi.getter(name="installOptions")
    def install_options(self) -> Optional['outputs.HelmInstallOptionsResponse']:
        """
        The helm deployment install options
        """
        return pulumi.get(self, "install_options")

    @property
    @pulumi.getter(name="upgradeOptions")
    def upgrade_options(self) -> Optional['outputs.HelmUpgradeOptionsResponse']:
        """
        The helm deployment upgrade options
        """
        return pulumi.get(self, "upgrade_options")


@pulumi.output_type
class HelmUpgradeOptionsResponse(dict):
    """
    The helm deployment install options
    """
    def __init__(__self__, *,
                 atomic: Optional[str] = None,
                 timeout: Optional[str] = None,
                 wait: Optional[str] = None):
        """
        The helm deployment install options
        :param str atomic: The helm deployment atomic options
        :param str timeout: The helm deployment timeout options
        :param str wait: The helm deployment wait options
        """
        if atomic is not None:
            pulumi.set(__self__, "atomic", atomic)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def atomic(self) -> Optional[str]:
        """
        The helm deployment atomic options
        """
        return pulumi.get(self, "atomic")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        The helm deployment timeout options
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def wait(self) -> Optional[str]:
        """
        The helm deployment wait options
        """
        return pulumi.get(self, "wait")


@pulumi.output_type
class ImageArtifactProfileResponse(dict):
    """
    Image artifact profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageName":
            suggest = "image_name"
        elif key == "imageVersion":
            suggest = "image_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_name: Optional[str] = None,
                 image_version: Optional[str] = None):
        """
        Image artifact profile.
        :param str image_name: Image name.
        :param str image_version: Image version.
        """
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        """
        Image name.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[str]:
        """
        Image version.
        """
        return pulumi.get(self, "image_version")


@pulumi.output_type
class ImageMappingRuleProfileResponse(dict):
    """
    Image mapping rule profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userConfiguration":
            suggest = "user_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_configuration: Optional[str] = None):
        """
        Image mapping rule profile
        :param str user_configuration: List of values.
        """
        if user_configuration is not None:
            pulumi.set(__self__, "user_configuration", user_configuration)

    @property
    @pulumi.getter(name="userConfiguration")
    def user_configuration(self) -> Optional[str]:
        """
        List of values.
        """
        return pulumi.get(self, "user_configuration")


@pulumi.output_type
class ImageReferenceResponse(dict):
    """
    The image reference properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactVersion":
            suggest = "exact_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_version: Optional[str] = None,
                 offer: Optional[str] = None,
                 publisher: Optional[str] = None,
                 sku: Optional[str] = None,
                 version: Optional[str] = None):
        """
        The image reference properties.
        :param str exact_version: Specifies in decimal numbers, the exact version of image used to create the virtual machine.
        :param str offer: Specifies the offer of the image used to create the virtual machine.
        :param str publisher: The image publisher.
        :param str sku: The image SKU.
        :param str version: Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
        """
        if exact_version is not None:
            pulumi.set(__self__, "exact_version", exact_version)
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="exactVersion")
    def exact_version(self) -> Optional[str]:
        """
        Specifies in decimal numbers, the exact version of image used to create the virtual machine.
        """
        return pulumi.get(self, "exact_version")

    @property
    @pulumi.getter
    def offer(self) -> Optional[str]:
        """
        Specifies the offer of the image used to create the virtual machine.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        The image publisher.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        The image SKU.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LinuxConfigurationResponse(dict):
    """
    Specifies the Linux operating system settings on the virtual machine.
    """
    def __init__(__self__, *,
                 ssh: Optional['outputs.SshConfigurationResponse'] = None):
        """
        Specifies the Linux operating system settings on the virtual machine.
        :param 'SshConfigurationResponse' ssh: Specifies the ssh key configuration for a Linux OS.
        """
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.SshConfigurationResponse']:
        """
        Specifies the ssh key configuration for a Linux OS.
        """
        return pulumi.get(self, "ssh")


@pulumi.output_type
class ManagedResourceGroupConfigurationResponse(dict):
    """
    Managed resource group configuration.
    """
    def __init__(__self__, *,
                 location: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Managed resource group configuration.
        :param str location: Managed resource group location.
        :param str name: Managed resource group name.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Managed resource group location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Managed resource group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ManifestArtifactFormatResponse(dict):
    """
    Manifest artifact properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactName":
            suggest = "artifact_name"
        elif key == "artifactType":
            suggest = "artifact_type"
        elif key == "artifactVersion":
            suggest = "artifact_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManifestArtifactFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManifestArtifactFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManifestArtifactFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_name: Optional[str] = None,
                 artifact_type: Optional[str] = None,
                 artifact_version: Optional[str] = None):
        """
        Manifest artifact properties.
        :param str artifact_name: The artifact name
        :param str artifact_type: The artifact type.
        :param str artifact_version: The artifact version.
        """
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)
        if artifact_type is not None:
            pulumi.set(__self__, "artifact_type", artifact_type)
        if artifact_version is not None:
            pulumi.set(__self__, "artifact_version", artifact_version)

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[str]:
        """
        The artifact name
        """
        return pulumi.get(self, "artifact_name")

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> Optional[str]:
        """
        The artifact type.
        """
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="artifactVersion")
    def artifact_version(self) -> Optional[str]:
        """
        The artifact version.
        """
        return pulumi.get(self, "artifact_version")


@pulumi.output_type
class NSDArtifactProfileResponse(dict):
    """
    Artifact profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactName":
            suggest = "artifact_name"
        elif key == "artifactStoreReference":
            suggest = "artifact_store_reference"
        elif key == "artifactVersion":
            suggest = "artifact_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NSDArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NSDArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NSDArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_name: Optional[str] = None,
                 artifact_store_reference: Optional['outputs.ReferencedResourceResponse'] = None,
                 artifact_version: Optional[str] = None):
        """
        Artifact profile properties.
        :param str artifact_name: Artifact name.
        :param 'ReferencedResourceResponse' artifact_store_reference: The artifact store resource id
        :param str artifact_version: Artifact version.
        """
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)
        if artifact_store_reference is not None:
            pulumi.set(__self__, "artifact_store_reference", artifact_store_reference)
        if artifact_version is not None:
            pulumi.set(__self__, "artifact_version", artifact_version)

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[str]:
        """
        Artifact name.
        """
        return pulumi.get(self, "artifact_name")

    @property
    @pulumi.getter(name="artifactStoreReference")
    def artifact_store_reference(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The artifact store resource id
        """
        return pulumi.get(self, "artifact_store_reference")

    @property
    @pulumi.getter(name="artifactVersion")
    def artifact_version(self) -> Optional[str]:
        """
        Artifact version.
        """
        return pulumi.get(self, "artifact_version")


@pulumi.output_type
class NetworkFunctionDefinitionGroupPropertiesFormatResponse(dict):
    """
    Network function definition group properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFunctionDefinitionGroupPropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFunctionDefinitionGroupPropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFunctionDefinitionGroupPropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 description: Optional[str] = None):
        """
        Network function definition group properties.
        :param str provisioning_state: The provisioning state of the network function definition groups resource.
        :param str description: The network function definition group description.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the network function definition groups resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The network function definition group description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class NetworkFunctionDefinitionResourceElementTemplateDetailsResponse(dict):
    """
    The network function definition resource element template details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceElementType":
            suggest = "resource_element_type"
        elif key == "dependsOnProfile":
            suggest = "depends_on_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFunctionDefinitionResourceElementTemplateDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFunctionDefinitionResourceElementTemplateDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFunctionDefinitionResourceElementTemplateDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_element_type: str,
                 configuration: Optional['outputs.ArmResourceDefinitionResourceElementTemplateResponse'] = None,
                 depends_on_profile: Optional['outputs.DependsOnProfileResponse'] = None,
                 name: Optional[str] = None):
        """
        The network function definition resource element template details.
        :param str resource_element_type: The resource element template type.
               Expected value is 'NetworkFunctionDefinition'.
        :param 'ArmResourceDefinitionResourceElementTemplateResponse' configuration: The resource element template type.
        :param 'DependsOnProfileResponse' depends_on_profile: The depends on profile.
        :param str name: Name of the resource element template.
        """
        pulumi.set(__self__, "resource_element_type", 'NetworkFunctionDefinition')
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="resourceElementType")
    def resource_element_type(self) -> str:
        """
        The resource element template type.
        Expected value is 'NetworkFunctionDefinition'.
        """
        return pulumi.get(self, "resource_element_type")

    @property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.ArmResourceDefinitionResourceElementTemplateResponse']:
        """
        The resource element template type.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional['outputs.DependsOnProfileResponse']:
        """
        The depends on profile.
        """
        return pulumi.get(self, "depends_on_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the resource element template.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NetworkFunctionRoleConfigurationResponse(dict):
    """
    Network function role configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProfile":
            suggest = "custom_profile"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "osProfile":
            suggest = "os_profile"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "roleType":
            suggest = "role_type"
        elif key == "storageProfile":
            suggest = "storage_profile"
        elif key == "userDataParameters":
            suggest = "user_data_parameters"
        elif key == "userDataTemplate":
            suggest = "user_data_template"
        elif key == "virtualMachineSize":
            suggest = "virtual_machine_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFunctionRoleConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFunctionRoleConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFunctionRoleConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_profile: Optional['outputs.CustomProfileResponse'] = None,
                 network_interfaces: Optional[Sequence['outputs.NetworkInterfaceResponse']] = None,
                 os_profile: Optional['outputs.OsProfileResponse'] = None,
                 role_name: Optional[str] = None,
                 role_type: Optional[str] = None,
                 storage_profile: Optional['outputs.StorageProfileResponse'] = None,
                 user_data_parameters: Optional[Any] = None,
                 user_data_template: Optional[Any] = None,
                 virtual_machine_size: Optional[str] = None):
        """
        Network function role configuration.
        :param 'CustomProfileResponse' custom_profile: Specifies the custom settings for the virtual machine.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: The network interface configurations.
        :param 'OsProfileResponse' os_profile: Specifies the operating system settings for the role instance. This value can be updated during the deployment of network function.
        :param str role_name: The name of the network function role.
        :param str role_type: Role type.
        :param 'StorageProfileResponse' storage_profile: Specifies the storage settings for the virtual machine disks.
        :param Any user_data_parameters: The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
        :param Any user_data_template: The user data template for customers. This is a json schema template describing the format and data type of user data parameters.
        :param str virtual_machine_size: The size of the virtual machine.
        """
        if custom_profile is not None:
            pulumi.set(__self__, "custom_profile", custom_profile)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if os_profile is not None:
            pulumi.set(__self__, "os_profile", os_profile)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)
        if user_data_parameters is not None:
            pulumi.set(__self__, "user_data_parameters", user_data_parameters)
        if user_data_template is not None:
            pulumi.set(__self__, "user_data_template", user_data_template)
        if virtual_machine_size is not None:
            pulumi.set(__self__, "virtual_machine_size", virtual_machine_size)

    @property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> Optional['outputs.CustomProfileResponse']:
        """
        Specifies the custom settings for the virtual machine.
        """
        return pulumi.get(self, "custom_profile")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.NetworkInterfaceResponse']]:
        """
        The network interface configurations.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional['outputs.OsProfileResponse']:
        """
        Specifies the operating system settings for the role instance. This value can be updated during the deployment of network function.
        """
        return pulumi.get(self, "os_profile")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        """
        The name of the network function role.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[str]:
        """
        Role type.
        """
        return pulumi.get(self, "role_type")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional['outputs.StorageProfileResponse']:
        """
        Specifies the storage settings for the virtual machine disks.
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="userDataParameters")
    def user_data_parameters(self) -> Optional[Any]:
        """
        The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
        """
        return pulumi.get(self, "user_data_parameters")

    @property
    @pulumi.getter(name="userDataTemplate")
    def user_data_template(self) -> Optional[Any]:
        """
        The user data template for customers. This is a json schema template describing the format and data type of user data parameters.
        """
        return pulumi.get(self, "user_data_template")

    @property
    @pulumi.getter(name="virtualMachineSize")
    def virtual_machine_size(self) -> Optional[str]:
        """
        The size of the virtual machine.
        """
        return pulumi.get(self, "virtual_machine_size")


@pulumi.output_type
class NetworkFunctionTemplateResponse(dict):
    """
    The network function template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkFunctionRoleConfigurations":
            suggest = "network_function_role_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFunctionTemplateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFunctionTemplateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFunctionTemplateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_function_role_configurations: Optional[Sequence['outputs.NetworkFunctionRoleConfigurationResponse']] = None):
        """
        The network function template.
        :param Sequence['NetworkFunctionRoleConfigurationResponse'] network_function_role_configurations: An array of network function role definitions.
        """
        if network_function_role_configurations is not None:
            pulumi.set(__self__, "network_function_role_configurations", network_function_role_configurations)

    @property
    @pulumi.getter(name="networkFunctionRoleConfigurations")
    def network_function_role_configurations(self) -> Optional[Sequence['outputs.NetworkFunctionRoleConfigurationResponse']]:
        """
        An array of network function role definitions.
        """
        return pulumi.get(self, "network_function_role_configurations")


@pulumi.output_type
class NetworkFunctionUserConfigurationResponse(dict):
    """
    The network function user configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "osProfile":
            suggest = "os_profile"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "userDataParameters":
            suggest = "user_data_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFunctionUserConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFunctionUserConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFunctionUserConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interfaces: Optional[Sequence['outputs.NetworkInterfaceResponse']] = None,
                 os_profile: Optional['outputs.NetworkFunctionUserConfigurationResponseOsProfile'] = None,
                 role_name: Optional[str] = None,
                 user_data_parameters: Optional[Any] = None):
        """
        The network function user configuration.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: The network interface configuration.
        :param 'NetworkFunctionUserConfigurationResponseOsProfile' os_profile: Specifies the operating system settings for the role instance.
        :param str role_name: The name of the network function role.
        :param Any user_data_parameters: The user data parameters from the customer.
        """
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if os_profile is not None:
            pulumi.set(__self__, "os_profile", os_profile)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if user_data_parameters is not None:
            pulumi.set(__self__, "user_data_parameters", user_data_parameters)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.NetworkInterfaceResponse']]:
        """
        The network interface configuration.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional['outputs.NetworkFunctionUserConfigurationResponseOsProfile']:
        """
        Specifies the operating system settings for the role instance.
        """
        return pulumi.get(self, "os_profile")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        """
        The name of the network function role.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="userDataParameters")
    def user_data_parameters(self) -> Optional[Any]:
        """
        The user data parameters from the customer.
        """
        return pulumi.get(self, "user_data_parameters")


@pulumi.output_type
class NetworkFunctionUserConfigurationResponseOsProfile(dict):
    """
    Specifies the operating system settings for the role instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customData":
            suggest = "custom_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFunctionUserConfigurationResponseOsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFunctionUserConfigurationResponseOsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFunctionUserConfigurationResponseOsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_data: Optional[str] = None):
        """
        Specifies the operating system settings for the role instance.
        :param str custom_data: Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file. For more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
        """
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[str]:
        """
        Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file. For more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
        """
        return pulumi.get(self, "custom_data")


@pulumi.output_type
class NetworkInterfaceIPConfigurationResponse(dict):
    """
    Network interface IP configuration properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAllocationMethod":
            suggest = "ip_allocation_method"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceIPConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceIPConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceIPConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 ip_allocation_method: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 subnet: Optional[str] = None):
        """
        Network interface IP configuration properties.
        :param Sequence[str] dns_servers: The list of DNS servers IP addresses.
        :param str gateway: The value of the gateway.
        :param str ip_address: The value of the IP address.
        :param str ip_allocation_method: IP address allocation method.
        :param str ip_version: IP address version.
        :param str subnet: The value of the subnet.
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_allocation_method is not None:
            pulumi.set(__self__, "ip_allocation_method", ip_allocation_method)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        The list of DNS servers IP addresses.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The value of the gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The value of the IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipAllocationMethod")
    def ip_allocation_method(self) -> Optional[str]:
        """
        IP address allocation method.
        """
        return pulumi.get(self, "ip_allocation_method")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        """
        IP address version.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        The value of the subnet.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class NetworkInterfaceResponse(dict):
    """
    Network interface properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfigurations":
            suggest = "ip_configurations"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "networkInterfaceName":
            suggest = "network_interface_name"
        elif key == "vmSwitchType":
            suggest = "vm_switch_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_configurations: Optional[Sequence['outputs.NetworkInterfaceIPConfigurationResponse']] = None,
                 mac_address: Optional[str] = None,
                 network_interface_name: Optional[str] = None,
                 vm_switch_type: Optional[str] = None):
        """
        Network interface properties.
        :param Sequence['NetworkInterfaceIPConfigurationResponse'] ip_configurations: A list of IP configurations of the network interface.
        :param str mac_address: The MAC address of the network interface.
        :param str network_interface_name: The name of the network interface.
        :param str vm_switch_type: The type of the VM switch.
        """
        if ip_configurations is not None:
            pulumi.set(__self__, "ip_configurations", ip_configurations)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if network_interface_name is not None:
            pulumi.set(__self__, "network_interface_name", network_interface_name)
        if vm_switch_type is not None:
            pulumi.set(__self__, "vm_switch_type", vm_switch_type)

    @property
    @pulumi.getter(name="ipConfigurations")
    def ip_configurations(self) -> Optional[Sequence['outputs.NetworkInterfaceIPConfigurationResponse']]:
        """
        A list of IP configurations of the network interface.
        """
        return pulumi.get(self, "ip_configurations")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        The MAC address of the network interface.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkInterfaceName")
    def network_interface_name(self) -> Optional[str]:
        """
        The name of the network interface.
        """
        return pulumi.get(self, "network_interface_name")

    @property
    @pulumi.getter(name="vmSwitchType")
    def vm_switch_type(self) -> Optional[str]:
        """
        The type of the VM switch.
        """
        return pulumi.get(self, "vm_switch_type")


@pulumi.output_type
class NetworkServiceDesignGroupPropertiesFormatResponse(dict):
    """
    network service design group properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkServiceDesignGroupPropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkServiceDesignGroupPropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkServiceDesignGroupPropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 description: Optional[str] = None):
        """
        network service design group properties.
        :param str provisioning_state: The provisioning state of the network service design groups resource.
        :param str description: The network service design group description.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the network service design groups resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The network service design group description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class NetworkServiceDesignVersionPropertiesFormatResponse(dict):
    """
    network service design version properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "versionState":
            suggest = "version_state"
        elif key == "configurationGroupSchemaReferences":
            suggest = "configuration_group_schema_references"
        elif key == "nfvisFromSite":
            suggest = "nfvis_from_site"
        elif key == "resourceElementTemplates":
            suggest = "resource_element_templates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkServiceDesignVersionPropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkServiceDesignVersionPropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkServiceDesignVersionPropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 version_state: str,
                 configuration_group_schema_references: Optional[Mapping[str, 'outputs.ReferencedResourceResponse']] = None,
                 description: Optional[str] = None,
                 nfvis_from_site: Optional[Mapping[str, 'outputs.NfviDetailsResponse']] = None,
                 resource_element_templates: Optional[Sequence[Any]] = None):
        """
        network service design version properties.
        :param str provisioning_state: The provisioning state of the network service design version resource.
        :param str version_state: The network service design version state.
        :param Mapping[str, 'ReferencedResourceResponse'] configuration_group_schema_references: The configuration schemas to used to define the values.
        :param str description: The network service design version description.
        :param Mapping[str, 'NfviDetailsResponse'] nfvis_from_site: The nfvis from the site.
        :param Sequence[Union['ArmResourceDefinitionResourceElementTemplateDetailsResponse', 'NetworkFunctionDefinitionResourceElementTemplateDetailsResponse']] resource_element_templates: List of resource element template
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version_state", version_state)
        if configuration_group_schema_references is not None:
            pulumi.set(__self__, "configuration_group_schema_references", configuration_group_schema_references)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if nfvis_from_site is not None:
            pulumi.set(__self__, "nfvis_from_site", nfvis_from_site)
        if resource_element_templates is not None:
            pulumi.set(__self__, "resource_element_templates", resource_element_templates)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the network service design version resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="versionState")
    def version_state(self) -> str:
        """
        The network service design version state.
        """
        return pulumi.get(self, "version_state")

    @property
    @pulumi.getter(name="configurationGroupSchemaReferences")
    def configuration_group_schema_references(self) -> Optional[Mapping[str, 'outputs.ReferencedResourceResponse']]:
        """
        The configuration schemas to used to define the values.
        """
        return pulumi.get(self, "configuration_group_schema_references")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The network service design version description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="nfvisFromSite")
    def nfvis_from_site(self) -> Optional[Mapping[str, 'outputs.NfviDetailsResponse']]:
        """
        The nfvis from the site.
        """
        return pulumi.get(self, "nfvis_from_site")

    @property
    @pulumi.getter(name="resourceElementTemplates")
    def resource_element_templates(self) -> Optional[Sequence[Any]]:
        """
        List of resource element template
        """
        return pulumi.get(self, "resource_element_templates")


@pulumi.output_type
class NfviDetailsResponse(dict):
    """
    The nfvi details.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The nfvi details.
        :param str name: The nfvi name.
        :param str type: The nfvi type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The nfvi name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The nfvi type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OpenDeploymentResourceReferenceResponse(dict):
    """
    Non secret deployment resource id reference.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idType":
            suggest = "id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenDeploymentResourceReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenDeploymentResourceReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenDeploymentResourceReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id_type: str,
                 id: Optional[str] = None):
        """
        Non secret deployment resource id reference.
        :param str id_type: The resource reference arm id type.
               Expected value is 'Open'.
        :param str id: Resource ID.
        """
        pulumi.set(__self__, "id_type", 'Open')
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> str:
        """
        The resource reference arm id type.
        Expected value is 'Open'.
        """
        return pulumi.get(self, "id_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class OsDiskResponse(dict):
    """
    Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeGB":
            suggest = "disk_size_gb"
        elif key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_gb: Optional[int] = None,
                 name: Optional[str] = None,
                 os_type: Optional[str] = None):
        """
        Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
        :param int disk_size_gb: Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.
        :param str name: The VHD name.
        :param str os_type: The OS type.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[int]:
        """
        Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The VHD name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        The OS type.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class OsProfileResponse(dict):
    """
    Specifies the operating system settings for the role instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUsername":
            suggest = "admin_username"
        elif key == "customData":
            suggest = "custom_data"
        elif key == "customDataRequired":
            suggest = "custom_data_required"
        elif key == "linuxConfiguration":
            suggest = "linux_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_username: Optional[str] = None,
                 custom_data: Optional[str] = None,
                 custom_data_required: Optional[bool] = None,
                 linux_configuration: Optional['outputs.LinuxConfigurationResponse'] = None):
        """
        Specifies the operating system settings for the role instance.
        :param str admin_username: Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        :param str custom_data: Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file. For more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
        :param bool custom_data_required: Indicates if custom data is required to deploy this role.
        :param 'LinuxConfigurationResponse' linux_configuration: Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)
        if custom_data_required is None:
            custom_data_required = True
        if custom_data_required is not None:
            pulumi.set(__self__, "custom_data_required", custom_data_required)
        if linux_configuration is not None:
            pulumi.set(__self__, "linux_configuration", linux_configuration)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        """
        Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[str]:
        """
        Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file. For more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
        """
        return pulumi.get(self, "custom_data")

    @property
    @pulumi.getter(name="customDataRequired")
    def custom_data_required(self) -> Optional[bool]:
        """
        Indicates if custom data is required to deploy this role.
        """
        return pulumi.get(self, "custom_data_required")

    @property
    @pulumi.getter(name="linuxConfiguration")
    def linux_configuration(self) -> Optional['outputs.LinuxConfigurationResponse']:
        """
        Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "linux_configuration")


@pulumi.output_type
class PublisherPropertiesFormatResponse(dict):
    """
    publisher properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublisherPropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublisherPropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublisherPropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 scope: Optional[str] = None):
        """
        publisher properties.
        :param str provisioning_state: The provisioning state of the publisher resource.
        :param str scope: The publisher scope.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the publisher resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The publisher scope.
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class ReferencedResourceResponse(dict):
    """
    Reference to another resource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Reference to another resource.
        :param str id: Resource ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SecretDeploymentResourceReferenceResponse(dict):
    """
    Secret deployment resource id reference.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idType":
            suggest = "id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretDeploymentResourceReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretDeploymentResourceReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretDeploymentResourceReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id_type: str):
        """
        Secret deployment resource id reference.
        :param str id_type: The resource reference arm id type.
               Expected value is 'Secret'.
        """
        pulumi.set(__self__, "id_type", 'Secret')

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> str:
        """
        The resource reference arm id type.
        Expected value is 'Secret'.
        """
        return pulumi.get(self, "id_type")


@pulumi.output_type
class SiteNetworkServicePropertiesFormatResponse(dict):
    """
    Site network service properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastStateConfigurationGroupValueReferences":
            suggest = "last_state_configuration_group_value_references"
        elif key == "lastStateNetworkServiceDesignVersionName":
            suggest = "last_state_network_service_design_version_name"
        elif key == "networkServiceDesignGroupName":
            suggest = "network_service_design_group_name"
        elif key == "networkServiceDesignVersionName":
            suggest = "network_service_design_version_name"
        elif key == "networkServiceDesignVersionOfferingLocation":
            suggest = "network_service_design_version_offering_location"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "publisherName":
            suggest = "publisher_name"
        elif key == "publisherScope":
            suggest = "publisher_scope"
        elif key == "desiredStateConfigurationGroupValueReferences":
            suggest = "desired_state_configuration_group_value_references"
        elif key == "managedResourceGroupConfiguration":
            suggest = "managed_resource_group_configuration"
        elif key == "networkServiceDesignVersionResourceReference":
            suggest = "network_service_design_version_resource_reference"
        elif key == "siteReference":
            suggest = "site_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteNetworkServicePropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteNetworkServicePropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteNetworkServicePropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_state_configuration_group_value_references: Mapping[str, 'outputs.ReferencedResourceResponse'],
                 last_state_network_service_design_version_name: str,
                 network_service_design_group_name: str,
                 network_service_design_version_name: str,
                 network_service_design_version_offering_location: str,
                 provisioning_state: str,
                 publisher_name: str,
                 publisher_scope: str,
                 desired_state_configuration_group_value_references: Optional[Mapping[str, 'outputs.ReferencedResourceResponse']] = None,
                 managed_resource_group_configuration: Optional['outputs.ManagedResourceGroupConfigurationResponse'] = None,
                 network_service_design_version_resource_reference: Optional[Any] = None,
                 site_reference: Optional['outputs.ReferencedResourceResponse'] = None):
        """
        Site network service properties.
        :param Mapping[str, 'ReferencedResourceResponse'] last_state_configuration_group_value_references: The last state of the site network service resource.
        :param str last_state_network_service_design_version_name: The network service design version for the site network service.
        :param str network_service_design_group_name: The network service design group name for the site network service.
        :param str network_service_design_version_name: The network service design version for the site network service.
        :param str network_service_design_version_offering_location: The location of the network service design offering.
        :param str provisioning_state: The provisioning state of the site network service resource.
        :param str publisher_name: The publisher name for the site network service.
        :param str publisher_scope: The scope of the publisher.
        :param Mapping[str, 'ReferencedResourceResponse'] desired_state_configuration_group_value_references: The goal state of the site network service resource. This has references to the configuration group value objects that describe the desired state of the site network service.
        :param 'ManagedResourceGroupConfigurationResponse' managed_resource_group_configuration: Managed resource group configuration.
        :param Union['OpenDeploymentResourceReferenceResponse', 'SecretDeploymentResourceReferenceResponse'] network_service_design_version_resource_reference: The network service design version resource reference.
        :param 'ReferencedResourceResponse' site_reference: The site details
        """
        pulumi.set(__self__, "last_state_configuration_group_value_references", last_state_configuration_group_value_references)
        pulumi.set(__self__, "last_state_network_service_design_version_name", last_state_network_service_design_version_name)
        pulumi.set(__self__, "network_service_design_group_name", network_service_design_group_name)
        pulumi.set(__self__, "network_service_design_version_name", network_service_design_version_name)
        pulumi.set(__self__, "network_service_design_version_offering_location", network_service_design_version_offering_location)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "publisher_scope", publisher_scope)
        if desired_state_configuration_group_value_references is not None:
            pulumi.set(__self__, "desired_state_configuration_group_value_references", desired_state_configuration_group_value_references)
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        if network_service_design_version_resource_reference is not None:
            pulumi.set(__self__, "network_service_design_version_resource_reference", network_service_design_version_resource_reference)
        if site_reference is not None:
            pulumi.set(__self__, "site_reference", site_reference)

    @property
    @pulumi.getter(name="lastStateConfigurationGroupValueReferences")
    def last_state_configuration_group_value_references(self) -> Mapping[str, 'outputs.ReferencedResourceResponse']:
        """
        The last state of the site network service resource.
        """
        return pulumi.get(self, "last_state_configuration_group_value_references")

    @property
    @pulumi.getter(name="lastStateNetworkServiceDesignVersionName")
    def last_state_network_service_design_version_name(self) -> str:
        """
        The network service design version for the site network service.
        """
        return pulumi.get(self, "last_state_network_service_design_version_name")

    @property
    @pulumi.getter(name="networkServiceDesignGroupName")
    def network_service_design_group_name(self) -> str:
        """
        The network service design group name for the site network service.
        """
        return pulumi.get(self, "network_service_design_group_name")

    @property
    @pulumi.getter(name="networkServiceDesignVersionName")
    def network_service_design_version_name(self) -> str:
        """
        The network service design version for the site network service.
        """
        return pulumi.get(self, "network_service_design_version_name")

    @property
    @pulumi.getter(name="networkServiceDesignVersionOfferingLocation")
    def network_service_design_version_offering_location(self) -> str:
        """
        The location of the network service design offering.
        """
        return pulumi.get(self, "network_service_design_version_offering_location")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the site network service resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> str:
        """
        The publisher name for the site network service.
        """
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter(name="publisherScope")
    def publisher_scope(self) -> str:
        """
        The scope of the publisher.
        """
        return pulumi.get(self, "publisher_scope")

    @property
    @pulumi.getter(name="desiredStateConfigurationGroupValueReferences")
    def desired_state_configuration_group_value_references(self) -> Optional[Mapping[str, 'outputs.ReferencedResourceResponse']]:
        """
        The goal state of the site network service resource. This has references to the configuration group value objects that describe the desired state of the site network service.
        """
        return pulumi.get(self, "desired_state_configuration_group_value_references")

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional['outputs.ManagedResourceGroupConfigurationResponse']:
        """
        Managed resource group configuration.
        """
        return pulumi.get(self, "managed_resource_group_configuration")

    @property
    @pulumi.getter(name="networkServiceDesignVersionResourceReference")
    def network_service_design_version_resource_reference(self) -> Optional[Any]:
        """
        The network service design version resource reference.
        """
        return pulumi.get(self, "network_service_design_version_resource_reference")

    @property
    @pulumi.getter(name="siteReference")
    def site_reference(self) -> Optional['outputs.ReferencedResourceResponse']:
        """
        The site details
        """
        return pulumi.get(self, "site_reference")


@pulumi.output_type
class SitePropertiesFormatResponse(dict):
    """
    Site properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "siteNetworkServiceReferences":
            suggest = "site_network_service_references"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SitePropertiesFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SitePropertiesFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SitePropertiesFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 site_network_service_references: Sequence['outputs.ReferencedResourceResponse'],
                 nfvis: Optional[Sequence[Any]] = None):
        """
        Site properties.
        :param str provisioning_state: The provisioning state of the site resource. **TODO**: Confirm if this is needed.
        :param Sequence['ReferencedResourceResponse'] site_network_service_references: The list of site network services on the site.
        :param Sequence[Union['AzureArcK8sClusterNFVIDetailsResponse', 'AzureCoreNFVIDetailsResponse', 'AzureOperatorNexusClusterNFVIDetailsResponse']] nfvis: List of NFVIs
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "site_network_service_references", site_network_service_references)
        if nfvis is not None:
            pulumi.set(__self__, "nfvis", nfvis)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the site resource. **TODO**: Confirm if this is needed.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="siteNetworkServiceReferences")
    def site_network_service_references(self) -> Sequence['outputs.ReferencedResourceResponse']:
        """
        The list of site network services on the site.
        """
        return pulumi.get(self, "site_network_service_references")

    @property
    @pulumi.getter
    def nfvis(self) -> Optional[Sequence[Any]]:
        """
        List of NFVIs
        """
        return pulumi.get(self, "nfvis")


@pulumi.output_type
class SkuResponse(dict):
    """
    Sku, to be associated with a SiteNetworkService.
    """
    def __init__(__self__, *,
                 name: str,
                 tier: str):
        """
        Sku, to be associated with a SiteNetworkService.
        :param str name: Name of this Sku
        :param str tier: The SKU tier based on the SKU name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this Sku
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The SKU tier based on the SKU name.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SshConfigurationResponse(dict):
    """
    SSH configuration for Linux based VMs running on Azure
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.SshPublicKeyResponse']] = None):
        """
        SSH configuration for Linux based VMs running on Azure
        :param Sequence['SshPublicKeyResponse'] public_keys: The list of SSH public keys used to authenticate with linux based VMs.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.SshPublicKeyResponse']]:
        """
        The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class SshPublicKeyResponse(dict):
    """
    Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshPublicKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[str] = None,
                 path: Optional[str] = None):
        """
        Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
        :param str key_data: SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        :param str path: Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    Specifies the storage settings for the virtual machine disks.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "imageReference":
            suggest = "image_reference"
        elif key == "osDisk":
            suggest = "os_disk"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.DataDiskResponse']] = None,
                 image_reference: Optional['outputs.ImageReferenceResponse'] = None,
                 os_disk: Optional['outputs.OsDiskResponse'] = None):
        """
        Specifies the storage settings for the virtual machine disks.
        :param Sequence['DataDiskResponse'] data_disks: Specifies the parameters that are used to add a data disk to a virtual machine.
        :param 'ImageReferenceResponse' image_reference: The image reference properties.
        :param 'OsDiskResponse' os_disk: Specifies information about the operating system disk used by the virtual machine.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.DataDiskResponse']]:
        """
        Specifies the parameters that are used to add a data disk to a virtual machine.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional['outputs.ImageReferenceResponse']:
        """
        The image reference properties.
        """
        return pulumi.get(self, "image_reference")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional['outputs.OsDiskResponse']:
        """
        Specifies information about the operating system disk used by the virtual machine.
        """
        return pulumi.get(self, "os_disk")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    Reference to another sub resource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Reference to another sub resource.
        :param str id: Resource ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VhdImageArtifactProfileResponse(dict):
    """
    Vhd artifact profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vhdName":
            suggest = "vhd_name"
        elif key == "vhdVersion":
            suggest = "vhd_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VhdImageArtifactProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VhdImageArtifactProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VhdImageArtifactProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vhd_name: Optional[str] = None,
                 vhd_version: Optional[str] = None):
        """
        Vhd artifact profile.
        :param str vhd_name: Vhd name.
        :param str vhd_version: Vhd version.
        """
        if vhd_name is not None:
            pulumi.set(__self__, "vhd_name", vhd_name)
        if vhd_version is not None:
            pulumi.set(__self__, "vhd_version", vhd_version)

    @property
    @pulumi.getter(name="vhdName")
    def vhd_name(self) -> Optional[str]:
        """
        Vhd name.
        """
        return pulumi.get(self, "vhd_name")

    @property
    @pulumi.getter(name="vhdVersion")
    def vhd_version(self) -> Optional[str]:
        """
        Vhd version.
        """
        return pulumi.get(self, "vhd_version")


@pulumi.output_type
class VhdImageMappingRuleProfileResponse(dict):
    """
    Vhd mapping rule profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userConfiguration":
            suggest = "user_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VhdImageMappingRuleProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VhdImageMappingRuleProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VhdImageMappingRuleProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_configuration: Optional[str] = None):
        """
        Vhd mapping rule profile
        :param str user_configuration: List of values.
        """
        if user_configuration is not None:
            pulumi.set(__self__, "user_configuration", user_configuration)

    @property
    @pulumi.getter(name="userConfiguration")
    def user_configuration(self) -> Optional[str]:
        """
        List of values.
        """
        return pulumi.get(self, "user_configuration")


@pulumi.output_type
class VirtualNetworkFunctionNetworkFunctionDefinitionVersionResponse(dict):
    """
    Virtual network function network function definition version properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkFunctionType":
            suggest = "network_function_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "versionState":
            suggest = "version_state"
        elif key == "deployParameters":
            suggest = "deploy_parameters"
        elif key == "networkFunctionTemplate":
            suggest = "network_function_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkFunctionNetworkFunctionDefinitionVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkFunctionNetworkFunctionDefinitionVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkFunctionNetworkFunctionDefinitionVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_function_type: str,
                 provisioning_state: str,
                 version_state: str,
                 deploy_parameters: Optional[str] = None,
                 description: Optional[str] = None,
                 network_function_template: Optional[Any] = None):
        """
        Virtual network function network function definition version properties.
        :param str network_function_type: The network function type.
               Expected value is 'VirtualNetworkFunction'.
        :param str provisioning_state: The provisioning state of the network function definition version resource.
        :param str version_state: The network function definition version state.
        :param str deploy_parameters: The deployment parameters of the network function definition version.
        :param str description: The network function definition version description.
        :param Union['AzureCoreNetworkFunctionTemplateResponse', 'AzureOperatorNexusNetworkFunctionTemplateResponse'] network_function_template: Virtual network function template.
        """
        pulumi.set(__self__, "network_function_type", 'VirtualNetworkFunction')
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version_state", version_state)
        if deploy_parameters is not None:
            pulumi.set(__self__, "deploy_parameters", deploy_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if network_function_template is not None:
            pulumi.set(__self__, "network_function_template", network_function_template)

    @property
    @pulumi.getter(name="networkFunctionType")
    def network_function_type(self) -> str:
        """
        The network function type.
        Expected value is 'VirtualNetworkFunction'.
        """
        return pulumi.get(self, "network_function_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the network function definition version resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="versionState")
    def version_state(self) -> str:
        """
        The network function definition version state.
        """
        return pulumi.get(self, "version_state")

    @property
    @pulumi.getter(name="deployParameters")
    def deploy_parameters(self) -> Optional[str]:
        """
        The deployment parameters of the network function definition version.
        """
        return pulumi.get(self, "deploy_parameters")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The network function definition version description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="networkFunctionTemplate")
    def network_function_template(self) -> Optional[Any]:
        """
        Virtual network function template.
        """
        return pulumi.get(self, "network_function_template")


