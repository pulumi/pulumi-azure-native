# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ArmResourceDefinitionResourceElementTemplateDetailsArgs',
    'ArmResourceDefinitionResourceElementTemplateArgs',
    'ArmTemplateArtifactProfileArgs',
    'ArmTemplateMappingRuleProfileArgs',
    'ArtifactManifestPropertiesFormatArgs',
    'ArtifactStorePropertiesFormatManagedResourceGroupConfigurationArgs',
    'ArtifactStorePropertiesFormatArgs',
    'AzureArcK8sClusterNFVIDetailsArgs',
    'AzureArcKubernetesArtifactProfileArgs',
    'AzureArcKubernetesDeployMappingRuleProfileArgs',
    'AzureArcKubernetesHelmApplicationArgs',
    'AzureArcKubernetesNetworkFunctionTemplateArgs',
    'AzureCoreArmTemplateArtifactProfileArgs',
    'AzureCoreArmTemplateDeployMappingRuleProfileArgs',
    'AzureCoreNFVIDetailsArgs',
    'AzureCoreNetworkFunctionArmTemplateApplicationArgs',
    'AzureCoreNetworkFunctionTemplateArgs',
    'AzureCoreNetworkFunctionVhdApplicationArgs',
    'AzureCoreVhdImageArtifactProfileArgs',
    'AzureCoreVhdImageDeployMappingRuleProfileArgs',
    'AzureOperatorNexusArmTemplateArtifactProfileArgs',
    'AzureOperatorNexusArmTemplateDeployMappingRuleProfileArgs',
    'AzureOperatorNexusClusterNFVIDetailsArgs',
    'AzureOperatorNexusImageArtifactProfileArgs',
    'AzureOperatorNexusImageDeployMappingRuleProfileArgs',
    'AzureOperatorNexusNetworkFunctionArmTemplateApplicationArgs',
    'AzureOperatorNexusNetworkFunctionImageApplicationArgs',
    'AzureOperatorNexusNetworkFunctionTemplateArgs',
    'ConfigurationGroupSchemaPropertiesFormatArgs',
    'ConfigurationValueWithSecretsArgs',
    'ConfigurationValueWithoutSecretsArgs',
    'ContainerizedNetworkFunctionDefinitionVersionArgs',
    'DependsOnProfileArgs',
    'HelmArtifactProfileArgs',
    'HelmInstallOptionsArgs',
    'HelmMappingRuleProfileOptionsArgs',
    'HelmMappingRuleProfileArgs',
    'HelmUpgradeOptionsArgs',
    'ImageArtifactProfileArgs',
    'ImageMappingRuleProfileArgs',
    'ManagedResourceGroupConfigurationArgs',
    'ManagedServiceIdentityArgs',
    'ManifestArtifactFormatArgs',
    'NSDArtifactProfileArgs',
    'NetworkFunctionDefinitionGroupPropertiesFormatArgs',
    'NetworkFunctionDefinitionResourceElementTemplateDetailsArgs',
    'NetworkFunctionValueWithSecretsArgs',
    'NetworkFunctionValueWithoutSecretsArgs',
    'NetworkServiceDesignGroupPropertiesFormatArgs',
    'NetworkServiceDesignVersionPropertiesFormatArgs',
    'NfviDetailsArgs',
    'OpenDeploymentResourceReferenceArgs',
    'PublisherPropertiesFormatArgs',
    'ReferencedResourceArgs',
    'SecretDeploymentResourceReferenceArgs',
    'SiteNetworkServicePropertiesFormatArgs',
    'SitePropertiesFormatArgs',
    'SkuArgs',
    'VhdImageArtifactProfileArgs',
    'VhdImageMappingRuleProfileArgs',
    'VirtualNetworkFunctionNetworkFunctionDefinitionVersionArgs',
]

@pulumi.input_type
class ArmResourceDefinitionResourceElementTemplateDetailsArgs:
    def __init__(__self__, *,
                 resource_element_type: pulumi.Input[str],
                 configuration: Optional[pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The arm resource definition resource element template details.
        :param pulumi.Input[str] resource_element_type: The resource element template type.
               Expected value is 'ArmResourceDefinition'.
        :param pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs'] configuration: The resource element template type.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: The depends on profile.
        :param pulumi.Input[str] name: Name of the resource element template.
        """
        pulumi.set(__self__, "resource_element_type", 'ArmResourceDefinition')
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="resourceElementType")
    def resource_element_type(self) -> pulumi.Input[str]:
        """
        The resource element template type.
        Expected value is 'ArmResourceDefinition'.
        """
        return pulumi.get(self, "resource_element_type")

    @resource_element_type.setter
    def resource_element_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_element_type", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs']]:
        """
        The resource element template type.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        The depends on profile.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource element template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ArmResourceDefinitionResourceElementTemplateArgs:
    def __init__(__self__, *,
                 artifact_profile: Optional[pulumi.Input['NSDArtifactProfileArgs']] = None,
                 parameter_values: Optional[pulumi.Input[str]] = None,
                 template_type: Optional[pulumi.Input[Union[str, 'TemplateType']]] = None):
        """
        The arm template RE.
        :param pulumi.Input['NSDArtifactProfileArgs'] artifact_profile: Artifact profile properties.
        :param pulumi.Input[str] parameter_values: Name and value pairs that define the parameter values. It can be  a well formed escaped JSON string.
        :param pulumi.Input[Union[str, 'TemplateType']] template_type: The template type.
        """
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional[pulumi.Input['NSDArtifactProfileArgs']]:
        """
        Artifact profile properties.
        """
        return pulumi.get(self, "artifact_profile")

    @artifact_profile.setter
    def artifact_profile(self, value: Optional[pulumi.Input['NSDArtifactProfileArgs']]):
        pulumi.set(self, "artifact_profile", value)

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input[str]]:
        """
        Name and value pairs that define the parameter values. It can be  a well formed escaped JSON string.
        """
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_values", value)

    @property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[Union[str, 'TemplateType']]]:
        """
        The template type.
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[Union[str, 'TemplateType']]]):
        pulumi.set(self, "template_type", value)


@pulumi.input_type
class ArmTemplateArtifactProfileArgs:
    def __init__(__self__, *,
                 template_name: Optional[pulumi.Input[str]] = None,
                 template_version: Optional[pulumi.Input[str]] = None):
        """
        Template artifact profile.
        :param pulumi.Input[str] template_name: Template name.
        :param pulumi.Input[str] template_version: Template version.
        """
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if template_version is not None:
            pulumi.set(__self__, "template_version", template_version)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[pulumi.Input[str]]:
        """
        Template version.
        """
        return pulumi.get(self, "template_version")

    @template_version.setter
    def template_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_version", value)


@pulumi.input_type
class ArmTemplateMappingRuleProfileArgs:
    def __init__(__self__, *,
                 template_parameters: Optional[pulumi.Input[str]] = None):
        """
        Template mapping rule profile
        :param pulumi.Input[str] template_parameters: List of template parameters.
        """
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        List of template parameters.
        """
        return pulumi.get(self, "template_parameters")

    @template_parameters.setter
    def template_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_parameters", value)


@pulumi.input_type
class ArtifactManifestPropertiesFormatArgs:
    def __init__(__self__, *,
                 artifacts: Optional[pulumi.Input[Sequence[pulumi.Input['ManifestArtifactFormatArgs']]]] = None):
        """
        Artifact manifest properties.
        :param pulumi.Input[Sequence[pulumi.Input['ManifestArtifactFormatArgs']]] artifacts: The artifacts list.
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManifestArtifactFormatArgs']]]]:
        """
        The artifacts list.
        """
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManifestArtifactFormatArgs']]]]):
        pulumi.set(self, "artifacts", value)


@pulumi.input_type
class ArtifactStorePropertiesFormatManagedResourceGroupConfigurationArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] location: The managed resource group location.
        :param pulumi.Input[str] name: The managed resource group name.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The managed resource group location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The managed resource group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ArtifactStorePropertiesFormatArgs:
    def __init__(__self__, *,
                 managed_resource_group_configuration: Optional[pulumi.Input['ArtifactStorePropertiesFormatManagedResourceGroupConfigurationArgs']] = None,
                 replication_strategy: Optional[pulumi.Input[Union[str, 'ArtifactReplicationStrategy']]] = None,
                 store_type: Optional[pulumi.Input[Union[str, 'ArtifactStoreType']]] = None):
        """
        Artifact store properties.
        :param pulumi.Input[Union[str, 'ArtifactReplicationStrategy']] replication_strategy: The replication strategy.
        :param pulumi.Input[Union[str, 'ArtifactStoreType']] store_type: The artifact store type.
        """
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        if replication_strategy is not None:
            pulumi.set(__self__, "replication_strategy", replication_strategy)
        if store_type is not None:
            pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional[pulumi.Input['ArtifactStorePropertiesFormatManagedResourceGroupConfigurationArgs']]:
        return pulumi.get(self, "managed_resource_group_configuration")

    @managed_resource_group_configuration.setter
    def managed_resource_group_configuration(self, value: Optional[pulumi.Input['ArtifactStorePropertiesFormatManagedResourceGroupConfigurationArgs']]):
        pulumi.set(self, "managed_resource_group_configuration", value)

    @property
    @pulumi.getter(name="replicationStrategy")
    def replication_strategy(self) -> Optional[pulumi.Input[Union[str, 'ArtifactReplicationStrategy']]]:
        """
        The replication strategy.
        """
        return pulumi.get(self, "replication_strategy")

    @replication_strategy.setter
    def replication_strategy(self, value: Optional[pulumi.Input[Union[str, 'ArtifactReplicationStrategy']]]):
        pulumi.set(self, "replication_strategy", value)

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> Optional[pulumi.Input[Union[str, 'ArtifactStoreType']]]:
        """
        The artifact store type.
        """
        return pulumi.get(self, "store_type")

    @store_type.setter
    def store_type(self, value: Optional[pulumi.Input[Union[str, 'ArtifactStoreType']]]):
        pulumi.set(self, "store_type", value)


@pulumi.input_type
class AzureArcK8sClusterNFVIDetailsArgs:
    def __init__(__self__, *,
                 nfvi_type: pulumi.Input[str],
                 custom_location_reference: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The AzureArcK8sCluster NFVI detail.
        :param pulumi.Input[str] nfvi_type: The NFVI type.
               Expected value is 'AzureArcKubernetes'.
        :param pulumi.Input['ReferencedResourceArgs'] custom_location_reference: The reference to the custom location.
        :param pulumi.Input[str] name: Name of the nfvi.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureArcKubernetes')
        if custom_location_reference is not None:
            pulumi.set(__self__, "custom_location_reference", custom_location_reference)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> pulumi.Input[str]:
        """
        The NFVI type.
        Expected value is 'AzureArcKubernetes'.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="customLocationReference")
    def custom_location_reference(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to the custom location.
        """
        return pulumi.get(self, "custom_location_reference")

    @custom_location_reference.setter
    def custom_location_reference(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "custom_location_reference", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the nfvi.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureArcKubernetesArtifactProfileArgs:
    def __init__(__self__, *,
                 artifact_store: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 helm_artifact_profile: Optional[pulumi.Input['HelmArtifactProfileArgs']] = None):
        """
        Azure arc kubernetes artifact profile properties.
        :param pulumi.Input['ReferencedResourceArgs'] artifact_store: The reference to artifact store.
        :param pulumi.Input['HelmArtifactProfileArgs'] helm_artifact_profile: Helm artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if helm_artifact_profile is not None:
            pulumi.set(__self__, "helm_artifact_profile", helm_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @artifact_store.setter
    def artifact_store(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "artifact_store", value)

    @property
    @pulumi.getter(name="helmArtifactProfile")
    def helm_artifact_profile(self) -> Optional[pulumi.Input['HelmArtifactProfileArgs']]:
        """
        Helm artifact profile.
        """
        return pulumi.get(self, "helm_artifact_profile")

    @helm_artifact_profile.setter
    def helm_artifact_profile(self, value: Optional[pulumi.Input['HelmArtifactProfileArgs']]):
        pulumi.set(self, "helm_artifact_profile", value)


@pulumi.input_type
class AzureArcKubernetesDeployMappingRuleProfileArgs:
    def __init__(__self__, *,
                 application_enablement: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]] = None,
                 helm_mapping_rule_profile: Optional[pulumi.Input['HelmMappingRuleProfileArgs']] = None):
        """
        Azure arc kubernetes deploy mapping rule profile.
        :param pulumi.Input[Union[str, 'ApplicationEnablement']] application_enablement: The application enablement.
        :param pulumi.Input['HelmMappingRuleProfileArgs'] helm_mapping_rule_profile: The helm mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if helm_mapping_rule_profile is not None:
            pulumi.set(__self__, "helm_mapping_rule_profile", helm_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @application_enablement.setter
    def application_enablement(self, value: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]):
        pulumi.set(self, "application_enablement", value)

    @property
    @pulumi.getter(name="helmMappingRuleProfile")
    def helm_mapping_rule_profile(self) -> Optional[pulumi.Input['HelmMappingRuleProfileArgs']]:
        """
        The helm mapping rule profile.
        """
        return pulumi.get(self, "helm_mapping_rule_profile")

    @helm_mapping_rule_profile.setter
    def helm_mapping_rule_profile(self, value: Optional[pulumi.Input['HelmMappingRuleProfileArgs']]):
        pulumi.set(self, "helm_mapping_rule_profile", value)


@pulumi.input_type
class AzureArcKubernetesHelmApplicationArgs:
    def __init__(__self__, *,
                 artifact_type: pulumi.Input[str],
                 artifact_profile: Optional[pulumi.Input['AzureArcKubernetesArtifactProfileArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 deploy_parameters_mapping_rule_profile: Optional[pulumi.Input['AzureArcKubernetesDeployMappingRuleProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Azure arc kubernetes helm application configurations.
        :param pulumi.Input[str] artifact_type: The artifact type.
               Expected value is 'HelmPackage'.
        :param pulumi.Input['AzureArcKubernetesArtifactProfileArgs'] artifact_profile: Azure arc kubernetes artifact profile.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: Depends on profile definition.
        :param pulumi.Input['AzureArcKubernetesDeployMappingRuleProfileArgs'] deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param pulumi.Input[str] name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'HelmPackage')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> pulumi.Input[str]:
        """
        The artifact type.
        Expected value is 'HelmPackage'.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_type", value)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional[pulumi.Input['AzureArcKubernetesArtifactProfileArgs']]:
        """
        Azure arc kubernetes artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @artifact_profile.setter
    def artifact_profile(self, value: Optional[pulumi.Input['AzureArcKubernetesArtifactProfileArgs']]):
        pulumi.set(self, "artifact_profile", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional[pulumi.Input['AzureArcKubernetesDeployMappingRuleProfileArgs']]:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @deploy_parameters_mapping_rule_profile.setter
    def deploy_parameters_mapping_rule_profile(self, value: Optional[pulumi.Input['AzureArcKubernetesDeployMappingRuleProfileArgs']]):
        pulumi.set(self, "deploy_parameters_mapping_rule_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureArcKubernetesNetworkFunctionTemplateArgs:
    def __init__(__self__, *,
                 nfvi_type: pulumi.Input[str],
                 network_function_applications: Optional[pulumi.Input[Sequence[pulumi.Input['AzureArcKubernetesHelmApplicationArgs']]]] = None):
        """
        Azure Arc kubernetes network function template.
        :param pulumi.Input[str] nfvi_type: The network function type.
               Expected value is 'AzureArcKubernetes'.
        :param pulumi.Input[Sequence[pulumi.Input['AzureArcKubernetesHelmApplicationArgs']]] network_function_applications: Network function applications.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureArcKubernetes')
        if network_function_applications is not None:
            pulumi.set(__self__, "network_function_applications", network_function_applications)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> pulumi.Input[str]:
        """
        The network function type.
        Expected value is 'AzureArcKubernetes'.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="networkFunctionApplications")
    def network_function_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureArcKubernetesHelmApplicationArgs']]]]:
        """
        Network function applications.
        """
        return pulumi.get(self, "network_function_applications")

    @network_function_applications.setter
    def network_function_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureArcKubernetesHelmApplicationArgs']]]]):
        pulumi.set(self, "network_function_applications", value)


@pulumi.input_type
class AzureCoreArmTemplateArtifactProfileArgs:
    def __init__(__self__, *,
                 artifact_store: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 template_artifact_profile: Optional[pulumi.Input['ArmTemplateArtifactProfileArgs']] = None):
        """
        Azure template artifact profile properties.
        :param pulumi.Input['ReferencedResourceArgs'] artifact_store: The reference to artifact store.
        :param pulumi.Input['ArmTemplateArtifactProfileArgs'] template_artifact_profile: Template artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if template_artifact_profile is not None:
            pulumi.set(__self__, "template_artifact_profile", template_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @artifact_store.setter
    def artifact_store(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "artifact_store", value)

    @property
    @pulumi.getter(name="templateArtifactProfile")
    def template_artifact_profile(self) -> Optional[pulumi.Input['ArmTemplateArtifactProfileArgs']]:
        """
        Template artifact profile.
        """
        return pulumi.get(self, "template_artifact_profile")

    @template_artifact_profile.setter
    def template_artifact_profile(self, value: Optional[pulumi.Input['ArmTemplateArtifactProfileArgs']]):
        pulumi.set(self, "template_artifact_profile", value)


@pulumi.input_type
class AzureCoreArmTemplateDeployMappingRuleProfileArgs:
    def __init__(__self__, *,
                 application_enablement: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]] = None,
                 template_mapping_rule_profile: Optional[pulumi.Input['ArmTemplateMappingRuleProfileArgs']] = None):
        """
        Azure template deploy mapping rule profile.
        :param pulumi.Input[Union[str, 'ApplicationEnablement']] application_enablement: The application enablement.
        :param pulumi.Input['ArmTemplateMappingRuleProfileArgs'] template_mapping_rule_profile: The template mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if template_mapping_rule_profile is not None:
            pulumi.set(__self__, "template_mapping_rule_profile", template_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @application_enablement.setter
    def application_enablement(self, value: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]):
        pulumi.set(self, "application_enablement", value)

    @property
    @pulumi.getter(name="templateMappingRuleProfile")
    def template_mapping_rule_profile(self) -> Optional[pulumi.Input['ArmTemplateMappingRuleProfileArgs']]:
        """
        The template mapping rule profile.
        """
        return pulumi.get(self, "template_mapping_rule_profile")

    @template_mapping_rule_profile.setter
    def template_mapping_rule_profile(self, value: Optional[pulumi.Input['ArmTemplateMappingRuleProfileArgs']]):
        pulumi.set(self, "template_mapping_rule_profile", value)


@pulumi.input_type
class AzureCoreNFVIDetailsArgs:
    def __init__(__self__, *,
                 nfvi_type: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The Azure Core NFVI detail.
        :param pulumi.Input[str] nfvi_type: The NFVI type.
               Expected value is 'AzureCore'.
        :param pulumi.Input[str] location: Location of the Azure core.
        :param pulumi.Input[str] name: Name of the nfvi.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureCore')
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> pulumi.Input[str]:
        """
        The NFVI type.
        Expected value is 'AzureCore'.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the Azure core.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the nfvi.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureCoreNetworkFunctionArmTemplateApplicationArgs:
    def __init__(__self__, *,
                 artifact_type: pulumi.Input[str],
                 artifact_profile: Optional[pulumi.Input['AzureCoreArmTemplateArtifactProfileArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 deploy_parameters_mapping_rule_profile: Optional[pulumi.Input['AzureCoreArmTemplateDeployMappingRuleProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Azure core network function Template application definition.
        :param pulumi.Input[str] artifact_type: The artifact type.
               Expected value is 'ArmTemplate'.
        :param pulumi.Input['AzureCoreArmTemplateArtifactProfileArgs'] artifact_profile: Azure template artifact profile.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: Depends on profile definition.
        :param pulumi.Input['AzureCoreArmTemplateDeployMappingRuleProfileArgs'] deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param pulumi.Input[str] name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'ArmTemplate')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> pulumi.Input[str]:
        """
        The artifact type.
        Expected value is 'ArmTemplate'.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_type", value)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional[pulumi.Input['AzureCoreArmTemplateArtifactProfileArgs']]:
        """
        Azure template artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @artifact_profile.setter
    def artifact_profile(self, value: Optional[pulumi.Input['AzureCoreArmTemplateArtifactProfileArgs']]):
        pulumi.set(self, "artifact_profile", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional[pulumi.Input['AzureCoreArmTemplateDeployMappingRuleProfileArgs']]:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @deploy_parameters_mapping_rule_profile.setter
    def deploy_parameters_mapping_rule_profile(self, value: Optional[pulumi.Input['AzureCoreArmTemplateDeployMappingRuleProfileArgs']]):
        pulumi.set(self, "deploy_parameters_mapping_rule_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureCoreNetworkFunctionTemplateArgs:
    def __init__(__self__, *,
                 nfvi_type: pulumi.Input[str],
                 network_function_applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureCoreNetworkFunctionArmTemplateApplicationArgs', 'AzureCoreNetworkFunctionVhdApplicationArgs']]]]] = None):
        """
        Azure virtual network function template.
        :param pulumi.Input[str] nfvi_type: The network function type.
               Expected value is 'AzureCore'.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AzureCoreNetworkFunctionArmTemplateApplicationArgs', 'AzureCoreNetworkFunctionVhdApplicationArgs']]]] network_function_applications: Network function applications.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureCore')
        if network_function_applications is not None:
            pulumi.set(__self__, "network_function_applications", network_function_applications)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> pulumi.Input[str]:
        """
        The network function type.
        Expected value is 'AzureCore'.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="networkFunctionApplications")
    def network_function_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureCoreNetworkFunctionArmTemplateApplicationArgs', 'AzureCoreNetworkFunctionVhdApplicationArgs']]]]]:
        """
        Network function applications.
        """
        return pulumi.get(self, "network_function_applications")

    @network_function_applications.setter
    def network_function_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureCoreNetworkFunctionArmTemplateApplicationArgs', 'AzureCoreNetworkFunctionVhdApplicationArgs']]]]]):
        pulumi.set(self, "network_function_applications", value)


@pulumi.input_type
class AzureCoreNetworkFunctionVhdApplicationArgs:
    def __init__(__self__, *,
                 artifact_type: pulumi.Input[str],
                 artifact_profile: Optional[pulumi.Input['AzureCoreVhdImageArtifactProfileArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 deploy_parameters_mapping_rule_profile: Optional[pulumi.Input['AzureCoreVhdImageDeployMappingRuleProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Azure core network function vhd application definition.
        :param pulumi.Input[str] artifact_type: The artifact type.
               Expected value is 'VhdImageFile'.
        :param pulumi.Input['AzureCoreVhdImageArtifactProfileArgs'] artifact_profile: Azure vhd image artifact profile.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: Depends on profile definition.
        :param pulumi.Input['AzureCoreVhdImageDeployMappingRuleProfileArgs'] deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param pulumi.Input[str] name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'VhdImageFile')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> pulumi.Input[str]:
        """
        The artifact type.
        Expected value is 'VhdImageFile'.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_type", value)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional[pulumi.Input['AzureCoreVhdImageArtifactProfileArgs']]:
        """
        Azure vhd image artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @artifact_profile.setter
    def artifact_profile(self, value: Optional[pulumi.Input['AzureCoreVhdImageArtifactProfileArgs']]):
        pulumi.set(self, "artifact_profile", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional[pulumi.Input['AzureCoreVhdImageDeployMappingRuleProfileArgs']]:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @deploy_parameters_mapping_rule_profile.setter
    def deploy_parameters_mapping_rule_profile(self, value: Optional[pulumi.Input['AzureCoreVhdImageDeployMappingRuleProfileArgs']]):
        pulumi.set(self, "deploy_parameters_mapping_rule_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureCoreVhdImageArtifactProfileArgs:
    def __init__(__self__, *,
                 artifact_store: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 vhd_artifact_profile: Optional[pulumi.Input['VhdImageArtifactProfileArgs']] = None):
        """
        Azure vhd artifact profile properties.
        :param pulumi.Input['ReferencedResourceArgs'] artifact_store: The reference to artifact store.
        :param pulumi.Input['VhdImageArtifactProfileArgs'] vhd_artifact_profile: Vhd artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if vhd_artifact_profile is not None:
            pulumi.set(__self__, "vhd_artifact_profile", vhd_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @artifact_store.setter
    def artifact_store(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "artifact_store", value)

    @property
    @pulumi.getter(name="vhdArtifactProfile")
    def vhd_artifact_profile(self) -> Optional[pulumi.Input['VhdImageArtifactProfileArgs']]:
        """
        Vhd artifact profile.
        """
        return pulumi.get(self, "vhd_artifact_profile")

    @vhd_artifact_profile.setter
    def vhd_artifact_profile(self, value: Optional[pulumi.Input['VhdImageArtifactProfileArgs']]):
        pulumi.set(self, "vhd_artifact_profile", value)


@pulumi.input_type
class AzureCoreVhdImageDeployMappingRuleProfileArgs:
    def __init__(__self__, *,
                 application_enablement: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]] = None,
                 vhd_image_mapping_rule_profile: Optional[pulumi.Input['VhdImageMappingRuleProfileArgs']] = None):
        """
        Azure vhd deploy mapping rule profile.
        :param pulumi.Input[Union[str, 'ApplicationEnablement']] application_enablement: The application enablement.
        :param pulumi.Input['VhdImageMappingRuleProfileArgs'] vhd_image_mapping_rule_profile: The vhd mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if vhd_image_mapping_rule_profile is not None:
            pulumi.set(__self__, "vhd_image_mapping_rule_profile", vhd_image_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @application_enablement.setter
    def application_enablement(self, value: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]):
        pulumi.set(self, "application_enablement", value)

    @property
    @pulumi.getter(name="vhdImageMappingRuleProfile")
    def vhd_image_mapping_rule_profile(self) -> Optional[pulumi.Input['VhdImageMappingRuleProfileArgs']]:
        """
        The vhd mapping rule profile.
        """
        return pulumi.get(self, "vhd_image_mapping_rule_profile")

    @vhd_image_mapping_rule_profile.setter
    def vhd_image_mapping_rule_profile(self, value: Optional[pulumi.Input['VhdImageMappingRuleProfileArgs']]):
        pulumi.set(self, "vhd_image_mapping_rule_profile", value)


@pulumi.input_type
class AzureOperatorNexusArmTemplateArtifactProfileArgs:
    def __init__(__self__, *,
                 artifact_store: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 template_artifact_profile: Optional[pulumi.Input['ArmTemplateArtifactProfileArgs']] = None):
        """
        Azure Operator Distributed Services vhd artifact profile properties.
        :param pulumi.Input['ReferencedResourceArgs'] artifact_store: The reference to artifact store.
        :param pulumi.Input['ArmTemplateArtifactProfileArgs'] template_artifact_profile: Template artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if template_artifact_profile is not None:
            pulumi.set(__self__, "template_artifact_profile", template_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @artifact_store.setter
    def artifact_store(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "artifact_store", value)

    @property
    @pulumi.getter(name="templateArtifactProfile")
    def template_artifact_profile(self) -> Optional[pulumi.Input['ArmTemplateArtifactProfileArgs']]:
        """
        Template artifact profile.
        """
        return pulumi.get(self, "template_artifact_profile")

    @template_artifact_profile.setter
    def template_artifact_profile(self, value: Optional[pulumi.Input['ArmTemplateArtifactProfileArgs']]):
        pulumi.set(self, "template_artifact_profile", value)


@pulumi.input_type
class AzureOperatorNexusArmTemplateDeployMappingRuleProfileArgs:
    def __init__(__self__, *,
                 application_enablement: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]] = None,
                 template_mapping_rule_profile: Optional[pulumi.Input['ArmTemplateMappingRuleProfileArgs']] = None):
        """
        Azure Operator Distributed Services template deploy mapping rule profile.
        :param pulumi.Input[Union[str, 'ApplicationEnablement']] application_enablement: The application enablement.
        :param pulumi.Input['ArmTemplateMappingRuleProfileArgs'] template_mapping_rule_profile: The template mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if template_mapping_rule_profile is not None:
            pulumi.set(__self__, "template_mapping_rule_profile", template_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @application_enablement.setter
    def application_enablement(self, value: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]):
        pulumi.set(self, "application_enablement", value)

    @property
    @pulumi.getter(name="templateMappingRuleProfile")
    def template_mapping_rule_profile(self) -> Optional[pulumi.Input['ArmTemplateMappingRuleProfileArgs']]:
        """
        The template mapping rule profile.
        """
        return pulumi.get(self, "template_mapping_rule_profile")

    @template_mapping_rule_profile.setter
    def template_mapping_rule_profile(self, value: Optional[pulumi.Input['ArmTemplateMappingRuleProfileArgs']]):
        pulumi.set(self, "template_mapping_rule_profile", value)


@pulumi.input_type
class AzureOperatorNexusClusterNFVIDetailsArgs:
    def __init__(__self__, *,
                 nfvi_type: pulumi.Input[str],
                 custom_location_reference: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The AzureOperatorNexusCluster NFVI detail.
        :param pulumi.Input[str] nfvi_type: The NFVI type.
               Expected value is 'AzureOperatorNexus'.
        :param pulumi.Input['ReferencedResourceArgs'] custom_location_reference: The reference to the custom location.
        :param pulumi.Input[str] name: Name of the nfvi.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureOperatorNexus')
        if custom_location_reference is not None:
            pulumi.set(__self__, "custom_location_reference", custom_location_reference)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> pulumi.Input[str]:
        """
        The NFVI type.
        Expected value is 'AzureOperatorNexus'.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="customLocationReference")
    def custom_location_reference(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to the custom location.
        """
        return pulumi.get(self, "custom_location_reference")

    @custom_location_reference.setter
    def custom_location_reference(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "custom_location_reference", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the nfvi.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureOperatorNexusImageArtifactProfileArgs:
    def __init__(__self__, *,
                 artifact_store: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 image_artifact_profile: Optional[pulumi.Input['ImageArtifactProfileArgs']] = None):
        """
        Azure Operator Distributed Services image artifact profile properties.
        :param pulumi.Input['ReferencedResourceArgs'] artifact_store: The reference to artifact store.
        :param pulumi.Input['ImageArtifactProfileArgs'] image_artifact_profile: Image artifact profile.
        """
        if artifact_store is not None:
            pulumi.set(__self__, "artifact_store", artifact_store)
        if image_artifact_profile is not None:
            pulumi.set(__self__, "image_artifact_profile", image_artifact_profile)

    @property
    @pulumi.getter(name="artifactStore")
    def artifact_store(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The reference to artifact store.
        """
        return pulumi.get(self, "artifact_store")

    @artifact_store.setter
    def artifact_store(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "artifact_store", value)

    @property
    @pulumi.getter(name="imageArtifactProfile")
    def image_artifact_profile(self) -> Optional[pulumi.Input['ImageArtifactProfileArgs']]:
        """
        Image artifact profile.
        """
        return pulumi.get(self, "image_artifact_profile")

    @image_artifact_profile.setter
    def image_artifact_profile(self, value: Optional[pulumi.Input['ImageArtifactProfileArgs']]):
        pulumi.set(self, "image_artifact_profile", value)


@pulumi.input_type
class AzureOperatorNexusImageDeployMappingRuleProfileArgs:
    def __init__(__self__, *,
                 application_enablement: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]] = None,
                 image_mapping_rule_profile: Optional[pulumi.Input['ImageMappingRuleProfileArgs']] = None):
        """
        Azure Operator Distributed Services image deploy mapping rule profile.
        :param pulumi.Input[Union[str, 'ApplicationEnablement']] application_enablement: The application enablement.
        :param pulumi.Input['ImageMappingRuleProfileArgs'] image_mapping_rule_profile: The vhd mapping rule profile.
        """
        if application_enablement is not None:
            pulumi.set(__self__, "application_enablement", application_enablement)
        if image_mapping_rule_profile is not None:
            pulumi.set(__self__, "image_mapping_rule_profile", image_mapping_rule_profile)

    @property
    @pulumi.getter(name="applicationEnablement")
    def application_enablement(self) -> Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]:
        """
        The application enablement.
        """
        return pulumi.get(self, "application_enablement")

    @application_enablement.setter
    def application_enablement(self, value: Optional[pulumi.Input[Union[str, 'ApplicationEnablement']]]):
        pulumi.set(self, "application_enablement", value)

    @property
    @pulumi.getter(name="imageMappingRuleProfile")
    def image_mapping_rule_profile(self) -> Optional[pulumi.Input['ImageMappingRuleProfileArgs']]:
        """
        The vhd mapping rule profile.
        """
        return pulumi.get(self, "image_mapping_rule_profile")

    @image_mapping_rule_profile.setter
    def image_mapping_rule_profile(self, value: Optional[pulumi.Input['ImageMappingRuleProfileArgs']]):
        pulumi.set(self, "image_mapping_rule_profile", value)


@pulumi.input_type
class AzureOperatorNexusNetworkFunctionArmTemplateApplicationArgs:
    def __init__(__self__, *,
                 artifact_type: pulumi.Input[str],
                 artifact_profile: Optional[pulumi.Input['AzureOperatorNexusArmTemplateArtifactProfileArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 deploy_parameters_mapping_rule_profile: Optional[pulumi.Input['AzureOperatorNexusArmTemplateDeployMappingRuleProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Azure Operator Distributed Services network function Template application definition.
        :param pulumi.Input[str] artifact_type: The artifact type.
               Expected value is 'ArmTemplate'.
        :param pulumi.Input['AzureOperatorNexusArmTemplateArtifactProfileArgs'] artifact_profile: Azure Operator Distributed Services Template artifact profile.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: Depends on profile definition.
        :param pulumi.Input['AzureOperatorNexusArmTemplateDeployMappingRuleProfileArgs'] deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param pulumi.Input[str] name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'ArmTemplate')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> pulumi.Input[str]:
        """
        The artifact type.
        Expected value is 'ArmTemplate'.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_type", value)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional[pulumi.Input['AzureOperatorNexusArmTemplateArtifactProfileArgs']]:
        """
        Azure Operator Distributed Services Template artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @artifact_profile.setter
    def artifact_profile(self, value: Optional[pulumi.Input['AzureOperatorNexusArmTemplateArtifactProfileArgs']]):
        pulumi.set(self, "artifact_profile", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional[pulumi.Input['AzureOperatorNexusArmTemplateDeployMappingRuleProfileArgs']]:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @deploy_parameters_mapping_rule_profile.setter
    def deploy_parameters_mapping_rule_profile(self, value: Optional[pulumi.Input['AzureOperatorNexusArmTemplateDeployMappingRuleProfileArgs']]):
        pulumi.set(self, "deploy_parameters_mapping_rule_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureOperatorNexusNetworkFunctionImageApplicationArgs:
    def __init__(__self__, *,
                 artifact_type: pulumi.Input[str],
                 artifact_profile: Optional[pulumi.Input['AzureOperatorNexusImageArtifactProfileArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 deploy_parameters_mapping_rule_profile: Optional[pulumi.Input['AzureOperatorNexusImageDeployMappingRuleProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Azure Operator Distributed Services network function image application definition.
        :param pulumi.Input[str] artifact_type: The artifact type.
               Expected value is 'ImageFile'.
        :param pulumi.Input['AzureOperatorNexusImageArtifactProfileArgs'] artifact_profile: Azure Operator Distributed Services image artifact profile.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: Depends on profile definition.
        :param pulumi.Input['AzureOperatorNexusImageDeployMappingRuleProfileArgs'] deploy_parameters_mapping_rule_profile: Deploy mapping rule profile.
        :param pulumi.Input[str] name: The name of the network function application.
        """
        pulumi.set(__self__, "artifact_type", 'ImageFile')
        if artifact_profile is not None:
            pulumi.set(__self__, "artifact_profile", artifact_profile)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if deploy_parameters_mapping_rule_profile is not None:
            pulumi.set(__self__, "deploy_parameters_mapping_rule_profile", deploy_parameters_mapping_rule_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> pulumi.Input[str]:
        """
        The artifact type.
        Expected value is 'ImageFile'.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_type", value)

    @property
    @pulumi.getter(name="artifactProfile")
    def artifact_profile(self) -> Optional[pulumi.Input['AzureOperatorNexusImageArtifactProfileArgs']]:
        """
        Azure Operator Distributed Services image artifact profile.
        """
        return pulumi.get(self, "artifact_profile")

    @artifact_profile.setter
    def artifact_profile(self, value: Optional[pulumi.Input['AzureOperatorNexusImageArtifactProfileArgs']]):
        pulumi.set(self, "artifact_profile", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        Depends on profile definition.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter(name="deployParametersMappingRuleProfile")
    def deploy_parameters_mapping_rule_profile(self) -> Optional[pulumi.Input['AzureOperatorNexusImageDeployMappingRuleProfileArgs']]:
        """
        Deploy mapping rule profile.
        """
        return pulumi.get(self, "deploy_parameters_mapping_rule_profile")

    @deploy_parameters_mapping_rule_profile.setter
    def deploy_parameters_mapping_rule_profile(self, value: Optional[pulumi.Input['AzureOperatorNexusImageDeployMappingRuleProfileArgs']]):
        pulumi.set(self, "deploy_parameters_mapping_rule_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network function application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AzureOperatorNexusNetworkFunctionTemplateArgs:
    def __init__(__self__, *,
                 nfvi_type: pulumi.Input[str],
                 network_function_applications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureOperatorNexusNetworkFunctionArmTemplateApplicationArgs', 'AzureOperatorNexusNetworkFunctionImageApplicationArgs']]]]] = None):
        """
        Azure Operator Distributed Services network function template.
        :param pulumi.Input[str] nfvi_type: The network function type.
               Expected value is 'AzureOperatorNexus'.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AzureOperatorNexusNetworkFunctionArmTemplateApplicationArgs', 'AzureOperatorNexusNetworkFunctionImageApplicationArgs']]]] network_function_applications: Network function applications.
        """
        pulumi.set(__self__, "nfvi_type", 'AzureOperatorNexus')
        if network_function_applications is not None:
            pulumi.set(__self__, "network_function_applications", network_function_applications)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> pulumi.Input[str]:
        """
        The network function type.
        Expected value is 'AzureOperatorNexus'.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="networkFunctionApplications")
    def network_function_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureOperatorNexusNetworkFunctionArmTemplateApplicationArgs', 'AzureOperatorNexusNetworkFunctionImageApplicationArgs']]]]]:
        """
        Network function applications.
        """
        return pulumi.get(self, "network_function_applications")

    @network_function_applications.setter
    def network_function_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureOperatorNexusNetworkFunctionArmTemplateApplicationArgs', 'AzureOperatorNexusNetworkFunctionImageApplicationArgs']]]]]):
        pulumi.set(self, "network_function_applications", value)


@pulumi.input_type
class ConfigurationGroupSchemaPropertiesFormatArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 schema_definition: Optional[pulumi.Input[str]] = None):
        """
        Configuration group schema properties.
        :param pulumi.Input[str] description: Description of what schema can contain.
        :param pulumi.Input[str] schema_definition: Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if schema_definition is not None:
            pulumi.set(__self__, "schema_definition", schema_definition)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of what schema can contain.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="schemaDefinition")
    def schema_definition(self) -> Optional[pulumi.Input[str]]:
        """
        Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        return pulumi.get(self, "schema_definition")

    @schema_definition.setter
    def schema_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_definition", value)


@pulumi.input_type
class ConfigurationValueWithSecretsArgs:
    def __init__(__self__, *,
                 configuration_type: pulumi.Input[str],
                 configuration_group_schema_resource_reference: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]] = None,
                 secret_configuration_value: Optional[pulumi.Input[str]] = None):
        """
        The ConfigurationValue with secrets.
        :param pulumi.Input[str] configuration_type: The secret type which indicates if secret or not.
               Expected value is 'Secret'.
        :param pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']] configuration_group_schema_resource_reference: The configuration group schema resource reference.
        :param pulumi.Input[str] secret_configuration_value: Name and value pairs that define the configuration value secrets. It can be a well formed escaped JSON string.
        """
        pulumi.set(__self__, "configuration_type", 'Secret')
        if configuration_group_schema_resource_reference is not None:
            pulumi.set(__self__, "configuration_group_schema_resource_reference", configuration_group_schema_resource_reference)
        if secret_configuration_value is not None:
            pulumi.set(__self__, "secret_configuration_value", secret_configuration_value)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> pulumi.Input[str]:
        """
        The secret type which indicates if secret or not.
        Expected value is 'Secret'.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="configurationGroupSchemaResourceReference")
    def configuration_group_schema_resource_reference(self) -> Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]:
        """
        The configuration group schema resource reference.
        """
        return pulumi.get(self, "configuration_group_schema_resource_reference")

    @configuration_group_schema_resource_reference.setter
    def configuration_group_schema_resource_reference(self, value: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]):
        pulumi.set(self, "configuration_group_schema_resource_reference", value)

    @property
    @pulumi.getter(name="secretConfigurationValue")
    def secret_configuration_value(self) -> Optional[pulumi.Input[str]]:
        """
        Name and value pairs that define the configuration value secrets. It can be a well formed escaped JSON string.
        """
        return pulumi.get(self, "secret_configuration_value")

    @secret_configuration_value.setter
    def secret_configuration_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_configuration_value", value)


@pulumi.input_type
class ConfigurationValueWithoutSecretsArgs:
    def __init__(__self__, *,
                 configuration_type: pulumi.Input[str],
                 configuration_group_schema_resource_reference: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]] = None,
                 configuration_value: Optional[pulumi.Input[str]] = None):
        """
        The ConfigurationValue with no secrets.
        :param pulumi.Input[str] configuration_type: The secret type which indicates if secret or not.
               Expected value is 'Open'.
        :param pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']] configuration_group_schema_resource_reference: The configuration group schema resource reference.
        :param pulumi.Input[str] configuration_value: Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        pulumi.set(__self__, "configuration_type", 'Open')
        if configuration_group_schema_resource_reference is not None:
            pulumi.set(__self__, "configuration_group_schema_resource_reference", configuration_group_schema_resource_reference)
        if configuration_value is not None:
            pulumi.set(__self__, "configuration_value", configuration_value)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> pulumi.Input[str]:
        """
        The secret type which indicates if secret or not.
        Expected value is 'Open'.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="configurationGroupSchemaResourceReference")
    def configuration_group_schema_resource_reference(self) -> Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]:
        """
        The configuration group schema resource reference.
        """
        return pulumi.get(self, "configuration_group_schema_resource_reference")

    @configuration_group_schema_resource_reference.setter
    def configuration_group_schema_resource_reference(self, value: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]):
        pulumi.set(self, "configuration_group_schema_resource_reference", value)

    @property
    @pulumi.getter(name="configurationValue")
    def configuration_value(self) -> Optional[pulumi.Input[str]]:
        """
        Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
        """
        return pulumi.get(self, "configuration_value")

    @configuration_value.setter
    def configuration_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_value", value)


@pulumi.input_type
class ContainerizedNetworkFunctionDefinitionVersionArgs:
    def __init__(__self__, *,
                 network_function_type: pulumi.Input[str],
                 deploy_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 network_function_template: Optional[pulumi.Input['AzureArcKubernetesNetworkFunctionTemplateArgs']] = None):
        """
        Containerized network function network function definition version properties.
        :param pulumi.Input[str] network_function_type: The network function type.
               Expected value is 'ContainerizedNetworkFunction'.
        :param pulumi.Input[str] deploy_parameters: The deployment parameters of the network function definition version.
        :param pulumi.Input[str] description: The network function definition version description.
        :param pulumi.Input['AzureArcKubernetesNetworkFunctionTemplateArgs'] network_function_template: Containerized network function template.
        """
        pulumi.set(__self__, "network_function_type", 'ContainerizedNetworkFunction')
        if deploy_parameters is not None:
            pulumi.set(__self__, "deploy_parameters", deploy_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if network_function_template is not None:
            pulumi.set(__self__, "network_function_template", network_function_template)

    @property
    @pulumi.getter(name="networkFunctionType")
    def network_function_type(self) -> pulumi.Input[str]:
        """
        The network function type.
        Expected value is 'ContainerizedNetworkFunction'.
        """
        return pulumi.get(self, "network_function_type")

    @network_function_type.setter
    def network_function_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_function_type", value)

    @property
    @pulumi.getter(name="deployParameters")
    def deploy_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The deployment parameters of the network function definition version.
        """
        return pulumi.get(self, "deploy_parameters")

    @deploy_parameters.setter
    def deploy_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The network function definition version description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="networkFunctionTemplate")
    def network_function_template(self) -> Optional[pulumi.Input['AzureArcKubernetesNetworkFunctionTemplateArgs']]:
        """
        Containerized network function template.
        """
        return pulumi.get(self, "network_function_template")

    @network_function_template.setter
    def network_function_template(self, value: Optional[pulumi.Input['AzureArcKubernetesNetworkFunctionTemplateArgs']]):
        pulumi.set(self, "network_function_template", value)


@pulumi.input_type
class DependsOnProfileArgs:
    def __init__(__self__, *,
                 install_depends_on: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uninstall_depends_on: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_depends_on: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Depends on profile definition.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] install_depends_on: Application installation operation dependency.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uninstall_depends_on: Application deletion operation dependency.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] update_depends_on: Application update operation dependency.
        """
        if install_depends_on is not None:
            pulumi.set(__self__, "install_depends_on", install_depends_on)
        if uninstall_depends_on is not None:
            pulumi.set(__self__, "uninstall_depends_on", uninstall_depends_on)
        if update_depends_on is not None:
            pulumi.set(__self__, "update_depends_on", update_depends_on)

    @property
    @pulumi.getter(name="installDependsOn")
    def install_depends_on(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Application installation operation dependency.
        """
        return pulumi.get(self, "install_depends_on")

    @install_depends_on.setter
    def install_depends_on(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "install_depends_on", value)

    @property
    @pulumi.getter(name="uninstallDependsOn")
    def uninstall_depends_on(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Application deletion operation dependency.
        """
        return pulumi.get(self, "uninstall_depends_on")

    @uninstall_depends_on.setter
    def uninstall_depends_on(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uninstall_depends_on", value)

    @property
    @pulumi.getter(name="updateDependsOn")
    def update_depends_on(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Application update operation dependency.
        """
        return pulumi.get(self, "update_depends_on")

    @update_depends_on.setter
    def update_depends_on(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "update_depends_on", value)


@pulumi.input_type
class HelmArtifactProfileArgs:
    def __init__(__self__, *,
                 helm_package_name: Optional[pulumi.Input[str]] = None,
                 helm_package_version_range: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets_values_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_values_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Helm artifact profile.
        :param pulumi.Input[str] helm_package_name: Helm package name.
        :param pulumi.Input[str] helm_package_version_range: Helm package version range.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] image_pull_secrets_values_paths: The image pull secrets values path list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] registry_values_paths: The registry values path list.
        """
        if helm_package_name is not None:
            pulumi.set(__self__, "helm_package_name", helm_package_name)
        if helm_package_version_range is not None:
            pulumi.set(__self__, "helm_package_version_range", helm_package_version_range)
        if image_pull_secrets_values_paths is not None:
            pulumi.set(__self__, "image_pull_secrets_values_paths", image_pull_secrets_values_paths)
        if registry_values_paths is not None:
            pulumi.set(__self__, "registry_values_paths", registry_values_paths)

    @property
    @pulumi.getter(name="helmPackageName")
    def helm_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Helm package name.
        """
        return pulumi.get(self, "helm_package_name")

    @helm_package_name.setter
    def helm_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_package_name", value)

    @property
    @pulumi.getter(name="helmPackageVersionRange")
    def helm_package_version_range(self) -> Optional[pulumi.Input[str]]:
        """
        Helm package version range.
        """
        return pulumi.get(self, "helm_package_version_range")

    @helm_package_version_range.setter
    def helm_package_version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_package_version_range", value)

    @property
    @pulumi.getter(name="imagePullSecretsValuesPaths")
    def image_pull_secrets_values_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The image pull secrets values path list.
        """
        return pulumi.get(self, "image_pull_secrets_values_paths")

    @image_pull_secrets_values_paths.setter
    def image_pull_secrets_values_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "image_pull_secrets_values_paths", value)

    @property
    @pulumi.getter(name="registryValuesPaths")
    def registry_values_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The registry values path list.
        """
        return pulumi.get(self, "registry_values_paths")

    @registry_values_paths.setter
    def registry_values_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "registry_values_paths", value)


@pulumi.input_type
class HelmInstallOptionsArgs:
    def __init__(__self__, *,
                 atomic: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[str]] = None):
        """
        The helm deployment install options
        :param pulumi.Input[str] atomic: The helm deployment atomic options
        :param pulumi.Input[str] timeout: The helm deployment timeout options
        :param pulumi.Input[str] wait: The helm deployment wait options
        """
        if atomic is not None:
            pulumi.set(__self__, "atomic", atomic)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def atomic(self) -> Optional[pulumi.Input[str]]:
        """
        The helm deployment atomic options
        """
        return pulumi.get(self, "atomic")

    @atomic.setter
    def atomic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "atomic", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The helm deployment timeout options
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[str]]:
        """
        The helm deployment wait options
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class HelmMappingRuleProfileOptionsArgs:
    def __init__(__self__, *,
                 install_options: Optional[pulumi.Input['HelmInstallOptionsArgs']] = None,
                 upgrade_options: Optional[pulumi.Input['HelmUpgradeOptionsArgs']] = None):
        """
        The helm deployment options
        :param pulumi.Input['HelmInstallOptionsArgs'] install_options: The helm deployment install options
        :param pulumi.Input['HelmUpgradeOptionsArgs'] upgrade_options: The helm deployment upgrade options
        """
        if install_options is not None:
            pulumi.set(__self__, "install_options", install_options)
        if upgrade_options is not None:
            pulumi.set(__self__, "upgrade_options", upgrade_options)

    @property
    @pulumi.getter(name="installOptions")
    def install_options(self) -> Optional[pulumi.Input['HelmInstallOptionsArgs']]:
        """
        The helm deployment install options
        """
        return pulumi.get(self, "install_options")

    @install_options.setter
    def install_options(self, value: Optional[pulumi.Input['HelmInstallOptionsArgs']]):
        pulumi.set(self, "install_options", value)

    @property
    @pulumi.getter(name="upgradeOptions")
    def upgrade_options(self) -> Optional[pulumi.Input['HelmUpgradeOptionsArgs']]:
        """
        The helm deployment upgrade options
        """
        return pulumi.get(self, "upgrade_options")

    @upgrade_options.setter
    def upgrade_options(self, value: Optional[pulumi.Input['HelmUpgradeOptionsArgs']]):
        pulumi.set(self, "upgrade_options", value)


@pulumi.input_type
class HelmMappingRuleProfileArgs:
    def __init__(__self__, *,
                 helm_package_version: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input['HelmMappingRuleProfileOptionsArgs']] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 release_namespace: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm mapping rule profile
        :param pulumi.Input[str] helm_package_version: Helm package version.
        :param pulumi.Input['HelmMappingRuleProfileOptionsArgs'] options: The helm deployment options
        :param pulumi.Input[str] release_name: Helm release name.
        :param pulumi.Input[str] release_namespace: Helm release namespace.
        :param pulumi.Input[str] values: Helm release values.
        """
        if helm_package_version is not None:
            pulumi.set(__self__, "helm_package_version", helm_package_version)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if release_namespace is not None:
            pulumi.set(__self__, "release_namespace", release_namespace)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="helmPackageVersion")
    def helm_package_version(self) -> Optional[pulumi.Input[str]]:
        """
        Helm package version.
        """
        return pulumi.get(self, "helm_package_version")

    @helm_package_version.setter
    def helm_package_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_package_version", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['HelmMappingRuleProfileOptionsArgs']]:
        """
        The helm deployment options
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['HelmMappingRuleProfileOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        Helm release name.
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="releaseNamespace")
    def release_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Helm release namespace.
        """
        return pulumi.get(self, "release_namespace")

    @release_namespace.setter
    def release_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_namespace", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Helm release values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class HelmUpgradeOptionsArgs:
    def __init__(__self__, *,
                 atomic: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[str]] = None):
        """
        The helm deployment install options
        :param pulumi.Input[str] atomic: The helm deployment atomic options
        :param pulumi.Input[str] timeout: The helm deployment timeout options
        :param pulumi.Input[str] wait: The helm deployment wait options
        """
        if atomic is not None:
            pulumi.set(__self__, "atomic", atomic)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def atomic(self) -> Optional[pulumi.Input[str]]:
        """
        The helm deployment atomic options
        """
        return pulumi.get(self, "atomic")

    @atomic.setter
    def atomic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "atomic", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The helm deployment timeout options
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[str]]:
        """
        The helm deployment wait options
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class ImageArtifactProfileArgs:
    def __init__(__self__, *,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_version: Optional[pulumi.Input[str]] = None):
        """
        Image artifact profile.
        :param pulumi.Input[str] image_name: Image name.
        :param pulumi.Input[str] image_version: Image version.
        """
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        Image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[pulumi.Input[str]]:
        """
        Image version.
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_version", value)


@pulumi.input_type
class ImageMappingRuleProfileArgs:
    def __init__(__self__, *,
                 user_configuration: Optional[pulumi.Input[str]] = None):
        """
        Image mapping rule profile
        :param pulumi.Input[str] user_configuration: List of values.
        """
        if user_configuration is not None:
            pulumi.set(__self__, "user_configuration", user_configuration)

    @property
    @pulumi.getter(name="userConfiguration")
    def user_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        List of values.
        """
        return pulumi.get(self, "user_configuration")

    @user_configuration.setter
    def user_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_configuration", value)


@pulumi.input_type
class ManagedResourceGroupConfigurationArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Managed resource group configuration.
        :param pulumi.Input[str] location: Managed resource group location.
        :param pulumi.Input[str] name: Managed resource group name.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Managed resource group location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed resource group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class ManifestArtifactFormatArgs:
    def __init__(__self__, *,
                 artifact_name: Optional[pulumi.Input[str]] = None,
                 artifact_type: Optional[pulumi.Input[Union[str, 'ArtifactType']]] = None,
                 artifact_version: Optional[pulumi.Input[str]] = None):
        """
        Manifest artifact properties.
        :param pulumi.Input[str] artifact_name: The artifact name
        :param pulumi.Input[Union[str, 'ArtifactType']] artifact_type: The artifact type.
        :param pulumi.Input[str] artifact_version: The artifact version.
        """
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)
        if artifact_type is not None:
            pulumi.set(__self__, "artifact_type", artifact_type)
        if artifact_version is not None:
            pulumi.set(__self__, "artifact_version", artifact_version)

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[pulumi.Input[str]]:
        """
        The artifact name
        """
        return pulumi.get(self, "artifact_name")

    @artifact_name.setter
    def artifact_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_name", value)

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> Optional[pulumi.Input[Union[str, 'ArtifactType']]]:
        """
        The artifact type.
        """
        return pulumi.get(self, "artifact_type")

    @artifact_type.setter
    def artifact_type(self, value: Optional[pulumi.Input[Union[str, 'ArtifactType']]]):
        pulumi.set(self, "artifact_type", value)

    @property
    @pulumi.getter(name="artifactVersion")
    def artifact_version(self) -> Optional[pulumi.Input[str]]:
        """
        The artifact version.
        """
        return pulumi.get(self, "artifact_version")

    @artifact_version.setter
    def artifact_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_version", value)


@pulumi.input_type
class NSDArtifactProfileArgs:
    def __init__(__self__, *,
                 artifact_name: Optional[pulumi.Input[str]] = None,
                 artifact_store_reference: Optional[pulumi.Input['ReferencedResourceArgs']] = None,
                 artifact_version: Optional[pulumi.Input[str]] = None):
        """
        Artifact profile properties.
        :param pulumi.Input[str] artifact_name: Artifact name.
        :param pulumi.Input['ReferencedResourceArgs'] artifact_store_reference: The artifact store resource id
        :param pulumi.Input[str] artifact_version: Artifact version.
        """
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)
        if artifact_store_reference is not None:
            pulumi.set(__self__, "artifact_store_reference", artifact_store_reference)
        if artifact_version is not None:
            pulumi.set(__self__, "artifact_version", artifact_version)

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[pulumi.Input[str]]:
        """
        Artifact name.
        """
        return pulumi.get(self, "artifact_name")

    @artifact_name.setter
    def artifact_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_name", value)

    @property
    @pulumi.getter(name="artifactStoreReference")
    def artifact_store_reference(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The artifact store resource id
        """
        return pulumi.get(self, "artifact_store_reference")

    @artifact_store_reference.setter
    def artifact_store_reference(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "artifact_store_reference", value)

    @property
    @pulumi.getter(name="artifactVersion")
    def artifact_version(self) -> Optional[pulumi.Input[str]]:
        """
        Artifact version.
        """
        return pulumi.get(self, "artifact_version")

    @artifact_version.setter
    def artifact_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_version", value)


@pulumi.input_type
class NetworkFunctionDefinitionGroupPropertiesFormatArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None):
        """
        Network function definition group properties.
        :param pulumi.Input[str] description: The network function definition group description.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The network function definition group description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class NetworkFunctionDefinitionResourceElementTemplateDetailsArgs:
    def __init__(__self__, *,
                 resource_element_type: pulumi.Input[str],
                 configuration: Optional[pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs']] = None,
                 depends_on_profile: Optional[pulumi.Input['DependsOnProfileArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The network function definition resource element template details.
        :param pulumi.Input[str] resource_element_type: The resource element template type.
               Expected value is 'NetworkFunctionDefinition'.
        :param pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs'] configuration: The resource element template type.
        :param pulumi.Input['DependsOnProfileArgs'] depends_on_profile: The depends on profile.
        :param pulumi.Input[str] name: Name of the resource element template.
        """
        pulumi.set(__self__, "resource_element_type", 'NetworkFunctionDefinition')
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if depends_on_profile is not None:
            pulumi.set(__self__, "depends_on_profile", depends_on_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="resourceElementType")
    def resource_element_type(self) -> pulumi.Input[str]:
        """
        The resource element template type.
        Expected value is 'NetworkFunctionDefinition'.
        """
        return pulumi.get(self, "resource_element_type")

    @resource_element_type.setter
    def resource_element_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_element_type", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs']]:
        """
        The resource element template type.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ArmResourceDefinitionResourceElementTemplateArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="dependsOnProfile")
    def depends_on_profile(self) -> Optional[pulumi.Input['DependsOnProfileArgs']]:
        """
        The depends on profile.
        """
        return pulumi.get(self, "depends_on_profile")

    @depends_on_profile.setter
    def depends_on_profile(self, value: Optional[pulumi.Input['DependsOnProfileArgs']]):
        pulumi.set(self, "depends_on_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource element template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NetworkFunctionValueWithSecretsArgs:
    def __init__(__self__, *,
                 configuration_type: pulumi.Input[str],
                 allow_software_update: Optional[pulumi.Input[bool]] = None,
                 network_function_definition_version_resource_reference: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]] = None,
                 nfvi_id: Optional[pulumi.Input[str]] = None,
                 nfvi_type: Optional[pulumi.Input[Union[str, 'NFVIType']]] = None,
                 role_override_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_deployment_values: Optional[pulumi.Input[str]] = None):
        """
        NetworkFunction with secrets.
        :param pulumi.Input[str] configuration_type: The secret type which indicates if secret or not.
               Expected value is 'Secret'.
        :param pulumi.Input[bool] allow_software_update: Indicates if software updates are allowed during deployment.
        :param pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']] network_function_definition_version_resource_reference: The network function definition version resource reference.
        :param pulumi.Input[str] nfvi_id: The nfviId for the network function.
        :param pulumi.Input[Union[str, 'NFVIType']] nfvi_type: The nfvi type for the network function.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_override_values: The role configuration override values from the user.
        :param pulumi.Input[str] secret_deployment_values: The JSON-serialized secret deployment values from the user. This contains secrets like passwords,keys etc
        """
        pulumi.set(__self__, "configuration_type", 'Secret')
        if allow_software_update is not None:
            pulumi.set(__self__, "allow_software_update", allow_software_update)
        if network_function_definition_version_resource_reference is not None:
            pulumi.set(__self__, "network_function_definition_version_resource_reference", network_function_definition_version_resource_reference)
        if nfvi_id is not None:
            pulumi.set(__self__, "nfvi_id", nfvi_id)
        if nfvi_type is not None:
            pulumi.set(__self__, "nfvi_type", nfvi_type)
        if role_override_values is not None:
            pulumi.set(__self__, "role_override_values", role_override_values)
        if secret_deployment_values is not None:
            pulumi.set(__self__, "secret_deployment_values", secret_deployment_values)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> pulumi.Input[str]:
        """
        The secret type which indicates if secret or not.
        Expected value is 'Secret'.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="allowSoftwareUpdate")
    def allow_software_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if software updates are allowed during deployment.
        """
        return pulumi.get(self, "allow_software_update")

    @allow_software_update.setter
    def allow_software_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_software_update", value)

    @property
    @pulumi.getter(name="networkFunctionDefinitionVersionResourceReference")
    def network_function_definition_version_resource_reference(self) -> Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]:
        """
        The network function definition version resource reference.
        """
        return pulumi.get(self, "network_function_definition_version_resource_reference")

    @network_function_definition_version_resource_reference.setter
    def network_function_definition_version_resource_reference(self, value: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]):
        pulumi.set(self, "network_function_definition_version_resource_reference", value)

    @property
    @pulumi.getter(name="nfviId")
    def nfvi_id(self) -> Optional[pulumi.Input[str]]:
        """
        The nfviId for the network function.
        """
        return pulumi.get(self, "nfvi_id")

    @nfvi_id.setter
    def nfvi_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nfvi_id", value)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> Optional[pulumi.Input[Union[str, 'NFVIType']]]:
        """
        The nfvi type for the network function.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: Optional[pulumi.Input[Union[str, 'NFVIType']]]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="roleOverrideValues")
    def role_override_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The role configuration override values from the user.
        """
        return pulumi.get(self, "role_override_values")

    @role_override_values.setter
    def role_override_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "role_override_values", value)

    @property
    @pulumi.getter(name="secretDeploymentValues")
    def secret_deployment_values(self) -> Optional[pulumi.Input[str]]:
        """
        The JSON-serialized secret deployment values from the user. This contains secrets like passwords,keys etc
        """
        return pulumi.get(self, "secret_deployment_values")

    @secret_deployment_values.setter
    def secret_deployment_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_deployment_values", value)


@pulumi.input_type
class NetworkFunctionValueWithoutSecretsArgs:
    def __init__(__self__, *,
                 configuration_type: pulumi.Input[str],
                 allow_software_update: Optional[pulumi.Input[bool]] = None,
                 deployment_values: Optional[pulumi.Input[str]] = None,
                 network_function_definition_version_resource_reference: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]] = None,
                 nfvi_id: Optional[pulumi.Input[str]] = None,
                 nfvi_type: Optional[pulumi.Input[Union[str, 'NFVIType']]] = None,
                 role_override_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        NetworkFunction with no secrets.
        :param pulumi.Input[str] configuration_type: The secret type which indicates if secret or not.
               Expected value is 'Open'.
        :param pulumi.Input[bool] allow_software_update: Indicates if software updates are allowed during deployment.
        :param pulumi.Input[str] deployment_values: The JSON-serialized deployment values from the user.
        :param pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']] network_function_definition_version_resource_reference: The network function definition version resource reference.
        :param pulumi.Input[str] nfvi_id: The nfviId for the network function.
        :param pulumi.Input[Union[str, 'NFVIType']] nfvi_type: The nfvi type for the network function.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] role_override_values: The role configuration override values from the user.
        """
        pulumi.set(__self__, "configuration_type", 'Open')
        if allow_software_update is not None:
            pulumi.set(__self__, "allow_software_update", allow_software_update)
        if deployment_values is not None:
            pulumi.set(__self__, "deployment_values", deployment_values)
        if network_function_definition_version_resource_reference is not None:
            pulumi.set(__self__, "network_function_definition_version_resource_reference", network_function_definition_version_resource_reference)
        if nfvi_id is not None:
            pulumi.set(__self__, "nfvi_id", nfvi_id)
        if nfvi_type is not None:
            pulumi.set(__self__, "nfvi_type", nfvi_type)
        if role_override_values is not None:
            pulumi.set(__self__, "role_override_values", role_override_values)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> pulumi.Input[str]:
        """
        The secret type which indicates if secret or not.
        Expected value is 'Open'.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="allowSoftwareUpdate")
    def allow_software_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if software updates are allowed during deployment.
        """
        return pulumi.get(self, "allow_software_update")

    @allow_software_update.setter
    def allow_software_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_software_update", value)

    @property
    @pulumi.getter(name="deploymentValues")
    def deployment_values(self) -> Optional[pulumi.Input[str]]:
        """
        The JSON-serialized deployment values from the user.
        """
        return pulumi.get(self, "deployment_values")

    @deployment_values.setter
    def deployment_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_values", value)

    @property
    @pulumi.getter(name="networkFunctionDefinitionVersionResourceReference")
    def network_function_definition_version_resource_reference(self) -> Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]:
        """
        The network function definition version resource reference.
        """
        return pulumi.get(self, "network_function_definition_version_resource_reference")

    @network_function_definition_version_resource_reference.setter
    def network_function_definition_version_resource_reference(self, value: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]):
        pulumi.set(self, "network_function_definition_version_resource_reference", value)

    @property
    @pulumi.getter(name="nfviId")
    def nfvi_id(self) -> Optional[pulumi.Input[str]]:
        """
        The nfviId for the network function.
        """
        return pulumi.get(self, "nfvi_id")

    @nfvi_id.setter
    def nfvi_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nfvi_id", value)

    @property
    @pulumi.getter(name="nfviType")
    def nfvi_type(self) -> Optional[pulumi.Input[Union[str, 'NFVIType']]]:
        """
        The nfvi type for the network function.
        """
        return pulumi.get(self, "nfvi_type")

    @nfvi_type.setter
    def nfvi_type(self, value: Optional[pulumi.Input[Union[str, 'NFVIType']]]):
        pulumi.set(self, "nfvi_type", value)

    @property
    @pulumi.getter(name="roleOverrideValues")
    def role_override_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The role configuration override values from the user.
        """
        return pulumi.get(self, "role_override_values")

    @role_override_values.setter
    def role_override_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "role_override_values", value)


@pulumi.input_type
class NetworkServiceDesignGroupPropertiesFormatArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None):
        """
        network service design group properties.
        :param pulumi.Input[str] description: The network service design group description.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The network service design group description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class NetworkServiceDesignVersionPropertiesFormatArgs:
    def __init__(__self__, *,
                 configuration_group_schema_references: Optional[pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 nfvis_from_site: Optional[pulumi.Input[Mapping[str, pulumi.Input['NfviDetailsArgs']]]] = None,
                 resource_element_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArmResourceDefinitionResourceElementTemplateDetailsArgs', 'NetworkFunctionDefinitionResourceElementTemplateDetailsArgs']]]]] = None):
        """
        network service design version properties.
        :param pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]] configuration_group_schema_references: The configuration schemas to used to define the values.
        :param pulumi.Input[str] description: The network service design version description.
        :param pulumi.Input[Mapping[str, pulumi.Input['NfviDetailsArgs']]] nfvis_from_site: The nfvis from the site.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ArmResourceDefinitionResourceElementTemplateDetailsArgs', 'NetworkFunctionDefinitionResourceElementTemplateDetailsArgs']]]] resource_element_templates: List of resource element template
        """
        if configuration_group_schema_references is not None:
            pulumi.set(__self__, "configuration_group_schema_references", configuration_group_schema_references)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if nfvis_from_site is not None:
            pulumi.set(__self__, "nfvis_from_site", nfvis_from_site)
        if resource_element_templates is not None:
            pulumi.set(__self__, "resource_element_templates", resource_element_templates)

    @property
    @pulumi.getter(name="configurationGroupSchemaReferences")
    def configuration_group_schema_references(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]]]:
        """
        The configuration schemas to used to define the values.
        """
        return pulumi.get(self, "configuration_group_schema_references")

    @configuration_group_schema_references.setter
    def configuration_group_schema_references(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]]]):
        pulumi.set(self, "configuration_group_schema_references", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The network service design version description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="nfvisFromSite")
    def nfvis_from_site(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NfviDetailsArgs']]]]:
        """
        The nfvis from the site.
        """
        return pulumi.get(self, "nfvis_from_site")

    @nfvis_from_site.setter
    def nfvis_from_site(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NfviDetailsArgs']]]]):
        pulumi.set(self, "nfvis_from_site", value)

    @property
    @pulumi.getter(name="resourceElementTemplates")
    def resource_element_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArmResourceDefinitionResourceElementTemplateDetailsArgs', 'NetworkFunctionDefinitionResourceElementTemplateDetailsArgs']]]]]:
        """
        List of resource element template
        """
        return pulumi.get(self, "resource_element_templates")

    @resource_element_templates.setter
    def resource_element_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ArmResourceDefinitionResourceElementTemplateDetailsArgs', 'NetworkFunctionDefinitionResourceElementTemplateDetailsArgs']]]]]):
        pulumi.set(self, "resource_element_templates", value)


@pulumi.input_type
class NfviDetailsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The nfvi details.
        :param pulumi.Input[str] name: The nfvi name.
        :param pulumi.Input[str] type: The nfvi type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The nfvi name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The nfvi type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class OpenDeploymentResourceReferenceArgs:
    def __init__(__self__, *,
                 id_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        Non secret deployment resource id reference.
        :param pulumi.Input[str] id_type: The resource reference arm id type.
               Expected value is 'Open'.
        :param pulumi.Input[str] id: Resource ID.
        """
        pulumi.set(__self__, "id_type", 'Open')
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> pulumi.Input[str]:
        """
        The resource reference arm id type.
        Expected value is 'Open'.
        """
        return pulumi.get(self, "id_type")

    @id_type.setter
    def id_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "id_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PublisherPropertiesFormatArgs:
    def __init__(__self__, *,
                 scope: Optional[pulumi.Input[Union[str, 'PublisherScope']]] = None):
        """
        publisher properties.
        :param pulumi.Input[Union[str, 'PublisherScope']] scope: The publisher scope.
        """
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[Union[str, 'PublisherScope']]]:
        """
        The publisher scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[Union[str, 'PublisherScope']]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class ReferencedResourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Reference to another resource.
        :param pulumi.Input[str] id: Resource ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SecretDeploymentResourceReferenceArgs:
    def __init__(__self__, *,
                 id_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        Secret deployment resource id reference.
        :param pulumi.Input[str] id_type: The resource reference arm id type.
               Expected value is 'Secret'.
        :param pulumi.Input[str] id: Resource ID.
        """
        pulumi.set(__self__, "id_type", 'Secret')
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> pulumi.Input[str]:
        """
        The resource reference arm id type.
        Expected value is 'Secret'.
        """
        return pulumi.get(self, "id_type")

    @id_type.setter
    def id_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "id_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SiteNetworkServicePropertiesFormatArgs:
    def __init__(__self__, *,
                 desired_state_configuration_group_value_references: Optional[pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]]] = None,
                 managed_resource_group_configuration: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']] = None,
                 network_service_design_version_resource_reference: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]] = None,
                 site_reference: Optional[pulumi.Input['ReferencedResourceArgs']] = None):
        """
        Site network service properties.
        :param pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]] desired_state_configuration_group_value_references: The goal state of the site network service resource. This has references to the configuration group value objects that describe the desired state of the site network service.
        :param pulumi.Input['ManagedResourceGroupConfigurationArgs'] managed_resource_group_configuration: Managed resource group configuration.
        :param pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']] network_service_design_version_resource_reference: The network service design version resource reference.
        :param pulumi.Input['ReferencedResourceArgs'] site_reference: The site details
        """
        if desired_state_configuration_group_value_references is not None:
            pulumi.set(__self__, "desired_state_configuration_group_value_references", desired_state_configuration_group_value_references)
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        if network_service_design_version_resource_reference is not None:
            pulumi.set(__self__, "network_service_design_version_resource_reference", network_service_design_version_resource_reference)
        if site_reference is not None:
            pulumi.set(__self__, "site_reference", site_reference)

    @property
    @pulumi.getter(name="desiredStateConfigurationGroupValueReferences")
    def desired_state_configuration_group_value_references(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]]]:
        """
        The goal state of the site network service resource. This has references to the configuration group value objects that describe the desired state of the site network service.
        """
        return pulumi.get(self, "desired_state_configuration_group_value_references")

    @desired_state_configuration_group_value_references.setter
    def desired_state_configuration_group_value_references(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ReferencedResourceArgs']]]]):
        pulumi.set(self, "desired_state_configuration_group_value_references", value)

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]:
        """
        Managed resource group configuration.
        """
        return pulumi.get(self, "managed_resource_group_configuration")

    @managed_resource_group_configuration.setter
    def managed_resource_group_configuration(self, value: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]):
        pulumi.set(self, "managed_resource_group_configuration", value)

    @property
    @pulumi.getter(name="networkServiceDesignVersionResourceReference")
    def network_service_design_version_resource_reference(self) -> Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]:
        """
        The network service design version resource reference.
        """
        return pulumi.get(self, "network_service_design_version_resource_reference")

    @network_service_design_version_resource_reference.setter
    def network_service_design_version_resource_reference(self, value: Optional[pulumi.Input[Union['OpenDeploymentResourceReferenceArgs', 'SecretDeploymentResourceReferenceArgs']]]):
        pulumi.set(self, "network_service_design_version_resource_reference", value)

    @property
    @pulumi.getter(name="siteReference")
    def site_reference(self) -> Optional[pulumi.Input['ReferencedResourceArgs']]:
        """
        The site details
        """
        return pulumi.get(self, "site_reference")

    @site_reference.setter
    def site_reference(self, value: Optional[pulumi.Input['ReferencedResourceArgs']]):
        pulumi.set(self, "site_reference", value)


@pulumi.input_type
class SitePropertiesFormatArgs:
    def __init__(__self__, *,
                 nfvis: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureArcK8sClusterNFVIDetailsArgs', 'AzureCoreNFVIDetailsArgs', 'AzureOperatorNexusClusterNFVIDetailsArgs']]]]] = None):
        """
        Site properties.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AzureArcK8sClusterNFVIDetailsArgs', 'AzureCoreNFVIDetailsArgs', 'AzureOperatorNexusClusterNFVIDetailsArgs']]]] nfvis: List of NFVIs
        """
        if nfvis is not None:
            pulumi.set(__self__, "nfvis", nfvis)

    @property
    @pulumi.getter
    def nfvis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureArcK8sClusterNFVIDetailsArgs', 'AzureCoreNFVIDetailsArgs', 'AzureOperatorNexusClusterNFVIDetailsArgs']]]]]:
        """
        List of NFVIs
        """
        return pulumi.get(self, "nfvis")

    @nfvis.setter
    def nfvis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AzureArcK8sClusterNFVIDetailsArgs', 'AzureCoreNFVIDetailsArgs', 'AzureOperatorNexusClusterNFVIDetailsArgs']]]]]):
        pulumi.set(self, "nfvis", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Union[str, 'SkuName']]):
        """
        Sku, to be associated with a SiteNetworkService.
        :param pulumi.Input[Union[str, 'SkuName']] name: Name of this Sku
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'SkuName']]:
        """
        Name of this Sku
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'SkuName']]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VhdImageArtifactProfileArgs:
    def __init__(__self__, *,
                 vhd_name: Optional[pulumi.Input[str]] = None,
                 vhd_version: Optional[pulumi.Input[str]] = None):
        """
        Vhd artifact profile.
        :param pulumi.Input[str] vhd_name: Vhd name.
        :param pulumi.Input[str] vhd_version: Vhd version.
        """
        if vhd_name is not None:
            pulumi.set(__self__, "vhd_name", vhd_name)
        if vhd_version is not None:
            pulumi.set(__self__, "vhd_version", vhd_version)

    @property
    @pulumi.getter(name="vhdName")
    def vhd_name(self) -> Optional[pulumi.Input[str]]:
        """
        Vhd name.
        """
        return pulumi.get(self, "vhd_name")

    @vhd_name.setter
    def vhd_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vhd_name", value)

    @property
    @pulumi.getter(name="vhdVersion")
    def vhd_version(self) -> Optional[pulumi.Input[str]]:
        """
        Vhd version.
        """
        return pulumi.get(self, "vhd_version")

    @vhd_version.setter
    def vhd_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vhd_version", value)


@pulumi.input_type
class VhdImageMappingRuleProfileArgs:
    def __init__(__self__, *,
                 user_configuration: Optional[pulumi.Input[str]] = None):
        """
        Vhd mapping rule profile
        :param pulumi.Input[str] user_configuration: List of values.
        """
        if user_configuration is not None:
            pulumi.set(__self__, "user_configuration", user_configuration)

    @property
    @pulumi.getter(name="userConfiguration")
    def user_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        List of values.
        """
        return pulumi.get(self, "user_configuration")

    @user_configuration.setter
    def user_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_configuration", value)


@pulumi.input_type
class VirtualNetworkFunctionNetworkFunctionDefinitionVersionArgs:
    def __init__(__self__, *,
                 network_function_type: pulumi.Input[str],
                 deploy_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 network_function_template: Optional[pulumi.Input[Union['AzureCoreNetworkFunctionTemplateArgs', 'AzureOperatorNexusNetworkFunctionTemplateArgs']]] = None):
        """
        Virtual network function network function definition version properties.
        :param pulumi.Input[str] network_function_type: The network function type.
               Expected value is 'VirtualNetworkFunction'.
        :param pulumi.Input[str] deploy_parameters: The deployment parameters of the network function definition version.
        :param pulumi.Input[str] description: The network function definition version description.
        :param pulumi.Input[Union['AzureCoreNetworkFunctionTemplateArgs', 'AzureOperatorNexusNetworkFunctionTemplateArgs']] network_function_template: Virtual network function template.
        """
        pulumi.set(__self__, "network_function_type", 'VirtualNetworkFunction')
        if deploy_parameters is not None:
            pulumi.set(__self__, "deploy_parameters", deploy_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if network_function_template is not None:
            pulumi.set(__self__, "network_function_template", network_function_template)

    @property
    @pulumi.getter(name="networkFunctionType")
    def network_function_type(self) -> pulumi.Input[str]:
        """
        The network function type.
        Expected value is 'VirtualNetworkFunction'.
        """
        return pulumi.get(self, "network_function_type")

    @network_function_type.setter
    def network_function_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_function_type", value)

    @property
    @pulumi.getter(name="deployParameters")
    def deploy_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The deployment parameters of the network function definition version.
        """
        return pulumi.get(self, "deploy_parameters")

    @deploy_parameters.setter
    def deploy_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The network function definition version description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="networkFunctionTemplate")
    def network_function_template(self) -> Optional[pulumi.Input[Union['AzureCoreNetworkFunctionTemplateArgs', 'AzureOperatorNexusNetworkFunctionTemplateArgs']]]:
        """
        Virtual network function template.
        """
        return pulumi.get(self, "network_function_template")

    @network_function_template.setter
    def network_function_template(self, value: Optional[pulumi.Input[Union['AzureCoreNetworkFunctionTemplateArgs', 'AzureOperatorNexusNetworkFunctionTemplateArgs']]]):
        pulumi.set(self, "network_function_template", value)


