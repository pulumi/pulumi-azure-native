# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AudioTrackResponse',
    'HlsSettingsResponse',
    'TextTrackResponse',
    'VideoTrackResponse',
]

@pulumi.output_type
class AudioTrackResponse(dict):
    """
    Represents an audio track in the asset.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "odataType":
            suggest = "odata_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AudioTrackResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AudioTrackResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AudioTrackResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 odata_type: str):
        """
        Represents an audio track in the asset.
        :param str odata_type: The discriminator for derived types.
               Expected value is '#Microsoft.Media.AudioTrack'.
        """
        pulumi.set(__self__, "odata_type", '#Microsoft.Media.AudioTrack')

    @property
    @pulumi.getter(name="odataType")
    def odata_type(self) -> str:
        """
        The discriminator for derived types.
        Expected value is '#Microsoft.Media.AudioTrack'.
        """
        return pulumi.get(self, "odata_type")


@pulumi.output_type
class HlsSettingsResponse(dict):
    """
    The HLS setting for a text track.
    """
    def __init__(__self__, *,
                 characteristics: Optional[str] = None,
                 default: Optional[bool] = None,
                 forced: Optional[bool] = None):
        """
        The HLS setting for a text track.
        :param str characteristics: The characteristics for the HLS setting.
        :param bool default: The default for the HLS setting.
        :param bool forced: The forced for the HLS setting.
        """
        if characteristics is not None:
            pulumi.set(__self__, "characteristics", characteristics)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if forced is not None:
            pulumi.set(__self__, "forced", forced)

    @property
    @pulumi.getter
    def characteristics(self) -> Optional[str]:
        """
        The characteristics for the HLS setting.
        """
        return pulumi.get(self, "characteristics")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        The default for the HLS setting.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def forced(self) -> Optional[bool]:
        """
        The forced for the HLS setting.
        """
        return pulumi.get(self, "forced")


@pulumi.output_type
class TextTrackResponse(dict):
    """
    Represents a text track in an asset. A text track is usually used for sparse data related to the audio or video tracks.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageCode":
            suggest = "language_code"
        elif key == "odataType":
            suggest = "odata_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "fileName":
            suggest = "file_name"
        elif key == "hlsSettings":
            suggest = "hls_settings"
        elif key == "playerVisibility":
            suggest = "player_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TextTrackResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TextTrackResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TextTrackResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_code: str,
                 odata_type: str,
                 display_name: Optional[str] = None,
                 file_name: Optional[str] = None,
                 hls_settings: Optional['outputs.HlsSettingsResponse'] = None,
                 player_visibility: Optional[str] = None):
        """
        Represents a text track in an asset. A text track is usually used for sparse data related to the audio or video tracks.
        :param str language_code: The RFC5646 language code for the text track.
        :param str odata_type: The discriminator for derived types.
               Expected value is '#Microsoft.Media.TextTrack'.
        :param str display_name: The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
        :param str file_name: The file name to the source file. This file is located in the storage container of the asset.
        :param 'HlsSettingsResponse' hls_settings: The HLS specific setting for the text track.
        :param str player_visibility: When PlayerVisibility is set to "Visible", the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to "Hidden", the text will not be available to the client. The default value is "Visible".
        """
        pulumi.set(__self__, "language_code", language_code)
        pulumi.set(__self__, "odata_type", '#Microsoft.Media.TextTrack')
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if hls_settings is not None:
            pulumi.set(__self__, "hls_settings", hls_settings)
        if player_visibility is not None:
            pulumi.set(__self__, "player_visibility", player_visibility)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        The RFC5646 language code for the text track.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="odataType")
    def odata_type(self) -> str:
        """
        The discriminator for derived types.
        Expected value is '#Microsoft.Media.TextTrack'.
        """
        return pulumi.get(self, "odata_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        """
        The file name to the source file. This file is located in the storage container of the asset.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="hlsSettings")
    def hls_settings(self) -> Optional['outputs.HlsSettingsResponse']:
        """
        The HLS specific setting for the text track.
        """
        return pulumi.get(self, "hls_settings")

    @property
    @pulumi.getter(name="playerVisibility")
    def player_visibility(self) -> Optional[str]:
        """
        When PlayerVisibility is set to "Visible", the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to "Hidden", the text will not be available to the client. The default value is "Visible".
        """
        return pulumi.get(self, "player_visibility")


@pulumi.output_type
class VideoTrackResponse(dict):
    """
    Represents a video track in the asset.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "odataType":
            suggest = "odata_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VideoTrackResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VideoTrackResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VideoTrackResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 odata_type: str):
        """
        Represents a video track in the asset.
        :param str odata_type: The discriminator for derived types.
               Expected value is '#Microsoft.Media.VideoTrack'.
        """
        pulumi.set(__self__, "odata_type", '#Microsoft.Media.VideoTrack')

    @property
    @pulumi.getter(name="odataType")
    def odata_type(self) -> str:
        """
        The discriminator for derived types.
        Expected value is '#Microsoft.Media.VideoTrack'.
        """
        return pulumi.get(self, "odata_type")


