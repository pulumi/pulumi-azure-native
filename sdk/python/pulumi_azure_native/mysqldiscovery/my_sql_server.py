# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['MySQLServerArgs', 'MySQLServer']

@pulumi.input_type
class MySQLServerArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[builtins.str],
                 port_number: pulumi.Input[builtins.str],
                 resource_group_name: pulumi.Input[builtins.str],
                 site_name: pulumi.Input[builtins.str],
                 edition: Optional[pulumi.Input[Union[builtins.str, 'Edition']]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['ErrorArgs']]]] = None,
                 host_ip: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 machine_id: Optional[pulumi.Input[builtins.str]] = None,
                 mysql_version: Optional[pulumi.Input[builtins.str]] = None,
                 number_of_database: Optional[pulumi.Input[builtins.float]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[builtins.str, 'ProvisioningState']]] = None,
                 server_name: Optional[pulumi.Input[builtins.str]] = None,
                 support_end_in: Optional[pulumi.Input[builtins.str]] = None,
                 support_status: Optional[pulumi.Input[Union[builtins.str, 'SupportStatus']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a MySQLServer resource.
        :param pulumi.Input[builtins.str] host_name: The Server IP/host name.
        :param pulumi.Input[builtins.str] port_number: MySQL Server port number
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] site_name: The name of Site
        :param pulumi.Input[Union[builtins.str, 'Edition']] edition: mysql server edition.
        :param pulumi.Input[Sequence[pulumi.Input['ErrorArgs']]] errors: The list of errors.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_ip: The Server IP/host name.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Resource labels.
        :param pulumi.Input[builtins.str] machine_id: discovery Machine Id
        :param pulumi.Input[builtins.str] mysql_version: The mysql server version.
        :param pulumi.Input[builtins.float] number_of_database: The number of database.
        :param pulumi.Input[Union[builtins.str, 'ProvisioningState']] provisioning_state: Gets or sets the provisioning state.
        :param pulumi.Input[builtins.str] server_name: The name of Server
        :param pulumi.Input[builtins.str] support_end_in: Time when mysql version support end.
        :param pulumi.Input[Union[builtins.str, 'SupportStatus']] support_status: mysql version support status.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "port_number", port_number)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "site_name", site_name)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_id is not None:
            pulumi.set(__self__, "machine_id", machine_id)
        if mysql_version is not None:
            pulumi.set(__self__, "mysql_version", mysql_version)
        if number_of_database is not None:
            pulumi.set(__self__, "number_of_database", number_of_database)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if support_end_in is not None:
            pulumi.set(__self__, "support_end_in", support_end_in)
        if support_status is not None:
            pulumi.set(__self__, "support_status", support_status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[builtins.str]:
        """
        The Server IP/host name.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[builtins.str]:
        """
        MySQL Server port number
        """
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of Site
        """
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input[Union[builtins.str, 'Edition']]]:
        """
        mysql server edition.
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input[Union[builtins.str, 'Edition']]]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ErrorArgs']]]]:
        """
        The list of errors.
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The Server IP/host name.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        discovery Machine Id
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The mysql server version.
        """
        return pulumi.get(self, "mysql_version")

    @mysql_version.setter
    def mysql_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mysql_version", value)

    @property
    @pulumi.getter(name="numberOfDatabase")
    def number_of_database(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The number of database.
        """
        return pulumi.get(self, "number_of_database")

    @number_of_database.setter
    def number_of_database(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "number_of_database", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[builtins.str, 'ProvisioningState']]]:
        """
        Gets or sets the provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[builtins.str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of Server
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="supportEndIn")
    def support_end_in(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Time when mysql version support end.
        """
        return pulumi.get(self, "support_end_in")

    @support_end_in.setter
    def support_end_in(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_end_in", value)

    @property
    @pulumi.getter(name="supportStatus")
    def support_status(self) -> Optional[pulumi.Input[Union[builtins.str, 'SupportStatus']]]:
        """
        mysql version support status.
        """
        return pulumi.get(self, "support_status")

    @support_status.setter
    def support_status(self, value: Optional[pulumi.Input[Union[builtins.str, 'SupportStatus']]]):
        pulumi.set(self, "support_status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


class MySQLServer(pulumi.CustomResource):

    pulumi_type = "azure-native:mysqldiscovery:MySQLServer"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edition: Optional[pulumi.Input[Union[builtins.str, 'Edition']]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ErrorArgs', 'ErrorArgsDict']]]]] = None,
                 host_ip: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 host_name: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 machine_id: Optional[pulumi.Input[builtins.str]] = None,
                 mysql_version: Optional[pulumi.Input[builtins.str]] = None,
                 number_of_database: Optional[pulumi.Input[builtins.float]] = None,
                 port_number: Optional[pulumi.Input[builtins.str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[builtins.str, 'ProvisioningState']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 server_name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 support_end_in: Optional[pulumi.Input[builtins.str]] = None,
                 support_status: Optional[pulumi.Input[Union[builtins.str, 'SupportStatus']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        The MySQLServer resource definition.

        Uses Azure REST API version 2024-09-30-preview. In version 2.x of the Azure Native provider, it used API version 2024-09-30-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[builtins.str, 'Edition']] edition: mysql server edition.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ErrorArgs', 'ErrorArgsDict']]]] errors: The list of errors.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_ip: The Server IP/host name.
        :param pulumi.Input[builtins.str] host_name: The Server IP/host name.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Resource labels.
        :param pulumi.Input[builtins.str] machine_id: discovery Machine Id
        :param pulumi.Input[builtins.str] mysql_version: The mysql server version.
        :param pulumi.Input[builtins.float] number_of_database: The number of database.
        :param pulumi.Input[builtins.str] port_number: MySQL Server port number
        :param pulumi.Input[Union[builtins.str, 'ProvisioningState']] provisioning_state: Gets or sets the provisioning state.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] server_name: The name of Server
        :param pulumi.Input[builtins.str] site_name: The name of Site
        :param pulumi.Input[builtins.str] support_end_in: Time when mysql version support end.
        :param pulumi.Input[Union[builtins.str, 'SupportStatus']] support_status: mysql version support status.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MySQLServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The MySQLServer resource definition.

        Uses Azure REST API version 2024-09-30-preview. In version 2.x of the Azure Native provider, it used API version 2024-09-30-preview.

        :param str resource_name: The name of the resource.
        :param MySQLServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MySQLServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edition: Optional[pulumi.Input[Union[builtins.str, 'Edition']]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ErrorArgs', 'ErrorArgsDict']]]]] = None,
                 host_ip: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 host_name: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 machine_id: Optional[pulumi.Input[builtins.str]] = None,
                 mysql_version: Optional[pulumi.Input[builtins.str]] = None,
                 number_of_database: Optional[pulumi.Input[builtins.float]] = None,
                 port_number: Optional[pulumi.Input[builtins.str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[builtins.str, 'ProvisioningState']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 server_name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 support_end_in: Optional[pulumi.Input[builtins.str]] = None,
                 support_status: Optional[pulumi.Input[Union[builtins.str, 'SupportStatus']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MySQLServerArgs.__new__(MySQLServerArgs)

            __props__.__dict__["edition"] = edition
            __props__.__dict__["errors"] = errors
            __props__.__dict__["host_ip"] = host_ip
            if host_name is None and not opts.urn:
                raise TypeError("Missing required property 'host_name'")
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["labels"] = labels
            __props__.__dict__["machine_id"] = machine_id
            __props__.__dict__["mysql_version"] = mysql_version
            __props__.__dict__["number_of_database"] = number_of_database
            if port_number is None and not opts.urn:
                raise TypeError("Missing required property 'port_number'")
            __props__.__dict__["port_number"] = port_number
            __props__.__dict__["provisioning_state"] = provisioning_state
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["server_name"] = server_name
            if site_name is None and not opts.urn:
                raise TypeError("Missing required property 'site_name'")
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["support_end_in"] = support_end_in
            __props__.__dict__["support_status"] = support_status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:mysqldiscovery/v20240930preview:MySQLServer")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(MySQLServer, __self__).__init__(
            'azure-native:mysqldiscovery:MySQLServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MySQLServer':
        """
        Get an existing MySQLServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MySQLServerArgs.__new__(MySQLServerArgs)

        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["edition"] = None
        __props__.__dict__["errors"] = None
        __props__.__dict__["host_ip"] = None
        __props__.__dict__["host_name"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["machine_id"] = None
        __props__.__dict__["mysql_version"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["number_of_database"] = None
        __props__.__dict__["port_number"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["support_end_in"] = None
        __props__.__dict__["support_status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return MySQLServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def edition(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        mysql server edition.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Output[Optional[Sequence['outputs.ErrorResponse']]]:
        """
        The list of errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The Server IP/host name.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[builtins.str]:
        """
        The Server IP/host name.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        discovery Machine Id
        """
        return pulumi.get(self, "machine_id")

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The mysql server version.
        """
        return pulumi.get(self, "mysql_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfDatabase")
    def number_of_database(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        The number of database.
        """
        return pulumi.get(self, "number_of_database")

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Output[builtins.str]:
        """
        MySQL Server port number
        """
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Gets or sets the provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="supportEndIn")
    def support_end_in(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Time when mysql version support end.
        """
        return pulumi.get(self, "support_end_in")

    @property
    @pulumi.getter(name="supportStatus")
    def support_status(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        mysql version support status.
        """
        return pulumi.get(self, "support_status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

