# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMySQLServerResult',
    'AwaitableGetMySQLServerResult',
    'get_my_sql_server',
    'get_my_sql_server_output',
]

@pulumi.output_type
class GetMySQLServerResult:
    """
    The MySQLServer resource definition.
    """
    def __init__(__self__, azure_api_version=None, edition=None, errors=None, host_ip=None, host_name=None, id=None, labels=None, machine_id=None, mysql_version=None, name=None, number_of_database=None, port_number=None, provisioning_state=None, support_end_in=None, support_status=None, system_data=None, tags=None, type=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if edition and not isinstance(edition, str):
            raise TypeError("Expected argument 'edition' to be a str")
        pulumi.set(__self__, "edition", edition)
        if errors and not isinstance(errors, list):
            raise TypeError("Expected argument 'errors' to be a list")
        pulumi.set(__self__, "errors", errors)
        if host_ip and not isinstance(host_ip, list):
            raise TypeError("Expected argument 'host_ip' to be a list")
        pulumi.set(__self__, "host_ip", host_ip)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if machine_id and not isinstance(machine_id, str):
            raise TypeError("Expected argument 'machine_id' to be a str")
        pulumi.set(__self__, "machine_id", machine_id)
        if mysql_version and not isinstance(mysql_version, str):
            raise TypeError("Expected argument 'mysql_version' to be a str")
        pulumi.set(__self__, "mysql_version", mysql_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_database and not isinstance(number_of_database, float):
            raise TypeError("Expected argument 'number_of_database' to be a float")
        pulumi.set(__self__, "number_of_database", number_of_database)
        if port_number and not isinstance(port_number, str):
            raise TypeError("Expected argument 'port_number' to be a str")
        pulumi.set(__self__, "port_number", port_number)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if support_end_in and not isinstance(support_end_in, str):
            raise TypeError("Expected argument 'support_end_in' to be a str")
        pulumi.set(__self__, "support_end_in", support_end_in)
        if support_status and not isinstance(support_status, str):
            raise TypeError("Expected argument 'support_status' to be a str")
        pulumi.set(__self__, "support_status", support_status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        """
        mysql server edition.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.ErrorResponse']]:
        """
        The list of errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[Sequence[str]]:
        """
        The Server IP/host name.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The Server IP/host name.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Resource labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> Optional[str]:
        """
        discovery Machine Id
        """
        return pulumi.get(self, "machine_id")

    @property
    @pulumi.getter(name="mysqlVersion")
    def mysql_version(self) -> Optional[str]:
        """
        The mysql server version.
        """
        return pulumi.get(self, "mysql_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfDatabase")
    def number_of_database(self) -> Optional[float]:
        """
        The number of database.
        """
        return pulumi.get(self, "number_of_database")

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> str:
        """
        MySQL Server port number
        """
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        Gets or sets the provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="supportEndIn")
    def support_end_in(self) -> Optional[str]:
        """
        Time when mysql version support end.
        """
        return pulumi.get(self, "support_end_in")

    @property
    @pulumi.getter(name="supportStatus")
    def support_status(self) -> Optional[str]:
        """
        mysql version support status.
        """
        return pulumi.get(self, "support_status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetMySQLServerResult(GetMySQLServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMySQLServerResult(
            azure_api_version=self.azure_api_version,
            edition=self.edition,
            errors=self.errors,
            host_ip=self.host_ip,
            host_name=self.host_name,
            id=self.id,
            labels=self.labels,
            machine_id=self.machine_id,
            mysql_version=self.mysql_version,
            name=self.name,
            number_of_database=self.number_of_database,
            port_number=self.port_number,
            provisioning_state=self.provisioning_state,
            support_end_in=self.support_end_in,
            support_status=self.support_status,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_my_sql_server(resource_group_name: Optional[str] = None,
                      server_name: Optional[str] = None,
                      site_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMySQLServerResult:
    """
    Gets the MySQLServers resource.
    Azure REST API version: 2024-09-30-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str server_name: The name of Server
    :param str site_name: The name of Site
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['serverName'] = server_name
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mysqldiscovery:getMySQLServer', __args__, opts=opts, typ=GetMySQLServerResult).value

    return AwaitableGetMySQLServerResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        edition=pulumi.get(__ret__, 'edition'),
        errors=pulumi.get(__ret__, 'errors'),
        host_ip=pulumi.get(__ret__, 'host_ip'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        machine_id=pulumi.get(__ret__, 'machine_id'),
        mysql_version=pulumi.get(__ret__, 'mysql_version'),
        name=pulumi.get(__ret__, 'name'),
        number_of_database=pulumi.get(__ret__, 'number_of_database'),
        port_number=pulumi.get(__ret__, 'port_number'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        support_end_in=pulumi.get(__ret__, 'support_end_in'),
        support_status=pulumi.get(__ret__, 'support_status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_my_sql_server_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                             server_name: Optional[pulumi.Input[str]] = None,
                             site_name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMySQLServerResult]:
    """
    Gets the MySQLServers resource.
    Azure REST API version: 2024-09-30-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str server_name: The name of Server
    :param str site_name: The name of Site
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['serverName'] = server_name
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:mysqldiscovery:getMySQLServer', __args__, opts=opts, typ=GetMySQLServerResult)
    return __ret__.apply(lambda __response__: GetMySQLServerResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        edition=pulumi.get(__response__, 'edition'),
        errors=pulumi.get(__response__, 'errors'),
        host_ip=pulumi.get(__response__, 'host_ip'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        machine_id=pulumi.get(__response__, 'machine_id'),
        mysql_version=pulumi.get(__response__, 'mysql_version'),
        name=pulumi.get(__response__, 'name'),
        number_of_database=pulumi.get(__response__, 'number_of_database'),
        port_number=pulumi.get(__response__, 'port_number'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        support_end_in=pulumi.get(__response__, 'support_end_in'),
        support_status=pulumi.get(__response__, 'support_status'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
