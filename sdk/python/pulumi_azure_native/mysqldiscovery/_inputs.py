# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ErrorArgs',
    'ErrorArgsDict',
    'ExtendedLocationArgs',
    'ExtendedLocationArgsDict',
]

MYPY = False

if not MYPY:
    class ErrorArgsDict(TypedDict):
        """
        Defines the error.
        """
        code: NotRequired[pulumi.Input[str]]
        """
        The error code.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The error ID.
        """
        message: NotRequired[pulumi.Input[str]]
        """
        The detailed error message.
        """
        possible_cause: NotRequired[pulumi.Input[str]]
        """
        The error possible cause.
        """
        recommended_action: NotRequired[pulumi.Input[str]]
        """
        Gets description of the checkpoint.
        """
        run_as_account_id: NotRequired[pulumi.Input[str]]
        """
        The account ID used to login.
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        Gets description of the severity.
        """
        summary_message: NotRequired[pulumi.Input[str]]
        """
        The summarized error message.
        """
        updated_time_stamp: NotRequired[pulumi.Input[str]]
        """
        Time when this error was last updated.
        """
elif False:
    ErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ErrorArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 possible_cause: Optional[pulumi.Input[str]] = None,
                 recommended_action: Optional[pulumi.Input[str]] = None,
                 run_as_account_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 summary_message: Optional[pulumi.Input[str]] = None,
                 updated_time_stamp: Optional[pulumi.Input[str]] = None):
        """
        Defines the error.
        :param pulumi.Input[str] code: The error code.
        :param pulumi.Input[str] id: The error ID.
        :param pulumi.Input[str] message: The detailed error message.
        :param pulumi.Input[str] possible_cause: The error possible cause.
        :param pulumi.Input[str] recommended_action: Gets description of the checkpoint.
        :param pulumi.Input[str] run_as_account_id: The account ID used to login.
        :param pulumi.Input[str] severity: Gets description of the severity.
        :param pulumi.Input[str] summary_message: The summarized error message.
        :param pulumi.Input[str] updated_time_stamp: Time when this error was last updated.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if possible_cause is not None:
            pulumi.set(__self__, "possible_cause", possible_cause)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if run_as_account_id is not None:
            pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary_message is not None:
            pulumi.set(__self__, "summary_message", summary_message)
        if updated_time_stamp is not None:
            pulumi.set(__self__, "updated_time_stamp", updated_time_stamp)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The error ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The detailed error message.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="possibleCause")
    def possible_cause(self) -> Optional[pulumi.Input[str]]:
        """
        The error possible cause.
        """
        return pulumi.get(self, "possible_cause")

    @possible_cause.setter
    def possible_cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "possible_cause", value)

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[pulumi.Input[str]]:
        """
        Gets description of the checkpoint.
        """
        return pulumi.get(self, "recommended_action")

    @recommended_action.setter
    def recommended_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recommended_action", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account ID used to login.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Gets description of the severity.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="summaryMessage")
    def summary_message(self) -> Optional[pulumi.Input[str]]:
        """
        The summarized error message.
        """
        return pulumi.get(self, "summary_message")

    @summary_message.setter
    def summary_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_message", value)

    @property
    @pulumi.getter(name="updatedTimeStamp")
    def updated_time_stamp(self) -> Optional[pulumi.Input[str]]:
        """
        Time when this error was last updated.
        """
        return pulumi.get(self, "updated_time_stamp")

    @updated_time_stamp.setter
    def updated_time_stamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time_stamp", value)


if not MYPY:
    class ExtendedLocationArgsDict(TypedDict):
        """
        The extended location for off-azure resources.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The extended location name.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The extended location type.
        """
elif False:
    ExtendedLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The extended location for off-azure resources.
        :param pulumi.Input[str] name: The extended location name.
        :param pulumi.Input[str] type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


