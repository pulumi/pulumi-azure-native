# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CapacityReservationGroupInstanceViewResponse',
    'CapacityReservationInstanceViewResponse',
    'CapacityReservationInstanceViewWithNameResponse',
    'CapacityReservationUtilizationResponse',
    'InstanceViewStatusResponse',
    'LogAnalyticsOutputResponse',
    'SkuResponse',
    'SubResourceReadOnlyResponse',
]

@pulumi.output_type
class CapacityReservationGroupInstanceViewResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityReservations":
            suggest = "capacity_reservations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CapacityReservationGroupInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CapacityReservationGroupInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CapacityReservationGroupInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_reservations: Sequence['outputs.CapacityReservationInstanceViewWithNameResponse']):
        """
        :param Sequence['CapacityReservationInstanceViewWithNameResponse'] capacity_reservations: List of instance view of the capacity reservations under the capacity reservation group.
        """
        pulumi.set(__self__, "capacity_reservations", capacity_reservations)

    @property
    @pulumi.getter(name="capacityReservations")
    def capacity_reservations(self) -> Sequence['outputs.CapacityReservationInstanceViewWithNameResponse']:
        """
        List of instance view of the capacity reservations under the capacity reservation group.
        """
        return pulumi.get(self, "capacity_reservations")


@pulumi.output_type
class CapacityReservationInstanceViewResponse(dict):
    """
    The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "utilizationInfo":
            suggest = "utilization_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CapacityReservationInstanceViewResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CapacityReservationInstanceViewResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CapacityReservationInstanceViewResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 statuses: Optional[Sequence['outputs.InstanceViewStatusResponse']] = None,
                 utilization_info: Optional['outputs.CapacityReservationUtilizationResponse'] = None):
        """
        The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations.
        :param Sequence['InstanceViewStatusResponse'] statuses: The resource status information.
        :param 'CapacityReservationUtilizationResponse' utilization_info: Unutilized capacity of the capacity reservation.
        """
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if utilization_info is not None:
            pulumi.set(__self__, "utilization_info", utilization_info)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.InstanceViewStatusResponse']]:
        """
        The resource status information.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="utilizationInfo")
    def utilization_info(self) -> Optional['outputs.CapacityReservationUtilizationResponse']:
        """
        Unutilized capacity of the capacity reservation.
        """
        return pulumi.get(self, "utilization_info")


@pulumi.output_type
class CapacityReservationInstanceViewWithNameResponse(dict):
    """
    The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "utilizationInfo":
            suggest = "utilization_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CapacityReservationInstanceViewWithNameResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CapacityReservationInstanceViewWithNameResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CapacityReservationInstanceViewWithNameResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 statuses: Optional[Sequence['outputs.InstanceViewStatusResponse']] = None,
                 utilization_info: Optional['outputs.CapacityReservationUtilizationResponse'] = None):
        """
        The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group.
        :param str name: The name of the capacity reservation.
        :param Sequence['InstanceViewStatusResponse'] statuses: The resource status information.
        :param 'CapacityReservationUtilizationResponse' utilization_info: Unutilized capacity of the capacity reservation.
        """
        pulumi.set(__self__, "name", name)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if utilization_info is not None:
            pulumi.set(__self__, "utilization_info", utilization_info)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the capacity reservation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.InstanceViewStatusResponse']]:
        """
        The resource status information.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="utilizationInfo")
    def utilization_info(self) -> Optional['outputs.CapacityReservationUtilizationResponse']:
        """
        Unutilized capacity of the capacity reservation.
        """
        return pulumi.get(self, "utilization_info")


@pulumi.output_type
class CapacityReservationUtilizationResponse(dict):
    """
    Represents the capacity reservation utilization in terms of resources allocated.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualMachinesAllocated":
            suggest = "virtual_machines_allocated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CapacityReservationUtilizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CapacityReservationUtilizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CapacityReservationUtilizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 virtual_machines_allocated: Sequence['outputs.SubResourceReadOnlyResponse']):
        """
        Represents the capacity reservation utilization in terms of resources allocated.
        :param Sequence['SubResourceReadOnlyResponse'] virtual_machines_allocated: A list of all virtual machines resource ids allocated against the capacity reservation.
        """
        pulumi.set(__self__, "virtual_machines_allocated", virtual_machines_allocated)

    @property
    @pulumi.getter(name="virtualMachinesAllocated")
    def virtual_machines_allocated(self) -> Sequence['outputs.SubResourceReadOnlyResponse']:
        """
        A list of all virtual machines resource ids allocated against the capacity reservation.
        """
        return pulumi.get(self, "virtual_machines_allocated")


@pulumi.output_type
class InstanceViewStatusResponse(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceViewStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceViewStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceViewStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_status: Optional[str] = None,
                 level: Optional[str] = None,
                 message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        Instance view status.
        :param str code: The status code.
        :param str display_status: The short localizable label for the status.
        :param str level: The level code.
        :param str message: The detailed status message, including for alerts and error messages.
        :param str time: The time of the status.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[str]:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class LogAnalyticsOutputResponse(dict):
    """
    LogAnalytics output properties
    """
    def __init__(__self__, *,
                 output: str):
        """
        LogAnalytics output properties
        :param str output: Output file Uri path to blob container.
        """
        pulumi.set(__self__, "output", output)

    @property
    @pulumi.getter
    def output(self) -> str:
        """
        Output file Uri path to blob container.
        """
        return pulumi.get(self, "output")


@pulumi.output_type
class SkuResponse(dict):
    """
    Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
    """
    def __init__(__self__, *,
                 capacity: Optional[float] = None,
                 name: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
        :param float capacity: Specifies the number of virtual machines in the scale set.
        :param str name: The sku name.
        :param str tier: Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        """
        Specifies the number of virtual machines in the scale set.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The sku name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SubResourceReadOnlyResponse(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Resource Id
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")


