# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGalleryInVMAccessControlProfileVersionResult',
    'AwaitableGetGalleryInVMAccessControlProfileVersionResult',
    'get_gallery_in_vm_access_control_profile_version',
    'get_gallery_in_vm_access_control_profile_version_output',
]

@pulumi.output_type
class GetGalleryInVMAccessControlProfileVersionResult:
    """
    Specifies information about the gallery inVMAccessControlProfile version that you want to create or update.
    """
    def __init__(__self__, default_access=None, exclude_from_latest=None, id=None, location=None, mode=None, name=None, provisioning_state=None, published_date=None, replication_status=None, rules=None, tags=None, target_locations=None, type=None):
        if default_access and not isinstance(default_access, str):
            raise TypeError("Expected argument 'default_access' to be a str")
        pulumi.set(__self__, "default_access", default_access)
        if exclude_from_latest and not isinstance(exclude_from_latest, bool):
            raise TypeError("Expected argument 'exclude_from_latest' to be a bool")
        pulumi.set(__self__, "exclude_from_latest", exclude_from_latest)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if published_date and not isinstance(published_date, str):
            raise TypeError("Expected argument 'published_date' to be a str")
        pulumi.set(__self__, "published_date", published_date)
        if replication_status and not isinstance(replication_status, dict):
            raise TypeError("Expected argument 'replication_status' to be a dict")
        pulumi.set(__self__, "replication_status", replication_status)
        if rules and not isinstance(rules, dict):
            raise TypeError("Expected argument 'rules' to be a dict")
        pulumi.set(__self__, "rules", rules)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if target_locations and not isinstance(target_locations, list):
            raise TypeError("Expected argument 'target_locations' to be a list")
        pulumi.set(__self__, "target_locations", target_locations)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultAccess")
    def default_access(self) -> str:
        """
        This property allows you to specify if the requests will be allowed to access the host endpoints. Possible values are: 'Allow', 'Deny'.
        """
        return pulumi.get(self, "default_access")

    @property
    @pulumi.getter(name="excludeFromLatest")
    def exclude_from_latest(self) -> Optional[bool]:
        """
        If set to true, Virtual Machines deployed from the latest version of the Resource Profile won't use this Profile version.
        """
        return pulumi.get(self, "exclude_from_latest")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Resource location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        This property allows you to specify whether the access control rules are in Audit mode, in Enforce mode or Disabled. Possible values are: 'Audit', 'Enforce' or 'Disabled'.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state, which only appears in the response.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publishedDate")
    def published_date(self) -> str:
        """
        The timestamp for when the Resource Profile Version is published.
        """
        return pulumi.get(self, "published_date")

    @property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> 'outputs.ReplicationStatusResponse':
        """
        This is the replication status of the gallery image version.
        """
        return pulumi.get(self, "replication_status")

    @property
    @pulumi.getter
    def rules(self) -> Optional['outputs.AccessControlRulesResponse']:
        """
        This is the Access Control Rules specification for an inVMAccessControlProfile version.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetLocations")
    def target_locations(self) -> Optional[Sequence['outputs.TargetRegionResponse']]:
        """
        The target regions where the Resource Profile version is going to be replicated to. This property is updatable.
        """
        return pulumi.get(self, "target_locations")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetGalleryInVMAccessControlProfileVersionResult(GetGalleryInVMAccessControlProfileVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGalleryInVMAccessControlProfileVersionResult(
            default_access=self.default_access,
            exclude_from_latest=self.exclude_from_latest,
            id=self.id,
            location=self.location,
            mode=self.mode,
            name=self.name,
            provisioning_state=self.provisioning_state,
            published_date=self.published_date,
            replication_status=self.replication_status,
            rules=self.rules,
            tags=self.tags,
            target_locations=self.target_locations,
            type=self.type)


def get_gallery_in_vm_access_control_profile_version(gallery_name: Optional[str] = None,
                                                     in_vm_access_control_profile_name: Optional[str] = None,
                                                     in_vm_access_control_profile_version_name: Optional[str] = None,
                                                     resource_group_name: Optional[str] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGalleryInVMAccessControlProfileVersionResult:
    """
    Retrieves information about a gallery inVMAccessControlProfile version.
    Azure REST API version: 2024-03-03.


    :param str gallery_name: The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.
    :param str in_vm_access_control_profile_name: The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version resides.
    :param str in_vm_access_control_profile_version_name: The name of the gallery inVMAccessControlProfile version to be retrieved.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['galleryName'] = gallery_name
    __args__['inVMAccessControlProfileName'] = in_vm_access_control_profile_name
    __args__['inVMAccessControlProfileVersionName'] = in_vm_access_control_profile_version_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:compute:getGalleryInVMAccessControlProfileVersion', __args__, opts=opts, typ=GetGalleryInVMAccessControlProfileVersionResult).value

    return AwaitableGetGalleryInVMAccessControlProfileVersionResult(
        default_access=pulumi.get(__ret__, 'default_access'),
        exclude_from_latest=pulumi.get(__ret__, 'exclude_from_latest'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        published_date=pulumi.get(__ret__, 'published_date'),
        replication_status=pulumi.get(__ret__, 'replication_status'),
        rules=pulumi.get(__ret__, 'rules'),
        tags=pulumi.get(__ret__, 'tags'),
        target_locations=pulumi.get(__ret__, 'target_locations'),
        type=pulumi.get(__ret__, 'type'))
def get_gallery_in_vm_access_control_profile_version_output(gallery_name: Optional[pulumi.Input[str]] = None,
                                                            in_vm_access_control_profile_name: Optional[pulumi.Input[str]] = None,
                                                            in_vm_access_control_profile_version_name: Optional[pulumi.Input[str]] = None,
                                                            resource_group_name: Optional[pulumi.Input[str]] = None,
                                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGalleryInVMAccessControlProfileVersionResult]:
    """
    Retrieves information about a gallery inVMAccessControlProfile version.
    Azure REST API version: 2024-03-03.


    :param str gallery_name: The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.
    :param str in_vm_access_control_profile_name: The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version resides.
    :param str in_vm_access_control_profile_version_name: The name of the gallery inVMAccessControlProfile version to be retrieved.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['galleryName'] = gallery_name
    __args__['inVMAccessControlProfileName'] = in_vm_access_control_profile_name
    __args__['inVMAccessControlProfileVersionName'] = in_vm_access_control_profile_version_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:compute:getGalleryInVMAccessControlProfileVersion', __args__, opts=opts, typ=GetGalleryInVMAccessControlProfileVersionResult)
    return __ret__.apply(lambda __response__: GetGalleryInVMAccessControlProfileVersionResult(
        default_access=pulumi.get(__response__, 'default_access'),
        exclude_from_latest=pulumi.get(__response__, 'exclude_from_latest'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        published_date=pulumi.get(__response__, 'published_date'),
        replication_status=pulumi.get(__response__, 'replication_status'),
        rules=pulumi.get(__response__, 'rules'),
        tags=pulumi.get(__response__, 'tags'),
        target_locations=pulumi.get(__response__, 'target_locations'),
        type=pulumi.get(__response__, 'type')))
