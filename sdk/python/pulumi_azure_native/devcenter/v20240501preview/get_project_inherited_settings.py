# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetProjectInheritedSettingsResult',
    'AwaitableGetProjectInheritedSettingsResult',
    'get_project_inherited_settings',
    'get_project_inherited_settings_output',
]

@pulumi.output_type
class GetProjectInheritedSettingsResult:
    """
    Applicable inherited settings for a project.
    """
    def __init__(__self__, network_settings=None, project_catalog_settings=None):
        if network_settings and not isinstance(network_settings, dict):
            raise TypeError("Expected argument 'network_settings' to be a dict")
        pulumi.set(__self__, "network_settings", network_settings)
        if project_catalog_settings and not isinstance(project_catalog_settings, dict):
            raise TypeError("Expected argument 'project_catalog_settings' to be a dict")
        pulumi.set(__self__, "project_catalog_settings", project_catalog_settings)

    @property
    @pulumi.getter(name="networkSettings")
    def network_settings(self) -> 'outputs.ProjectNetworkSettingsResponse':
        """
        Network settings that will be enforced on this project.
        """
        return pulumi.get(self, "network_settings")

    @property
    @pulumi.getter(name="projectCatalogSettings")
    def project_catalog_settings(self) -> 'outputs.DevCenterProjectCatalogSettingsResponse':
        """
        Dev Center settings to be used when associating a project with a catalog.
        """
        return pulumi.get(self, "project_catalog_settings")


class AwaitableGetProjectInheritedSettingsResult(GetProjectInheritedSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectInheritedSettingsResult(
            network_settings=self.network_settings,
            project_catalog_settings=self.project_catalog_settings)


def get_project_inherited_settings(project_name: Optional[str] = None,
                                   resource_group_name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectInheritedSettingsResult:
    """
    Gets applicable inherited settings for this project.


    :param str project_name: The name of the project.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['projectName'] = project_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:devcenter/v20240501preview:getProjectInheritedSettings', __args__, opts=opts, typ=GetProjectInheritedSettingsResult).value

    return AwaitableGetProjectInheritedSettingsResult(
        network_settings=pulumi.get(__ret__, 'network_settings'),
        project_catalog_settings=pulumi.get(__ret__, 'project_catalog_settings'))


@_utilities.lift_output_func(get_project_inherited_settings)
def get_project_inherited_settings_output(project_name: Optional[pulumi.Input[str]] = None,
                                          resource_group_name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectInheritedSettingsResult]:
    """
    Gets applicable inherited settings for this project.


    :param str project_name: The name of the project.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
