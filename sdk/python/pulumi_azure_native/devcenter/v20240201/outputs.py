# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CatalogConflictErrorResponse',
    'CatalogErrorDetailsResponse',
    'CatalogSyncErrorResponse',
    'GitCatalogResponse',
    'SyncStatsResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class CatalogConflictErrorResponse(dict):
    """
    An individual conflict error.
    """
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        An individual conflict error.
        :param str name: Name of the conflicting catalog item.
        :param str path: The path of the file that has a conflicting name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the conflicting catalog item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the file that has a conflicting name.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class CatalogErrorDetailsResponse(dict):
    """
    Catalog error details
    """
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        """
        Catalog error details
        :param str code: An identifier for the error.
        :param str message: A message describing the error.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        An identifier for the error.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A message describing the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class CatalogSyncErrorResponse(dict):
    """
    An individual synchronization error.
    """
    def __init__(__self__, *,
                 error_details: Sequence['outputs.CatalogErrorDetailsResponse'],
                 path: str):
        """
        An individual synchronization error.
        :param Sequence['CatalogErrorDetailsResponse'] error_details: Errors associated with the file.
        :param str path: The path of the file the error is associated with.
        """
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.CatalogErrorDetailsResponse']:
        """
        Errors associated with the file.
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the file the error is associated with.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GitCatalogResponse(dict):
    """
    Properties for a Git repository catalog.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretIdentifier":
            suggest = "secret_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GitCatalogResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GitCatalogResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GitCatalogResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: Optional[str] = None,
                 path: Optional[str] = None,
                 secret_identifier: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        Properties for a Git repository catalog.
        :param str branch: Git branch.
        :param str path: The folder where the catalog items can be found inside the repository.
        :param str secret_identifier: A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        :param str uri: Git URI.
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if secret_identifier is not None:
            pulumi.set(__self__, "secret_identifier", secret_identifier)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        """
        Git branch.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The folder where the catalog items can be found inside the repository.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="secretIdentifier")
    def secret_identifier(self) -> Optional[str]:
        """
        A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        """
        return pulumi.get(self, "secret_identifier")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        Git URI.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class SyncStatsResponse(dict):
    """
    Stats of the synchronization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "synchronizationErrors":
            suggest = "synchronization_errors"
        elif key == "validationErrors":
            suggest = "validation_errors"
        elif key == "syncedCatalogItemTypes":
            suggest = "synced_catalog_item_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 added: int,
                 removed: int,
                 synchronization_errors: int,
                 unchanged: int,
                 updated: int,
                 validation_errors: int,
                 synced_catalog_item_types: Optional[Sequence[str]] = None):
        """
        Stats of the synchronization.
        :param int added: Count of catalog items added during synchronization.
        :param int removed: Count of catalog items removed during synchronization.
        :param int synchronization_errors: Count of synchronization errors that occured during synchronization.
        :param int unchanged: Count of catalog items that were unchanged during synchronization.
        :param int updated: Count of catalog items updated during synchronization.
        :param int validation_errors: Count of catalog items that had validation errors during synchronization.
        :param Sequence[str] synced_catalog_item_types: Indicates catalog item types that were synced.
        """
        pulumi.set(__self__, "added", added)
        pulumi.set(__self__, "removed", removed)
        pulumi.set(__self__, "synchronization_errors", synchronization_errors)
        pulumi.set(__self__, "unchanged", unchanged)
        pulumi.set(__self__, "updated", updated)
        pulumi.set(__self__, "validation_errors", validation_errors)
        if synced_catalog_item_types is not None:
            pulumi.set(__self__, "synced_catalog_item_types", synced_catalog_item_types)

    @property
    @pulumi.getter
    def added(self) -> int:
        """
        Count of catalog items added during synchronization.
        """
        return pulumi.get(self, "added")

    @property
    @pulumi.getter
    def removed(self) -> int:
        """
        Count of catalog items removed during synchronization.
        """
        return pulumi.get(self, "removed")

    @property
    @pulumi.getter(name="synchronizationErrors")
    def synchronization_errors(self) -> int:
        """
        Count of synchronization errors that occured during synchronization.
        """
        return pulumi.get(self, "synchronization_errors")

    @property
    @pulumi.getter
    def unchanged(self) -> int:
        """
        Count of catalog items that were unchanged during synchronization.
        """
        return pulumi.get(self, "unchanged")

    @property
    @pulumi.getter
    def updated(self) -> int:
        """
        Count of catalog items updated during synchronization.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> int:
        """
        Count of catalog items that had validation errors during synchronization.
        """
        return pulumi.get(self, "validation_errors")

    @property
    @pulumi.getter(name="syncedCatalogItemTypes")
    def synced_catalog_item_types(self) -> Optional[Sequence[str]]:
        """
        Indicates catalog item types that were synced.
        """
        return pulumi.get(self, "synced_catalog_item_types")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


