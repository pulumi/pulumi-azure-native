# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CapabilityResponse',
    'CatalogConflictErrorResponse',
    'CatalogErrorDetailsResponse',
    'CatalogSyncErrorResponse',
    'CustomerManagedKeyEncryptionResponse',
    'CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity',
    'DevCenterProjectCatalogSettingsResponse',
    'DevCenterSkuResponse',
    'EncryptionResponse',
    'EnvironmentRoleResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'GitCatalogResponse',
    'HealthStatusDetailResponse',
    'ImageCreationErrorDetailsResponse',
    'ImageDefinitionBuildTaskGroupResponse',
    'ImageDefinitionBuildTaskResponse',
    'ImageDefinitionBuildTaskResponseParameters',
    'ImageReferenceResponse',
    'ImageValidationErrorDetailsResponse',
    'ManagedServiceIdentityResponse',
    'PlanMemberSyncStatusResponse',
    'ProjectCatalogSettingsResponse',
    'ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment',
    'ProjectNetworkSettingsResponse',
    'ResourcePolicyResponse',
    'SkuResponse',
    'StopOnDisconnectConfigurationResponse',
    'SyncStatsResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'UserRoleAssignmentResponse',
]

@pulumi.output_type
class CapabilityResponse(dict):
    """
    A name/value pair to describe a capability.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        A name/value pair to describe a capability.
        :param _builtins.str name: Name of the capability.
        :param _builtins.str value: Value of the capability.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the capability.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the capability.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CatalogConflictErrorResponse(dict):
    """
    An individual conflict error.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 path: _builtins.str):
        """
        An individual conflict error.
        :param _builtins.str name: Name of the conflicting catalog item.
        :param _builtins.str path: The path of the file that has a conflicting name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the conflicting catalog item.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path of the file that has a conflicting name.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class CatalogErrorDetailsResponse(dict):
    """
    Catalog error details
    """
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None):
        """
        Catalog error details
        :param _builtins.str code: An identifier for the error.
        :param _builtins.str message: A message describing the error.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        An identifier for the error.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        A message describing the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class CatalogSyncErrorResponse(dict):
    """
    An individual synchronization error.
    """
    def __init__(__self__, *,
                 error_details: Sequence['outputs.CatalogErrorDetailsResponse'],
                 path: _builtins.str):
        """
        An individual synchronization error.
        :param Sequence['CatalogErrorDetailsResponse'] error_details: Errors associated with the file.
        :param _builtins.str path: The path of the file the error is associated with.
        """
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.CatalogErrorDetailsResponse']:
        """
        Errors associated with the file.
        """
        return pulumi.get(self, "error_details")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path of the file the error is associated with.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class CustomerManagedKeyEncryptionResponse(dict):
    """
    All Customer-managed key encryption properties for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyEncryptionKeyIdentity":
            suggest = "key_encryption_key_identity"
        elif key == "keyEncryptionKeyUrl":
            suggest = "key_encryption_key_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerManagedKeyEncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerManagedKeyEncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerManagedKeyEncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_encryption_key_identity: Optional['outputs.CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity'] = None,
                 key_encryption_key_url: Optional[_builtins.str] = None):
        """
        All Customer-managed key encryption properties for the resource.
        :param 'CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity' key_encryption_key_identity: All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        :param _builtins.str key_encryption_key_url: key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
        """
        if key_encryption_key_identity is not None:
            pulumi.set(__self__, "key_encryption_key_identity", key_encryption_key_identity)
        if key_encryption_key_url is not None:
            pulumi.set(__self__, "key_encryption_key_url", key_encryption_key_url)

    @_builtins.property
    @pulumi.getter(name="keyEncryptionKeyIdentity")
    def key_encryption_key_identity(self) -> Optional['outputs.CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity']:
        """
        All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        """
        return pulumi.get(self, "key_encryption_key_identity")

    @_builtins.property
    @pulumi.getter(name="keyEncryptionKeyUrl")
    def key_encryption_key_url(self) -> Optional[_builtins.str]:
        """
        key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
        """
        return pulumi.get(self, "key_encryption_key_url")


@pulumi.output_type
class CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity(dict):
    """
    All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "delegatedIdentityClientId":
            suggest = "delegated_identity_client_id"
        elif key == "identityType":
            suggest = "identity_type"
        elif key == "userAssignedIdentityResourceId":
            suggest = "user_assigned_identity_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delegated_identity_client_id: Optional[_builtins.str] = None,
                 identity_type: Optional[_builtins.str] = None,
                 user_assigned_identity_resource_id: Optional[_builtins.str] = None):
        """
        All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        :param _builtins.str delegated_identity_client_id: delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
        :param _builtins.str identity_type: Values can be systemAssignedIdentity or userAssignedIdentity
        :param _builtins.str user_assigned_identity_resource_id: user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
        """
        if delegated_identity_client_id is not None:
            pulumi.set(__self__, "delegated_identity_client_id", delegated_identity_client_id)
        if identity_type is not None:
            pulumi.set(__self__, "identity_type", identity_type)
        if user_assigned_identity_resource_id is not None:
            pulumi.set(__self__, "user_assigned_identity_resource_id", user_assigned_identity_resource_id)

    @_builtins.property
    @pulumi.getter(name="delegatedIdentityClientId")
    def delegated_identity_client_id(self) -> Optional[_builtins.str]:
        """
        delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
        """
        return pulumi.get(self, "delegated_identity_client_id")

    @_builtins.property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> Optional[_builtins.str]:
        """
        Values can be systemAssignedIdentity or userAssignedIdentity
        """
        return pulumi.get(self, "identity_type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentityResourceId")
    def user_assigned_identity_resource_id(self) -> Optional[_builtins.str]:
        """
        user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
        """
        return pulumi.get(self, "user_assigned_identity_resource_id")


@pulumi.output_type
class DevCenterProjectCatalogSettingsResponse(dict):
    """
    Project catalog settings for project catalogs under a project associated to this dev center.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogItemSyncEnableStatus":
            suggest = "catalog_item_sync_enable_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DevCenterProjectCatalogSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DevCenterProjectCatalogSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DevCenterProjectCatalogSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_item_sync_enable_status: Optional[_builtins.str] = None):
        """
        Project catalog settings for project catalogs under a project associated to this dev center.
        :param _builtins.str catalog_item_sync_enable_status: Whether project catalogs associated with projects in this dev center can be configured to sync catalog items.
        """
        if catalog_item_sync_enable_status is not None:
            pulumi.set(__self__, "catalog_item_sync_enable_status", catalog_item_sync_enable_status)

    @_builtins.property
    @pulumi.getter(name="catalogItemSyncEnableStatus")
    def catalog_item_sync_enable_status(self) -> Optional[_builtins.str]:
        """
        Whether project catalogs associated with projects in this dev center can be configured to sync catalog items.
        """
        return pulumi.get(self, "catalog_item_sync_enable_status")


@pulumi.output_type
class DevCenterSkuResponse(dict):
    """
    The resource model definition representing SKU for DevCenter resources
    """
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.CapabilityResponse'],
                 locations: Sequence[_builtins.str],
                 name: _builtins.str,
                 resource_type: _builtins.str,
                 capacity: Optional[_builtins.int] = None,
                 family: Optional[_builtins.str] = None,
                 size: Optional[_builtins.str] = None,
                 tier: Optional[_builtins.str] = None):
        """
        The resource model definition representing SKU for DevCenter resources
        :param Sequence['CapabilityResponse'] capabilities: Collection of name/value pairs to describe the SKU capabilities.
        :param Sequence[_builtins.str] locations: SKU supported locations.
        :param _builtins.str name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param _builtins.str resource_type: The name of the resource type
        :param _builtins.int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param _builtins.str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param _builtins.str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param _builtins.str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_type", resource_type)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.CapabilityResponse']:
        """
        Collection of name/value pairs to describe the SKU capabilities.
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Sequence[_builtins.str]:
        """
        SKU supported locations.
        """
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The name of the resource type
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[_builtins.int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def family(self) -> Optional[_builtins.str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tier(self) -> Optional[_builtins.str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class EncryptionResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManagedKeyEncryption":
            suggest = "customer_managed_key_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_managed_key_encryption: Optional['outputs.CustomerManagedKeyEncryptionResponse'] = None):
        """
        :param 'CustomerManagedKeyEncryptionResponse' customer_managed_key_encryption: All Customer-managed key encryption properties for the resource.
        """
        if customer_managed_key_encryption is not None:
            pulumi.set(__self__, "customer_managed_key_encryption", customer_managed_key_encryption)

    @_builtins.property
    @pulumi.getter(name="customerManagedKeyEncryption")
    def customer_managed_key_encryption(self) -> Optional['outputs.CustomerManagedKeyEncryptionResponse']:
        """
        All Customer-managed key encryption properties for the resource.
        """
        return pulumi.get(self, "customer_managed_key_encryption")


@pulumi.output_type
class EnvironmentRoleResponse(dict):
    """
    A role that can be assigned to a user.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentRoleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentRoleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentRoleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: _builtins.str,
                 role_name: _builtins.str):
        """
        A role that can be assigned to a user.
        :param _builtins.str description: This is a description of the Role Assignment.
        :param _builtins.str role_name: The common name of the Role Assignment. This is a descriptive name such as 'AcrPush'.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        This is a description of the Role Assignment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> _builtins.str:
        """
        The common name of the Role Assignment. This is a descriptive name such as 'AcrPush'.
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: _builtins.str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param _builtins.str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: _builtins.str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: _builtins.str,
                 target: _builtins.str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param _builtins.str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param _builtins.str message: The error message.
        :param _builtins.str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GitCatalogResponse(dict):
    """
    Properties for a Git repository catalog.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretIdentifier":
            suggest = "secret_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GitCatalogResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GitCatalogResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GitCatalogResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 secret_identifier: Optional[_builtins.str] = None,
                 uri: Optional[_builtins.str] = None):
        """
        Properties for a Git repository catalog.
        :param _builtins.str branch: Git branch.
        :param _builtins.str path: The folder where the catalog items can be found inside the repository.
        :param _builtins.str secret_identifier: A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        :param _builtins.str uri: Git URI.
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if secret_identifier is not None:
            pulumi.set(__self__, "secret_identifier", secret_identifier)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> Optional[_builtins.str]:
        """
        Git branch.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The folder where the catalog items can be found inside the repository.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="secretIdentifier")
    def secret_identifier(self) -> Optional[_builtins.str]:
        """
        A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        """
        return pulumi.get(self, "secret_identifier")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> Optional[_builtins.str]:
        """
        Git URI.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class HealthStatusDetailResponse(dict):
    """
    Pool health status detail.
    """
    def __init__(__self__, *,
                 code: _builtins.str,
                 message: _builtins.str):
        """
        Pool health status detail.
        :param _builtins.str code: An identifier for the issue.
        :param _builtins.str message: A message describing the issue, intended to be suitable for display in a user interface
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        An identifier for the issue.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        A message describing the issue, intended to be suitable for display in a user interface
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ImageCreationErrorDetailsResponse(dict):
    """
    Image creation error details
    """
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None):
        """
        Image creation error details
        :param _builtins.str code: An identifier for the error.
        :param _builtins.str message: A message describing the error.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        An identifier for the error.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        A message describing the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ImageDefinitionBuildTaskGroupResponse(dict):
    """
    A task group executed during the image definition build.
    """
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 name: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 tasks: Sequence['outputs.ImageDefinitionBuildTaskResponse']):
        """
        A task group executed during the image definition build.
        :param _builtins.str end_time: End time of the task group.
        :param _builtins.str name: The name of the task group.
        :param _builtins.str start_time: Start time of the task group.
        :param _builtins.str status: The status of the task group.
        :param Sequence['ImageDefinitionBuildTaskResponse'] tasks: The list of tasks executed during the task group.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        End time of the task group.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the task group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Start time of the task group.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the task group.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.ImageDefinitionBuildTaskResponse']:
        """
        The list of tasks executed during the task group.
        """
        return pulumi.get(self, "tasks")


@pulumi.output_type
class ImageDefinitionBuildTaskResponse(dict):
    """
    A task executed during the image definition build.
    """
    def __init__(__self__, *,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 log_uri: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 display_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 parameters: Optional[Sequence['outputs.ImageDefinitionBuildTaskResponseParameters']] = None):
        """
        A task executed during the image definition build.
        :param _builtins.str end_time: End time of the task.
        :param _builtins.str id: ID of the task instance.
        :param _builtins.str log_uri: The URI for retrieving logs for the task execution.
        :param _builtins.str start_time: Start time of the task.
        :param _builtins.str status: The status of the task.
        :param _builtins.str display_name: Display name to help differentiate multiple instances of the same task.
        :param _builtins.str name: The name of the task.
        :param Sequence['ImageDefinitionBuildTaskResponseParameters'] parameters: Parameters for the task.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_uri", log_uri)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        End time of the task.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the task instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logUri")
    def log_uri(self) -> _builtins.str:
        """
        The URI for retrieving logs for the task execution.
        """
        return pulumi.get(self, "log_uri")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Start time of the task.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        Display name to help differentiate multiple instances of the same task.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ImageDefinitionBuildTaskResponseParameters']]:
        """
        Parameters for the task.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ImageDefinitionBuildTaskResponseParameters(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageReferenceResponse(dict):
    """
    Image reference information
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactVersion":
            suggest = "exact_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_version: _builtins.str,
                 id: Optional[_builtins.str] = None):
        """
        Image reference information
        :param _builtins.str exact_version: The actual version of the image after use. When id references a gallery image latest version, this will indicate the actual version in use.
        :param _builtins.str id: Image ID, or Image version ID. When Image ID is provided, its latest version will be used.
        """
        pulumi.set(__self__, "exact_version", exact_version)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="exactVersion")
    def exact_version(self) -> _builtins.str:
        """
        The actual version of the image after use. When id references a gallery image latest version, this will indicate the actual version in use.
        """
        return pulumi.get(self, "exact_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Image ID, or Image version ID. When Image ID is provided, its latest version will be used.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ImageValidationErrorDetailsResponse(dict):
    """
    Image validation error details
    """
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None):
        """
        Image validation error details
        :param _builtins.str code: An identifier for the error.
        :param _builtins.str message: A message describing the error.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        An identifier for the error.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        A message describing the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param _builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class PlanMemberSyncStatusResponse(dict):
    """
    The sync status of the plan member.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastSyncTime":
            suggest = "last_sync_time"
        elif key == "syncState":
            suggest = "sync_state"
        elif key == "lastSyncError":
            suggest = "last_sync_error"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlanMemberSyncStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlanMemberSyncStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlanMemberSyncStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_sync_time: _builtins.str,
                 sync_state: _builtins.str,
                 last_sync_error: Optional['outputs.ErrorDetailResponse'] = None):
        """
        The sync status of the plan member.
        :param _builtins.str last_sync_time: When the plan member was last synced.
        :param _builtins.str sync_state: The synchronization state of the plan member.
        :param 'ErrorDetailResponse' last_sync_error: Error response describing why the sync failed.
        """
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        pulumi.set(__self__, "sync_state", sync_state)
        if last_sync_error is not None:
            pulumi.set(__self__, "last_sync_error", last_sync_error)

    @_builtins.property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> _builtins.str:
        """
        When the plan member was last synced.
        """
        return pulumi.get(self, "last_sync_time")

    @_builtins.property
    @pulumi.getter(name="syncState")
    def sync_state(self) -> _builtins.str:
        """
        The synchronization state of the plan member.
        """
        return pulumi.get(self, "sync_state")

    @_builtins.property
    @pulumi.getter(name="lastSyncError")
    def last_sync_error(self) -> Optional['outputs.ErrorDetailResponse']:
        """
        Error response describing why the sync failed.
        """
        return pulumi.get(self, "last_sync_error")


@pulumi.output_type
class ProjectCatalogSettingsResponse(dict):
    """
    Settings to be used when associating a project with a catalog.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogItemSyncTypes":
            suggest = "catalog_item_sync_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectCatalogSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectCatalogSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectCatalogSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_item_sync_types: Optional[Sequence[_builtins.str]] = None):
        """
        Settings to be used when associating a project with a catalog.
        :param Sequence[_builtins.str] catalog_item_sync_types: Indicates catalog item types that can be synced.
        """
        if catalog_item_sync_types is not None:
            pulumi.set(__self__, "catalog_item_sync_types", catalog_item_sync_types)

    @_builtins.property
    @pulumi.getter(name="catalogItemSyncTypes")
    def catalog_item_sync_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates catalog item types that can be synced.
        """
        return pulumi.get(self, "catalog_item_sync_types")


@pulumi.output_type
class ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment(dict):
    """
    The role definition assigned to the environment creator on backing resources.
    """
    def __init__(__self__, *,
                 roles: Optional[Mapping[str, 'outputs.EnvironmentRoleResponse']] = None):
        """
        The role definition assigned to the environment creator on backing resources.
        :param Mapping[str, 'EnvironmentRoleResponse'] roles: A map of roles to assign to the environment creator.
        """
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[Mapping[str, 'outputs.EnvironmentRoleResponse']]:
        """
        A map of roles to assign to the environment creator.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class ProjectNetworkSettingsResponse(dict):
    """
    Network settings for the project.
    """
    def __init__(__self__, *,
                 microsoft_hosted_network_enable_status: _builtins.str):
        """
        Network settings for the project.
        :param _builtins.str microsoft_hosted_network_enable_status: Indicates whether pools in this Dev Center can use Microsoft Hosted Networks. Defaults to Enabled if not set.
        """
        pulumi.set(__self__, "microsoft_hosted_network_enable_status", microsoft_hosted_network_enable_status)

    @_builtins.property
    @pulumi.getter(name="microsoftHostedNetworkEnableStatus")
    def microsoft_hosted_network_enable_status(self) -> _builtins.str:
        """
        Indicates whether pools in this Dev Center can use Microsoft Hosted Networks. Defaults to Enabled if not set.
        """
        return pulumi.get(self, "microsoft_hosted_network_enable_status")


@pulumi.output_type
class ResourcePolicyResponse(dict):
    """
    A resource policy.
    """
    def __init__(__self__, *,
                 filter: Optional[_builtins.str] = None,
                 resources: Optional[_builtins.str] = None):
        """
        A resource policy.
        :param _builtins.str filter: Optional. When specified, this expression is used to filter the resources.
        :param _builtins.str resources: Resources that are included and shared as a part of a project policy.
        """
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        """
        Optional. When specified, this expression is used to filter the resources.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[_builtins.str]:
        """
        Resources that are included and shared as a part of a project policy.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 capacity: Optional[_builtins.int] = None,
                 family: Optional[_builtins.str] = None,
                 size: Optional[_builtins.str] = None,
                 tier: Optional[_builtins.str] = None):
        """
        The resource model definition representing SKU
        :param _builtins.str name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param _builtins.int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param _builtins.str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param _builtins.str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param _builtins.str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[_builtins.int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def family(self) -> Optional[_builtins.str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tier(self) -> Optional[_builtins.str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class StopOnDisconnectConfigurationResponse(dict):
    """
    Stop on disconnect configuration settings for Dev Boxes created in this pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gracePeriodMinutes":
            suggest = "grace_period_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StopOnDisconnectConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StopOnDisconnectConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StopOnDisconnectConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grace_period_minutes: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None):
        """
        Stop on disconnect configuration settings for Dev Boxes created in this pool.
        :param _builtins.int grace_period_minutes: The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
        :param _builtins.str status: Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled.
        """
        if grace_period_minutes is not None:
            pulumi.set(__self__, "grace_period_minutes", grace_period_minutes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="gracePeriodMinutes")
    def grace_period_minutes(self) -> Optional[_builtins.int]:
        """
        The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
        """
        return pulumi.get(self, "grace_period_minutes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SyncStatsResponse(dict):
    """
    Stats of the synchronization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "synchronizationErrors":
            suggest = "synchronization_errors"
        elif key == "validationErrors":
            suggest = "validation_errors"
        elif key == "syncedCatalogItemTypes":
            suggest = "synced_catalog_item_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 added: _builtins.int,
                 removed: _builtins.int,
                 synchronization_errors: _builtins.int,
                 unchanged: _builtins.int,
                 updated: _builtins.int,
                 validation_errors: _builtins.int,
                 synced_catalog_item_types: Optional[Sequence[_builtins.str]] = None):
        """
        Stats of the synchronization.
        :param _builtins.int added: Count of catalog items added during synchronization.
        :param _builtins.int removed: Count of catalog items removed during synchronization.
        :param _builtins.int synchronization_errors: Count of synchronization errors that occured during synchronization.
        :param _builtins.int unchanged: Count of catalog items that were unchanged during synchronization.
        :param _builtins.int updated: Count of catalog items updated during synchronization.
        :param _builtins.int validation_errors: Count of catalog items that had validation errors during synchronization.
        :param Sequence[_builtins.str] synced_catalog_item_types: Indicates catalog item types that were synced.
        """
        pulumi.set(__self__, "added", added)
        pulumi.set(__self__, "removed", removed)
        pulumi.set(__self__, "synchronization_errors", synchronization_errors)
        pulumi.set(__self__, "unchanged", unchanged)
        pulumi.set(__self__, "updated", updated)
        pulumi.set(__self__, "validation_errors", validation_errors)
        if synced_catalog_item_types is not None:
            pulumi.set(__self__, "synced_catalog_item_types", synced_catalog_item_types)

    @_builtins.property
    @pulumi.getter
    def added(self) -> _builtins.int:
        """
        Count of catalog items added during synchronization.
        """
        return pulumi.get(self, "added")

    @_builtins.property
    @pulumi.getter
    def removed(self) -> _builtins.int:
        """
        Count of catalog items removed during synchronization.
        """
        return pulumi.get(self, "removed")

    @_builtins.property
    @pulumi.getter(name="synchronizationErrors")
    def synchronization_errors(self) -> _builtins.int:
        """
        Count of synchronization errors that occured during synchronization.
        """
        return pulumi.get(self, "synchronization_errors")

    @_builtins.property
    @pulumi.getter
    def unchanged(self) -> _builtins.int:
        """
        Count of catalog items that were unchanged during synchronization.
        """
        return pulumi.get(self, "unchanged")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.int:
        """
        Count of catalog items updated during synchronization.
        """
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> _builtins.int:
        """
        Count of catalog items that had validation errors during synchronization.
        """
        return pulumi.get(self, "validation_errors")

    @_builtins.property
    @pulumi.getter(name="syncedCatalogItemTypes")
    def synced_catalog_item_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates catalog item types that were synced.
        """
        return pulumi.get(self, "synced_catalog_item_types")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        User assigned identity properties
        :param _builtins.str client_id: The client ID of the assigned identity.
        :param _builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserRoleAssignmentResponse(dict):
    """
    Mapping of user object ID to role assignments.
    """
    def __init__(__self__, *,
                 roles: Optional[Mapping[str, 'outputs.EnvironmentRoleResponse']] = None):
        """
        Mapping of user object ID to role assignments.
        :param Mapping[str, 'EnvironmentRoleResponse'] roles: A map of roles to assign to the parent user.
        """
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[Mapping[str, 'outputs.EnvironmentRoleResponse']]:
        """
        A map of roles to assign to the parent user.
        """
        return pulumi.get(self, "roles")


