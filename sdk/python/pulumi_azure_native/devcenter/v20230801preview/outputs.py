# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'CatalogConflictErrorResponse',
    'CatalogErrorDetailsResponse',
    'CatalogSyncErrorResponse',
]

@pulumi.output_type
class CatalogConflictErrorResponse(dict):
    """
    An individual conflict error.
    """
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        An individual conflict error.
        :param str name: Name of the conflicting catalog item.
        :param str path: The path of the file that has a conflicting name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the conflicting catalog item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the file that has a conflicting name.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class CatalogErrorDetailsResponse(dict):
    """
    Catalog error details
    """
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        """
        Catalog error details
        :param str code: An identifier for the error.
        :param str message: A message describing the error.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        An identifier for the error.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A message describing the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class CatalogSyncErrorResponse(dict):
    """
    An individual synchronization error.
    """
    def __init__(__self__, *,
                 error_details: Sequence['outputs.CatalogErrorDetailsResponse'],
                 path: str):
        """
        An individual synchronization error.
        :param Sequence['CatalogErrorDetailsResponse'] error_details: Errors associated with the file.
        :param str path: The path of the file the error is associated with.
        """
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.CatalogErrorDetailsResponse']:
        """
        Errors associated with the file.
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the file the error is associated with.
        """
        return pulumi.get(self, "path")


