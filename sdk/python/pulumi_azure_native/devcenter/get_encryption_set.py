# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEncryptionSetResult',
    'AwaitableGetEncryptionSetResult',
    'get_encryption_set',
    'get_encryption_set_output',
]

@pulumi.output_type
class GetEncryptionSetResult:
    """
    Represents a devcenter encryption set resource.
    """
    def __init__(__self__, devbox_disks_encryption_enable_status=None, id=None, identity=None, key_encryption_key_url=None, location=None, name=None, provisioning_state=None, system_data=None, tags=None, type=None):
        if devbox_disks_encryption_enable_status and not isinstance(devbox_disks_encryption_enable_status, str):
            raise TypeError("Expected argument 'devbox_disks_encryption_enable_status' to be a str")
        pulumi.set(__self__, "devbox_disks_encryption_enable_status", devbox_disks_encryption_enable_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if key_encryption_key_url and not isinstance(key_encryption_key_url, str):
            raise TypeError("Expected argument 'key_encryption_key_url' to be a str")
        pulumi.set(__self__, "key_encryption_key_url", key_encryption_key_url)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="devboxDisksEncryptionEnableStatus")
    def devbox_disks_encryption_enable_status(self) -> Optional[str]:
        """
        Devbox disk encryption enable or disable status. Indicates if Devbox disks encryption using DevCenter CMK is enabled or not.
        """
        return pulumi.get(self, "devbox_disks_encryption_enable_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        Managed identity properties
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="keyEncryptionKeyUrl")
    def key_encryption_key_url(self) -> Optional[str]:
        """
        Key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
        """
        return pulumi.get(self, "key_encryption_key_url")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetEncryptionSetResult(GetEncryptionSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEncryptionSetResult(
            devbox_disks_encryption_enable_status=self.devbox_disks_encryption_enable_status,
            id=self.id,
            identity=self.identity,
            key_encryption_key_url=self.key_encryption_key_url,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_encryption_set(dev_center_name: Optional[str] = None,
                       encryption_set_name: Optional[str] = None,
                       resource_group_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEncryptionSetResult:
    """
    Gets a devcenter encryption set.
    Azure REST API version: 2024-05-01-preview.


    :param str dev_center_name: The name of the devcenter.
    :param str encryption_set_name: The name of the devcenter encryption set.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['devCenterName'] = dev_center_name
    __args__['encryptionSetName'] = encryption_set_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:devcenter:getEncryptionSet', __args__, opts=opts, typ=GetEncryptionSetResult).value

    return AwaitableGetEncryptionSetResult(
        devbox_disks_encryption_enable_status=pulumi.get(__ret__, 'devbox_disks_encryption_enable_status'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        key_encryption_key_url=pulumi.get(__ret__, 'key_encryption_key_url'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_encryption_set)
def get_encryption_set_output(dev_center_name: Optional[pulumi.Input[str]] = None,
                              encryption_set_name: Optional[pulumi.Input[str]] = None,
                              resource_group_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEncryptionSetResult]:
    """
    Gets a devcenter encryption set.
    Azure REST API version: 2024-05-01-preview.


    :param str dev_center_name: The name of the devcenter.
    :param str encryption_set_name: The name of the devcenter encryption set.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
