# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApiPortalCustomDomainPropertiesResponse',
    'ApiPortalInstanceResponse',
    'ApiPortalPropertiesResponse',
    'ApiPortalResourceRequestsResponse',
    'BuildServiceAgentPoolPropertiesResponse',
    'BuildServiceAgentPoolSizePropertiesResponse',
    'BuilderPropertiesResponse',
    'BuildpackBindingLaunchPropertiesResponse',
    'BuildpackBindingPropertiesResponse',
    'BuildpackPropertiesResponse',
    'BuildpacksGroupPropertiesResponse',
    'ConfigurationServiceGitPropertyResponse',
    'ConfigurationServiceGitRepositoryResponse',
    'ConfigurationServiceInstanceResponse',
    'ConfigurationServicePropertiesResponse',
    'ConfigurationServiceResourceRequestsResponse',
    'ConfigurationServiceSettingsResponse',
    'GatewayApiMetadataPropertiesResponse',
    'GatewayApiRouteResponse',
    'GatewayCorsPropertiesResponse',
    'GatewayCustomDomainPropertiesResponse',
    'GatewayInstanceResponse',
    'GatewayOperatorPropertiesResponse',
    'GatewayOperatorResourceRequestsResponse',
    'GatewayPropertiesResponse',
    'GatewayResourceRequestsResponse',
    'GatewayRouteConfigPropertiesResponse',
    'ServiceRegistryInstanceResponse',
    'ServiceRegistryPropertiesResponse',
    'ServiceRegistryResourceRequestsResponse',
    'SkuResponse',
    'SsoPropertiesResponse',
    'StackPropertiesResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class ApiPortalCustomDomainPropertiesResponse(dict):
    """
    The properties of custom domain for API portal
    """
    def __init__(__self__, *,
                 thumbprint: Optional[str] = None):
        """
        The properties of custom domain for API portal
        :param str thumbprint: The thumbprint of bound certificate.
        """
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of bound certificate.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class ApiPortalInstanceResponse(dict):
    """
    Collection of instances belong to the API portal
    """
    def __init__(__self__, *,
                 name: str,
                 status: str):
        """
        Collection of instances belong to the API portal
        :param str name: Name of the API portal instance
        :param str status: Status of the API portal instance
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the API portal instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the API portal instance
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApiPortalPropertiesResponse(dict):
    """
    API portal properties payload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceRequests":
            suggest = "resource_requests"
        elif key == "gatewayIds":
            suggest = "gateway_ids"
        elif key == "httpsOnly":
            suggest = "https_only"
        elif key == "sourceUrls":
            suggest = "source_urls"
        elif key == "ssoProperties":
            suggest = "sso_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiPortalPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiPortalPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiPortalPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instances: Sequence['outputs.ApiPortalInstanceResponse'],
                 provisioning_state: str,
                 resource_requests: 'outputs.ApiPortalResourceRequestsResponse',
                 url: str,
                 gateway_ids: Optional[Sequence[str]] = None,
                 https_only: Optional[bool] = None,
                 public: Optional[bool] = None,
                 source_urls: Optional[Sequence[str]] = None,
                 sso_properties: Optional['outputs.SsoPropertiesResponse'] = None):
        """
        API portal properties payload
        :param Sequence['ApiPortalInstanceResponse'] instances: Collection of instances belong to API portal.
        :param str provisioning_state: State of the API portal.
        :param 'ApiPortalResourceRequestsResponse' resource_requests: The requested resource quantity for required CPU and Memory.
        :param str url: URL of the API portal, exposed when 'public' is true.
        :param Sequence[str] gateway_ids: The array of resource Ids of gateway to integrate with API portal.
        :param bool https_only: Indicate if only https is allowed.
        :param bool public: Indicates whether the API portal exposes endpoint.
        :param Sequence[str] source_urls: Collection of OpenAPI source URL locations.
        :param 'SsoPropertiesResponse' sso_properties: Single sign-on related configuration
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_requests", resource_requests)
        pulumi.set(__self__, "url", url)
        if gateway_ids is not None:
            pulumi.set(__self__, "gateway_ids", gateway_ids)
        if https_only is None:
            https_only = False
        if https_only is not None:
            pulumi.set(__self__, "https_only", https_only)
        if public is None:
            public = False
        if public is not None:
            pulumi.set(__self__, "public", public)
        if source_urls is not None:
            pulumi.set(__self__, "source_urls", source_urls)
        if sso_properties is not None:
            pulumi.set(__self__, "sso_properties", sso_properties)

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.ApiPortalInstanceResponse']:
        """
        Collection of instances belong to API portal.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the API portal.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceRequests")
    def resource_requests(self) -> 'outputs.ApiPortalResourceRequestsResponse':
        """
        The requested resource quantity for required CPU and Memory.
        """
        return pulumi.get(self, "resource_requests")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the API portal, exposed when 'public' is true.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="gatewayIds")
    def gateway_ids(self) -> Optional[Sequence[str]]:
        """
        The array of resource Ids of gateway to integrate with API portal.
        """
        return pulumi.get(self, "gateway_ids")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> Optional[bool]:
        """
        Indicate if only https is allowed.
        """
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        """
        Indicates whether the API portal exposes endpoint.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> Optional[Sequence[str]]:
        """
        Collection of OpenAPI source URL locations.
        """
        return pulumi.get(self, "source_urls")

    @property
    @pulumi.getter(name="ssoProperties")
    def sso_properties(self) -> Optional['outputs.SsoPropertiesResponse']:
        """
        Single sign-on related configuration
        """
        return pulumi.get(self, "sso_properties")


@pulumi.output_type
class ApiPortalResourceRequestsResponse(dict):
    """
    Resource requests of the API portal
    """
    def __init__(__self__, *,
                 cpu: str,
                 memory: str):
        """
        Resource requests of the API portal
        :param str cpu: Cpu allocated to each API portal instance
        :param str memory: Memory allocated to each API portal instance
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> str:
        """
        Cpu allocated to each API portal instance
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Memory allocated to each API portal instance
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class BuildServiceAgentPoolPropertiesResponse(dict):
    """
    Build service agent pool properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "poolSize":
            suggest = "pool_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildServiceAgentPoolPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildServiceAgentPoolPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildServiceAgentPoolPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 pool_size: Optional['outputs.BuildServiceAgentPoolSizePropertiesResponse'] = None):
        """
        Build service agent pool properties
        :param str provisioning_state: Provisioning state of the build service agent pool
        :param 'BuildServiceAgentPoolSizePropertiesResponse' pool_size: build service agent pool size properties
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if pool_size is not None:
            pulumi.set(__self__, "pool_size", pool_size)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the build service agent pool
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="poolSize")
    def pool_size(self) -> Optional['outputs.BuildServiceAgentPoolSizePropertiesResponse']:
        """
        build service agent pool size properties
        """
        return pulumi.get(self, "pool_size")


@pulumi.output_type
class BuildServiceAgentPoolSizePropertiesResponse(dict):
    """
    Build service agent pool size properties
    """
    def __init__(__self__, *,
                 cpu: str,
                 memory: str,
                 name: Optional[str] = None):
        """
        Build service agent pool size properties
        :param str cpu: The cpu property of build service agent pool size
        :param str memory: The memory property of build service agent pool size
        :param str name: The name of build service agent pool size
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> str:
        """
        The cpu property of build service agent pool size
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        The memory property of build service agent pool size
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of build service agent pool size
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BuilderPropertiesResponse(dict):
    """
    KPack Builder properties payload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "buildpackGroups":
            suggest = "buildpack_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuilderPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuilderPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuilderPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 buildpack_groups: Optional[Sequence['outputs.BuildpacksGroupPropertiesResponse']] = None,
                 stack: Optional['outputs.StackPropertiesResponse'] = None):
        """
        KPack Builder properties payload
        :param str provisioning_state: Builder provision status.
        :param Sequence['BuildpacksGroupPropertiesResponse'] buildpack_groups: Builder buildpack groups.
        :param 'StackPropertiesResponse' stack: Builder cluster stack property.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if buildpack_groups is not None:
            pulumi.set(__self__, "buildpack_groups", buildpack_groups)
        if stack is not None:
            pulumi.set(__self__, "stack", stack)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Builder provision status.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="buildpackGroups")
    def buildpack_groups(self) -> Optional[Sequence['outputs.BuildpacksGroupPropertiesResponse']]:
        """
        Builder buildpack groups.
        """
        return pulumi.get(self, "buildpack_groups")

    @property
    @pulumi.getter
    def stack(self) -> Optional['outputs.StackPropertiesResponse']:
        """
        Builder cluster stack property.
        """
        return pulumi.get(self, "stack")


@pulumi.output_type
class BuildpackBindingLaunchPropertiesResponse(dict):
    """
    Buildpack Binding Launch Properties
    """
    def __init__(__self__, *,
                 properties: Optional[Mapping[str, str]] = None,
                 secrets: Optional[Mapping[str, str]] = None):
        """
        Buildpack Binding Launch Properties
        :param Mapping[str, str] properties: Non-sensitive properties for launchProperties
        :param Mapping[str, str] secrets: Sensitive properties for launchProperties
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        Non-sensitive properties for launchProperties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Mapping[str, str]]:
        """
        Sensitive properties for launchProperties
        """
        return pulumi.get(self, "secrets")


@pulumi.output_type
class BuildpackBindingPropertiesResponse(dict):
    """
    Properties of a buildpack binding
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "bindingType":
            suggest = "binding_type"
        elif key == "launchProperties":
            suggest = "launch_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildpackBindingPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildpackBindingPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildpackBindingPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 binding_type: Optional[str] = None,
                 launch_properties: Optional['outputs.BuildpackBindingLaunchPropertiesResponse'] = None):
        """
        Properties of a buildpack binding
        :param str provisioning_state: State of the Buildpack Binding.
        :param str binding_type: Buildpack Binding Type
        :param 'BuildpackBindingLaunchPropertiesResponse' launch_properties: The object describes the buildpack binding launch properties
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if binding_type is not None:
            pulumi.set(__self__, "binding_type", binding_type)
        if launch_properties is not None:
            pulumi.set(__self__, "launch_properties", launch_properties)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the Buildpack Binding.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="bindingType")
    def binding_type(self) -> Optional[str]:
        """
        Buildpack Binding Type
        """
        return pulumi.get(self, "binding_type")

    @property
    @pulumi.getter(name="launchProperties")
    def launch_properties(self) -> Optional['outputs.BuildpackBindingLaunchPropertiesResponse']:
        """
        The object describes the buildpack binding launch properties
        """
        return pulumi.get(self, "launch_properties")


@pulumi.output_type
class BuildpackPropertiesResponse(dict):
    """
    Buildpack properties payload
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Buildpack properties payload
        :param str id: Id of the buildpack
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the buildpack
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class BuildpacksGroupPropertiesResponse(dict):
    """
    Buildpack group properties of the Builder
    """
    def __init__(__self__, *,
                 buildpacks: Optional[Sequence['outputs.BuildpackPropertiesResponse']] = None,
                 name: Optional[str] = None):
        """
        Buildpack group properties of the Builder
        :param Sequence['BuildpackPropertiesResponse'] buildpacks: Buildpacks in the buildpack group
        :param str name: Buildpack group name
        """
        if buildpacks is not None:
            pulumi.set(__self__, "buildpacks", buildpacks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def buildpacks(self) -> Optional[Sequence['outputs.BuildpackPropertiesResponse']]:
        """
        Buildpacks in the buildpack group
        """
        return pulumi.get(self, "buildpacks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Buildpack group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConfigurationServiceGitPropertyResponse(dict):
    """
    Property of git environment.
    """
    def __init__(__self__, *,
                 repositories: Optional[Sequence['outputs.ConfigurationServiceGitRepositoryResponse']] = None):
        """
        Property of git environment.
        :param Sequence['ConfigurationServiceGitRepositoryResponse'] repositories: Repositories of Application Configuration Service git property.
        """
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence['outputs.ConfigurationServiceGitRepositoryResponse']]:
        """
        Repositories of Application Configuration Service git property.
        """
        return pulumi.get(self, "repositories")


@pulumi.output_type
class ConfigurationServiceGitRepositoryResponse(dict):
    """
    Git repository property payload for Application Configuration Service
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostKey":
            suggest = "host_key"
        elif key == "hostKeyAlgorithm":
            suggest = "host_key_algorithm"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "searchPaths":
            suggest = "search_paths"
        elif key == "strictHostKeyChecking":
            suggest = "strict_host_key_checking"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationServiceGitRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationServiceGitRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationServiceGitRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 name: str,
                 patterns: Sequence[str],
                 uri: str,
                 host_key: Optional[str] = None,
                 host_key_algorithm: Optional[str] = None,
                 password: Optional[str] = None,
                 private_key: Optional[str] = None,
                 search_paths: Optional[Sequence[str]] = None,
                 strict_host_key_checking: Optional[bool] = None,
                 username: Optional[str] = None):
        """
        Git repository property payload for Application Configuration Service
        :param str label: Label of the repository
        :param str name: Name of the repository
        :param Sequence[str] patterns: Collection of patterns of the repository
        :param str uri: URI of the repository
        :param str host_key: Public sshKey of git repository.
        :param str host_key_algorithm: SshKey algorithm of git repository.
        :param str password: Password of git repository basic auth.
        :param str private_key: Private sshKey algorithm of git repository.
        :param Sequence[str] search_paths: Searching path of the repository
        :param bool strict_host_key_checking: Strict host key checking or not.
        :param str username: Username of git repository basic auth.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patterns", patterns)
        pulumi.set(__self__, "uri", uri)
        if host_key is not None:
            pulumi.set(__self__, "host_key", host_key)
        if host_key_algorithm is not None:
            pulumi.set(__self__, "host_key_algorithm", host_key_algorithm)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if strict_host_key_checking is not None:
            pulumi.set(__self__, "strict_host_key_checking", strict_host_key_checking)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label of the repository
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def patterns(self) -> Sequence[str]:
        """
        Collection of patterns of the repository
        """
        return pulumi.get(self, "patterns")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI of the repository
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="hostKey")
    def host_key(self) -> Optional[str]:
        """
        Public sshKey of git repository.
        """
        return pulumi.get(self, "host_key")

    @property
    @pulumi.getter(name="hostKeyAlgorithm")
    def host_key_algorithm(self) -> Optional[str]:
        """
        SshKey algorithm of git repository.
        """
        return pulumi.get(self, "host_key_algorithm")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password of git repository basic auth.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        Private sshKey algorithm of git repository.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[Sequence[str]]:
        """
        Searching path of the repository
        """
        return pulumi.get(self, "search_paths")

    @property
    @pulumi.getter(name="strictHostKeyChecking")
    def strict_host_key_checking(self) -> Optional[bool]:
        """
        Strict host key checking or not.
        """
        return pulumi.get(self, "strict_host_key_checking")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username of git repository basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ConfigurationServiceInstanceResponse(dict):
    """
    Collection of instances belong to the Application Configuration Service
    """
    def __init__(__self__, *,
                 name: str,
                 status: str):
        """
        Collection of instances belong to the Application Configuration Service
        :param str name: Name of the Application Configuration Service instance
        :param str status: Status of the Application Configuration Service instance
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Application Configuration Service instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the Application Configuration Service instance
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ConfigurationServicePropertiesResponse(dict):
    """
    Application Configuration Service properties payload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceRequests":
            suggest = "resource_requests"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationServicePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationServicePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationServicePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instances: Sequence['outputs.ConfigurationServiceInstanceResponse'],
                 provisioning_state: str,
                 resource_requests: 'outputs.ConfigurationServiceResourceRequestsResponse',
                 settings: Optional['outputs.ConfigurationServiceSettingsResponse'] = None):
        """
        Application Configuration Service properties payload
        :param Sequence['ConfigurationServiceInstanceResponse'] instances: Collection of instances belong to Application Configuration Service.
        :param str provisioning_state: State of the Application Configuration Service.
        :param 'ConfigurationServiceResourceRequestsResponse' resource_requests: The requested resource quantity for required CPU and Memory.
        :param 'ConfigurationServiceSettingsResponse' settings: The settings of Application Configuration Service.
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_requests", resource_requests)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.ConfigurationServiceInstanceResponse']:
        """
        Collection of instances belong to Application Configuration Service.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the Application Configuration Service.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceRequests")
    def resource_requests(self) -> 'outputs.ConfigurationServiceResourceRequestsResponse':
        """
        The requested resource quantity for required CPU and Memory.
        """
        return pulumi.get(self, "resource_requests")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.ConfigurationServiceSettingsResponse']:
        """
        The settings of Application Configuration Service.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class ConfigurationServiceResourceRequestsResponse(dict):
    """
    Resource request payload of Application Configuration Service
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationServiceResourceRequestsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationServiceResourceRequestsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationServiceResourceRequestsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: str,
                 instance_count: int,
                 memory: str):
        """
        Resource request payload of Application Configuration Service
        :param str cpu: Cpu allocated to each Application Configuration Service instance
        :param int instance_count: Instance count of the Application Configuration Service
        :param str memory: Memory allocated to each Application Configuration Service instance
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> str:
        """
        Cpu allocated to each Application Configuration Service instance
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        Instance count of the Application Configuration Service
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Memory allocated to each Application Configuration Service instance
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class ConfigurationServiceSettingsResponse(dict):
    """
    The settings of Application Configuration Service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitProperty":
            suggest = "git_property"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationServiceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationServiceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationServiceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 git_property: Optional['outputs.ConfigurationServiceGitPropertyResponse'] = None):
        """
        The settings of Application Configuration Service.
        :param 'ConfigurationServiceGitPropertyResponse' git_property: Property of git environment.
        """
        if git_property is not None:
            pulumi.set(__self__, "git_property", git_property)

    @property
    @pulumi.getter(name="gitProperty")
    def git_property(self) -> Optional['outputs.ConfigurationServiceGitPropertyResponse']:
        """
        Property of git environment.
        """
        return pulumi.get(self, "git_property")


@pulumi.output_type
class GatewayApiMetadataPropertiesResponse(dict):
    """
    API metadata property for Spring Cloud Gateway
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverUrl":
            suggest = "server_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayApiMetadataPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayApiMetadataPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayApiMetadataPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 documentation: Optional[str] = None,
                 server_url: Optional[str] = None,
                 title: Optional[str] = None,
                 version: Optional[str] = None):
        """
        API metadata property for Spring Cloud Gateway
        :param str description: Detailed description of the APIs available on the Gateway instance (default: `Generated OpenAPI 3 document that describes the API routes configured.`)
        :param str documentation: Location of additional documentation for the APIs available on the Gateway instance
        :param str server_url: Base URL that API consumers will use to access APIs on the Gateway instance.
        :param str title: Title describing the context of the APIs available on the Gateway instance (default: `Spring Cloud Gateway for K8S`)
        :param str version: Version of APIs available on this Gateway instance (default: `unspecified`).
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if documentation is not None:
            pulumi.set(__self__, "documentation", documentation)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Detailed description of the APIs available on the Gateway instance (default: `Generated OpenAPI 3 document that describes the API routes configured.`)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def documentation(self) -> Optional[str]:
        """
        Location of additional documentation for the APIs available on the Gateway instance
        """
        return pulumi.get(self, "documentation")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[str]:
        """
        Base URL that API consumers will use to access APIs on the Gateway instance.
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title describing the context of the APIs available on the Gateway instance (default: `Spring Cloud Gateway for K8S`)
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of APIs available on this Gateway instance (default: `unspecified`).
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GatewayApiRouteResponse(dict):
    """
    API route config of the Spring Cloud Gateway
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ssoEnabled":
            suggest = "sso_enabled"
        elif key == "tokenRelay":
            suggest = "token_relay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayApiRouteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayApiRouteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayApiRouteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 filters: Optional[Sequence[str]] = None,
                 order: Optional[int] = None,
                 predicates: Optional[Sequence[str]] = None,
                 sso_enabled: Optional[bool] = None,
                 tags: Optional[Sequence[str]] = None,
                 title: Optional[str] = None,
                 token_relay: Optional[bool] = None,
                 uri: Optional[str] = None):
        """
        API route config of the Spring Cloud Gateway
        :param str description: A description, will be applied to methods in the generated OpenAPI documentation.
        :param Sequence[str] filters: To modify the request before sending it to the target endpoint, or the received response.
        :param int order: Route processing order.
        :param Sequence[str] predicates: A number of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
        :param bool sso_enabled: Enable sso validation.
        :param Sequence[str] tags: Classification tags, will be applied to methods in the generated OpenAPI documentation.
        :param str title: A title, will be applied to methods in the generated OpenAPI documentation.
        :param bool token_relay: Pass currently-authenticated user's identity token to application service, default is 'false'
        :param str uri: Full uri, will override `appName`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predicates is not None:
            pulumi.set(__self__, "predicates", predicates)
        if sso_enabled is not None:
            pulumi.set(__self__, "sso_enabled", sso_enabled)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if token_relay is not None:
            pulumi.set(__self__, "token_relay", token_relay)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description, will be applied to methods in the generated OpenAPI documentation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[str]]:
        """
        To modify the request before sending it to the target endpoint, or the received response.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        Route processing order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def predicates(self) -> Optional[Sequence[str]]:
        """
        A number of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
        """
        return pulumi.get(self, "predicates")

    @property
    @pulumi.getter(name="ssoEnabled")
    def sso_enabled(self) -> Optional[bool]:
        """
        Enable sso validation.
        """
        return pulumi.get(self, "sso_enabled")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Classification tags, will be applied to methods in the generated OpenAPI documentation.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        A title, will be applied to methods in the generated OpenAPI documentation.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="tokenRelay")
    def token_relay(self) -> Optional[bool]:
        """
        Pass currently-authenticated user's identity token to application service, default is 'false'
        """
        return pulumi.get(self, "token_relay")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        Full uri, will override `appName`.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GatewayCorsPropertiesResponse(dict):
    """
    Cross-Origin Resource Sharing property
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowCredentials":
            suggest = "allow_credentials"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "exposedHeaders":
            suggest = "exposed_headers"
        elif key == "maxAge":
            suggest = "max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayCorsPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayCorsPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayCorsPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 max_age: Optional[int] = None):
        """
        Cross-Origin Resource Sharing property
        :param bool allow_credentials: Whether user credentials are supported on cross-site requests. Valid values: `true`, `false`.
        :param Sequence[str] allowed_headers: Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
        :param Sequence[str] allowed_methods: Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default.
        :param Sequence[str] allowed_origins: Allowed origins to make cross-site requests. The special value `*` allows all domains.
        :param Sequence[str] exposed_headers: HTTP response headers to expose for cross-site requests.
        :param int max_age: How long, in seconds, the response from a pre-flight request can be cached by clients.
        """
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        """
        Whether user credentials are supported on cross-site requests. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "allow_credentials")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        """
        Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        """
        Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        """
        Allowed origins to make cross-site requests. The special value `*` allows all domains.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        """
        HTTP response headers to expose for cross-site requests.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        """
        How long, in seconds, the response from a pre-flight request can be cached by clients.
        """
        return pulumi.get(self, "max_age")


@pulumi.output_type
class GatewayCustomDomainPropertiesResponse(dict):
    """
    The properties of custom domain for Spring Cloud Gateway
    """
    def __init__(__self__, *,
                 thumbprint: Optional[str] = None):
        """
        The properties of custom domain for Spring Cloud Gateway
        :param str thumbprint: The thumbprint of bound certificate.
        """
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of bound certificate.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class GatewayInstanceResponse(dict):
    """
    Collection of instances belong to the Spring Cloud Gateway
    """
    def __init__(__self__, *,
                 name: str,
                 status: str):
        """
        Collection of instances belong to the Spring Cloud Gateway
        :param str name: Name of the Spring Cloud Gateway instance
        :param str status: Status of the Spring Cloud Gateway instance
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Spring Cloud Gateway instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the Spring Cloud Gateway instance
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GatewayOperatorPropertiesResponse(dict):
    """
    Properties of the Spring Cloud Gateway Operator.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceRequests":
            suggest = "resource_requests"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayOperatorPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayOperatorPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayOperatorPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instances: Sequence['outputs.GatewayInstanceResponse'],
                 resource_requests: 'outputs.GatewayOperatorResourceRequestsResponse'):
        """
        Properties of the Spring Cloud Gateway Operator.
        :param Sequence['GatewayInstanceResponse'] instances: Collection of instances belong to Spring Cloud Gateway operator.
        :param 'GatewayOperatorResourceRequestsResponse' resource_requests: The requested resource quantity for required CPU and Memory.
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "resource_requests", resource_requests)

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GatewayInstanceResponse']:
        """
        Collection of instances belong to Spring Cloud Gateway operator.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="resourceRequests")
    def resource_requests(self) -> 'outputs.GatewayOperatorResourceRequestsResponse':
        """
        The requested resource quantity for required CPU and Memory.
        """
        return pulumi.get(self, "resource_requests")


@pulumi.output_type
class GatewayOperatorResourceRequestsResponse(dict):
    """
    Properties of the Spring Cloud Gateway Operator.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayOperatorResourceRequestsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayOperatorResourceRequestsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayOperatorResourceRequestsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: str,
                 instance_count: int,
                 memory: str):
        """
        Properties of the Spring Cloud Gateway Operator.
        :param str cpu: Cpu allocated to each Spring Cloud Gateway Operator instance.
        :param int instance_count: Instance count of the Spring Cloud Gateway Operator.
        :param str memory: Memory allocated to each Spring Cloud Gateway Operator instance.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> str:
        """
        Cpu allocated to each Spring Cloud Gateway Operator instance.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        Instance count of the Spring Cloud Gateway Operator.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Memory allocated to each Spring Cloud Gateway Operator instance.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GatewayPropertiesResponse(dict):
    """
    Spring Cloud Gateway properties payload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operatorProperties":
            suggest = "operator_properties"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "apiMetadataProperties":
            suggest = "api_metadata_properties"
        elif key == "corsProperties":
            suggest = "cors_properties"
        elif key == "httpsOnly":
            suggest = "https_only"
        elif key == "resourceRequests":
            suggest = "resource_requests"
        elif key == "ssoProperties":
            suggest = "sso_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instances: Sequence['outputs.GatewayInstanceResponse'],
                 operator_properties: 'outputs.GatewayOperatorPropertiesResponse',
                 provisioning_state: str,
                 url: str,
                 api_metadata_properties: Optional['outputs.GatewayApiMetadataPropertiesResponse'] = None,
                 cors_properties: Optional['outputs.GatewayCorsPropertiesResponse'] = None,
                 https_only: Optional[bool] = None,
                 public: Optional[bool] = None,
                 resource_requests: Optional['outputs.GatewayResourceRequestsResponse'] = None,
                 sso_properties: Optional['outputs.SsoPropertiesResponse'] = None):
        """
        Spring Cloud Gateway properties payload
        :param Sequence['GatewayInstanceResponse'] instances: Collection of instances belong to Spring Cloud Gateway.
        :param 'GatewayOperatorPropertiesResponse' operator_properties: Properties of the Spring Cloud Gateway Operator.
        :param str provisioning_state: State of the Spring Cloud Gateway.
        :param str url: URL of the Spring Cloud Gateway, exposed when 'public' is true.
        :param 'GatewayApiMetadataPropertiesResponse' api_metadata_properties: API metadata property for Spring Cloud Gateway
        :param 'GatewayCorsPropertiesResponse' cors_properties: Cross-Origin Resource Sharing property
        :param bool https_only: Indicate if only https is allowed.
        :param bool public: Indicates whether the Spring Cloud Gateway exposes endpoint.
        :param 'GatewayResourceRequestsResponse' resource_requests: The requested resource quantity for required CPU and Memory.
        :param 'SsoPropertiesResponse' sso_properties: Single sign-on related configuration
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "operator_properties", operator_properties)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "url", url)
        if api_metadata_properties is not None:
            pulumi.set(__self__, "api_metadata_properties", api_metadata_properties)
        if cors_properties is not None:
            pulumi.set(__self__, "cors_properties", cors_properties)
        if https_only is None:
            https_only = False
        if https_only is not None:
            pulumi.set(__self__, "https_only", https_only)
        if public is None:
            public = False
        if public is not None:
            pulumi.set(__self__, "public", public)
        if resource_requests is not None:
            pulumi.set(__self__, "resource_requests", resource_requests)
        if sso_properties is not None:
            pulumi.set(__self__, "sso_properties", sso_properties)

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GatewayInstanceResponse']:
        """
        Collection of instances belong to Spring Cloud Gateway.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="operatorProperties")
    def operator_properties(self) -> 'outputs.GatewayOperatorPropertiesResponse':
        """
        Properties of the Spring Cloud Gateway Operator.
        """
        return pulumi.get(self, "operator_properties")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the Spring Cloud Gateway.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the Spring Cloud Gateway, exposed when 'public' is true.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="apiMetadataProperties")
    def api_metadata_properties(self) -> Optional['outputs.GatewayApiMetadataPropertiesResponse']:
        """
        API metadata property for Spring Cloud Gateway
        """
        return pulumi.get(self, "api_metadata_properties")

    @property
    @pulumi.getter(name="corsProperties")
    def cors_properties(self) -> Optional['outputs.GatewayCorsPropertiesResponse']:
        """
        Cross-Origin Resource Sharing property
        """
        return pulumi.get(self, "cors_properties")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> Optional[bool]:
        """
        Indicate if only https is allowed.
        """
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        """
        Indicates whether the Spring Cloud Gateway exposes endpoint.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="resourceRequests")
    def resource_requests(self) -> Optional['outputs.GatewayResourceRequestsResponse']:
        """
        The requested resource quantity for required CPU and Memory.
        """
        return pulumi.get(self, "resource_requests")

    @property
    @pulumi.getter(name="ssoProperties")
    def sso_properties(self) -> Optional['outputs.SsoPropertiesResponse']:
        """
        Single sign-on related configuration
        """
        return pulumi.get(self, "sso_properties")


@pulumi.output_type
class GatewayResourceRequestsResponse(dict):
    """
    Resource request payload of Spring Cloud Gateway.
    """
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        """
        Resource request payload of Spring Cloud Gateway.
        :param str cpu: Cpu allocated to each Spring Cloud Gateway instance.
        :param str memory: Memory allocated to each Spring Cloud Gateway instance.
        """
        if cpu is None:
            cpu = '1'
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is None:
            memory = '2Gi'
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        Cpu allocated to each Spring Cloud Gateway instance.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        Memory allocated to each Spring Cloud Gateway instance.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GatewayRouteConfigPropertiesResponse(dict):
    """
    API route config of the Spring Cloud Gateway
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "appResourceId":
            suggest = "app_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayRouteConfigPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayRouteConfigPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayRouteConfigPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 app_resource_id: Optional[str] = None,
                 routes: Optional[Sequence['outputs.GatewayApiRouteResponse']] = None):
        """
        API route config of the Spring Cloud Gateway
        :param str provisioning_state: State of the Spring Cloud Gateway route config.
        :param str app_resource_id: The resource Id of the Azure Spring Cloud app, required unless route defines `uri`.
        :param Sequence['GatewayApiRouteResponse'] routes: Array of API routes, each route contains properties such as `title`, `uri`, `ssoEnabled`, `predicates`, `filters`.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if app_resource_id is not None:
            pulumi.set(__self__, "app_resource_id", app_resource_id)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the Spring Cloud Gateway route config.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="appResourceId")
    def app_resource_id(self) -> Optional[str]:
        """
        The resource Id of the Azure Spring Cloud app, required unless route defines `uri`.
        """
        return pulumi.get(self, "app_resource_id")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.GatewayApiRouteResponse']]:
        """
        Array of API routes, each route contains properties such as `title`, `uri`, `ssoEnabled`, `predicates`, `filters`.
        """
        return pulumi.get(self, "routes")


@pulumi.output_type
class ServiceRegistryInstanceResponse(dict):
    """
    Collection of instances belong to the Service Registry
    """
    def __init__(__self__, *,
                 name: str,
                 status: str):
        """
        Collection of instances belong to the Service Registry
        :param str name: Name of the Service Registry instance
        :param str status: Status of the Service Registry instance
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Service Registry instance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the Service Registry instance
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ServiceRegistryPropertiesResponse(dict):
    """
    Service Registry properties payload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceRequests":
            suggest = "resource_requests"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRegistryPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRegistryPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRegistryPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instances: Sequence['outputs.ServiceRegistryInstanceResponse'],
                 provisioning_state: str,
                 resource_requests: 'outputs.ServiceRegistryResourceRequestsResponse'):
        """
        Service Registry properties payload
        :param Sequence['ServiceRegistryInstanceResponse'] instances: Collection of instances belong to Service Registry.
        :param str provisioning_state: State of the Service Registry.
        :param 'ServiceRegistryResourceRequestsResponse' resource_requests: The requested resource quantity for required CPU and Memory.
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_requests", resource_requests)

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.ServiceRegistryInstanceResponse']:
        """
        Collection of instances belong to Service Registry.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the Service Registry.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceRequests")
    def resource_requests(self) -> 'outputs.ServiceRegistryResourceRequestsResponse':
        """
        The requested resource quantity for required CPU and Memory.
        """
        return pulumi.get(self, "resource_requests")


@pulumi.output_type
class ServiceRegistryResourceRequestsResponse(dict):
    """
    Resource request payload of Service Registry
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRegistryResourceRequestsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRegistryResourceRequestsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRegistryResourceRequestsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: str,
                 instance_count: int,
                 memory: str):
        """
        Resource request payload of Service Registry
        :param str cpu: Cpu allocated to each Service Registry instance
        :param int instance_count: Instance count of the Service Registry
        :param str memory: Memory allocated to each Service Registry instance
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> str:
        """
        Cpu allocated to each Service Registry instance
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        Instance count of the Service Registry
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Memory allocated to each Service Registry instance
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class SkuResponse(dict):
    """
    Sku of Azure Spring Cloud
    """
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 name: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        Sku of Azure Spring Cloud
        :param int capacity: Current capacity of the target resource
        :param str name: Name of the Sku
        :param str tier: Tier of the Sku
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if name is None:
            name = 'S0'
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is None:
            tier = 'Standard'
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Current capacity of the target resource
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Sku
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        Tier of the Sku
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SsoPropertiesResponse(dict):
    """
    Single sign-on related configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "issuerUri":
            suggest = "issuer_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SsoPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SsoPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SsoPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 issuer_uri: Optional[str] = None,
                 scope: Optional[Sequence[str]] = None):
        """
        Single sign-on related configuration
        :param str client_id: The public identifier for the application
        :param str client_secret: The secret known only to the application and the authorization server
        :param str issuer_uri: The URI of Issuer Identifier
        :param Sequence[str] scope: It defines the specific actions applications can be allowed to do on a user's behalf
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if issuer_uri is not None:
            pulumi.set(__self__, "issuer_uri", issuer_uri)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        The public identifier for the application
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        The secret known only to the application and the authorization server
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="issuerUri")
    def issuer_uri(self) -> Optional[str]:
        """
        The URI of Issuer Identifier
        """
        return pulumi.get(self, "issuer_uri")

    @property
    @pulumi.getter
    def scope(self) -> Optional[Sequence[str]]:
        """
        It defines the specific actions applications can be allowed to do on a user's behalf
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class StackPropertiesResponse(dict):
    """
    KPack ClusterStack properties payload
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 version: Optional[str] = None):
        """
        KPack ClusterStack properties payload
        :param str id: Id of the ClusterStack.
        :param str version: Version of the ClusterStack
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the ClusterStack.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the ClusterStack
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource modification (UTC).
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


