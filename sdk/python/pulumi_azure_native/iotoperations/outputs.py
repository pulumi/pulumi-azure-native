# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdvancedSettingsResponse',
    'AuthorizationConfigResponse',
    'AuthorizationRuleResponse',
    'AutomaticCertMethodResponse',
    'BackendChainResponse',
    'BatchingConfigurationResponse',
    'BrokerAuthenticationPropertiesResponse',
    'BrokerAuthenticatorCustomAuthResponse',
    'BrokerAuthenticatorMethodCustomResponse',
    'BrokerAuthenticatorMethodSatResponse',
    'BrokerAuthenticatorMethodX509AttributesResponse',
    'BrokerAuthenticatorMethodX509Response',
    'BrokerAuthenticatorMethodsResponse',
    'BrokerAuthorizationPropertiesResponse',
    'BrokerDiagnosticsResponse',
    'BrokerListenerPropertiesResponse',
    'BrokerPropertiesResponse',
    'BrokerResourceRuleResponse',
    'CardinalityResponse',
    'CertManagerCertOptionsResponse',
    'CertManagerIssuerRefResponse',
    'CertManagerPrivateKeyResponse',
    'ClientConfigResponse',
    'DataFlowBuiltInTransformationDatasetResponse',
    'DataFlowBuiltInTransformationFilterResponse',
    'DataFlowBuiltInTransformationMapResponse',
    'DataFlowBuiltInTransformationResponse',
    'DataFlowDestinationOperationResponse',
    'DataFlowEndpointAuthenticationResponse',
    'DataFlowEndpointAuthenticationSaslResponse',
    'DataFlowEndpointAuthenticationServiceAccountTokenResponse',
    'DataFlowEndpointAuthenticationSystemAssignedManagedIdentityResponse',
    'DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse',
    'DataFlowEndpointAuthenticationX509Response',
    'DataFlowEndpointDataExplorerResponse',
    'DataFlowEndpointDataLakeStorageResponse',
    'DataFlowEndpointFabricOneLakeNamesResponse',
    'DataFlowEndpointFabricOneLakeResponse',
    'DataFlowEndpointKafkaBatchingResponse',
    'DataFlowEndpointKafkaResponse',
    'DataFlowEndpointLocalStorageResponse',
    'DataFlowEndpointMqttResponse',
    'DataFlowEndpointPropertiesResponse',
    'DataFlowOperationResponse',
    'DataFlowProfilePropertiesResponse',
    'DataFlowPropertiesResponse',
    'DataFlowSourceOperationResponse',
    'DiagnosticsLogsResponse',
    'DiskBackedMessageBufferResponse',
    'ExtendedLocationResponse',
    'FrontendResponse',
    'GenerateResourceLimitsResponse',
    'InstancePropertiesResponse',
    'KubernetesReferenceResponse',
    'ListenerPortResponse',
    'LocalKubernetesReferenceResponse',
    'MetricsResponse',
    'OpenTelemetryExportConfigResponse',
    'OpenTelemetryLogExportConfigResponse',
    'PrincipalDefinitionResponse',
    'ProfileDiagnosticsResponse',
    'SanForCertResponse',
    'SelfCheckResponse',
    'SelfTracingResponse',
    'StateStoreResourceRuleResponse',
    'SubscriberQueueLimitResponse',
    'SystemDataResponse',
    'TlsCertMethodResponse',
    'TlsPropertiesResponse',
    'TracesResponse',
    'VolumeClaimResourceRequirementsResponse',
    'VolumeClaimSpecResponse',
    'VolumeClaimSpecSelectorMatchExpressionsResponse',
    'VolumeClaimSpecSelectorResponse',
    'X509ManualCertificateResponse',
]

@pulumi.output_type
class AdvancedSettingsResponse(dict):
    """
    Broker Advanced Settings
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptInternalTraffic":
            suggest = "encrypt_internal_traffic"
        elif key == "internalCerts":
            suggest = "internal_certs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdvancedSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdvancedSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdvancedSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 clients: Optional['outputs.ClientConfigResponse'] = None,
                 encrypt_internal_traffic: Optional[str] = None,
                 internal_certs: Optional['outputs.CertManagerCertOptionsResponse'] = None):
        """
        Broker Advanced Settings
        :param 'ClientConfigResponse' clients: Configurations related to All Clients.
        :param str encrypt_internal_traffic: The setting to enable or disable encryption of internal Traffic.
        :param 'CertManagerCertOptionsResponse' internal_certs: Certificate rotation and private key configuration.
        """
        if clients is not None:
            pulumi.set(__self__, "clients", clients)
        if encrypt_internal_traffic is None:
            encrypt_internal_traffic = 'Enabled'
        if encrypt_internal_traffic is not None:
            pulumi.set(__self__, "encrypt_internal_traffic", encrypt_internal_traffic)
        if internal_certs is not None:
            pulumi.set(__self__, "internal_certs", internal_certs)

    @property
    @pulumi.getter
    def clients(self) -> Optional['outputs.ClientConfigResponse']:
        """
        Configurations related to All Clients.
        """
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter(name="encryptInternalTraffic")
    def encrypt_internal_traffic(self) -> Optional[str]:
        """
        The setting to enable or disable encryption of internal Traffic.
        """
        return pulumi.get(self, "encrypt_internal_traffic")

    @property
    @pulumi.getter(name="internalCerts")
    def internal_certs(self) -> Optional['outputs.CertManagerCertOptionsResponse']:
        """
        Certificate rotation and private key configuration.
        """
        return pulumi.get(self, "internal_certs")


@pulumi.output_type
class AuthorizationConfigResponse(dict):
    """
    Broker AuthorizationConfig properties
    """
    def __init__(__self__, *,
                 cache: Optional[str] = None,
                 rules: Optional[Sequence['outputs.AuthorizationRuleResponse']] = None):
        """
        Broker AuthorizationConfig properties
        :param str cache: Enable caching of the authorization rules.
        :param Sequence['AuthorizationRuleResponse'] rules: The authorization rules to follow. If no rule is set, but Authorization Resource is used that would mean DenyAll.
        """
        if cache is None:
            cache = 'Enabled'
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def cache(self) -> Optional[str]:
        """
        Enable caching of the authorization rules.
        """
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AuthorizationRuleResponse']]:
        """
        The authorization rules to follow. If no rule is set, but Authorization Resource is used that would mean DenyAll.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class AuthorizationRuleResponse(dict):
    """
    AuthorizationConfig Rule Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "brokerResources":
            suggest = "broker_resources"
        elif key == "stateStoreResources":
            suggest = "state_store_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthorizationRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthorizationRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthorizationRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker_resources: Sequence['outputs.BrokerResourceRuleResponse'],
                 principals: 'outputs.PrincipalDefinitionResponse',
                 state_store_resources: Optional[Sequence['outputs.StateStoreResourceRuleResponse']] = None):
        """
        AuthorizationConfig Rule Properties
        :param Sequence['BrokerResourceRuleResponse'] broker_resources: Give access to Broker methods and topics.
        :param 'PrincipalDefinitionResponse' principals: Give access to clients based on the following properties.
        :param Sequence['StateStoreResourceRuleResponse'] state_store_resources: Give access to state store resources.
        """
        pulumi.set(__self__, "broker_resources", broker_resources)
        pulumi.set(__self__, "principals", principals)
        if state_store_resources is not None:
            pulumi.set(__self__, "state_store_resources", state_store_resources)

    @property
    @pulumi.getter(name="brokerResources")
    def broker_resources(self) -> Sequence['outputs.BrokerResourceRuleResponse']:
        """
        Give access to Broker methods and topics.
        """
        return pulumi.get(self, "broker_resources")

    @property
    @pulumi.getter
    def principals(self) -> 'outputs.PrincipalDefinitionResponse':
        """
        Give access to clients based on the following properties.
        """
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter(name="stateStoreResources")
    def state_store_resources(self) -> Optional[Sequence['outputs.StateStoreResourceRuleResponse']]:
        """
        Give access to state store resources.
        """
        return pulumi.get(self, "state_store_resources")


@pulumi.output_type
class AutomaticCertMethodResponse(dict):
    """
    Automatic TLS server certificate management with cert-manager
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "issuerRef":
            suggest = "issuer_ref"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "renewBefore":
            suggest = "renew_before"
        elif key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomaticCertMethodResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomaticCertMethodResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomaticCertMethodResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 issuer_ref: 'outputs.CertManagerIssuerRefResponse',
                 duration: Optional[str] = None,
                 private_key: Optional['outputs.CertManagerPrivateKeyResponse'] = None,
                 renew_before: Optional[str] = None,
                 san: Optional['outputs.SanForCertResponse'] = None,
                 secret_ref: Optional[str] = None):
        """
        Automatic TLS server certificate management with cert-manager
        :param 'CertManagerIssuerRefResponse' issuer_ref: cert-manager issuerRef.
        :param str duration: Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        :param 'CertManagerPrivateKeyResponse' private_key: Type of certificate private key.
        :param str renew_before: When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        :param 'SanForCertResponse' san: Additional Subject Alternative Names (SANs) to include in the certificate.
        :param str secret_ref: Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through an identifying name, not the secret itself.
        """
        pulumi.set(__self__, "issuer_ref", issuer_ref)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if san is not None:
            pulumi.set(__self__, "san", san)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> 'outputs.CertManagerIssuerRefResponse':
        """
        cert-manager issuerRef.
        """
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional['outputs.CertManagerPrivateKeyResponse']:
        """
        Type of certificate private key.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> Optional[str]:
        """
        When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        """
        return pulumi.get(self, "renew_before")

    @property
    @pulumi.getter
    def san(self) -> Optional['outputs.SanForCertResponse']:
        """
        Additional Subject Alternative Names (SANs) to include in the certificate.
        """
        return pulumi.get(self, "san")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[str]:
        """
        Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through an identifying name, not the secret itself.
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class BackendChainResponse(dict):
    """
    Desired properties of the backend instances of the broker
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redundancyFactor":
            suggest = "redundancy_factor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendChainResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendChainResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendChainResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 partitions: int,
                 redundancy_factor: int,
                 workers: Optional[int] = None):
        """
        Desired properties of the backend instances of the broker
        :param int partitions: The desired number of physical backend partitions.
        :param int redundancy_factor: The desired numbers of backend replicas (pods) in a physical partition.
        :param int workers: Number of logical backend workers per replica (pod).
        """
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "redundancy_factor", redundancy_factor)
        if workers is None:
            workers = 1
        if workers is not None:
            pulumi.set(__self__, "workers", workers)

    @property
    @pulumi.getter
    def partitions(self) -> int:
        """
        The desired number of physical backend partitions.
        """
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="redundancyFactor")
    def redundancy_factor(self) -> int:
        """
        The desired numbers of backend replicas (pods) in a physical partition.
        """
        return pulumi.get(self, "redundancy_factor")

    @property
    @pulumi.getter
    def workers(self) -> Optional[int]:
        """
        Number of logical backend workers per replica (pod).
        """
        return pulumi.get(self, "workers")


@pulumi.output_type
class BatchingConfigurationResponse(dict):
    """
    Batching configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latencySeconds":
            suggest = "latency_seconds"
        elif key == "maxMessages":
            suggest = "max_messages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchingConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchingConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchingConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 latency_seconds: Optional[int] = None,
                 max_messages: Optional[int] = None):
        """
        Batching configuration
        :param int latency_seconds: Batching latency in seconds.
        :param int max_messages: Maximum number of messages in a batch.
        """
        if latency_seconds is None:
            latency_seconds = 60
        if latency_seconds is not None:
            pulumi.set(__self__, "latency_seconds", latency_seconds)
        if max_messages is None:
            max_messages = 100000
        if max_messages is not None:
            pulumi.set(__self__, "max_messages", max_messages)

    @property
    @pulumi.getter(name="latencySeconds")
    def latency_seconds(self) -> Optional[int]:
        """
        Batching latency in seconds.
        """
        return pulumi.get(self, "latency_seconds")

    @property
    @pulumi.getter(name="maxMessages")
    def max_messages(self) -> Optional[int]:
        """
        Maximum number of messages in a batch.
        """
        return pulumi.get(self, "max_messages")


@pulumi.output_type
class BrokerAuthenticationPropertiesResponse(dict):
    """
    BrokerAuthentication Resource properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMethods":
            suggest = "authentication_methods"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerAuthenticationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerAuthenticationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerAuthenticationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_methods: Sequence['outputs.BrokerAuthenticatorMethodsResponse'],
                 provisioning_state: str):
        """
        BrokerAuthentication Resource properties
        :param Sequence['BrokerAuthenticatorMethodsResponse'] authentication_methods: Defines a set of Broker authentication methods to be used on `BrokerListeners`. For each array element one authenticator type supported.
        :param str provisioning_state: The status of the last operation.
        """
        pulumi.set(__self__, "authentication_methods", authentication_methods)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="authenticationMethods")
    def authentication_methods(self) -> Sequence['outputs.BrokerAuthenticatorMethodsResponse']:
        """
        Defines a set of Broker authentication methods to be used on `BrokerListeners`. For each array element one authenticator type supported.
        """
        return pulumi.get(self, "authentication_methods")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class BrokerAuthenticatorCustomAuthResponse(dict):
    """
    Custom Authentication properties
    """
    def __init__(__self__, *,
                 x509: 'outputs.X509ManualCertificateResponse'):
        """
        Custom Authentication properties
        :param 'X509ManualCertificateResponse' x509: X509 Custom Auth type details.
        """
        pulumi.set(__self__, "x509", x509)

    @property
    @pulumi.getter
    def x509(self) -> 'outputs.X509ManualCertificateResponse':
        """
        X509 Custom Auth type details.
        """
        return pulumi.get(self, "x509")


@pulumi.output_type
class BrokerAuthenticatorMethodCustomResponse(dict):
    """
    Custom method for BrokerAuthentication
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertConfigMap":
            suggest = "ca_cert_config_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerAuthenticatorMethodCustomResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerAuthenticatorMethodCustomResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerAuthenticatorMethodCustomResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: str,
                 auth: Optional['outputs.BrokerAuthenticatorCustomAuthResponse'] = None,
                 ca_cert_config_map: Optional[str] = None,
                 headers: Optional[Mapping[str, str]] = None):
        """
        Custom method for BrokerAuthentication
        :param str endpoint: Endpoint of the custom authentication server. Must be an HTTPS endpoint.
        :param 'BrokerAuthenticatorCustomAuthResponse' auth: Optional authentication needed for authenticating with the custom authentication server.
        :param str ca_cert_config_map: Optional CA certificate for validating the custom authentication server's certificate.
        :param Mapping[str, str] headers: Additional HTTP headers to pass to the custom authentication server.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if ca_cert_config_map is not None:
            pulumi.set(__self__, "ca_cert_config_map", ca_cert_config_map)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        Endpoint of the custom authentication server. Must be an HTTPS endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.BrokerAuthenticatorCustomAuthResponse']:
        """
        Optional authentication needed for authenticating with the custom authentication server.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="caCertConfigMap")
    def ca_cert_config_map(self) -> Optional[str]:
        """
        Optional CA certificate for validating the custom authentication server's certificate.
        """
        return pulumi.get(self, "ca_cert_config_map")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, str]]:
        """
        Additional HTTP headers to pass to the custom authentication server.
        """
        return pulumi.get(self, "headers")


@pulumi.output_type
class BrokerAuthenticatorMethodSatResponse(dict):
    """
    Service Account Token for BrokerAuthentication
    """
    def __init__(__self__, *,
                 audiences: Sequence[str]):
        """
        Service Account Token for BrokerAuthentication
        :param Sequence[str] audiences: List of allowed audience.
        """
        pulumi.set(__self__, "audiences", audiences)

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        """
        List of allowed audience.
        """
        return pulumi.get(self, "audiences")


@pulumi.output_type
class BrokerAuthenticatorMethodX509AttributesResponse(dict):
    """
    BrokerAuthenticatorMethodX509Attributes properties.
    """
    def __init__(__self__, *,
                 attributes: Mapping[str, str],
                 subject: str):
        """
        BrokerAuthenticatorMethodX509Attributes properties.
        :param Mapping[str, str] attributes: Attributes object.
        :param str subject: Subject of the X509 attribute.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def attributes(self) -> Mapping[str, str]:
        """
        Attributes object.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        Subject of the X509 attribute.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class BrokerAuthenticatorMethodX509Response(dict):
    """
    X509 for BrokerAuthentication.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationAttributes":
            suggest = "authorization_attributes"
        elif key == "trustedClientCaCert":
            suggest = "trusted_client_ca_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerAuthenticatorMethodX509Response. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerAuthenticatorMethodX509Response.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerAuthenticatorMethodX509Response.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_attributes: Optional[Mapping[str, 'outputs.BrokerAuthenticatorMethodX509AttributesResponse']] = None,
                 trusted_client_ca_cert: Optional[str] = None):
        """
        X509 for BrokerAuthentication.
        :param Mapping[str, 'BrokerAuthenticatorMethodX509AttributesResponse'] authorization_attributes: X509 authorization attributes properties.
        :param str trusted_client_ca_cert: Name of the trusted client ca cert resource.
        """
        if authorization_attributes is not None:
            pulumi.set(__self__, "authorization_attributes", authorization_attributes)
        if trusted_client_ca_cert is None:
            trusted_client_ca_cert = 'client-ca'
        if trusted_client_ca_cert is not None:
            pulumi.set(__self__, "trusted_client_ca_cert", trusted_client_ca_cert)

    @property
    @pulumi.getter(name="authorizationAttributes")
    def authorization_attributes(self) -> Optional[Mapping[str, 'outputs.BrokerAuthenticatorMethodX509AttributesResponse']]:
        """
        X509 authorization attributes properties.
        """
        return pulumi.get(self, "authorization_attributes")

    @property
    @pulumi.getter(name="trustedClientCaCert")
    def trusted_client_ca_cert(self) -> Optional[str]:
        """
        Name of the trusted client ca cert resource.
        """
        return pulumi.get(self, "trusted_client_ca_cert")


@pulumi.output_type
class BrokerAuthenticatorMethodsResponse(dict):
    """
    Set of broker authentication policies. Only one method is supported for each entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountToken":
            suggest = "service_account_token"
        elif key == "x509Credentials":
            suggest = "x509_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerAuthenticatorMethodsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerAuthenticatorMethodsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerAuthenticatorMethodsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 custom: Optional['outputs.BrokerAuthenticatorMethodCustomResponse'] = None,
                 service_account_token: Optional['outputs.BrokerAuthenticatorMethodSatResponse'] = None,
                 x509_credentials: Optional['outputs.BrokerAuthenticatorMethodX509Response'] = None):
        """
        Set of broker authentication policies. Only one method is supported for each entry.
        :param str method: Custom authentication configuration.
        :param 'BrokerAuthenticatorMethodCustomResponse' custom: Custom authentication configuration.
        :param 'BrokerAuthenticatorMethodSatResponse' service_account_token: ServiceAccountToken authentication configuration.
        :param 'BrokerAuthenticatorMethodX509Response' x509_credentials: X.509 authentication configuration.
        """
        pulumi.set(__self__, "method", method)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)
        if x509_credentials is not None:
            pulumi.set(__self__, "x509_credentials", x509_credentials)

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Custom authentication configuration.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def custom(self) -> Optional['outputs.BrokerAuthenticatorMethodCustomResponse']:
        """
        Custom authentication configuration.
        """
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.BrokerAuthenticatorMethodSatResponse']:
        """
        ServiceAccountToken authentication configuration.
        """
        return pulumi.get(self, "service_account_token")

    @property
    @pulumi.getter(name="x509Credentials")
    def x509_credentials(self) -> Optional['outputs.BrokerAuthenticatorMethodX509Response']:
        """
        X.509 authentication configuration.
        """
        return pulumi.get(self, "x509_credentials")


@pulumi.output_type
class BrokerAuthorizationPropertiesResponse(dict):
    """
    BrokerAuthorization Resource properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationPolicies":
            suggest = "authorization_policies"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerAuthorizationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerAuthorizationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerAuthorizationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_policies: 'outputs.AuthorizationConfigResponse',
                 provisioning_state: str):
        """
        BrokerAuthorization Resource properties
        :param 'AuthorizationConfigResponse' authorization_policies: The list of authorization policies supported by the Authorization Resource.
        :param str provisioning_state: The status of the last operation.
        """
        pulumi.set(__self__, "authorization_policies", authorization_policies)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="authorizationPolicies")
    def authorization_policies(self) -> 'outputs.AuthorizationConfigResponse':
        """
        The list of authorization policies supported by the Authorization Resource.
        """
        return pulumi.get(self, "authorization_policies")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class BrokerDiagnosticsResponse(dict):
    """
    Broker Diagnostic Setting properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfCheck":
            suggest = "self_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerDiagnosticsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerDiagnosticsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerDiagnosticsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logs: Optional['outputs.DiagnosticsLogsResponse'] = None,
                 metrics: Optional['outputs.MetricsResponse'] = None,
                 self_check: Optional['outputs.SelfCheckResponse'] = None,
                 traces: Optional['outputs.TracesResponse'] = None):
        """
        Broker Diagnostic Setting properties
        :param 'DiagnosticsLogsResponse' logs: Diagnostic log settings for the resource.
        :param 'MetricsResponse' metrics: The metrics settings for the resource.
        :param 'SelfCheckResponse' self_check: The self check properties.
        :param 'TracesResponse' traces: The trace properties.
        """
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if self_check is not None:
            pulumi.set(__self__, "self_check", self_check)
        if traces is not None:
            pulumi.set(__self__, "traces", traces)

    @property
    @pulumi.getter
    def logs(self) -> Optional['outputs.DiagnosticsLogsResponse']:
        """
        Diagnostic log settings for the resource.
        """
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.MetricsResponse']:
        """
        The metrics settings for the resource.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="selfCheck")
    def self_check(self) -> Optional['outputs.SelfCheckResponse']:
        """
        The self check properties.
        """
        return pulumi.get(self, "self_check")

    @property
    @pulumi.getter
    def traces(self) -> Optional['outputs.TracesResponse']:
        """
        The trace properties.
        """
        return pulumi.get(self, "traces")


@pulumi.output_type
class BrokerListenerPropertiesResponse(dict):
    """
    Defines a Broker listener. A listener is a collection of ports on which the broker accepts connections from clients.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "brokerRef":
            suggest = "broker_ref"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerListenerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerListenerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerListenerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker_ref: str,
                 ports: Sequence['outputs.ListenerPortResponse'],
                 provisioning_state: str,
                 service_name: Optional[str] = None,
                 service_type: Optional[str] = None):
        """
        Defines a Broker listener. A listener is a collection of ports on which the broker accepts connections from clients.
        :param str broker_ref: Broker associated with this listener.
        :param Sequence['ListenerPortResponse'] ports: Ports on which this listener accepts client connections.
        :param str provisioning_state: The status of the last operation.
        :param str service_name: Kubernetes Service name of this listener.
        :param str service_type: Kubernetes Service type of this listener.
        """
        pulumi.set(__self__, "broker_ref", broker_ref)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if service_name is None:
            service_name = 'aio-mq-dmqtt-frontend'
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if service_type is None:
            service_type = 'ClusterIp'
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="brokerRef")
    def broker_ref(self) -> str:
        """
        Broker associated with this listener.
        """
        return pulumi.get(self, "broker_ref")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.ListenerPortResponse']:
        """
        Ports on which this listener accepts client connections.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Kubernetes Service name of this listener.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Kubernetes Service type of this listener.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class BrokerPropertiesResponse(dict):
    """
    Broker Resource properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "diskBackedMessageBuffer":
            suggest = "disk_backed_message_buffer"
        elif key == "generateResourceLimits":
            suggest = "generate_resource_limits"
        elif key == "memoryProfile":
            suggest = "memory_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrokerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrokerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrokerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 advanced: Optional['outputs.AdvancedSettingsResponse'] = None,
                 cardinality: Optional['outputs.CardinalityResponse'] = None,
                 diagnostics: Optional['outputs.BrokerDiagnosticsResponse'] = None,
                 disk_backed_message_buffer: Optional['outputs.DiskBackedMessageBufferResponse'] = None,
                 generate_resource_limits: Optional['outputs.GenerateResourceLimitsResponse'] = None,
                 memory_profile: Optional[str] = None):
        """
        Broker Resource properties
        :param str provisioning_state: The status of the last operation.
        :param 'AdvancedSettingsResponse' advanced: Advanced settings of Broker.
        :param 'CardinalityResponse' cardinality: The cardinality details of the broker.
        :param 'BrokerDiagnosticsResponse' diagnostics: Spec defines the desired identities of Broker diagnostics settings.
        :param 'DiskBackedMessageBufferResponse' disk_backed_message_buffer: Settings of Disk Backed Message Buffer.
        :param 'GenerateResourceLimitsResponse' generate_resource_limits: This setting controls whether Kubernetes CPU resource limits are requested. Increasing the number of replicas or workers proportionally increases the amount of CPU resources requested. If this setting is enabled and there are insufficient CPU resources, an error will be emitted.
        :param str memory_profile: Memory profile of Broker.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cardinality is not None:
            pulumi.set(__self__, "cardinality", cardinality)
        if diagnostics is not None:
            pulumi.set(__self__, "diagnostics", diagnostics)
        if disk_backed_message_buffer is not None:
            pulumi.set(__self__, "disk_backed_message_buffer", disk_backed_message_buffer)
        if generate_resource_limits is not None:
            pulumi.set(__self__, "generate_resource_limits", generate_resource_limits)
        if memory_profile is None:
            memory_profile = 'Medium'
        if memory_profile is not None:
            pulumi.set(__self__, "memory_profile", memory_profile)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.AdvancedSettingsResponse']:
        """
        Advanced settings of Broker.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def cardinality(self) -> Optional['outputs.CardinalityResponse']:
        """
        The cardinality details of the broker.
        """
        return pulumi.get(self, "cardinality")

    @property
    @pulumi.getter
    def diagnostics(self) -> Optional['outputs.BrokerDiagnosticsResponse']:
        """
        Spec defines the desired identities of Broker diagnostics settings.
        """
        return pulumi.get(self, "diagnostics")

    @property
    @pulumi.getter(name="diskBackedMessageBuffer")
    def disk_backed_message_buffer(self) -> Optional['outputs.DiskBackedMessageBufferResponse']:
        """
        Settings of Disk Backed Message Buffer.
        """
        return pulumi.get(self, "disk_backed_message_buffer")

    @property
    @pulumi.getter(name="generateResourceLimits")
    def generate_resource_limits(self) -> Optional['outputs.GenerateResourceLimitsResponse']:
        """
        This setting controls whether Kubernetes CPU resource limits are requested. Increasing the number of replicas or workers proportionally increases the amount of CPU resources requested. If this setting is enabled and there are insufficient CPU resources, an error will be emitted.
        """
        return pulumi.get(self, "generate_resource_limits")

    @property
    @pulumi.getter(name="memoryProfile")
    def memory_profile(self) -> Optional[str]:
        """
        Memory profile of Broker.
        """
        return pulumi.get(self, "memory_profile")


@pulumi.output_type
class BrokerResourceRuleResponse(dict):
    """
    Broker Resource Rule properties. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
    """
    def __init__(__self__, *,
                 method: str,
                 topics: Optional[Sequence[str]] = None):
        """
        Broker Resource Rule properties. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
        :param str method: Give access for a Broker method (i.e., Connect, Subscribe, or Publish).
        :param Sequence[str] topics: A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
        """
        pulumi.set(__self__, "method", method)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Give access for a Broker method (i.e., Connect, Subscribe, or Publish).
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def topics(self) -> Optional[Sequence[str]]:
        """
        A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
        """
        return pulumi.get(self, "topics")


@pulumi.output_type
class CardinalityResponse(dict):
    """
    Cardinality properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendChain":
            suggest = "backend_chain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CardinalityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CardinalityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CardinalityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_chain: 'outputs.BackendChainResponse',
                 frontend: 'outputs.FrontendResponse'):
        """
        Cardinality properties
        :param 'BackendChainResponse' backend_chain: The backend broker desired properties
        :param 'FrontendResponse' frontend: The frontend desired properties
        """
        pulumi.set(__self__, "backend_chain", backend_chain)
        pulumi.set(__self__, "frontend", frontend)

    @property
    @pulumi.getter(name="backendChain")
    def backend_chain(self) -> 'outputs.BackendChainResponse':
        """
        The backend broker desired properties
        """
        return pulumi.get(self, "backend_chain")

    @property
    @pulumi.getter
    def frontend(self) -> 'outputs.FrontendResponse':
        """
        The frontend desired properties
        """
        return pulumi.get(self, "frontend")


@pulumi.output_type
class CertManagerCertOptionsResponse(dict):
    """
    Cert Manager Cert properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "renewBefore":
            suggest = "renew_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertManagerCertOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertManagerCertOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertManagerCertOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 private_key: 'outputs.CertManagerPrivateKeyResponse',
                 renew_before: str):
        """
        Cert Manager Cert properties
        :param str duration: Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        :param 'CertManagerPrivateKeyResponse' private_key: Configuration of certificate private key.
        :param str renew_before: When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "renew_before", renew_before)

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> 'outputs.CertManagerPrivateKeyResponse':
        """
        Configuration of certificate private key.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> str:
        """
        When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        """
        return pulumi.get(self, "renew_before")


@pulumi.output_type
class CertManagerIssuerRefResponse(dict):
    """
    Cert-Manager issuerRef properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroup":
            suggest = "api_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertManagerIssuerRefResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertManagerIssuerRefResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertManagerIssuerRefResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_group: Optional[str] = None,
                 kind: str,
                 name: str):
        """
        Cert-Manager issuerRef properties
        :param str api_group: group of issuer.
        :param str kind: kind of issuer (Issuer or ClusterIssuer).
        :param str name: name of issuer.
        """
        if api_group is None:
            api_group = 'cert-manager.io'
        pulumi.set(__self__, "api_group", api_group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> str:
        """
        group of issuer.
        """
        return pulumi.get(self, "api_group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        kind of issuer (Issuer or ClusterIssuer).
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of issuer.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CertManagerPrivateKeyResponse(dict):
    """
    Cert Manager private key properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rotationPolicy":
            suggest = "rotation_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertManagerPrivateKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertManagerPrivateKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertManagerPrivateKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: str,
                 rotation_policy: str):
        """
        Cert Manager private key properties
        :param str algorithm: algorithm for private key.
        :param str rotation_policy: cert-manager private key rotationPolicy.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "rotation_policy", rotation_policy)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        algorithm for private key.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="rotationPolicy")
    def rotation_policy(self) -> str:
        """
        cert-manager private key rotationPolicy.
        """
        return pulumi.get(self, "rotation_policy")


@pulumi.output_type
class ClientConfigResponse(dict):
    """
    The settings of Client Config.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxKeepAliveSeconds":
            suggest = "max_keep_alive_seconds"
        elif key == "maxMessageExpirySeconds":
            suggest = "max_message_expiry_seconds"
        elif key == "maxPacketSizeBytes":
            suggest = "max_packet_size_bytes"
        elif key == "maxReceiveMaximum":
            suggest = "max_receive_maximum"
        elif key == "maxSessionExpirySeconds":
            suggest = "max_session_expiry_seconds"
        elif key == "subscriberQueueLimit":
            suggest = "subscriber_queue_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_keep_alive_seconds: Optional[int] = None,
                 max_message_expiry_seconds: Optional[int] = None,
                 max_packet_size_bytes: Optional[int] = None,
                 max_receive_maximum: Optional[int] = None,
                 max_session_expiry_seconds: Optional[int] = None,
                 subscriber_queue_limit: Optional['outputs.SubscriberQueueLimitResponse'] = None):
        """
        The settings of Client Config.
        :param int max_keep_alive_seconds: Upper bound of a client's Keep Alive, in seconds.
        :param int max_message_expiry_seconds: Upper bound of Message Expiry Interval, in seconds.
        :param int max_packet_size_bytes: Max message size for a packet in Bytes.
        :param int max_receive_maximum: Upper bound of Receive Maximum that a client can request in the CONNECT packet.
        :param int max_session_expiry_seconds: Upper bound of Session Expiry Interval, in seconds.
        :param 'SubscriberQueueLimitResponse' subscriber_queue_limit: The limit on the number of queued messages for a subscriber.
        """
        if max_keep_alive_seconds is not None:
            pulumi.set(__self__, "max_keep_alive_seconds", max_keep_alive_seconds)
        if max_message_expiry_seconds is not None:
            pulumi.set(__self__, "max_message_expiry_seconds", max_message_expiry_seconds)
        if max_packet_size_bytes is not None:
            pulumi.set(__self__, "max_packet_size_bytes", max_packet_size_bytes)
        if max_receive_maximum is not None:
            pulumi.set(__self__, "max_receive_maximum", max_receive_maximum)
        if max_session_expiry_seconds is not None:
            pulumi.set(__self__, "max_session_expiry_seconds", max_session_expiry_seconds)
        if subscriber_queue_limit is not None:
            pulumi.set(__self__, "subscriber_queue_limit", subscriber_queue_limit)

    @property
    @pulumi.getter(name="maxKeepAliveSeconds")
    def max_keep_alive_seconds(self) -> Optional[int]:
        """
        Upper bound of a client's Keep Alive, in seconds.
        """
        return pulumi.get(self, "max_keep_alive_seconds")

    @property
    @pulumi.getter(name="maxMessageExpirySeconds")
    def max_message_expiry_seconds(self) -> Optional[int]:
        """
        Upper bound of Message Expiry Interval, in seconds.
        """
        return pulumi.get(self, "max_message_expiry_seconds")

    @property
    @pulumi.getter(name="maxPacketSizeBytes")
    def max_packet_size_bytes(self) -> Optional[int]:
        """
        Max message size for a packet in Bytes.
        """
        return pulumi.get(self, "max_packet_size_bytes")

    @property
    @pulumi.getter(name="maxReceiveMaximum")
    def max_receive_maximum(self) -> Optional[int]:
        """
        Upper bound of Receive Maximum that a client can request in the CONNECT packet.
        """
        return pulumi.get(self, "max_receive_maximum")

    @property
    @pulumi.getter(name="maxSessionExpirySeconds")
    def max_session_expiry_seconds(self) -> Optional[int]:
        """
        Upper bound of Session Expiry Interval, in seconds.
        """
        return pulumi.get(self, "max_session_expiry_seconds")

    @property
    @pulumi.getter(name="subscriberQueueLimit")
    def subscriber_queue_limit(self) -> Optional['outputs.SubscriberQueueLimitResponse']:
        """
        The limit on the number of queued messages for a subscriber.
        """
        return pulumi.get(self, "subscriber_queue_limit")


@pulumi.output_type
class DataFlowBuiltInTransformationDatasetResponse(dict):
    """
    DataFlow BuiltIn Transformation dataset properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaRef":
            suggest = "schema_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowBuiltInTransformationDatasetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowBuiltInTransformationDatasetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowBuiltInTransformationDatasetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inputs: Sequence[str],
                 key: str,
                 description: Optional[str] = None,
                 expression: Optional[str] = None,
                 schema_ref: Optional[str] = None):
        """
        DataFlow BuiltIn Transformation dataset properties
        :param Sequence[str] inputs: List of fields for enriching from the Broker State Store.
        :param str key: The key of the dataset.
        :param str description: A user provided optional description of the dataset.
        :param str expression: Condition to enrich data from Broker State Store. Example: $1 < 0 || $1 > $2 (Assuming inputs section $1 and $2 are provided)
        :param str schema_ref: The reference to the schema that describes the dataset. Allowed: JSON Schema/draft-7.
        """
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "key", key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if schema_ref is not None:
            pulumi.set(__self__, "schema_ref", schema_ref)

    @property
    @pulumi.getter
    def inputs(self) -> Sequence[str]:
        """
        List of fields for enriching from the Broker State Store.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the dataset.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A user provided optional description of the dataset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Condition to enrich data from Broker State Store. Example: $1 < 0 || $1 > $2 (Assuming inputs section $1 and $2 are provided)
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="schemaRef")
    def schema_ref(self) -> Optional[str]:
        """
        The reference to the schema that describes the dataset. Allowed: JSON Schema/draft-7.
        """
        return pulumi.get(self, "schema_ref")


@pulumi.output_type
class DataFlowBuiltInTransformationFilterResponse(dict):
    """
    DataFlow BuiltIn Transformation filter properties
    """
    def __init__(__self__, *,
                 expression: str,
                 inputs: Sequence[str],
                 description: Optional[str] = None,
                 type: Optional[str] = None):
        """
        DataFlow BuiltIn Transformation filter properties
        :param str expression: Condition to filter data. Can reference input fields with {n} where n is the index of the input field starting from 1. Example: $1 < 0 || $1 > $2 (Assuming inputs section $1 and $2 are provided)
        :param Sequence[str] inputs: List of fields for filtering in JSON path expression.
        :param str description: A user provided optional description of the filter.
        :param str type: The type of dataflow operation.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "inputs", inputs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is None:
            type = 'Filter'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Condition to filter data. Can reference input fields with {n} where n is the index of the input field starting from 1. Example: $1 < 0 || $1 > $2 (Assuming inputs section $1 and $2 are provided)
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def inputs(self) -> Sequence[str]:
        """
        List of fields for filtering in JSON path expression.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A user provided optional description of the filter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of dataflow operation.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DataFlowBuiltInTransformationMapResponse(dict):
    """
    DataFlow BuiltIn Transformation map properties
    """
    def __init__(__self__, *,
                 inputs: Sequence[str],
                 output: str,
                 description: Optional[str] = None,
                 expression: Optional[str] = None,
                 type: Optional[str] = None):
        """
        DataFlow BuiltIn Transformation map properties
        :param Sequence[str] inputs: List of fields for mapping in JSON path expression.
        :param str output: Where and how the input fields to be organized in the output record.
        :param str description: A user provided optional description of the mapping function.
        :param str expression: Modify the inputs field(s) to the final output field. Example: $1 * 2.2 (Assuming inputs section $1 is provided)
        :param str type: Type of transformation.
        """
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "output", output)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def inputs(self) -> Sequence[str]:
        """
        List of fields for mapping in JSON path expression.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def output(self) -> str:
        """
        Where and how the input fields to be organized in the output record.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A user provided optional description of the mapping function.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Modify the inputs field(s) to the final output field. Example: $1 * 2.2 (Assuming inputs section $1 is provided)
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of transformation.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DataFlowBuiltInTransformationResponse(dict):
    """
    DataFlow BuiltIn Transformation properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaRef":
            suggest = "schema_ref"
        elif key == "serializationFormat":
            suggest = "serialization_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowBuiltInTransformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowBuiltInTransformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowBuiltInTransformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datasets: Optional[Sequence['outputs.DataFlowBuiltInTransformationDatasetResponse']] = None,
                 filter: Optional[Sequence['outputs.DataFlowBuiltInTransformationFilterResponse']] = None,
                 map: Optional[Sequence['outputs.DataFlowBuiltInTransformationMapResponse']] = None,
                 schema_ref: Optional[str] = None,
                 serialization_format: Optional[str] = None):
        """
        DataFlow BuiltIn Transformation properties
        :param Sequence['DataFlowBuiltInTransformationDatasetResponse'] datasets: Enrich data from Broker State Store. Dataset references a key in Broker State Store.
        :param Sequence['DataFlowBuiltInTransformationFilterResponse'] filter: Filters input record or datapoints based on condition.
        :param Sequence['DataFlowBuiltInTransformationMapResponse'] map: Maps input to output message.
        :param str schema_ref: Reference to the schema that describes the output of the transformation.
        :param str serialization_format: Serialization format. Optional; defaults to JSON. Allowed value JSON Schema/draft-7, Parquet. Default: Json
        """
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if map is not None:
            pulumi.set(__self__, "map", map)
        if schema_ref is not None:
            pulumi.set(__self__, "schema_ref", schema_ref)
        if serialization_format is None:
            serialization_format = 'Json'
        if serialization_format is not None:
            pulumi.set(__self__, "serialization_format", serialization_format)

    @property
    @pulumi.getter
    def datasets(self) -> Optional[Sequence['outputs.DataFlowBuiltInTransformationDatasetResponse']]:
        """
        Enrich data from Broker State Store. Dataset references a key in Broker State Store.
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Sequence['outputs.DataFlowBuiltInTransformationFilterResponse']]:
        """
        Filters input record or datapoints based on condition.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def map(self) -> Optional[Sequence['outputs.DataFlowBuiltInTransformationMapResponse']]:
        """
        Maps input to output message.
        """
        return pulumi.get(self, "map")

    @property
    @pulumi.getter(name="schemaRef")
    def schema_ref(self) -> Optional[str]:
        """
        Reference to the schema that describes the output of the transformation.
        """
        return pulumi.get(self, "schema_ref")

    @property
    @pulumi.getter(name="serializationFormat")
    def serialization_format(self) -> Optional[str]:
        """
        Serialization format. Optional; defaults to JSON. Allowed value JSON Schema/draft-7, Parquet. Default: Json
        """
        return pulumi.get(self, "serialization_format")


@pulumi.output_type
class DataFlowDestinationOperationResponse(dict):
    """
    DataFlow Destination Operation properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDestination":
            suggest = "data_destination"
        elif key == "endpointRef":
            suggest = "endpoint_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowDestinationOperationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowDestinationOperationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowDestinationOperationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_destination: str,
                 endpoint_ref: str):
        """
        DataFlow Destination Operation properties
        :param str data_destination: Destination location, can be a topic or table name. Supports dynamic values with $topic, $systemProperties, $userProperties, $payload, $context, and $subscription.
        :param str endpoint_ref: Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX type.
        """
        pulumi.set(__self__, "data_destination", data_destination)
        pulumi.set(__self__, "endpoint_ref", endpoint_ref)

    @property
    @pulumi.getter(name="dataDestination")
    def data_destination(self) -> str:
        """
        Destination location, can be a topic or table name. Supports dynamic values with $topic, $systemProperties, $userProperties, $payload, $context, and $subscription.
        """
        return pulumi.get(self, "data_destination")

    @property
    @pulumi.getter(name="endpointRef")
    def endpoint_ref(self) -> str:
        """
        Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX type.
        """
        return pulumi.get(self, "endpoint_ref")


@pulumi.output_type
class DataFlowEndpointAuthenticationResponse(dict):
    """
    Azure Data Explorer Authentication properties. NOTE - only authentication property is allowed per entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenSecretRef":
            suggest = "access_token_secret_ref"
        elif key == "saslSettings":
            suggest = "sasl_settings"
        elif key == "serviceAccountTokenSettings":
            suggest = "service_account_token_settings"
        elif key == "systemAssignedManagedIdentitySettings":
            suggest = "system_assigned_managed_identity_settings"
        elif key == "userAssignedManagedIdentitySettings":
            suggest = "user_assigned_managed_identity_settings"
        elif key == "x509CredentialsSettings":
            suggest = "x509_credentials_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointAuthenticationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointAuthenticationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointAuthenticationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 access_token_secret_ref: Optional[str] = None,
                 sasl_settings: Optional['outputs.DataFlowEndpointAuthenticationSaslResponse'] = None,
                 service_account_token_settings: Optional['outputs.DataFlowEndpointAuthenticationServiceAccountTokenResponse'] = None,
                 system_assigned_managed_identity_settings: Optional['outputs.DataFlowEndpointAuthenticationSystemAssignedManagedIdentityResponse'] = None,
                 user_assigned_managed_identity_settings: Optional['outputs.DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse'] = None,
                 x509_credentials_settings: Optional['outputs.DataFlowEndpointAuthenticationX509Response'] = None):
        """
        Azure Data Explorer Authentication properties. NOTE - only authentication property is allowed per entry.
        :param str method: Mode of Authentication.
        :param str access_token_secret_ref: SAS token authentication.
        :param 'DataFlowEndpointAuthenticationSaslResponse' sasl_settings: SASL authentication.
        :param 'DataFlowEndpointAuthenticationServiceAccountTokenResponse' service_account_token_settings: Service Account Token authentication.
        :param 'DataFlowEndpointAuthenticationSystemAssignedManagedIdentityResponse' system_assigned_managed_identity_settings: System-assigned managed identity authentication.
        :param 'DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse' user_assigned_managed_identity_settings: User-assigned managed identity authentication.
        :param 'DataFlowEndpointAuthenticationX509Response' x509_credentials_settings: X.509 certificate authentication.
        """
        pulumi.set(__self__, "method", method)
        if access_token_secret_ref is not None:
            pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        if sasl_settings is not None:
            pulumi.set(__self__, "sasl_settings", sasl_settings)
        if service_account_token_settings is not None:
            pulumi.set(__self__, "service_account_token_settings", service_account_token_settings)
        if system_assigned_managed_identity_settings is not None:
            pulumi.set(__self__, "system_assigned_managed_identity_settings", system_assigned_managed_identity_settings)
        if user_assigned_managed_identity_settings is not None:
            pulumi.set(__self__, "user_assigned_managed_identity_settings", user_assigned_managed_identity_settings)
        if x509_credentials_settings is not None:
            pulumi.set(__self__, "x509_credentials_settings", x509_credentials_settings)

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Mode of Authentication.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(self) -> Optional[str]:
        """
        SAS token authentication.
        """
        return pulumi.get(self, "access_token_secret_ref")

    @property
    @pulumi.getter(name="saslSettings")
    def sasl_settings(self) -> Optional['outputs.DataFlowEndpointAuthenticationSaslResponse']:
        """
        SASL authentication.
        """
        return pulumi.get(self, "sasl_settings")

    @property
    @pulumi.getter(name="serviceAccountTokenSettings")
    def service_account_token_settings(self) -> Optional['outputs.DataFlowEndpointAuthenticationServiceAccountTokenResponse']:
        """
        Service Account Token authentication.
        """
        return pulumi.get(self, "service_account_token_settings")

    @property
    @pulumi.getter(name="systemAssignedManagedIdentitySettings")
    def system_assigned_managed_identity_settings(self) -> Optional['outputs.DataFlowEndpointAuthenticationSystemAssignedManagedIdentityResponse']:
        """
        System-assigned managed identity authentication.
        """
        return pulumi.get(self, "system_assigned_managed_identity_settings")

    @property
    @pulumi.getter(name="userAssignedManagedIdentitySettings")
    def user_assigned_managed_identity_settings(self) -> Optional['outputs.DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse']:
        """
        User-assigned managed identity authentication.
        """
        return pulumi.get(self, "user_assigned_managed_identity_settings")

    @property
    @pulumi.getter(name="x509CredentialsSettings")
    def x509_credentials_settings(self) -> Optional['outputs.DataFlowEndpointAuthenticationX509Response']:
        """
        X.509 certificate authentication.
        """
        return pulumi.get(self, "x509_credentials_settings")


@pulumi.output_type
class DataFlowEndpointAuthenticationSaslResponse(dict):
    """
    DataFlowEndpoint Authentication Sasl properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "saslType":
            suggest = "sasl_type"
        elif key == "tokenSecretRef":
            suggest = "token_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointAuthenticationSaslResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointAuthenticationSaslResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointAuthenticationSaslResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sasl_type: str,
                 token_secret_ref: str):
        """
        DataFlowEndpoint Authentication Sasl properties
        :param str sasl_type: Type of SASL authentication. Can be PLAIN, SCRAM-SHA-256, or SCRAM-SHA-512.
        :param str token_secret_ref: Token secret name.
        """
        pulumi.set(__self__, "sasl_type", sasl_type)
        pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="saslType")
    def sasl_type(self) -> str:
        """
        Type of SASL authentication. Can be PLAIN, SCRAM-SHA-256, or SCRAM-SHA-512.
        """
        return pulumi.get(self, "sasl_type")

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(self) -> str:
        """
        Token secret name.
        """
        return pulumi.get(self, "token_secret_ref")


@pulumi.output_type
class DataFlowEndpointAuthenticationServiceAccountTokenResponse(dict):
    """
    Service Account Token for BrokerAuthentication
    """
    def __init__(__self__, *,
                 audience: str):
        """
        Service Account Token for BrokerAuthentication
        :param str audience: Audience of the service account. Optional, defaults to the broker internal service account audience.
        """
        pulumi.set(__self__, "audience", audience)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience of the service account. Optional, defaults to the broker internal service account audience.
        """
        return pulumi.get(self, "audience")


@pulumi.output_type
class DataFlowEndpointAuthenticationSystemAssignedManagedIdentityResponse(dict):
    """
    DataFlowEndpoint Authentication SystemAssignedManagedIdentity properties
    """
    def __init__(__self__, *,
                 audience: str):
        """
        DataFlowEndpoint Authentication SystemAssignedManagedIdentity properties
        :param str audience: Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.
        """
        pulumi.set(__self__, "audience", audience)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.
        """
        return pulumi.get(self, "audience")


@pulumi.output_type
class DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse(dict):
    """
    DataFlowEndpoint Authentication UserAssignedManagedIdentity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointAuthenticationUserAssignedManagedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: str,
                 client_id: str,
                 tenant_id: str):
        """
        DataFlowEndpoint Authentication UserAssignedManagedIdentity properties
        :param str audience: Resource identifier (application ID URI) of the resource, affixed with the .default suffix.
        :param str client_id: Client ID for the user-assigned managed identity.
        :param str tenant_id: Tenant ID.
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Resource identifier (application ID URI) of the resource, affixed with the .default suffix.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        Client ID for the user-assigned managed identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Tenant ID.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class DataFlowEndpointAuthenticationX509Response(dict):
    """
    DataFlowEndpoint Authentication X509 properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointAuthenticationX509Response. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointAuthenticationX509Response.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointAuthenticationX509Response.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_ref: str):
        """
        DataFlowEndpoint Authentication X509 properties
        :param str secret_ref: Secret reference of the X.509 certificate.
        """
        pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> str:
        """
        Secret reference of the X.509 certificate.
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class DataFlowEndpointDataExplorerResponse(dict):
    """
    Azure Data Explorer endpoint properties
    """
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 batching: Optional['outputs.BatchingConfigurationResponse'] = None):
        """
        Azure Data Explorer endpoint properties
        :param str database: Database name.
        :param str host: Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net .
        :param 'BatchingConfigurationResponse' batching: Azure Data Explorer endpoint batching configuration.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net .
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.BatchingConfigurationResponse']:
        """
        Azure Data Explorer endpoint batching configuration.
        """
        return pulumi.get(self, "batching")


@pulumi.output_type
class DataFlowEndpointDataLakeStorageResponse(dict):
    """
    Azure Data Lake endpoint properties
    """
    def __init__(__self__, *,
                 host: str,
                 batching: Optional['outputs.BatchingConfigurationResponse'] = None):
        """
        Azure Data Lake endpoint properties
        :param str host: Host of the Azure Data Lake in the form of <account>.blob.core.windows.net .
        :param 'BatchingConfigurationResponse' batching: Azure Data Lake endpoint batching configuration.
        """
        pulumi.set(__self__, "host", host)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host of the Azure Data Lake in the form of <account>.blob.core.windows.net .
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.BatchingConfigurationResponse']:
        """
        Azure Data Lake endpoint batching configuration.
        """
        return pulumi.get(self, "batching")


@pulumi.output_type
class DataFlowEndpointFabricOneLakeNamesResponse(dict):
    """
    Microsoft Fabric endpoint Names properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lakehouseName":
            suggest = "lakehouse_name"
        elif key == "workspaceName":
            suggest = "workspace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointFabricOneLakeNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointFabricOneLakeNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointFabricOneLakeNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lakehouse_name: str,
                 workspace_name: str):
        """
        Microsoft Fabric endpoint Names properties
        :param str lakehouse_name: Lakehouse name.
        :param str workspace_name: Workspace name.
        """
        pulumi.set(__self__, "lakehouse_name", lakehouse_name)
        pulumi.set(__self__, "workspace_name", workspace_name)

    @property
    @pulumi.getter(name="lakehouseName")
    def lakehouse_name(self) -> str:
        """
        Lakehouse name.
        """
        return pulumi.get(self, "lakehouse_name")

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> str:
        """
        Workspace name.
        """
        return pulumi.get(self, "workspace_name")


@pulumi.output_type
class DataFlowEndpointFabricOneLakeResponse(dict):
    """
    Microsoft Fabric endpoint properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oneLakePathType":
            suggest = "one_lake_path_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointFabricOneLakeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointFabricOneLakeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointFabricOneLakeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 names: 'outputs.DataFlowEndpointFabricOneLakeNamesResponse',
                 one_lake_path_type: str,
                 batching: Optional['outputs.BatchingConfigurationResponse'] = None):
        """
        Microsoft Fabric endpoint properties
        :param str host: Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com.
        :param 'DataFlowEndpointFabricOneLakeNamesResponse' names: Names of the workspace and lakehouse.
        :param str one_lake_path_type: Type of location of the data in the workspace. Can be either tables or files.
        :param 'BatchingConfigurationResponse' batching: Batching configuration.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "one_lake_path_type", one_lake_path_type)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def names(self) -> 'outputs.DataFlowEndpointFabricOneLakeNamesResponse':
        """
        Names of the workspace and lakehouse.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="oneLakePathType")
    def one_lake_path_type(self) -> str:
        """
        Type of location of the data in the workspace. Can be either tables or files.
        """
        return pulumi.get(self, "one_lake_path_type")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.BatchingConfigurationResponse']:
        """
        Batching configuration.
        """
        return pulumi.get(self, "batching")


@pulumi.output_type
class DataFlowEndpointKafkaBatchingResponse(dict):
    """
    Kafka endpoint Batching properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latencyMs":
            suggest = "latency_ms"
        elif key == "maxBytes":
            suggest = "max_bytes"
        elif key == "maxMessages":
            suggest = "max_messages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointKafkaBatchingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointKafkaBatchingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointKafkaBatchingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 latency_ms: Optional[int] = None,
                 max_bytes: Optional[int] = None,
                 max_messages: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        Kafka endpoint Batching properties
        :param int latency_ms: Batching latency in milliseconds.
        :param int max_bytes: Maximum number of bytes in a batch.
        :param int max_messages: Maximum number of messages in a batch.
        :param str mode: Mode for batching.
        """
        if latency_ms is None:
            latency_ms = 5
        if latency_ms is not None:
            pulumi.set(__self__, "latency_ms", latency_ms)
        if max_bytes is None:
            max_bytes = 1000000
        if max_bytes is not None:
            pulumi.set(__self__, "max_bytes", max_bytes)
        if max_messages is None:
            max_messages = 100000
        if max_messages is not None:
            pulumi.set(__self__, "max_messages", max_messages)
        if mode is None:
            mode = 'Enabled'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="latencyMs")
    def latency_ms(self) -> Optional[int]:
        """
        Batching latency in milliseconds.
        """
        return pulumi.get(self, "latency_ms")

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> Optional[int]:
        """
        Maximum number of bytes in a batch.
        """
        return pulumi.get(self, "max_bytes")

    @property
    @pulumi.getter(name="maxMessages")
    def max_messages(self) -> Optional[int]:
        """
        Maximum number of messages in a batch.
        """
        return pulumi.get(self, "max_messages")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Mode for batching.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class DataFlowEndpointKafkaResponse(dict):
    """
    Kafka endpoint properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerGroupId":
            suggest = "consumer_group_id"
        elif key == "copyMqttProperties":
            suggest = "copy_mqtt_properties"
        elif key == "kafkaAcks":
            suggest = "kafka_acks"
        elif key == "partitionStrategy":
            suggest = "partition_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointKafkaResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointKafkaResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointKafkaResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tls: 'outputs.TlsPropertiesResponse',
                 batching: Optional['outputs.DataFlowEndpointKafkaBatchingResponse'] = None,
                 compression: Optional[str] = None,
                 consumer_group_id: Optional[str] = None,
                 copy_mqtt_properties: Optional[str] = None,
                 host: Optional[str] = None,
                 kafka_acks: Optional[str] = None,
                 partition_strategy: Optional[str] = None):
        """
        Kafka endpoint properties
        :param 'TlsPropertiesResponse' tls: TLS configuration.
        :param 'DataFlowEndpointKafkaBatchingResponse' batching: Batching configuration.
        :param str compression: Compression. Can be none, gzip, lz4, or snappy. No effect if the endpoint is used as a source.
        :param str consumer_group_id: Consumer group ID.
        :param str copy_mqtt_properties: Copy Broker properties. No effect if the endpoint is used as a source or if the dataflow doesn't have an Broker source.
        :param str host: Kafka endpoint host.
        :param str kafka_acks: Kafka acks. Can be all, one, or zero. No effect if the endpoint is used as a source.
        :param str partition_strategy: Partition handling strategy. Can be default or static. No effect if the endpoint is used as a source.
        """
        pulumi.set(__self__, "tls", tls)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if compression is None:
            compression = 'None'
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if consumer_group_id is not None:
            pulumi.set(__self__, "consumer_group_id", consumer_group_id)
        if copy_mqtt_properties is None:
            copy_mqtt_properties = 'Disabled'
        if copy_mqtt_properties is not None:
            pulumi.set(__self__, "copy_mqtt_properties", copy_mqtt_properties)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kafka_acks is None:
            kafka_acks = 'All'
        if kafka_acks is not None:
            pulumi.set(__self__, "kafka_acks", kafka_acks)
        if partition_strategy is None:
            partition_strategy = 'Default'
        if partition_strategy is not None:
            pulumi.set(__self__, "partition_strategy", partition_strategy)

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.TlsPropertiesResponse':
        """
        TLS configuration.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.DataFlowEndpointKafkaBatchingResponse']:
        """
        Batching configuration.
        """
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        """
        Compression. Can be none, gzip, lz4, or snappy. No effect if the endpoint is used as a source.
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="consumerGroupId")
    def consumer_group_id(self) -> Optional[str]:
        """
        Consumer group ID.
        """
        return pulumi.get(self, "consumer_group_id")

    @property
    @pulumi.getter(name="copyMqttProperties")
    def copy_mqtt_properties(self) -> Optional[str]:
        """
        Copy Broker properties. No effect if the endpoint is used as a source or if the dataflow doesn't have an Broker source.
        """
        return pulumi.get(self, "copy_mqtt_properties")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Kafka endpoint host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="kafkaAcks")
    def kafka_acks(self) -> Optional[str]:
        """
        Kafka acks. Can be all, one, or zero. No effect if the endpoint is used as a source.
        """
        return pulumi.get(self, "kafka_acks")

    @property
    @pulumi.getter(name="partitionStrategy")
    def partition_strategy(self) -> Optional[str]:
        """
        Partition handling strategy. Can be default or static. No effect if the endpoint is used as a source.
        """
        return pulumi.get(self, "partition_strategy")


@pulumi.output_type
class DataFlowEndpointLocalStorageResponse(dict):
    """
    Local persistent volume endpoint properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "persistentVolumeClaimRef":
            suggest = "persistent_volume_claim_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointLocalStorageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointLocalStorageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointLocalStorageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 persistent_volume_claim_ref: str):
        """
        Local persistent volume endpoint properties
        :param str persistent_volume_claim_ref: Persistent volume claim name.
        """
        pulumi.set(__self__, "persistent_volume_claim_ref", persistent_volume_claim_ref)

    @property
    @pulumi.getter(name="persistentVolumeClaimRef")
    def persistent_volume_claim_ref(self) -> str:
        """
        Persistent volume claim name.
        """
        return pulumi.get(self, "persistent_volume_claim_ref")


@pulumi.output_type
class DataFlowEndpointMqttResponse(dict):
    """
    Broker endpoint properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIdPrefix":
            suggest = "client_id_prefix"
        elif key == "keepAliveSeconds":
            suggest = "keep_alive_seconds"
        elif key == "maxInflightMessages":
            suggest = "max_inflight_messages"
        elif key == "sessionExpirySeconds":
            suggest = "session_expiry_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointMqttResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointMqttResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointMqttResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id_prefix: Optional[str] = None,
                 host: Optional[str] = None,
                 keep_alive_seconds: Optional[int] = None,
                 max_inflight_messages: Optional[int] = None,
                 protocol: Optional[str] = None,
                 qos: Optional[int] = None,
                 retain: Optional[str] = None,
                 session_expiry_seconds: Optional[int] = None,
                 tls: Optional['outputs.TlsPropertiesResponse'] = None):
        """
        Broker endpoint properties
        :param str client_id_prefix: Client ID prefix. Client ID generated by the dataflow is <prefix>-TBD. Optional; no prefix if omitted.
        :param str host: Host of the Broker in the form of <hostname>:<port>. Optional; connects to Broker if omitted.
        :param int keep_alive_seconds: Broker KeepAlive for connection in seconds.
        :param int max_inflight_messages: The max number of messages to keep in flight. For subscribe, this is the receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
        :param str protocol: Enable or disable websockets.
        :param int qos: Qos for Broker connection.
        :param str retain: Whether or not to keep the retain setting.
        :param int session_expiry_seconds: Session expiry in seconds.
        :param 'TlsPropertiesResponse' tls: TLS configuration.
        """
        if client_id_prefix is not None:
            pulumi.set(__self__, "client_id_prefix", client_id_prefix)
        if host is None:
            host = 'aio-mq-dmqtt-frontend:1883'
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keep_alive_seconds is None:
            keep_alive_seconds = 60
        if keep_alive_seconds is not None:
            pulumi.set(__self__, "keep_alive_seconds", keep_alive_seconds)
        if max_inflight_messages is None:
            max_inflight_messages = 100
        if max_inflight_messages is not None:
            pulumi.set(__self__, "max_inflight_messages", max_inflight_messages)
        if protocol is None:
            protocol = 'Mqtt'
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if qos is None:
            qos = 1
        if qos is not None:
            pulumi.set(__self__, "qos", qos)
        if retain is None:
            retain = 'Keep'
        if retain is not None:
            pulumi.set(__self__, "retain", retain)
        if session_expiry_seconds is None:
            session_expiry_seconds = 3600
        if session_expiry_seconds is not None:
            pulumi.set(__self__, "session_expiry_seconds", session_expiry_seconds)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="clientIdPrefix")
    def client_id_prefix(self) -> Optional[str]:
        """
        Client ID prefix. Client ID generated by the dataflow is <prefix>-TBD. Optional; no prefix if omitted.
        """
        return pulumi.get(self, "client_id_prefix")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host of the Broker in the form of <hostname>:<port>. Optional; connects to Broker if omitted.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keepAliveSeconds")
    def keep_alive_seconds(self) -> Optional[int]:
        """
        Broker KeepAlive for connection in seconds.
        """
        return pulumi.get(self, "keep_alive_seconds")

    @property
    @pulumi.getter(name="maxInflightMessages")
    def max_inflight_messages(self) -> Optional[int]:
        """
        The max number of messages to keep in flight. For subscribe, this is the receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
        """
        return pulumi.get(self, "max_inflight_messages")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Enable or disable websockets.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def qos(self) -> Optional[int]:
        """
        Qos for Broker connection.
        """
        return pulumi.get(self, "qos")

    @property
    @pulumi.getter
    def retain(self) -> Optional[str]:
        """
        Whether or not to keep the retain setting.
        """
        return pulumi.get(self, "retain")

    @property
    @pulumi.getter(name="sessionExpirySeconds")
    def session_expiry_seconds(self) -> Optional[int]:
        """
        Session expiry in seconds.
        """
        return pulumi.get(self, "session_expiry_seconds")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.TlsPropertiesResponse']:
        """
        TLS configuration.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class DataFlowEndpointPropertiesResponse(dict):
    """
    DataFlowEndpoint Resource properties. NOTE - Only one type of endpoint is supported for one Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointType":
            suggest = "endpoint_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "dataExplorerSettings":
            suggest = "data_explorer_settings"
        elif key == "dataLakeStorageSettings":
            suggest = "data_lake_storage_settings"
        elif key == "fabricOneLakeSettings":
            suggest = "fabric_one_lake_settings"
        elif key == "kafkaSettings":
            suggest = "kafka_settings"
        elif key == "localStorageSettings":
            suggest = "local_storage_settings"
        elif key == "mqttSettings":
            suggest = "mqtt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowEndpointPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowEndpointPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowEndpointPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: 'outputs.DataFlowEndpointAuthenticationResponse',
                 endpoint_type: str,
                 provisioning_state: str,
                 data_explorer_settings: Optional['outputs.DataFlowEndpointDataExplorerResponse'] = None,
                 data_lake_storage_settings: Optional['outputs.DataFlowEndpointDataLakeStorageResponse'] = None,
                 fabric_one_lake_settings: Optional['outputs.DataFlowEndpointFabricOneLakeResponse'] = None,
                 kafka_settings: Optional['outputs.DataFlowEndpointKafkaResponse'] = None,
                 local_storage_settings: Optional['outputs.DataFlowEndpointLocalStorageResponse'] = None,
                 mqtt_settings: Optional['outputs.DataFlowEndpointMqttResponse'] = None):
        """
        DataFlowEndpoint Resource properties. NOTE - Only one type of endpoint is supported for one Resource
        :param 'DataFlowEndpointAuthenticationResponse' authentication: Authentication configuration.
        :param str endpoint_type: Endpoint Type.
        :param str provisioning_state: The status of the last operation.
        :param 'DataFlowEndpointDataExplorerResponse' data_explorer_settings: Azure Data Explorer endpoint.
        :param 'DataFlowEndpointDataLakeStorageResponse' data_lake_storage_settings: Azure Data Lake endpoint.
        :param 'DataFlowEndpointFabricOneLakeResponse' fabric_one_lake_settings: Microsoft Fabric endpoint.
        :param 'DataFlowEndpointKafkaResponse' kafka_settings: Kafka endpoint.
        :param 'DataFlowEndpointLocalStorageResponse' local_storage_settings: Local persistent volume endpoint.
        :param 'DataFlowEndpointMqttResponse' mqtt_settings: Broker endpoint.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if data_explorer_settings is not None:
            pulumi.set(__self__, "data_explorer_settings", data_explorer_settings)
        if data_lake_storage_settings is not None:
            pulumi.set(__self__, "data_lake_storage_settings", data_lake_storage_settings)
        if fabric_one_lake_settings is not None:
            pulumi.set(__self__, "fabric_one_lake_settings", fabric_one_lake_settings)
        if kafka_settings is not None:
            pulumi.set(__self__, "kafka_settings", kafka_settings)
        if local_storage_settings is not None:
            pulumi.set(__self__, "local_storage_settings", local_storage_settings)
        if mqtt_settings is not None:
            pulumi.set(__self__, "mqtt_settings", mqtt_settings)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.DataFlowEndpointAuthenticationResponse':
        """
        Authentication configuration.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> str:
        """
        Endpoint Type.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="dataExplorerSettings")
    def data_explorer_settings(self) -> Optional['outputs.DataFlowEndpointDataExplorerResponse']:
        """
        Azure Data Explorer endpoint.
        """
        return pulumi.get(self, "data_explorer_settings")

    @property
    @pulumi.getter(name="dataLakeStorageSettings")
    def data_lake_storage_settings(self) -> Optional['outputs.DataFlowEndpointDataLakeStorageResponse']:
        """
        Azure Data Lake endpoint.
        """
        return pulumi.get(self, "data_lake_storage_settings")

    @property
    @pulumi.getter(name="fabricOneLakeSettings")
    def fabric_one_lake_settings(self) -> Optional['outputs.DataFlowEndpointFabricOneLakeResponse']:
        """
        Microsoft Fabric endpoint.
        """
        return pulumi.get(self, "fabric_one_lake_settings")

    @property
    @pulumi.getter(name="kafkaSettings")
    def kafka_settings(self) -> Optional['outputs.DataFlowEndpointKafkaResponse']:
        """
        Kafka endpoint.
        """
        return pulumi.get(self, "kafka_settings")

    @property
    @pulumi.getter(name="localStorageSettings")
    def local_storage_settings(self) -> Optional['outputs.DataFlowEndpointLocalStorageResponse']:
        """
        Local persistent volume endpoint.
        """
        return pulumi.get(self, "local_storage_settings")

    @property
    @pulumi.getter(name="mqttSettings")
    def mqtt_settings(self) -> Optional['outputs.DataFlowEndpointMqttResponse']:
        """
        Broker endpoint.
        """
        return pulumi.get(self, "mqtt_settings")


@pulumi.output_type
class DataFlowOperationResponse(dict):
    """
    DataFlow Operation properties. NOTE - One only method is allowed to be used for one entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationSettings":
            suggest = "destination_settings"
        elif key == "operationType":
            suggest = "operation_type"
        elif key == "sourceSettings":
            suggest = "source_settings"
        elif key == "builtInTransformationSettings":
            suggest = "built_in_transformation_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowOperationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowOperationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowOperationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_settings: 'outputs.DataFlowDestinationOperationResponse',
                 operation_type: str,
                 source_settings: 'outputs.DataFlowSourceOperationResponse',
                 built_in_transformation_settings: Optional['outputs.DataFlowBuiltInTransformationResponse'] = None,
                 name: Optional[str] = None):
        """
        DataFlow Operation properties. NOTE - One only method is allowed to be used for one entry.
        :param 'DataFlowDestinationOperationResponse' destination_settings: Destination configuration.
        :param str operation_type: Type of operation.
        :param 'DataFlowSourceOperationResponse' source_settings: Source configuration.
        :param 'DataFlowBuiltInTransformationResponse' built_in_transformation_settings: Transformation configuration.
        :param str name: Optional user provided name of the transformation.
        """
        pulumi.set(__self__, "destination_settings", destination_settings)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "source_settings", source_settings)
        if built_in_transformation_settings is not None:
            pulumi.set(__self__, "built_in_transformation_settings", built_in_transformation_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="destinationSettings")
    def destination_settings(self) -> 'outputs.DataFlowDestinationOperationResponse':
        """
        Destination configuration.
        """
        return pulumi.get(self, "destination_settings")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        Type of operation.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="sourceSettings")
    def source_settings(self) -> 'outputs.DataFlowSourceOperationResponse':
        """
        Source configuration.
        """
        return pulumi.get(self, "source_settings")

    @property
    @pulumi.getter(name="builtInTransformationSettings")
    def built_in_transformation_settings(self) -> Optional['outputs.DataFlowBuiltInTransformationResponse']:
        """
        Transformation configuration.
        """
        return pulumi.get(self, "built_in_transformation_settings")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Optional user provided name of the transformation.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DataFlowProfilePropertiesResponse(dict):
    """
    DataFlowProfile Resource properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "instanceCount":
            suggest = "instance_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowProfilePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowProfilePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowProfilePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 diagnostics: Optional['outputs.ProfileDiagnosticsResponse'] = None,
                 instance_count: Optional[int] = None):
        """
        DataFlowProfile Resource properties
        :param str provisioning_state: The status of the last operation.
        :param 'ProfileDiagnosticsResponse' diagnostics: Spec defines the desired identities of NBC diagnostics settings.
        :param int instance_count: To manually scale the dataflow profile, specify the maximum number of instances you want to run.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if diagnostics is not None:
            pulumi.set(__self__, "diagnostics", diagnostics)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def diagnostics(self) -> Optional['outputs.ProfileDiagnosticsResponse']:
        """
        Spec defines the desired identities of NBC diagnostics settings.
        """
        return pulumi.get(self, "diagnostics")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        """
        To manually scale the dataflow profile, specify the maximum number of instances you want to run.
        """
        return pulumi.get(self, "instance_count")


@pulumi.output_type
class DataFlowPropertiesResponse(dict):
    """
    DataFlow Resource properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileRef":
            suggest = "profile_ref"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operations: Sequence['outputs.DataFlowOperationResponse'],
                 profile_ref: str,
                 provisioning_state: str,
                 mode: Optional[str] = None):
        """
        DataFlow Resource properties
        :param Sequence['DataFlowOperationResponse'] operations: List of operations including source and destination references as well as transformation.
        :param str profile_ref: Reference to the DataflowProfile CR.
        :param str provisioning_state: The status of the last operation.
        :param str mode: Mode for DataFlow. Optional; defaults to Enabled.
        """
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "profile_ref", profile_ref)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if mode is None:
            mode = 'Enabled'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.DataFlowOperationResponse']:
        """
        List of operations including source and destination references as well as transformation.
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter(name="profileRef")
    def profile_ref(self) -> str:
        """
        Reference to the DataflowProfile CR.
        """
        return pulumi.get(self, "profile_ref")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Mode for DataFlow. Optional; defaults to Enabled.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class DataFlowSourceOperationResponse(dict):
    """
    DataFlow Source Operation properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSources":
            suggest = "data_sources"
        elif key == "endpointRef":
            suggest = "endpoint_ref"
        elif key == "assetRef":
            suggest = "asset_ref"
        elif key == "schemaRef":
            suggest = "schema_ref"
        elif key == "serializationFormat":
            suggest = "serialization_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataFlowSourceOperationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataFlowSourceOperationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataFlowSourceOperationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_sources: Sequence[str],
                 endpoint_ref: str,
                 asset_ref: Optional[str] = None,
                 schema_ref: Optional[str] = None,
                 serialization_format: Optional[str] = None):
        """
        DataFlow Source Operation properties
        :param Sequence[str] data_sources: List of source locations. Can be Broker or Kafka topics. Supports wildcards # and +.
        :param str endpoint_ref: Reference to the Dataflow Endpoint resource. Can only be of Broker and Kafka type.
        :param str asset_ref: Reference to the resource in Azure Device Registry where the data in the endpoint originates from.
        :param str schema_ref: Schema CR reference. Data will be deserialized according to the schema, and dropped if it doesn't match.
        :param str serialization_format: Content is a JSON Schema. Allowed: JSON Schema/draft-7.
        """
        pulumi.set(__self__, "data_sources", data_sources)
        pulumi.set(__self__, "endpoint_ref", endpoint_ref)
        if asset_ref is not None:
            pulumi.set(__self__, "asset_ref", asset_ref)
        if schema_ref is not None:
            pulumi.set(__self__, "schema_ref", schema_ref)
        if serialization_format is None:
            serialization_format = 'Json'
        if serialization_format is not None:
            pulumi.set(__self__, "serialization_format", serialization_format)

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Sequence[str]:
        """
        List of source locations. Can be Broker or Kafka topics. Supports wildcards # and +.
        """
        return pulumi.get(self, "data_sources")

    @property
    @pulumi.getter(name="endpointRef")
    def endpoint_ref(self) -> str:
        """
        Reference to the Dataflow Endpoint resource. Can only be of Broker and Kafka type.
        """
        return pulumi.get(self, "endpoint_ref")

    @property
    @pulumi.getter(name="assetRef")
    def asset_ref(self) -> Optional[str]:
        """
        Reference to the resource in Azure Device Registry where the data in the endpoint originates from.
        """
        return pulumi.get(self, "asset_ref")

    @property
    @pulumi.getter(name="schemaRef")
    def schema_ref(self) -> Optional[str]:
        """
        Schema CR reference. Data will be deserialized according to the schema, and dropped if it doesn't match.
        """
        return pulumi.get(self, "schema_ref")

    @property
    @pulumi.getter(name="serializationFormat")
    def serialization_format(self) -> Optional[str]:
        """
        Content is a JSON Schema. Allowed: JSON Schema/draft-7.
        """
        return pulumi.get(self, "serialization_format")


@pulumi.output_type
class DiagnosticsLogsResponse(dict):
    """
    Diagnostic Log properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "opentelemetryExportConfig":
            suggest = "opentelemetry_export_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiagnosticsLogsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiagnosticsLogsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiagnosticsLogsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 opentelemetry_export_config: Optional['outputs.OpenTelemetryLogExportConfigResponse'] = None):
        """
        Diagnostic Log properties
        :param str level: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
        :param 'OpenTelemetryLogExportConfigResponse' opentelemetry_export_config: The open telemetry export configuration.
        """
        if level is None:
            level = 'info'
        if level is not None:
            pulumi.set(__self__, "level", level)
        if opentelemetry_export_config is not None:
            pulumi.set(__self__, "opentelemetry_export_config", opentelemetry_export_config)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="opentelemetryExportConfig")
    def opentelemetry_export_config(self) -> Optional['outputs.OpenTelemetryLogExportConfigResponse']:
        """
        The open telemetry export configuration.
        """
        return pulumi.get(self, "opentelemetry_export_config")


@pulumi.output_type
class DiskBackedMessageBufferResponse(dict):
    """
    DiskBackedMessageBuffer properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"
        elif key == "ephemeralVolumeClaimSpec":
            suggest = "ephemeral_volume_claim_spec"
        elif key == "persistentVolumeClaimSpec":
            suggest = "persistent_volume_claim_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskBackedMessageBufferResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskBackedMessageBufferResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskBackedMessageBufferResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_size: str,
                 ephemeral_volume_claim_spec: Optional['outputs.VolumeClaimSpecResponse'] = None,
                 persistent_volume_claim_spec: Optional['outputs.VolumeClaimSpecResponse'] = None):
        """
        DiskBackedMessageBuffer properties
        :param str max_size: The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
        :param 'VolumeClaimSpecResponse' ephemeral_volume_claim_spec: Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
        :param 'VolumeClaimSpecResponse' persistent_volume_claim_spec: Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
        """
        pulumi.set(__self__, "max_size", max_size)
        if ephemeral_volume_claim_spec is not None:
            pulumi.set(__self__, "ephemeral_volume_claim_spec", ephemeral_volume_claim_spec)
        if persistent_volume_claim_spec is not None:
            pulumi.set(__self__, "persistent_volume_claim_spec", persistent_volume_claim_spec)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> str:
        """
        The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="ephemeralVolumeClaimSpec")
    def ephemeral_volume_claim_spec(self) -> Optional['outputs.VolumeClaimSpecResponse']:
        """
        Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
        """
        return pulumi.get(self, "ephemeral_volume_claim_spec")

    @property
    @pulumi.getter(name="persistentVolumeClaimSpec")
    def persistent_volume_claim_spec(self) -> Optional['outputs.VolumeClaimSpecResponse']:
        """
        Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
        """
        return pulumi.get(self, "persistent_volume_claim_spec")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
    """
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
        :param str name: The name of the extended location.
        :param str type: Type of ExtendedLocation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of ExtendedLocation.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FrontendResponse(dict):
    """
    The desired properties of the frontend instances of the Broker
    """
    def __init__(__self__, *,
                 replicas: int,
                 workers: Optional[int] = None):
        """
        The desired properties of the frontend instances of the Broker
        :param int replicas: The desired number of frontend instances (pods).
        :param int workers: Number of logical frontend workers per instance (pod).
        """
        pulumi.set(__self__, "replicas", replicas)
        if workers is None:
            workers = 2
        if workers is not None:
            pulumi.set(__self__, "workers", workers)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        The desired number of frontend instances (pods).
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def workers(self) -> Optional[int]:
        """
        Number of logical frontend workers per instance (pod).
        """
        return pulumi.get(self, "workers")


@pulumi.output_type
class GenerateResourceLimitsResponse(dict):
    """
    GenerateResourceLimits properties
    """
    def __init__(__self__, *,
                 cpu: Optional[str] = None):
        """
        GenerateResourceLimits properties
        :param str cpu: The toggle to enable/disable cpu resource limits.
        """
        if cpu is None:
            cpu = 'Enabled'
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        The toggle to enable/disable cpu resource limits.
        """
        return pulumi.get(self, "cpu")


@pulumi.output_type
class InstancePropertiesResponse(dict):
    """
    The properties of a Instance resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 version: str,
                 description: Optional[str] = None):
        """
        The properties of a Instance resource.
        :param str provisioning_state: The status of the last operation.
        :param str version: The Azure IoT Operations version.
        :param str description: Detailed description of the Instance.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "version", version)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The Azure IoT Operations version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Detailed description of the Instance.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class KubernetesReferenceResponse(dict):
    """
    Kubernetes reference
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroup":
            suggest = "api_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        Kubernetes reference
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        :param str namespace: Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ListenerPortResponse(dict):
    """
    Defines a TCP port on which a `BrokerListener` listens.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationRef":
            suggest = "authentication_ref"
        elif key == "authorizationRef":
            suggest = "authorization_ref"
        elif key == "nodePort":
            suggest = "node_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerPortResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerPortResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerPortResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 authentication_ref: Optional[str] = None,
                 authorization_ref: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 tls: Optional['outputs.TlsCertMethodResponse'] = None):
        """
        Defines a TCP port on which a `BrokerListener` listens.
        :param int port: TCP port for accepting client connections.
        :param str authentication_ref: Reference to client authentication settings. Omit to disable authentication.
        :param str authorization_ref: Reference to client authorization settings. Omit to disable authorization.
        :param int node_port: Kubernetes node port. Only relevant when this port is associated with a `NodePort` listener.
        :param str protocol: Protocol to use for client connections.
        :param 'TlsCertMethodResponse' tls: TLS server certificate settings for this port. Omit to disable TLS.
        """
        pulumi.set(__self__, "port", port)
        if authentication_ref is not None:
            pulumi.set(__self__, "authentication_ref", authentication_ref)
        if authorization_ref is not None:
            pulumi.set(__self__, "authorization_ref", authorization_ref)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is None:
            protocol = 'Mqtt'
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        TCP port for accepting client connections.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="authenticationRef")
    def authentication_ref(self) -> Optional[str]:
        """
        Reference to client authentication settings. Omit to disable authentication.
        """
        return pulumi.get(self, "authentication_ref")

    @property
    @pulumi.getter(name="authorizationRef")
    def authorization_ref(self) -> Optional[str]:
        """
        Reference to client authorization settings. Omit to disable authorization.
        """
        return pulumi.get(self, "authorization_ref")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        """
        Kubernetes node port. Only relevant when this port is associated with a `NodePort` listener.
        """
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol to use for client connections.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.TlsCertMethodResponse']:
        """
        TLS server certificate settings for this port. Omit to disable TLS.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class LocalKubernetesReferenceResponse(dict):
    """
    Kubernetes reference
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroup":
            suggest = "api_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalKubernetesReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalKubernetesReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalKubernetesReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None):
        """
        Kubernetes reference
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")


@pulumi.output_type
class MetricsResponse(dict):
    """
    Diagnostic Metrics properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "opentelemetryExportConfig":
            suggest = "opentelemetry_export_config"
        elif key == "prometheusPort":
            suggest = "prometheus_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 opentelemetry_export_config: Optional['outputs.OpenTelemetryExportConfigResponse'] = None,
                 prometheus_port: Optional[int] = None):
        """
        Diagnostic Metrics properties
        :param 'OpenTelemetryExportConfigResponse' opentelemetry_export_config: The open telemetry export configuration.
        :param int prometheus_port: The prometheus port to expose the metrics.
        """
        if opentelemetry_export_config is not None:
            pulumi.set(__self__, "opentelemetry_export_config", opentelemetry_export_config)
        if prometheus_port is None:
            prometheus_port = 9600
        if prometheus_port is not None:
            pulumi.set(__self__, "prometheus_port", prometheus_port)

    @property
    @pulumi.getter(name="opentelemetryExportConfig")
    def opentelemetry_export_config(self) -> Optional['outputs.OpenTelemetryExportConfigResponse']:
        """
        The open telemetry export configuration.
        """
        return pulumi.get(self, "opentelemetry_export_config")

    @property
    @pulumi.getter(name="prometheusPort")
    def prometheus_port(self) -> Optional[int]:
        """
        The prometheus port to expose the metrics.
        """
        return pulumi.get(self, "prometheus_port")


@pulumi.output_type
class OpenTelemetryExportConfigResponse(dict):
    """
    OpenTelemetry Export Configuration properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otlpGrpcEndpoint":
            suggest = "otlp_grpc_endpoint"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenTelemetryExportConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenTelemetryExportConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenTelemetryExportConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 otlp_grpc_endpoint: str,
                 interval_seconds: Optional[int] = None):
        """
        OpenTelemetry Export Configuration properties
        :param str otlp_grpc_endpoint: The open telemetry collector endpoint to export to.
        :param int interval_seconds: How often to export the metrics to the open telemetry collector.
        """
        pulumi.set(__self__, "otlp_grpc_endpoint", otlp_grpc_endpoint)
        if interval_seconds is None:
            interval_seconds = 30
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)

    @property
    @pulumi.getter(name="otlpGrpcEndpoint")
    def otlp_grpc_endpoint(self) -> str:
        """
        The open telemetry collector endpoint to export to.
        """
        return pulumi.get(self, "otlp_grpc_endpoint")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        How often to export the metrics to the open telemetry collector.
        """
        return pulumi.get(self, "interval_seconds")


@pulumi.output_type
class OpenTelemetryLogExportConfigResponse(dict):
    """
    OpenTelemetry Log Export Configuration properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otlpGrpcEndpoint":
            suggest = "otlp_grpc_endpoint"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenTelemetryLogExportConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenTelemetryLogExportConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenTelemetryLogExportConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 otlp_grpc_endpoint: str,
                 interval_seconds: Optional[int] = None,
                 level: Optional[str] = None):
        """
        OpenTelemetry Log Export Configuration properties
        :param str otlp_grpc_endpoint: The open telemetry collector endpoint to export to.
        :param int interval_seconds: How often to export the metrics to the open telemetry collector.
        :param str level: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
        """
        pulumi.set(__self__, "otlp_grpc_endpoint", otlp_grpc_endpoint)
        if interval_seconds is None:
            interval_seconds = 30
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if level is None:
            level = 'error'
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter(name="otlpGrpcEndpoint")
    def otlp_grpc_endpoint(self) -> str:
        """
        The open telemetry collector endpoint to export to.
        """
        return pulumi.get(self, "otlp_grpc_endpoint")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        How often to export the metrics to the open telemetry collector.
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class PrincipalDefinitionResponse(dict):
    """
    PrincipalDefinition properties of Rule
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIds":
            suggest = "client_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalDefinitionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalDefinitionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalDefinitionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: Optional[Sequence[Mapping[str, str]]] = None,
                 client_ids: Optional[Sequence[str]] = None,
                 usernames: Optional[Sequence[str]] = None):
        """
        PrincipalDefinition properties of Rule
        :param Sequence[Mapping[str, str]] attributes: A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
        :param Sequence[str] client_ids: A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
        :param Sequence[str] usernames: A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if usernames is not None:
            pulumi.set(__self__, "usernames", usernames)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[Sequence[str]]:
        """
        A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
        """
        return pulumi.get(self, "client_ids")

    @property
    @pulumi.getter
    def usernames(self) -> Optional[Sequence[str]]:
        """
        A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
        """
        return pulumi.get(self, "usernames")


@pulumi.output_type
class ProfileDiagnosticsResponse(dict):
    """
    DataFlowProfile Diagnostics properties
    """
    def __init__(__self__, *,
                 logs: Optional['outputs.DiagnosticsLogsResponse'] = None,
                 metrics: Optional['outputs.MetricsResponse'] = None):
        """
        DataFlowProfile Diagnostics properties
        :param 'DiagnosticsLogsResponse' logs: Diagnostic log settings for the resource.
        :param 'MetricsResponse' metrics: The metrics settings for the resource.
        """
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def logs(self) -> Optional['outputs.DiagnosticsLogsResponse']:
        """
        Diagnostic log settings for the resource.
        """
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.MetricsResponse']:
        """
        The metrics settings for the resource.
        """
        return pulumi.get(self, "metrics")


@pulumi.output_type
class SanForCertResponse(dict):
    """
    Subject Alternative Names (SANs) for certificate.
    """
    def __init__(__self__, *,
                 dns: Sequence[str],
                 ip: Sequence[str]):
        """
        Subject Alternative Names (SANs) for certificate.
        :param Sequence[str] dns: DNS SANs.
        :param Sequence[str] ip: IP address SANs.
        """
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        """
        DNS SANs.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def ip(self) -> Sequence[str]:
        """
        IP address SANs.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class SelfCheckResponse(dict):
    """
    Broker Diagnostic Self check properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SelfCheckResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SelfCheckResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SelfCheckResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_seconds: Optional[int] = None,
                 mode: Optional[str] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Broker Diagnostic Self check properties
        :param int interval_seconds: The self check interval.
        :param str mode: The toggle to enable/disable self check.
        :param int timeout_seconds: The timeout for self check.
        """
        if interval_seconds is None:
            interval_seconds = 30
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if mode is None:
            mode = 'Enabled'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if timeout_seconds is None:
            timeout_seconds = 15
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        The self check interval.
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The toggle to enable/disable self check.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        The timeout for self check.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class SelfTracingResponse(dict):
    """
    Diagnostic Self tracing properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalSeconds":
            suggest = "interval_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SelfTracingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SelfTracingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SelfTracingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_seconds: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        Diagnostic Self tracing properties
        :param int interval_seconds: The self tracing interval.
        :param str mode: The toggle to enable/disable self tracing.
        """
        if interval_seconds is None:
            interval_seconds = 30
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if mode is None:
            mode = 'Enabled'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        The self tracing interval.
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The toggle to enable/disable self tracing.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class StateStoreResourceRuleResponse(dict):
    """
    State Store Resource Rule properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyType":
            suggest = "key_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateStoreResourceRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateStoreResourceRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateStoreResourceRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_type: str,
                 keys: Sequence[str],
                 method: str):
        """
        State Store Resource Rule properties.
        :param str key_type: Allowed keyTypes pattern, string, binary. The key type used for matching, for example pattern tries to match the key to a glob-style pattern and string checks key is equal to value provided in keys.
        :param Sequence[str] keys: Give access to state store keys for the corresponding principals defined. When key type is pattern set glob-style pattern (e.g., '*', 'clients/*').
        :param str method: Give access for `Read`, `Write` and `ReadWrite` access level.
        """
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        """
        Allowed keyTypes pattern, string, binary. The key type used for matching, for example pattern tries to match the key to a glob-style pattern and string checks key is equal to value provided in keys.
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def keys(self) -> Sequence[str]:
        """
        Give access to state store keys for the corresponding principals defined. When key type is pattern set glob-style pattern (e.g., '*', 'clients/*').
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Give access for `Read`, `Write` and `ReadWrite` access level.
        """
        return pulumi.get(self, "method")


@pulumi.output_type
class SubscriberQueueLimitResponse(dict):
    """
    The settings of Subscriber Queue Limit.
    """
    def __init__(__self__, *,
                 length: Optional[float] = None,
                 strategy: Optional[str] = None):
        """
        The settings of Subscriber Queue Limit.
        :param float length: The maximum length of the queue before messages start getting dropped.
        :param str strategy: The strategy to use for dropping messages from the queue.
        """
        if length is not None:
            pulumi.set(__self__, "length", length)
        if strategy is None:
            strategy = 'None'
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def length(self) -> Optional[float]:
        """
        The maximum length of the queue before messages start getting dropped.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        The strategy to use for dropping messages from the queue.
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TlsCertMethodResponse(dict):
    """
    Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
    """
    def __init__(__self__, *,
                 mode: str,
                 automatic: Optional['outputs.AutomaticCertMethodResponse'] = None,
                 manual: Optional['outputs.X509ManualCertificateResponse'] = None):
        """
        Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
        :param str mode: Mode of TLS server certificate management.
        :param 'AutomaticCertMethodResponse' automatic: Option 1 - Automatic TLS server certificate management with cert-manager.
        :param 'X509ManualCertificateResponse' manual: Option 2 - Manual TLS server certificate management through a defined secret.
        """
        pulumi.set(__self__, "mode", mode)
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Mode of TLS server certificate management.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def automatic(self) -> Optional['outputs.AutomaticCertMethodResponse']:
        """
        Option 1 - Automatic TLS server certificate management with cert-manager.
        """
        return pulumi.get(self, "automatic")

    @property
    @pulumi.getter
    def manual(self) -> Optional['outputs.X509ManualCertificateResponse']:
        """
        Option 2 - Manual TLS server certificate management through a defined secret.
        """
        return pulumi.get(self, "manual")


@pulumi.output_type
class TlsPropertiesResponse(dict):
    """
    Tls properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustedCaCertificateConfigMapRef":
            suggest = "trusted_ca_certificate_config_map_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TlsPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TlsPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TlsPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 trusted_ca_certificate_config_map_ref: Optional[str] = None):
        """
        Tls properties
        :param str mode: Mode for TLS.
        :param str trusted_ca_certificate_config_map_ref: Trusted CA certificate config map.
        """
        if mode is None:
            mode = 'Enabled'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if trusted_ca_certificate_config_map_ref is not None:
            pulumi.set(__self__, "trusted_ca_certificate_config_map_ref", trusted_ca_certificate_config_map_ref)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Mode for TLS.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="trustedCaCertificateConfigMapRef")
    def trusted_ca_certificate_config_map_ref(self) -> Optional[str]:
        """
        Trusted CA certificate config map.
        """
        return pulumi.get(self, "trusted_ca_certificate_config_map_ref")


@pulumi.output_type
class TracesResponse(dict):
    """
    Broker Diagnostic Trace properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheSizeMegabytes":
            suggest = "cache_size_megabytes"
        elif key == "opentelemetryExportConfig":
            suggest = "opentelemetry_export_config"
        elif key == "selfTracing":
            suggest = "self_tracing"
        elif key == "spanChannelCapacity":
            suggest = "span_channel_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TracesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TracesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TracesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_size_megabytes: Optional[int] = None,
                 mode: Optional[str] = None,
                 opentelemetry_export_config: Optional['outputs.OpenTelemetryExportConfigResponse'] = None,
                 self_tracing: Optional['outputs.SelfTracingResponse'] = None,
                 span_channel_capacity: Optional[int] = None):
        """
        Broker Diagnostic Trace properties
        :param int cache_size_megabytes: The cache size in megabytes.
        :param str mode: The toggle to enable/disable traces.
        :param 'OpenTelemetryExportConfigResponse' opentelemetry_export_config: The open telemetry export configuration.
        :param 'SelfTracingResponse' self_tracing: The self tracing properties.
        :param int span_channel_capacity: The span channel capacity.
        """
        if cache_size_megabytes is None:
            cache_size_megabytes = 16
        if cache_size_megabytes is not None:
            pulumi.set(__self__, "cache_size_megabytes", cache_size_megabytes)
        if mode is None:
            mode = 'Enabled'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if opentelemetry_export_config is not None:
            pulumi.set(__self__, "opentelemetry_export_config", opentelemetry_export_config)
        if self_tracing is not None:
            pulumi.set(__self__, "self_tracing", self_tracing)
        if span_channel_capacity is None:
            span_channel_capacity = 1000
        if span_channel_capacity is not None:
            pulumi.set(__self__, "span_channel_capacity", span_channel_capacity)

    @property
    @pulumi.getter(name="cacheSizeMegabytes")
    def cache_size_megabytes(self) -> Optional[int]:
        """
        The cache size in megabytes.
        """
        return pulumi.get(self, "cache_size_megabytes")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The toggle to enable/disable traces.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="opentelemetryExportConfig")
    def opentelemetry_export_config(self) -> Optional['outputs.OpenTelemetryExportConfigResponse']:
        """
        The open telemetry export configuration.
        """
        return pulumi.get(self, "opentelemetry_export_config")

    @property
    @pulumi.getter(name="selfTracing")
    def self_tracing(self) -> Optional['outputs.SelfTracingResponse']:
        """
        The self tracing properties.
        """
        return pulumi.get(self, "self_tracing")

    @property
    @pulumi.getter(name="spanChannelCapacity")
    def span_channel_capacity(self) -> Optional[int]:
        """
        The span channel capacity.
        """
        return pulumi.get(self, "span_channel_capacity")


@pulumi.output_type
class VolumeClaimResourceRequirementsResponse(dict):
    """
    VolumeClaimResourceRequirements properties
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        """
        VolumeClaimResourceRequirements properties
        :param Mapping[str, str] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        :param Mapping[str, str] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class VolumeClaimSpecResponse(dict):
    """
    VolumeClaimSpec properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessModes":
            suggest = "access_modes"
        elif key == "dataSource":
            suggest = "data_source"
        elif key == "dataSourceRef":
            suggest = "data_source_ref"
        elif key == "storageClassName":
            suggest = "storage_class_name"
        elif key == "volumeMode":
            suggest = "volume_mode"
        elif key == "volumeName":
            suggest = "volume_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeClaimSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeClaimSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeClaimSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_modes: Optional[Sequence[str]] = None,
                 data_source: Optional['outputs.LocalKubernetesReferenceResponse'] = None,
                 data_source_ref: Optional['outputs.KubernetesReferenceResponse'] = None,
                 resources: Optional['outputs.VolumeClaimResourceRequirementsResponse'] = None,
                 selector: Optional['outputs.VolumeClaimSpecSelectorResponse'] = None,
                 storage_class_name: Optional[str] = None,
                 volume_mode: Optional[str] = None,
                 volume_name: Optional[str] = None):
        """
        VolumeClaimSpec properties
        :param Sequence[str] access_modes: AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param 'LocalKubernetesReferenceResponse' data_source: This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
        :param 'KubernetesReferenceResponse' data_source_ref: Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
        :param 'VolumeClaimResourceRequirementsResponse' resources: Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param 'VolumeClaimSpecSelectorResponse' selector: A label query over volumes to consider for binding.
        :param str storage_class_name: Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        :param str volume_mode: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
        :param str volume_name: VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if data_source_ref is not None:
            pulumi.set(__self__, "data_source_ref", data_source_ref)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[Sequence[str]]:
        """
        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional['outputs.LocalKubernetesReferenceResponse']:
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="dataSourceRef")
    def data_source_ref(self) -> Optional['outputs.KubernetesReferenceResponse']:
        """
        Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
        """
        return pulumi.get(self, "data_source_ref")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.VolumeClaimResourceRequirementsResponse']:
        """
        Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.VolumeClaimSpecSelectorResponse']:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        """
        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        """
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[str]:
        """
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
        """
        return pulumi.get(self, "volume_mode")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        """
        VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class VolumeClaimSpecSelectorMatchExpressionsResponse(dict):
    """
    VolumeClaimSpecSelectorMatchExpressions properties
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        VolumeClaimSpecSelectorMatchExpressions properties
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class VolumeClaimSpecSelectorResponse(dict):
    """
    VolumeClaimSpecSelector properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeClaimSpecSelectorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeClaimSpecSelectorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeClaimSpecSelectorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.VolumeClaimSpecSelectorMatchExpressionsResponse']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        VolumeClaimSpecSelector properties
        :param Sequence['VolumeClaimSpecSelectorMatchExpressionsResponse'] match_expressions: MatchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.VolumeClaimSpecSelectorMatchExpressionsResponse']]:
        """
        MatchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class X509ManualCertificateResponse(dict):
    """
    X509 Certificate Authentication properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in X509ManualCertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        X509ManualCertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        X509ManualCertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_ref: str):
        """
        X509 Certificate Authentication properties.
        :param str secret_ref: Kubernetes secret containing an X.509 client certificate. This is a reference to the secret through an identifying name, not the secret itself.
        """
        pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> str:
        """
        Kubernetes secret containing an X.509 client certificate. This is a reference to the secret through an identifying name, not the secret itself.
        """
        return pulumi.get(self, "secret_ref")


