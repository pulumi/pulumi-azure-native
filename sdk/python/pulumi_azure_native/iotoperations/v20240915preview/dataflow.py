# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DataflowArgs', 'Dataflow']

@pulumi.input_type
class DataflowArgs:
    def __init__(__self__, *,
                 dataflow_profile_name: pulumi.Input[str],
                 extended_location: pulumi.Input['ExtendedLocationArgs'],
                 instance_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 dataflow_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input['DataflowPropertiesArgs']] = None):
        """
        The set of arguments for constructing a Dataflow resource.
        :param pulumi.Input[str] dataflow_profile_name: Name of Instance dataflowProfile resource
        :param pulumi.Input['ExtendedLocationArgs'] extended_location: Edge location of the resource.
        :param pulumi.Input[str] instance_name: Name of instance.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] dataflow_name: Name of Instance dataflowProfile dataflow resource
        :param pulumi.Input['DataflowPropertiesArgs'] properties: The resource-specific properties for this resource.
        """
        pulumi.set(__self__, "dataflow_profile_name", dataflow_profile_name)
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if dataflow_name is not None:
            pulumi.set(__self__, "dataflow_name", dataflow_name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="dataflowProfileName")
    def dataflow_profile_name(self) -> pulumi.Input[str]:
        """
        Name of Instance dataflowProfile resource
        """
        return pulumi.get(self, "dataflow_profile_name")

    @dataflow_profile_name.setter
    def dataflow_profile_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataflow_profile_name", value)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationArgs']:
        """
        Edge location of the resource.
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Name of instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="dataflowName")
    def dataflow_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Instance dataflowProfile dataflow resource
        """
        return pulumi.get(self, "dataflow_name")

    @dataflow_name.setter
    def dataflow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataflow_name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['DataflowPropertiesArgs']]:
        """
        The resource-specific properties for this resource.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['DataflowPropertiesArgs']]):
        pulumi.set(self, "properties", value)


class Dataflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dataflow_name: Optional[pulumi.Input[str]] = None,
                 dataflow_profile_name: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Union['DataflowPropertiesArgs', 'DataflowPropertiesArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Instance dataflowProfile dataflow resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dataflow_name: Name of Instance dataflowProfile dataflow resource
        :param pulumi.Input[str] dataflow_profile_name: Name of Instance dataflowProfile resource
        :param pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']] extended_location: Edge location of the resource.
        :param pulumi.Input[str] instance_name: Name of instance.
        :param pulumi.Input[Union['DataflowPropertiesArgs', 'DataflowPropertiesArgsDict']] properties: The resource-specific properties for this resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataflowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Instance dataflowProfile dataflow resource

        :param str resource_name: The name of the resource.
        :param DataflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dataflow_name: Optional[pulumi.Input[str]] = None,
                 dataflow_profile_name: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Union['DataflowPropertiesArgs', 'DataflowPropertiesArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataflowArgs.__new__(DataflowArgs)

            __props__.__dict__["dataflow_name"] = dataflow_name
            if dataflow_profile_name is None and not opts.urn:
                raise TypeError("Missing required property 'dataflow_profile_name'")
            __props__.__dict__["dataflow_profile_name"] = dataflow_profile_name
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["properties"] = properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:iotoperations:Dataflow"), pulumi.Alias(type_="azure-native:iotoperations/v20240701preview:Dataflow"), pulumi.Alias(type_="azure-native:iotoperations/v20240815preview:Dataflow"), pulumi.Alias(type_="azure-native:iotoperations/v20241101:Dataflow")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Dataflow, __self__).__init__(
            'azure-native:iotoperations/v20240915preview:Dataflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Dataflow':
        """
        Get an existing Dataflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DataflowArgs.__new__(DataflowArgs)

        __props__.__dict__["extended_location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return Dataflow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationResponse']:
        """
        Edge location of the resource.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.DataflowPropertiesResponse']:
        """
        The resource-specific properties for this resource.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

