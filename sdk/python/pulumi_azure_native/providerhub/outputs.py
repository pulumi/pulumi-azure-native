# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdditionalAuthorizationResponse',
    'AllowedResourceNameResponse',
    'AllowedUnauthorizedActionsExtensionResponse',
    'ApiProfileResponse',
    'ApplicationDataAuthorizationResponse',
    'ApplicationProviderAuthorizationResponse',
    'AsyncOperationPollingRulesResponse',
    'AsyncTimeoutRuleResponse',
    'AuthorizationActionMappingResponse',
    'AuthorizedApplicationPropertiesResponse',
    'CustomRolloutPropertiesResponse',
    'CustomRolloutPropertiesResponseSpecification',
    'CustomRolloutPropertiesResponseStatus',
    'CustomRolloutSpecificationResponseAutoProvisionConfig',
    'CustomRolloutSpecificationResponseCanary',
    'CustomRolloutSpecificationResponseProviderRegistration',
    'CustomRolloutStatusResponseManifestCheckinStatus',
    'DefaultRolloutPropertiesResponse',
    'DefaultRolloutPropertiesResponseSpecification',
    'DefaultRolloutPropertiesResponseStatus',
    'DefaultRolloutSpecificationResponseAutoProvisionConfig',
    'DefaultRolloutSpecificationResponseCanary',
    'DefaultRolloutSpecificationResponseExpeditedRollout',
    'DefaultRolloutSpecificationResponseHighTraffic',
    'DefaultRolloutSpecificationResponseLowTraffic',
    'DefaultRolloutSpecificationResponseMediumTraffic',
    'DefaultRolloutSpecificationResponseProviderRegistration',
    'DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne',
    'DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo',
    'DefaultRolloutStatusResponseManifestCheckinStatus',
    'DeleteDependencyResponse',
    'EndpointInformationResponse',
    'ExtendedErrorInfoResponse',
    'ExtendedLocationOptionsResponse',
    'FanoutLinkedNotificationRuleResponse',
    'FanoutLinkedNotificationRuleResponseDstsConfiguration',
    'FilterRuleResponse',
    'LegacyDisallowedConditionResponse',
    'LightHouseAuthorizationResponse',
    'LinkedAccessCheckResponse',
    'LinkedNotificationRuleResponse',
    'LinkedOperationRuleResponse',
    'LocationQuotaRuleResponse',
    'LoggingRuleResponse',
    'LoggingRuleResponseHiddenPropertyPaths',
    'NotificationEndpointResponse',
    'NotificationRegistrationPropertiesResponse',
    'NotificationResponse',
    'OpenApiConfigurationResponse',
    'OpenApiValidationResponse',
    'ProviderHubMetadataResponseProviderAuthentication',
    'ProviderHubMetadataResponseThirdPartyProviderAuthorization',
    'ProviderMonitorSettingPropertiesResponse',
    'ProviderRegistrationPropertiesResponse',
    'ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration',
    'ProviderRegistrationPropertiesResponseProviderHubMetadata',
    'ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications',
    'QuotaRuleResponse',
    'ResourceAccessRoleResponse',
    'ResourceConcurrencyControlOptionResponse',
    'ResourceHydrationAccountResponse',
    'ResourceProviderAuthorizationResponse',
    'ResourceProviderAuthorizationResponseManagedByAuthorization',
    'ResourceProviderAuthorizationRulesResponse',
    'ResourceProviderCapabilitiesResponse',
    'ResourceProviderEndpointResponse',
    'ResourceProviderEndpointResponseFeaturesRule',
    'ResourceProviderManagementResponseErrorResponseMessageOptions',
    'ResourceProviderManagementResponseExpeditedRolloutMetadata',
    'ResourceProviderManifestPropertiesResponseDstsConfiguration',
    'ResourceProviderManifestPropertiesResponseFeaturesRule',
    'ResourceProviderManifestPropertiesResponseManagement',
    'ResourceProviderManifestPropertiesResponseNotificationSettings',
    'ResourceProviderManifestPropertiesResponseProviderAuthentication',
    'ResourceProviderManifestPropertiesResponseRequestHeaderOptions',
    'ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove',
    'ResourceProviderManifestPropertiesResponseResponseOptions',
    'ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions',
    'ResourceProviderServiceResponse',
    'ResourceTypeEndpointResponse',
    'ResourceTypeEndpointResponseDstsConfiguration',
    'ResourceTypeEndpointResponseFeaturesRule',
    'ResourceTypeExtensionOptionsResponseResourceCreationBegin',
    'ResourceTypeExtensionResponse',
    'ResourceTypeOnBehalfOfTokenResponse',
    'ResourceTypeRegistrationPropertiesResponse',
    'ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule',
    'ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport',
    'ResourceTypeRegistrationPropertiesResponseCapacityRule',
    'ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications',
    'ResourceTypeRegistrationPropertiesResponseDstsConfiguration',
    'ResourceTypeRegistrationPropertiesResponseExtensionOptions',
    'ResourceTypeRegistrationPropertiesResponseFeaturesRule',
    'ResourceTypeRegistrationPropertiesResponseIdentityManagement',
    'ResourceTypeRegistrationPropertiesResponseLegacyPolicy',
    'ResourceTypeRegistrationPropertiesResponseManagement',
    'ResourceTypeRegistrationPropertiesResponseMarketplaceOptions',
    'ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport',
    'ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions',
    'ResourceTypeRegistrationPropertiesResponseResourceCache',
    'ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration',
    'ResourceTypeRegistrationPropertiesResponseResourceManagementOptions',
    'ResourceTypeRegistrationPropertiesResponseResourceMovePolicy',
    'ResourceTypeRegistrationPropertiesResponseResourceQueryManagement',
    'ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement',
    'ResourceTypeRegistrationPropertiesResponseRoutingRule',
    'ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications',
    'ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions',
    'ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy',
    'ResourceTypeRegistrationResponse',
    'ServiceTreeInfoResponse',
    'SkuCapabilityResponse',
    'SkuCostResponse',
    'SkuLocationInfoResponse',
    'SkuResourceResponseProperties',
    'SkuSettingResponse',
    'SkuSettingResponseCapacity',
    'SkuZoneDetailResponse',
    'SubscriberSettingResponse',
    'SubscriptionStateOverrideActionResponse',
    'SubscriptionStateRuleResponse',
    'SwaggerSpecificationResponse',
    'SystemDataResponse',
    'ThirdPartyExtensionResponse',
    'ThrottlingMetricResponse',
    'ThrottlingRuleResponse',
    'TokenAuthConfigurationResponse',
    'TypedErrorInfoResponse',
]

@pulumi.output_type
class AdditionalAuthorizationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "roleDefinitionId":
            suggest = "role_definition_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdditionalAuthorizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdditionalAuthorizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdditionalAuthorizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[builtins.str] = None,
                 role_definition_id: Optional[builtins.str] = None):
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if role_definition_id is not None:
            pulumi.set(__self__, "role_definition_id", role_definition_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "role_definition_id")


@pulumi.output_type
class AllowedResourceNameResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "getActionVerb":
            suggest = "get_action_verb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AllowedResourceNameResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AllowedResourceNameResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AllowedResourceNameResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 get_action_verb: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.str get_action_verb: Get action verb.
        :param builtins.str name: Resource name.
        """
        if get_action_verb is not None:
            pulumi.set(__self__, "get_action_verb", get_action_verb)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="getActionVerb")
    def get_action_verb(self) -> Optional[builtins.str]:
        """
        Get action verb.
        """
        return pulumi.get(self, "get_action_verb")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AllowedUnauthorizedActionsExtensionResponse(dict):
    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 intent: Optional[builtins.str] = None):
        """
        :param builtins.str action: The action.
        :param builtins.str intent: The intent.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        """
        The action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def intent(self) -> Optional[builtins.str]:
        """
        The intent.
        """
        return pulumi.get(self, "intent")


@pulumi.output_type
class ApiProfileResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "profileVersion":
            suggest = "profile_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[builtins.str] = None,
                 profile_version: Optional[builtins.str] = None):
        """
        :param builtins.str api_version: Api version.
        :param builtins.str profile_version: Profile version.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if profile_version is not None:
            pulumi.set(__self__, "profile_version", profile_version)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[builtins.str]:
        """
        Api version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="profileVersion")
    def profile_version(self) -> Optional[builtins.str]:
        """
        Profile version.
        """
        return pulumi.get(self, "profile_version")


@pulumi.output_type
class ApplicationDataAuthorizationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceTypes":
            suggest = "resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationDataAuthorizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationDataAuthorizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationDataAuthorizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: builtins.str,
                 resource_types: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str role: The ownership role the application has on the resource types. The service owner role gives the application owner permissions. The limited owner role gives elevated permissions but does not allow all the permissions of a service owner, such as read/write on internal metadata.
        :param Sequence[builtins.str] resource_types: The resource types from the defined resource types in the provider namespace that the application can access. If no resource types are specified and the role is service owner, the default is * which is all resource types
        """
        pulumi.set(__self__, "role", role)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        The ownership role the application has on the resource types. The service owner role gives the application owner permissions. The limited owner role gives elevated permissions but does not allow all the permissions of a service owner, such as read/write on internal metadata.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence[builtins.str]]:
        """
        The resource types from the defined resource types in the provider namespace that the application can access. If no resource types are specified and the role is service owner, the default is * which is all resource types
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
class ApplicationProviderAuthorizationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedByRoleDefinitionId":
            suggest = "managed_by_role_definition_id"
        elif key == "roleDefinitionId":
            suggest = "role_definition_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationProviderAuthorizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationProviderAuthorizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationProviderAuthorizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_by_role_definition_id: Optional[builtins.str] = None,
                 role_definition_id: Optional[builtins.str] = None):
        """
        :param builtins.str managed_by_role_definition_id: The managed by role definition ID for the application.
        :param builtins.str role_definition_id: The role definition ID for the application.
        """
        if managed_by_role_definition_id is not None:
            pulumi.set(__self__, "managed_by_role_definition_id", managed_by_role_definition_id)
        if role_definition_id is not None:
            pulumi.set(__self__, "role_definition_id", role_definition_id)

    @property
    @pulumi.getter(name="managedByRoleDefinitionId")
    def managed_by_role_definition_id(self) -> Optional[builtins.str]:
        """
        The managed by role definition ID for the application.
        """
        return pulumi.get(self, "managed_by_role_definition_id")

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> Optional[builtins.str]:
        """
        The role definition ID for the application.
        """
        return pulumi.get(self, "role_definition_id")


@pulumi.output_type
class AsyncOperationPollingRulesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalOptions":
            suggest = "additional_options"
        elif key == "authorizationActions":
            suggest = "authorization_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsyncOperationPollingRulesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsyncOperationPollingRulesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsyncOperationPollingRulesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_options: Optional[builtins.str] = None,
                 authorization_actions: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str additional_options: The additional options.
        :param Sequence[builtins.str] authorization_actions: The authorization actions.
        """
        if additional_options is not None:
            pulumi.set(__self__, "additional_options", additional_options)
        if authorization_actions is not None:
            pulumi.set(__self__, "authorization_actions", authorization_actions)

    @property
    @pulumi.getter(name="additionalOptions")
    def additional_options(self) -> Optional[builtins.str]:
        """
        The additional options.
        """
        return pulumi.get(self, "additional_options")

    @property
    @pulumi.getter(name="authorizationActions")
    def authorization_actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The authorization actions.
        """
        return pulumi.get(self, "authorization_actions")


@pulumi.output_type
class AsyncTimeoutRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsyncTimeoutRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsyncTimeoutRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsyncTimeoutRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: Optional[builtins.str] = None,
                 timeout: Optional[builtins.str] = None):
        """
        :param builtins.str timeout: This is a TimeSpan property
        """
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.str]:
        """
        This is a TimeSpan property
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class AuthorizationActionMappingResponse(dict):
    def __init__(__self__, *,
                 desired: Optional[builtins.str] = None,
                 original: Optional[builtins.str] = None):
        """
        :param builtins.str desired: The desired action name.
        :param builtins.str original: The original action name.
        """
        if desired is not None:
            pulumi.set(__self__, "desired", desired)
        if original is not None:
            pulumi.set(__self__, "original", original)

    @property
    @pulumi.getter
    def desired(self) -> Optional[builtins.str]:
        """
        The desired action name.
        """
        return pulumi.get(self, "desired")

    @property
    @pulumi.getter
    def original(self) -> Optional[builtins.str]:
        """
        The original action name.
        """
        return pulumi.get(self, "original")


@pulumi.output_type
class AuthorizedApplicationPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "dataAuthorizations":
            suggest = "data_authorizations"
        elif key == "providerAuthorization":
            suggest = "provider_authorization"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthorizedApplicationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthorizedApplicationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthorizedApplicationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 data_authorizations: Optional[Sequence['outputs.ApplicationDataAuthorizationResponse']] = None,
                 provider_authorization: Optional['outputs.ApplicationProviderAuthorizationResponse'] = None):
        """
        :param builtins.str provisioning_state: The provisioning state.
        :param Sequence['ApplicationDataAuthorizationResponse'] data_authorizations: The authorizations that determine the level of data access permissions on the specified resource types.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if data_authorizations is not None:
            pulumi.set(__self__, "data_authorizations", data_authorizations)
        if provider_authorization is not None:
            pulumi.set(__self__, "provider_authorization", provider_authorization)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="dataAuthorizations")
    def data_authorizations(self) -> Optional[Sequence['outputs.ApplicationDataAuthorizationResponse']]:
        """
        The authorizations that determine the level of data access permissions on the specified resource types.
        """
        return pulumi.get(self, "data_authorizations")

    @property
    @pulumi.getter(name="providerAuthorization")
    def provider_authorization(self) -> Optional['outputs.ApplicationProviderAuthorizationResponse']:
        return pulumi.get(self, "provider_authorization")


@pulumi.output_type
class CustomRolloutPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomRolloutPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomRolloutPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomRolloutPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 specification: 'outputs.CustomRolloutPropertiesResponseSpecification',
                 status: Optional['outputs.CustomRolloutPropertiesResponseStatus'] = None):
        """
        :param builtins.str provisioning_state: The provisioned state of the resource.
        :param 'CustomRolloutPropertiesResponseSpecification' specification: The specification.
        :param 'CustomRolloutPropertiesResponseStatus' status: The status.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "specification", specification)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioned state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def specification(self) -> 'outputs.CustomRolloutPropertiesResponseSpecification':
        """
        The specification.
        """
        return pulumi.get(self, "specification")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.CustomRolloutPropertiesResponseStatus']:
        """
        The status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class CustomRolloutPropertiesResponseSpecification(dict):
    """
    The specification.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoProvisionConfig":
            suggest = "auto_provision_config"
        elif key == "providerRegistration":
            suggest = "provider_registration"
        elif key == "refreshSubscriptionRegistration":
            suggest = "refresh_subscription_registration"
        elif key == "releaseScopes":
            suggest = "release_scopes"
        elif key == "resourceTypeRegistrations":
            suggest = "resource_type_registrations"
        elif key == "skipReleaseScopeValidation":
            suggest = "skip_release_scope_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomRolloutPropertiesResponseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomRolloutPropertiesResponseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomRolloutPropertiesResponseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_provision_config: Optional['outputs.CustomRolloutSpecificationResponseAutoProvisionConfig'] = None,
                 canary: Optional['outputs.CustomRolloutSpecificationResponseCanary'] = None,
                 provider_registration: Optional['outputs.CustomRolloutSpecificationResponseProviderRegistration'] = None,
                 refresh_subscription_registration: Optional[builtins.bool] = None,
                 release_scopes: Optional[Sequence[builtins.str]] = None,
                 resource_type_registrations: Optional[Sequence['outputs.ResourceTypeRegistrationResponse']] = None,
                 skip_release_scope_validation: Optional[builtins.bool] = None):
        """
        The specification.
        :param 'CustomRolloutSpecificationResponseAutoProvisionConfig' auto_provision_config: The auto provisioning configuration.
        :param 'CustomRolloutSpecificationResponseCanary' canary: The canary region configuration.
        :param 'CustomRolloutSpecificationResponseProviderRegistration' provider_registration: The provider registration.
        :param builtins.bool refresh_subscription_registration: Whether refreshing subscription registration is enabled or disabled.
        :param Sequence[builtins.str] release_scopes: The list of ARM regions scoped for the release.
        :param Sequence['ResourceTypeRegistrationResponse'] resource_type_registrations: The resource type registrations.
        :param builtins.bool skip_release_scope_validation: Whether release scope validation should be skipped.
        """
        if auto_provision_config is not None:
            pulumi.set(__self__, "auto_provision_config", auto_provision_config)
        if canary is not None:
            pulumi.set(__self__, "canary", canary)
        if provider_registration is not None:
            pulumi.set(__self__, "provider_registration", provider_registration)
        if refresh_subscription_registration is not None:
            pulumi.set(__self__, "refresh_subscription_registration", refresh_subscription_registration)
        if release_scopes is not None:
            pulumi.set(__self__, "release_scopes", release_scopes)
        if resource_type_registrations is not None:
            pulumi.set(__self__, "resource_type_registrations", resource_type_registrations)
        if skip_release_scope_validation is not None:
            pulumi.set(__self__, "skip_release_scope_validation", skip_release_scope_validation)

    @property
    @pulumi.getter(name="autoProvisionConfig")
    def auto_provision_config(self) -> Optional['outputs.CustomRolloutSpecificationResponseAutoProvisionConfig']:
        """
        The auto provisioning configuration.
        """
        return pulumi.get(self, "auto_provision_config")

    @property
    @pulumi.getter
    def canary(self) -> Optional['outputs.CustomRolloutSpecificationResponseCanary']:
        """
        The canary region configuration.
        """
        return pulumi.get(self, "canary")

    @property
    @pulumi.getter(name="providerRegistration")
    def provider_registration(self) -> Optional['outputs.CustomRolloutSpecificationResponseProviderRegistration']:
        """
        The provider registration.
        """
        return pulumi.get(self, "provider_registration")

    @property
    @pulumi.getter(name="refreshSubscriptionRegistration")
    def refresh_subscription_registration(self) -> Optional[builtins.bool]:
        """
        Whether refreshing subscription registration is enabled or disabled.
        """
        return pulumi.get(self, "refresh_subscription_registration")

    @property
    @pulumi.getter(name="releaseScopes")
    def release_scopes(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of ARM regions scoped for the release.
        """
        return pulumi.get(self, "release_scopes")

    @property
    @pulumi.getter(name="resourceTypeRegistrations")
    def resource_type_registrations(self) -> Optional[Sequence['outputs.ResourceTypeRegistrationResponse']]:
        """
        The resource type registrations.
        """
        return pulumi.get(self, "resource_type_registrations")

    @property
    @pulumi.getter(name="skipReleaseScopeValidation")
    def skip_release_scope_validation(self) -> Optional[builtins.bool]:
        """
        Whether release scope validation should be skipped.
        """
        return pulumi.get(self, "skip_release_scope_validation")


@pulumi.output_type
class CustomRolloutPropertiesResponseStatus(dict):
    """
    The status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "completedRegions":
            suggest = "completed_regions"
        elif key == "failedOrSkippedRegions":
            suggest = "failed_or_skipped_regions"
        elif key == "manifestCheckinStatus":
            suggest = "manifest_checkin_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomRolloutPropertiesResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomRolloutPropertiesResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomRolloutPropertiesResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 completed_regions: Optional[Sequence[builtins.str]] = None,
                 failed_or_skipped_regions: Optional[Mapping[str, 'outputs.ExtendedErrorInfoResponse']] = None,
                 manifest_checkin_status: Optional['outputs.CustomRolloutStatusResponseManifestCheckinStatus'] = None):
        """
        The status.
        :param Sequence[builtins.str] completed_regions: The completed regions.
        :param Mapping[str, 'ExtendedErrorInfoResponse'] failed_or_skipped_regions: The failed or skipped regions.
        :param 'CustomRolloutStatusResponseManifestCheckinStatus' manifest_checkin_status: The manifest checkin status.
        """
        if completed_regions is not None:
            pulumi.set(__self__, "completed_regions", completed_regions)
        if failed_or_skipped_regions is not None:
            pulumi.set(__self__, "failed_or_skipped_regions", failed_or_skipped_regions)
        if manifest_checkin_status is not None:
            pulumi.set(__self__, "manifest_checkin_status", manifest_checkin_status)

    @property
    @pulumi.getter(name="completedRegions")
    def completed_regions(self) -> Optional[Sequence[builtins.str]]:
        """
        The completed regions.
        """
        return pulumi.get(self, "completed_regions")

    @property
    @pulumi.getter(name="failedOrSkippedRegions")
    def failed_or_skipped_regions(self) -> Optional[Mapping[str, 'outputs.ExtendedErrorInfoResponse']]:
        """
        The failed or skipped regions.
        """
        return pulumi.get(self, "failed_or_skipped_regions")

    @property
    @pulumi.getter(name="manifestCheckinStatus")
    def manifest_checkin_status(self) -> Optional['outputs.CustomRolloutStatusResponseManifestCheckinStatus']:
        """
        The manifest checkin status.
        """
        return pulumi.get(self, "manifest_checkin_status")


@pulumi.output_type
class CustomRolloutSpecificationResponseAutoProvisionConfig(dict):
    """
    The auto provisioning configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGraph":
            suggest = "resource_graph"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomRolloutSpecificationResponseAutoProvisionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomRolloutSpecificationResponseAutoProvisionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomRolloutSpecificationResponseAutoProvisionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_graph: Optional[builtins.bool] = None,
                 storage: Optional[builtins.bool] = None):
        """
        The auto provisioning configuration.
        """
        if resource_graph is not None:
            pulumi.set(__self__, "resource_graph", resource_graph)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="resourceGraph")
    def resource_graph(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "resource_graph")

    @property
    @pulumi.getter
    def storage(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "storage")


@pulumi.output_type
class CustomRolloutSpecificationResponseCanary(dict):
    """
    The canary region configuration.
    """
    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None):
        """
        The canary region configuration.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "regions")


@pulumi.output_type
class CustomRolloutSpecificationResponseProviderRegistration(dict):
    """
    The provider registration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemData":
            suggest = "system_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomRolloutSpecificationResponseProviderRegistration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomRolloutSpecificationResponseProviderRegistration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomRolloutSpecificationResponseProviderRegistration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: builtins.str,
                 kind: Optional[builtins.str] = None,
                 properties: Optional['outputs.ProviderRegistrationPropertiesResponse'] = None):
        """
        The provider registration.
        :param builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param builtins.str name: The name of the resource
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param builtins.str kind: Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if kind is None:
            kind = 'Managed'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ProviderRegistrationPropertiesResponse']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class CustomRolloutStatusResponseManifestCheckinStatus(dict):
    """
    The manifest checkin status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCheckedIn":
            suggest = "is_checked_in"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "commitId":
            suggest = "commit_id"
        elif key == "pullRequest":
            suggest = "pull_request"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomRolloutStatusResponseManifestCheckinStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomRolloutStatusResponseManifestCheckinStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomRolloutStatusResponseManifestCheckinStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_checked_in: builtins.bool,
                 status_message: builtins.str,
                 commit_id: Optional[builtins.str] = None,
                 pull_request: Optional[builtins.str] = None):
        """
        The manifest checkin status.
        :param builtins.bool is_checked_in: Whether the manifest is checked in.
        :param builtins.str status_message: The status message.
        :param builtins.str commit_id: The commit id.
        :param builtins.str pull_request: The pull request.
        """
        pulumi.set(__self__, "is_checked_in", is_checked_in)
        pulumi.set(__self__, "status_message", status_message)
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if pull_request is not None:
            pulumi.set(__self__, "pull_request", pull_request)

    @property
    @pulumi.getter(name="isCheckedIn")
    def is_checked_in(self) -> builtins.bool:
        """
        Whether the manifest is checked in.
        """
        return pulumi.get(self, "is_checked_in")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> builtins.str:
        """
        The status message.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[builtins.str]:
        """
        The commit id.
        """
        return pulumi.get(self, "commit_id")

    @property
    @pulumi.getter(name="pullRequest")
    def pull_request(self) -> Optional[builtins.str]:
        """
        The pull request.
        """
        return pulumi.get(self, "pull_request")


@pulumi.output_type
class DefaultRolloutPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 specification: Optional['outputs.DefaultRolloutPropertiesResponseSpecification'] = None,
                 status: Optional['outputs.DefaultRolloutPropertiesResponseStatus'] = None):
        """
        :param builtins.str provisioning_state: The provisioned state of the resource.
        :param 'DefaultRolloutPropertiesResponseSpecification' specification: The default rollout specification.
        :param 'DefaultRolloutPropertiesResponseStatus' status: The default rollout status.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if specification is not None:
            pulumi.set(__self__, "specification", specification)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioned state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def specification(self) -> Optional['outputs.DefaultRolloutPropertiesResponseSpecification']:
        """
        The default rollout specification.
        """
        return pulumi.get(self, "specification")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.DefaultRolloutPropertiesResponseStatus']:
        """
        The default rollout status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DefaultRolloutPropertiesResponseSpecification(dict):
    """
    The default rollout specification.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoProvisionConfig":
            suggest = "auto_provision_config"
        elif key == "expeditedRollout":
            suggest = "expedited_rollout"
        elif key == "highTraffic":
            suggest = "high_traffic"
        elif key == "lowTraffic":
            suggest = "low_traffic"
        elif key == "mediumTraffic":
            suggest = "medium_traffic"
        elif key == "providerRegistration":
            suggest = "provider_registration"
        elif key == "resourceTypeRegistrations":
            suggest = "resource_type_registrations"
        elif key == "restOfTheWorldGroupOne":
            suggest = "rest_of_the_world_group_one"
        elif key == "restOfTheWorldGroupTwo":
            suggest = "rest_of_the_world_group_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutPropertiesResponseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutPropertiesResponseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutPropertiesResponseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_provision_config: Optional['outputs.DefaultRolloutSpecificationResponseAutoProvisionConfig'] = None,
                 canary: Optional['outputs.DefaultRolloutSpecificationResponseCanary'] = None,
                 expedited_rollout: Optional['outputs.DefaultRolloutSpecificationResponseExpeditedRollout'] = None,
                 high_traffic: Optional['outputs.DefaultRolloutSpecificationResponseHighTraffic'] = None,
                 low_traffic: Optional['outputs.DefaultRolloutSpecificationResponseLowTraffic'] = None,
                 medium_traffic: Optional['outputs.DefaultRolloutSpecificationResponseMediumTraffic'] = None,
                 provider_registration: Optional['outputs.DefaultRolloutSpecificationResponseProviderRegistration'] = None,
                 resource_type_registrations: Optional[Sequence['outputs.ResourceTypeRegistrationResponse']] = None,
                 rest_of_the_world_group_one: Optional['outputs.DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne'] = None,
                 rest_of_the_world_group_two: Optional['outputs.DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo'] = None):
        """
        The default rollout specification.
        :param 'DefaultRolloutSpecificationResponseAutoProvisionConfig' auto_provision_config: The auto provisioning config.
        :param 'DefaultRolloutSpecificationResponseCanary' canary: The canary traffic region configuration.
        :param 'DefaultRolloutSpecificationResponseExpeditedRollout' expedited_rollout: The expedited rollout definition.
        :param 'DefaultRolloutSpecificationResponseHighTraffic' high_traffic: The high traffic region configuration.
        :param 'DefaultRolloutSpecificationResponseLowTraffic' low_traffic: The low traffic region configuration.
        :param 'DefaultRolloutSpecificationResponseMediumTraffic' medium_traffic: The medium traffic region configuration.
        :param 'DefaultRolloutSpecificationResponseProviderRegistration' provider_registration: The provider registration.
        :param Sequence['ResourceTypeRegistrationResponse'] resource_type_registrations: The resource type registrations.
        :param 'DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne' rest_of_the_world_group_one: The rest of the world group one region configuration.
        :param 'DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo' rest_of_the_world_group_two: The rest of the world group two region configuration.
        """
        if auto_provision_config is not None:
            pulumi.set(__self__, "auto_provision_config", auto_provision_config)
        if canary is not None:
            pulumi.set(__self__, "canary", canary)
        if expedited_rollout is not None:
            pulumi.set(__self__, "expedited_rollout", expedited_rollout)
        if high_traffic is not None:
            pulumi.set(__self__, "high_traffic", high_traffic)
        if low_traffic is not None:
            pulumi.set(__self__, "low_traffic", low_traffic)
        if medium_traffic is not None:
            pulumi.set(__self__, "medium_traffic", medium_traffic)
        if provider_registration is not None:
            pulumi.set(__self__, "provider_registration", provider_registration)
        if resource_type_registrations is not None:
            pulumi.set(__self__, "resource_type_registrations", resource_type_registrations)
        if rest_of_the_world_group_one is not None:
            pulumi.set(__self__, "rest_of_the_world_group_one", rest_of_the_world_group_one)
        if rest_of_the_world_group_two is not None:
            pulumi.set(__self__, "rest_of_the_world_group_two", rest_of_the_world_group_two)

    @property
    @pulumi.getter(name="autoProvisionConfig")
    def auto_provision_config(self) -> Optional['outputs.DefaultRolloutSpecificationResponseAutoProvisionConfig']:
        """
        The auto provisioning config.
        """
        return pulumi.get(self, "auto_provision_config")

    @property
    @pulumi.getter
    def canary(self) -> Optional['outputs.DefaultRolloutSpecificationResponseCanary']:
        """
        The canary traffic region configuration.
        """
        return pulumi.get(self, "canary")

    @property
    @pulumi.getter(name="expeditedRollout")
    def expedited_rollout(self) -> Optional['outputs.DefaultRolloutSpecificationResponseExpeditedRollout']:
        """
        The expedited rollout definition.
        """
        return pulumi.get(self, "expedited_rollout")

    @property
    @pulumi.getter(name="highTraffic")
    def high_traffic(self) -> Optional['outputs.DefaultRolloutSpecificationResponseHighTraffic']:
        """
        The high traffic region configuration.
        """
        return pulumi.get(self, "high_traffic")

    @property
    @pulumi.getter(name="lowTraffic")
    def low_traffic(self) -> Optional['outputs.DefaultRolloutSpecificationResponseLowTraffic']:
        """
        The low traffic region configuration.
        """
        return pulumi.get(self, "low_traffic")

    @property
    @pulumi.getter(name="mediumTraffic")
    def medium_traffic(self) -> Optional['outputs.DefaultRolloutSpecificationResponseMediumTraffic']:
        """
        The medium traffic region configuration.
        """
        return pulumi.get(self, "medium_traffic")

    @property
    @pulumi.getter(name="providerRegistration")
    def provider_registration(self) -> Optional['outputs.DefaultRolloutSpecificationResponseProviderRegistration']:
        """
        The provider registration.
        """
        return pulumi.get(self, "provider_registration")

    @property
    @pulumi.getter(name="resourceTypeRegistrations")
    def resource_type_registrations(self) -> Optional[Sequence['outputs.ResourceTypeRegistrationResponse']]:
        """
        The resource type registrations.
        """
        return pulumi.get(self, "resource_type_registrations")

    @property
    @pulumi.getter(name="restOfTheWorldGroupOne")
    def rest_of_the_world_group_one(self) -> Optional['outputs.DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne']:
        """
        The rest of the world group one region configuration.
        """
        return pulumi.get(self, "rest_of_the_world_group_one")

    @property
    @pulumi.getter(name="restOfTheWorldGroupTwo")
    def rest_of_the_world_group_two(self) -> Optional['outputs.DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo']:
        """
        The rest of the world group two region configuration.
        """
        return pulumi.get(self, "rest_of_the_world_group_two")


@pulumi.output_type
class DefaultRolloutPropertiesResponseStatus(dict):
    """
    The default rollout status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "completedRegions":
            suggest = "completed_regions"
        elif key == "failedOrSkippedRegions":
            suggest = "failed_or_skipped_regions"
        elif key == "manifestCheckinStatus":
            suggest = "manifest_checkin_status"
        elif key == "nextTrafficRegion":
            suggest = "next_traffic_region"
        elif key == "nextTrafficRegionScheduledTime":
            suggest = "next_traffic_region_scheduled_time"
        elif key == "subscriptionReregistrationResult":
            suggest = "subscription_reregistration_result"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutPropertiesResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutPropertiesResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutPropertiesResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 completed_regions: Optional[Sequence[builtins.str]] = None,
                 failed_or_skipped_regions: Optional[Mapping[str, 'outputs.ExtendedErrorInfoResponse']] = None,
                 manifest_checkin_status: Optional['outputs.DefaultRolloutStatusResponseManifestCheckinStatus'] = None,
                 next_traffic_region: Optional[builtins.str] = None,
                 next_traffic_region_scheduled_time: Optional[builtins.str] = None,
                 subscription_reregistration_result: Optional[builtins.str] = None):
        """
        The default rollout status.
        :param Sequence[builtins.str] completed_regions: The completed regions.
        :param Mapping[str, 'ExtendedErrorInfoResponse'] failed_or_skipped_regions: The failed or skipped regions.
        :param 'DefaultRolloutStatusResponseManifestCheckinStatus' manifest_checkin_status: The manifest checkin status.
        :param builtins.str next_traffic_region: The next traffic region.
        :param builtins.str next_traffic_region_scheduled_time: The next traffic region scheduled time.
        :param builtins.str subscription_reregistration_result: The subscription reregistration result.
        """
        if completed_regions is not None:
            pulumi.set(__self__, "completed_regions", completed_regions)
        if failed_or_skipped_regions is not None:
            pulumi.set(__self__, "failed_or_skipped_regions", failed_or_skipped_regions)
        if manifest_checkin_status is not None:
            pulumi.set(__self__, "manifest_checkin_status", manifest_checkin_status)
        if next_traffic_region is not None:
            pulumi.set(__self__, "next_traffic_region", next_traffic_region)
        if next_traffic_region_scheduled_time is not None:
            pulumi.set(__self__, "next_traffic_region_scheduled_time", next_traffic_region_scheduled_time)
        if subscription_reregistration_result is not None:
            pulumi.set(__self__, "subscription_reregistration_result", subscription_reregistration_result)

    @property
    @pulumi.getter(name="completedRegions")
    def completed_regions(self) -> Optional[Sequence[builtins.str]]:
        """
        The completed regions.
        """
        return pulumi.get(self, "completed_regions")

    @property
    @pulumi.getter(name="failedOrSkippedRegions")
    def failed_or_skipped_regions(self) -> Optional[Mapping[str, 'outputs.ExtendedErrorInfoResponse']]:
        """
        The failed or skipped regions.
        """
        return pulumi.get(self, "failed_or_skipped_regions")

    @property
    @pulumi.getter(name="manifestCheckinStatus")
    def manifest_checkin_status(self) -> Optional['outputs.DefaultRolloutStatusResponseManifestCheckinStatus']:
        """
        The manifest checkin status.
        """
        return pulumi.get(self, "manifest_checkin_status")

    @property
    @pulumi.getter(name="nextTrafficRegion")
    def next_traffic_region(self) -> Optional[builtins.str]:
        """
        The next traffic region.
        """
        return pulumi.get(self, "next_traffic_region")

    @property
    @pulumi.getter(name="nextTrafficRegionScheduledTime")
    def next_traffic_region_scheduled_time(self) -> Optional[builtins.str]:
        """
        The next traffic region scheduled time.
        """
        return pulumi.get(self, "next_traffic_region_scheduled_time")

    @property
    @pulumi.getter(name="subscriptionReregistrationResult")
    def subscription_reregistration_result(self) -> Optional[builtins.str]:
        """
        The subscription reregistration result.
        """
        return pulumi.get(self, "subscription_reregistration_result")


@pulumi.output_type
class DefaultRolloutSpecificationResponseAutoProvisionConfig(dict):
    """
    The auto provisioning config.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGraph":
            suggest = "resource_graph"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseAutoProvisionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseAutoProvisionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseAutoProvisionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_graph: Optional[builtins.bool] = None,
                 storage: Optional[builtins.bool] = None):
        """
        The auto provisioning config.
        :param builtins.bool resource_graph: Whether auto provisioning for resource graph is enabled.
        :param builtins.bool storage: Whether auto provisioning for storage is enabled.
        """
        if resource_graph is not None:
            pulumi.set(__self__, "resource_graph", resource_graph)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="resourceGraph")
    def resource_graph(self) -> Optional[builtins.bool]:
        """
        Whether auto provisioning for resource graph is enabled.
        """
        return pulumi.get(self, "resource_graph")

    @property
    @pulumi.getter
    def storage(self) -> Optional[builtins.bool]:
        """
        Whether auto provisioning for storage is enabled.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class DefaultRolloutSpecificationResponseCanary(dict):
    """
    The canary traffic region configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "skipRegions":
            suggest = "skip_regions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseCanary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseCanary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseCanary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None,
                 skip_regions: Optional[Sequence[builtins.str]] = None):
        """
        The canary traffic region configuration.
        :param Sequence[builtins.str] regions: The regions.
        :param Sequence[builtins.str] skip_regions: The skip regions.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if skip_regions is not None:
            pulumi.set(__self__, "skip_regions", skip_regions)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        """
        The regions.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="skipRegions")
    def skip_regions(self) -> Optional[Sequence[builtins.str]]:
        """
        The skip regions.
        """
        return pulumi.get(self, "skip_regions")


@pulumi.output_type
class DefaultRolloutSpecificationResponseExpeditedRollout(dict):
    """
    The expedited rollout definition.
    """
    def __init__(__self__, *,
                 enabled: Optional[builtins.bool] = None):
        """
        The expedited rollout definition.
        :param builtins.bool enabled: Indicates whether expedited rollout is enabled/disabled
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether expedited rollout is enabled/disabled
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DefaultRolloutSpecificationResponseHighTraffic(dict):
    """
    The high traffic region configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseHighTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseHighTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseHighTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None,
                 wait_duration: Optional[builtins.str] = None):
        """
        The high traffic region configuration.
        :param builtins.str wait_duration: The wait duration.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[builtins.str]:
        """
        The wait duration.
        """
        return pulumi.get(self, "wait_duration")


@pulumi.output_type
class DefaultRolloutSpecificationResponseLowTraffic(dict):
    """
    The low traffic region configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseLowTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseLowTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseLowTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None,
                 wait_duration: Optional[builtins.str] = None):
        """
        The low traffic region configuration.
        :param builtins.str wait_duration: The wait duration.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[builtins.str]:
        """
        The wait duration.
        """
        return pulumi.get(self, "wait_duration")


@pulumi.output_type
class DefaultRolloutSpecificationResponseMediumTraffic(dict):
    """
    The medium traffic region configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseMediumTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseMediumTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseMediumTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None,
                 wait_duration: Optional[builtins.str] = None):
        """
        The medium traffic region configuration.
        :param builtins.str wait_duration: The wait duration.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[builtins.str]:
        """
        The wait duration.
        """
        return pulumi.get(self, "wait_duration")


@pulumi.output_type
class DefaultRolloutSpecificationResponseProviderRegistration(dict):
    """
    The provider registration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemData":
            suggest = "system_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseProviderRegistration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseProviderRegistration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseProviderRegistration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: builtins.str,
                 kind: Optional[builtins.str] = None,
                 properties: Optional['outputs.ProviderRegistrationPropertiesResponse'] = None):
        """
        The provider registration.
        :param builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param builtins.str name: The name of the resource
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param builtins.str kind: Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if kind is None:
            kind = 'Managed'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ProviderRegistrationPropertiesResponse']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne(dict):
    """
    The rest of the world group one region configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseRestOfTheWorldGroupOne.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None,
                 wait_duration: Optional[builtins.str] = None):
        """
        The rest of the world group one region configuration.
        :param builtins.str wait_duration: The wait duration.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[builtins.str]:
        """
        The wait duration.
        """
        return pulumi.get(self, "wait_duration")


@pulumi.output_type
class DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo(dict):
    """
    The rest of the world group two region configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutSpecificationResponseRestOfTheWorldGroupTwo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence[builtins.str]] = None,
                 wait_duration: Optional[builtins.str] = None):
        """
        The rest of the world group two region configuration.
        :param builtins.str wait_duration: The wait duration.
        """
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[builtins.str]:
        """
        The wait duration.
        """
        return pulumi.get(self, "wait_duration")


@pulumi.output_type
class DefaultRolloutStatusResponseManifestCheckinStatus(dict):
    """
    The manifest checkin status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCheckedIn":
            suggest = "is_checked_in"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "commitId":
            suggest = "commit_id"
        elif key == "pullRequest":
            suggest = "pull_request"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRolloutStatusResponseManifestCheckinStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRolloutStatusResponseManifestCheckinStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRolloutStatusResponseManifestCheckinStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_checked_in: builtins.bool,
                 status_message: builtins.str,
                 commit_id: Optional[builtins.str] = None,
                 pull_request: Optional[builtins.str] = None):
        """
        The manifest checkin status.
        :param builtins.bool is_checked_in: Whether the manifest is checked in.
        :param builtins.str status_message: The status message.
        :param builtins.str commit_id: The commit id.
        :param builtins.str pull_request: The pull request.
        """
        pulumi.set(__self__, "is_checked_in", is_checked_in)
        pulumi.set(__self__, "status_message", status_message)
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if pull_request is not None:
            pulumi.set(__self__, "pull_request", pull_request)

    @property
    @pulumi.getter(name="isCheckedIn")
    def is_checked_in(self) -> builtins.bool:
        """
        Whether the manifest is checked in.
        """
        return pulumi.get(self, "is_checked_in")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> builtins.str:
        """
        The status message.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[builtins.str]:
        """
        The commit id.
        """
        return pulumi.get(self, "commit_id")

    @property
    @pulumi.getter(name="pullRequest")
    def pull_request(self) -> Optional[builtins.str]:
        """
        The pull request.
        """
        return pulumi.get(self, "pull_request")


@pulumi.output_type
class DeleteDependencyResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkedProperty":
            suggest = "linked_property"
        elif key == "linkedType":
            suggest = "linked_type"
        elif key == "requiredFeatures":
            suggest = "required_features"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeleteDependencyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeleteDependencyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeleteDependencyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 linked_property: Optional[builtins.str] = None,
                 linked_type: Optional[builtins.str] = None,
                 required_features: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str linked_property: Linked property.
        :param builtins.str linked_type: Linked type.
        :param Sequence[builtins.str] required_features: Required features.
        """
        if linked_property is not None:
            pulumi.set(__self__, "linked_property", linked_property)
        if linked_type is not None:
            pulumi.set(__self__, "linked_type", linked_type)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)

    @property
    @pulumi.getter(name="linkedProperty")
    def linked_property(self) -> Optional[builtins.str]:
        """
        Linked property.
        """
        return pulumi.get(self, "linked_property")

    @property
    @pulumi.getter(name="linkedType")
    def linked_type(self) -> Optional[builtins.str]:
        """
        Linked type.
        """
        return pulumi.get(self, "linked_type")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        Required features.
        """
        return pulumi.get(self, "required_features")


@pulumi.output_type
class EndpointInformationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointType":
            suggest = "endpoint_type"
        elif key == "schemaVersion":
            suggest = "schema_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointInformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointInformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointInformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: Optional[builtins.str] = None,
                 endpoint_type: Optional[builtins.str] = None,
                 schema_version: Optional[builtins.str] = None):
        """
        :param builtins.str endpoint: The endpoint.
        :param builtins.str endpoint_type: The endpoint type.
        :param builtins.str schema_version: The schema version.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if schema_version is not None:
            pulumi.set(__self__, "schema_version", schema_version)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[builtins.str]:
        """
        The endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[builtins.str]:
        """
        The endpoint type.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> Optional[builtins.str]:
        """
        The schema version.
        """
        return pulumi.get(self, "schema_version")


@pulumi.output_type
class ExtendedErrorInfoResponse(dict):
    """
    Error information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtendedErrorInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtendedErrorInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtendedErrorInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Optional[Sequence['outputs.TypedErrorInfoResponse']] = None,
                 code: Optional[builtins.str] = None,
                 details: Optional[Sequence['outputs.ExtendedErrorInfoResponse']] = None,
                 message: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None):
        """
        Error information.
        :param Sequence['TypedErrorInfoResponse'] additional_info: The additional error information.
        :param builtins.str code: The error code.
        :param Sequence['ExtendedErrorInfoResponse'] details: The error details.
        :param builtins.str message: The error message.
        :param builtins.str target: The target of the error.
        """
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.TypedErrorInfoResponse']]:
        """
        The additional error information.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def code(self) -> Optional[builtins.str]:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.ExtendedErrorInfoResponse']]:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        """
        The target of the error.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ExtendedLocationOptionsResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportedPolicy":
            suggest = "supported_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtendedLocationOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtendedLocationOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtendedLocationOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 supported_policy: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str type: The type.
        """
        if supported_policy is not None:
            pulumi.set(__self__, "supported_policy", supported_policy)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="supportedPolicy")
    def supported_policy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "supported_policy")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FanoutLinkedNotificationRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstsConfiguration":
            suggest = "dsts_configuration"
        elif key == "tokenAuthConfiguration":
            suggest = "token_auth_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FanoutLinkedNotificationRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FanoutLinkedNotificationRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FanoutLinkedNotificationRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence[builtins.str]] = None,
                 dsts_configuration: Optional['outputs.FanoutLinkedNotificationRuleResponseDstsConfiguration'] = None,
                 endpoints: Optional[Sequence['outputs.ResourceProviderEndpointResponse']] = None,
                 token_auth_configuration: Optional['outputs.TokenAuthConfigurationResponse'] = None):
        """
        :param Sequence[builtins.str] actions: The actions.
        :param 'FanoutLinkedNotificationRuleResponseDstsConfiguration' dsts_configuration: The dsts configuration.
        :param Sequence['ResourceProviderEndpointResponse'] endpoints: The endpoints.
        :param 'TokenAuthConfigurationResponse' token_auth_configuration: The token auth configuration.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if dsts_configuration is not None:
            pulumi.set(__self__, "dsts_configuration", dsts_configuration)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if token_auth_configuration is not None:
            pulumi.set(__self__, "token_auth_configuration", token_auth_configuration)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="dstsConfiguration")
    def dsts_configuration(self) -> Optional['outputs.FanoutLinkedNotificationRuleResponseDstsConfiguration']:
        """
        The dsts configuration.
        """
        return pulumi.get(self, "dsts_configuration")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.ResourceProviderEndpointResponse']]:
        """
        The endpoints.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="tokenAuthConfiguration")
    def token_auth_configuration(self) -> Optional['outputs.TokenAuthConfigurationResponse']:
        """
        The token auth configuration.
        """
        return pulumi.get(self, "token_auth_configuration")


@pulumi.output_type
class FanoutLinkedNotificationRuleResponseDstsConfiguration(dict):
    """
    The dsts configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "serviceDnsName":
            suggest = "service_dns_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FanoutLinkedNotificationRuleResponseDstsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FanoutLinkedNotificationRuleResponseDstsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FanoutLinkedNotificationRuleResponseDstsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: builtins.str,
                 service_dns_name: Optional[builtins.str] = None):
        """
        The dsts configuration.
        :param builtins.str service_name: The service name.
        :param builtins.str service_dns_name: This is a URI property.
        """
        pulumi.set(__self__, "service_name", service_name)
        if service_dns_name is not None:
            pulumi.set(__self__, "service_dns_name", service_dns_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceDnsName")
    def service_dns_name(self) -> Optional[builtins.str]:
        """
        This is a URI property.
        """
        return pulumi.get(self, "service_dns_name")


@pulumi.output_type
class FilterRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointInformation":
            suggest = "endpoint_information"
        elif key == "filterQuery":
            suggest = "filter_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_information: Optional[Sequence['outputs.EndpointInformationResponse']] = None,
                 filter_query: Optional[builtins.str] = None):
        """
        :param Sequence['EndpointInformationResponse'] endpoint_information: The endpoint information.
        :param builtins.str filter_query: The filter query.
        """
        if endpoint_information is not None:
            pulumi.set(__self__, "endpoint_information", endpoint_information)
        if filter_query is not None:
            pulumi.set(__self__, "filter_query", filter_query)

    @property
    @pulumi.getter(name="endpointInformation")
    def endpoint_information(self) -> Optional[Sequence['outputs.EndpointInformationResponse']]:
        """
        The endpoint information.
        """
        return pulumi.get(self, "endpoint_information")

    @property
    @pulumi.getter(name="filterQuery")
    def filter_query(self) -> Optional[builtins.str]:
        """
        The filter query.
        """
        return pulumi.get(self, "filter_query")


@pulumi.output_type
class LegacyDisallowedConditionResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disallowedLegacyOperations":
            suggest = "disallowed_legacy_operations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LegacyDisallowedConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LegacyDisallowedConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LegacyDisallowedConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disallowed_legacy_operations: Optional[Sequence[builtins.str]] = None,
                 feature: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] disallowed_legacy_operations: The disallowed legacy operations.
        :param builtins.str feature: Feature string.
        """
        if disallowed_legacy_operations is not None:
            pulumi.set(__self__, "disallowed_legacy_operations", disallowed_legacy_operations)
        if feature is not None:
            pulumi.set(__self__, "feature", feature)

    @property
    @pulumi.getter(name="disallowedLegacyOperations")
    def disallowed_legacy_operations(self) -> Optional[Sequence[builtins.str]]:
        """
        The disallowed legacy operations.
        """
        return pulumi.get(self, "disallowed_legacy_operations")

    @property
    @pulumi.getter
    def feature(self) -> Optional[builtins.str]:
        """
        Feature string.
        """
        return pulumi.get(self, "feature")


@pulumi.output_type
class LightHouseAuthorizationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "roleDefinitionId":
            suggest = "role_definition_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LightHouseAuthorizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LightHouseAuthorizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LightHouseAuthorizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: builtins.str,
                 role_definition_id: builtins.str):
        """
        :param builtins.str principal_id: The principal id.
        :param builtins.str role_definition_id: The role definition id.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "role_definition_id", role_definition_id)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The principal id.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> builtins.str:
        """
        The role definition id.
        """
        return pulumi.get(self, "role_definition_id")


@pulumi.output_type
class LinkedAccessCheckResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "linkedAction":
            suggest = "linked_action"
        elif key == "linkedActionVerb":
            suggest = "linked_action_verb"
        elif key == "linkedProperty":
            suggest = "linked_property"
        elif key == "linkedType":
            suggest = "linked_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkedAccessCheckResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkedAccessCheckResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkedAccessCheckResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: Optional[builtins.str] = None,
                 linked_action: Optional[builtins.str] = None,
                 linked_action_verb: Optional[builtins.str] = None,
                 linked_property: Optional[builtins.str] = None,
                 linked_type: Optional[builtins.str] = None):
        """
        :param builtins.str action_name: The action name.
        :param builtins.str linked_action: The linked action.
        :param builtins.str linked_action_verb: The linked action verb.
        :param builtins.str linked_property: The linked property.
        :param builtins.str linked_type: The linked type.
        """
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if linked_action is not None:
            pulumi.set(__self__, "linked_action", linked_action)
        if linked_action_verb is not None:
            pulumi.set(__self__, "linked_action_verb", linked_action_verb)
        if linked_property is not None:
            pulumi.set(__self__, "linked_property", linked_property)
        if linked_type is not None:
            pulumi.set(__self__, "linked_type", linked_type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[builtins.str]:
        """
        The action name.
        """
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="linkedAction")
    def linked_action(self) -> Optional[builtins.str]:
        """
        The linked action.
        """
        return pulumi.get(self, "linked_action")

    @property
    @pulumi.getter(name="linkedActionVerb")
    def linked_action_verb(self) -> Optional[builtins.str]:
        """
        The linked action verb.
        """
        return pulumi.get(self, "linked_action_verb")

    @property
    @pulumi.getter(name="linkedProperty")
    def linked_property(self) -> Optional[builtins.str]:
        """
        The linked property.
        """
        return pulumi.get(self, "linked_property")

    @property
    @pulumi.getter(name="linkedType")
    def linked_type(self) -> Optional[builtins.str]:
        """
        The linked type.
        """
        return pulumi.get(self, "linked_type")


@pulumi.output_type
class LinkedNotificationRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsOnFailedOperation":
            suggest = "actions_on_failed_operation"
        elif key == "fastPathActions":
            suggest = "fast_path_actions"
        elif key == "fastPathActionsOnFailedOperation":
            suggest = "fast_path_actions_on_failed_operation"
        elif key == "linkedNotificationTimeout":
            suggest = "linked_notification_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkedNotificationRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkedNotificationRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkedNotificationRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence[builtins.str]] = None,
                 actions_on_failed_operation: Optional[Sequence[builtins.str]] = None,
                 fast_path_actions: Optional[Sequence[builtins.str]] = None,
                 fast_path_actions_on_failed_operation: Optional[Sequence[builtins.str]] = None,
                 linked_notification_timeout: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] actions: The actions.
        :param Sequence[builtins.str] actions_on_failed_operation: The actions on failed operation.
        :param Sequence[builtins.str] fast_path_actions: The fast path actions.
        :param Sequence[builtins.str] fast_path_actions_on_failed_operation: The fast path action on failed operation.
        :param builtins.str linked_notification_timeout: This is a TimeSpan property.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if actions_on_failed_operation is not None:
            pulumi.set(__self__, "actions_on_failed_operation", actions_on_failed_operation)
        if fast_path_actions is not None:
            pulumi.set(__self__, "fast_path_actions", fast_path_actions)
        if fast_path_actions_on_failed_operation is not None:
            pulumi.set(__self__, "fast_path_actions_on_failed_operation", fast_path_actions_on_failed_operation)
        if linked_notification_timeout is not None:
            pulumi.set(__self__, "linked_notification_timeout", linked_notification_timeout)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="actionsOnFailedOperation")
    def actions_on_failed_operation(self) -> Optional[Sequence[builtins.str]]:
        """
        The actions on failed operation.
        """
        return pulumi.get(self, "actions_on_failed_operation")

    @property
    @pulumi.getter(name="fastPathActions")
    def fast_path_actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The fast path actions.
        """
        return pulumi.get(self, "fast_path_actions")

    @property
    @pulumi.getter(name="fastPathActionsOnFailedOperation")
    def fast_path_actions_on_failed_operation(self) -> Optional[Sequence[builtins.str]]:
        """
        The fast path action on failed operation.
        """
        return pulumi.get(self, "fast_path_actions_on_failed_operation")

    @property
    @pulumi.getter(name="linkedNotificationTimeout")
    def linked_notification_timeout(self) -> Optional[builtins.str]:
        """
        This is a TimeSpan property.
        """
        return pulumi.get(self, "linked_notification_timeout")


@pulumi.output_type
class LinkedOperationRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkedAction":
            suggest = "linked_action"
        elif key == "linkedOperation":
            suggest = "linked_operation"
        elif key == "dependsOnTypes":
            suggest = "depends_on_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkedOperationRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkedOperationRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkedOperationRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 linked_action: builtins.str,
                 linked_operation: builtins.str,
                 depends_on_types: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str linked_action: The linked action.
        :param builtins.str linked_operation: The linked operation.
        :param Sequence[builtins.str] depends_on_types: Depends on types.
        """
        pulumi.set(__self__, "linked_action", linked_action)
        pulumi.set(__self__, "linked_operation", linked_operation)
        if depends_on_types is not None:
            pulumi.set(__self__, "depends_on_types", depends_on_types)

    @property
    @pulumi.getter(name="linkedAction")
    def linked_action(self) -> builtins.str:
        """
        The linked action.
        """
        return pulumi.get(self, "linked_action")

    @property
    @pulumi.getter(name="linkedOperation")
    def linked_operation(self) -> builtins.str:
        """
        The linked operation.
        """
        return pulumi.get(self, "linked_operation")

    @property
    @pulumi.getter(name="dependsOnTypes")
    def depends_on_types(self) -> Optional[Sequence[builtins.str]]:
        """
        Depends on types.
        """
        return pulumi.get(self, "depends_on_types")


@pulumi.output_type
class LocationQuotaRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quotaId":
            suggest = "quota_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationQuotaRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationQuotaRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationQuotaRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: Optional[builtins.str] = None,
                 policy: Optional[builtins.str] = None,
                 quota_id: Optional[builtins.str] = None):
        """
        :param builtins.str location: The location.
        :param builtins.str policy: The policy.
        :param builtins.str quota_id: The quota id.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if quota_id is not None:
            pulumi.set(__self__, "quota_id", quota_id)

    @property
    @pulumi.getter
    def location(self) -> Optional[builtins.str]:
        """
        The location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def policy(self) -> Optional[builtins.str]:
        """
        The policy.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> Optional[builtins.str]:
        """
        The quota id.
        """
        return pulumi.get(self, "quota_id")


@pulumi.output_type
class LoggingRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detailLevel":
            suggest = "detail_level"
        elif key == "hiddenPropertyPaths":
            suggest = "hidden_property_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: builtins.str,
                 detail_level: builtins.str,
                 direction: builtins.str,
                 hidden_property_paths: Optional['outputs.LoggingRuleResponseHiddenPropertyPaths'] = None):
        """
        :param builtins.str action: The action.
        :param builtins.str detail_level: The detail level.
        :param builtins.str direction: The direction.
        :param 'LoggingRuleResponseHiddenPropertyPaths' hidden_property_paths: The hidden property paths.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "detail_level", detail_level)
        pulumi.set(__self__, "direction", direction)
        if hidden_property_paths is not None:
            pulumi.set(__self__, "hidden_property_paths", hidden_property_paths)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        The action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="detailLevel")
    def detail_level(self) -> builtins.str:
        """
        The detail level.
        """
        return pulumi.get(self, "detail_level")

    @property
    @pulumi.getter
    def direction(self) -> builtins.str:
        """
        The direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="hiddenPropertyPaths")
    def hidden_property_paths(self) -> Optional['outputs.LoggingRuleResponseHiddenPropertyPaths']:
        """
        The hidden property paths.
        """
        return pulumi.get(self, "hidden_property_paths")


@pulumi.output_type
class LoggingRuleResponseHiddenPropertyPaths(dict):
    """
    The hidden property paths.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hiddenPathsOnRequest":
            suggest = "hidden_paths_on_request"
        elif key == "hiddenPathsOnResponse":
            suggest = "hidden_paths_on_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingRuleResponseHiddenPropertyPaths. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingRuleResponseHiddenPropertyPaths.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingRuleResponseHiddenPropertyPaths.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hidden_paths_on_request: Optional[Sequence[builtins.str]] = None,
                 hidden_paths_on_response: Optional[Sequence[builtins.str]] = None):
        """
        The hidden property paths.
        :param Sequence[builtins.str] hidden_paths_on_request: The hidden paths on request.
        :param Sequence[builtins.str] hidden_paths_on_response: The hidden paths on response.
        """
        if hidden_paths_on_request is not None:
            pulumi.set(__self__, "hidden_paths_on_request", hidden_paths_on_request)
        if hidden_paths_on_response is not None:
            pulumi.set(__self__, "hidden_paths_on_response", hidden_paths_on_response)

    @property
    @pulumi.getter(name="hiddenPathsOnRequest")
    def hidden_paths_on_request(self) -> Optional[Sequence[builtins.str]]:
        """
        The hidden paths on request.
        """
        return pulumi.get(self, "hidden_paths_on_request")

    @property
    @pulumi.getter(name="hiddenPathsOnResponse")
    def hidden_paths_on_response(self) -> Optional[Sequence[builtins.str]]:
        """
        The hidden paths on response.
        """
        return pulumi.get(self, "hidden_paths_on_response")


@pulumi.output_type
class NotificationEndpointResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationDestination":
            suggest = "notification_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationEndpointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationEndpointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationEndpointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 locations: Optional[Sequence[builtins.str]] = None,
                 notification_destination: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] locations: The locations.
        :param builtins.str notification_destination: The notification destination.
        """
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if notification_destination is not None:
            pulumi.set(__self__, "notification_destination", notification_destination)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[builtins.str]]:
        """
        The locations.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="notificationDestination")
    def notification_destination(self) -> Optional[builtins.str]:
        """
        The notification destination.
        """
        return pulumi.get(self, "notification_destination")


@pulumi.output_type
class NotificationRegistrationPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "includedEvents":
            suggest = "included_events"
        elif key == "messageScope":
            suggest = "message_scope"
        elif key == "notificationEndpoints":
            suggest = "notification_endpoints"
        elif key == "notificationMode":
            suggest = "notification_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationRegistrationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationRegistrationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationRegistrationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 included_events: Optional[Sequence[builtins.str]] = None,
                 message_scope: Optional[builtins.str] = None,
                 notification_endpoints: Optional[Sequence['outputs.NotificationEndpointResponse']] = None,
                 notification_mode: Optional[builtins.str] = None):
        """
        :param builtins.str provisioning_state: The provisioned state of the resource.
        :param Sequence[builtins.str] included_events: The included events.
        :param builtins.str message_scope: The message scope.
        :param Sequence['NotificationEndpointResponse'] notification_endpoints: The notification endpoints.
        :param builtins.str notification_mode: The notification mode.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if included_events is not None:
            pulumi.set(__self__, "included_events", included_events)
        if message_scope is not None:
            pulumi.set(__self__, "message_scope", message_scope)
        if notification_endpoints is not None:
            pulumi.set(__self__, "notification_endpoints", notification_endpoints)
        if notification_mode is not None:
            pulumi.set(__self__, "notification_mode", notification_mode)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioned state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="includedEvents")
    def included_events(self) -> Optional[Sequence[builtins.str]]:
        """
        The included events.
        """
        return pulumi.get(self, "included_events")

    @property
    @pulumi.getter(name="messageScope")
    def message_scope(self) -> Optional[builtins.str]:
        """
        The message scope.
        """
        return pulumi.get(self, "message_scope")

    @property
    @pulumi.getter(name="notificationEndpoints")
    def notification_endpoints(self) -> Optional[Sequence['outputs.NotificationEndpointResponse']]:
        """
        The notification endpoints.
        """
        return pulumi.get(self, "notification_endpoints")

    @property
    @pulumi.getter(name="notificationMode")
    def notification_mode(self) -> Optional[builtins.str]:
        """
        The notification mode.
        """
        return pulumi.get(self, "notification_mode")


@pulumi.output_type
class NotificationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationType":
            suggest = "notification_type"
        elif key == "skipNotifications":
            suggest = "skip_notifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_type: Optional[builtins.str] = None,
                 skip_notifications: Optional[builtins.str] = None):
        """
        :param builtins.str notification_type: The notification type.
        :param builtins.str skip_notifications: Whether notifications should be skipped.
        """
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if skip_notifications is not None:
            pulumi.set(__self__, "skip_notifications", skip_notifications)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[builtins.str]:
        """
        The notification type.
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter(name="skipNotifications")
    def skip_notifications(self) -> Optional[builtins.str]:
        """
        Whether notifications should be skipped.
        """
        return pulumi.get(self, "skip_notifications")


@pulumi.output_type
class OpenApiConfigurationResponse(dict):
    def __init__(__self__, *,
                 validation: Optional['outputs.OpenApiValidationResponse'] = None):
        """
        :param 'OpenApiValidationResponse' validation: The open api validation.
        """
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter
    def validation(self) -> Optional['outputs.OpenApiValidationResponse']:
        """
        The open api validation.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class OpenApiValidationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowNoncompliantCollectionResponse":
            suggest = "allow_noncompliant_collection_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenApiValidationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenApiValidationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenApiValidationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_noncompliant_collection_response: Optional[builtins.bool] = None):
        """
        :param builtins.bool allow_noncompliant_collection_response: Indicates whether a non compliance response is allowed for a LIST call
        """
        if allow_noncompliant_collection_response is not None:
            pulumi.set(__self__, "allow_noncompliant_collection_response", allow_noncompliant_collection_response)

    @property
    @pulumi.getter(name="allowNoncompliantCollectionResponse")
    def allow_noncompliant_collection_response(self) -> Optional[builtins.bool]:
        """
        Indicates whether a non compliance response is allowed for a LIST call
        """
        return pulumi.get(self, "allow_noncompliant_collection_response")


@pulumi.output_type
class ProviderHubMetadataResponseProviderAuthentication(dict):
    """
    The provider authentication.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedAudiences":
            suggest = "allowed_audiences"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderHubMetadataResponseProviderAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderHubMetadataResponseProviderAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderHubMetadataResponseProviderAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_audiences: Sequence[builtins.str]):
        """
        The provider authentication.
        :param Sequence[builtins.str] allowed_audiences: The allowed audiences.
        """
        pulumi.set(__self__, "allowed_audiences", allowed_audiences)

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> Sequence[builtins.str]:
        """
        The allowed audiences.
        """
        return pulumi.get(self, "allowed_audiences")


@pulumi.output_type
class ProviderHubMetadataResponseThirdPartyProviderAuthorization(dict):
    """
    The third party provider authorization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedByTenantId":
            suggest = "managed_by_tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderHubMetadataResponseThirdPartyProviderAuthorization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderHubMetadataResponseThirdPartyProviderAuthorization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderHubMetadataResponseThirdPartyProviderAuthorization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizations: Optional[Sequence['outputs.LightHouseAuthorizationResponse']] = None,
                 managed_by_tenant_id: Optional[builtins.str] = None):
        """
        The third party provider authorization.
        :param Sequence['LightHouseAuthorizationResponse'] authorizations: The authorizations.
        :param builtins.str managed_by_tenant_id: The managed by tenant id.
        """
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if managed_by_tenant_id is not None:
            pulumi.set(__self__, "managed_by_tenant_id", managed_by_tenant_id)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence['outputs.LightHouseAuthorizationResponse']]:
        """
        The authorizations.
        """
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="managedByTenantId")
    def managed_by_tenant_id(self) -> Optional[builtins.str]:
        """
        The managed by tenant id.
        """
        return pulumi.get(self, "managed_by_tenant_id")


@pulumi.output_type
class ProviderMonitorSettingPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderMonitorSettingPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderMonitorSettingPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderMonitorSettingPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str):
        """
        :param builtins.str provisioning_state: The provisioning state.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class ProviderRegistrationPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "crossTenantTokenValidation":
            suggest = "cross_tenant_token_validation"
        elif key == "customManifestVersion":
            suggest = "custom_manifest_version"
        elif key == "dstsConfiguration":
            suggest = "dsts_configuration"
        elif key == "enableTenantLinkedNotification":
            suggest = "enable_tenant_linked_notification"
        elif key == "featuresRule":
            suggest = "features_rule"
        elif key == "globalNotificationEndpoints":
            suggest = "global_notification_endpoints"
        elif key == "legacyNamespace":
            suggest = "legacy_namespace"
        elif key == "legacyRegistrations":
            suggest = "legacy_registrations"
        elif key == "linkedNotificationRules":
            suggest = "linked_notification_rules"
        elif key == "managementGroupGlobalNotificationEndpoints":
            suggest = "management_group_global_notification_endpoints"
        elif key == "notificationOptions":
            suggest = "notification_options"
        elif key == "notificationSettings":
            suggest = "notification_settings"
        elif key == "optionalFeatures":
            suggest = "optional_features"
        elif key == "privateResourceProviderConfiguration":
            suggest = "private_resource_provider_configuration"
        elif key == "providerAuthentication":
            suggest = "provider_authentication"
        elif key == "providerAuthorizations":
            suggest = "provider_authorizations"
        elif key == "providerHubMetadata":
            suggest = "provider_hub_metadata"
        elif key == "providerType":
            suggest = "provider_type"
        elif key == "providerVersion":
            suggest = "provider_version"
        elif key == "requestHeaderOptions":
            suggest = "request_header_options"
        elif key == "requiredFeatures":
            suggest = "required_features"
        elif key == "resourceGroupLockOptionDuringMove":
            suggest = "resource_group_lock_option_during_move"
        elif key == "resourceHydrationAccounts":
            suggest = "resource_hydration_accounts"
        elif key == "resourceProviderAuthorizationRules":
            suggest = "resource_provider_authorization_rules"
        elif key == "responseOptions":
            suggest = "response_options"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "subscriptionLifecycleNotificationSpecifications":
            suggest = "subscription_lifecycle_notification_specifications"
        elif key == "templateDeploymentOptions":
            suggest = "template_deployment_options"
        elif key == "tokenAuthConfiguration":
            suggest = "token_auth_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderRegistrationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderRegistrationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderRegistrationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 capabilities: Optional[Sequence['outputs.ResourceProviderCapabilitiesResponse']] = None,
                 cross_tenant_token_validation: Optional[builtins.str] = None,
                 custom_manifest_version: Optional[builtins.str] = None,
                 dsts_configuration: Optional['outputs.ResourceProviderManifestPropertiesResponseDstsConfiguration'] = None,
                 enable_tenant_linked_notification: Optional[builtins.bool] = None,
                 features_rule: Optional['outputs.ResourceProviderManifestPropertiesResponseFeaturesRule'] = None,
                 global_notification_endpoints: Optional[Sequence['outputs.ResourceProviderEndpointResponse']] = None,
                 legacy_namespace: Optional[builtins.str] = None,
                 legacy_registrations: Optional[Sequence[builtins.str]] = None,
                 linked_notification_rules: Optional[Sequence['outputs.FanoutLinkedNotificationRuleResponse']] = None,
                 management: Optional['outputs.ResourceProviderManifestPropertiesResponseManagement'] = None,
                 management_group_global_notification_endpoints: Optional[Sequence['outputs.ResourceProviderEndpointResponse']] = None,
                 metadata: Optional[Any] = None,
                 namespace: Optional[builtins.str] = None,
                 notification_options: Optional[builtins.str] = None,
                 notification_settings: Optional['outputs.ResourceProviderManifestPropertiesResponseNotificationSettings'] = None,
                 notifications: Optional[Sequence['outputs.NotificationResponse']] = None,
                 optional_features: Optional[Sequence[builtins.str]] = None,
                 private_resource_provider_configuration: Optional['outputs.ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration'] = None,
                 provider_authentication: Optional['outputs.ResourceProviderManifestPropertiesResponseProviderAuthentication'] = None,
                 provider_authorizations: Optional[Sequence['outputs.ResourceProviderAuthorizationResponse']] = None,
                 provider_hub_metadata: Optional['outputs.ProviderRegistrationPropertiesResponseProviderHubMetadata'] = None,
                 provider_type: Optional[builtins.str] = None,
                 provider_version: Optional[builtins.str] = None,
                 request_header_options: Optional['outputs.ResourceProviderManifestPropertiesResponseRequestHeaderOptions'] = None,
                 required_features: Optional[Sequence[builtins.str]] = None,
                 resource_group_lock_option_during_move: Optional['outputs.ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove'] = None,
                 resource_hydration_accounts: Optional[Sequence['outputs.ResourceHydrationAccountResponse']] = None,
                 resource_provider_authorization_rules: Optional['outputs.ResourceProviderAuthorizationRulesResponse'] = None,
                 response_options: Optional['outputs.ResourceProviderManifestPropertiesResponseResponseOptions'] = None,
                 service_name: Optional[builtins.str] = None,
                 services: Optional[Sequence['outputs.ResourceProviderServiceResponse']] = None,
                 subscription_lifecycle_notification_specifications: Optional['outputs.ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications'] = None,
                 template_deployment_options: Optional['outputs.ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions'] = None,
                 token_auth_configuration: Optional['outputs.TokenAuthConfigurationResponse'] = None):
        """
        :param builtins.str provisioning_state: The provisioning state.
        :param Sequence['ResourceProviderCapabilitiesResponse'] capabilities: The capabilities.
        :param builtins.str cross_tenant_token_validation: The cross tenant token validation.
        :param builtins.str custom_manifest_version: Custom manifest version.
        :param 'ResourceProviderManifestPropertiesResponseDstsConfiguration' dsts_configuration: The dsts configuration.
        :param builtins.bool enable_tenant_linked_notification: The enable tenant linked notification.
        :param 'ResourceProviderManifestPropertiesResponseFeaturesRule' features_rule: The features rule.
        :param Sequence['ResourceProviderEndpointResponse'] global_notification_endpoints: The global notification endpoints.
        :param builtins.str legacy_namespace: Legacy namespace.
        :param Sequence[builtins.str] legacy_registrations: Legacy registrations.
        :param Sequence['FanoutLinkedNotificationRuleResponse'] linked_notification_rules: The linked notification rules.
        :param 'ResourceProviderManifestPropertiesResponseManagement' management: The resource provider management.
        :param Sequence['ResourceProviderEndpointResponse'] management_group_global_notification_endpoints: Management groups global notification endpoints.
        :param Any metadata: The metadata.
        :param builtins.str namespace: The namespace.
        :param builtins.str notification_options: Notification options.
        :param 'ResourceProviderManifestPropertiesResponseNotificationSettings' notification_settings: Notification settings.
        :param Sequence['NotificationResponse'] notifications: The notifications.
        :param Sequence[builtins.str] optional_features: Optional features.
        :param 'ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration' private_resource_provider_configuration: The private resource provider configuration.
        :param 'ResourceProviderManifestPropertiesResponseProviderAuthentication' provider_authentication: The provider authentication.
        :param Sequence['ResourceProviderAuthorizationResponse'] provider_authorizations: The provider authorizations.
        :param 'ProviderRegistrationPropertiesResponseProviderHubMetadata' provider_hub_metadata: The provider hub metadata.
        :param builtins.str provider_type: The provider type.
        :param builtins.str provider_version: The provider version.
        :param 'ResourceProviderManifestPropertiesResponseRequestHeaderOptions' request_header_options: The request header options.
        :param Sequence[builtins.str] required_features: The required features.
        :param 'ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove' resource_group_lock_option_during_move: Resource group lock option during move.
        :param Sequence['ResourceHydrationAccountResponse'] resource_hydration_accounts: resource hydration accounts
        :param 'ResourceProviderAuthorizationRulesResponse' resource_provider_authorization_rules: The resource provider authorization rules.
        :param 'ResourceProviderManifestPropertiesResponseResponseOptions' response_options: Response options.
        :param builtins.str service_name: The service name.
        :param Sequence['ResourceProviderServiceResponse'] services: The services.
        :param 'ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications' subscription_lifecycle_notification_specifications: The subscription lifecycle notification specifications.
        :param 'ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions' template_deployment_options: The template deployment options.
        :param 'TokenAuthConfigurationResponse' token_auth_configuration: The token auth configuration.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if cross_tenant_token_validation is not None:
            pulumi.set(__self__, "cross_tenant_token_validation", cross_tenant_token_validation)
        if custom_manifest_version is not None:
            pulumi.set(__self__, "custom_manifest_version", custom_manifest_version)
        if dsts_configuration is not None:
            pulumi.set(__self__, "dsts_configuration", dsts_configuration)
        if enable_tenant_linked_notification is not None:
            pulumi.set(__self__, "enable_tenant_linked_notification", enable_tenant_linked_notification)
        if features_rule is not None:
            pulumi.set(__self__, "features_rule", features_rule)
        if global_notification_endpoints is not None:
            pulumi.set(__self__, "global_notification_endpoints", global_notification_endpoints)
        if legacy_namespace is not None:
            pulumi.set(__self__, "legacy_namespace", legacy_namespace)
        if legacy_registrations is not None:
            pulumi.set(__self__, "legacy_registrations", legacy_registrations)
        if linked_notification_rules is not None:
            pulumi.set(__self__, "linked_notification_rules", linked_notification_rules)
        if management is not None:
            pulumi.set(__self__, "management", management)
        if management_group_global_notification_endpoints is not None:
            pulumi.set(__self__, "management_group_global_notification_endpoints", management_group_global_notification_endpoints)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notification_options is not None:
            pulumi.set(__self__, "notification_options", notification_options)
        if notification_settings is not None:
            pulumi.set(__self__, "notification_settings", notification_settings)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if optional_features is not None:
            pulumi.set(__self__, "optional_features", optional_features)
        if private_resource_provider_configuration is not None:
            pulumi.set(__self__, "private_resource_provider_configuration", private_resource_provider_configuration)
        if provider_authentication is not None:
            pulumi.set(__self__, "provider_authentication", provider_authentication)
        if provider_authorizations is not None:
            pulumi.set(__self__, "provider_authorizations", provider_authorizations)
        if provider_hub_metadata is not None:
            pulumi.set(__self__, "provider_hub_metadata", provider_hub_metadata)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if provider_version is not None:
            pulumi.set(__self__, "provider_version", provider_version)
        if request_header_options is not None:
            pulumi.set(__self__, "request_header_options", request_header_options)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)
        if resource_group_lock_option_during_move is not None:
            pulumi.set(__self__, "resource_group_lock_option_during_move", resource_group_lock_option_during_move)
        if resource_hydration_accounts is not None:
            pulumi.set(__self__, "resource_hydration_accounts", resource_hydration_accounts)
        if resource_provider_authorization_rules is not None:
            pulumi.set(__self__, "resource_provider_authorization_rules", resource_provider_authorization_rules)
        if response_options is not None:
            pulumi.set(__self__, "response_options", response_options)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if subscription_lifecycle_notification_specifications is not None:
            pulumi.set(__self__, "subscription_lifecycle_notification_specifications", subscription_lifecycle_notification_specifications)
        if template_deployment_options is not None:
            pulumi.set(__self__, "template_deployment_options", template_deployment_options)
        if token_auth_configuration is not None:
            pulumi.set(__self__, "token_auth_configuration", token_auth_configuration)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence['outputs.ResourceProviderCapabilitiesResponse']]:
        """
        The capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="crossTenantTokenValidation")
    def cross_tenant_token_validation(self) -> Optional[builtins.str]:
        """
        The cross tenant token validation.
        """
        return pulumi.get(self, "cross_tenant_token_validation")

    @property
    @pulumi.getter(name="customManifestVersion")
    def custom_manifest_version(self) -> Optional[builtins.str]:
        """
        Custom manifest version.
        """
        return pulumi.get(self, "custom_manifest_version")

    @property
    @pulumi.getter(name="dstsConfiguration")
    def dsts_configuration(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseDstsConfiguration']:
        """
        The dsts configuration.
        """
        return pulumi.get(self, "dsts_configuration")

    @property
    @pulumi.getter(name="enableTenantLinkedNotification")
    def enable_tenant_linked_notification(self) -> Optional[builtins.bool]:
        """
        The enable tenant linked notification.
        """
        return pulumi.get(self, "enable_tenant_linked_notification")

    @property
    @pulumi.getter(name="featuresRule")
    def features_rule(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseFeaturesRule']:
        """
        The features rule.
        """
        return pulumi.get(self, "features_rule")

    @property
    @pulumi.getter(name="globalNotificationEndpoints")
    def global_notification_endpoints(self) -> Optional[Sequence['outputs.ResourceProviderEndpointResponse']]:
        """
        The global notification endpoints.
        """
        return pulumi.get(self, "global_notification_endpoints")

    @property
    @pulumi.getter(name="legacyNamespace")
    def legacy_namespace(self) -> Optional[builtins.str]:
        """
        Legacy namespace.
        """
        return pulumi.get(self, "legacy_namespace")

    @property
    @pulumi.getter(name="legacyRegistrations")
    def legacy_registrations(self) -> Optional[Sequence[builtins.str]]:
        """
        Legacy registrations.
        """
        return pulumi.get(self, "legacy_registrations")

    @property
    @pulumi.getter(name="linkedNotificationRules")
    def linked_notification_rules(self) -> Optional[Sequence['outputs.FanoutLinkedNotificationRuleResponse']]:
        """
        The linked notification rules.
        """
        return pulumi.get(self, "linked_notification_rules")

    @property
    @pulumi.getter
    def management(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseManagement']:
        """
        The resource provider management.
        """
        return pulumi.get(self, "management")

    @property
    @pulumi.getter(name="managementGroupGlobalNotificationEndpoints")
    def management_group_global_notification_endpoints(self) -> Optional[Sequence['outputs.ResourceProviderEndpointResponse']]:
        """
        Management groups global notification endpoints.
        """
        return pulumi.get(self, "management_group_global_notification_endpoints")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        """
        The metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="notificationOptions")
    def notification_options(self) -> Optional[builtins.str]:
        """
        Notification options.
        """
        return pulumi.get(self, "notification_options")

    @property
    @pulumi.getter(name="notificationSettings")
    def notification_settings(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseNotificationSettings']:
        """
        Notification settings.
        """
        return pulumi.get(self, "notification_settings")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence['outputs.NotificationResponse']]:
        """
        The notifications.
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="optionalFeatures")
    def optional_features(self) -> Optional[Sequence[builtins.str]]:
        """
        Optional features.
        """
        return pulumi.get(self, "optional_features")

    @property
    @pulumi.getter(name="privateResourceProviderConfiguration")
    def private_resource_provider_configuration(self) -> Optional['outputs.ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration']:
        """
        The private resource provider configuration.
        """
        return pulumi.get(self, "private_resource_provider_configuration")

    @property
    @pulumi.getter(name="providerAuthentication")
    def provider_authentication(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseProviderAuthentication']:
        """
        The provider authentication.
        """
        return pulumi.get(self, "provider_authentication")

    @property
    @pulumi.getter(name="providerAuthorizations")
    def provider_authorizations(self) -> Optional[Sequence['outputs.ResourceProviderAuthorizationResponse']]:
        """
        The provider authorizations.
        """
        return pulumi.get(self, "provider_authorizations")

    @property
    @pulumi.getter(name="providerHubMetadata")
    def provider_hub_metadata(self) -> Optional['outputs.ProviderRegistrationPropertiesResponseProviderHubMetadata']:
        """
        The provider hub metadata.
        """
        return pulumi.get(self, "provider_hub_metadata")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[builtins.str]:
        """
        The provider type.
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter(name="providerVersion")
    def provider_version(self) -> Optional[builtins.str]:
        """
        The provider version.
        """
        return pulumi.get(self, "provider_version")

    @property
    @pulumi.getter(name="requestHeaderOptions")
    def request_header_options(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseRequestHeaderOptions']:
        """
        The request header options.
        """
        return pulumi.get(self, "request_header_options")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")

    @property
    @pulumi.getter(name="resourceGroupLockOptionDuringMove")
    def resource_group_lock_option_during_move(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove']:
        """
        Resource group lock option during move.
        """
        return pulumi.get(self, "resource_group_lock_option_during_move")

    @property
    @pulumi.getter(name="resourceHydrationAccounts")
    def resource_hydration_accounts(self) -> Optional[Sequence['outputs.ResourceHydrationAccountResponse']]:
        """
        resource hydration accounts
        """
        return pulumi.get(self, "resource_hydration_accounts")

    @property
    @pulumi.getter(name="resourceProviderAuthorizationRules")
    def resource_provider_authorization_rules(self) -> Optional['outputs.ResourceProviderAuthorizationRulesResponse']:
        """
        The resource provider authorization rules.
        """
        return pulumi.get(self, "resource_provider_authorization_rules")

    @property
    @pulumi.getter(name="responseOptions")
    def response_options(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseResponseOptions']:
        """
        Response options.
        """
        return pulumi.get(self, "response_options")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[builtins.str]:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.ResourceProviderServiceResponse']]:
        """
        The services.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="subscriptionLifecycleNotificationSpecifications")
    def subscription_lifecycle_notification_specifications(self) -> Optional['outputs.ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications']:
        """
        The subscription lifecycle notification specifications.
        """
        return pulumi.get(self, "subscription_lifecycle_notification_specifications")

    @property
    @pulumi.getter(name="templateDeploymentOptions")
    def template_deployment_options(self) -> Optional['outputs.ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions']:
        """
        The template deployment options.
        """
        return pulumi.get(self, "template_deployment_options")

    @property
    @pulumi.getter(name="tokenAuthConfiguration")
    def token_auth_configuration(self) -> Optional['outputs.TokenAuthConfigurationResponse']:
        """
        The token auth configuration.
        """
        return pulumi.get(self, "token_auth_configuration")


@pulumi.output_type
class ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration(dict):
    """
    The private resource provider configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedSubscriptions":
            suggest = "allowed_subscriptions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_subscriptions: Optional[Sequence[builtins.str]] = None):
        """
        The private resource provider configuration.
        :param Sequence[builtins.str] allowed_subscriptions: The allowed subscriptions.
        """
        if allowed_subscriptions is not None:
            pulumi.set(__self__, "allowed_subscriptions", allowed_subscriptions)

    @property
    @pulumi.getter(name="allowedSubscriptions")
    def allowed_subscriptions(self) -> Optional[Sequence[builtins.str]]:
        """
        The allowed subscriptions.
        """
        return pulumi.get(self, "allowed_subscriptions")


@pulumi.output_type
class ProviderRegistrationPropertiesResponseProviderHubMetadata(dict):
    """
    The provider hub metadata.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directRpRoleDefinitionId":
            suggest = "direct_rp_role_definition_id"
        elif key == "globalAsyncOperationResourceTypeName":
            suggest = "global_async_operation_resource_type_name"
        elif key == "providerAuthentication":
            suggest = "provider_authentication"
        elif key == "providerAuthorizations":
            suggest = "provider_authorizations"
        elif key == "regionalAsyncOperationResourceTypeName":
            suggest = "regional_async_operation_resource_type_name"
        elif key == "thirdPartyProviderAuthorization":
            suggest = "third_party_provider_authorization"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderRegistrationPropertiesResponseProviderHubMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderRegistrationPropertiesResponseProviderHubMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderRegistrationPropertiesResponseProviderHubMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direct_rp_role_definition_id: Optional[builtins.str] = None,
                 global_async_operation_resource_type_name: Optional[builtins.str] = None,
                 provider_authentication: Optional['outputs.ProviderHubMetadataResponseProviderAuthentication'] = None,
                 provider_authorizations: Optional[Sequence['outputs.ResourceProviderAuthorizationResponse']] = None,
                 regional_async_operation_resource_type_name: Optional[builtins.str] = None,
                 third_party_provider_authorization: Optional['outputs.ProviderHubMetadataResponseThirdPartyProviderAuthorization'] = None):
        """
        The provider hub metadata.
        :param builtins.str direct_rp_role_definition_id: The direct RP role definition id.
        :param builtins.str global_async_operation_resource_type_name: The global async operation resource type name.
        :param 'ProviderHubMetadataResponseProviderAuthentication' provider_authentication: The provider authentication.
        :param Sequence['ResourceProviderAuthorizationResponse'] provider_authorizations: The provider authorizations.
        :param builtins.str regional_async_operation_resource_type_name: The regional async operation resource type name.
        :param 'ProviderHubMetadataResponseThirdPartyProviderAuthorization' third_party_provider_authorization: The third party provider authorization.
        """
        if direct_rp_role_definition_id is not None:
            pulumi.set(__self__, "direct_rp_role_definition_id", direct_rp_role_definition_id)
        if global_async_operation_resource_type_name is not None:
            pulumi.set(__self__, "global_async_operation_resource_type_name", global_async_operation_resource_type_name)
        if provider_authentication is not None:
            pulumi.set(__self__, "provider_authentication", provider_authentication)
        if provider_authorizations is not None:
            pulumi.set(__self__, "provider_authorizations", provider_authorizations)
        if regional_async_operation_resource_type_name is not None:
            pulumi.set(__self__, "regional_async_operation_resource_type_name", regional_async_operation_resource_type_name)
        if third_party_provider_authorization is not None:
            pulumi.set(__self__, "third_party_provider_authorization", third_party_provider_authorization)

    @property
    @pulumi.getter(name="directRpRoleDefinitionId")
    def direct_rp_role_definition_id(self) -> Optional[builtins.str]:
        """
        The direct RP role definition id.
        """
        return pulumi.get(self, "direct_rp_role_definition_id")

    @property
    @pulumi.getter(name="globalAsyncOperationResourceTypeName")
    def global_async_operation_resource_type_name(self) -> Optional[builtins.str]:
        """
        The global async operation resource type name.
        """
        return pulumi.get(self, "global_async_operation_resource_type_name")

    @property
    @pulumi.getter(name="providerAuthentication")
    def provider_authentication(self) -> Optional['outputs.ProviderHubMetadataResponseProviderAuthentication']:
        """
        The provider authentication.
        """
        return pulumi.get(self, "provider_authentication")

    @property
    @pulumi.getter(name="providerAuthorizations")
    def provider_authorizations(self) -> Optional[Sequence['outputs.ResourceProviderAuthorizationResponse']]:
        """
        The provider authorizations.
        """
        return pulumi.get(self, "provider_authorizations")

    @property
    @pulumi.getter(name="regionalAsyncOperationResourceTypeName")
    def regional_async_operation_resource_type_name(self) -> Optional[builtins.str]:
        """
        The regional async operation resource type name.
        """
        return pulumi.get(self, "regional_async_operation_resource_type_name")

    @property
    @pulumi.getter(name="thirdPartyProviderAuthorization")
    def third_party_provider_authorization(self) -> Optional['outputs.ProviderHubMetadataResponseThirdPartyProviderAuthorization']:
        """
        The third party provider authorization.
        """
        return pulumi.get(self, "third_party_provider_authorization")


@pulumi.output_type
class ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications(dict):
    """
    The subscription lifecycle notification specifications.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "softDeleteTTL":
            suggest = "soft_delete_ttl"
        elif key == "subscriptionStateOverrideActions":
            suggest = "subscription_state_override_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 soft_delete_ttl: Optional[builtins.str] = None,
                 subscription_state_override_actions: Optional[Sequence['outputs.SubscriptionStateOverrideActionResponse']] = None):
        """
        The subscription lifecycle notification specifications.
        :param builtins.str soft_delete_ttl: The soft delete TTL.
        :param Sequence['SubscriptionStateOverrideActionResponse'] subscription_state_override_actions: The subscription state override actions.
        """
        if soft_delete_ttl is not None:
            pulumi.set(__self__, "soft_delete_ttl", soft_delete_ttl)
        if subscription_state_override_actions is not None:
            pulumi.set(__self__, "subscription_state_override_actions", subscription_state_override_actions)

    @property
    @pulumi.getter(name="softDeleteTTL")
    def soft_delete_ttl(self) -> Optional[builtins.str]:
        """
        The soft delete TTL.
        """
        return pulumi.get(self, "soft_delete_ttl")

    @property
    @pulumi.getter(name="subscriptionStateOverrideActions")
    def subscription_state_override_actions(self) -> Optional[Sequence['outputs.SubscriptionStateOverrideActionResponse']]:
        """
        The subscription state override actions.
        """
        return pulumi.get(self, "subscription_state_override_actions")


@pulumi.output_type
class QuotaRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationRules":
            suggest = "location_rules"
        elif key == "quotaPolicy":
            suggest = "quota_policy"
        elif key == "requiredFeatures":
            suggest = "required_features"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuotaRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuotaRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuotaRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location_rules: Optional[Sequence['outputs.LocationQuotaRuleResponse']] = None,
                 quota_policy: Optional[builtins.str] = None,
                 required_features: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence['LocationQuotaRuleResponse'] location_rules: The location rules.
        :param builtins.str quota_policy: The quota policy.
        :param Sequence[builtins.str] required_features: The required features.
        """
        if location_rules is not None:
            pulumi.set(__self__, "location_rules", location_rules)
        if quota_policy is not None:
            pulumi.set(__self__, "quota_policy", quota_policy)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)

    @property
    @pulumi.getter(name="locationRules")
    def location_rules(self) -> Optional[Sequence['outputs.LocationQuotaRuleResponse']]:
        """
        The location rules.
        """
        return pulumi.get(self, "location_rules")

    @property
    @pulumi.getter(name="quotaPolicy")
    def quota_policy(self) -> Optional[builtins.str]:
        """
        The quota policy.
        """
        return pulumi.get(self, "quota_policy")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")


@pulumi.output_type
class ResourceAccessRoleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedGroupClaims":
            suggest = "allowed_group_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceAccessRoleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceAccessRoleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceAccessRoleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence[builtins.str]] = None,
                 allowed_group_claims: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] actions: The actions.
        :param Sequence[builtins.str] allowed_group_claims: The allowed group claims.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if allowed_group_claims is not None:
            pulumi.set(__self__, "allowed_group_claims", allowed_group_claims)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="allowedGroupClaims")
    def allowed_group_claims(self) -> Optional[Sequence[builtins.str]]:
        """
        The allowed group claims.
        """
        return pulumi.get(self, "allowed_group_claims")


@pulumi.output_type
class ResourceConcurrencyControlOptionResponse(dict):
    def __init__(__self__, *,
                 policy: Optional[builtins.str] = None):
        """
        :param builtins.str policy: The policy.
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def policy(self) -> Optional[builtins.str]:
        """
        The policy.
        """
        return pulumi.get(self, "policy")


@pulumi.output_type
class ResourceHydrationAccountResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "encryptedKey":
            suggest = "encrypted_key"
        elif key == "maxChildResourceConsistencyJobLimit":
            suggest = "max_child_resource_consistency_job_limit"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceHydrationAccountResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceHydrationAccountResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceHydrationAccountResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[builtins.str] = None,
                 encrypted_key: Optional[builtins.str] = None,
                 max_child_resource_consistency_job_limit: Optional[builtins.float] = None,
                 subscription_id: Optional[builtins.str] = None):
        """
        :param builtins.str account_name: The account name.
        :param builtins.str encrypted_key: The encrypted key.
        :param builtins.float max_child_resource_consistency_job_limit: The max child resource consistency job limit.
        :param builtins.str subscription_id: The subscription id.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if encrypted_key is not None:
            pulumi.set(__self__, "encrypted_key", encrypted_key)
        if max_child_resource_consistency_job_limit is not None:
            pulumi.set(__self__, "max_child_resource_consistency_job_limit", max_child_resource_consistency_job_limit)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[builtins.str]:
        """
        The account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="encryptedKey")
    def encrypted_key(self) -> Optional[builtins.str]:
        """
        The encrypted key.
        """
        return pulumi.get(self, "encrypted_key")

    @property
    @pulumi.getter(name="maxChildResourceConsistencyJobLimit")
    def max_child_resource_consistency_job_limit(self) -> Optional[builtins.float]:
        """
        The max child resource consistency job limit.
        """
        return pulumi.get(self, "max_child_resource_consistency_job_limit")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[builtins.str]:
        """
        The subscription id.
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class ResourceProviderAuthorizationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedThirdPartyExtensions":
            suggest = "allowed_third_party_extensions"
        elif key == "applicationId":
            suggest = "application_id"
        elif key == "groupingTag":
            suggest = "grouping_tag"
        elif key == "managedByAuthorization":
            suggest = "managed_by_authorization"
        elif key == "managedByRoleDefinitionId":
            suggest = "managed_by_role_definition_id"
        elif key == "roleDefinitionId":
            suggest = "role_definition_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderAuthorizationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderAuthorizationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderAuthorizationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_third_party_extensions: Optional[Sequence['outputs.ThirdPartyExtensionResponse']] = None,
                 application_id: Optional[builtins.str] = None,
                 grouping_tag: Optional[builtins.str] = None,
                 managed_by_authorization: Optional['outputs.ResourceProviderAuthorizationResponseManagedByAuthorization'] = None,
                 managed_by_role_definition_id: Optional[builtins.str] = None,
                 role_definition_id: Optional[builtins.str] = None):
        """
        :param Sequence['ThirdPartyExtensionResponse'] allowed_third_party_extensions: The allowed third party extensions.
        :param builtins.str application_id: The application id.
        :param builtins.str grouping_tag: The grouping tag.
        :param 'ResourceProviderAuthorizationResponseManagedByAuthorization' managed_by_authorization: Managed by authorization.
        :param builtins.str managed_by_role_definition_id: The managed by role definition id.
        :param builtins.str role_definition_id: The role definition id.
        """
        if allowed_third_party_extensions is not None:
            pulumi.set(__self__, "allowed_third_party_extensions", allowed_third_party_extensions)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if grouping_tag is not None:
            pulumi.set(__self__, "grouping_tag", grouping_tag)
        if managed_by_authorization is not None:
            pulumi.set(__self__, "managed_by_authorization", managed_by_authorization)
        if managed_by_role_definition_id is not None:
            pulumi.set(__self__, "managed_by_role_definition_id", managed_by_role_definition_id)
        if role_definition_id is not None:
            pulumi.set(__self__, "role_definition_id", role_definition_id)

    @property
    @pulumi.getter(name="allowedThirdPartyExtensions")
    def allowed_third_party_extensions(self) -> Optional[Sequence['outputs.ThirdPartyExtensionResponse']]:
        """
        The allowed third party extensions.
        """
        return pulumi.get(self, "allowed_third_party_extensions")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[builtins.str]:
        """
        The application id.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="groupingTag")
    def grouping_tag(self) -> Optional[builtins.str]:
        """
        The grouping tag.
        """
        return pulumi.get(self, "grouping_tag")

    @property
    @pulumi.getter(name="managedByAuthorization")
    def managed_by_authorization(self) -> Optional['outputs.ResourceProviderAuthorizationResponseManagedByAuthorization']:
        """
        Managed by authorization.
        """
        return pulumi.get(self, "managed_by_authorization")

    @property
    @pulumi.getter(name="managedByRoleDefinitionId")
    def managed_by_role_definition_id(self) -> Optional[builtins.str]:
        """
        The managed by role definition id.
        """
        return pulumi.get(self, "managed_by_role_definition_id")

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> Optional[builtins.str]:
        """
        The role definition id.
        """
        return pulumi.get(self, "role_definition_id")


@pulumi.output_type
class ResourceProviderAuthorizationResponseManagedByAuthorization(dict):
    """
    Managed by authorization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalAuthorizations":
            suggest = "additional_authorizations"
        elif key == "allowManagedByInheritance":
            suggest = "allow_managed_by_inheritance"
        elif key == "managedByResourceRoleDefinitionId":
            suggest = "managed_by_resource_role_definition_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderAuthorizationResponseManagedByAuthorization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderAuthorizationResponseManagedByAuthorization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderAuthorizationResponseManagedByAuthorization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_authorizations: Optional[Sequence['outputs.AdditionalAuthorizationResponse']] = None,
                 allow_managed_by_inheritance: Optional[builtins.bool] = None,
                 managed_by_resource_role_definition_id: Optional[builtins.str] = None):
        """
        Managed by authorization.
        :param builtins.bool allow_managed_by_inheritance: Indicates whether the managed by resource role definition ID should be inherited.
        :param builtins.str managed_by_resource_role_definition_id: The managed by resource role definition ID for the application.
        """
        if additional_authorizations is not None:
            pulumi.set(__self__, "additional_authorizations", additional_authorizations)
        if allow_managed_by_inheritance is not None:
            pulumi.set(__self__, "allow_managed_by_inheritance", allow_managed_by_inheritance)
        if managed_by_resource_role_definition_id is not None:
            pulumi.set(__self__, "managed_by_resource_role_definition_id", managed_by_resource_role_definition_id)

    @property
    @pulumi.getter(name="additionalAuthorizations")
    def additional_authorizations(self) -> Optional[Sequence['outputs.AdditionalAuthorizationResponse']]:
        return pulumi.get(self, "additional_authorizations")

    @property
    @pulumi.getter(name="allowManagedByInheritance")
    def allow_managed_by_inheritance(self) -> Optional[builtins.bool]:
        """
        Indicates whether the managed by resource role definition ID should be inherited.
        """
        return pulumi.get(self, "allow_managed_by_inheritance")

    @property
    @pulumi.getter(name="managedByResourceRoleDefinitionId")
    def managed_by_resource_role_definition_id(self) -> Optional[builtins.str]:
        """
        The managed by resource role definition ID for the application.
        """
        return pulumi.get(self, "managed_by_resource_role_definition_id")


@pulumi.output_type
class ResourceProviderAuthorizationRulesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asyncOperationPollingRules":
            suggest = "async_operation_polling_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderAuthorizationRulesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderAuthorizationRulesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderAuthorizationRulesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 async_operation_polling_rules: Optional['outputs.AsyncOperationPollingRulesResponse'] = None):
        """
        :param 'AsyncOperationPollingRulesResponse' async_operation_polling_rules: The async operation polling rules.
        """
        if async_operation_polling_rules is not None:
            pulumi.set(__self__, "async_operation_polling_rules", async_operation_polling_rules)

    @property
    @pulumi.getter(name="asyncOperationPollingRules")
    def async_operation_polling_rules(self) -> Optional['outputs.AsyncOperationPollingRulesResponse']:
        """
        The async operation polling rules.
        """
        return pulumi.get(self, "async_operation_polling_rules")


@pulumi.output_type
class ResourceProviderCapabilitiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quotaId":
            suggest = "quota_id"
        elif key == "requiredFeatures":
            suggest = "required_features"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderCapabilitiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderCapabilitiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderCapabilitiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effect: builtins.str,
                 quota_id: builtins.str,
                 required_features: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str effect: The effect.
        :param builtins.str quota_id: The quota id.
        :param Sequence[builtins.str] required_features: The required features.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "quota_id", quota_id)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        """
        The effect.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> builtins.str:
        """
        The quota id.
        """
        return pulumi.get(self, "quota_id")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")


@pulumi.output_type
class ResourceProviderEndpointResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersions":
            suggest = "api_versions"
        elif key == "endpointType":
            suggest = "endpoint_type"
        elif key == "endpointUri":
            suggest = "endpoint_uri"
        elif key == "featuresRule":
            suggest = "features_rule"
        elif key == "requiredFeatures":
            suggest = "required_features"
        elif key == "skuLink":
            suggest = "sku_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderEndpointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderEndpointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderEndpointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_versions: Optional[Sequence[builtins.str]] = None,
                 enabled: Optional[builtins.bool] = None,
                 endpoint_type: Optional[builtins.str] = None,
                 endpoint_uri: Optional[builtins.str] = None,
                 features_rule: Optional['outputs.ResourceProviderEndpointResponseFeaturesRule'] = None,
                 locations: Optional[Sequence[builtins.str]] = None,
                 required_features: Optional[Sequence[builtins.str]] = None,
                 sku_link: Optional[builtins.str] = None,
                 timeout: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] api_versions: The api versions.
        :param builtins.bool enabled: Whether the endpoint is enabled.
        :param builtins.str endpoint_type: The endpoint type.
        :param builtins.str endpoint_uri: The endpoint uri.
        :param 'ResourceProviderEndpointResponseFeaturesRule' features_rule: The feature rules.
        :param Sequence[builtins.str] locations: The locations.
        :param Sequence[builtins.str] required_features: The required features.
        :param builtins.str sku_link: The sku link.
        :param builtins.str timeout: The timeout.
        """
        if api_versions is not None:
            pulumi.set(__self__, "api_versions", api_versions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if endpoint_uri is not None:
            pulumi.set(__self__, "endpoint_uri", endpoint_uri)
        if features_rule is not None:
            pulumi.set(__self__, "features_rule", features_rule)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)
        if sku_link is not None:
            pulumi.set(__self__, "sku_link", sku_link)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="apiVersions")
    def api_versions(self) -> Optional[Sequence[builtins.str]]:
        """
        The api versions.
        """
        return pulumi.get(self, "api_versions")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Whether the endpoint is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[builtins.str]:
        """
        The endpoint type.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[builtins.str]:
        """
        The endpoint uri.
        """
        return pulumi.get(self, "endpoint_uri")

    @property
    @pulumi.getter(name="featuresRule")
    def features_rule(self) -> Optional['outputs.ResourceProviderEndpointResponseFeaturesRule']:
        """
        The feature rules.
        """
        return pulumi.get(self, "features_rule")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[builtins.str]]:
        """
        The locations.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")

    @property
    @pulumi.getter(name="skuLink")
    def sku_link(self) -> Optional[builtins.str]:
        """
        The sku link.
        """
        return pulumi.get(self, "sku_link")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.str]:
        """
        The timeout.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ResourceProviderEndpointResponseFeaturesRule(dict):
    """
    The feature rules.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiredFeaturesPolicy":
            suggest = "required_features_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderEndpointResponseFeaturesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderEndpointResponseFeaturesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderEndpointResponseFeaturesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 required_features_policy: builtins.str):
        """
        The feature rules.
        :param builtins.str required_features_policy: The required feature policy.
        """
        pulumi.set(__self__, "required_features_policy", required_features_policy)

    @property
    @pulumi.getter(name="requiredFeaturesPolicy")
    def required_features_policy(self) -> builtins.str:
        """
        The required feature policy.
        """
        return pulumi.get(self, "required_features_policy")


@pulumi.output_type
class ResourceProviderManagementResponseErrorResponseMessageOptions(dict):
    """
    Options for error response messages.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverFailureResponseMessageType":
            suggest = "server_failure_response_message_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManagementResponseErrorResponseMessageOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManagementResponseErrorResponseMessageOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManagementResponseErrorResponseMessageOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_failure_response_message_type: Optional[builtins.str] = None):
        """
        Options for error response messages.
        :param builtins.str server_failure_response_message_type: Type of server failure response message.
        """
        if server_failure_response_message_type is not None:
            pulumi.set(__self__, "server_failure_response_message_type", server_failure_response_message_type)

    @property
    @pulumi.getter(name="serverFailureResponseMessageType")
    def server_failure_response_message_type(self) -> Optional[builtins.str]:
        """
        Type of server failure response message.
        """
        return pulumi.get(self, "server_failure_response_message_type")


@pulumi.output_type
class ResourceProviderManagementResponseExpeditedRolloutMetadata(dict):
    """
    Metadata for expedited rollout.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expeditedRolloutIntent":
            suggest = "expedited_rollout_intent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManagementResponseExpeditedRolloutMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManagementResponseExpeditedRolloutMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManagementResponseExpeditedRolloutMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[builtins.bool] = None,
                 expedited_rollout_intent: Optional[builtins.str] = None):
        """
        Metadata for expedited rollout.
        :param builtins.bool enabled: Expedited rollout enabled?
        :param builtins.str expedited_rollout_intent: Expedited rollout intent.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expedited_rollout_intent is not None:
            pulumi.set(__self__, "expedited_rollout_intent", expedited_rollout_intent)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Expedited rollout enabled?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expeditedRolloutIntent")
    def expedited_rollout_intent(self) -> Optional[builtins.str]:
        """
        Expedited rollout intent.
        """
        return pulumi.get(self, "expedited_rollout_intent")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseDstsConfiguration(dict):
    """
    The dsts configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "serviceDnsName":
            suggest = "service_dns_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseDstsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseDstsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseDstsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: builtins.str,
                 service_dns_name: Optional[builtins.str] = None):
        """
        The dsts configuration.
        :param builtins.str service_name: The service name.
        :param builtins.str service_dns_name: This is a URI property.
        """
        pulumi.set(__self__, "service_name", service_name)
        if service_dns_name is not None:
            pulumi.set(__self__, "service_dns_name", service_dns_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceDnsName")
    def service_dns_name(self) -> Optional[builtins.str]:
        """
        This is a URI property.
        """
        return pulumi.get(self, "service_dns_name")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseFeaturesRule(dict):
    """
    The features rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiredFeaturesPolicy":
            suggest = "required_features_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseFeaturesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseFeaturesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseFeaturesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 required_features_policy: builtins.str):
        """
        The features rule.
        :param builtins.str required_features_policy: The required feature policy.
        """
        pulumi.set(__self__, "required_features_policy", required_features_policy)

    @property
    @pulumi.getter(name="requiredFeaturesPolicy")
    def required_features_policy(self) -> builtins.str:
        """
        The required feature policy.
        """
        return pulumi.get(self, "required_features_policy")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseManagement(dict):
    """
    The resource provider management.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationOwners":
            suggest = "authorization_owners"
        elif key == "canaryManifestOwners":
            suggest = "canary_manifest_owners"
        elif key == "errorResponseMessageOptions":
            suggest = "error_response_message_options"
        elif key == "expeditedRolloutMetadata":
            suggest = "expedited_rollout_metadata"
        elif key == "expeditedRolloutSubmitters":
            suggest = "expedited_rollout_submitters"
        elif key == "incidentContactEmail":
            suggest = "incident_contact_email"
        elif key == "incidentRoutingService":
            suggest = "incident_routing_service"
        elif key == "incidentRoutingTeam":
            suggest = "incident_routing_team"
        elif key == "manifestOwners":
            suggest = "manifest_owners"
        elif key == "pcCode":
            suggest = "pc_code"
        elif key == "profitCenterProgramId":
            suggest = "profit_center_program_id"
        elif key == "resourceAccessPolicy":
            suggest = "resource_access_policy"
        elif key == "resourceAccessRoles":
            suggest = "resource_access_roles"
        elif key == "schemaOwners":
            suggest = "schema_owners"
        elif key == "serviceTreeInfos":
            suggest = "service_tree_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseManagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseManagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseManagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_owners: Optional[Sequence[builtins.str]] = None,
                 canary_manifest_owners: Optional[Sequence[builtins.str]] = None,
                 error_response_message_options: Optional['outputs.ResourceProviderManagementResponseErrorResponseMessageOptions'] = None,
                 expedited_rollout_metadata: Optional['outputs.ResourceProviderManagementResponseExpeditedRolloutMetadata'] = None,
                 expedited_rollout_submitters: Optional[Sequence[builtins.str]] = None,
                 incident_contact_email: Optional[builtins.str] = None,
                 incident_routing_service: Optional[builtins.str] = None,
                 incident_routing_team: Optional[builtins.str] = None,
                 manifest_owners: Optional[Sequence[builtins.str]] = None,
                 pc_code: Optional[builtins.str] = None,
                 profit_center_program_id: Optional[builtins.str] = None,
                 resource_access_policy: Optional[builtins.str] = None,
                 resource_access_roles: Optional[Sequence['outputs.ResourceAccessRoleResponse']] = None,
                 schema_owners: Optional[Sequence[builtins.str]] = None,
                 service_tree_infos: Optional[Sequence['outputs.ServiceTreeInfoResponse']] = None):
        """
        The resource provider management.
        :param Sequence[builtins.str] authorization_owners: The authorization owners.
        :param Sequence[builtins.str] canary_manifest_owners: List of manifest owners for canary.
        :param 'ResourceProviderManagementResponseErrorResponseMessageOptions' error_response_message_options: Options for error response messages.
        :param 'ResourceProviderManagementResponseExpeditedRolloutMetadata' expedited_rollout_metadata: Metadata for expedited rollout.
        :param Sequence[builtins.str] expedited_rollout_submitters: List of expedited rollout submitters.
        :param builtins.str incident_contact_email: The incident contact email.
        :param builtins.str incident_routing_service: The incident routing service.
        :param builtins.str incident_routing_team: The incident routing team.
        :param Sequence[builtins.str] manifest_owners: The manifest owners.
        :param builtins.str pc_code: The profit center code for the subscription.
        :param builtins.str profit_center_program_id: The profit center program id for the subscription.
        :param builtins.str resource_access_policy: The resource access policy.
        :param Sequence['ResourceAccessRoleResponse'] resource_access_roles: The resource access roles.
        :param Sequence[builtins.str] schema_owners: The schema owners.
        :param Sequence['ServiceTreeInfoResponse'] service_tree_infos: The service tree infos.
        """
        if authorization_owners is not None:
            pulumi.set(__self__, "authorization_owners", authorization_owners)
        if canary_manifest_owners is not None:
            pulumi.set(__self__, "canary_manifest_owners", canary_manifest_owners)
        if error_response_message_options is not None:
            pulumi.set(__self__, "error_response_message_options", error_response_message_options)
        if expedited_rollout_metadata is not None:
            pulumi.set(__self__, "expedited_rollout_metadata", expedited_rollout_metadata)
        if expedited_rollout_submitters is not None:
            pulumi.set(__self__, "expedited_rollout_submitters", expedited_rollout_submitters)
        if incident_contact_email is not None:
            pulumi.set(__self__, "incident_contact_email", incident_contact_email)
        if incident_routing_service is not None:
            pulumi.set(__self__, "incident_routing_service", incident_routing_service)
        if incident_routing_team is not None:
            pulumi.set(__self__, "incident_routing_team", incident_routing_team)
        if manifest_owners is not None:
            pulumi.set(__self__, "manifest_owners", manifest_owners)
        if pc_code is not None:
            pulumi.set(__self__, "pc_code", pc_code)
        if profit_center_program_id is not None:
            pulumi.set(__self__, "profit_center_program_id", profit_center_program_id)
        if resource_access_policy is not None:
            pulumi.set(__self__, "resource_access_policy", resource_access_policy)
        if resource_access_roles is not None:
            pulumi.set(__self__, "resource_access_roles", resource_access_roles)
        if schema_owners is not None:
            pulumi.set(__self__, "schema_owners", schema_owners)
        if service_tree_infos is not None:
            pulumi.set(__self__, "service_tree_infos", service_tree_infos)

    @property
    @pulumi.getter(name="authorizationOwners")
    def authorization_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        The authorization owners.
        """
        return pulumi.get(self, "authorization_owners")

    @property
    @pulumi.getter(name="canaryManifestOwners")
    def canary_manifest_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        List of manifest owners for canary.
        """
        return pulumi.get(self, "canary_manifest_owners")

    @property
    @pulumi.getter(name="errorResponseMessageOptions")
    def error_response_message_options(self) -> Optional['outputs.ResourceProviderManagementResponseErrorResponseMessageOptions']:
        """
        Options for error response messages.
        """
        return pulumi.get(self, "error_response_message_options")

    @property
    @pulumi.getter(name="expeditedRolloutMetadata")
    def expedited_rollout_metadata(self) -> Optional['outputs.ResourceProviderManagementResponseExpeditedRolloutMetadata']:
        """
        Metadata for expedited rollout.
        """
        return pulumi.get(self, "expedited_rollout_metadata")

    @property
    @pulumi.getter(name="expeditedRolloutSubmitters")
    def expedited_rollout_submitters(self) -> Optional[Sequence[builtins.str]]:
        """
        List of expedited rollout submitters.
        """
        return pulumi.get(self, "expedited_rollout_submitters")

    @property
    @pulumi.getter(name="incidentContactEmail")
    def incident_contact_email(self) -> Optional[builtins.str]:
        """
        The incident contact email.
        """
        return pulumi.get(self, "incident_contact_email")

    @property
    @pulumi.getter(name="incidentRoutingService")
    def incident_routing_service(self) -> Optional[builtins.str]:
        """
        The incident routing service.
        """
        return pulumi.get(self, "incident_routing_service")

    @property
    @pulumi.getter(name="incidentRoutingTeam")
    def incident_routing_team(self) -> Optional[builtins.str]:
        """
        The incident routing team.
        """
        return pulumi.get(self, "incident_routing_team")

    @property
    @pulumi.getter(name="manifestOwners")
    def manifest_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        The manifest owners.
        """
        return pulumi.get(self, "manifest_owners")

    @property
    @pulumi.getter(name="pcCode")
    def pc_code(self) -> Optional[builtins.str]:
        """
        The profit center code for the subscription.
        """
        return pulumi.get(self, "pc_code")

    @property
    @pulumi.getter(name="profitCenterProgramId")
    def profit_center_program_id(self) -> Optional[builtins.str]:
        """
        The profit center program id for the subscription.
        """
        return pulumi.get(self, "profit_center_program_id")

    @property
    @pulumi.getter(name="resourceAccessPolicy")
    def resource_access_policy(self) -> Optional[builtins.str]:
        """
        The resource access policy.
        """
        return pulumi.get(self, "resource_access_policy")

    @property
    @pulumi.getter(name="resourceAccessRoles")
    def resource_access_roles(self) -> Optional[Sequence['outputs.ResourceAccessRoleResponse']]:
        """
        The resource access roles.
        """
        return pulumi.get(self, "resource_access_roles")

    @property
    @pulumi.getter(name="schemaOwners")
    def schema_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        The schema owners.
        """
        return pulumi.get(self, "schema_owners")

    @property
    @pulumi.getter(name="serviceTreeInfos")
    def service_tree_infos(self) -> Optional[Sequence['outputs.ServiceTreeInfoResponse']]:
        """
        The service tree infos.
        """
        return pulumi.get(self, "service_tree_infos")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseNotificationSettings(dict):
    """
    Notification settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subscriberSettings":
            suggest = "subscriber_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseNotificationSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseNotificationSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseNotificationSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subscriber_settings: Optional[Sequence['outputs.SubscriberSettingResponse']] = None):
        """
        Notification settings.
        """
        if subscriber_settings is not None:
            pulumi.set(__self__, "subscriber_settings", subscriber_settings)

    @property
    @pulumi.getter(name="subscriberSettings")
    def subscriber_settings(self) -> Optional[Sequence['outputs.SubscriberSettingResponse']]:
        return pulumi.get(self, "subscriber_settings")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseProviderAuthentication(dict):
    """
    The provider authentication.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedAudiences":
            suggest = "allowed_audiences"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseProviderAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseProviderAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseProviderAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_audiences: Sequence[builtins.str]):
        """
        The provider authentication.
        :param Sequence[builtins.str] allowed_audiences: The allowed audiences.
        """
        pulumi.set(__self__, "allowed_audiences", allowed_audiences)

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> Sequence[builtins.str]:
        """
        The allowed audiences.
        """
        return pulumi.get(self, "allowed_audiences")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseRequestHeaderOptions(dict):
    """
    The request header options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optInHeaders":
            suggest = "opt_in_headers"
        elif key == "optOutHeaders":
            suggest = "opt_out_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseRequestHeaderOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseRequestHeaderOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseRequestHeaderOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 opt_in_headers: Optional[builtins.str] = None,
                 opt_out_headers: Optional[builtins.str] = None):
        """
        The request header options.
        :param builtins.str opt_in_headers: The opt in headers.
        :param builtins.str opt_out_headers: The opt out headers.
        """
        if opt_in_headers is not None:
            pulumi.set(__self__, "opt_in_headers", opt_in_headers)
        if opt_out_headers is not None:
            pulumi.set(__self__, "opt_out_headers", opt_out_headers)

    @property
    @pulumi.getter(name="optInHeaders")
    def opt_in_headers(self) -> Optional[builtins.str]:
        """
        The opt in headers.
        """
        return pulumi.get(self, "opt_in_headers")

    @property
    @pulumi.getter(name="optOutHeaders")
    def opt_out_headers(self) -> Optional[builtins.str]:
        """
        The opt out headers.
        """
        return pulumi.get(self, "opt_out_headers")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove(dict):
    """
    Resource group lock option during move.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockActionVerb":
            suggest = "block_action_verb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_action_verb: Optional[builtins.str] = None):
        """
        Resource group lock option during move.
        :param builtins.str block_action_verb: The action verb that will be blocked when the resource group is locked during move.
        """
        if block_action_verb is not None:
            pulumi.set(__self__, "block_action_verb", block_action_verb)

    @property
    @pulumi.getter(name="blockActionVerb")
    def block_action_verb(self) -> Optional[builtins.str]:
        """
        The action verb that will be blocked when the resource group is locked during move.
        """
        return pulumi.get(self, "block_action_verb")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseResponseOptions(dict):
    """
    Response options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceClientOptionsType":
            suggest = "service_client_options_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseResponseOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseResponseOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseResponseOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_client_options_type: Optional[builtins.str] = None):
        """
        Response options.
        """
        if service_client_options_type is not None:
            pulumi.set(__self__, "service_client_options_type", service_client_options_type)

    @property
    @pulumi.getter(name="serviceClientOptionsType")
    def service_client_options_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "service_client_options_type")


@pulumi.output_type
class ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions(dict):
    """
    The template deployment options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preflightOptions":
            suggest = "preflight_options"
        elif key == "preflightSupported":
            suggest = "preflight_supported"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preflight_options: Optional[Sequence[builtins.str]] = None,
                 preflight_supported: Optional[builtins.bool] = None):
        """
        The template deployment options.
        :param Sequence[builtins.str] preflight_options: The preflight options.
        :param builtins.bool preflight_supported: Whether preflight is supported.
        """
        if preflight_options is not None:
            pulumi.set(__self__, "preflight_options", preflight_options)
        if preflight_supported is not None:
            pulumi.set(__self__, "preflight_supported", preflight_supported)

    @property
    @pulumi.getter(name="preflightOptions")
    def preflight_options(self) -> Optional[Sequence[builtins.str]]:
        """
        The preflight options.
        """
        return pulumi.get(self, "preflight_options")

    @property
    @pulumi.getter(name="preflightSupported")
    def preflight_supported(self) -> Optional[builtins.bool]:
        """
        Whether preflight is supported.
        """
        return pulumi.get(self, "preflight_supported")


@pulumi.output_type
class ResourceProviderServiceResponse(dict):
    """
    Resource provider service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderServiceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderServiceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderServiceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        """
        Resource provider service.
        :param builtins.str service_name: The service name.
        :param builtins.str status: The status.
        """
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[builtins.str]:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ResourceTypeEndpointResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "apiVersions":
            suggest = "api_versions"
        elif key == "dataBoundary":
            suggest = "data_boundary"
        elif key == "dstsConfiguration":
            suggest = "dsts_configuration"
        elif key == "endpointType":
            suggest = "endpoint_type"
        elif key == "endpointUri":
            suggest = "endpoint_uri"
        elif key == "featuresRule":
            suggest = "features_rule"
        elif key == "requiredFeatures":
            suggest = "required_features"
        elif key == "skuLink":
            suggest = "sku_link"
        elif key == "tokenAuthConfiguration":
            suggest = "token_auth_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeEndpointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeEndpointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeEndpointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[builtins.str] = None,
                 api_versions: Optional[Sequence[builtins.str]] = None,
                 data_boundary: Optional[builtins.str] = None,
                 dsts_configuration: Optional['outputs.ResourceTypeEndpointResponseDstsConfiguration'] = None,
                 enabled: Optional[builtins.bool] = None,
                 endpoint_type: Optional[builtins.str] = None,
                 endpoint_uri: Optional[builtins.str] = None,
                 extensions: Optional[Sequence['outputs.ResourceTypeExtensionResponse']] = None,
                 features_rule: Optional['outputs.ResourceTypeEndpointResponseFeaturesRule'] = None,
                 kind: Optional[builtins.str] = None,
                 locations: Optional[Sequence[builtins.str]] = None,
                 required_features: Optional[Sequence[builtins.str]] = None,
                 sku_link: Optional[builtins.str] = None,
                 timeout: Optional[builtins.str] = None,
                 token_auth_configuration: Optional['outputs.TokenAuthConfigurationResponse'] = None,
                 zones: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str api_version: Api version.
        :param Sequence[builtins.str] api_versions: The api versions.
        :param builtins.str data_boundary: The data boundary.
        :param 'ResourceTypeEndpointResponseDstsConfiguration' dsts_configuration: The dsts configuration.
        :param builtins.bool enabled: Whether the endpoint is enabled.
        :param builtins.str endpoint_type: The endpoint type.
        :param builtins.str endpoint_uri: The endpoint uri.
        :param Sequence['ResourceTypeExtensionResponse'] extensions: The extensions.
        :param 'ResourceTypeEndpointResponseFeaturesRule' features_rule: The features rule.
        :param builtins.str kind: Resource type endpoint kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        :param Sequence[builtins.str] locations: The locations.
        :param Sequence[builtins.str] required_features: The required features.
        :param builtins.str sku_link: The sku link.
        :param builtins.str timeout: The timeout.
        :param 'TokenAuthConfigurationResponse' token_auth_configuration: The token auth configuration.
        :param Sequence[builtins.str] zones: List of zones.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if api_versions is not None:
            pulumi.set(__self__, "api_versions", api_versions)
        if data_boundary is not None:
            pulumi.set(__self__, "data_boundary", data_boundary)
        if dsts_configuration is not None:
            pulumi.set(__self__, "dsts_configuration", dsts_configuration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if endpoint_uri is not None:
            pulumi.set(__self__, "endpoint_uri", endpoint_uri)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if features_rule is not None:
            pulumi.set(__self__, "features_rule", features_rule)
        if kind is None:
            kind = 'Managed'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)
        if sku_link is not None:
            pulumi.set(__self__, "sku_link", sku_link)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if token_auth_configuration is not None:
            pulumi.set(__self__, "token_auth_configuration", token_auth_configuration)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[builtins.str]:
        """
        Api version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="apiVersions")
    def api_versions(self) -> Optional[Sequence[builtins.str]]:
        """
        The api versions.
        """
        return pulumi.get(self, "api_versions")

    @property
    @pulumi.getter(name="dataBoundary")
    def data_boundary(self) -> Optional[builtins.str]:
        """
        The data boundary.
        """
        return pulumi.get(self, "data_boundary")

    @property
    @pulumi.getter(name="dstsConfiguration")
    def dsts_configuration(self) -> Optional['outputs.ResourceTypeEndpointResponseDstsConfiguration']:
        """
        The dsts configuration.
        """
        return pulumi.get(self, "dsts_configuration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Whether the endpoint is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[builtins.str]:
        """
        The endpoint type.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[builtins.str]:
        """
        The endpoint uri.
        """
        return pulumi.get(self, "endpoint_uri")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.ResourceTypeExtensionResponse']]:
        """
        The extensions.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="featuresRule")
    def features_rule(self) -> Optional['outputs.ResourceTypeEndpointResponseFeaturesRule']:
        """
        The features rule.
        """
        return pulumi.get(self, "features_rule")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Resource type endpoint kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[builtins.str]]:
        """
        The locations.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")

    @property
    @pulumi.getter(name="skuLink")
    def sku_link(self) -> Optional[builtins.str]:
        """
        The sku link.
        """
        return pulumi.get(self, "sku_link")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.str]:
        """
        The timeout.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="tokenAuthConfiguration")
    def token_auth_configuration(self) -> Optional['outputs.TokenAuthConfigurationResponse']:
        """
        The token auth configuration.
        """
        return pulumi.get(self, "token_auth_configuration")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[builtins.str]]:
        """
        List of zones.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class ResourceTypeEndpointResponseDstsConfiguration(dict):
    """
    The dsts configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "serviceDnsName":
            suggest = "service_dns_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeEndpointResponseDstsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeEndpointResponseDstsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeEndpointResponseDstsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: builtins.str,
                 service_dns_name: Optional[builtins.str] = None):
        """
        The dsts configuration.
        :param builtins.str service_name: The service name.
        :param builtins.str service_dns_name: This is a URI property.
        """
        pulumi.set(__self__, "service_name", service_name)
        if service_dns_name is not None:
            pulumi.set(__self__, "service_dns_name", service_dns_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceDnsName")
    def service_dns_name(self) -> Optional[builtins.str]:
        """
        This is a URI property.
        """
        return pulumi.get(self, "service_dns_name")


@pulumi.output_type
class ResourceTypeEndpointResponseFeaturesRule(dict):
    """
    The features rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiredFeaturesPolicy":
            suggest = "required_features_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeEndpointResponseFeaturesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeEndpointResponseFeaturesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeEndpointResponseFeaturesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 required_features_policy: builtins.str):
        """
        The features rule.
        :param builtins.str required_features_policy: The required feature policy.
        """
        pulumi.set(__self__, "required_features_policy", required_features_policy)

    @property
    @pulumi.getter(name="requiredFeaturesPolicy")
    def required_features_policy(self) -> builtins.str:
        """
        The required feature policy.
        """
        return pulumi.get(self, "required_features_policy")


@pulumi.output_type
class ResourceTypeExtensionOptionsResponseResourceCreationBegin(dict):
    """
    Resource creation begin.
    """
    def __init__(__self__, *,
                 request: Optional[Sequence[builtins.str]] = None,
                 response: Optional[Sequence[builtins.str]] = None):
        """
        Resource creation begin.
        :param Sequence[builtins.str] request: The request.
        :param Sequence[builtins.str] response: The response.
        """
        if request is not None:
            pulumi.set(__self__, "request", request)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def request(self) -> Optional[Sequence[builtins.str]]:
        """
        The request.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def response(self) -> Optional[Sequence[builtins.str]]:
        """
        The response.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class ResourceTypeExtensionResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointUri":
            suggest = "endpoint_uri"
        elif key == "extensionCategories":
            suggest = "extension_categories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeExtensionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeExtensionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeExtensionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_uri: Optional[builtins.str] = None,
                 extension_categories: Optional[Sequence[builtins.str]] = None,
                 timeout: Optional[builtins.str] = None):
        """
        :param builtins.str endpoint_uri: The endpoint uri.
        :param Sequence[builtins.str] extension_categories: The extension categories.
        :param builtins.str timeout: The timeout.
        """
        if endpoint_uri is not None:
            pulumi.set(__self__, "endpoint_uri", endpoint_uri)
        if extension_categories is not None:
            pulumi.set(__self__, "extension_categories", extension_categories)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[builtins.str]:
        """
        The endpoint uri.
        """
        return pulumi.get(self, "endpoint_uri")

    @property
    @pulumi.getter(name="extensionCategories")
    def extension_categories(self) -> Optional[Sequence[builtins.str]]:
        """
        The extension categories.
        """
        return pulumi.get(self, "extension_categories")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.str]:
        """
        The timeout.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ResourceTypeOnBehalfOfTokenResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "lifeTime":
            suggest = "life_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeOnBehalfOfTokenResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeOnBehalfOfTokenResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeOnBehalfOfTokenResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: Optional[builtins.str] = None,
                 life_time: Optional[builtins.str] = None):
        """
        :param builtins.str action_name: The action name.
        :param builtins.str life_time: This is a TimeSpan property.
        """
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if life_time is not None:
            pulumi.set(__self__, "life_time", life_time)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[builtins.str]:
        """
        The action name.
        """
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="lifeTime")
    def life_time(self) -> Optional[builtins.str]:
        """
        This is a TimeSpan property.
        """
        return pulumi.get(self, "life_time")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "addResourceListTargetLocations":
            suggest = "add_resource_list_target_locations"
        elif key == "additionalOptions":
            suggest = "additional_options"
        elif key == "allowEmptyRoleAssignments":
            suggest = "allow_empty_role_assignments"
        elif key == "allowedResourceNames":
            suggest = "allowed_resource_names"
        elif key == "allowedTemplateDeploymentReferenceActions":
            suggest = "allowed_template_deployment_reference_actions"
        elif key == "allowedUnauthorizedActions":
            suggest = "allowed_unauthorized_actions"
        elif key == "allowedUnauthorizedActionsExtensions":
            suggest = "allowed_unauthorized_actions_extensions"
        elif key == "apiProfiles":
            suggest = "api_profiles"
        elif key == "asyncOperationResourceTypeName":
            suggest = "async_operation_resource_type_name"
        elif key == "asyncTimeoutRules":
            suggest = "async_timeout_rules"
        elif key == "authorizationActionMappings":
            suggest = "authorization_action_mappings"
        elif key == "availabilityZoneRule":
            suggest = "availability_zone_rule"
        elif key == "capacityRule":
            suggest = "capacity_rule"
        elif key == "checkNameAvailabilitySpecifications":
            suggest = "check_name_availability_specifications"
        elif key == "commonApiVersions":
            suggest = "common_api_versions"
        elif key == "crossTenantTokenValidation":
            suggest = "cross_tenant_token_validation"
        elif key == "defaultApiVersion":
            suggest = "default_api_version"
        elif key == "disallowedActionVerbs":
            suggest = "disallowed_action_verbs"
        elif key == "disallowedEndUserOperations":
            suggest = "disallowed_end_user_operations"
        elif key == "dstsConfiguration":
            suggest = "dsts_configuration"
        elif key == "enableAsyncOperation":
            suggest = "enable_async_operation"
        elif key == "enableThirdPartyS2S":
            suggest = "enable_third_party_s2_s"
        elif key == "extendedLocations":
            suggest = "extended_locations"
        elif key == "extensionOptions":
            suggest = "extension_options"
        elif key == "featuresRule":
            suggest = "features_rule"
        elif key == "frontdoorRequestMode":
            suggest = "frontdoor_request_mode"
        elif key == "groupingTag":
            suggest = "grouping_tag"
        elif key == "identityManagement":
            suggest = "identity_management"
        elif key == "isPureProxy":
            suggest = "is_pure_proxy"
        elif key == "legacyName":
            suggest = "legacy_name"
        elif key == "legacyNames":
            suggest = "legacy_names"
        elif key == "legacyPolicy":
            suggest = "legacy_policy"
        elif key == "linkedAccessChecks":
            suggest = "linked_access_checks"
        elif key == "linkedNotificationRules":
            suggest = "linked_notification_rules"
        elif key == "linkedOperationRules":
            suggest = "linked_operation_rules"
        elif key == "loggingRules":
            suggest = "logging_rules"
        elif key == "manifestLink":
            suggest = "manifest_link"
        elif key == "marketplaceOptions":
            suggest = "marketplace_options"
        elif key == "marketplaceType":
            suggest = "marketplace_type"
        elif key == "onBehalfOfTokens":
            suggest = "on_behalf_of_tokens"
        elif key == "openApiConfiguration":
            suggest = "open_api_configuration"
        elif key == "policyExecutionType":
            suggest = "policy_execution_type"
        elif key == "quotaRule":
            suggest = "quota_rule"
        elif key == "requestHeaderOptions":
            suggest = "request_header_options"
        elif key == "requiredFeatures":
            suggest = "required_features"
        elif key == "resourceCache":
            suggest = "resource_cache"
        elif key == "resourceConcurrencyControlOptions":
            suggest = "resource_concurrency_control_options"
        elif key == "resourceDeletionPolicy":
            suggest = "resource_deletion_policy"
        elif key == "resourceGraphConfiguration":
            suggest = "resource_graph_configuration"
        elif key == "resourceManagementOptions":
            suggest = "resource_management_options"
        elif key == "resourceMovePolicy":
            suggest = "resource_move_policy"
        elif key == "resourceProviderAuthorizationRules":
            suggest = "resource_provider_authorization_rules"
        elif key == "resourceQueryManagement":
            suggest = "resource_query_management"
        elif key == "resourceSubType":
            suggest = "resource_sub_type"
        elif key == "resourceTypeCommonAttributeManagement":
            suggest = "resource_type_common_attribute_management"
        elif key == "resourceValidation":
            suggest = "resource_validation"
        elif key == "routingRule":
            suggest = "routing_rule"
        elif key == "routingType":
            suggest = "routing_type"
        elif key == "serviceTreeInfos":
            suggest = "service_tree_infos"
        elif key == "skuLink":
            suggest = "sku_link"
        elif key == "subscriptionLifecycleNotificationSpecifications":
            suggest = "subscription_lifecycle_notification_specifications"
        elif key == "subscriptionStateRules":
            suggest = "subscription_state_rules"
        elif key == "supportsTags":
            suggest = "supports_tags"
        elif key == "swaggerSpecifications":
            suggest = "swagger_specifications"
        elif key == "templateDeploymentOptions":
            suggest = "template_deployment_options"
        elif key == "templateDeploymentPolicy":
            suggest = "template_deployment_policy"
        elif key == "throttlingRules":
            suggest = "throttling_rules"
        elif key == "tokenAuthConfiguration":
            suggest = "token_auth_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 add_resource_list_target_locations: Optional[builtins.bool] = None,
                 additional_options: Optional[builtins.str] = None,
                 allow_empty_role_assignments: Optional[builtins.bool] = None,
                 allowed_resource_names: Optional[Sequence['outputs.AllowedResourceNameResponse']] = None,
                 allowed_template_deployment_reference_actions: Optional[Sequence[builtins.str]] = None,
                 allowed_unauthorized_actions: Optional[Sequence[builtins.str]] = None,
                 allowed_unauthorized_actions_extensions: Optional[Sequence['outputs.AllowedUnauthorizedActionsExtensionResponse']] = None,
                 api_profiles: Optional[Sequence['outputs.ApiProfileResponse']] = None,
                 async_operation_resource_type_name: Optional[builtins.str] = None,
                 async_timeout_rules: Optional[Sequence['outputs.AsyncTimeoutRuleResponse']] = None,
                 authorization_action_mappings: Optional[Sequence['outputs.AuthorizationActionMappingResponse']] = None,
                 availability_zone_rule: Optional['outputs.ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule'] = None,
                 capacity_rule: Optional['outputs.ResourceTypeRegistrationPropertiesResponseCapacityRule'] = None,
                 category: Optional[builtins.str] = None,
                 check_name_availability_specifications: Optional['outputs.ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications'] = None,
                 common_api_versions: Optional[Sequence[builtins.str]] = None,
                 cross_tenant_token_validation: Optional[builtins.str] = None,
                 default_api_version: Optional[builtins.str] = None,
                 disallowed_action_verbs: Optional[Sequence[builtins.str]] = None,
                 disallowed_end_user_operations: Optional[Sequence[builtins.str]] = None,
                 dsts_configuration: Optional['outputs.ResourceTypeRegistrationPropertiesResponseDstsConfiguration'] = None,
                 enable_async_operation: Optional[builtins.bool] = None,
                 enable_third_party_s2_s: Optional[builtins.bool] = None,
                 endpoints: Optional[Sequence['outputs.ResourceTypeEndpointResponse']] = None,
                 extended_locations: Optional[Sequence['outputs.ExtendedLocationOptionsResponse']] = None,
                 extension_options: Optional['outputs.ResourceTypeRegistrationPropertiesResponseExtensionOptions'] = None,
                 features_rule: Optional['outputs.ResourceTypeRegistrationPropertiesResponseFeaturesRule'] = None,
                 frontdoor_request_mode: Optional[builtins.str] = None,
                 grouping_tag: Optional[builtins.str] = None,
                 identity_management: Optional['outputs.ResourceTypeRegistrationPropertiesResponseIdentityManagement'] = None,
                 is_pure_proxy: Optional[builtins.bool] = None,
                 legacy_name: Optional[builtins.str] = None,
                 legacy_names: Optional[Sequence[builtins.str]] = None,
                 legacy_policy: Optional['outputs.ResourceTypeRegistrationPropertiesResponseLegacyPolicy'] = None,
                 linked_access_checks: Optional[Sequence['outputs.LinkedAccessCheckResponse']] = None,
                 linked_notification_rules: Optional[Sequence['outputs.LinkedNotificationRuleResponse']] = None,
                 linked_operation_rules: Optional[Sequence['outputs.LinkedOperationRuleResponse']] = None,
                 logging_rules: Optional[Sequence['outputs.LoggingRuleResponse']] = None,
                 management: Optional['outputs.ResourceTypeRegistrationPropertiesResponseManagement'] = None,
                 manifest_link: Optional[builtins.str] = None,
                 marketplace_options: Optional['outputs.ResourceTypeRegistrationPropertiesResponseMarketplaceOptions'] = None,
                 marketplace_type: Optional[builtins.str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 notifications: Optional[Sequence['outputs.NotificationResponse']] = None,
                 on_behalf_of_tokens: Optional['outputs.ResourceTypeOnBehalfOfTokenResponse'] = None,
                 open_api_configuration: Optional['outputs.OpenApiConfigurationResponse'] = None,
                 policy_execution_type: Optional[builtins.str] = None,
                 quota_rule: Optional['outputs.QuotaRuleResponse'] = None,
                 regionality: Optional[builtins.str] = None,
                 request_header_options: Optional['outputs.ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions'] = None,
                 required_features: Optional[Sequence[builtins.str]] = None,
                 resource_cache: Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceCache'] = None,
                 resource_concurrency_control_options: Optional[Mapping[str, 'outputs.ResourceConcurrencyControlOptionResponse']] = None,
                 resource_deletion_policy: Optional[builtins.str] = None,
                 resource_graph_configuration: Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration'] = None,
                 resource_management_options: Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceManagementOptions'] = None,
                 resource_move_policy: Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceMovePolicy'] = None,
                 resource_provider_authorization_rules: Optional['outputs.ResourceProviderAuthorizationRulesResponse'] = None,
                 resource_query_management: Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceQueryManagement'] = None,
                 resource_sub_type: Optional[builtins.str] = None,
                 resource_type_common_attribute_management: Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement'] = None,
                 resource_validation: Optional[builtins.str] = None,
                 routing_rule: Optional['outputs.ResourceTypeRegistrationPropertiesResponseRoutingRule'] = None,
                 routing_type: Optional[builtins.str] = None,
                 service_tree_infos: Optional[Sequence['outputs.ServiceTreeInfoResponse']] = None,
                 sku_link: Optional[builtins.str] = None,
                 subscription_lifecycle_notification_specifications: Optional['outputs.ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications'] = None,
                 subscription_state_rules: Optional[Sequence['outputs.SubscriptionStateRuleResponse']] = None,
                 supports_tags: Optional[builtins.bool] = None,
                 swagger_specifications: Optional[Sequence['outputs.SwaggerSpecificationResponse']] = None,
                 template_deployment_options: Optional['outputs.ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions'] = None,
                 template_deployment_policy: Optional['outputs.ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy'] = None,
                 throttling_rules: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None,
                 token_auth_configuration: Optional['outputs.TokenAuthConfigurationResponse'] = None):
        """
        :param builtins.str provisioning_state: The provisioning state.
        :param builtins.bool add_resource_list_target_locations: Add resource list target locations?
        :param builtins.str additional_options: The additional options.
        :param builtins.bool allow_empty_role_assignments: The allow empty role assignments.
        :param Sequence['AllowedResourceNameResponse'] allowed_resource_names: The allowed resource names.
        :param Sequence[builtins.str] allowed_template_deployment_reference_actions: Allowed template deployment reference actions.
        :param Sequence[builtins.str] allowed_unauthorized_actions: The allowed unauthorized actions.
        :param Sequence['AllowedUnauthorizedActionsExtensionResponse'] allowed_unauthorized_actions_extensions: The allowed unauthorized actions extensions.
        :param Sequence['ApiProfileResponse'] api_profiles: The api profiles.
        :param builtins.str async_operation_resource_type_name: The async operation resource type name.
        :param Sequence['AsyncTimeoutRuleResponse'] async_timeout_rules: Async timeout rules
        :param Sequence['AuthorizationActionMappingResponse'] authorization_action_mappings: The authorization action mappings
        :param 'ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule' availability_zone_rule: The availability zone rule.
        :param 'ResourceTypeRegistrationPropertiesResponseCapacityRule' capacity_rule: Capacity rule.
        :param builtins.str category: The category.
        :param 'ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications' check_name_availability_specifications: The check name availability specifications.
        :param Sequence[builtins.str] common_api_versions: Common API versions for the resource type.
        :param builtins.str cross_tenant_token_validation: The cross tenant token validation.
        :param builtins.str default_api_version: The default api version.
        :param Sequence[builtins.str] disallowed_action_verbs: The disallowed action verbs.
        :param Sequence[builtins.str] disallowed_end_user_operations: The disallowed end user operations.
        :param 'ResourceTypeRegistrationPropertiesResponseDstsConfiguration' dsts_configuration: The dsts configuration.
        :param builtins.bool enable_async_operation: Whether async operation is enabled.
        :param builtins.bool enable_third_party_s2_s: Whether third party S2S is enabled.
        :param Sequence['ResourceTypeEndpointResponse'] endpoints: The extensions.
        :param Sequence['ExtendedLocationOptionsResponse'] extended_locations: The extended locations.
        :param 'ResourceTypeRegistrationPropertiesResponseExtensionOptions' extension_options: The extension options.
        :param 'ResourceTypeRegistrationPropertiesResponseFeaturesRule' features_rule: The features rule.
        :param builtins.str frontdoor_request_mode: The frontdoor request mode.
        :param builtins.str grouping_tag: Grouping tag.
        :param 'ResourceTypeRegistrationPropertiesResponseIdentityManagement' identity_management: The identity management.
        :param builtins.bool is_pure_proxy: Whether it is pure proxy.
        :param builtins.str legacy_name: The legacy name.
        :param Sequence[builtins.str] legacy_names: The legacy names.
        :param 'ResourceTypeRegistrationPropertiesResponseLegacyPolicy' legacy_policy: The legacy policy.
        :param Sequence['LinkedAccessCheckResponse'] linked_access_checks: The linked access checks.
        :param Sequence['LinkedNotificationRuleResponse'] linked_notification_rules: The linked notification rules.
        :param Sequence['LinkedOperationRuleResponse'] linked_operation_rules: The linked operation rules.
        :param Sequence['LoggingRuleResponse'] logging_rules: The logging rules.
        :param 'ResourceTypeRegistrationPropertiesResponseManagement' management: The resource provider management.
        :param builtins.str manifest_link: Manifest link.
        :param 'ResourceTypeRegistrationPropertiesResponseMarketplaceOptions' marketplace_options: Marketplace options.
        :param builtins.str marketplace_type: The marketplace type.
        :param Mapping[str, Any] metadata: The metadata.
        :param Sequence['NotificationResponse'] notifications: The notifications.
        :param 'ResourceTypeOnBehalfOfTokenResponse' on_behalf_of_tokens: The on behalf of tokens.
        :param 'OpenApiConfigurationResponse' open_api_configuration: The open api configuration.
        :param builtins.str policy_execution_type: The policy execution type.
        :param 'QuotaRuleResponse' quota_rule: The quota rule.
        :param builtins.str regionality: The regionality.
        :param 'ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions' request_header_options: The request header options.
        :param Sequence[builtins.str] required_features: The required features.
        :param 'ResourceTypeRegistrationPropertiesResponseResourceCache' resource_cache: Resource cache options.
        :param Mapping[str, 'ResourceConcurrencyControlOptionResponse'] resource_concurrency_control_options: The resource concurrency control options.
        :param builtins.str resource_deletion_policy: The resource deletion policy.
        :param 'ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration' resource_graph_configuration: The resource graph configuration.
        :param 'ResourceTypeRegistrationPropertiesResponseResourceManagementOptions' resource_management_options: Resource management options.
        :param 'ResourceTypeRegistrationPropertiesResponseResourceMovePolicy' resource_move_policy: The resource move policy.
        :param 'ResourceProviderAuthorizationRulesResponse' resource_provider_authorization_rules: The resource provider authorization rules.
        :param 'ResourceTypeRegistrationPropertiesResponseResourceQueryManagement' resource_query_management: Resource query management options.
        :param builtins.str resource_sub_type: The resource sub type.
        :param 'ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement' resource_type_common_attribute_management: Resource type common attribute management.
        :param builtins.str resource_validation: The resource validation.
        :param 'ResourceTypeRegistrationPropertiesResponseRoutingRule' routing_rule: Routing rule.
        :param builtins.str routing_type: The resource routing type.
        :param Sequence['ServiceTreeInfoResponse'] service_tree_infos: The service tree infos.
        :param builtins.str sku_link: The sku link.
        :param 'ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications' subscription_lifecycle_notification_specifications: The subscription lifecycle notification specifications.
        :param Sequence['SubscriptionStateRuleResponse'] subscription_state_rules: The subscription state rules.
        :param builtins.bool supports_tags: Whether tags are supported.
        :param Sequence['SwaggerSpecificationResponse'] swagger_specifications: The swagger specifications.
        :param 'ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions' template_deployment_options: The template deployment options.
        :param 'ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy' template_deployment_policy: The template deployment policy.
        :param Sequence['ThrottlingRuleResponse'] throttling_rules: The throttling rules.
        :param 'TokenAuthConfigurationResponse' token_auth_configuration: The token auth configuration.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if add_resource_list_target_locations is not None:
            pulumi.set(__self__, "add_resource_list_target_locations", add_resource_list_target_locations)
        if additional_options is not None:
            pulumi.set(__self__, "additional_options", additional_options)
        if allow_empty_role_assignments is not None:
            pulumi.set(__self__, "allow_empty_role_assignments", allow_empty_role_assignments)
        if allowed_resource_names is not None:
            pulumi.set(__self__, "allowed_resource_names", allowed_resource_names)
        if allowed_template_deployment_reference_actions is not None:
            pulumi.set(__self__, "allowed_template_deployment_reference_actions", allowed_template_deployment_reference_actions)
        if allowed_unauthorized_actions is not None:
            pulumi.set(__self__, "allowed_unauthorized_actions", allowed_unauthorized_actions)
        if allowed_unauthorized_actions_extensions is not None:
            pulumi.set(__self__, "allowed_unauthorized_actions_extensions", allowed_unauthorized_actions_extensions)
        if api_profiles is not None:
            pulumi.set(__self__, "api_profiles", api_profiles)
        if async_operation_resource_type_name is not None:
            pulumi.set(__self__, "async_operation_resource_type_name", async_operation_resource_type_name)
        if async_timeout_rules is not None:
            pulumi.set(__self__, "async_timeout_rules", async_timeout_rules)
        if authorization_action_mappings is not None:
            pulumi.set(__self__, "authorization_action_mappings", authorization_action_mappings)
        if availability_zone_rule is not None:
            pulumi.set(__self__, "availability_zone_rule", availability_zone_rule)
        if capacity_rule is not None:
            pulumi.set(__self__, "capacity_rule", capacity_rule)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if check_name_availability_specifications is not None:
            pulumi.set(__self__, "check_name_availability_specifications", check_name_availability_specifications)
        if common_api_versions is not None:
            pulumi.set(__self__, "common_api_versions", common_api_versions)
        if cross_tenant_token_validation is not None:
            pulumi.set(__self__, "cross_tenant_token_validation", cross_tenant_token_validation)
        if default_api_version is not None:
            pulumi.set(__self__, "default_api_version", default_api_version)
        if disallowed_action_verbs is not None:
            pulumi.set(__self__, "disallowed_action_verbs", disallowed_action_verbs)
        if disallowed_end_user_operations is not None:
            pulumi.set(__self__, "disallowed_end_user_operations", disallowed_end_user_operations)
        if dsts_configuration is not None:
            pulumi.set(__self__, "dsts_configuration", dsts_configuration)
        if enable_async_operation is not None:
            pulumi.set(__self__, "enable_async_operation", enable_async_operation)
        if enable_third_party_s2_s is not None:
            pulumi.set(__self__, "enable_third_party_s2_s", enable_third_party_s2_s)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if extended_locations is not None:
            pulumi.set(__self__, "extended_locations", extended_locations)
        if extension_options is not None:
            pulumi.set(__self__, "extension_options", extension_options)
        if features_rule is not None:
            pulumi.set(__self__, "features_rule", features_rule)
        if frontdoor_request_mode is not None:
            pulumi.set(__self__, "frontdoor_request_mode", frontdoor_request_mode)
        if grouping_tag is not None:
            pulumi.set(__self__, "grouping_tag", grouping_tag)
        if identity_management is not None:
            pulumi.set(__self__, "identity_management", identity_management)
        if is_pure_proxy is not None:
            pulumi.set(__self__, "is_pure_proxy", is_pure_proxy)
        if legacy_name is not None:
            pulumi.set(__self__, "legacy_name", legacy_name)
        if legacy_names is not None:
            pulumi.set(__self__, "legacy_names", legacy_names)
        if legacy_policy is not None:
            pulumi.set(__self__, "legacy_policy", legacy_policy)
        if linked_access_checks is not None:
            pulumi.set(__self__, "linked_access_checks", linked_access_checks)
        if linked_notification_rules is not None:
            pulumi.set(__self__, "linked_notification_rules", linked_notification_rules)
        if linked_operation_rules is not None:
            pulumi.set(__self__, "linked_operation_rules", linked_operation_rules)
        if logging_rules is not None:
            pulumi.set(__self__, "logging_rules", logging_rules)
        if management is not None:
            pulumi.set(__self__, "management", management)
        if manifest_link is not None:
            pulumi.set(__self__, "manifest_link", manifest_link)
        if marketplace_options is not None:
            pulumi.set(__self__, "marketplace_options", marketplace_options)
        if marketplace_type is not None:
            pulumi.set(__self__, "marketplace_type", marketplace_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if on_behalf_of_tokens is not None:
            pulumi.set(__self__, "on_behalf_of_tokens", on_behalf_of_tokens)
        if open_api_configuration is not None:
            pulumi.set(__self__, "open_api_configuration", open_api_configuration)
        if policy_execution_type is not None:
            pulumi.set(__self__, "policy_execution_type", policy_execution_type)
        if quota_rule is not None:
            pulumi.set(__self__, "quota_rule", quota_rule)
        if regionality is not None:
            pulumi.set(__self__, "regionality", regionality)
        if request_header_options is not None:
            pulumi.set(__self__, "request_header_options", request_header_options)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)
        if resource_cache is not None:
            pulumi.set(__self__, "resource_cache", resource_cache)
        if resource_concurrency_control_options is not None:
            pulumi.set(__self__, "resource_concurrency_control_options", resource_concurrency_control_options)
        if resource_deletion_policy is not None:
            pulumi.set(__self__, "resource_deletion_policy", resource_deletion_policy)
        if resource_graph_configuration is not None:
            pulumi.set(__self__, "resource_graph_configuration", resource_graph_configuration)
        if resource_management_options is not None:
            pulumi.set(__self__, "resource_management_options", resource_management_options)
        if resource_move_policy is not None:
            pulumi.set(__self__, "resource_move_policy", resource_move_policy)
        if resource_provider_authorization_rules is not None:
            pulumi.set(__self__, "resource_provider_authorization_rules", resource_provider_authorization_rules)
        if resource_query_management is not None:
            pulumi.set(__self__, "resource_query_management", resource_query_management)
        if resource_sub_type is not None:
            pulumi.set(__self__, "resource_sub_type", resource_sub_type)
        if resource_type_common_attribute_management is not None:
            pulumi.set(__self__, "resource_type_common_attribute_management", resource_type_common_attribute_management)
        if resource_validation is not None:
            pulumi.set(__self__, "resource_validation", resource_validation)
        if routing_rule is not None:
            pulumi.set(__self__, "routing_rule", routing_rule)
        if routing_type is not None:
            pulumi.set(__self__, "routing_type", routing_type)
        if service_tree_infos is not None:
            pulumi.set(__self__, "service_tree_infos", service_tree_infos)
        if sku_link is not None:
            pulumi.set(__self__, "sku_link", sku_link)
        if subscription_lifecycle_notification_specifications is not None:
            pulumi.set(__self__, "subscription_lifecycle_notification_specifications", subscription_lifecycle_notification_specifications)
        if subscription_state_rules is not None:
            pulumi.set(__self__, "subscription_state_rules", subscription_state_rules)
        if supports_tags is not None:
            pulumi.set(__self__, "supports_tags", supports_tags)
        if swagger_specifications is not None:
            pulumi.set(__self__, "swagger_specifications", swagger_specifications)
        if template_deployment_options is not None:
            pulumi.set(__self__, "template_deployment_options", template_deployment_options)
        if template_deployment_policy is not None:
            pulumi.set(__self__, "template_deployment_policy", template_deployment_policy)
        if throttling_rules is not None:
            pulumi.set(__self__, "throttling_rules", throttling_rules)
        if token_auth_configuration is not None:
            pulumi.set(__self__, "token_auth_configuration", token_auth_configuration)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="addResourceListTargetLocations")
    def add_resource_list_target_locations(self) -> Optional[builtins.bool]:
        """
        Add resource list target locations?
        """
        return pulumi.get(self, "add_resource_list_target_locations")

    @property
    @pulumi.getter(name="additionalOptions")
    def additional_options(self) -> Optional[builtins.str]:
        """
        The additional options.
        """
        return pulumi.get(self, "additional_options")

    @property
    @pulumi.getter(name="allowEmptyRoleAssignments")
    def allow_empty_role_assignments(self) -> Optional[builtins.bool]:
        """
        The allow empty role assignments.
        """
        return pulumi.get(self, "allow_empty_role_assignments")

    @property
    @pulumi.getter(name="allowedResourceNames")
    def allowed_resource_names(self) -> Optional[Sequence['outputs.AllowedResourceNameResponse']]:
        """
        The allowed resource names.
        """
        return pulumi.get(self, "allowed_resource_names")

    @property
    @pulumi.getter(name="allowedTemplateDeploymentReferenceActions")
    def allowed_template_deployment_reference_actions(self) -> Optional[Sequence[builtins.str]]:
        """
        Allowed template deployment reference actions.
        """
        return pulumi.get(self, "allowed_template_deployment_reference_actions")

    @property
    @pulumi.getter(name="allowedUnauthorizedActions")
    def allowed_unauthorized_actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The allowed unauthorized actions.
        """
        return pulumi.get(self, "allowed_unauthorized_actions")

    @property
    @pulumi.getter(name="allowedUnauthorizedActionsExtensions")
    def allowed_unauthorized_actions_extensions(self) -> Optional[Sequence['outputs.AllowedUnauthorizedActionsExtensionResponse']]:
        """
        The allowed unauthorized actions extensions.
        """
        return pulumi.get(self, "allowed_unauthorized_actions_extensions")

    @property
    @pulumi.getter(name="apiProfiles")
    def api_profiles(self) -> Optional[Sequence['outputs.ApiProfileResponse']]:
        """
        The api profiles.
        """
        return pulumi.get(self, "api_profiles")

    @property
    @pulumi.getter(name="asyncOperationResourceTypeName")
    def async_operation_resource_type_name(self) -> Optional[builtins.str]:
        """
        The async operation resource type name.
        """
        return pulumi.get(self, "async_operation_resource_type_name")

    @property
    @pulumi.getter(name="asyncTimeoutRules")
    def async_timeout_rules(self) -> Optional[Sequence['outputs.AsyncTimeoutRuleResponse']]:
        """
        Async timeout rules
        """
        return pulumi.get(self, "async_timeout_rules")

    @property
    @pulumi.getter(name="authorizationActionMappings")
    def authorization_action_mappings(self) -> Optional[Sequence['outputs.AuthorizationActionMappingResponse']]:
        """
        The authorization action mappings
        """
        return pulumi.get(self, "authorization_action_mappings")

    @property
    @pulumi.getter(name="availabilityZoneRule")
    def availability_zone_rule(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule']:
        """
        The availability zone rule.
        """
        return pulumi.get(self, "availability_zone_rule")

    @property
    @pulumi.getter(name="capacityRule")
    def capacity_rule(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseCapacityRule']:
        """
        Capacity rule.
        """
        return pulumi.get(self, "capacity_rule")

    @property
    @pulumi.getter
    def category(self) -> Optional[builtins.str]:
        """
        The category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="checkNameAvailabilitySpecifications")
    def check_name_availability_specifications(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications']:
        """
        The check name availability specifications.
        """
        return pulumi.get(self, "check_name_availability_specifications")

    @property
    @pulumi.getter(name="commonApiVersions")
    def common_api_versions(self) -> Optional[Sequence[builtins.str]]:
        """
        Common API versions for the resource type.
        """
        return pulumi.get(self, "common_api_versions")

    @property
    @pulumi.getter(name="crossTenantTokenValidation")
    def cross_tenant_token_validation(self) -> Optional[builtins.str]:
        """
        The cross tenant token validation.
        """
        return pulumi.get(self, "cross_tenant_token_validation")

    @property
    @pulumi.getter(name="defaultApiVersion")
    def default_api_version(self) -> Optional[builtins.str]:
        """
        The default api version.
        """
        return pulumi.get(self, "default_api_version")

    @property
    @pulumi.getter(name="disallowedActionVerbs")
    def disallowed_action_verbs(self) -> Optional[Sequence[builtins.str]]:
        """
        The disallowed action verbs.
        """
        return pulumi.get(self, "disallowed_action_verbs")

    @property
    @pulumi.getter(name="disallowedEndUserOperations")
    def disallowed_end_user_operations(self) -> Optional[Sequence[builtins.str]]:
        """
        The disallowed end user operations.
        """
        return pulumi.get(self, "disallowed_end_user_operations")

    @property
    @pulumi.getter(name="dstsConfiguration")
    def dsts_configuration(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseDstsConfiguration']:
        """
        The dsts configuration.
        """
        return pulumi.get(self, "dsts_configuration")

    @property
    @pulumi.getter(name="enableAsyncOperation")
    def enable_async_operation(self) -> Optional[builtins.bool]:
        """
        Whether async operation is enabled.
        """
        return pulumi.get(self, "enable_async_operation")

    @property
    @pulumi.getter(name="enableThirdPartyS2S")
    def enable_third_party_s2_s(self) -> Optional[builtins.bool]:
        """
        Whether third party S2S is enabled.
        """
        return pulumi.get(self, "enable_third_party_s2_s")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.ResourceTypeEndpointResponse']]:
        """
        The extensions.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="extendedLocations")
    def extended_locations(self) -> Optional[Sequence['outputs.ExtendedLocationOptionsResponse']]:
        """
        The extended locations.
        """
        return pulumi.get(self, "extended_locations")

    @property
    @pulumi.getter(name="extensionOptions")
    def extension_options(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseExtensionOptions']:
        """
        The extension options.
        """
        return pulumi.get(self, "extension_options")

    @property
    @pulumi.getter(name="featuresRule")
    def features_rule(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseFeaturesRule']:
        """
        The features rule.
        """
        return pulumi.get(self, "features_rule")

    @property
    @pulumi.getter(name="frontdoorRequestMode")
    def frontdoor_request_mode(self) -> Optional[builtins.str]:
        """
        The frontdoor request mode.
        """
        return pulumi.get(self, "frontdoor_request_mode")

    @property
    @pulumi.getter(name="groupingTag")
    def grouping_tag(self) -> Optional[builtins.str]:
        """
        Grouping tag.
        """
        return pulumi.get(self, "grouping_tag")

    @property
    @pulumi.getter(name="identityManagement")
    def identity_management(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseIdentityManagement']:
        """
        The identity management.
        """
        return pulumi.get(self, "identity_management")

    @property
    @pulumi.getter(name="isPureProxy")
    def is_pure_proxy(self) -> Optional[builtins.bool]:
        """
        Whether it is pure proxy.
        """
        return pulumi.get(self, "is_pure_proxy")

    @property
    @pulumi.getter(name="legacyName")
    def legacy_name(self) -> Optional[builtins.str]:
        """
        The legacy name.
        """
        return pulumi.get(self, "legacy_name")

    @property
    @pulumi.getter(name="legacyNames")
    def legacy_names(self) -> Optional[Sequence[builtins.str]]:
        """
        The legacy names.
        """
        return pulumi.get(self, "legacy_names")

    @property
    @pulumi.getter(name="legacyPolicy")
    def legacy_policy(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseLegacyPolicy']:
        """
        The legacy policy.
        """
        return pulumi.get(self, "legacy_policy")

    @property
    @pulumi.getter(name="linkedAccessChecks")
    def linked_access_checks(self) -> Optional[Sequence['outputs.LinkedAccessCheckResponse']]:
        """
        The linked access checks.
        """
        return pulumi.get(self, "linked_access_checks")

    @property
    @pulumi.getter(name="linkedNotificationRules")
    def linked_notification_rules(self) -> Optional[Sequence['outputs.LinkedNotificationRuleResponse']]:
        """
        The linked notification rules.
        """
        return pulumi.get(self, "linked_notification_rules")

    @property
    @pulumi.getter(name="linkedOperationRules")
    def linked_operation_rules(self) -> Optional[Sequence['outputs.LinkedOperationRuleResponse']]:
        """
        The linked operation rules.
        """
        return pulumi.get(self, "linked_operation_rules")

    @property
    @pulumi.getter(name="loggingRules")
    def logging_rules(self) -> Optional[Sequence['outputs.LoggingRuleResponse']]:
        """
        The logging rules.
        """
        return pulumi.get(self, "logging_rules")

    @property
    @pulumi.getter
    def management(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseManagement']:
        """
        The resource provider management.
        """
        return pulumi.get(self, "management")

    @property
    @pulumi.getter(name="manifestLink")
    def manifest_link(self) -> Optional[builtins.str]:
        """
        Manifest link.
        """
        return pulumi.get(self, "manifest_link")

    @property
    @pulumi.getter(name="marketplaceOptions")
    def marketplace_options(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseMarketplaceOptions']:
        """
        Marketplace options.
        """
        return pulumi.get(self, "marketplace_options")

    @property
    @pulumi.getter(name="marketplaceType")
    def marketplace_type(self) -> Optional[builtins.str]:
        """
        The marketplace type.
        """
        return pulumi.get(self, "marketplace_type")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        The metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence['outputs.NotificationResponse']]:
        """
        The notifications.
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="onBehalfOfTokens")
    def on_behalf_of_tokens(self) -> Optional['outputs.ResourceTypeOnBehalfOfTokenResponse']:
        """
        The on behalf of tokens.
        """
        return pulumi.get(self, "on_behalf_of_tokens")

    @property
    @pulumi.getter(name="openApiConfiguration")
    def open_api_configuration(self) -> Optional['outputs.OpenApiConfigurationResponse']:
        """
        The open api configuration.
        """
        return pulumi.get(self, "open_api_configuration")

    @property
    @pulumi.getter(name="policyExecutionType")
    def policy_execution_type(self) -> Optional[builtins.str]:
        """
        The policy execution type.
        """
        return pulumi.get(self, "policy_execution_type")

    @property
    @pulumi.getter(name="quotaRule")
    def quota_rule(self) -> Optional['outputs.QuotaRuleResponse']:
        """
        The quota rule.
        """
        return pulumi.get(self, "quota_rule")

    @property
    @pulumi.getter
    def regionality(self) -> Optional[builtins.str]:
        """
        The regionality.
        """
        return pulumi.get(self, "regionality")

    @property
    @pulumi.getter(name="requestHeaderOptions")
    def request_header_options(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions']:
        """
        The request header options.
        """
        return pulumi.get(self, "request_header_options")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")

    @property
    @pulumi.getter(name="resourceCache")
    def resource_cache(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceCache']:
        """
        Resource cache options.
        """
        return pulumi.get(self, "resource_cache")

    @property
    @pulumi.getter(name="resourceConcurrencyControlOptions")
    def resource_concurrency_control_options(self) -> Optional[Mapping[str, 'outputs.ResourceConcurrencyControlOptionResponse']]:
        """
        The resource concurrency control options.
        """
        return pulumi.get(self, "resource_concurrency_control_options")

    @property
    @pulumi.getter(name="resourceDeletionPolicy")
    def resource_deletion_policy(self) -> Optional[builtins.str]:
        """
        The resource deletion policy.
        """
        return pulumi.get(self, "resource_deletion_policy")

    @property
    @pulumi.getter(name="resourceGraphConfiguration")
    def resource_graph_configuration(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration']:
        """
        The resource graph configuration.
        """
        return pulumi.get(self, "resource_graph_configuration")

    @property
    @pulumi.getter(name="resourceManagementOptions")
    def resource_management_options(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceManagementOptions']:
        """
        Resource management options.
        """
        return pulumi.get(self, "resource_management_options")

    @property
    @pulumi.getter(name="resourceMovePolicy")
    def resource_move_policy(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceMovePolicy']:
        """
        The resource move policy.
        """
        return pulumi.get(self, "resource_move_policy")

    @property
    @pulumi.getter(name="resourceProviderAuthorizationRules")
    def resource_provider_authorization_rules(self) -> Optional['outputs.ResourceProviderAuthorizationRulesResponse']:
        """
        The resource provider authorization rules.
        """
        return pulumi.get(self, "resource_provider_authorization_rules")

    @property
    @pulumi.getter(name="resourceQueryManagement")
    def resource_query_management(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceQueryManagement']:
        """
        Resource query management options.
        """
        return pulumi.get(self, "resource_query_management")

    @property
    @pulumi.getter(name="resourceSubType")
    def resource_sub_type(self) -> Optional[builtins.str]:
        """
        The resource sub type.
        """
        return pulumi.get(self, "resource_sub_type")

    @property
    @pulumi.getter(name="resourceTypeCommonAttributeManagement")
    def resource_type_common_attribute_management(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement']:
        """
        Resource type common attribute management.
        """
        return pulumi.get(self, "resource_type_common_attribute_management")

    @property
    @pulumi.getter(name="resourceValidation")
    def resource_validation(self) -> Optional[builtins.str]:
        """
        The resource validation.
        """
        return pulumi.get(self, "resource_validation")

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseRoutingRule']:
        """
        Routing rule.
        """
        return pulumi.get(self, "routing_rule")

    @property
    @pulumi.getter(name="routingType")
    def routing_type(self) -> Optional[builtins.str]:
        """
        The resource routing type.
        """
        return pulumi.get(self, "routing_type")

    @property
    @pulumi.getter(name="serviceTreeInfos")
    def service_tree_infos(self) -> Optional[Sequence['outputs.ServiceTreeInfoResponse']]:
        """
        The service tree infos.
        """
        return pulumi.get(self, "service_tree_infos")

    @property
    @pulumi.getter(name="skuLink")
    def sku_link(self) -> Optional[builtins.str]:
        """
        The sku link.
        """
        return pulumi.get(self, "sku_link")

    @property
    @pulumi.getter(name="subscriptionLifecycleNotificationSpecifications")
    def subscription_lifecycle_notification_specifications(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications']:
        """
        The subscription lifecycle notification specifications.
        """
        return pulumi.get(self, "subscription_lifecycle_notification_specifications")

    @property
    @pulumi.getter(name="subscriptionStateRules")
    def subscription_state_rules(self) -> Optional[Sequence['outputs.SubscriptionStateRuleResponse']]:
        """
        The subscription state rules.
        """
        return pulumi.get(self, "subscription_state_rules")

    @property
    @pulumi.getter(name="supportsTags")
    def supports_tags(self) -> Optional[builtins.bool]:
        """
        Whether tags are supported.
        """
        return pulumi.get(self, "supports_tags")

    @property
    @pulumi.getter(name="swaggerSpecifications")
    def swagger_specifications(self) -> Optional[Sequence['outputs.SwaggerSpecificationResponse']]:
        """
        The swagger specifications.
        """
        return pulumi.get(self, "swagger_specifications")

    @property
    @pulumi.getter(name="templateDeploymentOptions")
    def template_deployment_options(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions']:
        """
        The template deployment options.
        """
        return pulumi.get(self, "template_deployment_options")

    @property
    @pulumi.getter(name="templateDeploymentPolicy")
    def template_deployment_policy(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy']:
        """
        The template deployment policy.
        """
        return pulumi.get(self, "template_deployment_policy")

    @property
    @pulumi.getter(name="throttlingRules")
    def throttling_rules(self) -> Optional[Sequence['outputs.ThrottlingRuleResponse']]:
        """
        The throttling rules.
        """
        return pulumi.get(self, "throttling_rules")

    @property
    @pulumi.getter(name="tokenAuthConfiguration")
    def token_auth_configuration(self) -> Optional['outputs.TokenAuthConfigurationResponse']:
        """
        The token auth configuration.
        """
        return pulumi.get(self, "token_auth_configuration")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule(dict):
    """
    The availability zone rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZonePolicy":
            suggest = "availability_zone_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseAvailabilityZoneRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone_policy: Optional[builtins.str] = None):
        """
        The availability zone rule.
        """
        if availability_zone_policy is not None:
            pulumi.set(__self__, "availability_zone_policy", availability_zone_policy)

    @property
    @pulumi.getter(name="availabilityZonePolicy")
    def availability_zone_policy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "availability_zone_policy")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport(dict):
    """
    Batch provisioning support.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportedOperations":
            suggest = "supported_operations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 supported_operations: Optional[builtins.str] = None):
        """
        Batch provisioning support.
        :param builtins.str supported_operations: Supported operations.
        """
        if supported_operations is not None:
            pulumi.set(__self__, "supported_operations", supported_operations)

    @property
    @pulumi.getter(name="supportedOperations")
    def supported_operations(self) -> Optional[builtins.str]:
        """
        Supported operations.
        """
        return pulumi.get(self, "supported_operations")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseCapacityRule(dict):
    """
    Capacity rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityPolicy":
            suggest = "capacity_policy"
        elif key == "skuAlias":
            suggest = "sku_alias"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseCapacityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseCapacityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseCapacityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_policy: Optional[builtins.str] = None,
                 sku_alias: Optional[builtins.str] = None):
        """
        Capacity rule.
        :param builtins.str capacity_policy: Capacity policy.
        :param builtins.str sku_alias: Sku alias
        """
        if capacity_policy is not None:
            pulumi.set(__self__, "capacity_policy", capacity_policy)
        if sku_alias is not None:
            pulumi.set(__self__, "sku_alias", sku_alias)

    @property
    @pulumi.getter(name="capacityPolicy")
    def capacity_policy(self) -> Optional[builtins.str]:
        """
        Capacity policy.
        """
        return pulumi.get(self, "capacity_policy")

    @property
    @pulumi.getter(name="skuAlias")
    def sku_alias(self) -> Optional[builtins.str]:
        """
        Sku alias
        """
        return pulumi.get(self, "sku_alias")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications(dict):
    """
    The check name availability specifications.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableDefaultValidation":
            suggest = "enable_default_validation"
        elif key == "resourceTypesWithCustomValidation":
            suggest = "resource_types_with_custom_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseCheckNameAvailabilitySpecifications.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_default_validation: Optional[builtins.bool] = None,
                 resource_types_with_custom_validation: Optional[Sequence[builtins.str]] = None):
        """
        The check name availability specifications.
        :param builtins.bool enable_default_validation: Whether default validation is enabled.
        :param Sequence[builtins.str] resource_types_with_custom_validation: The resource types with custom validation.
        """
        if enable_default_validation is not None:
            pulumi.set(__self__, "enable_default_validation", enable_default_validation)
        if resource_types_with_custom_validation is not None:
            pulumi.set(__self__, "resource_types_with_custom_validation", resource_types_with_custom_validation)

    @property
    @pulumi.getter(name="enableDefaultValidation")
    def enable_default_validation(self) -> Optional[builtins.bool]:
        """
        Whether default validation is enabled.
        """
        return pulumi.get(self, "enable_default_validation")

    @property
    @pulumi.getter(name="resourceTypesWithCustomValidation")
    def resource_types_with_custom_validation(self) -> Optional[Sequence[builtins.str]]:
        """
        The resource types with custom validation.
        """
        return pulumi.get(self, "resource_types_with_custom_validation")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseDstsConfiguration(dict):
    """
    The dsts configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "serviceDnsName":
            suggest = "service_dns_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseDstsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseDstsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseDstsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: builtins.str,
                 service_dns_name: Optional[builtins.str] = None):
        """
        The dsts configuration.
        :param builtins.str service_name: The service name.
        :param builtins.str service_dns_name: This is a URI property.
        """
        pulumi.set(__self__, "service_name", service_name)
        if service_dns_name is not None:
            pulumi.set(__self__, "service_dns_name", service_dns_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceDnsName")
    def service_dns_name(self) -> Optional[builtins.str]:
        """
        This is a URI property.
        """
        return pulumi.get(self, "service_dns_name")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseExtensionOptions(dict):
    """
    The extension options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceCreationBegin":
            suggest = "resource_creation_begin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseExtensionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseExtensionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseExtensionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_creation_begin: Optional['outputs.ResourceTypeExtensionOptionsResponseResourceCreationBegin'] = None):
        """
        The extension options.
        :param 'ResourceTypeExtensionOptionsResponseResourceCreationBegin' resource_creation_begin: Resource creation begin.
        """
        if resource_creation_begin is not None:
            pulumi.set(__self__, "resource_creation_begin", resource_creation_begin)

    @property
    @pulumi.getter(name="resourceCreationBegin")
    def resource_creation_begin(self) -> Optional['outputs.ResourceTypeExtensionOptionsResponseResourceCreationBegin']:
        """
        Resource creation begin.
        """
        return pulumi.get(self, "resource_creation_begin")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseFeaturesRule(dict):
    """
    The features rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiredFeaturesPolicy":
            suggest = "required_features_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseFeaturesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseFeaturesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseFeaturesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 required_features_policy: builtins.str):
        """
        The features rule.
        :param builtins.str required_features_policy: The required feature policy.
        """
        pulumi.set(__self__, "required_features_policy", required_features_policy)

    @property
    @pulumi.getter(name="requiredFeaturesPolicy")
    def required_features_policy(self) -> builtins.str:
        """
        The required feature policy.
        """
        return pulumi.get(self, "required_features_policy")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseIdentityManagement(dict):
    """
    The identity management.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "applicationIds":
            suggest = "application_ids"
        elif key == "delegationAppIds":
            suggest = "delegation_app_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseIdentityManagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseIdentityManagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseIdentityManagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[builtins.str] = None,
                 application_ids: Optional[Sequence[builtins.str]] = None,
                 delegation_app_ids: Optional[Sequence[builtins.str]] = None,
                 type: Optional[builtins.str] = None):
        """
        The identity management.
        :param builtins.str application_id: The application id.
        :param Sequence[builtins.str] application_ids: The application ids.
        :param Sequence[builtins.str] delegation_app_ids: The delegation app ids.
        :param builtins.str type: The type.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_ids is not None:
            pulumi.set(__self__, "application_ids", application_ids)
        if delegation_app_ids is not None:
            pulumi.set(__self__, "delegation_app_ids", delegation_app_ids)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[builtins.str]:
        """
        The application id.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationIds")
    def application_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        The application ids.
        """
        return pulumi.get(self, "application_ids")

    @property
    @pulumi.getter(name="delegationAppIds")
    def delegation_app_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        The delegation app ids.
        """
        return pulumi.get(self, "delegation_app_ids")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseLegacyPolicy(dict):
    """
    The legacy policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disallowedConditions":
            suggest = "disallowed_conditions"
        elif key == "disallowedLegacyOperations":
            suggest = "disallowed_legacy_operations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseLegacyPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseLegacyPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseLegacyPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disallowed_conditions: Optional[Sequence['outputs.LegacyDisallowedConditionResponse']] = None,
                 disallowed_legacy_operations: Optional[Sequence[builtins.str]] = None):
        """
        The legacy policy.
        """
        if disallowed_conditions is not None:
            pulumi.set(__self__, "disallowed_conditions", disallowed_conditions)
        if disallowed_legacy_operations is not None:
            pulumi.set(__self__, "disallowed_legacy_operations", disallowed_legacy_operations)

    @property
    @pulumi.getter(name="disallowedConditions")
    def disallowed_conditions(self) -> Optional[Sequence['outputs.LegacyDisallowedConditionResponse']]:
        return pulumi.get(self, "disallowed_conditions")

    @property
    @pulumi.getter(name="disallowedLegacyOperations")
    def disallowed_legacy_operations(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "disallowed_legacy_operations")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseManagement(dict):
    """
    The resource provider management.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationOwners":
            suggest = "authorization_owners"
        elif key == "canaryManifestOwners":
            suggest = "canary_manifest_owners"
        elif key == "errorResponseMessageOptions":
            suggest = "error_response_message_options"
        elif key == "expeditedRolloutMetadata":
            suggest = "expedited_rollout_metadata"
        elif key == "expeditedRolloutSubmitters":
            suggest = "expedited_rollout_submitters"
        elif key == "incidentContactEmail":
            suggest = "incident_contact_email"
        elif key == "incidentRoutingService":
            suggest = "incident_routing_service"
        elif key == "incidentRoutingTeam":
            suggest = "incident_routing_team"
        elif key == "manifestOwners":
            suggest = "manifest_owners"
        elif key == "pcCode":
            suggest = "pc_code"
        elif key == "profitCenterProgramId":
            suggest = "profit_center_program_id"
        elif key == "resourceAccessPolicy":
            suggest = "resource_access_policy"
        elif key == "resourceAccessRoles":
            suggest = "resource_access_roles"
        elif key == "schemaOwners":
            suggest = "schema_owners"
        elif key == "serviceTreeInfos":
            suggest = "service_tree_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseManagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseManagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseManagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_owners: Optional[Sequence[builtins.str]] = None,
                 canary_manifest_owners: Optional[Sequence[builtins.str]] = None,
                 error_response_message_options: Optional['outputs.ResourceProviderManagementResponseErrorResponseMessageOptions'] = None,
                 expedited_rollout_metadata: Optional['outputs.ResourceProviderManagementResponseExpeditedRolloutMetadata'] = None,
                 expedited_rollout_submitters: Optional[Sequence[builtins.str]] = None,
                 incident_contact_email: Optional[builtins.str] = None,
                 incident_routing_service: Optional[builtins.str] = None,
                 incident_routing_team: Optional[builtins.str] = None,
                 manifest_owners: Optional[Sequence[builtins.str]] = None,
                 pc_code: Optional[builtins.str] = None,
                 profit_center_program_id: Optional[builtins.str] = None,
                 resource_access_policy: Optional[builtins.str] = None,
                 resource_access_roles: Optional[Sequence['outputs.ResourceAccessRoleResponse']] = None,
                 schema_owners: Optional[Sequence[builtins.str]] = None,
                 service_tree_infos: Optional[Sequence['outputs.ServiceTreeInfoResponse']] = None):
        """
        The resource provider management.
        :param Sequence[builtins.str] authorization_owners: The authorization owners.
        :param Sequence[builtins.str] canary_manifest_owners: List of manifest owners for canary.
        :param 'ResourceProviderManagementResponseErrorResponseMessageOptions' error_response_message_options: Options for error response messages.
        :param 'ResourceProviderManagementResponseExpeditedRolloutMetadata' expedited_rollout_metadata: Metadata for expedited rollout.
        :param Sequence[builtins.str] expedited_rollout_submitters: List of expedited rollout submitters.
        :param builtins.str incident_contact_email: The incident contact email.
        :param builtins.str incident_routing_service: The incident routing service.
        :param builtins.str incident_routing_team: The incident routing team.
        :param Sequence[builtins.str] manifest_owners: The manifest owners.
        :param builtins.str pc_code: The profit center code for the subscription.
        :param builtins.str profit_center_program_id: The profit center program id for the subscription.
        :param builtins.str resource_access_policy: The resource access policy.
        :param Sequence['ResourceAccessRoleResponse'] resource_access_roles: The resource access roles.
        :param Sequence[builtins.str] schema_owners: The schema owners.
        :param Sequence['ServiceTreeInfoResponse'] service_tree_infos: The service tree infos.
        """
        if authorization_owners is not None:
            pulumi.set(__self__, "authorization_owners", authorization_owners)
        if canary_manifest_owners is not None:
            pulumi.set(__self__, "canary_manifest_owners", canary_manifest_owners)
        if error_response_message_options is not None:
            pulumi.set(__self__, "error_response_message_options", error_response_message_options)
        if expedited_rollout_metadata is not None:
            pulumi.set(__self__, "expedited_rollout_metadata", expedited_rollout_metadata)
        if expedited_rollout_submitters is not None:
            pulumi.set(__self__, "expedited_rollout_submitters", expedited_rollout_submitters)
        if incident_contact_email is not None:
            pulumi.set(__self__, "incident_contact_email", incident_contact_email)
        if incident_routing_service is not None:
            pulumi.set(__self__, "incident_routing_service", incident_routing_service)
        if incident_routing_team is not None:
            pulumi.set(__self__, "incident_routing_team", incident_routing_team)
        if manifest_owners is not None:
            pulumi.set(__self__, "manifest_owners", manifest_owners)
        if pc_code is not None:
            pulumi.set(__self__, "pc_code", pc_code)
        if profit_center_program_id is not None:
            pulumi.set(__self__, "profit_center_program_id", profit_center_program_id)
        if resource_access_policy is not None:
            pulumi.set(__self__, "resource_access_policy", resource_access_policy)
        if resource_access_roles is not None:
            pulumi.set(__self__, "resource_access_roles", resource_access_roles)
        if schema_owners is not None:
            pulumi.set(__self__, "schema_owners", schema_owners)
        if service_tree_infos is not None:
            pulumi.set(__self__, "service_tree_infos", service_tree_infos)

    @property
    @pulumi.getter(name="authorizationOwners")
    def authorization_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        The authorization owners.
        """
        return pulumi.get(self, "authorization_owners")

    @property
    @pulumi.getter(name="canaryManifestOwners")
    def canary_manifest_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        List of manifest owners for canary.
        """
        return pulumi.get(self, "canary_manifest_owners")

    @property
    @pulumi.getter(name="errorResponseMessageOptions")
    def error_response_message_options(self) -> Optional['outputs.ResourceProviderManagementResponseErrorResponseMessageOptions']:
        """
        Options for error response messages.
        """
        return pulumi.get(self, "error_response_message_options")

    @property
    @pulumi.getter(name="expeditedRolloutMetadata")
    def expedited_rollout_metadata(self) -> Optional['outputs.ResourceProviderManagementResponseExpeditedRolloutMetadata']:
        """
        Metadata for expedited rollout.
        """
        return pulumi.get(self, "expedited_rollout_metadata")

    @property
    @pulumi.getter(name="expeditedRolloutSubmitters")
    def expedited_rollout_submitters(self) -> Optional[Sequence[builtins.str]]:
        """
        List of expedited rollout submitters.
        """
        return pulumi.get(self, "expedited_rollout_submitters")

    @property
    @pulumi.getter(name="incidentContactEmail")
    def incident_contact_email(self) -> Optional[builtins.str]:
        """
        The incident contact email.
        """
        return pulumi.get(self, "incident_contact_email")

    @property
    @pulumi.getter(name="incidentRoutingService")
    def incident_routing_service(self) -> Optional[builtins.str]:
        """
        The incident routing service.
        """
        return pulumi.get(self, "incident_routing_service")

    @property
    @pulumi.getter(name="incidentRoutingTeam")
    def incident_routing_team(self) -> Optional[builtins.str]:
        """
        The incident routing team.
        """
        return pulumi.get(self, "incident_routing_team")

    @property
    @pulumi.getter(name="manifestOwners")
    def manifest_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        The manifest owners.
        """
        return pulumi.get(self, "manifest_owners")

    @property
    @pulumi.getter(name="pcCode")
    def pc_code(self) -> Optional[builtins.str]:
        """
        The profit center code for the subscription.
        """
        return pulumi.get(self, "pc_code")

    @property
    @pulumi.getter(name="profitCenterProgramId")
    def profit_center_program_id(self) -> Optional[builtins.str]:
        """
        The profit center program id for the subscription.
        """
        return pulumi.get(self, "profit_center_program_id")

    @property
    @pulumi.getter(name="resourceAccessPolicy")
    def resource_access_policy(self) -> Optional[builtins.str]:
        """
        The resource access policy.
        """
        return pulumi.get(self, "resource_access_policy")

    @property
    @pulumi.getter(name="resourceAccessRoles")
    def resource_access_roles(self) -> Optional[Sequence['outputs.ResourceAccessRoleResponse']]:
        """
        The resource access roles.
        """
        return pulumi.get(self, "resource_access_roles")

    @property
    @pulumi.getter(name="schemaOwners")
    def schema_owners(self) -> Optional[Sequence[builtins.str]]:
        """
        The schema owners.
        """
        return pulumi.get(self, "schema_owners")

    @property
    @pulumi.getter(name="serviceTreeInfos")
    def service_tree_infos(self) -> Optional[Sequence['outputs.ServiceTreeInfoResponse']]:
        """
        The service tree infos.
        """
        return pulumi.get(self, "service_tree_infos")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseMarketplaceOptions(dict):
    """
    Marketplace options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnPlanConversionAllowed":
            suggest = "add_on_plan_conversion_allowed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseMarketplaceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseMarketplaceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseMarketplaceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_on_plan_conversion_allowed: Optional[builtins.bool] = None):
        """
        Marketplace options.
        :param builtins.bool add_on_plan_conversion_allowed: Add-on plan conversion allowed.
        """
        if add_on_plan_conversion_allowed is not None:
            pulumi.set(__self__, "add_on_plan_conversion_allowed", add_on_plan_conversion_allowed)

    @property
    @pulumi.getter(name="addOnPlanConversionAllowed")
    def add_on_plan_conversion_allowed(self) -> Optional[builtins.bool]:
        """
        Add-on plan conversion allowed.
        """
        return pulumi.get(self, "add_on_plan_conversion_allowed")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport(dict):
    """
    Nested provisioning support.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumApiVersion":
            suggest = "minimum_api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum_api_version: Optional[builtins.str] = None):
        """
        Nested provisioning support.
        :param builtins.str minimum_api_version: Minimum API version.
        """
        if minimum_api_version is not None:
            pulumi.set(__self__, "minimum_api_version", minimum_api_version)

    @property
    @pulumi.getter(name="minimumApiVersion")
    def minimum_api_version(self) -> Optional[builtins.str]:
        """
        Minimum API version.
        """
        return pulumi.get(self, "minimum_api_version")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions(dict):
    """
    The request header options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optInHeaders":
            suggest = "opt_in_headers"
        elif key == "optOutHeaders":
            suggest = "opt_out_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseRequestHeaderOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 opt_in_headers: Optional[builtins.str] = None,
                 opt_out_headers: Optional[builtins.str] = None):
        """
        The request header options.
        :param builtins.str opt_in_headers: The opt in headers.
        :param builtins.str opt_out_headers: The opt out headers.
        """
        if opt_in_headers is not None:
            pulumi.set(__self__, "opt_in_headers", opt_in_headers)
        if opt_out_headers is not None:
            pulumi.set(__self__, "opt_out_headers", opt_out_headers)

    @property
    @pulumi.getter(name="optInHeaders")
    def opt_in_headers(self) -> Optional[builtins.str]:
        """
        The opt in headers.
        """
        return pulumi.get(self, "opt_in_headers")

    @property
    @pulumi.getter(name="optOutHeaders")
    def opt_out_headers(self) -> Optional[builtins.str]:
        """
        The opt out headers.
        """
        return pulumi.get(self, "opt_out_headers")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseResourceCache(dict):
    """
    Resource cache options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableResourceCache":
            suggest = "enable_resource_cache"
        elif key == "resourceCacheExpirationTimespan":
            suggest = "resource_cache_expiration_timespan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseResourceCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_resource_cache: Optional[builtins.bool] = None,
                 resource_cache_expiration_timespan: Optional[builtins.str] = None):
        """
        Resource cache options.
        :param builtins.bool enable_resource_cache: Enable resource cache.
        :param builtins.str resource_cache_expiration_timespan: Resource cache expiration timespan. This is a TimeSpan property.
        """
        if enable_resource_cache is not None:
            pulumi.set(__self__, "enable_resource_cache", enable_resource_cache)
        if resource_cache_expiration_timespan is not None:
            pulumi.set(__self__, "resource_cache_expiration_timespan", resource_cache_expiration_timespan)

    @property
    @pulumi.getter(name="enableResourceCache")
    def enable_resource_cache(self) -> Optional[builtins.bool]:
        """
        Enable resource cache.
        """
        return pulumi.get(self, "enable_resource_cache")

    @property
    @pulumi.getter(name="resourceCacheExpirationTimespan")
    def resource_cache_expiration_timespan(self) -> Optional[builtins.str]:
        """
        Resource cache expiration timespan. This is a TimeSpan property.
        """
        return pulumi.get(self, "resource_cache_expiration_timespan")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration(dict):
    """
    The resource graph configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceGraphConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None):
        """
        The resource graph configuration.
        :param builtins.str api_version: The api version.
        :param builtins.bool enabled: Whether it's enabled.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[builtins.str]:
        """
        The api version.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Whether it's enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseResourceManagementOptions(dict):
    """
    Resource management options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchProvisioningSupport":
            suggest = "batch_provisioning_support"
        elif key == "deleteDependencies":
            suggest = "delete_dependencies"
        elif key == "nestedProvisioningSupport":
            suggest = "nested_provisioning_support"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseResourceManagementOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceManagementOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceManagementOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_provisioning_support: Optional['outputs.ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport'] = None,
                 delete_dependencies: Optional[Sequence['outputs.DeleteDependencyResponse']] = None,
                 nested_provisioning_support: Optional['outputs.ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport'] = None):
        """
        Resource management options.
        :param 'ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport' batch_provisioning_support: Batch provisioning support.
        :param Sequence['DeleteDependencyResponse'] delete_dependencies: Delete dependencies.
        :param 'ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport' nested_provisioning_support: Nested provisioning support.
        """
        if batch_provisioning_support is not None:
            pulumi.set(__self__, "batch_provisioning_support", batch_provisioning_support)
        if delete_dependencies is not None:
            pulumi.set(__self__, "delete_dependencies", delete_dependencies)
        if nested_provisioning_support is not None:
            pulumi.set(__self__, "nested_provisioning_support", nested_provisioning_support)

    @property
    @pulumi.getter(name="batchProvisioningSupport")
    def batch_provisioning_support(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseBatchProvisioningSupport']:
        """
        Batch provisioning support.
        """
        return pulumi.get(self, "batch_provisioning_support")

    @property
    @pulumi.getter(name="deleteDependencies")
    def delete_dependencies(self) -> Optional[Sequence['outputs.DeleteDependencyResponse']]:
        """
        Delete dependencies.
        """
        return pulumi.get(self, "delete_dependencies")

    @property
    @pulumi.getter(name="nestedProvisioningSupport")
    def nested_provisioning_support(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponseNestedProvisioningSupport']:
        """
        Nested provisioning support.
        """
        return pulumi.get(self, "nested_provisioning_support")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseResourceMovePolicy(dict):
    """
    The resource move policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossResourceGroupMoveEnabled":
            suggest = "cross_resource_group_move_enabled"
        elif key == "crossSubscriptionMoveEnabled":
            suggest = "cross_subscription_move_enabled"
        elif key == "validationRequired":
            suggest = "validation_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseResourceMovePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceMovePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceMovePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cross_resource_group_move_enabled: Optional[builtins.bool] = None,
                 cross_subscription_move_enabled: Optional[builtins.bool] = None,
                 validation_required: Optional[builtins.bool] = None):
        """
        The resource move policy.
        :param builtins.bool cross_resource_group_move_enabled: Whether cross resource group move is enabled.
        :param builtins.bool cross_subscription_move_enabled: Whether cross subscription move is enabled.
        :param builtins.bool validation_required: Whether validation is required.
        """
        if cross_resource_group_move_enabled is not None:
            pulumi.set(__self__, "cross_resource_group_move_enabled", cross_resource_group_move_enabled)
        if cross_subscription_move_enabled is not None:
            pulumi.set(__self__, "cross_subscription_move_enabled", cross_subscription_move_enabled)
        if validation_required is not None:
            pulumi.set(__self__, "validation_required", validation_required)

    @property
    @pulumi.getter(name="crossResourceGroupMoveEnabled")
    def cross_resource_group_move_enabled(self) -> Optional[builtins.bool]:
        """
        Whether cross resource group move is enabled.
        """
        return pulumi.get(self, "cross_resource_group_move_enabled")

    @property
    @pulumi.getter(name="crossSubscriptionMoveEnabled")
    def cross_subscription_move_enabled(self) -> Optional[builtins.bool]:
        """
        Whether cross subscription move is enabled.
        """
        return pulumi.get(self, "cross_subscription_move_enabled")

    @property
    @pulumi.getter(name="validationRequired")
    def validation_required(self) -> Optional[builtins.bool]:
        """
        Whether validation is required.
        """
        return pulumi.get(self, "validation_required")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseResourceQueryManagement(dict):
    """
    Resource query management options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterOption":
            suggest = "filter_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseResourceQueryManagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceQueryManagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceQueryManagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_option: Optional[builtins.str] = None):
        """
        Resource query management options.
        :param builtins.str filter_option: Filter option.
        """
        if filter_option is not None:
            pulumi.set(__self__, "filter_option", filter_option)

    @property
    @pulumi.getter(name="filterOption")
    def filter_option(self) -> Optional[builtins.str]:
        """
        Filter option.
        """
        return pulumi.get(self, "filter_option")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement(dict):
    """
    Resource type common attribute management.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonApiVersionsMergeMode":
            suggest = "common_api_versions_merge_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseResourceTypeCommonAttributeManagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_api_versions_merge_mode: Optional[builtins.str] = None):
        """
        Resource type common attribute management.
        :param builtins.str common_api_versions_merge_mode: Common api versions merge mode.
        """
        if common_api_versions_merge_mode is not None:
            pulumi.set(__self__, "common_api_versions_merge_mode", common_api_versions_merge_mode)

    @property
    @pulumi.getter(name="commonApiVersionsMergeMode")
    def common_api_versions_merge_mode(self) -> Optional[builtins.str]:
        """
        Common api versions merge mode.
        """
        return pulumi.get(self, "common_api_versions_merge_mode")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseRoutingRule(dict):
    """
    Routing rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostResourceType":
            suggest = "host_resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseRoutingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseRoutingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseRoutingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_resource_type: Optional[builtins.str] = None):
        """
        Routing rule.
        :param builtins.str host_resource_type: Hosted resource type.
        """
        if host_resource_type is not None:
            pulumi.set(__self__, "host_resource_type", host_resource_type)

    @property
    @pulumi.getter(name="hostResourceType")
    def host_resource_type(self) -> Optional[builtins.str]:
        """
        Hosted resource type.
        """
        return pulumi.get(self, "host_resource_type")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications(dict):
    """
    The subscription lifecycle notification specifications.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "softDeleteTTL":
            suggest = "soft_delete_ttl"
        elif key == "subscriptionStateOverrideActions":
            suggest = "subscription_state_override_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 soft_delete_ttl: Optional[builtins.str] = None,
                 subscription_state_override_actions: Optional[Sequence['outputs.SubscriptionStateOverrideActionResponse']] = None):
        """
        The subscription lifecycle notification specifications.
        :param builtins.str soft_delete_ttl: The soft delete TTL.
        :param Sequence['SubscriptionStateOverrideActionResponse'] subscription_state_override_actions: The subscription state override actions.
        """
        if soft_delete_ttl is not None:
            pulumi.set(__self__, "soft_delete_ttl", soft_delete_ttl)
        if subscription_state_override_actions is not None:
            pulumi.set(__self__, "subscription_state_override_actions", subscription_state_override_actions)

    @property
    @pulumi.getter(name="softDeleteTTL")
    def soft_delete_ttl(self) -> Optional[builtins.str]:
        """
        The soft delete TTL.
        """
        return pulumi.get(self, "soft_delete_ttl")

    @property
    @pulumi.getter(name="subscriptionStateOverrideActions")
    def subscription_state_override_actions(self) -> Optional[Sequence['outputs.SubscriptionStateOverrideActionResponse']]:
        """
        The subscription state override actions.
        """
        return pulumi.get(self, "subscription_state_override_actions")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions(dict):
    """
    The template deployment options.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preflightOptions":
            suggest = "preflight_options"
        elif key == "preflightSupported":
            suggest = "preflight_supported"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseTemplateDeploymentOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preflight_options: Optional[Sequence[builtins.str]] = None,
                 preflight_supported: Optional[builtins.bool] = None):
        """
        The template deployment options.
        :param Sequence[builtins.str] preflight_options: The preflight options.
        :param builtins.bool preflight_supported: Whether preflight is supported.
        """
        if preflight_options is not None:
            pulumi.set(__self__, "preflight_options", preflight_options)
        if preflight_supported is not None:
            pulumi.set(__self__, "preflight_supported", preflight_supported)

    @property
    @pulumi.getter(name="preflightOptions")
    def preflight_options(self) -> Optional[Sequence[builtins.str]]:
        """
        The preflight options.
        """
        return pulumi.get(self, "preflight_options")

    @property
    @pulumi.getter(name="preflightSupported")
    def preflight_supported(self) -> Optional[builtins.bool]:
        """
        Whether preflight is supported.
        """
        return pulumi.get(self, "preflight_supported")


@pulumi.output_type
class ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy(dict):
    """
    The template deployment policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preflightOptions":
            suggest = "preflight_options"
        elif key == "preflightNotifications":
            suggest = "preflight_notifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationPropertiesResponseTemplateDeploymentPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capabilities: builtins.str,
                 preflight_options: builtins.str,
                 preflight_notifications: Optional[builtins.str] = None):
        """
        The template deployment policy.
        :param builtins.str capabilities: The capabilities.
        :param builtins.str preflight_options: The preflight options.
        :param builtins.str preflight_notifications: The preflight notifications.
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "preflight_options", preflight_options)
        if preflight_notifications is not None:
            pulumi.set(__self__, "preflight_notifications", preflight_notifications)

    @property
    @pulumi.getter
    def capabilities(self) -> builtins.str:
        """
        The capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="preflightOptions")
    def preflight_options(self) -> builtins.str:
        """
        The preflight options.
        """
        return pulumi.get(self, "preflight_options")

    @property
    @pulumi.getter(name="preflightNotifications")
    def preflight_notifications(self) -> Optional[builtins.str]:
        """
        The preflight notifications.
        """
        return pulumi.get(self, "preflight_notifications")


@pulumi.output_type
class ResourceTypeRegistrationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemData":
            suggest = "system_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceTypeRegistrationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceTypeRegistrationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceTypeRegistrationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: builtins.str,
                 kind: Optional[builtins.str] = None,
                 properties: Optional['outputs.ResourceTypeRegistrationPropertiesResponse'] = None):
        """
        :param builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param builtins.str name: The name of the resource
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param builtins.str kind: Resource type registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if kind is None:
            kind = 'Managed'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Resource type registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ResourceTypeRegistrationPropertiesResponse']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class ServiceTreeInfoResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentId":
            suggest = "component_id"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTreeInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTreeInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTreeInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_id: Optional[builtins.str] = None,
                 readiness: Optional[builtins.str] = None,
                 service_id: Optional[builtins.str] = None):
        """
        :param builtins.str component_id: The component id.
        :param builtins.str readiness: The readiness.
        :param builtins.str service_id: The service id.
        """
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[builtins.str]:
        """
        The component id.
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter
    def readiness(self) -> Optional[builtins.str]:
        """
        The readiness.
        """
        return pulumi.get(self, "readiness")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[builtins.str]:
        """
        The service id.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class SkuCapabilityResponse(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: The name.
        :param builtins.str value: The value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SkuCostResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "meterId":
            suggest = "meter_id"
        elif key == "extendedUnit":
            suggest = "extended_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkuCostResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkuCostResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkuCostResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 meter_id: builtins.str,
                 extended_unit: Optional[builtins.str] = None,
                 quantity: Optional[builtins.int] = None):
        """
        :param builtins.str meter_id: The meter id.
        :param builtins.str extended_unit: The extended unit.
        :param builtins.int quantity: The quantity.
        """
        pulumi.set(__self__, "meter_id", meter_id)
        if extended_unit is not None:
            pulumi.set(__self__, "extended_unit", extended_unit)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter(name="meterId")
    def meter_id(self) -> builtins.str:
        """
        The meter id.
        """
        return pulumi.get(self, "meter_id")

    @property
    @pulumi.getter(name="extendedUnit")
    def extended_unit(self) -> Optional[builtins.str]:
        """
        The extended unit.
        """
        return pulumi.get(self, "extended_unit")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[builtins.int]:
        """
        The quantity.
        """
        return pulumi.get(self, "quantity")


@pulumi.output_type
class SkuLocationInfoResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedLocations":
            suggest = "extended_locations"
        elif key == "zoneDetails":
            suggest = "zone_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkuLocationInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkuLocationInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkuLocationInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 extended_locations: Optional[Sequence[builtins.str]] = None,
                 type: Optional[builtins.str] = None,
                 zone_details: Optional[Sequence['outputs.SkuZoneDetailResponse']] = None,
                 zones: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str location: The location.
        :param Sequence[builtins.str] extended_locations: The extended locations.
        :param builtins.str type: The type.
        :param Sequence['SkuZoneDetailResponse'] zone_details: The zone details.
        :param Sequence[builtins.str] zones: The zones.
        """
        pulumi.set(__self__, "location", location)
        if extended_locations is not None:
            pulumi.set(__self__, "extended_locations", extended_locations)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone_details is not None:
            pulumi.set(__self__, "zone_details", zone_details)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="extendedLocations")
    def extended_locations(self) -> Optional[Sequence[builtins.str]]:
        """
        The extended locations.
        """
        return pulumi.get(self, "extended_locations")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zoneDetails")
    def zone_details(self) -> Optional[Sequence['outputs.SkuZoneDetailResponse']]:
        """
        The zone details.
        """
        return pulumi.get(self, "zone_details")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[builtins.str]]:
        """
        The zones.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class SkuResourceResponseProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "skuSettings":
            suggest = "sku_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkuResourceResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkuResourceResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkuResourceResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 sku_settings: Sequence['outputs.SkuSettingResponse']):
        """
        :param builtins.str provisioning_state: The provisioning state.
        :param Sequence['SkuSettingResponse'] sku_settings: The sku settings.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "sku_settings", sku_settings)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="skuSettings")
    def sku_settings(self) -> Sequence['outputs.SkuSettingResponse']:
        """
        The sku settings.
        """
        return pulumi.get(self, "sku_settings")


@pulumi.output_type
class SkuSettingResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationInfo":
            suggest = "location_info"
        elif key == "requiredFeatures":
            suggest = "required_features"
        elif key == "requiredQuotaIds":
            suggest = "required_quota_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkuSettingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkuSettingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkuSettingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 capabilities: Optional[Sequence['outputs.SkuCapabilityResponse']] = None,
                 capacity: Optional['outputs.SkuSettingResponseCapacity'] = None,
                 costs: Optional[Sequence['outputs.SkuCostResponse']] = None,
                 family: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 location_info: Optional[Sequence['outputs.SkuLocationInfoResponse']] = None,
                 locations: Optional[Sequence[builtins.str]] = None,
                 required_features: Optional[Sequence[builtins.str]] = None,
                 required_quota_ids: Optional[Sequence[builtins.str]] = None,
                 size: Optional[builtins.str] = None,
                 tier: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name.
        :param Sequence['SkuCapabilityResponse'] capabilities: The capabilities.
        :param 'SkuSettingResponseCapacity' capacity: The capacity.
        :param Sequence['SkuCostResponse'] costs: The costs.
        :param builtins.str family: The family.
        :param builtins.str kind: The kind.
        :param Sequence['SkuLocationInfoResponse'] location_info: The location info.
        :param Sequence[builtins.str] locations: The locations.
        :param Sequence[builtins.str] required_features: The required features.
        :param Sequence[builtins.str] required_quota_ids: The required quota ids.
        :param builtins.str size: The size.
        :param builtins.str tier: The tier.
        """
        pulumi.set(__self__, "name", name)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if costs is not None:
            pulumi.set(__self__, "costs", costs)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location_info is not None:
            pulumi.set(__self__, "location_info", location_info)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)
        if required_quota_ids is not None:
            pulumi.set(__self__, "required_quota_ids", required_quota_ids)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence['outputs.SkuCapabilityResponse']]:
        """
        The capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def capacity(self) -> Optional['outputs.SkuSettingResponseCapacity']:
        """
        The capacity.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def costs(self) -> Optional[Sequence['outputs.SkuCostResponse']]:
        """
        The costs.
        """
        return pulumi.get(self, "costs")

    @property
    @pulumi.getter
    def family(self) -> Optional[builtins.str]:
        """
        The family.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        The kind.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="locationInfo")
    def location_info(self) -> Optional[Sequence['outputs.SkuLocationInfoResponse']]:
        """
        The location info.
        """
        return pulumi.get(self, "location_info")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[builtins.str]]:
        """
        The locations.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")

    @property
    @pulumi.getter(name="requiredQuotaIds")
    def required_quota_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        The required quota ids.
        """
        return pulumi.get(self, "required_quota_ids")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.str]:
        """
        The size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[builtins.str]:
        """
        The tier.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SkuSettingResponseCapacity(dict):
    """
    The capacity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleType":
            suggest = "scale_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkuSettingResponseCapacity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkuSettingResponseCapacity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkuSettingResponseCapacity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum: builtins.int,
                 default: Optional[builtins.int] = None,
                 maximum: Optional[builtins.int] = None,
                 scale_type: Optional[builtins.str] = None):
        """
        The capacity.
        :param builtins.int minimum: The minimum.
        :param builtins.int default: The default.
        :param builtins.int maximum: The maximum.
        :param builtins.str scale_type: The scale type.
        """
        pulumi.set(__self__, "minimum", minimum)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if scale_type is not None:
            pulumi.set(__self__, "scale_type", scale_type)

    @property
    @pulumi.getter
    def minimum(self) -> builtins.int:
        """
        The minimum.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def default(self) -> Optional[builtins.int]:
        """
        The default.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[builtins.int]:
        """
        The maximum.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> Optional[builtins.str]:
        """
        The scale type.
        """
        return pulumi.get(self, "scale_type")


@pulumi.output_type
class SkuZoneDetailResponse(dict):
    def __init__(__self__, *,
                 capabilities: Optional[Sequence['outputs.SkuCapabilityResponse']] = None,
                 name: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence['SkuCapabilityResponse'] capabilities: The capabilities.
        :param Sequence[builtins.str] name: The name.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence['outputs.SkuCapabilityResponse']]:
        """
        The capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def name(self) -> Optional[Sequence[builtins.str]]:
        """
        The name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SubscriberSettingResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterRules":
            suggest = "filter_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriberSettingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriberSettingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriberSettingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_rules: Optional[Sequence['outputs.FilterRuleResponse']] = None):
        """
        :param Sequence['FilterRuleResponse'] filter_rules: The filter rules.
        """
        if filter_rules is not None:
            pulumi.set(__self__, "filter_rules", filter_rules)

    @property
    @pulumi.getter(name="filterRules")
    def filter_rules(self) -> Optional[Sequence['outputs.FilterRuleResponse']]:
        """
        The filter rules.
        """
        return pulumi.get(self, "filter_rules")


@pulumi.output_type
class SubscriptionStateOverrideActionResponse(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 state: builtins.str):
        """
        :param builtins.str action: The action.
        :param builtins.str state: The state.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        The action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class SubscriptionStateRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedActions":
            suggest = "allowed_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionStateRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionStateRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionStateRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_actions: Optional[Sequence[builtins.str]] = None,
                 state: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] allowed_actions: The allowed actions.
        :param builtins.str state: The subscription state.
        """
        if allowed_actions is not None:
            pulumi.set(__self__, "allowed_actions", allowed_actions)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="allowedActions")
    def allowed_actions(self) -> Optional[Sequence[builtins.str]]:
        """
        The allowed actions.
        """
        return pulumi.get(self, "allowed_actions")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        The subscription state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class SwaggerSpecificationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersions":
            suggest = "api_versions"
        elif key == "swaggerSpecFolderUri":
            suggest = "swagger_spec_folder_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwaggerSpecificationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwaggerSpecificationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwaggerSpecificationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_versions: Optional[Sequence[builtins.str]] = None,
                 swagger_spec_folder_uri: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] api_versions: The api versions.
        :param builtins.str swagger_spec_folder_uri: The swagger spec folder uri.
        """
        if api_versions is not None:
            pulumi.set(__self__, "api_versions", api_versions)
        if swagger_spec_folder_uri is not None:
            pulumi.set(__self__, "swagger_spec_folder_uri", swagger_spec_folder_uri)

    @property
    @pulumi.getter(name="apiVersions")
    def api_versions(self) -> Optional[Sequence[builtins.str]]:
        """
        The api versions.
        """
        return pulumi.get(self, "api_versions")

    @property
    @pulumi.getter(name="swaggerSpecFolderUri")
    def swagger_spec_folder_uri(self) -> Optional[builtins.str]:
        """
        The swagger spec folder uri.
        """
        return pulumi.get(self, "swagger_spec_folder_uri")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ThirdPartyExtensionResponse(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.str name: Name of third party extension.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of third party extension.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ThrottlingMetricResponse(dict):
    def __init__(__self__, *,
                 limit: builtins.float,
                 type: builtins.str,
                 interval: Optional[builtins.str] = None):
        """
        :param builtins.float limit: The limit.
        :param builtins.str type: The throttling metric type
        :param builtins.str interval: The interval.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def limit(self) -> builtins.float:
        """
        The limit.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The throttling metric type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def interval(self) -> Optional[builtins.str]:
        """
        The interval.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class ThrottlingRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "requiredFeatures":
            suggest = "required_features"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: builtins.str,
                 metrics: Sequence['outputs.ThrottlingMetricResponse'],
                 application_id: Optional[Sequence[builtins.str]] = None,
                 required_features: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str action: The action.
        :param Sequence['ThrottlingMetricResponse'] metrics: The metrics.
        :param Sequence[builtins.str] application_id: The application id.
        :param Sequence[builtins.str] required_features: The required features.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "metrics", metrics)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if required_features is not None:
            pulumi.set(__self__, "required_features", required_features)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        The action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.ThrottlingMetricResponse']:
        """
        The metrics.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[Sequence[builtins.str]]:
        """
        The application id.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="requiredFeatures")
    def required_features(self) -> Optional[Sequence[builtins.str]]:
        """
        The required features.
        """
        return pulumi.get(self, "required_features")


@pulumi.output_type
class TokenAuthConfigurationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationScheme":
            suggest = "authentication_scheme"
        elif key == "disableCertificateAuthenticationFallback":
            suggest = "disable_certificate_authentication_fallback"
        elif key == "signedRequestScope":
            suggest = "signed_request_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TokenAuthConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TokenAuthConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TokenAuthConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_scheme: Optional[builtins.str] = None,
                 disable_certificate_authentication_fallback: Optional[builtins.bool] = None,
                 signed_request_scope: Optional[builtins.str] = None):
        """
        :param builtins.str authentication_scheme: The authentication scheme.
        :param builtins.bool disable_certificate_authentication_fallback: Whether certification authentication fallback is disabled.
        :param builtins.str signed_request_scope: The signed request scope.
        """
        if authentication_scheme is not None:
            pulumi.set(__self__, "authentication_scheme", authentication_scheme)
        if disable_certificate_authentication_fallback is not None:
            pulumi.set(__self__, "disable_certificate_authentication_fallback", disable_certificate_authentication_fallback)
        if signed_request_scope is not None:
            pulumi.set(__self__, "signed_request_scope", signed_request_scope)

    @property
    @pulumi.getter(name="authenticationScheme")
    def authentication_scheme(self) -> Optional[builtins.str]:
        """
        The authentication scheme.
        """
        return pulumi.get(self, "authentication_scheme")

    @property
    @pulumi.getter(name="disableCertificateAuthenticationFallback")
    def disable_certificate_authentication_fallback(self) -> Optional[builtins.bool]:
        """
        Whether certification authentication fallback is disabled.
        """
        return pulumi.get(self, "disable_certificate_authentication_fallback")

    @property
    @pulumi.getter(name="signedRequestScope")
    def signed_request_scope(self) -> Optional[builtins.str]:
        """
        The signed request scope.
        """
        return pulumi.get(self, "signed_request_scope")


@pulumi.output_type
class TypedErrorInfoResponse(dict):
    """
    Error information.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: builtins.str):
        """
        Error information.
        :param Any info: The error information.
        :param builtins.str type: The type of the error.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def info(self) -> Any:
        """
        The error information.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the error.
        """
        return pulumi.get(self, "type")


