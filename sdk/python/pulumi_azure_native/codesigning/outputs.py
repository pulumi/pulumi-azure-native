# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AccountSkuResponse',
    'CertificateResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AccountSkuResponse(dict):
    """
    SKU of the trusted signing account.
    """
    def __init__(__self__, *,
                 name: builtins.str):
        """
        SKU of the trusted signing account.
        :param builtins.str name: Name of the SKU.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SKU.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CertificateResponse(dict):
    """
    Properties of the certificate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdDate":
            suggest = "created_date"
        elif key == "effectiveAt":
            suggest = "effective_at"
        elif key == "enhancedKeyUsage":
            suggest = "enhanced_key_usage"
        elif key == "expiryDate":
            suggest = "expiry_date"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "requestedAt":
            suggest = "requested_at"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "subjectName":
            suggest = "subject_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: builtins.str,
                 created_date: Optional[builtins.str] = None,
                 effective_at: Optional[builtins.str] = None,
                 enhanced_key_usage: Optional[builtins.str] = None,
                 expiry_date: Optional[builtins.str] = None,
                 failure_reason: Optional[builtins.str] = None,
                 reason: Optional[builtins.str] = None,
                 remarks: Optional[builtins.str] = None,
                 requested_at: Optional[builtins.str] = None,
                 serial_number: Optional[builtins.str] = None,
                 subject_name: Optional[builtins.str] = None,
                 thumbprint: Optional[builtins.str] = None):
        """
        Properties of the certificate.
        :param builtins.str status: Status of the certificate.
        :param builtins.str created_date: Certificate created date.
        :param builtins.str effective_at: The timestamp when the revocation is effective.
        :param builtins.str enhanced_key_usage: Enhanced key usage of the certificate.
        :param builtins.str expiry_date: Certificate expiry date.
        :param builtins.str failure_reason: Reason for the revocation failure.
        :param builtins.str reason: Reason for revocation.
        :param builtins.str remarks: Remarks for the revocation.
        :param builtins.str requested_at: The timestamp when the revocation is requested.
        :param builtins.str serial_number: Serial number of the certificate.
        :param builtins.str subject_name: Subject name of the certificate.
        :param builtins.str thumbprint: Thumbprint of the certificate.
        """
        pulumi.set(__self__, "status", status)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if effective_at is not None:
            pulumi.set(__self__, "effective_at", effective_at)
        if enhanced_key_usage is not None:
            pulumi.set(__self__, "enhanced_key_usage", enhanced_key_usage)
        if expiry_date is not None:
            pulumi.set(__self__, "expiry_date", expiry_date)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if requested_at is not None:
            pulumi.set(__self__, "requested_at", requested_at)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if subject_name is not None:
            pulumi.set(__self__, "subject_name", subject_name)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the certificate.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[builtins.str]:
        """
        Certificate created date.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="effectiveAt")
    def effective_at(self) -> Optional[builtins.str]:
        """
        The timestamp when the revocation is effective.
        """
        return pulumi.get(self, "effective_at")

    @property
    @pulumi.getter(name="enhancedKeyUsage")
    def enhanced_key_usage(self) -> Optional[builtins.str]:
        """
        Enhanced key usage of the certificate.
        """
        return pulumi.get(self, "enhanced_key_usage")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> Optional[builtins.str]:
        """
        Certificate expiry date.
        """
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[builtins.str]:
        """
        Reason for the revocation failure.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter
    def reason(self) -> Optional[builtins.str]:
        """
        Reason for revocation.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[builtins.str]:
        """
        Remarks for the revocation.
        """
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter(name="requestedAt")
    def requested_at(self) -> Optional[builtins.str]:
        """
        The timestamp when the revocation is requested.
        """
        return pulumi.get(self, "requested_at")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[builtins.str]:
        """
        Serial number of the certificate.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="subjectName")
    def subject_name(self) -> Optional[builtins.str]:
        """
        Subject name of the certificate.
        """
        return pulumi.get(self, "subject_name")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[builtins.str]:
        """
        Thumbprint of the certificate.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


