# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['CertificateProfileArgs', 'CertificateProfile']

@pulumi.input_type
class CertificateProfileArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 profile_type: pulumi.Input[Union[str, 'ProfileType']],
                 resource_group_name: pulumi.Input[str],
                 identity_validation_id: Optional[pulumi.Input[str]] = None,
                 include_city: Optional[pulumi.Input[bool]] = None,
                 include_country: Optional[pulumi.Input[bool]] = None,
                 include_postal_code: Optional[pulumi.Input[bool]] = None,
                 include_state: Optional[pulumi.Input[bool]] = None,
                 include_street_address: Optional[pulumi.Input[bool]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CertificateProfile resource.
        :param pulumi.Input[str] account_name: Trusted Signing account name.
        :param pulumi.Input[Union[str, 'ProfileType']] profile_type: Profile type of the certificate.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] identity_validation_id: Identity validation id used for the certificate subject name.
        :param pulumi.Input[bool] include_city: Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        :param pulumi.Input[bool] include_country: Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        :param pulumi.Input[bool] include_postal_code: Whether to include PC in the certificate subject name.
        :param pulumi.Input[bool] include_state: Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        :param pulumi.Input[bool] include_street_address: Whether to include STREET in the certificate subject name.
        :param pulumi.Input[str] profile_name: Certificate profile name.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "profile_type", profile_type)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if identity_validation_id is not None:
            pulumi.set(__self__, "identity_validation_id", identity_validation_id)
        if include_city is None:
            include_city = False
        if include_city is not None:
            pulumi.set(__self__, "include_city", include_city)
        if include_country is None:
            include_country = False
        if include_country is not None:
            pulumi.set(__self__, "include_country", include_country)
        if include_postal_code is None:
            include_postal_code = False
        if include_postal_code is not None:
            pulumi.set(__self__, "include_postal_code", include_postal_code)
        if include_state is None:
            include_state = False
        if include_state is not None:
            pulumi.set(__self__, "include_state", include_state)
        if include_street_address is None:
            include_street_address = False
        if include_street_address is not None:
            pulumi.set(__self__, "include_street_address", include_street_address)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Trusted Signing account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Input[Union[str, 'ProfileType']]:
        """
        Profile type of the certificate.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: pulumi.Input[Union[str, 'ProfileType']]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="identityValidationId")
    def identity_validation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identity validation id used for the certificate subject name.
        """
        return pulumi.get(self, "identity_validation_id")

    @identity_validation_id.setter
    def identity_validation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_validation_id", value)

    @property
    @pulumi.getter(name="includeCity")
    def include_city(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        """
        return pulumi.get(self, "include_city")

    @include_city.setter
    def include_city(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_city", value)

    @property
    @pulumi.getter(name="includeCountry")
    def include_country(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        """
        return pulumi.get(self, "include_country")

    @include_country.setter
    def include_country(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_country", value)

    @property
    @pulumi.getter(name="includePostalCode")
    def include_postal_code(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include PC in the certificate subject name.
        """
        return pulumi.get(self, "include_postal_code")

    @include_postal_code.setter
    def include_postal_code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_postal_code", value)

    @property
    @pulumi.getter(name="includeState")
    def include_state(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        """
        return pulumi.get(self, "include_state")

    @include_state.setter
    def include_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_state", value)

    @property
    @pulumi.getter(name="includeStreetAddress")
    def include_street_address(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include STREET in the certificate subject name.
        """
        return pulumi.get(self, "include_street_address")

    @include_street_address.setter
    def include_street_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_street_address", value)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate profile name.
        """
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_name", value)


class CertificateProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 identity_validation_id: Optional[pulumi.Input[str]] = None,
                 include_city: Optional[pulumi.Input[bool]] = None,
                 include_country: Optional[pulumi.Input[bool]] = None,
                 include_postal_code: Optional[pulumi.Input[bool]] = None,
                 include_state: Optional[pulumi.Input[bool]] = None,
                 include_street_address: Optional[pulumi.Input[bool]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[Union[str, 'ProfileType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Certificate profile resource.
        Azure REST API version: 2024-02-05-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Trusted Signing account name.
        :param pulumi.Input[str] identity_validation_id: Identity validation id used for the certificate subject name.
        :param pulumi.Input[bool] include_city: Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        :param pulumi.Input[bool] include_country: Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        :param pulumi.Input[bool] include_postal_code: Whether to include PC in the certificate subject name.
        :param pulumi.Input[bool] include_state: Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        :param pulumi.Input[bool] include_street_address: Whether to include STREET in the certificate subject name.
        :param pulumi.Input[str] profile_name: Certificate profile name.
        :param pulumi.Input[Union[str, 'ProfileType']] profile_type: Profile type of the certificate.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Certificate profile resource.
        Azure REST API version: 2024-02-05-preview.

        :param str resource_name: The name of the resource.
        :param CertificateProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 identity_validation_id: Optional[pulumi.Input[str]] = None,
                 include_city: Optional[pulumi.Input[bool]] = None,
                 include_country: Optional[pulumi.Input[bool]] = None,
                 include_postal_code: Optional[pulumi.Input[bool]] = None,
                 include_state: Optional[pulumi.Input[bool]] = None,
                 include_street_address: Optional[pulumi.Input[bool]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[Union[str, 'ProfileType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateProfileArgs.__new__(CertificateProfileArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["identity_validation_id"] = identity_validation_id
            if include_city is None:
                include_city = False
            __props__.__dict__["include_city"] = include_city
            if include_country is None:
                include_country = False
            __props__.__dict__["include_country"] = include_country
            if include_postal_code is None:
                include_postal_code = False
            __props__.__dict__["include_postal_code"] = include_postal_code
            if include_state is None:
                include_state = False
            __props__.__dict__["include_state"] = include_state
            if include_street_address is None:
                include_street_address = False
            __props__.__dict__["include_street_address"] = include_street_address
            __props__.__dict__["profile_name"] = profile_name
            if profile_type is None and not opts.urn:
                raise TypeError("Missing required property 'profile_type'")
            __props__.__dict__["profile_type"] = profile_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["city"] = None
            __props__.__dict__["common_name"] = None
            __props__.__dict__["country"] = None
            __props__.__dict__["enhanced_key_usage"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["organization"] = None
            __props__.__dict__["organization_unit"] = None
            __props__.__dict__["postal_code"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["street_address"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:codesigning/v20240205preview:CertificateProfile")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CertificateProfile, __self__).__init__(
            'azure-native:codesigning:CertificateProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CertificateProfile':
        """
        Get an existing CertificateProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CertificateProfileArgs.__new__(CertificateProfileArgs)

        __props__.__dict__["city"] = None
        __props__.__dict__["common_name"] = None
        __props__.__dict__["country"] = None
        __props__.__dict__["enhanced_key_usage"] = None
        __props__.__dict__["identity_validation_id"] = None
        __props__.__dict__["include_city"] = None
        __props__.__dict__["include_country"] = None
        __props__.__dict__["include_postal_code"] = None
        __props__.__dict__["include_state"] = None
        __props__.__dict__["include_street_address"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["organization"] = None
        __props__.__dict__["organization_unit"] = None
        __props__.__dict__["postal_code"] = None
        __props__.__dict__["profile_type"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["street_address"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return CertificateProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Output[str]:
        """
        Used as L in the certificate subject name.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[str]:
        """
        Used as CN in the certificate subject name.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[str]:
        """
        Used as C in the certificate subject name.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="enhancedKeyUsage")
    def enhanced_key_usage(self) -> pulumi.Output[str]:
        """
        Enhanced key usage of the certificate.
        """
        return pulumi.get(self, "enhanced_key_usage")

    @property
    @pulumi.getter(name="identityValidationId")
    def identity_validation_id(self) -> pulumi.Output[Optional[str]]:
        """
        Identity validation id used for the certificate subject name.
        """
        return pulumi.get(self, "identity_validation_id")

    @property
    @pulumi.getter(name="includeCity")
    def include_city(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        """
        return pulumi.get(self, "include_city")

    @property
    @pulumi.getter(name="includeCountry")
    def include_country(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        """
        return pulumi.get(self, "include_country")

    @property
    @pulumi.getter(name="includePostalCode")
    def include_postal_code(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include PC in the certificate subject name.
        """
        return pulumi.get(self, "include_postal_code")

    @property
    @pulumi.getter(name="includeState")
    def include_state(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        """
        return pulumi.get(self, "include_state")

    @property
    @pulumi.getter(name="includeStreetAddress")
    def include_street_address(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include STREET in the certificate subject name.
        """
        return pulumi.get(self, "include_street_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        Used as O in the certificate subject name.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationUnit")
    def organization_unit(self) -> pulumi.Output[str]:
        """
        Used as OU in the private trust certificate subject name.
        """
        return pulumi.get(self, "organization_unit")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Output[str]:
        """
        Used as PC in the certificate subject name.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[str]:
        """
        Profile type of the certificate.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Status of the current operation on certificate profile.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Used as S in the certificate subject name.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the certificate profile.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> pulumi.Output[str]:
        """
        Used as STREET in the certificate subject name.
        """
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

