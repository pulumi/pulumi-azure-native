# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AzStackHCIClusterPropertiesArgs',
    'AzStackHCIClusterPropertiesArgsDict',
    'AzStackHCIFabricModelCustomPropertiesArgs',
    'AzStackHCIFabricModelCustomPropertiesArgsDict',
    'ConnectionDetailsArgs',
    'ConnectionDetailsArgsDict',
    'DiskControllerInputsArgs',
    'DiskControllerInputsArgsDict',
    'FabricAgentModelPropertiesArgs',
    'FabricAgentModelPropertiesArgsDict',
    'FabricModelPropertiesArgs',
    'FabricModelPropertiesArgsDict',
    'GroupConnectivityInformationArgs',
    'GroupConnectivityInformationArgsDict',
    'HyperVMigrateFabricModelCustomPropertiesArgs',
    'HyperVMigrateFabricModelCustomPropertiesArgsDict',
    'HyperVToAzStackHCIDiskInputArgs',
    'HyperVToAzStackHCIDiskInputArgsDict',
    'HyperVToAzStackHCINicInputArgs',
    'HyperVToAzStackHCINicInputArgsDict',
    'HyperVToAzStackHCIPolicyModelCustomPropertiesArgs',
    'HyperVToAzStackHCIPolicyModelCustomPropertiesArgsDict',
    'HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs',
    'HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgsDict',
    'HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs',
    'HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict',
    'IdentityModelArgs',
    'IdentityModelArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'PolicyModelPropertiesArgs',
    'PolicyModelPropertiesArgsDict',
    'PrivateEndpointConnectionProxyPropertiesArgs',
    'PrivateEndpointConnectionProxyPropertiesArgsDict',
    'PrivateEndpointConnectionResponsePropertiesArgs',
    'PrivateEndpointConnectionResponsePropertiesArgsDict',
    'PrivateEndpointArgs',
    'PrivateEndpointArgsDict',
    'PrivateLinkServiceConnectionStateArgs',
    'PrivateLinkServiceConnectionStateArgsDict',
    'PrivateLinkServiceConnectionArgs',
    'PrivateLinkServiceConnectionArgsDict',
    'PrivateLinkServiceProxyArgs',
    'PrivateLinkServiceProxyArgsDict',
    'ProtectedItemDynamicMemoryConfigArgs',
    'ProtectedItemDynamicMemoryConfigArgsDict',
    'ProtectedItemModelPropertiesArgs',
    'ProtectedItemModelPropertiesArgsDict',
    'RemotePrivateEndpointConnectionArgs',
    'RemotePrivateEndpointConnectionArgsDict',
    'RemotePrivateEndpointArgs',
    'RemotePrivateEndpointArgsDict',
    'ReplicationExtensionModelPropertiesArgs',
    'ReplicationExtensionModelPropertiesArgsDict',
    'StorageContainerPropertiesArgs',
    'StorageContainerPropertiesArgsDict',
    'VMwareFabricAgentModelCustomPropertiesArgs',
    'VMwareFabricAgentModelCustomPropertiesArgsDict',
    'VMwareMigrateFabricModelCustomPropertiesArgs',
    'VMwareMigrateFabricModelCustomPropertiesArgsDict',
    'VMwareToAzStackHCIDiskInputArgs',
    'VMwareToAzStackHCIDiskInputArgsDict',
    'VMwareToAzStackHCINicInputArgs',
    'VMwareToAzStackHCINicInputArgsDict',
    'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs',
    'VMwareToAzStackHCIPolicyModelCustomPropertiesArgsDict',
    'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs',
    'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgsDict',
    'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs',
    'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict',
    'VaultModelPropertiesArgs',
    'VaultModelPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class AzStackHCIClusterPropertiesArgsDict(TypedDict):
        """
        AzStackHCI cluster properties.
        """
        cluster_name: pulumi.Input[str]
        """
        Gets or sets the AzStackHCICluster FQDN name.
        """
        resource_name: pulumi.Input[str]
        """
        Gets or sets the AzStackHCICluster resource name.
        """
        storage_account_name: pulumi.Input[str]
        """
        Gets or sets the Storage account name.
        """
        storage_containers: pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgsDict']]]
        """
        Gets or sets the list of AzStackHCICluster Storage Container.
        """
elif False:
    AzStackHCIClusterPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzStackHCIClusterPropertiesArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 storage_account_name: pulumi.Input[str],
                 storage_containers: pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]]):
        """
        AzStackHCI cluster properties.
        :param pulumi.Input[str] cluster_name: Gets or sets the AzStackHCICluster FQDN name.
        :param pulumi.Input[str] resource_name: Gets or sets the AzStackHCICluster resource name.
        :param pulumi.Input[str] storage_account_name: Gets or sets the Storage account name.
        :param pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]] storage_containers: Gets or sets the list of AzStackHCICluster Storage Container.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "storage_containers", storage_containers)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the AzStackHCICluster FQDN name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the AzStackHCICluster resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the Storage account name.
        """
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="storageContainers")
    def storage_containers(self) -> pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]]:
        """
        Gets or sets the list of AzStackHCICluster Storage Container.
        """
        return pulumi.get(self, "storage_containers")

    @storage_containers.setter
    def storage_containers(self, value: pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]]):
        pulumi.set(self, "storage_containers", value)


if not MYPY:
    class AzStackHCIFabricModelCustomPropertiesArgsDict(TypedDict):
        """
        AzStackHCI fabric model custom properties.
        """
        az_stack_hci_site_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the AzStackHCI site.
        """
        cluster: pulumi.Input['AzStackHCIClusterPropertiesArgsDict']
        """
        AzStackHCI cluster properties.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for FabricModelCustomProperties.
        Expected value is 'AzStackHCI'.
        """
        migration_solution_id: pulumi.Input[str]
        """
        Gets or sets the Migration solution ARM Id.
        """
elif False:
    AzStackHCIFabricModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzStackHCIFabricModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 az_stack_hci_site_id: pulumi.Input[str],
                 cluster: pulumi.Input['AzStackHCIClusterPropertiesArgs'],
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str]):
        """
        AzStackHCI fabric model custom properties.
        :param pulumi.Input[str] az_stack_hci_site_id: Gets or sets the ARM Id of the AzStackHCI site.
        :param pulumi.Input['AzStackHCIClusterPropertiesArgs'] cluster: AzStackHCI cluster properties.
        :param pulumi.Input[str] instance_type: Discriminator property for FabricModelCustomProperties.
               Expected value is 'AzStackHCI'.
        :param pulumi.Input[str] migration_solution_id: Gets or sets the Migration solution ARM Id.
        """
        pulumi.set(__self__, "az_stack_hci_site_id", az_stack_hci_site_id)
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "instance_type", 'AzStackHCI')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)

    @property
    @pulumi.getter(name="azStackHciSiteId")
    def az_stack_hci_site_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the AzStackHCI site.
        """
        return pulumi.get(self, "az_stack_hci_site_id")

    @az_stack_hci_site_id.setter
    def az_stack_hci_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "az_stack_hci_site_id", value)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input['AzStackHCIClusterPropertiesArgs']:
        """
        AzStackHCI cluster properties.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input['AzStackHCIClusterPropertiesArgs']):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for FabricModelCustomProperties.
        Expected value is 'AzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Migration solution ARM Id.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)


if not MYPY:
    class ConnectionDetailsArgsDict(TypedDict):
        """
        Private endpoint connection details at member level.
        """
        group_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets group id.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets id.
        """
        link_identifier: NotRequired[pulumi.Input[str]]
        """
        Gets or sets link identifier.
        """
        member_name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets member name.
        """
        private_ip_address: NotRequired[pulumi.Input[str]]
        """
        Gets or sets private IP address.
        """
elif False:
    ConnectionDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionDetailsArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 link_identifier: Optional[pulumi.Input[str]] = None,
                 member_name: Optional[pulumi.Input[str]] = None,
                 private_ip_address: Optional[pulumi.Input[str]] = None):
        """
        Private endpoint connection details at member level.
        :param pulumi.Input[str] group_id: Gets or sets group id.
        :param pulumi.Input[str] id: Gets or sets id.
        :param pulumi.Input[str] link_identifier: Gets or sets link identifier.
        :param pulumi.Input[str] member_name: Gets or sets member name.
        :param pulumi.Input[str] private_ip_address: Gets or sets private IP address.
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if link_identifier is not None:
            pulumi.set(__self__, "link_identifier", link_identifier)
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="linkIdentifier")
    def link_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets link identifier.
        """
        return pulumi.get(self, "link_identifier")

    @link_identifier.setter
    def link_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_identifier", value)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets member name.
        """
        return pulumi.get(self, "member_name")

    @member_name.setter
    def member_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_name", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets private IP address.
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_address", value)


if not MYPY:
    class DiskControllerInputsArgsDict(TypedDict):
        """
        Disk controller.
        """
        controller_id: pulumi.Input[int]
        """
        Gets or sets the controller ID.
        """
        controller_location: pulumi.Input[int]
        """
        Gets or sets the controller Location.
        """
        controller_name: pulumi.Input[str]
        """
        Gets or sets the controller name (IDE,SCSI).
        """
elif False:
    DiskControllerInputsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DiskControllerInputsArgs:
    def __init__(__self__, *,
                 controller_id: pulumi.Input[int],
                 controller_location: pulumi.Input[int],
                 controller_name: pulumi.Input[str]):
        """
        Disk controller.
        :param pulumi.Input[int] controller_id: Gets or sets the controller ID.
        :param pulumi.Input[int] controller_location: Gets or sets the controller Location.
        :param pulumi.Input[str] controller_name: Gets or sets the controller name (IDE,SCSI).
        """
        pulumi.set(__self__, "controller_id", controller_id)
        pulumi.set(__self__, "controller_location", controller_location)
        pulumi.set(__self__, "controller_name", controller_name)

    @property
    @pulumi.getter(name="controllerId")
    def controller_id(self) -> pulumi.Input[int]:
        """
        Gets or sets the controller ID.
        """
        return pulumi.get(self, "controller_id")

    @controller_id.setter
    def controller_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "controller_id", value)

    @property
    @pulumi.getter(name="controllerLocation")
    def controller_location(self) -> pulumi.Input[int]:
        """
        Gets or sets the controller Location.
        """
        return pulumi.get(self, "controller_location")

    @controller_location.setter
    def controller_location(self, value: pulumi.Input[int]):
        pulumi.set(self, "controller_location", value)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the controller name (IDE,SCSI).
        """
        return pulumi.get(self, "controller_name")

    @controller_name.setter
    def controller_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "controller_name", value)


if not MYPY:
    class FabricAgentModelPropertiesArgsDict(TypedDict):
        """
        Fabric agent model properties.
        """
        authentication_identity: pulumi.Input['IdentityModelArgsDict']
        """
        Identity model.
        """
        custom_properties: pulumi.Input['VMwareFabricAgentModelCustomPropertiesArgsDict']
        """
        Fabric agent model custom properties.
        """
        machine_id: pulumi.Input[str]
        """
        Gets or sets the machine Id where fabric agent is running.
        """
        machine_name: pulumi.Input[str]
        """
        Gets or sets the machine name where fabric agent is running.
        """
        resource_access_identity: pulumi.Input['IdentityModelArgsDict']
        """
        Identity model.
        """
elif False:
    FabricAgentModelPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FabricAgentModelPropertiesArgs:
    def __init__(__self__, *,
                 authentication_identity: pulumi.Input['IdentityModelArgs'],
                 custom_properties: pulumi.Input['VMwareFabricAgentModelCustomPropertiesArgs'],
                 machine_id: pulumi.Input[str],
                 machine_name: pulumi.Input[str],
                 resource_access_identity: pulumi.Input['IdentityModelArgs']):
        """
        Fabric agent model properties.
        :param pulumi.Input['IdentityModelArgs'] authentication_identity: Identity model.
        :param pulumi.Input['VMwareFabricAgentModelCustomPropertiesArgs'] custom_properties: Fabric agent model custom properties.
        :param pulumi.Input[str] machine_id: Gets or sets the machine Id where fabric agent is running.
        :param pulumi.Input[str] machine_name: Gets or sets the machine name where fabric agent is running.
        :param pulumi.Input['IdentityModelArgs'] resource_access_identity: Identity model.
        """
        pulumi.set(__self__, "authentication_identity", authentication_identity)
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "machine_id", machine_id)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "resource_access_identity", resource_access_identity)

    @property
    @pulumi.getter(name="authenticationIdentity")
    def authentication_identity(self) -> pulumi.Input['IdentityModelArgs']:
        """
        Identity model.
        """
        return pulumi.get(self, "authentication_identity")

    @authentication_identity.setter
    def authentication_identity(self, value: pulumi.Input['IdentityModelArgs']):
        pulumi.set(self, "authentication_identity", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input['VMwareFabricAgentModelCustomPropertiesArgs']:
        """
        Fabric agent model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input['VMwareFabricAgentModelCustomPropertiesArgs']):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the machine Id where fabric agent is running.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the machine name where fabric agent is running.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_name", value)

    @property
    @pulumi.getter(name="resourceAccessIdentity")
    def resource_access_identity(self) -> pulumi.Input['IdentityModelArgs']:
        """
        Identity model.
        """
        return pulumi.get(self, "resource_access_identity")

    @resource_access_identity.setter
    def resource_access_identity(self, value: pulumi.Input['IdentityModelArgs']):
        pulumi.set(self, "resource_access_identity", value)


if not MYPY:
    class FabricModelPropertiesArgsDict(TypedDict):
        """
        Fabric model properties.
        """
        custom_properties: pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgsDict', 'HyperVMigrateFabricModelCustomPropertiesArgsDict', 'VMwareMigrateFabricModelCustomPropertiesArgsDict']]
        """
        Fabric model custom properties.
        """
elif False:
    FabricModelPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FabricModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']]):
        """
        Fabric model properties.
        :param pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']] custom_properties: Fabric model custom properties.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']]:
        """
        Fabric model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)


if not MYPY:
    class GroupConnectivityInformationArgsDict(TypedDict):
        """
        Represents of a connection's group information.
        """
        customer_visible_fqdns: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Gets or sets customer visible FQDNs.
        """
        group_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets group id.
        """
        internal_fqdn: NotRequired[pulumi.Input[str]]
        """
        Gets or sets Internal Fqdn.
        """
        member_name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets member name.
        """
        private_link_service_arm_region: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the private link service arm region.
        """
        redirect_map_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the redirect map id.
        """
elif False:
    GroupConnectivityInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupConnectivityInformationArgs:
    def __init__(__self__, *,
                 customer_visible_fqdns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 internal_fqdn: Optional[pulumi.Input[str]] = None,
                 member_name: Optional[pulumi.Input[str]] = None,
                 private_link_service_arm_region: Optional[pulumi.Input[str]] = None,
                 redirect_map_id: Optional[pulumi.Input[str]] = None):
        """
        Represents of a connection's group information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] customer_visible_fqdns: Gets or sets customer visible FQDNs.
        :param pulumi.Input[str] group_id: Gets or sets group id.
        :param pulumi.Input[str] internal_fqdn: Gets or sets Internal Fqdn.
        :param pulumi.Input[str] member_name: Gets or sets member name.
        :param pulumi.Input[str] private_link_service_arm_region: Gets or sets the private link service arm region.
        :param pulumi.Input[str] redirect_map_id: Gets or sets the redirect map id.
        """
        if customer_visible_fqdns is not None:
            pulumi.set(__self__, "customer_visible_fqdns", customer_visible_fqdns)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if internal_fqdn is not None:
            pulumi.set(__self__, "internal_fqdn", internal_fqdn)
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)
        if private_link_service_arm_region is not None:
            pulumi.set(__self__, "private_link_service_arm_region", private_link_service_arm_region)
        if redirect_map_id is not None:
            pulumi.set(__self__, "redirect_map_id", redirect_map_id)

    @property
    @pulumi.getter(name="customerVisibleFqdns")
    def customer_visible_fqdns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets customer visible FQDNs.
        """
        return pulumi.get(self, "customer_visible_fqdns")

    @customer_visible_fqdns.setter
    def customer_visible_fqdns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "customer_visible_fqdns", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="internalFqdn")
    def internal_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets Internal Fqdn.
        """
        return pulumi.get(self, "internal_fqdn")

    @internal_fqdn.setter
    def internal_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_fqdn", value)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets member name.
        """
        return pulumi.get(self, "member_name")

    @member_name.setter
    def member_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_name", value)

    @property
    @pulumi.getter(name="privateLinkServiceArmRegion")
    def private_link_service_arm_region(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the private link service arm region.
        """
        return pulumi.get(self, "private_link_service_arm_region")

    @private_link_service_arm_region.setter
    def private_link_service_arm_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_service_arm_region", value)

    @property
    @pulumi.getter(name="redirectMapId")
    def redirect_map_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the redirect map id.
        """
        return pulumi.get(self, "redirect_map_id")

    @redirect_map_id.setter
    def redirect_map_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_map_id", value)


if not MYPY:
    class HyperVMigrateFabricModelCustomPropertiesArgsDict(TypedDict):
        """
        HyperV migrate fabric model custom properties.
        """
        hyper_v_site_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the HyperV site.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for FabricModelCustomProperties.
        Expected value is 'HyperVMigrate'.
        """
        migration_solution_id: pulumi.Input[str]
        """
        Gets or sets the migration solution ARM Id.
        """
elif False:
    HyperVMigrateFabricModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HyperVMigrateFabricModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 hyper_v_site_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str]):
        """
        HyperV migrate fabric model custom properties.
        :param pulumi.Input[str] hyper_v_site_id: Gets or sets the ARM Id of the HyperV site.
        :param pulumi.Input[str] instance_type: Discriminator property for FabricModelCustomProperties.
               Expected value is 'HyperVMigrate'.
        :param pulumi.Input[str] migration_solution_id: Gets or sets the migration solution ARM Id.
        """
        pulumi.set(__self__, "hyper_v_site_id", hyper_v_site_id)
        pulumi.set(__self__, "instance_type", 'HyperVMigrate')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)

    @property
    @pulumi.getter(name="hyperVSiteId")
    def hyper_v_site_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the HyperV site.
        """
        return pulumi.get(self, "hyper_v_site_id")

    @hyper_v_site_id.setter
    def hyper_v_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_site_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for FabricModelCustomProperties.
        Expected value is 'HyperVMigrate'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the migration solution ARM Id.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)


if not MYPY:
    class HyperVToAzStackHCIDiskInputArgsDict(TypedDict):
        """
        HyperVToAzStack disk input.
        """
        disk_file_format: pulumi.Input[str]
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        disk_id: pulumi.Input[str]
        """
        Gets or sets the disk Id.
        """
        disk_size_gb: pulumi.Input[float]
        """
        Gets or sets the disk size in GB.
        """
        is_os_disk: pulumi.Input[bool]
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        disk_block_size: NotRequired[pulumi.Input[float]]
        """
        Gets or sets a value of disk block size.
        """
        disk_controller: NotRequired[pulumi.Input['DiskControllerInputsArgsDict']]
        """
        Disk controller.
        """
        disk_identifier: NotRequired[pulumi.Input[str]]
        """
        Gets or sets a value of disk identifier.
        """
        disk_logical_sector_size: NotRequired[pulumi.Input[float]]
        """
        Gets or sets a value of disk logical sector size.
        """
        disk_physical_sector_size: NotRequired[pulumi.Input[float]]
        """
        Gets or sets a value of disk physical sector size.
        """
        is_dynamic: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        """
        storage_container_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target storage account ARM Id.
        """
elif False:
    HyperVToAzStackHCIDiskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HyperVToAzStackHCIDiskInputArgs:
    def __init__(__self__, *,
                 disk_file_format: pulumi.Input[str],
                 disk_id: pulumi.Input[str],
                 disk_size_gb: pulumi.Input[float],
                 is_os_disk: pulumi.Input[bool],
                 disk_block_size: Optional[pulumi.Input[float]] = None,
                 disk_controller: Optional[pulumi.Input['DiskControllerInputsArgs']] = None,
                 disk_identifier: Optional[pulumi.Input[str]] = None,
                 disk_logical_sector_size: Optional[pulumi.Input[float]] = None,
                 disk_physical_sector_size: Optional[pulumi.Input[float]] = None,
                 is_dynamic: Optional[pulumi.Input[bool]] = None,
                 storage_container_id: Optional[pulumi.Input[str]] = None):
        """
        HyperVToAzStack disk input.
        :param pulumi.Input[str] disk_file_format: Gets or sets the type of the virtual hard disk, vhd or vhdx.
        :param pulumi.Input[str] disk_id: Gets or sets the disk Id.
        :param pulumi.Input[float] disk_size_gb: Gets or sets the disk size in GB.
        :param pulumi.Input[bool] is_os_disk: Gets or sets a value indicating whether disk is os disk.
        :param pulumi.Input[float] disk_block_size: Gets or sets a value of disk block size.
        :param pulumi.Input['DiskControllerInputsArgs'] disk_controller: Disk controller.
        :param pulumi.Input[str] disk_identifier: Gets or sets a value of disk identifier.
        :param pulumi.Input[float] disk_logical_sector_size: Gets or sets a value of disk logical sector size.
        :param pulumi.Input[float] disk_physical_sector_size: Gets or sets a value of disk physical sector size.
        :param pulumi.Input[bool] is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage account ARM Id.
        """
        pulumi.set(__self__, "disk_file_format", disk_file_format)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        if disk_block_size is not None:
            pulumi.set(__self__, "disk_block_size", disk_block_size)
        if disk_controller is not None:
            pulumi.set(__self__, "disk_controller", disk_controller)
        if disk_identifier is not None:
            pulumi.set(__self__, "disk_identifier", disk_identifier)
        if disk_logical_sector_size is not None:
            pulumi.set(__self__, "disk_logical_sector_size", disk_logical_sector_size)
        if disk_physical_sector_size is not None:
            pulumi.set(__self__, "disk_physical_sector_size", disk_physical_sector_size)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if storage_container_id is not None:
            pulumi.set(__self__, "storage_container_id", storage_container_id)

    @property
    @pulumi.getter(name="diskFileFormat")
    def disk_file_format(self) -> pulumi.Input[str]:
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        return pulumi.get(self, "disk_file_format")

    @disk_file_format.setter
    def disk_file_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_file_format", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[float]:
        """
        Gets or sets the disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> pulumi.Input[bool]:
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        return pulumi.get(self, "is_os_disk")

    @is_os_disk.setter
    def is_os_disk(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_os_disk", value)

    @property
    @pulumi.getter(name="diskBlockSize")
    def disk_block_size(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets a value of disk block size.
        """
        return pulumi.get(self, "disk_block_size")

    @disk_block_size.setter
    def disk_block_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_block_size", value)

    @property
    @pulumi.getter(name="diskController")
    def disk_controller(self) -> Optional[pulumi.Input['DiskControllerInputsArgs']]:
        """
        Disk controller.
        """
        return pulumi.get(self, "disk_controller")

    @disk_controller.setter
    def disk_controller(self, value: Optional[pulumi.Input['DiskControllerInputsArgs']]):
        pulumi.set(self, "disk_controller", value)

    @property
    @pulumi.getter(name="diskIdentifier")
    def disk_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets a value of disk identifier.
        """
        return pulumi.get(self, "disk_identifier")

    @disk_identifier.setter
    def disk_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_identifier", value)

    @property
    @pulumi.getter(name="diskLogicalSectorSize")
    def disk_logical_sector_size(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets a value of disk logical sector size.
        """
        return pulumi.get(self, "disk_logical_sector_size")

    @disk_logical_sector_size.setter
    def disk_logical_sector_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_logical_sector_size", value)

    @property
    @pulumi.getter(name="diskPhysicalSectorSize")
    def disk_physical_sector_size(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets a value of disk physical sector size.
        """
        return pulumi.get(self, "disk_physical_sector_size")

    @disk_physical_sector_size.setter
    def disk_physical_sector_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_physical_sector_size", value)

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        """
        return pulumi.get(self, "is_dynamic")

    @is_dynamic.setter
    def is_dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target storage account ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_id", value)


if not MYPY:
    class HyperVToAzStackHCINicInputArgsDict(TypedDict):
        """
        HyperVToAzStackHCI NIC properties.
        """
        nic_id: pulumi.Input[str]
        """
        Gets or sets the NIC Id.
        """
        selection_type_for_failover: pulumi.Input[Union[str, 'VMNicSelection']]
        """
        Gets or sets the selection type of the NIC.
        """
        is_mac_migration_enabled: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether mac address migration is enabled.
        """
        is_static_ip_migration_enabled: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether static ip migration is enabled.
        """
        target_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        test_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
elif False:
    HyperVToAzStackHCINicInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HyperVToAzStackHCINicInputArgs:
    def __init__(__self__, *,
                 nic_id: pulumi.Input[str],
                 selection_type_for_failover: pulumi.Input[Union[str, 'VMNicSelection']],
                 is_mac_migration_enabled: Optional[pulumi.Input[bool]] = None,
                 is_static_ip_migration_enabled: Optional[pulumi.Input[bool]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None):
        """
        HyperVToAzStackHCI NIC properties.
        :param pulumi.Input[str] nic_id: Gets or sets the NIC Id.
        :param pulumi.Input[Union[str, 'VMNicSelection']] selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param pulumi.Input[bool] is_mac_migration_enabled: Gets or sets a value indicating whether mac address migration is enabled.
        :param pulumi.Input[bool] is_static_ip_migration_enabled: Gets or sets a value indicating whether static ip migration is enabled.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        if is_mac_migration_enabled is not None:
            pulumi.set(__self__, "is_mac_migration_enabled", is_mac_migration_enabled)
        if is_static_ip_migration_enabled is not None:
            pulumi.set(__self__, "is_static_ip_migration_enabled", is_static_ip_migration_enabled)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> pulumi.Input[Union[str, 'VMNicSelection']]:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @selection_type_for_failover.setter
    def selection_type_for_failover(self, value: pulumi.Input[Union[str, 'VMNicSelection']]):
        pulumi.set(self, "selection_type_for_failover", value)

    @property
    @pulumi.getter(name="isMacMigrationEnabled")
    def is_mac_migration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether mac address migration is enabled.
        """
        return pulumi.get(self, "is_mac_migration_enabled")

    @is_mac_migration_enabled.setter
    def is_mac_migration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mac_migration_enabled", value)

    @property
    @pulumi.getter(name="isStaticIpMigrationEnabled")
    def is_static_ip_migration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether static ip migration is enabled.
        """
        return pulumi.get(self, "is_static_ip_migration_enabled")

    @is_static_ip_migration_enabled.setter
    def is_static_ip_migration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_static_ip_migration_enabled", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)


if not MYPY:
    class HyperVToAzStackHCIPolicyModelCustomPropertiesArgsDict(TypedDict):
        """
        HyperV To AzStackHCI Policy model custom properties.
        """
        app_consistent_frequency_in_minutes: pulumi.Input[int]
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        crash_consistent_frequency_in_minutes: pulumi.Input[int]
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for PolicyModelCustomProperties.
        Expected value is 'HyperVToAzStackHCI'.
        """
        recovery_point_history_in_minutes: pulumi.Input[int]
        """
        Gets or sets the duration in minutes until which the recovery points need to be stored.
        """
elif False:
    HyperVToAzStackHCIPolicyModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HyperVToAzStackHCIPolicyModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 app_consistent_frequency_in_minutes: pulumi.Input[int],
                 crash_consistent_frequency_in_minutes: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 recovery_point_history_in_minutes: pulumi.Input[int]):
        """
        HyperV To AzStackHCI Policy model custom properties.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: Gets or sets the app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: Gets or sets the crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[str] instance_type: Discriminator property for PolicyModelCustomProperties.
               Expected value is 'HyperVToAzStackHCI'.
        :param pulumi.Input[int] recovery_point_history_in_minutes: Gets or sets the duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for PolicyModelCustomProperties.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


if not MYPY:
    class HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgsDict(TypedDict):
        """
        HyperV to AzStackHCI Protected item model custom properties.
        """
        custom_location_region: pulumi.Input[str]
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        disks_to_include: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgsDict']]]
        """
        Gets or sets the list of disks to replicate.
        """
        fabric_discovery_machine_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        hyper_v_generation: pulumi.Input[str]
        """
        Gets or sets the hypervisor generation of the virtual machine.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for ProtectedItemModelCustomProperties.
        Expected value is 'HyperVToAzStackHCI'.
        """
        nics_to_include: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgsDict']]]
        """
        Gets or sets the list of VM NIC to replicate.
        """
        run_as_account_id: pulumi.Input[str]
        """
        Gets or sets the Run As account Id.
        """
        source_fabric_agent_name: pulumi.Input[str]
        """
        Gets or sets the source fabric agent name.
        """
        storage_container_id: pulumi.Input[str]
        """
        Gets or sets the target storage container ARM Id.
        """
        target_arc_cluster_custom_location_id: pulumi.Input[str]
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        target_fabric_agent_name: pulumi.Input[str]
        """
        Gets or sets the target fabric agent name.
        """
        target_hci_cluster_id: pulumi.Input[str]
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        target_resource_group_id: pulumi.Input[str]
        """
        Gets or sets the target resource group ARM Id.
        """
        dynamic_memory_config: NotRequired[pulumi.Input['ProtectedItemDynamicMemoryConfigArgsDict']]
        """
        Protected item dynamic memory config.
        """
        is_dynamic_ram: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        target_cpu_cores: NotRequired[pulumi.Input[int]]
        """
        Gets or sets the target CPU cores.
        """
        target_memory_in_mega_bytes: NotRequired[pulumi.Input[int]]
        """
        Gets or sets the target memory in mega-bytes.
        """
        target_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        target_vm_name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target VM display name.
        """
        test_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
elif False:
    HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 custom_location_region: pulumi.Input[str],
                 disks_to_include: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]],
                 fabric_discovery_machine_id: pulumi.Input[str],
                 hyper_v_generation: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 nics_to_include: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]],
                 run_as_account_id: pulumi.Input[str],
                 source_fabric_agent_name: pulumi.Input[str],
                 storage_container_id: pulumi.Input[str],
                 target_arc_cluster_custom_location_id: pulumi.Input[str],
                 target_fabric_agent_name: pulumi.Input[str],
                 target_hci_cluster_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 dynamic_memory_config: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']] = None,
                 is_dynamic_ram: Optional[pulumi.Input[bool]] = None,
                 target_cpu_cores: Optional[pulumi.Input[int]] = None,
                 target_memory_in_mega_bytes: Optional[pulumi.Input[int]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None):
        """
        HyperV to AzStackHCI Protected item model custom properties.
        :param pulumi.Input[str] custom_location_region: Gets or sets the location of Azure Arc HCI custom location resource.
        :param pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]] disks_to_include: Gets or sets the list of disks to replicate.
        :param pulumi.Input[str] fabric_discovery_machine_id: Gets or sets the ARM Id of the discovered machine.
        :param pulumi.Input[str] hyper_v_generation: Gets or sets the hypervisor generation of the virtual machine.
        :param pulumi.Input[str] instance_type: Discriminator property for ProtectedItemModelCustomProperties.
               Expected value is 'HyperVToAzStackHCI'.
        :param pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]] nics_to_include: Gets or sets the list of VM NIC to replicate.
        :param pulumi.Input[str] run_as_account_id: Gets or sets the Run As account Id.
        :param pulumi.Input[str] source_fabric_agent_name: Gets or sets the source fabric agent name.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage container ARM Id.
        :param pulumi.Input[str] target_arc_cluster_custom_location_id: Gets or sets the Target Arc Cluster Custom Location ARM Id.
        :param pulumi.Input[str] target_fabric_agent_name: Gets or sets the target fabric agent name.
        :param pulumi.Input[str] target_hci_cluster_id: Gets or sets the Target HCI Cluster ARM Id.
        :param pulumi.Input[str] target_resource_group_id: Gets or sets the target resource group ARM Id.
        :param pulumi.Input['ProtectedItemDynamicMemoryConfigArgs'] dynamic_memory_config: Protected item dynamic memory config.
        :param pulumi.Input[bool] is_dynamic_ram: Gets or sets a value indicating whether memory is dynamical.
        :param pulumi.Input[int] target_cpu_cores: Gets or sets the target CPU cores.
        :param pulumi.Input[int] target_memory_in_mega_bytes: Gets or sets the target memory in mega-bytes.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] target_vm_name: Gets or sets the target VM display name.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "custom_location_region", custom_location_region)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "hyper_v_generation", hyper_v_generation)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "nics_to_include", nics_to_include)
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        pulumi.set(__self__, "source_fabric_agent_name", source_fabric_agent_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "target_arc_cluster_custom_location_id", target_arc_cluster_custom_location_id)
        pulumi.set(__self__, "target_fabric_agent_name", target_fabric_agent_name)
        pulumi.set(__self__, "target_hci_cluster_id", target_hci_cluster_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if is_dynamic_ram is not None:
            pulumi.set(__self__, "is_dynamic_ram", is_dynamic_ram)
        if target_cpu_cores is not None:
            pulumi.set(__self__, "target_cpu_cores", target_cpu_cores)
        if target_memory_in_mega_bytes is not None:
            pulumi.set(__self__, "target_memory_in_mega_bytes", target_memory_in_mega_bytes)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="customLocationRegion")
    def custom_location_region(self) -> pulumi.Input[str]:
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        return pulumi.get(self, "custom_location_region")

    @custom_location_region.setter
    def custom_location_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_location_region", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]]:
        """
        Gets or sets the list of disks to replicate.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @fabric_discovery_machine_id.setter
    def fabric_discovery_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_discovery_machine_id", value)

    @property
    @pulumi.getter(name="hyperVGeneration")
    def hyper_v_generation(self) -> pulumi.Input[str]:
        """
        Gets or sets the hypervisor generation of the virtual machine.
        """
        return pulumi.get(self, "hyper_v_generation")

    @hyper_v_generation.setter
    def hyper_v_generation(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_generation", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for ProtectedItemModelCustomProperties.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="nicsToInclude")
    def nics_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]]:
        """
        Gets or sets the list of VM NIC to replicate.
        """
        return pulumi.get(self, "nics_to_include")

    @nics_to_include.setter
    def nics_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]]):
        pulumi.set(self, "nics_to_include", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Run As account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="sourceFabricAgentName")
    def source_fabric_agent_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the source fabric agent name.
        """
        return pulumi.get(self, "source_fabric_agent_name")

    @source_fabric_agent_name.setter
    def source_fabric_agent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_fabric_agent_name", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target storage container ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_container_id", value)

    @property
    @pulumi.getter(name="targetArcClusterCustomLocationId")
    def target_arc_cluster_custom_location_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        return pulumi.get(self, "target_arc_cluster_custom_location_id")

    @target_arc_cluster_custom_location_id.setter
    def target_arc_cluster_custom_location_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_arc_cluster_custom_location_id", value)

    @property
    @pulumi.getter(name="targetFabricAgentName")
    def target_fabric_agent_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target fabric agent name.
        """
        return pulumi.get(self, "target_fabric_agent_name")

    @target_fabric_agent_name.setter
    def target_fabric_agent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_fabric_agent_name", value)

    @property
    @pulumi.getter(name="targetHciClusterId")
    def target_hci_cluster_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        return pulumi.get(self, "target_hci_cluster_id")

    @target_hci_cluster_id.setter
    def target_hci_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_hci_cluster_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]:
        """
        Protected item dynamic memory config.
        """
        return pulumi.get(self, "dynamic_memory_config")

    @dynamic_memory_config.setter
    def dynamic_memory_config(self, value: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]):
        pulumi.set(self, "dynamic_memory_config", value)

    @property
    @pulumi.getter(name="isDynamicRam")
    def is_dynamic_ram(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        return pulumi.get(self, "is_dynamic_ram")

    @is_dynamic_ram.setter
    def is_dynamic_ram(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic_ram", value)

    @property
    @pulumi.getter(name="targetCpuCores")
    def target_cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target CPU cores.
        """
        return pulumi.get(self, "target_cpu_cores")

    @target_cpu_cores.setter
    def target_cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_cores", value)

    @property
    @pulumi.getter(name="targetMemoryInMegaBytes")
    def target_memory_in_mega_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target memory in mega-bytes.
        """
        return pulumi.get(self, "target_memory_in_mega_bytes")

    @target_memory_in_mega_bytes.setter
    def target_memory_in_mega_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target VM display name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)


if not MYPY:
    class HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict(TypedDict):
        """
        HyperV to AzStackHCI Replication extension model custom properties.
        """
        az_stack_hci_fabric_arm_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        hyper_v_fabric_arm_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the source HyperV fabric.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for ReplicationExtensionModelCustomProperties.
        Expected value is 'HyperVToAzStackHCI'.
        """
        storage_account_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the storage account Id.
        """
        storage_account_sas_secret_name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the Sas Secret of storage account.
        """
elif False:
    HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 az_stack_hci_fabric_arm_id: pulumi.Input[str],
                 hyper_v_fabric_arm_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 storage_account_sas_secret_name: Optional[pulumi.Input[str]] = None):
        """
        HyperV to AzStackHCI Replication extension model custom properties.
        :param pulumi.Input[str] az_stack_hci_fabric_arm_id: Gets or sets the ARM Id of the target AzStackHCI fabric.
        :param pulumi.Input[str] hyper_v_fabric_arm_id: Gets or sets the ARM Id of the source HyperV fabric.
        :param pulumi.Input[str] instance_type: Discriminator property for ReplicationExtensionModelCustomProperties.
               Expected value is 'HyperVToAzStackHCI'.
        :param pulumi.Input[str] storage_account_id: Gets or sets the storage account Id.
        :param pulumi.Input[str] storage_account_sas_secret_name: Gets or sets the Sas Secret of storage account.
        """
        pulumi.set(__self__, "az_stack_hci_fabric_arm_id", az_stack_hci_fabric_arm_id)
        pulumi.set(__self__, "hyper_v_fabric_arm_id", hyper_v_fabric_arm_id)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="azStackHciFabricArmId")
    def az_stack_hci_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        return pulumi.get(self, "az_stack_hci_fabric_arm_id")

    @az_stack_hci_fabric_arm_id.setter
    def az_stack_hci_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "az_stack_hci_fabric_arm_id", value)

    @property
    @pulumi.getter(name="hyperVFabricArmId")
    def hyper_v_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the source HyperV fabric.
        """
        return pulumi.get(self, "hyper_v_fabric_arm_id")

    @hyper_v_fabric_arm_id.setter
    def hyper_v_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_fabric_arm_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for ReplicationExtensionModelCustomProperties.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Sas Secret of storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_sas_secret_name", value)


if not MYPY:
    class IdentityModelArgsDict(TypedDict):
        """
        Identity model.
        """
        aad_authority: pulumi.Input[str]
        """
        Gets or sets the authority of the SPN with which fabric agent communicates to service.
        """
        application_id: pulumi.Input[str]
        """
        Gets or sets the client/application Id of the SPN with which fabric agent communicates to service.
        """
        audience: pulumi.Input[str]
        """
        Gets or sets the audience of the SPN with which fabric agent communicates to service.
        """
        object_id: pulumi.Input[str]
        """
        Gets or sets the object Id of the SPN with which fabric agent communicates to service.
        """
        tenant_id: pulumi.Input[str]
        """
        Gets or sets the tenant Id of the SPN with which fabric agent communicates to service.
        """
elif False:
    IdentityModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityModelArgs:
    def __init__(__self__, *,
                 aad_authority: pulumi.Input[str],
                 application_id: pulumi.Input[str],
                 audience: pulumi.Input[str],
                 object_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        Identity model.
        :param pulumi.Input[str] aad_authority: Gets or sets the authority of the SPN with which fabric agent communicates to service.
        :param pulumi.Input[str] application_id: Gets or sets the client/application Id of the SPN with which fabric agent communicates to service.
        :param pulumi.Input[str] audience: Gets or sets the audience of the SPN with which fabric agent communicates to service.
        :param pulumi.Input[str] object_id: Gets or sets the object Id of the SPN with which fabric agent communicates to service.
        :param pulumi.Input[str] tenant_id: Gets or sets the tenant Id of the SPN with which fabric agent communicates to service.
        """
        pulumi.set(__self__, "aad_authority", aad_authority)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> pulumi.Input[str]:
        """
        Gets or sets the authority of the SPN with which fabric agent communicates to service.
        """
        return pulumi.get(self, "aad_authority")

    @aad_authority.setter
    def aad_authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_authority", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the client/application Id of the SPN with which fabric agent communicates to service.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        """
        Gets or sets the audience of the SPN with which fabric agent communicates to service.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the object Id of the SPN with which fabric agent communicates to service.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the tenant Id of the SPN with which fabric agent communicates to service.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class PolicyModelPropertiesArgsDict(TypedDict):
        """
        Policy model properties.
        """
        custom_properties: pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgsDict', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgsDict']]
        """
        Policy model custom properties.
        """
elif False:
    PolicyModelPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']]):
        """
        Policy model properties.
        :param pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']] custom_properties: Policy model custom properties.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']]:
        """
        Policy model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)


if not MYPY:
    class PrivateEndpointConnectionProxyPropertiesArgsDict(TypedDict):
        """
        Represents private endpoint connection proxy request.
        """
        remote_private_endpoint: NotRequired[pulumi.Input['RemotePrivateEndpointArgsDict']]
        """
        Represent remote private endpoint information for the private endpoint connection proxy.
        """
elif False:
    PrivateEndpointConnectionProxyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointConnectionProxyPropertiesArgs:
    def __init__(__self__, *,
                 remote_private_endpoint: Optional[pulumi.Input['RemotePrivateEndpointArgs']] = None):
        """
        Represents private endpoint connection proxy request.
        :param pulumi.Input['RemotePrivateEndpointArgs'] remote_private_endpoint: Represent remote private endpoint information for the private endpoint connection proxy.
        """
        if remote_private_endpoint is not None:
            pulumi.set(__self__, "remote_private_endpoint", remote_private_endpoint)

    @property
    @pulumi.getter(name="remotePrivateEndpoint")
    def remote_private_endpoint(self) -> Optional[pulumi.Input['RemotePrivateEndpointArgs']]:
        """
        Represent remote private endpoint information for the private endpoint connection proxy.
        """
        return pulumi.get(self, "remote_private_endpoint")

    @remote_private_endpoint.setter
    def remote_private_endpoint(self, value: Optional[pulumi.Input['RemotePrivateEndpointArgs']]):
        pulumi.set(self, "remote_private_endpoint", value)


if not MYPY:
    class PrivateEndpointConnectionResponsePropertiesArgsDict(TypedDict):
        """
        Represents Private endpoint connection response properties.
        """
        private_endpoint: NotRequired[pulumi.Input['PrivateEndpointArgsDict']]
        """
        Represent private Endpoint network resource that is linked to the Private Endpoint connection.
        """
        private_link_service_connection_state: NotRequired[pulumi.Input['PrivateLinkServiceConnectionStateArgsDict']]
        """
        Represents Private link service connection state.
        """
elif False:
    PrivateEndpointConnectionResponsePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointConnectionResponsePropertiesArgs:
    def __init__(__self__, *,
                 private_endpoint: Optional[pulumi.Input['PrivateEndpointArgs']] = None,
                 private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None):
        """
        Represents Private endpoint connection response properties.
        :param pulumi.Input['PrivateEndpointArgs'] private_endpoint: Represent private Endpoint network resource that is linked to the Private Endpoint connection.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: Represents Private link service connection state.
        """
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input['PrivateEndpointArgs']]:
        """
        Represent private Endpoint network resource that is linked to the Private Endpoint connection.
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input['PrivateEndpointArgs']]):
        pulumi.set(self, "private_endpoint", value)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        Represents Private link service connection state.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)


if not MYPY:
    class PrivateEndpointArgsDict(TypedDict):
        """
        Represent private Endpoint network resource that is linked to the Private Endpoint connection.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the id.
        """
elif False:
    PrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Represent private Endpoint network resource that is linked to the Private Endpoint connection.
        :param pulumi.Input[str] id: Gets or sets the id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PrivateLinkServiceConnectionStateArgsDict(TypedDict):
        """
        Represents Private link service connection state.
        """
        actions_required: NotRequired[pulumi.Input[str]]
        """
        Gets or sets actions required.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Gets or sets description.
        """
        status: NotRequired[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]]
        """
        Gets or sets the status.
        """
elif False:
    PrivateLinkServiceConnectionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]] = None):
        """
        Represents Private link service connection state.
        :param pulumi.Input[str] actions_required: Gets or sets actions required.
        :param pulumi.Input[str] description: Gets or sets description.
        :param pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']] status: Gets or sets the status.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets actions required.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]]:
        """
        Gets or sets the status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateEndpointConnectionStatus']]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class PrivateLinkServiceConnectionArgsDict(TypedDict):
        """
        Represents of an NRP private link service connection.
        """
        group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Gets or sets group ids.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets private link service connection name.
        """
        request_message: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the request message for the private link service connection.
        """
elif False:
    PrivateLinkServiceConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionArgs:
    def __init__(__self__, *,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request_message: Optional[pulumi.Input[str]] = None):
        """
        Represents of an NRP private link service connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: Gets or sets group ids.
        :param pulumi.Input[str] name: Gets or sets private link service connection name.
        :param pulumi.Input[str] request_message: Gets or sets the request message for the private link service connection.
        """
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_message is not None:
            pulumi.set(__self__, "request_message", request_message)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets group ids.
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets private link service connection name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestMessage")
    def request_message(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the request message for the private link service connection.
        """
        return pulumi.get(self, "request_message")

    @request_message.setter
    def request_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_message", value)


if not MYPY:
    class PrivateLinkServiceProxyArgsDict(TypedDict):
        """
        Represents NRP private link service proxy.
        """
        group_connectivity_information: NotRequired[pulumi.Input[Sequence[pulumi.Input['GroupConnectivityInformationArgsDict']]]]
        """
        Gets or sets group connectivity information.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets private link service proxy id.
        """
        remote_private_endpoint_connection: NotRequired[pulumi.Input['RemotePrivateEndpointConnectionArgsDict']]
        """
        Represent remote private endpoint connection.
        """
        remote_private_link_service_connection_state: NotRequired[pulumi.Input['PrivateLinkServiceConnectionStateArgsDict']]
        """
        Represents Private link service connection state.
        """
elif False:
    PrivateLinkServiceProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceProxyArgs:
    def __init__(__self__, *,
                 group_connectivity_information: Optional[pulumi.Input[Sequence[pulumi.Input['GroupConnectivityInformationArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 remote_private_endpoint_connection: Optional[pulumi.Input['RemotePrivateEndpointConnectionArgs']] = None,
                 remote_private_link_service_connection_state: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']] = None):
        """
        Represents NRP private link service proxy.
        :param pulumi.Input[Sequence[pulumi.Input['GroupConnectivityInformationArgs']]] group_connectivity_information: Gets or sets group connectivity information.
        :param pulumi.Input[str] id: Gets or sets private link service proxy id.
        :param pulumi.Input['RemotePrivateEndpointConnectionArgs'] remote_private_endpoint_connection: Represent remote private endpoint connection.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] remote_private_link_service_connection_state: Represents Private link service connection state.
        """
        if group_connectivity_information is not None:
            pulumi.set(__self__, "group_connectivity_information", group_connectivity_information)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if remote_private_endpoint_connection is not None:
            pulumi.set(__self__, "remote_private_endpoint_connection", remote_private_endpoint_connection)
        if remote_private_link_service_connection_state is not None:
            pulumi.set(__self__, "remote_private_link_service_connection_state", remote_private_link_service_connection_state)

    @property
    @pulumi.getter(name="groupConnectivityInformation")
    def group_connectivity_information(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupConnectivityInformationArgs']]]]:
        """
        Gets or sets group connectivity information.
        """
        return pulumi.get(self, "group_connectivity_information")

    @group_connectivity_information.setter
    def group_connectivity_information(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupConnectivityInformationArgs']]]]):
        pulumi.set(self, "group_connectivity_information", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets private link service proxy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="remotePrivateEndpointConnection")
    def remote_private_endpoint_connection(self) -> Optional[pulumi.Input['RemotePrivateEndpointConnectionArgs']]:
        """
        Represent remote private endpoint connection.
        """
        return pulumi.get(self, "remote_private_endpoint_connection")

    @remote_private_endpoint_connection.setter
    def remote_private_endpoint_connection(self, value: Optional[pulumi.Input['RemotePrivateEndpointConnectionArgs']]):
        pulumi.set(self, "remote_private_endpoint_connection", value)

    @property
    @pulumi.getter(name="remotePrivateLinkServiceConnectionState")
    def remote_private_link_service_connection_state(self) -> Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]:
        """
        Represents Private link service connection state.
        """
        return pulumi.get(self, "remote_private_link_service_connection_state")

    @remote_private_link_service_connection_state.setter
    def remote_private_link_service_connection_state(self, value: Optional[pulumi.Input['PrivateLinkServiceConnectionStateArgs']]):
        pulumi.set(self, "remote_private_link_service_connection_state", value)


if not MYPY:
    class ProtectedItemDynamicMemoryConfigArgsDict(TypedDict):
        """
        Protected item dynamic memory config.
        """
        maximum_memory_in_mega_bytes: pulumi.Input[float]
        """
        Gets or sets maximum memory in MB.
        """
        minimum_memory_in_mega_bytes: pulumi.Input[float]
        """
        Gets or sets minimum memory in MB.
        """
        target_memory_buffer_percentage: pulumi.Input[int]
        """
        Gets or sets target memory buffer in %.
        """
elif False:
    ProtectedItemDynamicMemoryConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectedItemDynamicMemoryConfigArgs:
    def __init__(__self__, *,
                 maximum_memory_in_mega_bytes: pulumi.Input[float],
                 minimum_memory_in_mega_bytes: pulumi.Input[float],
                 target_memory_buffer_percentage: pulumi.Input[int]):
        """
        Protected item dynamic memory config.
        :param pulumi.Input[float] maximum_memory_in_mega_bytes: Gets or sets maximum memory in MB.
        :param pulumi.Input[float] minimum_memory_in_mega_bytes: Gets or sets minimum memory in MB.
        :param pulumi.Input[int] target_memory_buffer_percentage: Gets or sets target memory buffer in %.
        """
        pulumi.set(__self__, "maximum_memory_in_mega_bytes", maximum_memory_in_mega_bytes)
        pulumi.set(__self__, "minimum_memory_in_mega_bytes", minimum_memory_in_mega_bytes)
        pulumi.set(__self__, "target_memory_buffer_percentage", target_memory_buffer_percentage)

    @property
    @pulumi.getter(name="maximumMemoryInMegaBytes")
    def maximum_memory_in_mega_bytes(self) -> pulumi.Input[float]:
        """
        Gets or sets maximum memory in MB.
        """
        return pulumi.get(self, "maximum_memory_in_mega_bytes")

    @maximum_memory_in_mega_bytes.setter
    def maximum_memory_in_mega_bytes(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="minimumMemoryInMegaBytes")
    def minimum_memory_in_mega_bytes(self) -> pulumi.Input[float]:
        """
        Gets or sets minimum memory in MB.
        """
        return pulumi.get(self, "minimum_memory_in_mega_bytes")

    @minimum_memory_in_mega_bytes.setter
    def minimum_memory_in_mega_bytes(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="targetMemoryBufferPercentage")
    def target_memory_buffer_percentage(self) -> pulumi.Input[int]:
        """
        Gets or sets target memory buffer in %.
        """
        return pulumi.get(self, "target_memory_buffer_percentage")

    @target_memory_buffer_percentage.setter
    def target_memory_buffer_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_memory_buffer_percentage", value)


if not MYPY:
    class ProtectedItemModelPropertiesArgsDict(TypedDict):
        """
        Protected item model properties.
        """
        custom_properties: pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgsDict', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgsDict']]
        """
        Protected item model custom properties.
        """
        policy_name: pulumi.Input[str]
        """
        Gets or sets the policy name.
        """
        replication_extension_name: pulumi.Input[str]
        """
        Gets or sets the replication extension name.
        """
elif False:
    ProtectedItemModelPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectedItemModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']],
                 policy_name: pulumi.Input[str],
                 replication_extension_name: pulumi.Input[str]):
        """
        Protected item model properties.
        :param pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']] custom_properties: Protected item model custom properties.
        :param pulumi.Input[str] policy_name: Gets or sets the policy name.
        :param pulumi.Input[str] replication_extension_name: Gets or sets the replication extension name.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "replication_extension_name", replication_extension_name)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']]:
        """
        Protected item model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the policy name.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="replicationExtensionName")
    def replication_extension_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the replication extension name.
        """
        return pulumi.get(self, "replication_extension_name")

    @replication_extension_name.setter
    def replication_extension_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_extension_name", value)


if not MYPY:
    class RemotePrivateEndpointConnectionArgsDict(TypedDict):
        """
        Represent remote private endpoint connection.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the remote private endpoint connection id.
        """
elif False:
    RemotePrivateEndpointConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemotePrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Represent remote private endpoint connection.
        :param pulumi.Input[str] id: Gets or sets the remote private endpoint connection id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the remote private endpoint connection id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class RemotePrivateEndpointArgsDict(TypedDict):
        """
        Represent remote private endpoint information for the private endpoint connection proxy.
        """
        id: pulumi.Input[str]
        """
        Gets or sets private link service proxy id.
        """
        connection_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConnectionDetailsArgsDict']]]]
        """
        Gets or sets the list of Connection Details. This is the connection details for private endpoint.
        """
        manual_private_link_service_connections: NotRequired[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgsDict']]]]
        """
        Gets or sets the list of Manual Private Link Service Connections and gets populated for Manual approval flow.
        """
        private_link_service_connections: NotRequired[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgsDict']]]]
        """
        Gets or sets the list of Private Link Service Connections and gets populated for Auto approval flow.
        """
        private_link_service_proxies: NotRequired[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceProxyArgsDict']]]]
        """
        Gets or sets the list of private link service proxies.
        """
elif False:
    RemotePrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemotePrivateEndpointArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 connection_details: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDetailsArgs']]]] = None,
                 manual_private_link_service_connections: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]]] = None,
                 private_link_service_connections: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]]] = None,
                 private_link_service_proxies: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceProxyArgs']]]] = None):
        """
        Represent remote private endpoint information for the private endpoint connection proxy.
        :param pulumi.Input[str] id: Gets or sets private link service proxy id.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionDetailsArgs']]] connection_details: Gets or sets the list of Connection Details. This is the connection details for private endpoint.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]] manual_private_link_service_connections: Gets or sets the list of Manual Private Link Service Connections and gets populated for Manual approval flow.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]] private_link_service_connections: Gets or sets the list of Private Link Service Connections and gets populated for Auto approval flow.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceProxyArgs']]] private_link_service_proxies: Gets or sets the list of private link service proxies.
        """
        pulumi.set(__self__, "id", id)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if manual_private_link_service_connections is not None:
            pulumi.set(__self__, "manual_private_link_service_connections", manual_private_link_service_connections)
        if private_link_service_connections is not None:
            pulumi.set(__self__, "private_link_service_connections", private_link_service_connections)
        if private_link_service_proxies is not None:
            pulumi.set(__self__, "private_link_service_proxies", private_link_service_proxies)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Gets or sets private link service proxy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDetailsArgs']]]]:
        """
        Gets or sets the list of Connection Details. This is the connection details for private endpoint.
        """
        return pulumi.get(self, "connection_details")

    @connection_details.setter
    def connection_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDetailsArgs']]]]):
        pulumi.set(self, "connection_details", value)

    @property
    @pulumi.getter(name="manualPrivateLinkServiceConnections")
    def manual_private_link_service_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]]]:
        """
        Gets or sets the list of Manual Private Link Service Connections and gets populated for Manual approval flow.
        """
        return pulumi.get(self, "manual_private_link_service_connections")

    @manual_private_link_service_connections.setter
    def manual_private_link_service_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]]]):
        pulumi.set(self, "manual_private_link_service_connections", value)

    @property
    @pulumi.getter(name="privateLinkServiceConnections")
    def private_link_service_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]]]:
        """
        Gets or sets the list of Private Link Service Connections and gets populated for Auto approval flow.
        """
        return pulumi.get(self, "private_link_service_connections")

    @private_link_service_connections.setter
    def private_link_service_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceConnectionArgs']]]]):
        pulumi.set(self, "private_link_service_connections", value)

    @property
    @pulumi.getter(name="privateLinkServiceProxies")
    def private_link_service_proxies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceProxyArgs']]]]:
        """
        Gets or sets the list of private link service proxies.
        """
        return pulumi.get(self, "private_link_service_proxies")

    @private_link_service_proxies.setter
    def private_link_service_proxies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateLinkServiceProxyArgs']]]]):
        pulumi.set(self, "private_link_service_proxies", value)


if not MYPY:
    class ReplicationExtensionModelPropertiesArgsDict(TypedDict):
        """
        Replication extension model properties.
        """
        custom_properties: pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict']]
        """
        Replication extension model custom properties.
        """
elif False:
    ReplicationExtensionModelPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReplicationExtensionModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']]):
        """
        Replication extension model properties.
        :param pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']] custom_properties: Replication extension model custom properties.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']]:
        """
        Replication extension model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)


if not MYPY:
    class StorageContainerPropertiesArgsDict(TypedDict):
        """
        Storage container properties.
        """
        cluster_shared_volume_path: pulumi.Input[str]
        """
        Gets or sets the ClusterSharedVolumePath.
        """
        name: pulumi.Input[str]
        """
        Gets or sets the Name.
        """
elif False:
    StorageContainerPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageContainerPropertiesArgs:
    def __init__(__self__, *,
                 cluster_shared_volume_path: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        Storage container properties.
        :param pulumi.Input[str] cluster_shared_volume_path: Gets or sets the ClusterSharedVolumePath.
        :param pulumi.Input[str] name: Gets or sets the Name.
        """
        pulumi.set(__self__, "cluster_shared_volume_path", cluster_shared_volume_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterSharedVolumePath")
    def cluster_shared_volume_path(self) -> pulumi.Input[str]:
        """
        Gets or sets the ClusterSharedVolumePath.
        """
        return pulumi.get(self, "cluster_shared_volume_path")

    @cluster_shared_volume_path.setter
    def cluster_shared_volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_shared_volume_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Gets or sets the Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class VMwareFabricAgentModelCustomPropertiesArgsDict(TypedDict):
        """
        VMware fabric agent model custom properties.
        """
        bios_id: pulumi.Input[str]
        """
        Gets or sets the BIOS Id of the fabric agent machine.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for FabricAgentModelCustomProperties.
        Expected value is 'VMware'.
        """
        mars_authentication_identity: pulumi.Input['IdentityModelArgsDict']
        """
        Identity model.
        """
elif False:
    VMwareFabricAgentModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareFabricAgentModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 bios_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 mars_authentication_identity: pulumi.Input['IdentityModelArgs']):
        """
        VMware fabric agent model custom properties.
        :param pulumi.Input[str] bios_id: Gets or sets the BIOS Id of the fabric agent machine.
        :param pulumi.Input[str] instance_type: Discriminator property for FabricAgentModelCustomProperties.
               Expected value is 'VMware'.
        :param pulumi.Input['IdentityModelArgs'] mars_authentication_identity: Identity model.
        """
        pulumi.set(__self__, "bios_id", bios_id)
        pulumi.set(__self__, "instance_type", 'VMware')
        pulumi.set(__self__, "mars_authentication_identity", mars_authentication_identity)

    @property
    @pulumi.getter(name="biosId")
    def bios_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the BIOS Id of the fabric agent machine.
        """
        return pulumi.get(self, "bios_id")

    @bios_id.setter
    def bios_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "bios_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for FabricAgentModelCustomProperties.
        Expected value is 'VMware'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="marsAuthenticationIdentity")
    def mars_authentication_identity(self) -> pulumi.Input['IdentityModelArgs']:
        """
        Identity model.
        """
        return pulumi.get(self, "mars_authentication_identity")

    @mars_authentication_identity.setter
    def mars_authentication_identity(self, value: pulumi.Input['IdentityModelArgs']):
        pulumi.set(self, "mars_authentication_identity", value)


if not MYPY:
    class VMwareMigrateFabricModelCustomPropertiesArgsDict(TypedDict):
        """
        VMware migrate fabric model custom properties.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for FabricModelCustomProperties.
        Expected value is 'VMwareMigrate'.
        """
        migration_solution_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the migration solution.
        """
        vmware_site_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the VMware site.
        """
elif False:
    VMwareMigrateFabricModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareMigrateFabricModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str],
                 vmware_site_id: pulumi.Input[str]):
        """
        VMware migrate fabric model custom properties.
        :param pulumi.Input[str] instance_type: Discriminator property for FabricModelCustomProperties.
               Expected value is 'VMwareMigrate'.
        :param pulumi.Input[str] migration_solution_id: Gets or sets the ARM Id of the migration solution.
        :param pulumi.Input[str] vmware_site_id: Gets or sets the ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'VMwareMigrate')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)
        pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for FabricModelCustomProperties.
        Expected value is 'VMwareMigrate'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the migration solution.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_site_id", value)


if not MYPY:
    class VMwareToAzStackHCIDiskInputArgsDict(TypedDict):
        """
        VMwareToAzStack disk input.
        """
        disk_file_format: pulumi.Input[str]
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        disk_id: pulumi.Input[str]
        """
        Gets or sets the disk Id.
        """
        disk_size_gb: pulumi.Input[float]
        """
        Gets or sets the disk size in GB.
        """
        is_os_disk: pulumi.Input[bool]
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        disk_block_size: NotRequired[pulumi.Input[float]]
        """
        Gets or sets a value of disk block size.
        """
        disk_controller: NotRequired[pulumi.Input['DiskControllerInputsArgsDict']]
        """
        Disk controller.
        """
        disk_identifier: NotRequired[pulumi.Input[str]]
        """
        Gets or sets a value of disk identifier.
        """
        disk_logical_sector_size: NotRequired[pulumi.Input[float]]
        """
        Gets or sets a value of disk logical sector size.
        """
        disk_physical_sector_size: NotRequired[pulumi.Input[float]]
        """
        Gets or sets a value of disk physical sector size.
        """
        is_dynamic: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        """
        storage_container_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target storage account ARM Id.
        """
elif False:
    VMwareToAzStackHCIDiskInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareToAzStackHCIDiskInputArgs:
    def __init__(__self__, *,
                 disk_file_format: pulumi.Input[str],
                 disk_id: pulumi.Input[str],
                 disk_size_gb: pulumi.Input[float],
                 is_os_disk: pulumi.Input[bool],
                 disk_block_size: Optional[pulumi.Input[float]] = None,
                 disk_controller: Optional[pulumi.Input['DiskControllerInputsArgs']] = None,
                 disk_identifier: Optional[pulumi.Input[str]] = None,
                 disk_logical_sector_size: Optional[pulumi.Input[float]] = None,
                 disk_physical_sector_size: Optional[pulumi.Input[float]] = None,
                 is_dynamic: Optional[pulumi.Input[bool]] = None,
                 storage_container_id: Optional[pulumi.Input[str]] = None):
        """
        VMwareToAzStack disk input.
        :param pulumi.Input[str] disk_file_format: Gets or sets the type of the virtual hard disk, vhd or vhdx.
        :param pulumi.Input[str] disk_id: Gets or sets the disk Id.
        :param pulumi.Input[float] disk_size_gb: Gets or sets the disk size in GB.
        :param pulumi.Input[bool] is_os_disk: Gets or sets a value indicating whether disk is os disk.
        :param pulumi.Input[float] disk_block_size: Gets or sets a value of disk block size.
        :param pulumi.Input['DiskControllerInputsArgs'] disk_controller: Disk controller.
        :param pulumi.Input[str] disk_identifier: Gets or sets a value of disk identifier.
        :param pulumi.Input[float] disk_logical_sector_size: Gets or sets a value of disk logical sector size.
        :param pulumi.Input[float] disk_physical_sector_size: Gets or sets a value of disk physical sector size.
        :param pulumi.Input[bool] is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage account ARM Id.
        """
        pulumi.set(__self__, "disk_file_format", disk_file_format)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        if disk_block_size is not None:
            pulumi.set(__self__, "disk_block_size", disk_block_size)
        if disk_controller is not None:
            pulumi.set(__self__, "disk_controller", disk_controller)
        if disk_identifier is not None:
            pulumi.set(__self__, "disk_identifier", disk_identifier)
        if disk_logical_sector_size is not None:
            pulumi.set(__self__, "disk_logical_sector_size", disk_logical_sector_size)
        if disk_physical_sector_size is not None:
            pulumi.set(__self__, "disk_physical_sector_size", disk_physical_sector_size)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if storage_container_id is not None:
            pulumi.set(__self__, "storage_container_id", storage_container_id)

    @property
    @pulumi.getter(name="diskFileFormat")
    def disk_file_format(self) -> pulumi.Input[str]:
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        return pulumi.get(self, "disk_file_format")

    @disk_file_format.setter
    def disk_file_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_file_format", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[float]:
        """
        Gets or sets the disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> pulumi.Input[bool]:
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        return pulumi.get(self, "is_os_disk")

    @is_os_disk.setter
    def is_os_disk(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_os_disk", value)

    @property
    @pulumi.getter(name="diskBlockSize")
    def disk_block_size(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets a value of disk block size.
        """
        return pulumi.get(self, "disk_block_size")

    @disk_block_size.setter
    def disk_block_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_block_size", value)

    @property
    @pulumi.getter(name="diskController")
    def disk_controller(self) -> Optional[pulumi.Input['DiskControllerInputsArgs']]:
        """
        Disk controller.
        """
        return pulumi.get(self, "disk_controller")

    @disk_controller.setter
    def disk_controller(self, value: Optional[pulumi.Input['DiskControllerInputsArgs']]):
        pulumi.set(self, "disk_controller", value)

    @property
    @pulumi.getter(name="diskIdentifier")
    def disk_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets a value of disk identifier.
        """
        return pulumi.get(self, "disk_identifier")

    @disk_identifier.setter
    def disk_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_identifier", value)

    @property
    @pulumi.getter(name="diskLogicalSectorSize")
    def disk_logical_sector_size(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets a value of disk logical sector size.
        """
        return pulumi.get(self, "disk_logical_sector_size")

    @disk_logical_sector_size.setter
    def disk_logical_sector_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_logical_sector_size", value)

    @property
    @pulumi.getter(name="diskPhysicalSectorSize")
    def disk_physical_sector_size(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets a value of disk physical sector size.
        """
        return pulumi.get(self, "disk_physical_sector_size")

    @disk_physical_sector_size.setter
    def disk_physical_sector_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk_physical_sector_size", value)

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        """
        return pulumi.get(self, "is_dynamic")

    @is_dynamic.setter
    def is_dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target storage account ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_id", value)


if not MYPY:
    class VMwareToAzStackHCINicInputArgsDict(TypedDict):
        """
        VMwareToAzStackHCI NIC properties.
        """
        label: pulumi.Input[str]
        """
        Gets or sets the NIC label.
        """
        nic_id: pulumi.Input[str]
        """
        Gets or sets the NIC Id.
        """
        selection_type_for_failover: pulumi.Input[Union[str, 'VMNicSelection']]
        """
        Gets or sets the selection type of the NIC.
        """
        is_mac_migration_enabled: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether mac address migration is enabled.
        """
        is_static_ip_migration_enabled: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether static ip migration is enabled.
        """
        target_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        test_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
elif False:
    VMwareToAzStackHCINicInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareToAzStackHCINicInputArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 nic_id: pulumi.Input[str],
                 selection_type_for_failover: pulumi.Input[Union[str, 'VMNicSelection']],
                 is_mac_migration_enabled: Optional[pulumi.Input[bool]] = None,
                 is_static_ip_migration_enabled: Optional[pulumi.Input[bool]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None):
        """
        VMwareToAzStackHCI NIC properties.
        :param pulumi.Input[str] label: Gets or sets the NIC label.
        :param pulumi.Input[str] nic_id: Gets or sets the NIC Id.
        :param pulumi.Input[Union[str, 'VMNicSelection']] selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param pulumi.Input[bool] is_mac_migration_enabled: Gets or sets a value indicating whether mac address migration is enabled.
        :param pulumi.Input[bool] is_static_ip_migration_enabled: Gets or sets a value indicating whether static ip migration is enabled.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        if is_mac_migration_enabled is not None:
            pulumi.set(__self__, "is_mac_migration_enabled", is_mac_migration_enabled)
        if is_static_ip_migration_enabled is not None:
            pulumi.set(__self__, "is_static_ip_migration_enabled", is_static_ip_migration_enabled)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Gets or sets the NIC label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> pulumi.Input[Union[str, 'VMNicSelection']]:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @selection_type_for_failover.setter
    def selection_type_for_failover(self, value: pulumi.Input[Union[str, 'VMNicSelection']]):
        pulumi.set(self, "selection_type_for_failover", value)

    @property
    @pulumi.getter(name="isMacMigrationEnabled")
    def is_mac_migration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether mac address migration is enabled.
        """
        return pulumi.get(self, "is_mac_migration_enabled")

    @is_mac_migration_enabled.setter
    def is_mac_migration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mac_migration_enabled", value)

    @property
    @pulumi.getter(name="isStaticIpMigrationEnabled")
    def is_static_ip_migration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether static ip migration is enabled.
        """
        return pulumi.get(self, "is_static_ip_migration_enabled")

    @is_static_ip_migration_enabled.setter
    def is_static_ip_migration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_static_ip_migration_enabled", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)


if not MYPY:
    class VMwareToAzStackHCIPolicyModelCustomPropertiesArgsDict(TypedDict):
        """
        VMware To AzStackHCI Policy model custom properties.
        """
        app_consistent_frequency_in_minutes: pulumi.Input[int]
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        crash_consistent_frequency_in_minutes: pulumi.Input[int]
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for PolicyModelCustomProperties.
        Expected value is 'VMwareToAzStackHCI'.
        """
        recovery_point_history_in_minutes: pulumi.Input[int]
        """
        Gets or sets the duration in minutes until which the recovery points need to be stored.
        """
elif False:
    VMwareToAzStackHCIPolicyModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareToAzStackHCIPolicyModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 app_consistent_frequency_in_minutes: pulumi.Input[int],
                 crash_consistent_frequency_in_minutes: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 recovery_point_history_in_minutes: pulumi.Input[int]):
        """
        VMware To AzStackHCI Policy model custom properties.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: Gets or sets the app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: Gets or sets the crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[str] instance_type: Discriminator property for PolicyModelCustomProperties.
               Expected value is 'VMwareToAzStackHCI'.
        :param pulumi.Input[int] recovery_point_history_in_minutes: Gets or sets the duration in minutes until which the recovery points need to be stored.
        """
        pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for PolicyModelCustomProperties.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the duration in minutes until which the recovery points need to be stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


if not MYPY:
    class VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgsDict(TypedDict):
        """
        VMware to AzStackHCI Protected item model custom properties.
        """
        custom_location_region: pulumi.Input[str]
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        disks_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgsDict']]]
        """
        Gets or sets the list of disks to replicate.
        """
        fabric_discovery_machine_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        hyper_v_generation: pulumi.Input[str]
        """
        Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for ProtectedItemModelCustomProperties.
        Expected value is 'VMwareToAzStackHCI'.
        """
        nics_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgsDict']]]
        """
        Gets or sets the list of VM NIC to replicate.
        """
        run_as_account_id: pulumi.Input[str]
        """
        Gets or sets the run as account Id.
        """
        source_fabric_agent_name: pulumi.Input[str]
        """
        Gets or sets the source fabric agent name.
        """
        storage_container_id: pulumi.Input[str]
        """
        Gets or sets the target storage container ARM Id.
        """
        target_arc_cluster_custom_location_id: pulumi.Input[str]
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        target_fabric_agent_name: pulumi.Input[str]
        """
        Gets or sets the target fabric agent name.
        """
        target_hci_cluster_id: pulumi.Input[str]
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        target_resource_group_id: pulumi.Input[str]
        """
        Gets or sets the target resource group ARM Id.
        """
        dynamic_memory_config: NotRequired[pulumi.Input['ProtectedItemDynamicMemoryConfigArgsDict']]
        """
        Protected item dynamic memory config.
        """
        is_dynamic_ram: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        perform_auto_resync: NotRequired[pulumi.Input[bool]]
        """
        Gets or sets a value indicating whether auto resync is to be done.
        """
        target_cpu_cores: NotRequired[pulumi.Input[int]]
        """
        Gets or sets the target CPU cores.
        """
        target_memory_in_mega_bytes: NotRequired[pulumi.Input[int]]
        """
        Gets or sets the target memory in mega-bytes.
        """
        target_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        target_vm_name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target VM display name.
        """
        test_network_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
elif False:
    VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 custom_location_region: pulumi.Input[str],
                 disks_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]],
                 fabric_discovery_machine_id: pulumi.Input[str],
                 hyper_v_generation: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 nics_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]],
                 run_as_account_id: pulumi.Input[str],
                 source_fabric_agent_name: pulumi.Input[str],
                 storage_container_id: pulumi.Input[str],
                 target_arc_cluster_custom_location_id: pulumi.Input[str],
                 target_fabric_agent_name: pulumi.Input[str],
                 target_hci_cluster_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 dynamic_memory_config: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']] = None,
                 is_dynamic_ram: Optional[pulumi.Input[bool]] = None,
                 perform_auto_resync: Optional[pulumi.Input[bool]] = None,
                 target_cpu_cores: Optional[pulumi.Input[int]] = None,
                 target_memory_in_mega_bytes: Optional[pulumi.Input[int]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None):
        """
        VMware to AzStackHCI Protected item model custom properties.
        :param pulumi.Input[str] custom_location_region: Gets or sets the location of Azure Arc HCI custom location resource.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]] disks_to_include: Gets or sets the list of disks to replicate.
        :param pulumi.Input[str] fabric_discovery_machine_id: Gets or sets the ARM Id of the discovered machine.
        :param pulumi.Input[str] hyper_v_generation: Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        :param pulumi.Input[str] instance_type: Discriminator property for ProtectedItemModelCustomProperties.
               Expected value is 'VMwareToAzStackHCI'.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]] nics_to_include: Gets or sets the list of VM NIC to replicate.
        :param pulumi.Input[str] run_as_account_id: Gets or sets the run as account Id.
        :param pulumi.Input[str] source_fabric_agent_name: Gets or sets the source fabric agent name.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage container ARM Id.
        :param pulumi.Input[str] target_arc_cluster_custom_location_id: Gets or sets the Target Arc Cluster Custom Location ARM Id.
        :param pulumi.Input[str] target_fabric_agent_name: Gets or sets the target fabric agent name.
        :param pulumi.Input[str] target_hci_cluster_id: Gets or sets the Target HCI Cluster ARM Id.
        :param pulumi.Input[str] target_resource_group_id: Gets or sets the target resource group ARM Id.
        :param pulumi.Input['ProtectedItemDynamicMemoryConfigArgs'] dynamic_memory_config: Protected item dynamic memory config.
        :param pulumi.Input[bool] is_dynamic_ram: Gets or sets a value indicating whether memory is dynamical.
        :param pulumi.Input[bool] perform_auto_resync: Gets or sets a value indicating whether auto resync is to be done.
        :param pulumi.Input[int] target_cpu_cores: Gets or sets the target CPU cores.
        :param pulumi.Input[int] target_memory_in_mega_bytes: Gets or sets the target memory in mega-bytes.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] target_vm_name: Gets or sets the target VM display name.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "custom_location_region", custom_location_region)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "hyper_v_generation", hyper_v_generation)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "nics_to_include", nics_to_include)
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        pulumi.set(__self__, "source_fabric_agent_name", source_fabric_agent_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "target_arc_cluster_custom_location_id", target_arc_cluster_custom_location_id)
        pulumi.set(__self__, "target_fabric_agent_name", target_fabric_agent_name)
        pulumi.set(__self__, "target_hci_cluster_id", target_hci_cluster_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if is_dynamic_ram is not None:
            pulumi.set(__self__, "is_dynamic_ram", is_dynamic_ram)
        if perform_auto_resync is not None:
            pulumi.set(__self__, "perform_auto_resync", perform_auto_resync)
        if target_cpu_cores is not None:
            pulumi.set(__self__, "target_cpu_cores", target_cpu_cores)
        if target_memory_in_mega_bytes is not None:
            pulumi.set(__self__, "target_memory_in_mega_bytes", target_memory_in_mega_bytes)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="customLocationRegion")
    def custom_location_region(self) -> pulumi.Input[str]:
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        return pulumi.get(self, "custom_location_region")

    @custom_location_region.setter
    def custom_location_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_location_region", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]]:
        """
        Gets or sets the list of disks to replicate.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @fabric_discovery_machine_id.setter
    def fabric_discovery_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_discovery_machine_id", value)

    @property
    @pulumi.getter(name="hyperVGeneration")
    def hyper_v_generation(self) -> pulumi.Input[str]:
        """
        Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        """
        return pulumi.get(self, "hyper_v_generation")

    @hyper_v_generation.setter
    def hyper_v_generation(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_generation", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for ProtectedItemModelCustomProperties.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="nicsToInclude")
    def nics_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]]:
        """
        Gets or sets the list of VM NIC to replicate.
        """
        return pulumi.get(self, "nics_to_include")

    @nics_to_include.setter
    def nics_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]]):
        pulumi.set(self, "nics_to_include", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the run as account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="sourceFabricAgentName")
    def source_fabric_agent_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the source fabric agent name.
        """
        return pulumi.get(self, "source_fabric_agent_name")

    @source_fabric_agent_name.setter
    def source_fabric_agent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_fabric_agent_name", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target storage container ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_container_id", value)

    @property
    @pulumi.getter(name="targetArcClusterCustomLocationId")
    def target_arc_cluster_custom_location_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        return pulumi.get(self, "target_arc_cluster_custom_location_id")

    @target_arc_cluster_custom_location_id.setter
    def target_arc_cluster_custom_location_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_arc_cluster_custom_location_id", value)

    @property
    @pulumi.getter(name="targetFabricAgentName")
    def target_fabric_agent_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target fabric agent name.
        """
        return pulumi.get(self, "target_fabric_agent_name")

    @target_fabric_agent_name.setter
    def target_fabric_agent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_fabric_agent_name", value)

    @property
    @pulumi.getter(name="targetHciClusterId")
    def target_hci_cluster_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        return pulumi.get(self, "target_hci_cluster_id")

    @target_hci_cluster_id.setter
    def target_hci_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_hci_cluster_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]:
        """
        Protected item dynamic memory config.
        """
        return pulumi.get(self, "dynamic_memory_config")

    @dynamic_memory_config.setter
    def dynamic_memory_config(self, value: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]):
        pulumi.set(self, "dynamic_memory_config", value)

    @property
    @pulumi.getter(name="isDynamicRam")
    def is_dynamic_ram(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        return pulumi.get(self, "is_dynamic_ram")

    @is_dynamic_ram.setter
    def is_dynamic_ram(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic_ram", value)

    @property
    @pulumi.getter(name="performAutoResync")
    def perform_auto_resync(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether auto resync is to be done.
        """
        return pulumi.get(self, "perform_auto_resync")

    @perform_auto_resync.setter
    def perform_auto_resync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "perform_auto_resync", value)

    @property
    @pulumi.getter(name="targetCpuCores")
    def target_cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target CPU cores.
        """
        return pulumi.get(self, "target_cpu_cores")

    @target_cpu_cores.setter
    def target_cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_cores", value)

    @property
    @pulumi.getter(name="targetMemoryInMegaBytes")
    def target_memory_in_mega_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target memory in mega-bytes.
        """
        return pulumi.get(self, "target_memory_in_mega_bytes")

    @target_memory_in_mega_bytes.setter
    def target_memory_in_mega_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target VM display name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)


if not MYPY:
    class VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict(TypedDict):
        """
        VMware to AzStackHCI Replication extension model custom properties.
        """
        az_stack_hci_fabric_arm_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        instance_type: pulumi.Input[str]
        """
        Discriminator property for ReplicationExtensionModelCustomProperties.
        Expected value is 'VMwareToAzStackHCI'.
        """
        vmware_fabric_arm_id: pulumi.Input[str]
        """
        Gets or sets the ARM Id of the source VMware fabric.
        """
        storage_account_id: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the storage account Id.
        """
        storage_account_sas_secret_name: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the Sas Secret of storage account.
        """
elif False:
    VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 az_stack_hci_fabric_arm_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 vmware_fabric_arm_id: pulumi.Input[str],
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 storage_account_sas_secret_name: Optional[pulumi.Input[str]] = None):
        """
        VMware to AzStackHCI Replication extension model custom properties.
        :param pulumi.Input[str] az_stack_hci_fabric_arm_id: Gets or sets the ARM Id of the target AzStackHCI fabric.
        :param pulumi.Input[str] instance_type: Discriminator property for ReplicationExtensionModelCustomProperties.
               Expected value is 'VMwareToAzStackHCI'.
        :param pulumi.Input[str] vmware_fabric_arm_id: Gets or sets the ARM Id of the source VMware fabric.
        :param pulumi.Input[str] storage_account_id: Gets or sets the storage account Id.
        :param pulumi.Input[str] storage_account_sas_secret_name: Gets or sets the Sas Secret of storage account.
        """
        pulumi.set(__self__, "az_stack_hci_fabric_arm_id", az_stack_hci_fabric_arm_id)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "vmware_fabric_arm_id", vmware_fabric_arm_id)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="azStackHciFabricArmId")
    def az_stack_hci_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        return pulumi.get(self, "az_stack_hci_fabric_arm_id")

    @az_stack_hci_fabric_arm_id.setter
    def az_stack_hci_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "az_stack_hci_fabric_arm_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for ReplicationExtensionModelCustomProperties.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="vmwareFabricArmId")
    def vmware_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the source VMware fabric.
        """
        return pulumi.get(self, "vmware_fabric_arm_id")

    @vmware_fabric_arm_id.setter
    def vmware_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_fabric_arm_id", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Sas Secret of storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_sas_secret_name", value)


if not MYPY:
    class VaultModelPropertiesArgsDict(TypedDict):
        """
        Vault properties.
        """
        vault_type: NotRequired[pulumi.Input[Union[str, 'ReplicationVaultType']]]
        """
        Gets or sets the type of vault.
        """
elif False:
    VaultModelPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VaultModelPropertiesArgs:
    def __init__(__self__, *,
                 vault_type: Optional[pulumi.Input[Union[str, 'ReplicationVaultType']]] = None):
        """
        Vault properties.
        :param pulumi.Input[Union[str, 'ReplicationVaultType']] vault_type: Gets or sets the type of vault.
        """
        if vault_type is not None:
            pulumi.set(__self__, "vault_type", vault_type)

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> Optional[pulumi.Input[Union[str, 'ReplicationVaultType']]]:
        """
        Gets or sets the type of vault.
        """
        return pulumi.get(self, "vault_type")

    @vault_type.setter
    def vault_type(self, value: Optional[pulumi.Input[Union[str, 'ReplicationVaultType']]]):
        pulumi.set(self, "vault_type", value)


