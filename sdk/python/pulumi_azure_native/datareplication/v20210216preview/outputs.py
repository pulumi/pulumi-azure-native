# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AzStackHCIClusterPropertiesResponse',
    'AzStackHCIFabricModelCustomPropertiesResponse',
    'DraModelPropertiesResponse',
    'DraModelResponseSystemData',
    'FabricModelPropertiesResponse',
    'FabricModelResponseSystemData',
    'HealthErrorModelResponse',
    'HyperVMigrateFabricModelCustomPropertiesResponse',
    'HyperVToAzStackHCIDiskInputResponse',
    'HyperVToAzStackHCINicInputResponse',
    'HyperVToAzStackHCIPolicyModelCustomPropertiesResponse',
    'HyperVToAzStackHCIProtectedDiskPropertiesResponse',
    'HyperVToAzStackHCIProtectedItemModelCustomPropertiesResponse',
    'HyperVToAzStackHCIProtectedNicPropertiesResponse',
    'HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesResponse',
    'IdentityModelResponse',
    'InnerHealthErrorModelResponse',
    'PolicyModelPropertiesResponse',
    'PolicyModelResponseSystemData',
    'ProtectedItemDynamicMemoryConfigResponse',
    'ProtectedItemModelPropertiesResponse',
    'ProtectedItemModelPropertiesResponseCurrentJob',
    'ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob',
    'ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob',
    'ProtectedItemModelPropertiesResponseLastTestFailoverJob',
    'ProtectedItemModelResponseSystemData',
    'ReplicationExtensionModelPropertiesResponse',
    'ReplicationExtensionModelResponseSystemData',
    'StorageContainerPropertiesResponse',
    'VMwareDraModelCustomPropertiesResponse',
    'VMwareMigrateFabricModelCustomPropertiesResponse',
    'VMwareToAzStackHCIDiskInputResponse',
    'VMwareToAzStackHCINicInputResponse',
    'VMwareToAzStackHCIPolicyModelCustomPropertiesResponse',
    'VMwareToAzStackHCIProtectedDiskPropertiesResponse',
    'VMwareToAzStackHCIProtectedItemModelCustomPropertiesResponse',
    'VMwareToAzStackHCIProtectedNicPropertiesResponse',
    'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesResponse',
    'VaultModelPropertiesResponse',
    'VaultModelResponseSystemData',
]

@pulumi.output_type
class AzStackHCIClusterPropertiesResponse(dict):
    """
    AzStackHCI cluster properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "storageContainers":
            suggest = "storage_containers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzStackHCIClusterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzStackHCIClusterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzStackHCIClusterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 resource_name: str,
                 storage_account_name: str,
                 storage_containers: Sequence['outputs.StorageContainerPropertiesResponse']):
        """
        AzStackHCI cluster properties.
        :param str cluster_name: Gets or sets the AzStackHCICluster FQDN name.
        :param str resource_name: Gets or sets the AzStackHCICluster resource name.
        :param str storage_account_name: Gets or sets the Storage account name.
        :param Sequence['StorageContainerPropertiesResponse'] storage_containers: Gets or sets the list of AzStackHCICluster Storage Container.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "storage_containers", storage_containers)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Gets or sets the AzStackHCICluster FQDN name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        Gets or sets the AzStackHCICluster resource name.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        """
        Gets or sets the Storage account name.
        """
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageContainers")
    def storage_containers(self) -> Sequence['outputs.StorageContainerPropertiesResponse']:
        """
        Gets or sets the list of AzStackHCICluster Storage Container.
        """
        return pulumi.get(self, "storage_containers")


@pulumi.output_type
class AzStackHCIFabricModelCustomPropertiesResponse(dict):
    """
    AzStackHCI fabric model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applianceName":
            suggest = "appliance_name"
        elif key == "azStackHciSiteId":
            suggest = "az_stack_hci_site_id"
        elif key == "fabricContainerId":
            suggest = "fabric_container_id"
        elif key == "fabricResourceId":
            suggest = "fabric_resource_id"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "migrationHubUri":
            suggest = "migration_hub_uri"
        elif key == "migrationSolutionId":
            suggest = "migration_solution_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzStackHCIFabricModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzStackHCIFabricModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzStackHCIFabricModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 appliance_name: Sequence[str],
                 az_stack_hci_site_id: str,
                 cluster: 'outputs.AzStackHCIClusterPropertiesResponse',
                 fabric_container_id: str,
                 fabric_resource_id: str,
                 instance_type: str,
                 migration_hub_uri: str,
                 migration_solution_id: str):
        """
        AzStackHCI fabric model custom properties.
        :param Sequence[str] appliance_name: Gets or sets the Appliance name.
        :param str az_stack_hci_site_id: Gets or sets the ARM Id of the AzStackHCI site.
        :param 'AzStackHCIClusterPropertiesResponse' cluster: AzStackHCI cluster properties.
        :param str fabric_container_id: Gets or sets the fabric container Id.
        :param str fabric_resource_id: Gets or sets the fabric resource Id.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'AzStackHCI'.
        :param str migration_hub_uri: Gets or sets the migration hub Uri.
        :param str migration_solution_id: Gets or sets the Migration solution ARM Id.
        """
        pulumi.set(__self__, "appliance_name", appliance_name)
        pulumi.set(__self__, "az_stack_hci_site_id", az_stack_hci_site_id)
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "fabric_container_id", fabric_container_id)
        pulumi.set(__self__, "fabric_resource_id", fabric_resource_id)
        pulumi.set(__self__, "instance_type", 'AzStackHCI')
        pulumi.set(__self__, "migration_hub_uri", migration_hub_uri)
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)

    @property
    @pulumi.getter(name="applianceName")
    def appliance_name(self) -> Sequence[str]:
        """
        Gets or sets the Appliance name.
        """
        return pulumi.get(self, "appliance_name")

    @property
    @pulumi.getter(name="azStackHciSiteId")
    def az_stack_hci_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the AzStackHCI site.
        """
        return pulumi.get(self, "az_stack_hci_site_id")

    @property
    @pulumi.getter
    def cluster(self) -> 'outputs.AzStackHCIClusterPropertiesResponse':
        """
        AzStackHCI cluster properties.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="fabricContainerId")
    def fabric_container_id(self) -> str:
        """
        Gets or sets the fabric container Id.
        """
        return pulumi.get(self, "fabric_container_id")

    @property
    @pulumi.getter(name="fabricResourceId")
    def fabric_resource_id(self) -> str:
        """
        Gets or sets the fabric resource Id.
        """
        return pulumi.get(self, "fabric_resource_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'AzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="migrationHubUri")
    def migration_hub_uri(self) -> str:
        """
        Gets or sets the migration hub Uri.
        """
        return pulumi.get(self, "migration_hub_uri")

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> str:
        """
        Gets or sets the Migration solution ARM Id.
        """
        return pulumi.get(self, "migration_solution_id")


@pulumi.output_type
class DraModelPropertiesResponse(dict):
    """
    Dra model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationIdentity":
            suggest = "authentication_identity"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "isResponsive":
            suggest = "is_responsive"
        elif key == "lastHeartbeat":
            suggest = "last_heartbeat"
        elif key == "machineId":
            suggest = "machine_id"
        elif key == "machineName":
            suggest = "machine_name"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "resourceAccessIdentity":
            suggest = "resource_access_identity"
        elif key == "versionNumber":
            suggest = "version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DraModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DraModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DraModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_identity: 'outputs.IdentityModelResponse',
                 correlation_id: str,
                 custom_properties: 'outputs.VMwareDraModelCustomPropertiesResponse',
                 health_errors: Sequence['outputs.HealthErrorModelResponse'],
                 is_responsive: bool,
                 last_heartbeat: str,
                 machine_id: str,
                 machine_name: str,
                 provisioning_state: str,
                 resource_access_identity: 'outputs.IdentityModelResponse',
                 version_number: str):
        """
        Dra model properties.
        :param 'IdentityModelResponse' authentication_identity: Identity model.
        :param str correlation_id: Gets or sets the Dra correlation Id.
        :param 'VMwareDraModelCustomPropertiesResponse' custom_properties: Dra model custom properties.
        :param Sequence['HealthErrorModelResponse'] health_errors: Gets or sets the list of health errors.
        :param bool is_responsive: Gets or sets a value indicating whether Dra is responsive.
        :param str last_heartbeat: Gets or sets the time when last heartbeat was sent by the Dra.
        :param str machine_id: Gets or sets the machine Id where Dra is running.
        :param str machine_name: Gets or sets the machine name where Dra is running.
        :param str provisioning_state: Gets or sets the provisioning state of the Dra.
        :param 'IdentityModelResponse' resource_access_identity: Identity model.
        :param str version_number: Gets or sets the Dra version.
        """
        pulumi.set(__self__, "authentication_identity", authentication_identity)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "health_errors", health_errors)
        pulumi.set(__self__, "is_responsive", is_responsive)
        pulumi.set(__self__, "last_heartbeat", last_heartbeat)
        pulumi.set(__self__, "machine_id", machine_id)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "resource_access_identity", resource_access_identity)
        pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="authenticationIdentity")
    def authentication_identity(self) -> 'outputs.IdentityModelResponse':
        """
        Identity model.
        """
        return pulumi.get(self, "authentication_identity")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        Gets or sets the Dra correlation Id.
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> 'outputs.VMwareDraModelCustomPropertiesResponse':
        """
        Dra model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Sequence['outputs.HealthErrorModelResponse']:
        """
        Gets or sets the list of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="isResponsive")
    def is_responsive(self) -> bool:
        """
        Gets or sets a value indicating whether Dra is responsive.
        """
        return pulumi.get(self, "is_responsive")

    @property
    @pulumi.getter(name="lastHeartbeat")
    def last_heartbeat(self) -> str:
        """
        Gets or sets the time when last heartbeat was sent by the Dra.
        """
        return pulumi.get(self, "last_heartbeat")

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> str:
        """
        Gets or sets the machine Id where Dra is running.
        """
        return pulumi.get(self, "machine_id")

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> str:
        """
        Gets or sets the machine name where Dra is running.
        """
        return pulumi.get(self, "machine_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the Dra.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceAccessIdentity")
    def resource_access_identity(self) -> 'outputs.IdentityModelResponse':
        """
        Identity model.
        """
        return pulumi.get(self, "resource_access_identity")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> str:
        """
        Gets or sets the Dra version.
        """
        return pulumi.get(self, "version_number")


@pulumi.output_type
class DraModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DraModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DraModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DraModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class FabricModelPropertiesResponse(dict):
    """
    Fabric model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProperties":
            suggest = "custom_properties"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "serviceEndpoint":
            suggest = "service_endpoint"
        elif key == "serviceResourceId":
            suggest = "service_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FabricModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FabricModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FabricModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_properties: Any,
                 health: str,
                 health_errors: Sequence['outputs.HealthErrorModelResponse'],
                 provisioning_state: str,
                 service_endpoint: str,
                 service_resource_id: str):
        """
        Fabric model properties.
        :param Union['AzStackHCIFabricModelCustomPropertiesResponse', 'HyperVMigrateFabricModelCustomPropertiesResponse', 'VMwareMigrateFabricModelCustomPropertiesResponse'] custom_properties: Fabric model custom properties.
        :param str health: Gets or sets the fabric health.
        :param Sequence['HealthErrorModelResponse'] health_errors: Gets or sets the list of health errors.
        :param str provisioning_state: Gets or sets the provisioning state of the fabric.
        :param str service_endpoint: Gets or sets the service endpoint.
        :param str service_resource_id: Gets or sets the service resource Id.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "health_errors", health_errors)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "service_endpoint", service_endpoint)
        pulumi.set(__self__, "service_resource_id", service_resource_id)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Any:
        """
        Fabric model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        Gets or sets the fabric health.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Sequence['outputs.HealthErrorModelResponse']:
        """
        Gets or sets the list of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the fabric.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> str:
        """
        Gets or sets the service endpoint.
        """
        return pulumi.get(self, "service_endpoint")

    @property
    @pulumi.getter(name="serviceResourceId")
    def service_resource_id(self) -> str:
        """
        Gets or sets the service resource Id.
        """
        return pulumi.get(self, "service_resource_id")


@pulumi.output_type
class FabricModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FabricModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FabricModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FabricModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class HealthErrorModelResponse(dict):
    """
    Health error model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "healthCategory":
            suggest = "health_category"
        elif key == "isCustomerResolvable":
            suggest = "is_customer_resolvable"
        elif key == "affectedResourceCorrelationIds":
            suggest = "affected_resource_correlation_ids"
        elif key == "affectedResourceType":
            suggest = "affected_resource_type"
        elif key == "childErrors":
            suggest = "child_errors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HealthErrorModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HealthErrorModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HealthErrorModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 causes: str,
                 code: str,
                 creation_time: str,
                 health_category: str,
                 is_customer_resolvable: bool,
                 message: str,
                 recommendation: str,
                 severity: str,
                 source: str,
                 summary: str,
                 affected_resource_correlation_ids: Optional[Sequence[str]] = None,
                 affected_resource_type: Optional[str] = None,
                 child_errors: Optional[Sequence['outputs.InnerHealthErrorModelResponse']] = None):
        """
        Health error model.
        :param str category: Gets or sets the error category.
        :param str causes: Gets or sets possible causes of the error.
        :param str code: Gets or sets the error code.
        :param str creation_time: Gets or sets the error creation time.
        :param str health_category: Gets or sets the health category.
        :param bool is_customer_resolvable: Gets or sets a value indicating whether the error is customer resolvable.
        :param str message: Gets or sets the error message.
        :param str recommendation: Gets or sets recommended action to resolve the error.
        :param str severity: Gets or sets the error severity.
        :param str source: Gets or sets the error source.
        :param str summary: Gets or sets the error summary.
        :param Sequence[str] affected_resource_correlation_ids: Gets or sets the list of affected resource correlation Ids. This can be used to
               uniquely identify the count of items affected by a specific category and severity
               as well as count of item affected by an specific issue.
        :param str affected_resource_type: Gets or sets the type of affected resource type.
        :param Sequence['InnerHealthErrorModelResponse'] child_errors: Gets or sets a list of child health errors associated with this error.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "causes", causes)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "health_category", health_category)
        pulumi.set(__self__, "is_customer_resolvable", is_customer_resolvable)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "summary", summary)
        if affected_resource_correlation_ids is not None:
            pulumi.set(__self__, "affected_resource_correlation_ids", affected_resource_correlation_ids)
        if affected_resource_type is not None:
            pulumi.set(__self__, "affected_resource_type", affected_resource_type)
        if child_errors is not None:
            pulumi.set(__self__, "child_errors", child_errors)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Gets or sets the error category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def causes(self) -> str:
        """
        Gets or sets possible causes of the error.
        """
        return pulumi.get(self, "causes")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Gets or sets the error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Gets or sets the error creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="healthCategory")
    def health_category(self) -> str:
        """
        Gets or sets the health category.
        """
        return pulumi.get(self, "health_category")

    @property
    @pulumi.getter(name="isCustomerResolvable")
    def is_customer_resolvable(self) -> bool:
        """
        Gets or sets a value indicating whether the error is customer resolvable.
        """
        return pulumi.get(self, "is_customer_resolvable")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Gets or sets the error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        Gets or sets recommended action to resolve the error.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Gets or sets the error severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Gets or sets the error source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def summary(self) -> str:
        """
        Gets or sets the error summary.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="affectedResourceCorrelationIds")
    def affected_resource_correlation_ids(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the list of affected resource correlation Ids. This can be used to
        uniquely identify the count of items affected by a specific category and severity
        as well as count of item affected by an specific issue.
        """
        return pulumi.get(self, "affected_resource_correlation_ids")

    @property
    @pulumi.getter(name="affectedResourceType")
    def affected_resource_type(self) -> Optional[str]:
        """
        Gets or sets the type of affected resource type.
        """
        return pulumi.get(self, "affected_resource_type")

    @property
    @pulumi.getter(name="childErrors")
    def child_errors(self) -> Optional[Sequence['outputs.InnerHealthErrorModelResponse']]:
        """
        Gets or sets a list of child health errors associated with this error.
        """
        return pulumi.get(self, "child_errors")


@pulumi.output_type
class HyperVMigrateFabricModelCustomPropertiesResponse(dict):
    """
    HyperV migrate fabric model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fabricContainerId":
            suggest = "fabric_container_id"
        elif key == "fabricResourceId":
            suggest = "fabric_resource_id"
        elif key == "hyperVSiteId":
            suggest = "hyper_v_site_id"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "migrationHubUri":
            suggest = "migration_hub_uri"
        elif key == "migrationSolutionId":
            suggest = "migration_solution_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVMigrateFabricModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVMigrateFabricModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVMigrateFabricModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fabric_container_id: str,
                 fabric_resource_id: str,
                 hyper_v_site_id: str,
                 instance_type: str,
                 migration_hub_uri: str,
                 migration_solution_id: str):
        """
        HyperV migrate fabric model custom properties.
        :param str fabric_container_id: Gets or sets the fabric container Id.
        :param str fabric_resource_id: Gets or sets the fabric resource Id.
        :param str hyper_v_site_id: Gets or sets the ARM Id of the HyperV site.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'HyperVMigrate'.
        :param str migration_hub_uri: Gets or sets the migration hub Uri.
        :param str migration_solution_id: Gets or sets the migration solution ARM Id.
        """
        pulumi.set(__self__, "fabric_container_id", fabric_container_id)
        pulumi.set(__self__, "fabric_resource_id", fabric_resource_id)
        pulumi.set(__self__, "hyper_v_site_id", hyper_v_site_id)
        pulumi.set(__self__, "instance_type", 'HyperVMigrate')
        pulumi.set(__self__, "migration_hub_uri", migration_hub_uri)
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)

    @property
    @pulumi.getter(name="fabricContainerId")
    def fabric_container_id(self) -> str:
        """
        Gets or sets the fabric container Id.
        """
        return pulumi.get(self, "fabric_container_id")

    @property
    @pulumi.getter(name="fabricResourceId")
    def fabric_resource_id(self) -> str:
        """
        Gets or sets the fabric resource Id.
        """
        return pulumi.get(self, "fabric_resource_id")

    @property
    @pulumi.getter(name="hyperVSiteId")
    def hyper_v_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the HyperV site.
        """
        return pulumi.get(self, "hyper_v_site_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVMigrate'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="migrationHubUri")
    def migration_hub_uri(self) -> str:
        """
        Gets or sets the migration hub Uri.
        """
        return pulumi.get(self, "migration_hub_uri")

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> str:
        """
        Gets or sets the migration solution ARM Id.
        """
        return pulumi.get(self, "migration_solution_id")


@pulumi.output_type
class HyperVToAzStackHCIDiskInputResponse(dict):
    """
    HyperVToAzStack disk input.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskFileFormat":
            suggest = "disk_file_format"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSizeGB":
            suggest = "disk_size_gb"
        elif key == "isOsDisk":
            suggest = "is_os_disk"
        elif key == "isDynamic":
            suggest = "is_dynamic"
        elif key == "storageContainerId":
            suggest = "storage_container_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCIDiskInputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCIDiskInputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCIDiskInputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_file_format: str,
                 disk_id: str,
                 disk_size_gb: float,
                 is_os_disk: bool,
                 is_dynamic: Optional[bool] = None,
                 storage_container_id: Optional[str] = None):
        """
        HyperVToAzStack disk input.
        :param str disk_file_format: Gets or sets the type of the virtual hard disk, vhd or vhdx.
        :param str disk_id: Gets or sets the disk Id.
        :param float disk_size_gb: Gets or sets the disk size in GB.
        :param bool is_os_disk: Gets or sets a value indicating whether disk is os disk.
        :param bool is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
               disk.
        :param str storage_container_id: Gets or sets the target storage account ARM Id.
        """
        pulumi.set(__self__, "disk_file_format", disk_file_format)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if storage_container_id is not None:
            pulumi.set(__self__, "storage_container_id", storage_container_id)

    @property
    @pulumi.getter(name="diskFileFormat")
    def disk_file_format(self) -> str:
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        return pulumi.get(self, "disk_file_format")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        """
        Gets or sets the disk Id.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> float:
        """
        Gets or sets the disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> bool:
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        return pulumi.get(self, "is_os_disk")

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
        disk.
        """
        return pulumi.get(self, "is_dynamic")

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> Optional[str]:
        """
        Gets or sets the target storage account ARM Id.
        """
        return pulumi.get(self, "storage_container_id")


@pulumi.output_type
class HyperVToAzStackHCINicInputResponse(dict):
    """
    HyperVToAzStackHCI NIC properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkName":
            suggest = "network_name"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "selectionTypeForFailover":
            suggest = "selection_type_for_failover"
        elif key == "targetNetworkId":
            suggest = "target_network_id"
        elif key == "testNetworkId":
            suggest = "test_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCINicInputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCINicInputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCINicInputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_name: str,
                 nic_id: str,
                 selection_type_for_failover: str,
                 target_network_id: str,
                 test_network_id: str):
        """
        HyperVToAzStackHCI NIC properties.
        :param str network_name: Gets or sets the network name.
        :param str nic_id: Gets or sets the NIC Id.
        :param str selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param str target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param str test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        """
        Gets or sets the network name.
        """
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> str:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> str:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> str:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")


@pulumi.output_type
class HyperVToAzStackHCIPolicyModelCustomPropertiesResponse(dict):
    """
    HyperV To AzStackHCI Policy model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appConsistentFrequencyInMinutes":
            suggest = "app_consistent_frequency_in_minutes"
        elif key == "crashConsistentFrequencyInMinutes":
            suggest = "crash_consistent_frequency_in_minutes"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "recoveryPointHistoryInMinutes":
            suggest = "recovery_point_history_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCIPolicyModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCIPolicyModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCIPolicyModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_consistent_frequency_in_minutes: int,
                 crash_consistent_frequency_in_minutes: int,
                 instance_type: str,
                 recovery_point_history_in_minutes: int):
        """
        HyperV To AzStackHCI Policy model custom properties.
        :param int app_consistent_frequency_in_minutes: Gets or sets the app consistent snapshot frequency (in minutes).
        :param int crash_consistent_frequency_in_minutes: Gets or sets the crash consistent snapshot frequency (in minutes).
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'HyperVToAzStackHCI'.
        :param int recovery_point_history_in_minutes: Gets or sets the duration in minutes until which the recovery points need to be
               stored.
        """
        pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> int:
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> int:
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> int:
        """
        Gets or sets the duration in minutes until which the recovery points need to be
        stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")


@pulumi.output_type
class HyperVToAzStackHCIProtectedDiskPropertiesResponse(dict):
    """
    HyperVToAzStackHCI protected disk properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityInBytes":
            suggest = "capacity_in_bytes"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "isDynamic":
            suggest = "is_dynamic"
        elif key == "isOsDisk":
            suggest = "is_os_disk"
        elif key == "migrateDiskName":
            suggest = "migrate_disk_name"
        elif key == "seedDiskName":
            suggest = "seed_disk_name"
        elif key == "sourceDiskId":
            suggest = "source_disk_id"
        elif key == "sourceDiskName":
            suggest = "source_disk_name"
        elif key == "storageContainerId":
            suggest = "storage_container_id"
        elif key == "storageContainerLocalPath":
            suggest = "storage_container_local_path"
        elif key == "testMigrateDiskName":
            suggest = "test_migrate_disk_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCIProtectedDiskPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCIProtectedDiskPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCIProtectedDiskPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_in_bytes: float,
                 disk_type: str,
                 is_dynamic: bool,
                 is_os_disk: bool,
                 migrate_disk_name: str,
                 seed_disk_name: str,
                 source_disk_id: str,
                 source_disk_name: str,
                 storage_container_id: str,
                 storage_container_local_path: str,
                 test_migrate_disk_name: str):
        """
        HyperVToAzStackHCI protected disk properties.
        :param float capacity_in_bytes: Gets or sets the disk capacity in bytes.
        :param str disk_type: Gets or sets the disk type.
        :param bool is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
               disk.
        :param bool is_os_disk: Gets or sets a value indicating whether the disk is the OS disk.
        :param str migrate_disk_name: Gets or sets the failover clone disk.
        :param str seed_disk_name: Gets or sets the seed disk name.
        :param str source_disk_id: Gets or sets the source disk Id.
        :param str source_disk_name: Gets or sets the source disk Name.
        :param str storage_container_id: Gets or sets the ARM Id of the storage container.
        :param str storage_container_local_path: Gets or sets the local path of the storage container.
        :param str test_migrate_disk_name: Gets or sets the test failover clone disk.
        """
        pulumi.set(__self__, "capacity_in_bytes", capacity_in_bytes)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "is_dynamic", is_dynamic)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        pulumi.set(__self__, "migrate_disk_name", migrate_disk_name)
        pulumi.set(__self__, "seed_disk_name", seed_disk_name)
        pulumi.set(__self__, "source_disk_id", source_disk_id)
        pulumi.set(__self__, "source_disk_name", source_disk_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "storage_container_local_path", storage_container_local_path)
        pulumi.set(__self__, "test_migrate_disk_name", test_migrate_disk_name)

    @property
    @pulumi.getter(name="capacityInBytes")
    def capacity_in_bytes(self) -> float:
        """
        Gets or sets the disk capacity in bytes.
        """
        return pulumi.get(self, "capacity_in_bytes")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Gets or sets the disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> bool:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
        disk.
        """
        return pulumi.get(self, "is_dynamic")

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> bool:
        """
        Gets or sets a value indicating whether the disk is the OS disk.
        """
        return pulumi.get(self, "is_os_disk")

    @property
    @pulumi.getter(name="migrateDiskName")
    def migrate_disk_name(self) -> str:
        """
        Gets or sets the failover clone disk.
        """
        return pulumi.get(self, "migrate_disk_name")

    @property
    @pulumi.getter(name="seedDiskName")
    def seed_disk_name(self) -> str:
        """
        Gets or sets the seed disk name.
        """
        return pulumi.get(self, "seed_disk_name")

    @property
    @pulumi.getter(name="sourceDiskId")
    def source_disk_id(self) -> str:
        """
        Gets or sets the source disk Id.
        """
        return pulumi.get(self, "source_disk_id")

    @property
    @pulumi.getter(name="sourceDiskName")
    def source_disk_name(self) -> str:
        """
        Gets or sets the source disk Name.
        """
        return pulumi.get(self, "source_disk_name")

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> str:
        """
        Gets or sets the ARM Id of the storage container.
        """
        return pulumi.get(self, "storage_container_id")

    @property
    @pulumi.getter(name="storageContainerLocalPath")
    def storage_container_local_path(self) -> str:
        """
        Gets or sets the local path of the storage container.
        """
        return pulumi.get(self, "storage_container_local_path")

    @property
    @pulumi.getter(name="testMigrateDiskName")
    def test_migrate_disk_name(self) -> str:
        """
        Gets or sets the test failover clone disk.
        """
        return pulumi.get(self, "test_migrate_disk_name")


@pulumi.output_type
class HyperVToAzStackHCIProtectedItemModelCustomPropertiesResponse(dict):
    """
    HyperV to AzStackHCI Protected item model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeLocation":
            suggest = "active_location"
        elif key == "customLocationRegion":
            suggest = "custom_location_region"
        elif key == "disksToInclude":
            suggest = "disks_to_include"
        elif key == "fabricDiscoveryMachineId":
            suggest = "fabric_discovery_machine_id"
        elif key == "failoverRecoveryPointId":
            suggest = "failover_recovery_point_id"
        elif key == "firmwareType":
            suggest = "firmware_type"
        elif key == "hyperVGeneration":
            suggest = "hyper_v_generation"
        elif key == "initialReplicationProgressPercentage":
            suggest = "initial_replication_progress_percentage"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "lastRecoveryPointId":
            suggest = "last_recovery_point_id"
        elif key == "lastRecoveryPointReceived":
            suggest = "last_recovery_point_received"
        elif key == "lastReplicationUpdateTime":
            suggest = "last_replication_update_time"
        elif key == "nicsToInclude":
            suggest = "nics_to_include"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osType":
            suggest = "os_type"
        elif key == "protectedDisks":
            suggest = "protected_disks"
        elif key == "protectedNics":
            suggest = "protected_nics"
        elif key == "resyncProgressPercentage":
            suggest = "resync_progress_percentage"
        elif key == "runAsAccountId":
            suggest = "run_as_account_id"
        elif key == "sourceApplianceName":
            suggest = "source_appliance_name"
        elif key == "sourceCpuCores":
            suggest = "source_cpu_cores"
        elif key == "sourceDraName":
            suggest = "source_dra_name"
        elif key == "sourceMemoryInMegaBytes":
            suggest = "source_memory_in_mega_bytes"
        elif key == "sourceVmName":
            suggest = "source_vm_name"
        elif key == "storageContainerId":
            suggest = "storage_container_id"
        elif key == "targetApplianceName":
            suggest = "target_appliance_name"
        elif key == "targetArcClusterCustomLocationId":
            suggest = "target_arc_cluster_custom_location_id"
        elif key == "targetAzStackHciClusterName":
            suggest = "target_az_stack_hci_cluster_name"
        elif key == "targetDraName":
            suggest = "target_dra_name"
        elif key == "targetHciClusterId":
            suggest = "target_hci_cluster_id"
        elif key == "targetLocation":
            suggest = "target_location"
        elif key == "targetResourceGroupId":
            suggest = "target_resource_group_id"
        elif key == "targetVmBiosId":
            suggest = "target_vm_bios_id"
        elif key == "dynamicMemoryConfig":
            suggest = "dynamic_memory_config"
        elif key == "isDynamicRam":
            suggest = "is_dynamic_ram"
        elif key == "targetCpuCores":
            suggest = "target_cpu_cores"
        elif key == "targetMemoryInMegaBytes":
            suggest = "target_memory_in_mega_bytes"
        elif key == "targetNetworkId":
            suggest = "target_network_id"
        elif key == "targetVmName":
            suggest = "target_vm_name"
        elif key == "testNetworkId":
            suggest = "test_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCIProtectedItemModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCIProtectedItemModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCIProtectedItemModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_location: str,
                 custom_location_region: str,
                 disks_to_include: Sequence['outputs.HyperVToAzStackHCIDiskInputResponse'],
                 fabric_discovery_machine_id: str,
                 failover_recovery_point_id: str,
                 firmware_type: str,
                 hyper_v_generation: str,
                 initial_replication_progress_percentage: int,
                 instance_type: str,
                 last_recovery_point_id: str,
                 last_recovery_point_received: str,
                 last_replication_update_time: str,
                 nics_to_include: Sequence['outputs.HyperVToAzStackHCINicInputResponse'],
                 os_name: str,
                 os_type: str,
                 protected_disks: Sequence['outputs.HyperVToAzStackHCIProtectedDiskPropertiesResponse'],
                 protected_nics: Sequence['outputs.HyperVToAzStackHCIProtectedNicPropertiesResponse'],
                 resync_progress_percentage: int,
                 run_as_account_id: str,
                 source_appliance_name: str,
                 source_cpu_cores: int,
                 source_dra_name: str,
                 source_memory_in_mega_bytes: float,
                 source_vm_name: str,
                 storage_container_id: str,
                 target_appliance_name: str,
                 target_arc_cluster_custom_location_id: str,
                 target_az_stack_hci_cluster_name: str,
                 target_dra_name: str,
                 target_hci_cluster_id: str,
                 target_location: str,
                 target_resource_group_id: str,
                 target_vm_bios_id: str,
                 dynamic_memory_config: Optional['outputs.ProtectedItemDynamicMemoryConfigResponse'] = None,
                 is_dynamic_ram: Optional[bool] = None,
                 target_cpu_cores: Optional[int] = None,
                 target_memory_in_mega_bytes: Optional[int] = None,
                 target_network_id: Optional[str] = None,
                 target_vm_name: Optional[str] = None,
                 test_network_id: Optional[str] = None):
        """
        HyperV to AzStackHCI Protected item model custom properties.
        :param str active_location: Gets or sets the location of the protected item.
        :param str custom_location_region: Gets or sets the location of Azure Arc HCI custom location resource.
        :param Sequence['HyperVToAzStackHCIDiskInputResponse'] disks_to_include: Gets or sets the list of disks to replicate.
        :param str fabric_discovery_machine_id: Gets or sets the ARM Id of the discovered machine.
        :param str failover_recovery_point_id: Gets or sets the recovery point Id to which the VM was failed over.
        :param str firmware_type: Gets or sets the firmware type.
        :param str hyper_v_generation: Gets or sets the hypervisor generation of the virtual machine.
        :param int initial_replication_progress_percentage: Gets or sets the initial replication progress percentage. This is calculated based on
               total bytes processed for all disks in the source VM.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'HyperVToAzStackHCI'.
        :param str last_recovery_point_id: Gets or sets the last recovery point Id.
        :param str last_recovery_point_received: Gets or sets the last recovery point received time.
        :param str last_replication_update_time: Gets or sets the latest timestamp that replication status is updated.
        :param Sequence['HyperVToAzStackHCINicInputResponse'] nics_to_include: Gets or sets the list of VM NIC to replicate.
        :param str os_name: Gets or sets the name of the OS.
        :param str os_type: Gets or sets the type of the OS.
        :param Sequence['HyperVToAzStackHCIProtectedDiskPropertiesResponse'] protected_disks: Gets or sets the list of protected disks.
        :param Sequence['HyperVToAzStackHCIProtectedNicPropertiesResponse'] protected_nics: Gets or sets the VM NIC details.
        :param int resync_progress_percentage: Gets or sets the resync progress percentage. This is calculated based on total bytes
               processed for all disks in the source VM.
        :param str run_as_account_id: Gets or sets the Run As account Id.
        :param str source_appliance_name: Gets or sets the source appliance name.
        :param int source_cpu_cores: Gets or sets the source VM CPU cores.
        :param str source_dra_name: Gets or sets the source DRA name.
        :param float source_memory_in_mega_bytes: Gets or sets the source VM ram memory size in megabytes.
        :param str source_vm_name: Gets or sets the source VM display name.
        :param str storage_container_id: Gets or sets the target storage container ARM Id.
        :param str target_appliance_name: Gets or sets the target appliance name.
        :param str target_arc_cluster_custom_location_id: Gets or sets the Target Arc Cluster Custom Location ARM Id.
        :param str target_az_stack_hci_cluster_name: Gets or sets the Target AzStackHCI cluster name.
        :param str target_dra_name: Gets or sets the target DRA name.
        :param str target_hci_cluster_id: Gets or sets the Target HCI Cluster ARM Id.
        :param str target_location: Gets or sets the target location.
        :param str target_resource_group_id: Gets or sets the target resource group ARM Id.
        :param str target_vm_bios_id: Gets or sets the BIOS Id of the target AzStackHCI VM.
        :param 'ProtectedItemDynamicMemoryConfigResponse' dynamic_memory_config: Protected item dynamic memory config.
        :param bool is_dynamic_ram: Gets or sets a value indicating whether memory is dynamical.
        :param int target_cpu_cores: Gets or sets the target CPU cores.
        :param int target_memory_in_mega_bytes: Gets or sets the target memory in mega-bytes.
        :param str target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param str target_vm_name: Gets or sets the target VM display name.
        :param str test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "active_location", active_location)
        pulumi.set(__self__, "custom_location_region", custom_location_region)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "failover_recovery_point_id", failover_recovery_point_id)
        pulumi.set(__self__, "firmware_type", firmware_type)
        pulumi.set(__self__, "hyper_v_generation", hyper_v_generation)
        pulumi.set(__self__, "initial_replication_progress_percentage", initial_replication_progress_percentage)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "last_recovery_point_id", last_recovery_point_id)
        pulumi.set(__self__, "last_recovery_point_received", last_recovery_point_received)
        pulumi.set(__self__, "last_replication_update_time", last_replication_update_time)
        pulumi.set(__self__, "nics_to_include", nics_to_include)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "protected_disks", protected_disks)
        pulumi.set(__self__, "protected_nics", protected_nics)
        pulumi.set(__self__, "resync_progress_percentage", resync_progress_percentage)
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        pulumi.set(__self__, "source_appliance_name", source_appliance_name)
        pulumi.set(__self__, "source_cpu_cores", source_cpu_cores)
        pulumi.set(__self__, "source_dra_name", source_dra_name)
        pulumi.set(__self__, "source_memory_in_mega_bytes", source_memory_in_mega_bytes)
        pulumi.set(__self__, "source_vm_name", source_vm_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "target_appliance_name", target_appliance_name)
        pulumi.set(__self__, "target_arc_cluster_custom_location_id", target_arc_cluster_custom_location_id)
        pulumi.set(__self__, "target_az_stack_hci_cluster_name", target_az_stack_hci_cluster_name)
        pulumi.set(__self__, "target_dra_name", target_dra_name)
        pulumi.set(__self__, "target_hci_cluster_id", target_hci_cluster_id)
        pulumi.set(__self__, "target_location", target_location)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        pulumi.set(__self__, "target_vm_bios_id", target_vm_bios_id)
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if is_dynamic_ram is not None:
            pulumi.set(__self__, "is_dynamic_ram", is_dynamic_ram)
        if target_cpu_cores is not None:
            pulumi.set(__self__, "target_cpu_cores", target_cpu_cores)
        if target_memory_in_mega_bytes is not None:
            pulumi.set(__self__, "target_memory_in_mega_bytes", target_memory_in_mega_bytes)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="activeLocation")
    def active_location(self) -> str:
        """
        Gets or sets the location of the protected item.
        """
        return pulumi.get(self, "active_location")

    @property
    @pulumi.getter(name="customLocationRegion")
    def custom_location_region(self) -> str:
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        return pulumi.get(self, "custom_location_region")

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Sequence['outputs.HyperVToAzStackHCIDiskInputResponse']:
        """
        Gets or sets the list of disks to replicate.
        """
        return pulumi.get(self, "disks_to_include")

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> str:
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @property
    @pulumi.getter(name="failoverRecoveryPointId")
    def failover_recovery_point_id(self) -> str:
        """
        Gets or sets the recovery point Id to which the VM was failed over.
        """
        return pulumi.get(self, "failover_recovery_point_id")

    @property
    @pulumi.getter(name="firmwareType")
    def firmware_type(self) -> str:
        """
        Gets or sets the firmware type.
        """
        return pulumi.get(self, "firmware_type")

    @property
    @pulumi.getter(name="hyperVGeneration")
    def hyper_v_generation(self) -> str:
        """
        Gets or sets the hypervisor generation of the virtual machine.
        """
        return pulumi.get(self, "hyper_v_generation")

    @property
    @pulumi.getter(name="initialReplicationProgressPercentage")
    def initial_replication_progress_percentage(self) -> int:
        """
        Gets or sets the initial replication progress percentage. This is calculated based on
        total bytes processed for all disks in the source VM.
        """
        return pulumi.get(self, "initial_replication_progress_percentage")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lastRecoveryPointId")
    def last_recovery_point_id(self) -> str:
        """
        Gets or sets the last recovery point Id.
        """
        return pulumi.get(self, "last_recovery_point_id")

    @property
    @pulumi.getter(name="lastRecoveryPointReceived")
    def last_recovery_point_received(self) -> str:
        """
        Gets or sets the last recovery point received time.
        """
        return pulumi.get(self, "last_recovery_point_received")

    @property
    @pulumi.getter(name="lastReplicationUpdateTime")
    def last_replication_update_time(self) -> str:
        """
        Gets or sets the latest timestamp that replication status is updated.
        """
        return pulumi.get(self, "last_replication_update_time")

    @property
    @pulumi.getter(name="nicsToInclude")
    def nics_to_include(self) -> Sequence['outputs.HyperVToAzStackHCINicInputResponse']:
        """
        Gets or sets the list of VM NIC to replicate.
        """
        return pulumi.get(self, "nics_to_include")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Gets or sets the name of the OS.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        Gets or sets the type of the OS.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="protectedDisks")
    def protected_disks(self) -> Sequence['outputs.HyperVToAzStackHCIProtectedDiskPropertiesResponse']:
        """
        Gets or sets the list of protected disks.
        """
        return pulumi.get(self, "protected_disks")

    @property
    @pulumi.getter(name="protectedNics")
    def protected_nics(self) -> Sequence['outputs.HyperVToAzStackHCIProtectedNicPropertiesResponse']:
        """
        Gets or sets the VM NIC details.
        """
        return pulumi.get(self, "protected_nics")

    @property
    @pulumi.getter(name="resyncProgressPercentage")
    def resync_progress_percentage(self) -> int:
        """
        Gets or sets the resync progress percentage. This is calculated based on total bytes
        processed for all disks in the source VM.
        """
        return pulumi.get(self, "resync_progress_percentage")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> str:
        """
        Gets or sets the Run As account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @property
    @pulumi.getter(name="sourceApplianceName")
    def source_appliance_name(self) -> str:
        """
        Gets or sets the source appliance name.
        """
        return pulumi.get(self, "source_appliance_name")

    @property
    @pulumi.getter(name="sourceCpuCores")
    def source_cpu_cores(self) -> int:
        """
        Gets or sets the source VM CPU cores.
        """
        return pulumi.get(self, "source_cpu_cores")

    @property
    @pulumi.getter(name="sourceDraName")
    def source_dra_name(self) -> str:
        """
        Gets or sets the source DRA name.
        """
        return pulumi.get(self, "source_dra_name")

    @property
    @pulumi.getter(name="sourceMemoryInMegaBytes")
    def source_memory_in_mega_bytes(self) -> float:
        """
        Gets or sets the source VM ram memory size in megabytes.
        """
        return pulumi.get(self, "source_memory_in_mega_bytes")

    @property
    @pulumi.getter(name="sourceVmName")
    def source_vm_name(self) -> str:
        """
        Gets or sets the source VM display name.
        """
        return pulumi.get(self, "source_vm_name")

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> str:
        """
        Gets or sets the target storage container ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @property
    @pulumi.getter(name="targetApplianceName")
    def target_appliance_name(self) -> str:
        """
        Gets or sets the target appliance name.
        """
        return pulumi.get(self, "target_appliance_name")

    @property
    @pulumi.getter(name="targetArcClusterCustomLocationId")
    def target_arc_cluster_custom_location_id(self) -> str:
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        return pulumi.get(self, "target_arc_cluster_custom_location_id")

    @property
    @pulumi.getter(name="targetAzStackHciClusterName")
    def target_az_stack_hci_cluster_name(self) -> str:
        """
        Gets or sets the Target AzStackHCI cluster name.
        """
        return pulumi.get(self, "target_az_stack_hci_cluster_name")

    @property
    @pulumi.getter(name="targetDraName")
    def target_dra_name(self) -> str:
        """
        Gets or sets the target DRA name.
        """
        return pulumi.get(self, "target_dra_name")

    @property
    @pulumi.getter(name="targetHciClusterId")
    def target_hci_cluster_id(self) -> str:
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        return pulumi.get(self, "target_hci_cluster_id")

    @property
    @pulumi.getter(name="targetLocation")
    def target_location(self) -> str:
        """
        Gets or sets the target location.
        """
        return pulumi.get(self, "target_location")

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> str:
        """
        Gets or sets the target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @property
    @pulumi.getter(name="targetVmBiosId")
    def target_vm_bios_id(self) -> str:
        """
        Gets or sets the BIOS Id of the target AzStackHCI VM.
        """
        return pulumi.get(self, "target_vm_bios_id")

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional['outputs.ProtectedItemDynamicMemoryConfigResponse']:
        """
        Protected item dynamic memory config.
        """
        return pulumi.get(self, "dynamic_memory_config")

    @property
    @pulumi.getter(name="isDynamicRam")
    def is_dynamic_ram(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        return pulumi.get(self, "is_dynamic_ram")

    @property
    @pulumi.getter(name="targetCpuCores")
    def target_cpu_cores(self) -> Optional[int]:
        """
        Gets or sets the target CPU cores.
        """
        return pulumi.get(self, "target_cpu_cores")

    @property
    @pulumi.getter(name="targetMemoryInMegaBytes")
    def target_memory_in_mega_bytes(self) -> Optional[int]:
        """
        Gets or sets the target memory in mega-bytes.
        """
        return pulumi.get(self, "target_memory_in_mega_bytes")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[str]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[str]:
        """
        Gets or sets the target VM display name.
        """
        return pulumi.get(self, "target_vm_name")

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[str]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")


@pulumi.output_type
class HyperVToAzStackHCIProtectedNicPropertiesResponse(dict):
    """
    HyperVToAzStackHCI NIC properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macAddress":
            suggest = "mac_address"
        elif key == "networkName":
            suggest = "network_name"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "selectionTypeForFailover":
            suggest = "selection_type_for_failover"
        elif key == "targetNetworkId":
            suggest = "target_network_id"
        elif key == "testNetworkId":
            suggest = "test_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCIProtectedNicPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCIProtectedNicPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCIProtectedNicPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac_address: str,
                 network_name: str,
                 nic_id: str,
                 selection_type_for_failover: str,
                 target_network_id: str,
                 test_network_id: str):
        """
        HyperVToAzStackHCI NIC properties.
        :param str mac_address: Gets or sets the NIC mac address.
        :param str network_name: Gets or sets the network name.
        :param str nic_id: Gets or sets the NIC Id.
        :param str selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param str target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param str test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        Gets or sets the NIC mac address.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        """
        Gets or sets the network name.
        """
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> str:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> str:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> str:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")


@pulumi.output_type
class HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesResponse(dict):
    """
    HyperV to AzStackHCI Replication extension model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrServiceUri":
            suggest = "asr_service_uri"
        elif key == "azStackHciFabricArmId":
            suggest = "az_stack_hci_fabric_arm_id"
        elif key == "azStackHciSiteId":
            suggest = "az_stack_hci_site_id"
        elif key == "gatewayServiceUri":
            suggest = "gateway_service_uri"
        elif key == "hyperVFabricArmId":
            suggest = "hyper_v_fabric_arm_id"
        elif key == "hyperVSiteId":
            suggest = "hyper_v_site_id"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "rcmServiceUri":
            suggest = "rcm_service_uri"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "resourceLocation":
            suggest = "resource_location"
        elif key == "sourceGatewayServiceId":
            suggest = "source_gateway_service_id"
        elif key == "sourceStorageContainerName":
            suggest = "source_storage_container_name"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "targetGatewayServiceId":
            suggest = "target_gateway_service_id"
        elif key == "targetStorageContainerName":
            suggest = "target_storage_container_name"
        elif key == "storageAccountId":
            suggest = "storage_account_id"
        elif key == "storageAccountSasSecretName":
            suggest = "storage_account_sas_secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_service_uri: str,
                 az_stack_hci_fabric_arm_id: str,
                 az_stack_hci_site_id: str,
                 gateway_service_uri: str,
                 hyper_v_fabric_arm_id: str,
                 hyper_v_site_id: str,
                 instance_type: str,
                 rcm_service_uri: str,
                 resource_group: str,
                 resource_location: str,
                 source_gateway_service_id: str,
                 source_storage_container_name: str,
                 subscription_id: str,
                 target_gateway_service_id: str,
                 target_storage_container_name: str,
                 storage_account_id: Optional[str] = None,
                 storage_account_sas_secret_name: Optional[str] = None):
        """
        HyperV to AzStackHCI Replication extension model custom properties.
        :param str asr_service_uri: Gets or sets the Uri of ASR.
        :param str az_stack_hci_fabric_arm_id: Gets or sets the ARM Id of the target AzStackHCI fabric.
        :param str az_stack_hci_site_id: Gets or sets the ARM Id of the AzStackHCI site.
        :param str gateway_service_uri: Gets or sets the Uri of Gateway.
        :param str hyper_v_fabric_arm_id: Gets or sets the ARM Id of the source HyperV fabric.
        :param str hyper_v_site_id: Gets or sets the ARM Id of the HyperV site.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'HyperVToAzStackHCI'.
        :param str rcm_service_uri: Gets or sets the Uri of Rcm.
        :param str resource_group: Gets or sets the resource group.
        :param str resource_location: Gets or sets the resource location.
        :param str source_gateway_service_id: Gets or sets the gateway service Id of source.
        :param str source_storage_container_name: Gets or sets the source storage container name.
        :param str subscription_id: Gets or sets the subscription.
        :param str target_gateway_service_id: Gets or sets the gateway service Id of target.
        :param str target_storage_container_name: Gets or sets the target storage container name.
        :param str storage_account_id: Gets or sets the storage account Id.
        :param str storage_account_sas_secret_name: Gets or sets the Sas Secret of storage account.
        """
        pulumi.set(__self__, "asr_service_uri", asr_service_uri)
        pulumi.set(__self__, "az_stack_hci_fabric_arm_id", az_stack_hci_fabric_arm_id)
        pulumi.set(__self__, "az_stack_hci_site_id", az_stack_hci_site_id)
        pulumi.set(__self__, "gateway_service_uri", gateway_service_uri)
        pulumi.set(__self__, "hyper_v_fabric_arm_id", hyper_v_fabric_arm_id)
        pulumi.set(__self__, "hyper_v_site_id", hyper_v_site_id)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "rcm_service_uri", rcm_service_uri)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "resource_location", resource_location)
        pulumi.set(__self__, "source_gateway_service_id", source_gateway_service_id)
        pulumi.set(__self__, "source_storage_container_name", source_storage_container_name)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "target_gateway_service_id", target_gateway_service_id)
        pulumi.set(__self__, "target_storage_container_name", target_storage_container_name)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="asrServiceUri")
    def asr_service_uri(self) -> str:
        """
        Gets or sets the Uri of ASR.
        """
        return pulumi.get(self, "asr_service_uri")

    @property
    @pulumi.getter(name="azStackHciFabricArmId")
    def az_stack_hci_fabric_arm_id(self) -> str:
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        return pulumi.get(self, "az_stack_hci_fabric_arm_id")

    @property
    @pulumi.getter(name="azStackHciSiteId")
    def az_stack_hci_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the AzStackHCI site.
        """
        return pulumi.get(self, "az_stack_hci_site_id")

    @property
    @pulumi.getter(name="gatewayServiceUri")
    def gateway_service_uri(self) -> str:
        """
        Gets or sets the Uri of Gateway.
        """
        return pulumi.get(self, "gateway_service_uri")

    @property
    @pulumi.getter(name="hyperVFabricArmId")
    def hyper_v_fabric_arm_id(self) -> str:
        """
        Gets or sets the ARM Id of the source HyperV fabric.
        """
        return pulumi.get(self, "hyper_v_fabric_arm_id")

    @property
    @pulumi.getter(name="hyperVSiteId")
    def hyper_v_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the HyperV site.
        """
        return pulumi.get(self, "hyper_v_site_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="rcmServiceUri")
    def rcm_service_uri(self) -> str:
        """
        Gets or sets the Uri of Rcm.
        """
        return pulumi.get(self, "rcm_service_uri")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Gets or sets the resource group.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> str:
        """
        Gets or sets the resource location.
        """
        return pulumi.get(self, "resource_location")

    @property
    @pulumi.getter(name="sourceGatewayServiceId")
    def source_gateway_service_id(self) -> str:
        """
        Gets or sets the gateway service Id of source.
        """
        return pulumi.get(self, "source_gateway_service_id")

    @property
    @pulumi.getter(name="sourceStorageContainerName")
    def source_storage_container_name(self) -> str:
        """
        Gets or sets the source storage container name.
        """
        return pulumi.get(self, "source_storage_container_name")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Gets or sets the subscription.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="targetGatewayServiceId")
    def target_gateway_service_id(self) -> str:
        """
        Gets or sets the gateway service Id of target.
        """
        return pulumi.get(self, "target_gateway_service_id")

    @property
    @pulumi.getter(name="targetStorageContainerName")
    def target_storage_container_name(self) -> str:
        """
        Gets or sets the target storage container name.
        """
        return pulumi.get(self, "target_storage_container_name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[str]:
        """
        Gets or sets the storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[str]:
        """
        Gets or sets the Sas Secret of storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")


@pulumi.output_type
class IdentityModelResponse(dict):
    """
    Identity model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadAuthority":
            suggest = "aad_authority"
        elif key == "applicationId":
            suggest = "application_id"
        elif key == "objectId":
            suggest = "object_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aad_authority: str,
                 application_id: str,
                 audience: str,
                 object_id: str,
                 tenant_id: str):
        """
        Identity model.
        :param str aad_authority: Gets or sets the authority of the SPN with which Dra communicates to service.
        :param str application_id: Gets or sets the client/application Id of the SPN with which Dra communicates to
               service.
        :param str audience: Gets or sets the audience of the SPN with which Dra communicates to service.
        :param str object_id: Gets or sets the object Id of the SPN with which Dra communicates to service.
        :param str tenant_id: Gets or sets the tenant Id of the SPN with which Dra communicates to service.
        """
        pulumi.set(__self__, "aad_authority", aad_authority)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> str:
        """
        Gets or sets the authority of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "aad_authority")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        Gets or sets the client/application Id of the SPN with which Dra communicates to
        service.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Gets or sets the audience of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        """
        Gets or sets the object Id of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Gets or sets the tenant Id of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class InnerHealthErrorModelResponse(dict):
    """
    Inner health error model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "healthCategory":
            suggest = "health_category"
        elif key == "isCustomerResolvable":
            suggest = "is_customer_resolvable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InnerHealthErrorModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InnerHealthErrorModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InnerHealthErrorModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 causes: str,
                 code: str,
                 creation_time: str,
                 health_category: str,
                 is_customer_resolvable: bool,
                 message: str,
                 recommendation: str,
                 severity: str,
                 source: str,
                 summary: str):
        """
        Inner health error model.
        :param str category: Gets or sets the error category.
        :param str causes: Gets or sets possible causes of the error.
        :param str code: Gets or sets the error code.
        :param str creation_time: Gets or sets the error creation time.
        :param str health_category: Gets or sets the health category.
        :param bool is_customer_resolvable: Gets or sets a value indicating whether the error is customer resolvable.
        :param str message: Gets or sets the error message.
        :param str recommendation: Gets or sets recommended action to resolve the error.
        :param str severity: Gets or sets the error severity.
        :param str source: Gets or sets the error source.
        :param str summary: Gets or sets the error summary.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "causes", causes)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "health_category", health_category)
        pulumi.set(__self__, "is_customer_resolvable", is_customer_resolvable)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Gets or sets the error category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def causes(self) -> str:
        """
        Gets or sets possible causes of the error.
        """
        return pulumi.get(self, "causes")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Gets or sets the error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Gets or sets the error creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="healthCategory")
    def health_category(self) -> str:
        """
        Gets or sets the health category.
        """
        return pulumi.get(self, "health_category")

    @property
    @pulumi.getter(name="isCustomerResolvable")
    def is_customer_resolvable(self) -> bool:
        """
        Gets or sets a value indicating whether the error is customer resolvable.
        """
        return pulumi.get(self, "is_customer_resolvable")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Gets or sets the error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        Gets or sets recommended action to resolve the error.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Gets or sets the error severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Gets or sets the error source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def summary(self) -> str:
        """
        Gets or sets the error summary.
        """
        return pulumi.get(self, "summary")


@pulumi.output_type
class PolicyModelPropertiesResponse(dict):
    """
    Policy model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProperties":
            suggest = "custom_properties"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_properties: Any,
                 provisioning_state: str):
        """
        Policy model properties.
        :param Union['HyperVToAzStackHCIPolicyModelCustomPropertiesResponse', 'VMwareToAzStackHCIPolicyModelCustomPropertiesResponse'] custom_properties: Policy model custom properties.
        :param str provisioning_state: Gets or sets the provisioning state of the policy.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Any:
        """
        Policy model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the policy.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class PolicyModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ProtectedItemDynamicMemoryConfigResponse(dict):
    """
    Protected item dynamic memory config.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumMemoryInMegaBytes":
            suggest = "maximum_memory_in_mega_bytes"
        elif key == "minimumMemoryInMegaBytes":
            suggest = "minimum_memory_in_mega_bytes"
        elif key == "targetMemoryBufferPercentage":
            suggest = "target_memory_buffer_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemDynamicMemoryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemDynamicMemoryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemDynamicMemoryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_memory_in_mega_bytes: float,
                 minimum_memory_in_mega_bytes: float,
                 target_memory_buffer_percentage: int):
        """
        Protected item dynamic memory config.
        :param float maximum_memory_in_mega_bytes: Gets or sets maximum memory in MB.
        :param float minimum_memory_in_mega_bytes: Gets or sets minimum memory in MB.
        :param int target_memory_buffer_percentage: Gets or sets target memory buffer in %.
        """
        pulumi.set(__self__, "maximum_memory_in_mega_bytes", maximum_memory_in_mega_bytes)
        pulumi.set(__self__, "minimum_memory_in_mega_bytes", minimum_memory_in_mega_bytes)
        pulumi.set(__self__, "target_memory_buffer_percentage", target_memory_buffer_percentage)

    @property
    @pulumi.getter(name="maximumMemoryInMegaBytes")
    def maximum_memory_in_mega_bytes(self) -> float:
        """
        Gets or sets maximum memory in MB.
        """
        return pulumi.get(self, "maximum_memory_in_mega_bytes")

    @property
    @pulumi.getter(name="minimumMemoryInMegaBytes")
    def minimum_memory_in_mega_bytes(self) -> float:
        """
        Gets or sets minimum memory in MB.
        """
        return pulumi.get(self, "minimum_memory_in_mega_bytes")

    @property
    @pulumi.getter(name="targetMemoryBufferPercentage")
    def target_memory_buffer_percentage(self) -> int:
        """
        Gets or sets target memory buffer in %.
        """
        return pulumi.get(self, "target_memory_buffer_percentage")


@pulumi.output_type
class ProtectedItemModelPropertiesResponse(dict):
    """
    Protected item model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedJobs":
            suggest = "allowed_jobs"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "currentJob":
            suggest = "current_job"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "draId":
            suggest = "dra_id"
        elif key == "fabricId":
            suggest = "fabric_id"
        elif key == "fabricObjectId":
            suggest = "fabric_object_id"
        elif key == "fabricObjectName":
            suggest = "fabric_object_name"
        elif key == "healthErrors":
            suggest = "health_errors"
        elif key == "lastFailedEnableProtectionJob":
            suggest = "last_failed_enable_protection_job"
        elif key == "lastFailedPlannedFailoverJob":
            suggest = "last_failed_planned_failover_job"
        elif key == "lastSuccessfulPlannedFailoverTime":
            suggest = "last_successful_planned_failover_time"
        elif key == "lastSuccessfulTestFailoverTime":
            suggest = "last_successful_test_failover_time"
        elif key == "lastSuccessfulUnplannedFailoverTime":
            suggest = "last_successful_unplanned_failover_time"
        elif key == "lastTestFailoverJob":
            suggest = "last_test_failover_job"
        elif key == "policyName":
            suggest = "policy_name"
        elif key == "protectionState":
            suggest = "protection_state"
        elif key == "protectionStateDescription":
            suggest = "protection_state_description"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "replicationExtensionName":
            suggest = "replication_extension_name"
        elif key == "replicationHealth":
            suggest = "replication_health"
        elif key == "resyncRequired":
            suggest = "resync_required"
        elif key == "resynchronizationState":
            suggest = "resynchronization_state"
        elif key == "sourceFabricProviderId":
            suggest = "source_fabric_provider_id"
        elif key == "targetDraId":
            suggest = "target_dra_id"
        elif key == "targetFabricId":
            suggest = "target_fabric_id"
        elif key == "targetFabricProviderId":
            suggest = "target_fabric_provider_id"
        elif key == "testFailoverState":
            suggest = "test_failover_state"
        elif key == "testFailoverStateDescription":
            suggest = "test_failover_state_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_jobs: Sequence[str],
                 correlation_id: str,
                 current_job: 'outputs.ProtectedItemModelPropertiesResponseCurrentJob',
                 custom_properties: Any,
                 dra_id: str,
                 fabric_id: str,
                 fabric_object_id: str,
                 fabric_object_name: str,
                 health_errors: Sequence['outputs.HealthErrorModelResponse'],
                 last_failed_enable_protection_job: 'outputs.ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob',
                 last_failed_planned_failover_job: 'outputs.ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob',
                 last_successful_planned_failover_time: str,
                 last_successful_test_failover_time: str,
                 last_successful_unplanned_failover_time: str,
                 last_test_failover_job: 'outputs.ProtectedItemModelPropertiesResponseLastTestFailoverJob',
                 policy_name: str,
                 protection_state: str,
                 protection_state_description: str,
                 provisioning_state: str,
                 replication_extension_name: str,
                 replication_health: str,
                 resync_required: bool,
                 resynchronization_state: str,
                 source_fabric_provider_id: str,
                 target_dra_id: str,
                 target_fabric_id: str,
                 target_fabric_provider_id: str,
                 test_failover_state: str,
                 test_failover_state_description: str):
        """
        Protected item model properties.
        :param Sequence[str] allowed_jobs: Gets or sets the allowed scenarios on the protected item.
        :param str correlation_id: Gets or sets the protected item correlation Id.
        :param Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesResponse', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesResponse'] custom_properties: Protected item model custom properties.
        :param str dra_id: Gets or sets the DRA Id.
        :param str fabric_id: Gets or sets the fabric Id.
        :param str fabric_object_id: Gets or sets the fabric object Id.
        :param str fabric_object_name: Gets or sets the fabric object name.
        :param Sequence['HealthErrorModelResponse'] health_errors: Gets or sets the list of health errors.
        :param str last_successful_planned_failover_time: Gets or sets the Last successful planned failover time.
        :param str last_successful_test_failover_time: Gets or sets the Last successful test failover time.
        :param str last_successful_unplanned_failover_time: Gets or sets the Last successful unplanned failover time.
        :param str policy_name: Gets or sets the policy name.
        :param str protection_state: Gets or sets the protection state.
        :param str protection_state_description: Gets or sets the protection state description.
        :param str provisioning_state: Gets or sets the provisioning state of the Dra.
        :param str replication_extension_name: Gets or sets the replication extension name.
        :param str replication_health: Gets or sets protected item replication health.
        :param bool resync_required: Gets or sets a value indicating whether resynchronization is required or not.
        :param str resynchronization_state: Gets or sets the resynchronization state.
        :param str source_fabric_provider_id: Gets or sets the source fabric provider Id.
        :param str target_dra_id: Gets or sets the target DRA Id.
        :param str target_fabric_id: Gets or sets the target fabric Id.
        :param str target_fabric_provider_id: Gets or sets the target fabric provider Id.
        :param str test_failover_state: Gets or sets the test failover state.
        :param str test_failover_state_description: Gets or sets the Test failover state description.
        """
        pulumi.set(__self__, "allowed_jobs", allowed_jobs)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "current_job", current_job)
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "dra_id", dra_id)
        pulumi.set(__self__, "fabric_id", fabric_id)
        pulumi.set(__self__, "fabric_object_id", fabric_object_id)
        pulumi.set(__self__, "fabric_object_name", fabric_object_name)
        pulumi.set(__self__, "health_errors", health_errors)
        pulumi.set(__self__, "last_failed_enable_protection_job", last_failed_enable_protection_job)
        pulumi.set(__self__, "last_failed_planned_failover_job", last_failed_planned_failover_job)
        pulumi.set(__self__, "last_successful_planned_failover_time", last_successful_planned_failover_time)
        pulumi.set(__self__, "last_successful_test_failover_time", last_successful_test_failover_time)
        pulumi.set(__self__, "last_successful_unplanned_failover_time", last_successful_unplanned_failover_time)
        pulumi.set(__self__, "last_test_failover_job", last_test_failover_job)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "protection_state", protection_state)
        pulumi.set(__self__, "protection_state_description", protection_state_description)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "replication_extension_name", replication_extension_name)
        pulumi.set(__self__, "replication_health", replication_health)
        pulumi.set(__self__, "resync_required", resync_required)
        pulumi.set(__self__, "resynchronization_state", resynchronization_state)
        pulumi.set(__self__, "source_fabric_provider_id", source_fabric_provider_id)
        pulumi.set(__self__, "target_dra_id", target_dra_id)
        pulumi.set(__self__, "target_fabric_id", target_fabric_id)
        pulumi.set(__self__, "target_fabric_provider_id", target_fabric_provider_id)
        pulumi.set(__self__, "test_failover_state", test_failover_state)
        pulumi.set(__self__, "test_failover_state_description", test_failover_state_description)

    @property
    @pulumi.getter(name="allowedJobs")
    def allowed_jobs(self) -> Sequence[str]:
        """
        Gets or sets the allowed scenarios on the protected item.
        """
        return pulumi.get(self, "allowed_jobs")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        Gets or sets the protected item correlation Id.
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter(name="currentJob")
    def current_job(self) -> 'outputs.ProtectedItemModelPropertiesResponseCurrentJob':
        return pulumi.get(self, "current_job")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Any:
        """
        Protected item model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="draId")
    def dra_id(self) -> str:
        """
        Gets or sets the DRA Id.
        """
        return pulumi.get(self, "dra_id")

    @property
    @pulumi.getter(name="fabricId")
    def fabric_id(self) -> str:
        """
        Gets or sets the fabric Id.
        """
        return pulumi.get(self, "fabric_id")

    @property
    @pulumi.getter(name="fabricObjectId")
    def fabric_object_id(self) -> str:
        """
        Gets or sets the fabric object Id.
        """
        return pulumi.get(self, "fabric_object_id")

    @property
    @pulumi.getter(name="fabricObjectName")
    def fabric_object_name(self) -> str:
        """
        Gets or sets the fabric object name.
        """
        return pulumi.get(self, "fabric_object_name")

    @property
    @pulumi.getter(name="healthErrors")
    def health_errors(self) -> Sequence['outputs.HealthErrorModelResponse']:
        """
        Gets or sets the list of health errors.
        """
        return pulumi.get(self, "health_errors")

    @property
    @pulumi.getter(name="lastFailedEnableProtectionJob")
    def last_failed_enable_protection_job(self) -> 'outputs.ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob':
        return pulumi.get(self, "last_failed_enable_protection_job")

    @property
    @pulumi.getter(name="lastFailedPlannedFailoverJob")
    def last_failed_planned_failover_job(self) -> 'outputs.ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob':
        return pulumi.get(self, "last_failed_planned_failover_job")

    @property
    @pulumi.getter(name="lastSuccessfulPlannedFailoverTime")
    def last_successful_planned_failover_time(self) -> str:
        """
        Gets or sets the Last successful planned failover time.
        """
        return pulumi.get(self, "last_successful_planned_failover_time")

    @property
    @pulumi.getter(name="lastSuccessfulTestFailoverTime")
    def last_successful_test_failover_time(self) -> str:
        """
        Gets or sets the Last successful test failover time.
        """
        return pulumi.get(self, "last_successful_test_failover_time")

    @property
    @pulumi.getter(name="lastSuccessfulUnplannedFailoverTime")
    def last_successful_unplanned_failover_time(self) -> str:
        """
        Gets or sets the Last successful unplanned failover time.
        """
        return pulumi.get(self, "last_successful_unplanned_failover_time")

    @property
    @pulumi.getter(name="lastTestFailoverJob")
    def last_test_failover_job(self) -> 'outputs.ProtectedItemModelPropertiesResponseLastTestFailoverJob':
        return pulumi.get(self, "last_test_failover_job")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Gets or sets the policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="protectionState")
    def protection_state(self) -> str:
        """
        Gets or sets the protection state.
        """
        return pulumi.get(self, "protection_state")

    @property
    @pulumi.getter(name="protectionStateDescription")
    def protection_state_description(self) -> str:
        """
        Gets or sets the protection state description.
        """
        return pulumi.get(self, "protection_state_description")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the Dra.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="replicationExtensionName")
    def replication_extension_name(self) -> str:
        """
        Gets or sets the replication extension name.
        """
        return pulumi.get(self, "replication_extension_name")

    @property
    @pulumi.getter(name="replicationHealth")
    def replication_health(self) -> str:
        """
        Gets or sets protected item replication health.
        """
        return pulumi.get(self, "replication_health")

    @property
    @pulumi.getter(name="resyncRequired")
    def resync_required(self) -> bool:
        """
        Gets or sets a value indicating whether resynchronization is required or not.
        """
        return pulumi.get(self, "resync_required")

    @property
    @pulumi.getter(name="resynchronizationState")
    def resynchronization_state(self) -> str:
        """
        Gets or sets the resynchronization state.
        """
        return pulumi.get(self, "resynchronization_state")

    @property
    @pulumi.getter(name="sourceFabricProviderId")
    def source_fabric_provider_id(self) -> str:
        """
        Gets or sets the source fabric provider Id.
        """
        return pulumi.get(self, "source_fabric_provider_id")

    @property
    @pulumi.getter(name="targetDraId")
    def target_dra_id(self) -> str:
        """
        Gets or sets the target DRA Id.
        """
        return pulumi.get(self, "target_dra_id")

    @property
    @pulumi.getter(name="targetFabricId")
    def target_fabric_id(self) -> str:
        """
        Gets or sets the target fabric Id.
        """
        return pulumi.get(self, "target_fabric_id")

    @property
    @pulumi.getter(name="targetFabricProviderId")
    def target_fabric_provider_id(self) -> str:
        """
        Gets or sets the target fabric provider Id.
        """
        return pulumi.get(self, "target_fabric_provider_id")

    @property
    @pulumi.getter(name="testFailoverState")
    def test_failover_state(self) -> str:
        """
        Gets or sets the test failover state.
        """
        return pulumi.get(self, "test_failover_state")

    @property
    @pulumi.getter(name="testFailoverStateDescription")
    def test_failover_state_description(self) -> str:
        """
        Gets or sets the Test failover state description.
        """
        return pulumi.get(self, "test_failover_state_description")


@pulumi.output_type
class ProtectedItemModelPropertiesResponseCurrentJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemModelPropertiesResponseCurrentJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemModelPropertiesResponseCurrentJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemModelPropertiesResponseCurrentJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 end_time: str,
                 id: str,
                 name: str,
                 scenario_name: str,
                 start_time: str,
                 state: str):
        """
        :param str display_name: Gets or sets the workflow friendly display name.
        :param str end_time: Gets or sets end time of the workflow.
        :param str id: Gets or sets workflow Id.
        :param str name: Gets or sets workflow name.
        :param str scenario_name: Gets or sets protection scenario name.
        :param str start_time: Gets or sets start time of the workflow.
        :param str state: Gets or sets workflow state.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scenario_name", scenario_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the workflow friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Gets or sets end time of the workflow.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets workflow Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets workflow name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> str:
        """
        Gets or sets protection scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Gets or sets start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Gets or sets workflow state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemModelPropertiesResponseLastFailedEnableProtectionJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 end_time: str,
                 id: str,
                 name: str,
                 scenario_name: str,
                 start_time: str,
                 state: str):
        """
        :param str display_name: Gets or sets the workflow friendly display name.
        :param str end_time: Gets or sets end time of the workflow.
        :param str id: Gets or sets workflow Id.
        :param str name: Gets or sets workflow name.
        :param str scenario_name: Gets or sets protection scenario name.
        :param str start_time: Gets or sets start time of the workflow.
        :param str state: Gets or sets workflow state.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scenario_name", scenario_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the workflow friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Gets or sets end time of the workflow.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets workflow Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets workflow name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> str:
        """
        Gets or sets protection scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Gets or sets start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Gets or sets workflow state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemModelPropertiesResponseLastFailedPlannedFailoverJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 end_time: str,
                 id: str,
                 name: str,
                 scenario_name: str,
                 start_time: str,
                 state: str):
        """
        :param str display_name: Gets or sets the workflow friendly display name.
        :param str end_time: Gets or sets end time of the workflow.
        :param str id: Gets or sets workflow Id.
        :param str name: Gets or sets workflow name.
        :param str scenario_name: Gets or sets protection scenario name.
        :param str start_time: Gets or sets start time of the workflow.
        :param str state: Gets or sets workflow state.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scenario_name", scenario_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the workflow friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Gets or sets end time of the workflow.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets workflow Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets workflow name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> str:
        """
        Gets or sets protection scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Gets or sets start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Gets or sets workflow state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ProtectedItemModelPropertiesResponseLastTestFailoverJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "scenarioName":
            suggest = "scenario_name"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemModelPropertiesResponseLastTestFailoverJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemModelPropertiesResponseLastTestFailoverJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemModelPropertiesResponseLastTestFailoverJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 end_time: str,
                 id: str,
                 name: str,
                 scenario_name: str,
                 start_time: str,
                 state: str):
        """
        :param str display_name: Gets or sets the workflow friendly display name.
        :param str end_time: Gets or sets end time of the workflow.
        :param str id: Gets or sets workflow Id.
        :param str name: Gets or sets workflow name.
        :param str scenario_name: Gets or sets protection scenario name.
        :param str start_time: Gets or sets start time of the workflow.
        :param str state: Gets or sets workflow state.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scenario_name", scenario_name)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Gets or sets the workflow friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Gets or sets end time of the workflow.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Gets or sets workflow Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets workflow name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> str:
        """
        Gets or sets protection scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Gets or sets start time of the workflow.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Gets or sets workflow state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ProtectedItemModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedItemModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedItemModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedItemModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ReplicationExtensionModelPropertiesResponse(dict):
    """
    Replication extension model properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProperties":
            suggest = "custom_properties"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationExtensionModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationExtensionModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationExtensionModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_properties: Any,
                 provisioning_state: str):
        """
        Replication extension model properties.
        :param Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesResponse', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesResponse'] custom_properties: Replication extension model custom properties.
        :param str provisioning_state: Gets or sets the provisioning state of the replication extension.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Any:
        """
        Replication extension model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the replication extension.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class ReplicationExtensionModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationExtensionModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationExtensionModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationExtensionModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class StorageContainerPropertiesResponse(dict):
    """
    Storage container properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterSharedVolumePath":
            suggest = "cluster_shared_volume_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageContainerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageContainerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageContainerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_shared_volume_path: str,
                 name: str):
        """
        Storage container properties.
        :param str cluster_shared_volume_path: Gets or sets the ClusterSharedVolumePath.
        :param str name: Gets or sets the Name.
        """
        pulumi.set(__self__, "cluster_shared_volume_path", cluster_shared_volume_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterSharedVolumePath")
    def cluster_shared_volume_path(self) -> str:
        """
        Gets or sets the ClusterSharedVolumePath.
        """
        return pulumi.get(self, "cluster_shared_volume_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets or sets the Name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VMwareDraModelCustomPropertiesResponse(dict):
    """
    VMware DRA model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "biosId":
            suggest = "bios_id"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "marsAuthenticationIdentity":
            suggest = "mars_authentication_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareDraModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareDraModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareDraModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bios_id: str,
                 instance_type: str,
                 mars_authentication_identity: 'outputs.IdentityModelResponse'):
        """
        VMware DRA model custom properties.
        :param str bios_id: Gets or sets the BIOS Id of the DRA machine.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'VMware'.
        :param 'IdentityModelResponse' mars_authentication_identity: Identity model.
        """
        pulumi.set(__self__, "bios_id", bios_id)
        pulumi.set(__self__, "instance_type", 'VMware')
        pulumi.set(__self__, "mars_authentication_identity", mars_authentication_identity)

    @property
    @pulumi.getter(name="biosId")
    def bios_id(self) -> str:
        """
        Gets or sets the BIOS Id of the DRA machine.
        """
        return pulumi.get(self, "bios_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'VMware'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="marsAuthenticationIdentity")
    def mars_authentication_identity(self) -> 'outputs.IdentityModelResponse':
        """
        Identity model.
        """
        return pulumi.get(self, "mars_authentication_identity")


@pulumi.output_type
class VMwareMigrateFabricModelCustomPropertiesResponse(dict):
    """
    VMware migrate fabric model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "migrationSolutionId":
            suggest = "migration_solution_id"
        elif key == "vmwareSiteId":
            suggest = "vmware_site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareMigrateFabricModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareMigrateFabricModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareMigrateFabricModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 migration_solution_id: str,
                 vmware_site_id: str):
        """
        VMware migrate fabric model custom properties.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'VMwareMigrate'.
        :param str migration_solution_id: Gets or sets the ARM Id of the migration solution.
        :param str vmware_site_id: Gets or sets the ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'VMwareMigrate')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)
        pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareMigrate'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> str:
        """
        Gets or sets the ARM Id of the migration solution.
        """
        return pulumi.get(self, "migration_solution_id")

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")


@pulumi.output_type
class VMwareToAzStackHCIDiskInputResponse(dict):
    """
    VMwareToAzStack disk input.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskFileFormat":
            suggest = "disk_file_format"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSizeGB":
            suggest = "disk_size_gb"
        elif key == "isOsDisk":
            suggest = "is_os_disk"
        elif key == "isDynamic":
            suggest = "is_dynamic"
        elif key == "storageContainerId":
            suggest = "storage_container_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCIDiskInputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCIDiskInputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCIDiskInputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_file_format: str,
                 disk_id: str,
                 disk_size_gb: float,
                 is_os_disk: bool,
                 is_dynamic: Optional[bool] = None,
                 storage_container_id: Optional[str] = None):
        """
        VMwareToAzStack disk input.
        :param str disk_file_format: Gets or sets the type of the virtual hard disk, vhd or vhdx.
        :param str disk_id: Gets or sets the disk Id.
        :param float disk_size_gb: Gets or sets the disk size in GB.
        :param bool is_os_disk: Gets or sets a value indicating whether disk is os disk.
        :param bool is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
               disk.
        :param str storage_container_id: Gets or sets the target storage account ARM Id.
        """
        pulumi.set(__self__, "disk_file_format", disk_file_format)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if storage_container_id is not None:
            pulumi.set(__self__, "storage_container_id", storage_container_id)

    @property
    @pulumi.getter(name="diskFileFormat")
    def disk_file_format(self) -> str:
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        return pulumi.get(self, "disk_file_format")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        """
        Gets or sets the disk Id.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> float:
        """
        Gets or sets the disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> bool:
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        return pulumi.get(self, "is_os_disk")

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
        disk.
        """
        return pulumi.get(self, "is_dynamic")

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> Optional[str]:
        """
        Gets or sets the target storage account ARM Id.
        """
        return pulumi.get(self, "storage_container_id")


@pulumi.output_type
class VMwareToAzStackHCINicInputResponse(dict):
    """
    VMwareToAzStackHCI NIC properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkName":
            suggest = "network_name"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "selectionTypeForFailover":
            suggest = "selection_type_for_failover"
        elif key == "targetNetworkId":
            suggest = "target_network_id"
        elif key == "testNetworkId":
            suggest = "test_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCINicInputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCINicInputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCINicInputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 network_name: str,
                 nic_id: str,
                 selection_type_for_failover: str,
                 target_network_id: str,
                 test_network_id: str):
        """
        VMwareToAzStackHCI NIC properties.
        :param str label: Gets or sets the NIC label.
        :param str network_name: Gets or sets the network name.
        :param str nic_id: Gets or sets the NIC Id.
        :param str selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param str target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param str test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Gets or sets the NIC label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        """
        Gets or sets the network name.
        """
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> str:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> str:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> str:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")


@pulumi.output_type
class VMwareToAzStackHCIPolicyModelCustomPropertiesResponse(dict):
    """
    VMware To AzStackHCI Policy model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appConsistentFrequencyInMinutes":
            suggest = "app_consistent_frequency_in_minutes"
        elif key == "crashConsistentFrequencyInMinutes":
            suggest = "crash_consistent_frequency_in_minutes"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "recoveryPointHistoryInMinutes":
            suggest = "recovery_point_history_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCIPolicyModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCIPolicyModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCIPolicyModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_consistent_frequency_in_minutes: int,
                 crash_consistent_frequency_in_minutes: int,
                 instance_type: str,
                 recovery_point_history_in_minutes: int):
        """
        VMware To AzStackHCI Policy model custom properties.
        :param int app_consistent_frequency_in_minutes: Gets or sets the app consistent snapshot frequency (in minutes).
        :param int crash_consistent_frequency_in_minutes: Gets or sets the crash consistent snapshot frequency (in minutes).
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'VMwareToAzStackHCI'.
        :param int recovery_point_history_in_minutes: Gets or sets the duration in minutes until which the recovery points need to be
               stored.
        """
        pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> int:
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> int:
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> int:
        """
        Gets or sets the duration in minutes until which the recovery points need to be
        stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")


@pulumi.output_type
class VMwareToAzStackHCIProtectedDiskPropertiesResponse(dict):
    """
    VMwareToAzStackHCI protected disk properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityInBytes":
            suggest = "capacity_in_bytes"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "isDynamic":
            suggest = "is_dynamic"
        elif key == "isOsDisk":
            suggest = "is_os_disk"
        elif key == "migrateDiskName":
            suggest = "migrate_disk_name"
        elif key == "seedDiskName":
            suggest = "seed_disk_name"
        elif key == "sourceDiskId":
            suggest = "source_disk_id"
        elif key == "sourceDiskName":
            suggest = "source_disk_name"
        elif key == "storageContainerId":
            suggest = "storage_container_id"
        elif key == "storageContainerLocalPath":
            suggest = "storage_container_local_path"
        elif key == "testMigrateDiskName":
            suggest = "test_migrate_disk_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCIProtectedDiskPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCIProtectedDiskPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCIProtectedDiskPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_in_bytes: float,
                 disk_type: str,
                 is_dynamic: bool,
                 is_os_disk: bool,
                 migrate_disk_name: str,
                 seed_disk_name: str,
                 source_disk_id: str,
                 source_disk_name: str,
                 storage_container_id: str,
                 storage_container_local_path: str,
                 test_migrate_disk_name: str):
        """
        VMwareToAzStackHCI protected disk properties.
        :param float capacity_in_bytes: Gets or sets the disk capacity in bytes.
        :param str disk_type: Gets or sets the disk type.
        :param bool is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
               disk.
        :param bool is_os_disk: Gets or sets a value indicating whether the disk is the OS disk.
        :param str migrate_disk_name: Gets or sets the failover clone disk.
        :param str seed_disk_name: Gets or sets the seed disk name.
        :param str source_disk_id: Gets or sets the source disk Id.
        :param str source_disk_name: Gets or sets the source disk Name.
        :param str storage_container_id: Gets or sets the ARM Id of the storage container.
        :param str storage_container_local_path: Gets or sets the local path of the storage container.
        :param str test_migrate_disk_name: Gets or sets the test failover clone disk.
        """
        pulumi.set(__self__, "capacity_in_bytes", capacity_in_bytes)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "is_dynamic", is_dynamic)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        pulumi.set(__self__, "migrate_disk_name", migrate_disk_name)
        pulumi.set(__self__, "seed_disk_name", seed_disk_name)
        pulumi.set(__self__, "source_disk_id", source_disk_id)
        pulumi.set(__self__, "source_disk_name", source_disk_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "storage_container_local_path", storage_container_local_path)
        pulumi.set(__self__, "test_migrate_disk_name", test_migrate_disk_name)

    @property
    @pulumi.getter(name="capacityInBytes")
    def capacity_in_bytes(self) -> float:
        """
        Gets or sets the disk capacity in bytes.
        """
        return pulumi.get(self, "capacity_in_bytes")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Gets or sets the disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> bool:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
        disk.
        """
        return pulumi.get(self, "is_dynamic")

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> bool:
        """
        Gets or sets a value indicating whether the disk is the OS disk.
        """
        return pulumi.get(self, "is_os_disk")

    @property
    @pulumi.getter(name="migrateDiskName")
    def migrate_disk_name(self) -> str:
        """
        Gets or sets the failover clone disk.
        """
        return pulumi.get(self, "migrate_disk_name")

    @property
    @pulumi.getter(name="seedDiskName")
    def seed_disk_name(self) -> str:
        """
        Gets or sets the seed disk name.
        """
        return pulumi.get(self, "seed_disk_name")

    @property
    @pulumi.getter(name="sourceDiskId")
    def source_disk_id(self) -> str:
        """
        Gets or sets the source disk Id.
        """
        return pulumi.get(self, "source_disk_id")

    @property
    @pulumi.getter(name="sourceDiskName")
    def source_disk_name(self) -> str:
        """
        Gets or sets the source disk Name.
        """
        return pulumi.get(self, "source_disk_name")

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> str:
        """
        Gets or sets the ARM Id of the storage container.
        """
        return pulumi.get(self, "storage_container_id")

    @property
    @pulumi.getter(name="storageContainerLocalPath")
    def storage_container_local_path(self) -> str:
        """
        Gets or sets the local path of the storage container.
        """
        return pulumi.get(self, "storage_container_local_path")

    @property
    @pulumi.getter(name="testMigrateDiskName")
    def test_migrate_disk_name(self) -> str:
        """
        Gets or sets the test failover clone disk.
        """
        return pulumi.get(self, "test_migrate_disk_name")


@pulumi.output_type
class VMwareToAzStackHCIProtectedItemModelCustomPropertiesResponse(dict):
    """
    VMware to AzStackHCI Protected item model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeLocation":
            suggest = "active_location"
        elif key == "customLocationRegion":
            suggest = "custom_location_region"
        elif key == "disksToInclude":
            suggest = "disks_to_include"
        elif key == "fabricDiscoveryMachineId":
            suggest = "fabric_discovery_machine_id"
        elif key == "failoverRecoveryPointId":
            suggest = "failover_recovery_point_id"
        elif key == "firmwareType":
            suggest = "firmware_type"
        elif key == "hyperVGeneration":
            suggest = "hyper_v_generation"
        elif key == "initialReplicationProgressPercentage":
            suggest = "initial_replication_progress_percentage"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "lastRecoveryPointId":
            suggest = "last_recovery_point_id"
        elif key == "lastRecoveryPointReceived":
            suggest = "last_recovery_point_received"
        elif key == "lastReplicationUpdateTime":
            suggest = "last_replication_update_time"
        elif key == "migrationProgressPercentage":
            suggest = "migration_progress_percentage"
        elif key == "nicsToInclude":
            suggest = "nics_to_include"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osType":
            suggest = "os_type"
        elif key == "protectedDisks":
            suggest = "protected_disks"
        elif key == "protectedNics":
            suggest = "protected_nics"
        elif key == "resumeProgressPercentage":
            suggest = "resume_progress_percentage"
        elif key == "resumeRetryCount":
            suggest = "resume_retry_count"
        elif key == "resyncProgressPercentage":
            suggest = "resync_progress_percentage"
        elif key == "resyncRequired":
            suggest = "resync_required"
        elif key == "resyncRetryCount":
            suggest = "resync_retry_count"
        elif key == "resyncState":
            suggest = "resync_state"
        elif key == "runAsAccountId":
            suggest = "run_as_account_id"
        elif key == "sourceApplianceName":
            suggest = "source_appliance_name"
        elif key == "sourceCpuCores":
            suggest = "source_cpu_cores"
        elif key == "sourceDraName":
            suggest = "source_dra_name"
        elif key == "sourceMemoryInMegaBytes":
            suggest = "source_memory_in_mega_bytes"
        elif key == "sourceVmName":
            suggest = "source_vm_name"
        elif key == "storageContainerId":
            suggest = "storage_container_id"
        elif key == "targetApplianceName":
            suggest = "target_appliance_name"
        elif key == "targetArcClusterCustomLocationId":
            suggest = "target_arc_cluster_custom_location_id"
        elif key == "targetAzStackHciClusterName":
            suggest = "target_az_stack_hci_cluster_name"
        elif key == "targetDraName":
            suggest = "target_dra_name"
        elif key == "targetHciClusterId":
            suggest = "target_hci_cluster_id"
        elif key == "targetLocation":
            suggest = "target_location"
        elif key == "targetResourceGroupId":
            suggest = "target_resource_group_id"
        elif key == "targetVmBiosId":
            suggest = "target_vm_bios_id"
        elif key == "dynamicMemoryConfig":
            suggest = "dynamic_memory_config"
        elif key == "isDynamicRam":
            suggest = "is_dynamic_ram"
        elif key == "performAutoResync":
            suggest = "perform_auto_resync"
        elif key == "targetCpuCores":
            suggest = "target_cpu_cores"
        elif key == "targetMemoryInMegaBytes":
            suggest = "target_memory_in_mega_bytes"
        elif key == "targetNetworkId":
            suggest = "target_network_id"
        elif key == "targetVmName":
            suggest = "target_vm_name"
        elif key == "testNetworkId":
            suggest = "test_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCIProtectedItemModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCIProtectedItemModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCIProtectedItemModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_location: str,
                 custom_location_region: str,
                 disks_to_include: Sequence['outputs.VMwareToAzStackHCIDiskInputResponse'],
                 fabric_discovery_machine_id: str,
                 failover_recovery_point_id: str,
                 firmware_type: str,
                 hyper_v_generation: str,
                 initial_replication_progress_percentage: int,
                 instance_type: str,
                 last_recovery_point_id: str,
                 last_recovery_point_received: str,
                 last_replication_update_time: str,
                 migration_progress_percentage: int,
                 nics_to_include: Sequence['outputs.VMwareToAzStackHCINicInputResponse'],
                 os_name: str,
                 os_type: str,
                 protected_disks: Sequence['outputs.VMwareToAzStackHCIProtectedDiskPropertiesResponse'],
                 protected_nics: Sequence['outputs.VMwareToAzStackHCIProtectedNicPropertiesResponse'],
                 resume_progress_percentage: int,
                 resume_retry_count: float,
                 resync_progress_percentage: int,
                 resync_required: bool,
                 resync_retry_count: float,
                 resync_state: str,
                 run_as_account_id: str,
                 source_appliance_name: str,
                 source_cpu_cores: int,
                 source_dra_name: str,
                 source_memory_in_mega_bytes: float,
                 source_vm_name: str,
                 storage_container_id: str,
                 target_appliance_name: str,
                 target_arc_cluster_custom_location_id: str,
                 target_az_stack_hci_cluster_name: str,
                 target_dra_name: str,
                 target_hci_cluster_id: str,
                 target_location: str,
                 target_resource_group_id: str,
                 target_vm_bios_id: str,
                 dynamic_memory_config: Optional['outputs.ProtectedItemDynamicMemoryConfigResponse'] = None,
                 is_dynamic_ram: Optional[bool] = None,
                 perform_auto_resync: Optional[bool] = None,
                 target_cpu_cores: Optional[int] = None,
                 target_memory_in_mega_bytes: Optional[int] = None,
                 target_network_id: Optional[str] = None,
                 target_vm_name: Optional[str] = None,
                 test_network_id: Optional[str] = None):
        """
        VMware to AzStackHCI Protected item model custom properties.
        :param str active_location: Gets or sets the location of the protected item.
        :param str custom_location_region: Gets or sets the location of Azure Arc HCI custom location resource.
        :param Sequence['VMwareToAzStackHCIDiskInputResponse'] disks_to_include: Gets or sets the list of disks to replicate.
        :param str fabric_discovery_machine_id: Gets or sets the ARM Id of the discovered machine.
        :param str failover_recovery_point_id: Gets or sets the recovery point Id to which the VM was failed over.
        :param str firmware_type: Gets or sets the firmware type.
        :param str hyper_v_generation: Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        :param int initial_replication_progress_percentage: Gets or sets the initial replication progress percentage. This is calculated based on
               total bytes processed for all disks in the source VM.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'VMwareToAzStackHCI'.
        :param str last_recovery_point_id: Gets or sets the last recovery point Id.
        :param str last_recovery_point_received: Gets or sets the last recovery point received time.
        :param str last_replication_update_time: Gets or sets the latest timestamp that replication status is updated.
        :param int migration_progress_percentage: Gets or sets the migration progress percentage.
        :param Sequence['VMwareToAzStackHCINicInputResponse'] nics_to_include: Gets or sets the list of VM NIC to replicate.
        :param str os_name: Gets or sets the name of the OS.
        :param str os_type: Gets or sets the type of the OS.
        :param Sequence['VMwareToAzStackHCIProtectedDiskPropertiesResponse'] protected_disks: Gets or sets the list of protected disks.
        :param Sequence['VMwareToAzStackHCIProtectedNicPropertiesResponse'] protected_nics: Gets or sets the VM NIC details.
        :param int resume_progress_percentage: Gets or sets the resume progress percentage.
        :param float resume_retry_count: Gets or sets the resume retry count.
        :param int resync_progress_percentage: Gets or sets the resync progress percentage. This is calculated based on total bytes
               processed for all disks in the source VM.
        :param bool resync_required: Gets or sets a value indicating whether resync is required.
        :param float resync_retry_count: Gets or sets the resync retry count.
        :param str resync_state: Gets or sets the resync state.
        :param str run_as_account_id: Gets or sets the run as account Id.
        :param str source_appliance_name: Gets or sets the source appliance name.
        :param int source_cpu_cores: Gets or sets the source VM CPU cores.
        :param str source_dra_name: Gets or sets the source DRA name.
        :param float source_memory_in_mega_bytes: Gets or sets the source VM ram memory size in megabytes.
        :param str source_vm_name: Gets or sets the source VM display name.
        :param str storage_container_id: Gets or sets the target storage container ARM Id.
        :param str target_appliance_name: Gets or sets the target appliance name.
        :param str target_arc_cluster_custom_location_id: Gets or sets the Target Arc Cluster Custom Location ARM Id.
        :param str target_az_stack_hci_cluster_name: Gets or sets the Target AzStackHCI cluster name.
        :param str target_dra_name: Gets or sets the target DRA name.
        :param str target_hci_cluster_id: Gets or sets the Target HCI Cluster ARM Id.
        :param str target_location: Gets or sets the target location.
        :param str target_resource_group_id: Gets or sets the target resource group ARM Id.
        :param str target_vm_bios_id: Gets or sets the BIOS Id of the target AzStackHCI VM.
        :param 'ProtectedItemDynamicMemoryConfigResponse' dynamic_memory_config: Protected item dynamic memory config.
        :param bool is_dynamic_ram: Gets or sets a value indicating whether memory is dynamical.
        :param bool perform_auto_resync: Gets or sets a value indicating whether auto resync is to be done.
        :param int target_cpu_cores: Gets or sets the target CPU cores.
        :param int target_memory_in_mega_bytes: Gets or sets the target memory in mega-bytes.
        :param str target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param str target_vm_name: Gets or sets the target VM display name.
        :param str test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "active_location", active_location)
        pulumi.set(__self__, "custom_location_region", custom_location_region)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "failover_recovery_point_id", failover_recovery_point_id)
        pulumi.set(__self__, "firmware_type", firmware_type)
        pulumi.set(__self__, "hyper_v_generation", hyper_v_generation)
        pulumi.set(__self__, "initial_replication_progress_percentage", initial_replication_progress_percentage)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "last_recovery_point_id", last_recovery_point_id)
        pulumi.set(__self__, "last_recovery_point_received", last_recovery_point_received)
        pulumi.set(__self__, "last_replication_update_time", last_replication_update_time)
        pulumi.set(__self__, "migration_progress_percentage", migration_progress_percentage)
        pulumi.set(__self__, "nics_to_include", nics_to_include)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "protected_disks", protected_disks)
        pulumi.set(__self__, "protected_nics", protected_nics)
        pulumi.set(__self__, "resume_progress_percentage", resume_progress_percentage)
        pulumi.set(__self__, "resume_retry_count", resume_retry_count)
        pulumi.set(__self__, "resync_progress_percentage", resync_progress_percentage)
        pulumi.set(__self__, "resync_required", resync_required)
        pulumi.set(__self__, "resync_retry_count", resync_retry_count)
        pulumi.set(__self__, "resync_state", resync_state)
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        pulumi.set(__self__, "source_appliance_name", source_appliance_name)
        pulumi.set(__self__, "source_cpu_cores", source_cpu_cores)
        pulumi.set(__self__, "source_dra_name", source_dra_name)
        pulumi.set(__self__, "source_memory_in_mega_bytes", source_memory_in_mega_bytes)
        pulumi.set(__self__, "source_vm_name", source_vm_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "target_appliance_name", target_appliance_name)
        pulumi.set(__self__, "target_arc_cluster_custom_location_id", target_arc_cluster_custom_location_id)
        pulumi.set(__self__, "target_az_stack_hci_cluster_name", target_az_stack_hci_cluster_name)
        pulumi.set(__self__, "target_dra_name", target_dra_name)
        pulumi.set(__self__, "target_hci_cluster_id", target_hci_cluster_id)
        pulumi.set(__self__, "target_location", target_location)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        pulumi.set(__self__, "target_vm_bios_id", target_vm_bios_id)
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if is_dynamic_ram is not None:
            pulumi.set(__self__, "is_dynamic_ram", is_dynamic_ram)
        if perform_auto_resync is not None:
            pulumi.set(__self__, "perform_auto_resync", perform_auto_resync)
        if target_cpu_cores is not None:
            pulumi.set(__self__, "target_cpu_cores", target_cpu_cores)
        if target_memory_in_mega_bytes is not None:
            pulumi.set(__self__, "target_memory_in_mega_bytes", target_memory_in_mega_bytes)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="activeLocation")
    def active_location(self) -> str:
        """
        Gets or sets the location of the protected item.
        """
        return pulumi.get(self, "active_location")

    @property
    @pulumi.getter(name="customLocationRegion")
    def custom_location_region(self) -> str:
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        return pulumi.get(self, "custom_location_region")

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> Sequence['outputs.VMwareToAzStackHCIDiskInputResponse']:
        """
        Gets or sets the list of disks to replicate.
        """
        return pulumi.get(self, "disks_to_include")

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> str:
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @property
    @pulumi.getter(name="failoverRecoveryPointId")
    def failover_recovery_point_id(self) -> str:
        """
        Gets or sets the recovery point Id to which the VM was failed over.
        """
        return pulumi.get(self, "failover_recovery_point_id")

    @property
    @pulumi.getter(name="firmwareType")
    def firmware_type(self) -> str:
        """
        Gets or sets the firmware type.
        """
        return pulumi.get(self, "firmware_type")

    @property
    @pulumi.getter(name="hyperVGeneration")
    def hyper_v_generation(self) -> str:
        """
        Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        """
        return pulumi.get(self, "hyper_v_generation")

    @property
    @pulumi.getter(name="initialReplicationProgressPercentage")
    def initial_replication_progress_percentage(self) -> int:
        """
        Gets or sets the initial replication progress percentage. This is calculated based on
        total bytes processed for all disks in the source VM.
        """
        return pulumi.get(self, "initial_replication_progress_percentage")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lastRecoveryPointId")
    def last_recovery_point_id(self) -> str:
        """
        Gets or sets the last recovery point Id.
        """
        return pulumi.get(self, "last_recovery_point_id")

    @property
    @pulumi.getter(name="lastRecoveryPointReceived")
    def last_recovery_point_received(self) -> str:
        """
        Gets or sets the last recovery point received time.
        """
        return pulumi.get(self, "last_recovery_point_received")

    @property
    @pulumi.getter(name="lastReplicationUpdateTime")
    def last_replication_update_time(self) -> str:
        """
        Gets or sets the latest timestamp that replication status is updated.
        """
        return pulumi.get(self, "last_replication_update_time")

    @property
    @pulumi.getter(name="migrationProgressPercentage")
    def migration_progress_percentage(self) -> int:
        """
        Gets or sets the migration progress percentage.
        """
        return pulumi.get(self, "migration_progress_percentage")

    @property
    @pulumi.getter(name="nicsToInclude")
    def nics_to_include(self) -> Sequence['outputs.VMwareToAzStackHCINicInputResponse']:
        """
        Gets or sets the list of VM NIC to replicate.
        """
        return pulumi.get(self, "nics_to_include")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Gets or sets the name of the OS.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        Gets or sets the type of the OS.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="protectedDisks")
    def protected_disks(self) -> Sequence['outputs.VMwareToAzStackHCIProtectedDiskPropertiesResponse']:
        """
        Gets or sets the list of protected disks.
        """
        return pulumi.get(self, "protected_disks")

    @property
    @pulumi.getter(name="protectedNics")
    def protected_nics(self) -> Sequence['outputs.VMwareToAzStackHCIProtectedNicPropertiesResponse']:
        """
        Gets or sets the VM NIC details.
        """
        return pulumi.get(self, "protected_nics")

    @property
    @pulumi.getter(name="resumeProgressPercentage")
    def resume_progress_percentage(self) -> int:
        """
        Gets or sets the resume progress percentage.
        """
        return pulumi.get(self, "resume_progress_percentage")

    @property
    @pulumi.getter(name="resumeRetryCount")
    def resume_retry_count(self) -> float:
        """
        Gets or sets the resume retry count.
        """
        return pulumi.get(self, "resume_retry_count")

    @property
    @pulumi.getter(name="resyncProgressPercentage")
    def resync_progress_percentage(self) -> int:
        """
        Gets or sets the resync progress percentage. This is calculated based on total bytes
        processed for all disks in the source VM.
        """
        return pulumi.get(self, "resync_progress_percentage")

    @property
    @pulumi.getter(name="resyncRequired")
    def resync_required(self) -> bool:
        """
        Gets or sets a value indicating whether resync is required.
        """
        return pulumi.get(self, "resync_required")

    @property
    @pulumi.getter(name="resyncRetryCount")
    def resync_retry_count(self) -> float:
        """
        Gets or sets the resync retry count.
        """
        return pulumi.get(self, "resync_retry_count")

    @property
    @pulumi.getter(name="resyncState")
    def resync_state(self) -> str:
        """
        Gets or sets the resync state.
        """
        return pulumi.get(self, "resync_state")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> str:
        """
        Gets or sets the run as account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @property
    @pulumi.getter(name="sourceApplianceName")
    def source_appliance_name(self) -> str:
        """
        Gets or sets the source appliance name.
        """
        return pulumi.get(self, "source_appliance_name")

    @property
    @pulumi.getter(name="sourceCpuCores")
    def source_cpu_cores(self) -> int:
        """
        Gets or sets the source VM CPU cores.
        """
        return pulumi.get(self, "source_cpu_cores")

    @property
    @pulumi.getter(name="sourceDraName")
    def source_dra_name(self) -> str:
        """
        Gets or sets the source DRA name.
        """
        return pulumi.get(self, "source_dra_name")

    @property
    @pulumi.getter(name="sourceMemoryInMegaBytes")
    def source_memory_in_mega_bytes(self) -> float:
        """
        Gets or sets the source VM ram memory size in megabytes.
        """
        return pulumi.get(self, "source_memory_in_mega_bytes")

    @property
    @pulumi.getter(name="sourceVmName")
    def source_vm_name(self) -> str:
        """
        Gets or sets the source VM display name.
        """
        return pulumi.get(self, "source_vm_name")

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> str:
        """
        Gets or sets the target storage container ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @property
    @pulumi.getter(name="targetApplianceName")
    def target_appliance_name(self) -> str:
        """
        Gets or sets the target appliance name.
        """
        return pulumi.get(self, "target_appliance_name")

    @property
    @pulumi.getter(name="targetArcClusterCustomLocationId")
    def target_arc_cluster_custom_location_id(self) -> str:
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        return pulumi.get(self, "target_arc_cluster_custom_location_id")

    @property
    @pulumi.getter(name="targetAzStackHciClusterName")
    def target_az_stack_hci_cluster_name(self) -> str:
        """
        Gets or sets the Target AzStackHCI cluster name.
        """
        return pulumi.get(self, "target_az_stack_hci_cluster_name")

    @property
    @pulumi.getter(name="targetDraName")
    def target_dra_name(self) -> str:
        """
        Gets or sets the target DRA name.
        """
        return pulumi.get(self, "target_dra_name")

    @property
    @pulumi.getter(name="targetHciClusterId")
    def target_hci_cluster_id(self) -> str:
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        return pulumi.get(self, "target_hci_cluster_id")

    @property
    @pulumi.getter(name="targetLocation")
    def target_location(self) -> str:
        """
        Gets or sets the target location.
        """
        return pulumi.get(self, "target_location")

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> str:
        """
        Gets or sets the target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @property
    @pulumi.getter(name="targetVmBiosId")
    def target_vm_bios_id(self) -> str:
        """
        Gets or sets the BIOS Id of the target AzStackHCI VM.
        """
        return pulumi.get(self, "target_vm_bios_id")

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional['outputs.ProtectedItemDynamicMemoryConfigResponse']:
        """
        Protected item dynamic memory config.
        """
        return pulumi.get(self, "dynamic_memory_config")

    @property
    @pulumi.getter(name="isDynamicRam")
    def is_dynamic_ram(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        return pulumi.get(self, "is_dynamic_ram")

    @property
    @pulumi.getter(name="performAutoResync")
    def perform_auto_resync(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether auto resync is to be done.
        """
        return pulumi.get(self, "perform_auto_resync")

    @property
    @pulumi.getter(name="targetCpuCores")
    def target_cpu_cores(self) -> Optional[int]:
        """
        Gets or sets the target CPU cores.
        """
        return pulumi.get(self, "target_cpu_cores")

    @property
    @pulumi.getter(name="targetMemoryInMegaBytes")
    def target_memory_in_mega_bytes(self) -> Optional[int]:
        """
        Gets or sets the target memory in mega-bytes.
        """
        return pulumi.get(self, "target_memory_in_mega_bytes")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[str]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[str]:
        """
        Gets or sets the target VM display name.
        """
        return pulumi.get(self, "target_vm_name")

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[str]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")


@pulumi.output_type
class VMwareToAzStackHCIProtectedNicPropertiesResponse(dict):
    """
    VMwareToAzStackHCI NIC properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macAddress":
            suggest = "mac_address"
        elif key == "networkName":
            suggest = "network_name"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "selectionTypeForFailover":
            suggest = "selection_type_for_failover"
        elif key == "targetNetworkId":
            suggest = "target_network_id"
        elif key == "testNetworkId":
            suggest = "test_network_id"
        elif key == "isPrimaryNic":
            suggest = "is_primary_nic"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCIProtectedNicPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCIProtectedNicPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCIProtectedNicPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 mac_address: str,
                 network_name: str,
                 nic_id: str,
                 selection_type_for_failover: str,
                 target_network_id: str,
                 test_network_id: str,
                 is_primary_nic: Optional[bool] = None):
        """
        VMwareToAzStackHCI NIC properties.
        :param str label: Gets or sets the NIC label.
        :param str mac_address: Gets or sets the NIC mac address.
        :param str network_name: Gets or sets the network name.
        :param str nic_id: Gets or sets the NIC Id.
        :param str selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param str target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param str test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        :param bool is_primary_nic: Gets or sets a value indicating whether this is the primary NIC.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "test_network_id", test_network_id)
        if is_primary_nic is not None:
            pulumi.set(__self__, "is_primary_nic", is_primary_nic)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Gets or sets the NIC label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        Gets or sets the NIC mac address.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        """
        Gets or sets the network name.
        """
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> str:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> str:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> str:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @property
    @pulumi.getter(name="isPrimaryNic")
    def is_primary_nic(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether this is the primary NIC.
        """
        return pulumi.get(self, "is_primary_nic")


@pulumi.output_type
class VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesResponse(dict):
    """
    VMware to AzStackHCI Replication extension model custom properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrServiceUri":
            suggest = "asr_service_uri"
        elif key == "azStackHciFabricArmId":
            suggest = "az_stack_hci_fabric_arm_id"
        elif key == "azStackHciSiteId":
            suggest = "az_stack_hci_site_id"
        elif key == "gatewayServiceUri":
            suggest = "gateway_service_uri"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "rcmServiceUri":
            suggest = "rcm_service_uri"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "resourceLocation":
            suggest = "resource_location"
        elif key == "sourceGatewayServiceId":
            suggest = "source_gateway_service_id"
        elif key == "sourceStorageContainerName":
            suggest = "source_storage_container_name"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "targetGatewayServiceId":
            suggest = "target_gateway_service_id"
        elif key == "targetStorageContainerName":
            suggest = "target_storage_container_name"
        elif key == "vmwareFabricArmId":
            suggest = "vmware_fabric_arm_id"
        elif key == "vmwareSiteId":
            suggest = "vmware_site_id"
        elif key == "storageAccountId":
            suggest = "storage_account_id"
        elif key == "storageAccountSasSecretName":
            suggest = "storage_account_sas_secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_service_uri: str,
                 az_stack_hci_fabric_arm_id: str,
                 az_stack_hci_site_id: str,
                 gateway_service_uri: str,
                 instance_type: str,
                 rcm_service_uri: str,
                 resource_group: str,
                 resource_location: str,
                 source_gateway_service_id: str,
                 source_storage_container_name: str,
                 subscription_id: str,
                 target_gateway_service_id: str,
                 target_storage_container_name: str,
                 vmware_fabric_arm_id: str,
                 vmware_site_id: str,
                 storage_account_id: Optional[str] = None,
                 storage_account_sas_secret_name: Optional[str] = None):
        """
        VMware to AzStackHCI Replication extension model custom properties.
        :param str asr_service_uri: Gets or sets the Uri of ASR.
        :param str az_stack_hci_fabric_arm_id: Gets or sets the ARM Id of the target AzStackHCI fabric.
        :param str az_stack_hci_site_id: Gets or sets the ARM Id of the AzStackHCI site.
        :param str gateway_service_uri: Gets or sets the Uri of Gateway.
        :param str instance_type: Gets or sets the instance type.
               Expected value is 'VMwareToAzStackHCI'.
        :param str rcm_service_uri: Gets or sets the Uri of Rcm.
        :param str resource_group: Gets or sets the resource group.
        :param str resource_location: Gets or sets the resource location.
        :param str source_gateway_service_id: Gets or sets the gateway service Id of source.
        :param str source_storage_container_name: Gets or sets the source storage container name.
        :param str subscription_id: Gets or sets the subscription.
        :param str target_gateway_service_id: Gets or sets the gateway service Id of target.
        :param str target_storage_container_name: Gets or sets the target storage container name.
        :param str vmware_fabric_arm_id: Gets or sets the ARM Id of the source VMware fabric.
        :param str vmware_site_id: Gets or sets the ARM Id of the VMware site.
        :param str storage_account_id: Gets or sets the storage account Id.
        :param str storage_account_sas_secret_name: Gets or sets the Sas Secret of storage account.
        """
        pulumi.set(__self__, "asr_service_uri", asr_service_uri)
        pulumi.set(__self__, "az_stack_hci_fabric_arm_id", az_stack_hci_fabric_arm_id)
        pulumi.set(__self__, "az_stack_hci_site_id", az_stack_hci_site_id)
        pulumi.set(__self__, "gateway_service_uri", gateway_service_uri)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "rcm_service_uri", rcm_service_uri)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "resource_location", resource_location)
        pulumi.set(__self__, "source_gateway_service_id", source_gateway_service_id)
        pulumi.set(__self__, "source_storage_container_name", source_storage_container_name)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "target_gateway_service_id", target_gateway_service_id)
        pulumi.set(__self__, "target_storage_container_name", target_storage_container_name)
        pulumi.set(__self__, "vmware_fabric_arm_id", vmware_fabric_arm_id)
        pulumi.set(__self__, "vmware_site_id", vmware_site_id)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="asrServiceUri")
    def asr_service_uri(self) -> str:
        """
        Gets or sets the Uri of ASR.
        """
        return pulumi.get(self, "asr_service_uri")

    @property
    @pulumi.getter(name="azStackHciFabricArmId")
    def az_stack_hci_fabric_arm_id(self) -> str:
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        return pulumi.get(self, "az_stack_hci_fabric_arm_id")

    @property
    @pulumi.getter(name="azStackHciSiteId")
    def az_stack_hci_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the AzStackHCI site.
        """
        return pulumi.get(self, "az_stack_hci_site_id")

    @property
    @pulumi.getter(name="gatewayServiceUri")
    def gateway_service_uri(self) -> str:
        """
        Gets or sets the Uri of Gateway.
        """
        return pulumi.get(self, "gateway_service_uri")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="rcmServiceUri")
    def rcm_service_uri(self) -> str:
        """
        Gets or sets the Uri of Rcm.
        """
        return pulumi.get(self, "rcm_service_uri")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Gets or sets the resource group.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> str:
        """
        Gets or sets the resource location.
        """
        return pulumi.get(self, "resource_location")

    @property
    @pulumi.getter(name="sourceGatewayServiceId")
    def source_gateway_service_id(self) -> str:
        """
        Gets or sets the gateway service Id of source.
        """
        return pulumi.get(self, "source_gateway_service_id")

    @property
    @pulumi.getter(name="sourceStorageContainerName")
    def source_storage_container_name(self) -> str:
        """
        Gets or sets the source storage container name.
        """
        return pulumi.get(self, "source_storage_container_name")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Gets or sets the subscription.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="targetGatewayServiceId")
    def target_gateway_service_id(self) -> str:
        """
        Gets or sets the gateway service Id of target.
        """
        return pulumi.get(self, "target_gateway_service_id")

    @property
    @pulumi.getter(name="targetStorageContainerName")
    def target_storage_container_name(self) -> str:
        """
        Gets or sets the target storage container name.
        """
        return pulumi.get(self, "target_storage_container_name")

    @property
    @pulumi.getter(name="vmwareFabricArmId")
    def vmware_fabric_arm_id(self) -> str:
        """
        Gets or sets the ARM Id of the source VMware fabric.
        """
        return pulumi.get(self, "vmware_fabric_arm_id")

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> str:
        """
        Gets or sets the ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[str]:
        """
        Gets or sets the storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[str]:
        """
        Gets or sets the Sas Secret of storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")


@pulumi.output_type
class VaultModelPropertiesResponse(dict):
    """
    Vault properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "serviceResourceId":
            suggest = "service_resource_id"
        elif key == "vaultType":
            suggest = "vault_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultModelPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultModelPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultModelPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 service_resource_id: str,
                 vault_type: Optional[str] = None):
        """
        Vault properties.
        :param str provisioning_state: Gets or sets the provisioning state of the vault.
        :param str service_resource_id: Gets or sets the service resource Id.
        :param str vault_type: Gets or sets the type of vault.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "service_resource_id", service_resource_id)
        if vault_type is not None:
            pulumi.set(__self__, "vault_type", vault_type)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the vault.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceResourceId")
    def service_resource_id(self) -> str:
        """
        Gets or sets the service resource Id.
        """
        return pulumi.get(self, "service_resource_id")

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> Optional[str]:
        """
        Gets or sets the type of vault.
        """
        return pulumi.get(self, "vault_type")


@pulumi.output_type
class VaultModelResponseSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultModelResponseSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultModelResponseSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultModelResponseSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        :param str created_at: Gets or sets the timestamp of resource creation (UTC).
        :param str created_by: Gets or sets identity that created the resource.
        :param str created_by_type: Gets or sets the type of identity that created the resource: user, application,
               managedIdentity.
        :param str last_modified_at: Gets or sets the timestamp of resource last modification (UTC).
        :param str last_modified_by: Gets or sets the identity that last modified the resource.
        :param str last_modified_by_type: Gets or sets the type of identity that last modified the resource: user, application,
               managedIdentity.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Gets or sets identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that created the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        Gets or sets the timestamp of resource last modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        Gets or sets the identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        Gets or sets the type of identity that last modified the resource: user, application,
        managedIdentity.
        """
        return pulumi.get(self, "last_modified_by_type")


