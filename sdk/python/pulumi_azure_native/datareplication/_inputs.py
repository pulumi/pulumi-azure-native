# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AzStackHCIClusterPropertiesArgs',
    'AzStackHCIFabricModelCustomPropertiesArgs',
    'DraModelPropertiesArgs',
    'FabricModelPropertiesArgs',
    'HyperVMigrateFabricModelCustomPropertiesArgs',
    'HyperVToAzStackHCIDiskInputArgs',
    'HyperVToAzStackHCINicInputArgs',
    'HyperVToAzStackHCIPolicyModelCustomPropertiesArgs',
    'HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs',
    'HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs',
    'IdentityModelArgs',
    'PolicyModelPropertiesArgs',
    'ProtectedItemDynamicMemoryConfigArgs',
    'ProtectedItemModelPropertiesArgs',
    'ReplicationExtensionModelPropertiesArgs',
    'StorageContainerPropertiesArgs',
    'VMwareDraModelCustomPropertiesArgs',
    'VMwareMigrateFabricModelCustomPropertiesArgs',
    'VMwareToAzStackHCIDiskInputArgs',
    'VMwareToAzStackHCINicInputArgs',
    'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs',
    'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs',
    'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs',
    'VaultModelPropertiesArgs',
]

@pulumi.input_type
class AzStackHCIClusterPropertiesArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 storage_account_name: pulumi.Input[str],
                 storage_containers: pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]]):
        """
        AzStackHCI cluster properties.
        :param pulumi.Input[str] cluster_name: Gets or sets the AzStackHCICluster FQDN name.
        :param pulumi.Input[str] resource_name: Gets or sets the AzStackHCICluster resource name.
        :param pulumi.Input[str] storage_account_name: Gets or sets the Storage account name.
        :param pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]] storage_containers: Gets or sets the list of AzStackHCICluster Storage Container.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "storage_containers", storage_containers)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the AzStackHCICluster FQDN name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the AzStackHCICluster resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the Storage account name.
        """
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="storageContainers")
    def storage_containers(self) -> pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]]:
        """
        Gets or sets the list of AzStackHCICluster Storage Container.
        """
        return pulumi.get(self, "storage_containers")

    @storage_containers.setter
    def storage_containers(self, value: pulumi.Input[Sequence[pulumi.Input['StorageContainerPropertiesArgs']]]):
        pulumi.set(self, "storage_containers", value)


@pulumi.input_type
class AzStackHCIFabricModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 az_stack_hci_site_id: pulumi.Input[str],
                 cluster: pulumi.Input['AzStackHCIClusterPropertiesArgs'],
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str]):
        """
        AzStackHCI fabric model custom properties.
        :param pulumi.Input[str] az_stack_hci_site_id: Gets or sets the ARM Id of the AzStackHCI site.
        :param pulumi.Input['AzStackHCIClusterPropertiesArgs'] cluster: AzStackHCI cluster properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'AzStackHCI'.
        :param pulumi.Input[str] migration_solution_id: Gets or sets the Migration solution ARM Id.
        """
        pulumi.set(__self__, "az_stack_hci_site_id", az_stack_hci_site_id)
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "instance_type", 'AzStackHCI')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)

    @property
    @pulumi.getter(name="azStackHciSiteId")
    def az_stack_hci_site_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the AzStackHCI site.
        """
        return pulumi.get(self, "az_stack_hci_site_id")

    @az_stack_hci_site_id.setter
    def az_stack_hci_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "az_stack_hci_site_id", value)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input['AzStackHCIClusterPropertiesArgs']:
        """
        AzStackHCI cluster properties.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input['AzStackHCIClusterPropertiesArgs']):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'AzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Migration solution ARM Id.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)


@pulumi.input_type
class DraModelPropertiesArgs:
    def __init__(__self__, *,
                 authentication_identity: pulumi.Input['IdentityModelArgs'],
                 custom_properties: pulumi.Input['VMwareDraModelCustomPropertiesArgs'],
                 machine_id: pulumi.Input[str],
                 machine_name: pulumi.Input[str],
                 resource_access_identity: pulumi.Input['IdentityModelArgs']):
        """
        Dra model properties.
        :param pulumi.Input['IdentityModelArgs'] authentication_identity: Identity model.
        :param pulumi.Input['VMwareDraModelCustomPropertiesArgs'] custom_properties: Dra model custom properties.
        :param pulumi.Input[str] machine_id: Gets or sets the machine Id where Dra is running.
        :param pulumi.Input[str] machine_name: Gets or sets the machine name where Dra is running.
        :param pulumi.Input['IdentityModelArgs'] resource_access_identity: Identity model.
        """
        pulumi.set(__self__, "authentication_identity", authentication_identity)
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "machine_id", machine_id)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "resource_access_identity", resource_access_identity)

    @property
    @pulumi.getter(name="authenticationIdentity")
    def authentication_identity(self) -> pulumi.Input['IdentityModelArgs']:
        """
        Identity model.
        """
        return pulumi.get(self, "authentication_identity")

    @authentication_identity.setter
    def authentication_identity(self, value: pulumi.Input['IdentityModelArgs']):
        pulumi.set(self, "authentication_identity", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input['VMwareDraModelCustomPropertiesArgs']:
        """
        Dra model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input['VMwareDraModelCustomPropertiesArgs']):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the machine Id where Dra is running.
        """
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the machine name where Dra is running.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_name", value)

    @property
    @pulumi.getter(name="resourceAccessIdentity")
    def resource_access_identity(self) -> pulumi.Input['IdentityModelArgs']:
        """
        Identity model.
        """
        return pulumi.get(self, "resource_access_identity")

    @resource_access_identity.setter
    def resource_access_identity(self, value: pulumi.Input['IdentityModelArgs']):
        pulumi.set(self, "resource_access_identity", value)


@pulumi.input_type
class FabricModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']]):
        """
        Fabric model properties.
        :param pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']] custom_properties: Fabric model custom properties.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']]:
        """
        Fabric model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['AzStackHCIFabricModelCustomPropertiesArgs', 'HyperVMigrateFabricModelCustomPropertiesArgs', 'VMwareMigrateFabricModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)


@pulumi.input_type
class HyperVMigrateFabricModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 hyper_v_site_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str]):
        """
        HyperV migrate fabric model custom properties.
        :param pulumi.Input[str] hyper_v_site_id: Gets or sets the ARM Id of the HyperV site.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'HyperVMigrate'.
        :param pulumi.Input[str] migration_solution_id: Gets or sets the migration solution ARM Id.
        """
        pulumi.set(__self__, "hyper_v_site_id", hyper_v_site_id)
        pulumi.set(__self__, "instance_type", 'HyperVMigrate')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)

    @property
    @pulumi.getter(name="hyperVSiteId")
    def hyper_v_site_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the HyperV site.
        """
        return pulumi.get(self, "hyper_v_site_id")

    @hyper_v_site_id.setter
    def hyper_v_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_site_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVMigrate'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the migration solution ARM Id.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)


@pulumi.input_type
class HyperVToAzStackHCIDiskInputArgs:
    def __init__(__self__, *,
                 disk_file_format: pulumi.Input[str],
                 disk_id: pulumi.Input[str],
                 disk_size_gb: pulumi.Input[float],
                 is_os_disk: pulumi.Input[bool],
                 is_dynamic: Optional[pulumi.Input[bool]] = None,
                 storage_container_id: Optional[pulumi.Input[str]] = None):
        """
        HyperVToAzStack disk input.
        :param pulumi.Input[str] disk_file_format: Gets or sets the type of the virtual hard disk, vhd or vhdx.
        :param pulumi.Input[str] disk_id: Gets or sets the disk Id.
        :param pulumi.Input[float] disk_size_gb: Gets or sets the disk size in GB.
        :param pulumi.Input[bool] is_os_disk: Gets or sets a value indicating whether disk is os disk.
        :param pulumi.Input[bool] is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
               disk.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage account ARM Id.
        """
        pulumi.set(__self__, "disk_file_format", disk_file_format)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if storage_container_id is not None:
            pulumi.set(__self__, "storage_container_id", storage_container_id)

    @property
    @pulumi.getter(name="diskFileFormat")
    def disk_file_format(self) -> pulumi.Input[str]:
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        return pulumi.get(self, "disk_file_format")

    @disk_file_format.setter
    def disk_file_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_file_format", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[float]:
        """
        Gets or sets the disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> pulumi.Input[bool]:
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        return pulumi.get(self, "is_os_disk")

    @is_os_disk.setter
    def is_os_disk(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_os_disk", value)

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
        disk.
        """
        return pulumi.get(self, "is_dynamic")

    @is_dynamic.setter
    def is_dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target storage account ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_id", value)


@pulumi.input_type
class HyperVToAzStackHCINicInputArgs:
    def __init__(__self__, *,
                 nic_id: pulumi.Input[str],
                 selection_type_for_failover: pulumi.Input[Union[str, 'VMNicSelection']],
                 target_network_id: pulumi.Input[str],
                 test_network_id: pulumi.Input[str]):
        """
        HyperVToAzStackHCI NIC properties.
        :param pulumi.Input[str] nic_id: Gets or sets the NIC Id.
        :param pulumi.Input[Union[str, 'VMNicSelection']] selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> pulumi.Input[Union[str, 'VMNicSelection']]:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @selection_type_for_failover.setter
    def selection_type_for_failover(self, value: pulumi.Input[Union[str, 'VMNicSelection']]):
        pulumi.set(self, "selection_type_for_failover", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_network_id", value)


@pulumi.input_type
class HyperVToAzStackHCIPolicyModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 app_consistent_frequency_in_minutes: pulumi.Input[int],
                 crash_consistent_frequency_in_minutes: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 recovery_point_history_in_minutes: pulumi.Input[int]):
        """
        HyperV To AzStackHCI Policy model custom properties.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: Gets or sets the app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: Gets or sets the crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'HyperVToAzStackHCI'.
        :param pulumi.Input[int] recovery_point_history_in_minutes: Gets or sets the duration in minutes until which the recovery points need to be
               stored.
        """
        pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the duration in minutes until which the recovery points need to be
        stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


@pulumi.input_type
class HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 custom_location_region: pulumi.Input[str],
                 disks_to_include: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]],
                 fabric_discovery_machine_id: pulumi.Input[str],
                 hyper_v_generation: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 nics_to_include: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]],
                 run_as_account_id: pulumi.Input[str],
                 source_dra_name: pulumi.Input[str],
                 storage_container_id: pulumi.Input[str],
                 target_arc_cluster_custom_location_id: pulumi.Input[str],
                 target_dra_name: pulumi.Input[str],
                 target_hci_cluster_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 dynamic_memory_config: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']] = None,
                 is_dynamic_ram: Optional[pulumi.Input[bool]] = None,
                 target_cpu_cores: Optional[pulumi.Input[int]] = None,
                 target_memory_in_mega_bytes: Optional[pulumi.Input[int]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None):
        """
        HyperV to AzStackHCI Protected item model custom properties.
        :param pulumi.Input[str] custom_location_region: Gets or sets the location of Azure Arc HCI custom location resource.
        :param pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]] disks_to_include: Gets or sets the list of disks to replicate.
        :param pulumi.Input[str] fabric_discovery_machine_id: Gets or sets the ARM Id of the discovered machine.
        :param pulumi.Input[str] hyper_v_generation: Gets or sets the hypervisor generation of the virtual machine.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'HyperVToAzStackHCI'.
        :param pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]] nics_to_include: Gets or sets the list of VM NIC to replicate.
        :param pulumi.Input[str] run_as_account_id: Gets or sets the Run As account Id.
        :param pulumi.Input[str] source_dra_name: Gets or sets the source DRA name.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage container ARM Id.
        :param pulumi.Input[str] target_arc_cluster_custom_location_id: Gets or sets the Target Arc Cluster Custom Location ARM Id.
        :param pulumi.Input[str] target_dra_name: Gets or sets the target DRA name.
        :param pulumi.Input[str] target_hci_cluster_id: Gets or sets the Target HCI Cluster ARM Id.
        :param pulumi.Input[str] target_resource_group_id: Gets or sets the target resource group ARM Id.
        :param pulumi.Input['ProtectedItemDynamicMemoryConfigArgs'] dynamic_memory_config: Protected item dynamic memory config.
        :param pulumi.Input[bool] is_dynamic_ram: Gets or sets a value indicating whether memory is dynamical.
        :param pulumi.Input[int] target_cpu_cores: Gets or sets the target CPU cores.
        :param pulumi.Input[int] target_memory_in_mega_bytes: Gets or sets the target memory in mega-bytes.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] target_vm_name: Gets or sets the target VM display name.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "custom_location_region", custom_location_region)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "hyper_v_generation", hyper_v_generation)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        pulumi.set(__self__, "nics_to_include", nics_to_include)
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        pulumi.set(__self__, "source_dra_name", source_dra_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "target_arc_cluster_custom_location_id", target_arc_cluster_custom_location_id)
        pulumi.set(__self__, "target_dra_name", target_dra_name)
        pulumi.set(__self__, "target_hci_cluster_id", target_hci_cluster_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if is_dynamic_ram is not None:
            pulumi.set(__self__, "is_dynamic_ram", is_dynamic_ram)
        if target_cpu_cores is not None:
            pulumi.set(__self__, "target_cpu_cores", target_cpu_cores)
        if target_memory_in_mega_bytes is not None:
            pulumi.set(__self__, "target_memory_in_mega_bytes", target_memory_in_mega_bytes)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="customLocationRegion")
    def custom_location_region(self) -> pulumi.Input[str]:
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        return pulumi.get(self, "custom_location_region")

    @custom_location_region.setter
    def custom_location_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_location_region", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]]:
        """
        Gets or sets the list of disks to replicate.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCIDiskInputArgs']]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @fabric_discovery_machine_id.setter
    def fabric_discovery_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_discovery_machine_id", value)

    @property
    @pulumi.getter(name="hyperVGeneration")
    def hyper_v_generation(self) -> pulumi.Input[str]:
        """
        Gets or sets the hypervisor generation of the virtual machine.
        """
        return pulumi.get(self, "hyper_v_generation")

    @hyper_v_generation.setter
    def hyper_v_generation(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_generation", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="nicsToInclude")
    def nics_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]]:
        """
        Gets or sets the list of VM NIC to replicate.
        """
        return pulumi.get(self, "nics_to_include")

    @nics_to_include.setter
    def nics_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['HyperVToAzStackHCINicInputArgs']]]):
        pulumi.set(self, "nics_to_include", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Run As account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="sourceDraName")
    def source_dra_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the source DRA name.
        """
        return pulumi.get(self, "source_dra_name")

    @source_dra_name.setter
    def source_dra_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_dra_name", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target storage container ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_container_id", value)

    @property
    @pulumi.getter(name="targetArcClusterCustomLocationId")
    def target_arc_cluster_custom_location_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        return pulumi.get(self, "target_arc_cluster_custom_location_id")

    @target_arc_cluster_custom_location_id.setter
    def target_arc_cluster_custom_location_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_arc_cluster_custom_location_id", value)

    @property
    @pulumi.getter(name="targetDraName")
    def target_dra_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target DRA name.
        """
        return pulumi.get(self, "target_dra_name")

    @target_dra_name.setter
    def target_dra_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_dra_name", value)

    @property
    @pulumi.getter(name="targetHciClusterId")
    def target_hci_cluster_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        return pulumi.get(self, "target_hci_cluster_id")

    @target_hci_cluster_id.setter
    def target_hci_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_hci_cluster_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]:
        """
        Protected item dynamic memory config.
        """
        return pulumi.get(self, "dynamic_memory_config")

    @dynamic_memory_config.setter
    def dynamic_memory_config(self, value: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]):
        pulumi.set(self, "dynamic_memory_config", value)

    @property
    @pulumi.getter(name="isDynamicRam")
    def is_dynamic_ram(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        return pulumi.get(self, "is_dynamic_ram")

    @is_dynamic_ram.setter
    def is_dynamic_ram(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic_ram", value)

    @property
    @pulumi.getter(name="targetCpuCores")
    def target_cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target CPU cores.
        """
        return pulumi.get(self, "target_cpu_cores")

    @target_cpu_cores.setter
    def target_cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_cores", value)

    @property
    @pulumi.getter(name="targetMemoryInMegaBytes")
    def target_memory_in_mega_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target memory in mega-bytes.
        """
        return pulumi.get(self, "target_memory_in_mega_bytes")

    @target_memory_in_mega_bytes.setter
    def target_memory_in_mega_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target VM display name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)


@pulumi.input_type
class HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 az_stack_hci_fabric_arm_id: pulumi.Input[str],
                 hyper_v_fabric_arm_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 storage_account_sas_secret_name: Optional[pulumi.Input[str]] = None):
        """
        HyperV to AzStackHCI Replication extension model custom properties.
        :param pulumi.Input[str] az_stack_hci_fabric_arm_id: Gets or sets the ARM Id of the target AzStackHCI fabric.
        :param pulumi.Input[str] hyper_v_fabric_arm_id: Gets or sets the ARM Id of the source HyperV fabric.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'HyperVToAzStackHCI'.
        :param pulumi.Input[str] storage_account_id: Gets or sets the storage account Id.
        :param pulumi.Input[str] storage_account_sas_secret_name: Gets or sets the Sas Secret of storage account.
        """
        pulumi.set(__self__, "az_stack_hci_fabric_arm_id", az_stack_hci_fabric_arm_id)
        pulumi.set(__self__, "hyper_v_fabric_arm_id", hyper_v_fabric_arm_id)
        pulumi.set(__self__, "instance_type", 'HyperVToAzStackHCI')
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="azStackHciFabricArmId")
    def az_stack_hci_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        return pulumi.get(self, "az_stack_hci_fabric_arm_id")

    @az_stack_hci_fabric_arm_id.setter
    def az_stack_hci_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "az_stack_hci_fabric_arm_id", value)

    @property
    @pulumi.getter(name="hyperVFabricArmId")
    def hyper_v_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the source HyperV fabric.
        """
        return pulumi.get(self, "hyper_v_fabric_arm_id")

    @hyper_v_fabric_arm_id.setter
    def hyper_v_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_fabric_arm_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'HyperVToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Sas Secret of storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_sas_secret_name", value)


@pulumi.input_type
class IdentityModelArgs:
    def __init__(__self__, *,
                 aad_authority: pulumi.Input[str],
                 application_id: pulumi.Input[str],
                 audience: pulumi.Input[str],
                 object_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        Identity model.
        :param pulumi.Input[str] aad_authority: Gets or sets the authority of the SPN with which Dra communicates to service.
        :param pulumi.Input[str] application_id: Gets or sets the client/application Id of the SPN with which Dra communicates to
               service.
        :param pulumi.Input[str] audience: Gets or sets the audience of the SPN with which Dra communicates to service.
        :param pulumi.Input[str] object_id: Gets or sets the object Id of the SPN with which Dra communicates to service.
        :param pulumi.Input[str] tenant_id: Gets or sets the tenant Id of the SPN with which Dra communicates to service.
        """
        pulumi.set(__self__, "aad_authority", aad_authority)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="aadAuthority")
    def aad_authority(self) -> pulumi.Input[str]:
        """
        Gets or sets the authority of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "aad_authority")

    @aad_authority.setter
    def aad_authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_authority", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the client/application Id of the SPN with which Dra communicates to
        service.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        """
        Gets or sets the audience of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the object Id of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the tenant Id of the SPN with which Dra communicates to service.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class PolicyModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']]):
        """
        Policy model properties.
        :param pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']] custom_properties: Policy model custom properties.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']]:
        """
        Policy model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['HyperVToAzStackHCIPolicyModelCustomPropertiesArgs', 'VMwareToAzStackHCIPolicyModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)


@pulumi.input_type
class ProtectedItemDynamicMemoryConfigArgs:
    def __init__(__self__, *,
                 maximum_memory_in_mega_bytes: pulumi.Input[float],
                 minimum_memory_in_mega_bytes: pulumi.Input[float],
                 target_memory_buffer_percentage: pulumi.Input[int]):
        """
        Protected item dynamic memory config.
        :param pulumi.Input[float] maximum_memory_in_mega_bytes: Gets or sets maximum memory in MB.
        :param pulumi.Input[float] minimum_memory_in_mega_bytes: Gets or sets minimum memory in MB.
        :param pulumi.Input[int] target_memory_buffer_percentage: Gets or sets target memory buffer in %.
        """
        pulumi.set(__self__, "maximum_memory_in_mega_bytes", maximum_memory_in_mega_bytes)
        pulumi.set(__self__, "minimum_memory_in_mega_bytes", minimum_memory_in_mega_bytes)
        pulumi.set(__self__, "target_memory_buffer_percentage", target_memory_buffer_percentage)

    @property
    @pulumi.getter(name="maximumMemoryInMegaBytes")
    def maximum_memory_in_mega_bytes(self) -> pulumi.Input[float]:
        """
        Gets or sets maximum memory in MB.
        """
        return pulumi.get(self, "maximum_memory_in_mega_bytes")

    @maximum_memory_in_mega_bytes.setter
    def maximum_memory_in_mega_bytes(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="minimumMemoryInMegaBytes")
    def minimum_memory_in_mega_bytes(self) -> pulumi.Input[float]:
        """
        Gets or sets minimum memory in MB.
        """
        return pulumi.get(self, "minimum_memory_in_mega_bytes")

    @minimum_memory_in_mega_bytes.setter
    def minimum_memory_in_mega_bytes(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="targetMemoryBufferPercentage")
    def target_memory_buffer_percentage(self) -> pulumi.Input[int]:
        """
        Gets or sets target memory buffer in %.
        """
        return pulumi.get(self, "target_memory_buffer_percentage")

    @target_memory_buffer_percentage.setter
    def target_memory_buffer_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_memory_buffer_percentage", value)


@pulumi.input_type
class ProtectedItemModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']],
                 policy_name: pulumi.Input[str],
                 replication_extension_name: pulumi.Input[str]):
        """
        Protected item model properties.
        :param pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']] custom_properties: Protected item model custom properties.
        :param pulumi.Input[str] policy_name: Gets or sets the policy name.
        :param pulumi.Input[str] replication_extension_name: Gets or sets the replication extension name.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "replication_extension_name", replication_extension_name)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']]:
        """
        Protected item model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['HyperVToAzStackHCIProtectedItemModelCustomPropertiesArgs', 'VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the policy name.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="replicationExtensionName")
    def replication_extension_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the replication extension name.
        """
        return pulumi.get(self, "replication_extension_name")

    @replication_extension_name.setter
    def replication_extension_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_extension_name", value)


@pulumi.input_type
class ReplicationExtensionModelPropertiesArgs:
    def __init__(__self__, *,
                 custom_properties: pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']]):
        """
        Replication extension model properties.
        :param pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']] custom_properties: Replication extension model custom properties.
        """
        pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']]:
        """
        Replication extension model custom properties.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: pulumi.Input[Union['HyperVToAzStackHCIReplicationExtensionModelCustomPropertiesArgs', 'VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs']]):
        pulumi.set(self, "custom_properties", value)


@pulumi.input_type
class StorageContainerPropertiesArgs:
    def __init__(__self__, *,
                 cluster_shared_volume_path: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        Storage container properties.
        :param pulumi.Input[str] cluster_shared_volume_path: Gets or sets the ClusterSharedVolumePath.
        :param pulumi.Input[str] name: Gets or sets the Name.
        """
        pulumi.set(__self__, "cluster_shared_volume_path", cluster_shared_volume_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterSharedVolumePath")
    def cluster_shared_volume_path(self) -> pulumi.Input[str]:
        """
        Gets or sets the ClusterSharedVolumePath.
        """
        return pulumi.get(self, "cluster_shared_volume_path")

    @cluster_shared_volume_path.setter
    def cluster_shared_volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_shared_volume_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Gets or sets the Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VMwareDraModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 bios_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 mars_authentication_identity: pulumi.Input['IdentityModelArgs']):
        """
        VMware DRA model custom properties.
        :param pulumi.Input[str] bios_id: Gets or sets the BIOS Id of the DRA machine.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'VMware'.
        :param pulumi.Input['IdentityModelArgs'] mars_authentication_identity: Identity model.
        """
        pulumi.set(__self__, "bios_id", bios_id)
        pulumi.set(__self__, "instance_type", 'VMware')
        pulumi.set(__self__, "mars_authentication_identity", mars_authentication_identity)

    @property
    @pulumi.getter(name="biosId")
    def bios_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the BIOS Id of the DRA machine.
        """
        return pulumi.get(self, "bios_id")

    @bios_id.setter
    def bios_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "bios_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'VMware'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="marsAuthenticationIdentity")
    def mars_authentication_identity(self) -> pulumi.Input['IdentityModelArgs']:
        """
        Identity model.
        """
        return pulumi.get(self, "mars_authentication_identity")

    @mars_authentication_identity.setter
    def mars_authentication_identity(self, value: pulumi.Input['IdentityModelArgs']):
        pulumi.set(self, "mars_authentication_identity", value)


@pulumi.input_type
class VMwareMigrateFabricModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 migration_solution_id: pulumi.Input[str],
                 vmware_site_id: pulumi.Input[str]):
        """
        VMware migrate fabric model custom properties.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'VMwareMigrate'.
        :param pulumi.Input[str] migration_solution_id: Gets or sets the ARM Id of the migration solution.
        :param pulumi.Input[str] vmware_site_id: Gets or sets the ARM Id of the VMware site.
        """
        pulumi.set(__self__, "instance_type", 'VMwareMigrate')
        pulumi.set(__self__, "migration_solution_id", migration_solution_id)
        pulumi.set(__self__, "vmware_site_id", vmware_site_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareMigrate'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="migrationSolutionId")
    def migration_solution_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the migration solution.
        """
        return pulumi.get(self, "migration_solution_id")

    @migration_solution_id.setter
    def migration_solution_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "migration_solution_id", value)

    @property
    @pulumi.getter(name="vmwareSiteId")
    def vmware_site_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the VMware site.
        """
        return pulumi.get(self, "vmware_site_id")

    @vmware_site_id.setter
    def vmware_site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_site_id", value)


@pulumi.input_type
class VMwareToAzStackHCIDiskInputArgs:
    def __init__(__self__, *,
                 disk_file_format: pulumi.Input[str],
                 disk_id: pulumi.Input[str],
                 disk_size_gb: pulumi.Input[float],
                 is_os_disk: pulumi.Input[bool],
                 is_dynamic: Optional[pulumi.Input[bool]] = None,
                 storage_container_id: Optional[pulumi.Input[str]] = None):
        """
        VMwareToAzStack disk input.
        :param pulumi.Input[str] disk_file_format: Gets or sets the type of the virtual hard disk, vhd or vhdx.
        :param pulumi.Input[str] disk_id: Gets or sets the disk Id.
        :param pulumi.Input[float] disk_size_gb: Gets or sets the disk size in GB.
        :param pulumi.Input[bool] is_os_disk: Gets or sets a value indicating whether disk is os disk.
        :param pulumi.Input[bool] is_dynamic: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
               disk.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage account ARM Id.
        """
        pulumi.set(__self__, "disk_file_format", disk_file_format)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "is_os_disk", is_os_disk)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if storage_container_id is not None:
            pulumi.set(__self__, "storage_container_id", storage_container_id)

    @property
    @pulumi.getter(name="diskFileFormat")
    def disk_file_format(self) -> pulumi.Input[str]:
        """
        Gets or sets the type of the virtual hard disk, vhd or vhdx.
        """
        return pulumi.get(self, "disk_file_format")

    @disk_file_format.setter
    def disk_file_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_file_format", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the disk Id.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[float]:
        """
        Gets or sets the disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="isOsDisk")
    def is_os_disk(self) -> pulumi.Input[bool]:
        """
        Gets or sets a value indicating whether disk is os disk.
        """
        return pulumi.get(self, "is_os_disk")

    @is_os_disk.setter
    def is_os_disk(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_os_disk", value)

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
        disk.
        """
        return pulumi.get(self, "is_dynamic")

    @is_dynamic.setter
    def is_dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target storage account ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_id", value)


@pulumi.input_type
class VMwareToAzStackHCINicInputArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 nic_id: pulumi.Input[str],
                 selection_type_for_failover: pulumi.Input[Union[str, 'VMNicSelection']],
                 target_network_id: pulumi.Input[str],
                 test_network_id: pulumi.Input[str]):
        """
        VMwareToAzStackHCI NIC properties.
        :param pulumi.Input[str] label: Gets or sets the NIC label.
        :param pulumi.Input[str] nic_id: Gets or sets the NIC Id.
        :param pulumi.Input[Union[str, 'VMNicSelection']] selection_type_for_failover: Gets or sets the selection type of the NIC.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "selection_type_for_failover", selection_type_for_failover)
        pulumi.set(__self__, "target_network_id", target_network_id)
        pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Gets or sets the NIC label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the NIC Id.
        """
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="selectionTypeForFailover")
    def selection_type_for_failover(self) -> pulumi.Input[Union[str, 'VMNicSelection']]:
        """
        Gets or sets the selection type of the NIC.
        """
        return pulumi.get(self, "selection_type_for_failover")

    @selection_type_for_failover.setter
    def selection_type_for_failover(self, value: pulumi.Input[Union[str, 'VMNicSelection']]):
        pulumi.set(self, "selection_type_for_failover", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_network_id", value)


@pulumi.input_type
class VMwareToAzStackHCIPolicyModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 app_consistent_frequency_in_minutes: pulumi.Input[int],
                 crash_consistent_frequency_in_minutes: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 recovery_point_history_in_minutes: pulumi.Input[int]):
        """
        VMware To AzStackHCI Policy model custom properties.
        :param pulumi.Input[int] app_consistent_frequency_in_minutes: Gets or sets the app consistent snapshot frequency (in minutes).
        :param pulumi.Input[int] crash_consistent_frequency_in_minutes: Gets or sets the crash consistent snapshot frequency (in minutes).
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'VMwareToAzStackHCI'.
        :param pulumi.Input[int] recovery_point_history_in_minutes: Gets or sets the duration in minutes until which the recovery points need to be
               stored.
        """
        pulumi.set(__self__, "app_consistent_frequency_in_minutes", app_consistent_frequency_in_minutes)
        pulumi.set(__self__, "crash_consistent_frequency_in_minutes", crash_consistent_frequency_in_minutes)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "recovery_point_history_in_minutes", recovery_point_history_in_minutes)

    @property
    @pulumi.getter(name="appConsistentFrequencyInMinutes")
    def app_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the app consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "app_consistent_frequency_in_minutes")

    @app_consistent_frequency_in_minutes.setter
    def app_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "app_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="crashConsistentFrequencyInMinutes")
    def crash_consistent_frequency_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the crash consistent snapshot frequency (in minutes).
        """
        return pulumi.get(self, "crash_consistent_frequency_in_minutes")

    @crash_consistent_frequency_in_minutes.setter
    def crash_consistent_frequency_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "crash_consistent_frequency_in_minutes", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="recoveryPointHistoryInMinutes")
    def recovery_point_history_in_minutes(self) -> pulumi.Input[int]:
        """
        Gets or sets the duration in minutes until which the recovery points need to be
        stored.
        """
        return pulumi.get(self, "recovery_point_history_in_minutes")

    @recovery_point_history_in_minutes.setter
    def recovery_point_history_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "recovery_point_history_in_minutes", value)


@pulumi.input_type
class VMwareToAzStackHCIProtectedItemModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 custom_location_region: pulumi.Input[str],
                 disks_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]],
                 fabric_discovery_machine_id: pulumi.Input[str],
                 hyper_v_generation: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 nics_to_include: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]],
                 run_as_account_id: pulumi.Input[str],
                 source_dra_name: pulumi.Input[str],
                 storage_container_id: pulumi.Input[str],
                 target_arc_cluster_custom_location_id: pulumi.Input[str],
                 target_dra_name: pulumi.Input[str],
                 target_hci_cluster_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 dynamic_memory_config: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']] = None,
                 is_dynamic_ram: Optional[pulumi.Input[bool]] = None,
                 perform_auto_resync: Optional[pulumi.Input[bool]] = None,
                 target_cpu_cores: Optional[pulumi.Input[int]] = None,
                 target_memory_in_mega_bytes: Optional[pulumi.Input[int]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_vm_name: Optional[pulumi.Input[str]] = None,
                 test_network_id: Optional[pulumi.Input[str]] = None):
        """
        VMware to AzStackHCI Protected item model custom properties.
        :param pulumi.Input[str] custom_location_region: Gets or sets the location of Azure Arc HCI custom location resource.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]] disks_to_include: Gets or sets the list of disks to replicate.
        :param pulumi.Input[str] fabric_discovery_machine_id: Gets or sets the ARM Id of the discovered machine.
        :param pulumi.Input[str] hyper_v_generation: Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'VMwareToAzStackHCI'.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]] nics_to_include: Gets or sets the list of VM NIC to replicate.
        :param pulumi.Input[str] run_as_account_id: Gets or sets the run as account Id.
        :param pulumi.Input[str] source_dra_name: Gets or sets the source DRA name.
        :param pulumi.Input[str] storage_container_id: Gets or sets the target storage container ARM Id.
        :param pulumi.Input[str] target_arc_cluster_custom_location_id: Gets or sets the Target Arc Cluster Custom Location ARM Id.
        :param pulumi.Input[str] target_dra_name: Gets or sets the target DRA name.
        :param pulumi.Input[str] target_hci_cluster_id: Gets or sets the Target HCI Cluster ARM Id.
        :param pulumi.Input[str] target_resource_group_id: Gets or sets the target resource group ARM Id.
        :param pulumi.Input['ProtectedItemDynamicMemoryConfigArgs'] dynamic_memory_config: Protected item dynamic memory config.
        :param pulumi.Input[bool] is_dynamic_ram: Gets or sets a value indicating whether memory is dynamical.
        :param pulumi.Input[bool] perform_auto_resync: Gets or sets a value indicating whether auto resync is to be done.
        :param pulumi.Input[int] target_cpu_cores: Gets or sets the target CPU cores.
        :param pulumi.Input[int] target_memory_in_mega_bytes: Gets or sets the target memory in mega-bytes.
        :param pulumi.Input[str] target_network_id: Gets or sets the target network Id within AzStackHCI Cluster.
        :param pulumi.Input[str] target_vm_name: Gets or sets the target VM display name.
        :param pulumi.Input[str] test_network_id: Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        pulumi.set(__self__, "custom_location_region", custom_location_region)
        pulumi.set(__self__, "disks_to_include", disks_to_include)
        pulumi.set(__self__, "fabric_discovery_machine_id", fabric_discovery_machine_id)
        pulumi.set(__self__, "hyper_v_generation", hyper_v_generation)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "nics_to_include", nics_to_include)
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        pulumi.set(__self__, "source_dra_name", source_dra_name)
        pulumi.set(__self__, "storage_container_id", storage_container_id)
        pulumi.set(__self__, "target_arc_cluster_custom_location_id", target_arc_cluster_custom_location_id)
        pulumi.set(__self__, "target_dra_name", target_dra_name)
        pulumi.set(__self__, "target_hci_cluster_id", target_hci_cluster_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if dynamic_memory_config is not None:
            pulumi.set(__self__, "dynamic_memory_config", dynamic_memory_config)
        if is_dynamic_ram is not None:
            pulumi.set(__self__, "is_dynamic_ram", is_dynamic_ram)
        if perform_auto_resync is not None:
            pulumi.set(__self__, "perform_auto_resync", perform_auto_resync)
        if target_cpu_cores is not None:
            pulumi.set(__self__, "target_cpu_cores", target_cpu_cores)
        if target_memory_in_mega_bytes is not None:
            pulumi.set(__self__, "target_memory_in_mega_bytes", target_memory_in_mega_bytes)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_vm_name is not None:
            pulumi.set(__self__, "target_vm_name", target_vm_name)
        if test_network_id is not None:
            pulumi.set(__self__, "test_network_id", test_network_id)

    @property
    @pulumi.getter(name="customLocationRegion")
    def custom_location_region(self) -> pulumi.Input[str]:
        """
        Gets or sets the location of Azure Arc HCI custom location resource.
        """
        return pulumi.get(self, "custom_location_region")

    @custom_location_region.setter
    def custom_location_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_location_region", value)

    @property
    @pulumi.getter(name="disksToInclude")
    def disks_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]]:
        """
        Gets or sets the list of disks to replicate.
        """
        return pulumi.get(self, "disks_to_include")

    @disks_to_include.setter
    def disks_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCIDiskInputArgs']]]):
        pulumi.set(self, "disks_to_include", value)

    @property
    @pulumi.getter(name="fabricDiscoveryMachineId")
    def fabric_discovery_machine_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the discovered machine.
        """
        return pulumi.get(self, "fabric_discovery_machine_id")

    @fabric_discovery_machine_id.setter
    def fabric_discovery_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_discovery_machine_id", value)

    @property
    @pulumi.getter(name="hyperVGeneration")
    def hyper_v_generation(self) -> pulumi.Input[str]:
        """
        Gets or sets the hypervisor generation of the virtual machine possible values are 1,2.
        """
        return pulumi.get(self, "hyper_v_generation")

    @hyper_v_generation.setter
    def hyper_v_generation(self, value: pulumi.Input[str]):
        pulumi.set(self, "hyper_v_generation", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="nicsToInclude")
    def nics_to_include(self) -> pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]]:
        """
        Gets or sets the list of VM NIC to replicate.
        """
        return pulumi.get(self, "nics_to_include")

    @nics_to_include.setter
    def nics_to_include(self, value: pulumi.Input[Sequence[pulumi.Input['VMwareToAzStackHCINicInputArgs']]]):
        pulumi.set(self, "nics_to_include", value)

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the run as account Id.
        """
        return pulumi.get(self, "run_as_account_id")

    @run_as_account_id.setter
    def run_as_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_as_account_id", value)

    @property
    @pulumi.getter(name="sourceDraName")
    def source_dra_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the source DRA name.
        """
        return pulumi.get(self, "source_dra_name")

    @source_dra_name.setter
    def source_dra_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_dra_name", value)

    @property
    @pulumi.getter(name="storageContainerId")
    def storage_container_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target storage container ARM Id.
        """
        return pulumi.get(self, "storage_container_id")

    @storage_container_id.setter
    def storage_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_container_id", value)

    @property
    @pulumi.getter(name="targetArcClusterCustomLocationId")
    def target_arc_cluster_custom_location_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target Arc Cluster Custom Location ARM Id.
        """
        return pulumi.get(self, "target_arc_cluster_custom_location_id")

    @target_arc_cluster_custom_location_id.setter
    def target_arc_cluster_custom_location_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_arc_cluster_custom_location_id", value)

    @property
    @pulumi.getter(name="targetDraName")
    def target_dra_name(self) -> pulumi.Input[str]:
        """
        Gets or sets the target DRA name.
        """
        return pulumi.get(self, "target_dra_name")

    @target_dra_name.setter
    def target_dra_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_dra_name", value)

    @property
    @pulumi.getter(name="targetHciClusterId")
    def target_hci_cluster_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the Target HCI Cluster ARM Id.
        """
        return pulumi.get(self, "target_hci_cluster_id")

    @target_hci_cluster_id.setter
    def target_hci_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_hci_cluster_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the target resource group ARM Id.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="dynamicMemoryConfig")
    def dynamic_memory_config(self) -> Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]:
        """
        Protected item dynamic memory config.
        """
        return pulumi.get(self, "dynamic_memory_config")

    @dynamic_memory_config.setter
    def dynamic_memory_config(self, value: Optional[pulumi.Input['ProtectedItemDynamicMemoryConfigArgs']]):
        pulumi.set(self, "dynamic_memory_config", value)

    @property
    @pulumi.getter(name="isDynamicRam")
    def is_dynamic_ram(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether memory is dynamical.
        """
        return pulumi.get(self, "is_dynamic_ram")

    @is_dynamic_ram.setter
    def is_dynamic_ram(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dynamic_ram", value)

    @property
    @pulumi.getter(name="performAutoResync")
    def perform_auto_resync(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets a value indicating whether auto resync is to be done.
        """
        return pulumi.get(self, "perform_auto_resync")

    @perform_auto_resync.setter
    def perform_auto_resync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "perform_auto_resync", value)

    @property
    @pulumi.getter(name="targetCpuCores")
    def target_cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target CPU cores.
        """
        return pulumi.get(self, "target_cpu_cores")

    @target_cpu_cores.setter
    def target_cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_cores", value)

    @property
    @pulumi.getter(name="targetMemoryInMegaBytes")
    def target_memory_in_mega_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Gets or sets the target memory in mega-bytes.
        """
        return pulumi.get(self, "target_memory_in_mega_bytes")

    @target_memory_in_mega_bytes.setter
    def target_memory_in_mega_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_memory_in_mega_bytes", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetVmName")
    def target_vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target VM display name.
        """
        return pulumi.get(self, "target_vm_name")

    @target_vm_name.setter
    def target_vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_vm_name", value)

    @property
    @pulumi.getter(name="testNetworkId")
    def test_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the target test network Id within AzStackHCI Cluster.
        """
        return pulumi.get(self, "test_network_id")

    @test_network_id.setter
    def test_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_network_id", value)


@pulumi.input_type
class VMwareToAzStackHCIReplicationExtensionModelCustomPropertiesArgs:
    def __init__(__self__, *,
                 az_stack_hci_fabric_arm_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 vmware_fabric_arm_id: pulumi.Input[str],
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 storage_account_sas_secret_name: Optional[pulumi.Input[str]] = None):
        """
        VMware to AzStackHCI Replication extension model custom properties.
        :param pulumi.Input[str] az_stack_hci_fabric_arm_id: Gets or sets the ARM Id of the target AzStackHCI fabric.
        :param pulumi.Input[str] instance_type: Gets or sets the instance type.
               Expected value is 'VMwareToAzStackHCI'.
        :param pulumi.Input[str] vmware_fabric_arm_id: Gets or sets the ARM Id of the source VMware fabric.
        :param pulumi.Input[str] storage_account_id: Gets or sets the storage account Id.
        :param pulumi.Input[str] storage_account_sas_secret_name: Gets or sets the Sas Secret of storage account.
        """
        pulumi.set(__self__, "az_stack_hci_fabric_arm_id", az_stack_hci_fabric_arm_id)
        pulumi.set(__self__, "instance_type", 'VMwareToAzStackHCI')
        pulumi.set(__self__, "vmware_fabric_arm_id", vmware_fabric_arm_id)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_account_sas_secret_name is not None:
            pulumi.set(__self__, "storage_account_sas_secret_name", storage_account_sas_secret_name)

    @property
    @pulumi.getter(name="azStackHciFabricArmId")
    def az_stack_hci_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the target AzStackHCI fabric.
        """
        return pulumi.get(self, "az_stack_hci_fabric_arm_id")

    @az_stack_hci_fabric_arm_id.setter
    def az_stack_hci_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "az_stack_hci_fabric_arm_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Gets or sets the instance type.
        Expected value is 'VMwareToAzStackHCI'.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="vmwareFabricArmId")
    def vmware_fabric_arm_id(self) -> pulumi.Input[str]:
        """
        Gets or sets the ARM Id of the source VMware fabric.
        """
        return pulumi.get(self, "vmware_fabric_arm_id")

    @vmware_fabric_arm_id.setter
    def vmware_fabric_arm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_fabric_arm_id", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the storage account Id.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="storageAccountSasSecretName")
    def storage_account_sas_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the Sas Secret of storage account.
        """
        return pulumi.get(self, "storage_account_sas_secret_name")

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_sas_secret_name", value)


@pulumi.input_type
class VaultModelPropertiesArgs:
    def __init__(__self__, *,
                 vault_type: Optional[pulumi.Input[Union[str, 'ReplicationVaultType']]] = None):
        """
        Vault properties.
        :param pulumi.Input[Union[str, 'ReplicationVaultType']] vault_type: Gets or sets the type of vault.
        """
        if vault_type is not None:
            pulumi.set(__self__, "vault_type", vault_type)

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> Optional[pulumi.Input[Union[str, 'ReplicationVaultType']]]:
        """
        Gets or sets the type of vault.
        """
        return pulumi.get(self, "vault_type")

    @vault_type.setter
    def vault_type(self, value: Optional[pulumi.Input[Union[str, 'ReplicationVaultType']]]):
        pulumi.set(self, "vault_type", value)


