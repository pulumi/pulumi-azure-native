# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ClusterServiceAksClusterDataResponse',
    'ClusterServiceNexusAksClusterDataResponse',
    'OperationalStatusResponse',
    'QualifiedComponentDeploymentParametersResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class ClusterServiceAksClusterDataResponse(dict):
    """
    AKS Cluster specific data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLocationId":
            suggest = "custom_location_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterServiceAksClusterDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterServiceAksClusterDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterServiceAksClusterDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_location_id: str,
                 type: str):
        """
        AKS Cluster specific data.
        :param str custom_location_id: Custom Location resource ID
        :param str type: Cluster Type Definitions
               Expected value is 'Aks'.
        """
        pulumi.set(__self__, "custom_location_id", custom_location_id)
        pulumi.set(__self__, "type", 'Aks')

    @property
    @pulumi.getter(name="customLocationId")
    def custom_location_id(self) -> str:
        """
        Custom Location resource ID
        """
        return pulumi.get(self, "custom_location_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Cluster Type Definitions
        Expected value is 'Aks'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ClusterServiceNexusAksClusterDataResponse(dict):
    """
    Nexus AKS Cluster specific data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLocationId":
            suggest = "custom_location_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterServiceNexusAksClusterDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterServiceNexusAksClusterDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterServiceNexusAksClusterDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_location_id: str,
                 type: str):
        """
        Nexus AKS Cluster specific data.
        :param str custom_location_id: Custom Location resource ID
        :param str type: Cluster Type Definitions
               Expected value is 'NexusAks'.
        """
        pulumi.set(__self__, "custom_location_id", custom_location_id)
        pulumi.set(__self__, "type", 'NexusAks')

    @property
    @pulumi.getter(name="customLocationId")
    def custom_location_id(self) -> str:
        """
        Custom Location resource ID
        """
        return pulumi.get(self, "custom_location_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Cluster Type Definitions
        Expected value is 'NexusAks'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OperationalStatusResponse(dict):
    """
    Operational Status of the resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OperationalStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OperationalStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OperationalStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: str,
                 workload: str):
        """
        Operational Status of the resource
        :param str health_check: Health check results
        :param str workload: Status of the deployed workload
        """
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "workload", workload)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        """
        Health check results
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def workload(self) -> str:
        """
        Status of the deployed workload
        """
        return pulumi.get(self, "workload")


@pulumi.output_type
class QualifiedComponentDeploymentParametersResponse(dict):
    """
    Containerized Network Function (CNF) Qualified Deployment Parameters
    """
    def __init__(__self__, *,
                 type: str,
                 parameters: Optional[str] = None,
                 secrets: Optional[str] = None):
        """
        Containerized Network Function (CNF) Qualified Deployment Parameters
        :param str type: Federation Type
        :param str parameters: Deployment Parameters
        :param str secrets: Deployment secrets
        """
        pulumi.set(__self__, "type", type)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Federation Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        """
        Deployment Parameters
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[str]:
        """
        Deployment secrets
        """
        return pulumi.get(self, "secrets")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


