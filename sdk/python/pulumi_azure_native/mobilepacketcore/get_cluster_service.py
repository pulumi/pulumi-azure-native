# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterServiceResult',
    'AwaitableGetClusterServiceResult',
    'get_cluster_service',
    'get_cluster_service_output',
]

@pulumi.output_type
class GetClusterServiceResult:
    """
    Azure for Operators 5G Core Cluster Service Resource
    """
    def __init__(__self__, cluster_type_specific_data=None, component_parameters=None, deployment_type=None, id=None, location=None, name=None, operational_status=None, provisioning_state=None, release_version=None, system_data=None, tags=None, type=None):
        if cluster_type_specific_data and not isinstance(cluster_type_specific_data, dict):
            raise TypeError("Expected argument 'cluster_type_specific_data' to be a dict")
        pulumi.set(__self__, "cluster_type_specific_data", cluster_type_specific_data)
        if component_parameters and not isinstance(component_parameters, list):
            raise TypeError("Expected argument 'component_parameters' to be a list")
        pulumi.set(__self__, "component_parameters", component_parameters)
        if deployment_type and not isinstance(deployment_type, str):
            raise TypeError("Expected argument 'deployment_type' to be a str")
        pulumi.set(__self__, "deployment_type", deployment_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operational_status and not isinstance(operational_status, dict):
            raise TypeError("Expected argument 'operational_status' to be a dict")
        pulumi.set(__self__, "operational_status", operational_status)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if release_version and not isinstance(release_version, str):
            raise TypeError("Expected argument 'release_version' to be a str")
        pulumi.set(__self__, "release_version", release_version)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterTypeSpecificData")
    def cluster_type_specific_data(self) -> Any:
        """
        Cluster type specific data.  Contents depend on the cluster type
        """
        return pulumi.get(self, "cluster_type_specific_data")

    @property
    @pulumi.getter(name="componentParameters")
    def component_parameters(self) -> Sequence['outputs.QualifiedComponentDeploymentParametersResponse']:
        """
        Azure for Operators 5G Core Local PaaS component parameters.  One set per component type
        """
        return pulumi.get(self, "component_parameters")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        Cluster type (Lab or Production)
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> 'outputs.OperationalStatusResponse':
        """
        Operational status
        """
        return pulumi.get(self, "operational_status")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> str:
        """
        Azure for Operators 5G Core Release Version.  This is applied to all platform as a service (PaaS) components and running workloads in this cluster
        """
        return pulumi.get(self, "release_version")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetClusterServiceResult(GetClusterServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterServiceResult(
            cluster_type_specific_data=self.cluster_type_specific_data,
            component_parameters=self.component_parameters,
            deployment_type=self.deployment_type,
            id=self.id,
            location=self.location,
            name=self.name,
            operational_status=self.operational_status,
            provisioning_state=self.provisioning_state,
            release_version=self.release_version,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_cluster_service(cluster_service_name: Optional[str] = None,
                        resource_group_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterServiceResult:
    """
    Get a ClusterServiceResource
    Azure REST API version: 2023-10-15-preview.


    :param str cluster_service_name: The name of the Cluster Service
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['clusterServiceName'] = cluster_service_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mobilepacketcore:getClusterService', __args__, opts=opts, typ=GetClusterServiceResult).value

    return AwaitableGetClusterServiceResult(
        cluster_type_specific_data=pulumi.get(__ret__, 'cluster_type_specific_data'),
        component_parameters=pulumi.get(__ret__, 'component_parameters'),
        deployment_type=pulumi.get(__ret__, 'deployment_type'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        operational_status=pulumi.get(__ret__, 'operational_status'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        release_version=pulumi.get(__ret__, 'release_version'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_cluster_service)
def get_cluster_service_output(cluster_service_name: Optional[pulumi.Input[str]] = None,
                               resource_group_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterServiceResult]:
    """
    Get a ClusterServiceResource
    Azure REST API version: 2023-10-15-preview.


    :param str cluster_service_name: The name of the Cluster Service
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
