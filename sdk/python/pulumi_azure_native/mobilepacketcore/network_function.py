# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['NetworkFunctionArgs', 'NetworkFunction']

@pulumi.input_type
class NetworkFunctionArgs:
    def __init__(__self__, *,
                 network_function_administrative_state: pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']],
                 network_function_type: pulumi.Input[Union[str, 'NetworkFunctionType']],
                 resource_group_name: pulumi.Input[str],
                 sku: pulumi.Input[Union[str, 'SkuDefinitions']],
                 capacity: Optional[pulumi.Input[int]] = None,
                 deployment_notes: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network_function_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user_description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkFunction resource.
        :param pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']] network_function_administrative_state: Administrative state of the network function
        :param pulumi.Input[Union[str, 'NetworkFunctionType']] network_function_type: Type of network function
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'SkuDefinitions']] sku: Provisioned SKU Value.
        :param pulumi.Input[int] capacity: Capacity of the network function in units of 10000.  This represents the session count or the Simultaneously Attached Users (SAU) count as applicable
        :param pulumi.Input[str] deployment_notes: User provided deployment notes.  This is used to optionally provide details about the NF deployment
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] network_function_name: The name of the network function
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] user_description: User provided description
        """
        pulumi.set(__self__, "network_function_administrative_state", network_function_administrative_state)
        pulumi.set(__self__, "network_function_type", network_function_type)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "sku", sku)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if deployment_notes is not None:
            pulumi.set(__self__, "deployment_notes", deployment_notes)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network_function_name is not None:
            pulumi.set(__self__, "network_function_name", network_function_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_description is not None:
            pulumi.set(__self__, "user_description", user_description)

    @property
    @pulumi.getter(name="networkFunctionAdministrativeState")
    def network_function_administrative_state(self) -> pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']]:
        """
        Administrative state of the network function
        """
        return pulumi.get(self, "network_function_administrative_state")

    @network_function_administrative_state.setter
    def network_function_administrative_state(self, value: pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']]):
        pulumi.set(self, "network_function_administrative_state", value)

    @property
    @pulumi.getter(name="networkFunctionType")
    def network_function_type(self) -> pulumi.Input[Union[str, 'NetworkFunctionType']]:
        """
        Type of network function
        """
        return pulumi.get(self, "network_function_type")

    @network_function_type.setter
    def network_function_type(self, value: pulumi.Input[Union[str, 'NetworkFunctionType']]):
        pulumi.set(self, "network_function_type", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[Union[str, 'SkuDefinitions']]:
        """
        Provisioned SKU Value.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[Union[str, 'SkuDefinitions']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity of the network function in units of 10000.  This represents the session count or the Simultaneously Attached Users (SAU) count as applicable
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="deploymentNotes")
    def deployment_notes(self) -> Optional[pulumi.Input[str]]:
        """
        User provided deployment notes.  This is used to optionally provide details about the NF deployment
        """
        return pulumi.get(self, "deployment_notes")

    @deployment_notes.setter
    def deployment_notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_notes", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="networkFunctionName")
    def network_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network function
        """
        return pulumi.get(self, "network_function_name")

    @network_function_name.setter
    def network_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_function_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> Optional[pulumi.Input[str]]:
        """
        User provided description
        """
        return pulumi.get(self, "user_description")

    @user_description.setter
    def user_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_description", value)


class NetworkFunction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 deployment_notes: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network_function_administrative_state: Optional[pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']]] = None,
                 network_function_name: Optional[pulumi.Input[str]] = None,
                 network_function_type: Optional[pulumi.Input[Union[str, 'NetworkFunctionType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[Union[str, 'SkuDefinitions']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user_description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        AO5GC Network Function Resource
        Azure REST API version: 2023-05-15-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity: Capacity of the network function in units of 10000.  This represents the session count or the Simultaneously Attached Users (SAU) count as applicable
        :param pulumi.Input[str] deployment_notes: User provided deployment notes.  This is used to optionally provide details about the NF deployment
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']] network_function_administrative_state: Administrative state of the network function
        :param pulumi.Input[str] network_function_name: The name of the network function
        :param pulumi.Input[Union[str, 'NetworkFunctionType']] network_function_type: Type of network function
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'SkuDefinitions']] sku: Provisioned SKU Value.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] user_description: User provided description
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkFunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        AO5GC Network Function Resource
        Azure REST API version: 2023-05-15-preview.

        :param str resource_name: The name of the resource.
        :param NetworkFunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkFunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 deployment_notes: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network_function_administrative_state: Optional[pulumi.Input[Union[str, 'NetworkFunctionAdministrativeState']]] = None,
                 network_function_name: Optional[pulumi.Input[str]] = None,
                 network_function_type: Optional[pulumi.Input[Union[str, 'NetworkFunctionType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[Union[str, 'SkuDefinitions']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user_description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkFunctionArgs.__new__(NetworkFunctionArgs)

            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["deployment_notes"] = deployment_notes
            __props__.__dict__["location"] = location
            if network_function_administrative_state is None and not opts.urn:
                raise TypeError("Missing required property 'network_function_administrative_state'")
            __props__.__dict__["network_function_administrative_state"] = network_function_administrative_state
            __props__.__dict__["network_function_name"] = network_function_name
            if network_function_type is None and not opts.urn:
                raise TypeError("Missing required property 'network_function_type'")
            __props__.__dict__["network_function_type"] = network_function_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if sku is None and not opts.urn:
                raise TypeError("Missing required property 'sku'")
            __props__.__dict__["sku"] = sku
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_description"] = user_description
            __props__.__dict__["infrastructure_element_count"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["network_function_operational_status"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:mobilepacketcore/v20230515preview:NetworkFunction")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(NetworkFunction, __self__).__init__(
            'azure-native:mobilepacketcore:NetworkFunction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NetworkFunction':
        """
        Get an existing NetworkFunction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NetworkFunctionArgs.__new__(NetworkFunctionArgs)

        __props__.__dict__["capacity"] = None
        __props__.__dict__["deployment_notes"] = None
        __props__.__dict__["infrastructure_element_count"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_function_administrative_state"] = None
        __props__.__dict__["network_function_operational_status"] = None
        __props__.__dict__["network_function_type"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["sku"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["user_description"] = None
        return NetworkFunction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[Optional[int]]:
        """
        Capacity of the network function in units of 10000.  This represents the session count or the Simultaneously Attached Users (SAU) count as applicable
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="deploymentNotes")
    def deployment_notes(self) -> pulumi.Output[Optional[str]]:
        """
        User provided deployment notes.  This is used to optionally provide details about the NF deployment
        """
        return pulumi.get(self, "deployment_notes")

    @property
    @pulumi.getter(name="infrastructureElementCount")
    def infrastructure_element_count(self) -> pulumi.Output[int]:
        """
        Count of infrastructure elements used by this network function (vCPUs, in units of 8)
        """
        return pulumi.get(self, "infrastructure_element_count")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFunctionAdministrativeState")
    def network_function_administrative_state(self) -> pulumi.Output[str]:
        """
        Administrative state of the network function
        """
        return pulumi.get(self, "network_function_administrative_state")

    @property
    @pulumi.getter(name="networkFunctionOperationalStatus")
    def network_function_operational_status(self) -> pulumi.Output[str]:
        """
        Operational state of the network function
        """
        return pulumi.get(self, "network_function_operational_status")

    @property
    @pulumi.getter(name="networkFunctionType")
    def network_function_type(self) -> pulumi.Output[str]:
        """
        Type of network function
        """
        return pulumi.get(self, "network_function_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[str]:
        """
        Provisioned SKU Value.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> pulumi.Output[Optional[str]]:
        """
        User provided description
        """
        return pulumi.get(self, "user_description")

