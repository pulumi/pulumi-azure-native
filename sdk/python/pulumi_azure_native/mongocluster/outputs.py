# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdministratorPropertiesResponse',
    'BackupPropertiesResponse',
    'ComputePropertiesResponse',
    'ConnectionStringResponse',
    'DatabaseRoleResponse',
    'EntraIdentityProviderPropertiesResponse',
    'EntraIdentityProviderResponse',
    'FirewallRulePropertiesResponse',
    'HighAvailabilityPropertiesResponse',
    'MongoClusterPropertiesResponse',
    'PrivateEndpointConnectionPropertiesResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'ReplicationPropertiesResponse',
    'ShardingPropertiesResponse',
    'StoragePropertiesResponse',
    'SystemDataResponse',
    'UserPropertiesResponse',
]

@pulumi.output_type
class AdministratorPropertiesResponse(dict):
    """
    The local administrator login properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdministratorPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdministratorPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdministratorPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_name: Optional[_builtins.str] = None):
        """
        The local administrator login properties.
        :param _builtins.str user_name: The administrator user name.
        """
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The administrator user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class BackupPropertiesResponse(dict):
    """
    The backup properties of the cluster. This includes the earliest restore time and retention settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "earliestRestoreTime":
            suggest = "earliest_restore_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 earliest_restore_time: _builtins.str):
        """
        The backup properties of the cluster. This includes the earliest restore time and retention settings.
        :param _builtins.str earliest_restore_time: Earliest restore timestamp in UTC ISO8601 format.
        """
        pulumi.set(__self__, "earliest_restore_time", earliest_restore_time)

    @_builtins.property
    @pulumi.getter(name="earliestRestoreTime")
    def earliest_restore_time(self) -> _builtins.str:
        """
        Earliest restore timestamp in UTC ISO8601 format.
        """
        return pulumi.get(self, "earliest_restore_time")


@pulumi.output_type
class ComputePropertiesResponse(dict):
    """
    The compute properties of the cluster. This includes the virtual-cores/memory and scaling options applied to servers in the cluster.
    """
    def __init__(__self__, *,
                 tier: Optional[_builtins.str] = None):
        """
        The compute properties of the cluster. This includes the virtual-cores/memory and scaling options applied to servers in the cluster.
        :param _builtins.str tier: The compute tier to assign to the cluster, where each tier maps to a virtual-core and memory size. Example values: 'M30', 'M40'.
        """
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @_builtins.property
    @pulumi.getter
    def tier(self) -> Optional[_builtins.str]:
        """
        The compute tier to assign to the cluster, where each tier maps to a virtual-core and memory size. Example values: 'M30', 'M40'.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class ConnectionStringResponse(dict):
    """
    Connection string for the mongo cluster
    """
    def __init__(__self__, *,
                 connection_string: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str):
        """
        Connection string for the mongo cluster
        :param _builtins.str connection_string: Value of the connection string
        :param _builtins.str description: Description of the connection string
        :param _builtins.str name: Name of the connection string.
        """
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> _builtins.str:
        """
        Value of the connection string
        """
        return pulumi.get(self, "connection_string")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the connection string
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the connection string.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatabaseRoleResponse(dict):
    """
    Database role definition that is assigned to a user.
    """
    def __init__(__self__, *,
                 db: _builtins.str,
                 role: _builtins.str):
        """
        Database role definition that is assigned to a user.
        :param _builtins.str db: Database scope that the role is assigned to.
        :param _builtins.str role: The role that is assigned to the user on the database scope.
        """
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "role", role)

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.str:
        """
        Database scope that the role is assigned to.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        The role that is assigned to the user on the database scope.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class EntraIdentityProviderPropertiesResponse(dict):
    """
    Microsoft Entra ID provider properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalType":
            suggest = "principal_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntraIdentityProviderPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntraIdentityProviderPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntraIdentityProviderPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_type: _builtins.str):
        """
        Microsoft Entra ID provider properties.
        :param _builtins.str principal_type: The principal type of the user.
        """
        pulumi.set(__self__, "principal_type", principal_type)

    @_builtins.property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> _builtins.str:
        """
        The principal type of the user.
        """
        return pulumi.get(self, "principal_type")


@pulumi.output_type
class EntraIdentityProviderResponse(dict):
    """
    Defines a Microsoft Entra ID Mongo user.
    """
    def __init__(__self__, *,
                 properties: 'outputs.EntraIdentityProviderPropertiesResponse',
                 type: _builtins.str):
        """
        Defines a Microsoft Entra ID Mongo user.
        :param 'EntraIdentityProviderPropertiesResponse' properties: The Entra identity properties for the user.
        :param _builtins.str type: Identity provider types that a a user identity can belong to.
               Expected value is 'MicrosoftEntraID'.
        """
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", 'MicrosoftEntraID')

    @_builtins.property
    @pulumi.getter
    def properties(self) -> 'outputs.EntraIdentityProviderPropertiesResponse':
        """
        The Entra identity properties for the user.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Identity provider types that a a user identity can belong to.
        Expected value is 'MicrosoftEntraID'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FirewallRulePropertiesResponse(dict):
    """
    The properties of a mongo cluster firewall rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIpAddress":
            suggest = "end_ip_address"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "startIpAddress":
            suggest = "start_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallRulePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallRulePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallRulePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip_address: _builtins.str,
                 provisioning_state: _builtins.str,
                 start_ip_address: _builtins.str):
        """
        The properties of a mongo cluster firewall rule.
        :param _builtins.str end_ip_address: The end IP address of the mongo cluster firewall rule. Must be IPv4 format.
        :param _builtins.str provisioning_state: The provisioning state of the firewall rule.
        :param _builtins.str start_ip_address: The start IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @_builtins.property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> _builtins.str:
        """
        The end IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        return pulumi.get(self, "end_ip_address")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the firewall rule.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> _builtins.str:
        """
        The start IP address of the mongo cluster firewall rule. Must be IPv4 format.
        """
        return pulumi.get(self, "start_ip_address")


@pulumi.output_type
class HighAvailabilityPropertiesResponse(dict):
    """
    The high availability properties of the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetMode":
            suggest = "target_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HighAvailabilityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HighAvailabilityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HighAvailabilityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_mode: Optional[_builtins.str] = None):
        """
        The high availability properties of the cluster.
        :param _builtins.str target_mode: The target high availability mode requested for the cluster.
        """
        if target_mode is not None:
            pulumi.set(__self__, "target_mode", target_mode)

    @_builtins.property
    @pulumi.getter(name="targetMode")
    def target_mode(self) -> Optional[_builtins.str]:
        """
        The target high availability mode requested for the cluster.
        """
        return pulumi.get(self, "target_mode")


@pulumi.output_type
class MongoClusterPropertiesResponse(dict):
    """
    The properties of a mongo cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterStatus":
            suggest = "cluster_status"
        elif key == "connectionString":
            suggest = "connection_string"
        elif key == "infrastructureVersion":
            suggest = "infrastructure_version"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "highAvailability":
            suggest = "high_availability"
        elif key == "previewFeatures":
            suggest = "preview_features"
        elif key == "publicNetworkAccess":
            suggest = "public_network_access"
        elif key == "serverVersion":
            suggest = "server_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_status: _builtins.str,
                 connection_string: _builtins.str,
                 infrastructure_version: _builtins.str,
                 private_endpoint_connections: Sequence['outputs.PrivateEndpointConnectionResponse'],
                 provisioning_state: _builtins.str,
                 replica: 'outputs.ReplicationPropertiesResponse',
                 administrator: Optional['outputs.AdministratorPropertiesResponse'] = None,
                 backup: Optional['outputs.BackupPropertiesResponse'] = None,
                 compute: Optional['outputs.ComputePropertiesResponse'] = None,
                 high_availability: Optional['outputs.HighAvailabilityPropertiesResponse'] = None,
                 preview_features: Optional[Sequence[_builtins.str]] = None,
                 public_network_access: Optional[_builtins.str] = None,
                 server_version: Optional[_builtins.str] = None,
                 sharding: Optional['outputs.ShardingPropertiesResponse'] = None,
                 storage: Optional['outputs.StoragePropertiesResponse'] = None):
        """
        The properties of a mongo cluster.
        :param _builtins.str cluster_status: The status of the mongo cluster.
        :param _builtins.str connection_string: The default mongo connection string for the cluster.
        :param _builtins.str infrastructure_version: The infrastructure version the cluster is provisioned on.
        :param Sequence['PrivateEndpointConnectionResponse'] private_endpoint_connections: List of private endpoint connections.
        :param _builtins.str provisioning_state: The provisioning state of the mongo cluster.
        :param 'ReplicationPropertiesResponse' replica: The replication properties for the mongo cluster
        :param 'AdministratorPropertiesResponse' administrator: The local administrator properties for the mongo cluster.
        :param 'BackupPropertiesResponse' backup: The backup properties of the mongo cluster.
        :param 'ComputePropertiesResponse' compute: The compute properties of the mongo cluster.
        :param 'HighAvailabilityPropertiesResponse' high_availability: The high availability properties of the mongo cluster.
        :param Sequence[_builtins.str] preview_features: List of private endpoint connections.
        :param _builtins.str public_network_access: Whether or not public endpoint access is allowed for this mongo cluster.
        :param _builtins.str server_version: The Mongo DB server version. Defaults to the latest available version if not specified.
        :param 'ShardingPropertiesResponse' sharding: The sharding properties of the mongo cluster.
        :param 'StoragePropertiesResponse' storage: The storage properties of the mongo cluster.
        """
        pulumi.set(__self__, "cluster_status", cluster_status)
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "infrastructure_version", infrastructure_version)
        pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "replica", replica)
        if administrator is not None:
            pulumi.set(__self__, "administrator", administrator)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if preview_features is not None:
            pulumi.set(__self__, "preview_features", preview_features)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sharding is not None:
            pulumi.set(__self__, "sharding", sharding)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> _builtins.str:
        """
        The status of the mongo cluster.
        """
        return pulumi.get(self, "cluster_status")

    @_builtins.property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> _builtins.str:
        """
        The default mongo connection string for the cluster.
        """
        return pulumi.get(self, "connection_string")

    @_builtins.property
    @pulumi.getter(name="infrastructureVersion")
    def infrastructure_version(self) -> _builtins.str:
        """
        The infrastructure version the cluster is provisioned on.
        """
        return pulumi.get(self, "infrastructure_version")

    @_builtins.property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.PrivateEndpointConnectionResponse']:
        """
        List of private endpoint connections.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the mongo cluster.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def replica(self) -> 'outputs.ReplicationPropertiesResponse':
        """
        The replication properties for the mongo cluster
        """
        return pulumi.get(self, "replica")

    @_builtins.property
    @pulumi.getter
    def administrator(self) -> Optional['outputs.AdministratorPropertiesResponse']:
        """
        The local administrator properties for the mongo cluster.
        """
        return pulumi.get(self, "administrator")

    @_builtins.property
    @pulumi.getter
    def backup(self) -> Optional['outputs.BackupPropertiesResponse']:
        """
        The backup properties of the mongo cluster.
        """
        return pulumi.get(self, "backup")

    @_builtins.property
    @pulumi.getter
    def compute(self) -> Optional['outputs.ComputePropertiesResponse']:
        """
        The compute properties of the mongo cluster.
        """
        return pulumi.get(self, "compute")

    @_builtins.property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional['outputs.HighAvailabilityPropertiesResponse']:
        """
        The high availability properties of the mongo cluster.
        """
        return pulumi.get(self, "high_availability")

    @_builtins.property
    @pulumi.getter(name="previewFeatures")
    def preview_features(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of private endpoint connections.
        """
        return pulumi.get(self, "preview_features")

    @_builtins.property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[_builtins.str]:
        """
        Whether or not public endpoint access is allowed for this mongo cluster.
        """
        return pulumi.get(self, "public_network_access")

    @_builtins.property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[_builtins.str]:
        """
        The Mongo DB server version. Defaults to the latest available version if not specified.
        """
        return pulumi.get(self, "server_version")

    @_builtins.property
    @pulumi.getter
    def sharding(self) -> Optional['outputs.ShardingPropertiesResponse']:
        """
        The sharding properties of the mongo cluster.
        """
        return pulumi.get(self, "sharding")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional['outputs.StoragePropertiesResponse']:
        """
        The storage properties of the mongo cluster.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class PrivateEndpointConnectionPropertiesResponse(dict):
    """
    Properties of the private endpoint connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Sequence[_builtins.str],
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
                 provisioning_state: _builtins.str,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None):
        """
        Properties of the private endpoint connection.
        :param Sequence[_builtins.str] group_ids: The group ids for the private endpoint resource.
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param _builtins.str provisioning_state: The provisioning state of the private endpoint connection resource.
        :param 'PrivateEndpointResponse' private_endpoint: The private endpoint resource.
        """
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)

    @_builtins.property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[_builtins.str]:
        """
        The group ids for the private endpoint resource.
        """
        return pulumi.get(self, "group_ids")

    @_builtins.property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStateResponse':
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the private endpoint connection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The private endpoint resource.
        """
        return pulumi.get(self, "private_endpoint")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    The private endpoint connection resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemData":
            suggest = "system_data"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
                 provisioning_state: _builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: _builtins.str,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None):
        """
        The private endpoint connection resource.
        :param Sequence[_builtins.str] group_ids: The group ids for the private endpoint resource.
        :param _builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param _builtins.str name: The name of the resource
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param _builtins.str provisioning_state: The provisioning state of the private endpoint connection resource.
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param _builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param 'PrivateEndpointResponse' private_endpoint: The private endpoint resource.
        """
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)

    @_builtins.property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[_builtins.str]:
        """
        The group ids for the private endpoint resource.
        """
        return pulumi.get(self, "group_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStateResponse':
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the private endpoint connection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The private endpoint resource.
        """
        return pulumi.get(self, "private_endpoint")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The private endpoint resource.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        The private endpoint resource.
        :param _builtins.str id: The ARM identifier for private endpoint.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ARM identifier for private endpoint.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    A collection of information about the state of the connection between service consumer and provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param _builtins.str actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param _builtins.str description: The reason for approval/rejection of the connection.
        :param _builtins.str status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[_builtins.str]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ReplicationPropertiesResponse(dict):
    """
    Replica properties of the mongo cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationState":
            suggest = "replication_state"
        elif key == "sourceResourceId":
            suggest = "source_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replication_state: _builtins.str,
                 role: _builtins.str,
                 source_resource_id: _builtins.str):
        """
        Replica properties of the mongo cluster.
        :param _builtins.str replication_state: The replication link state of the replica cluster.
        :param _builtins.str role: The replication role of the cluster
        :param _builtins.str source_resource_id: The resource id the source cluster for the replica cluster.
        """
        pulumi.set(__self__, "replication_state", replication_state)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "source_resource_id", source_resource_id)

    @_builtins.property
    @pulumi.getter(name="replicationState")
    def replication_state(self) -> _builtins.str:
        """
        The replication link state of the replica cluster.
        """
        return pulumi.get(self, "replication_state")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        The replication role of the cluster
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> _builtins.str:
        """
        The resource id the source cluster for the replica cluster.
        """
        return pulumi.get(self, "source_resource_id")


@pulumi.output_type
class ShardingPropertiesResponse(dict):
    """
    The sharding properties of the cluster. This includes the shard count and scaling options for the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shardCount":
            suggest = "shard_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShardingPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShardingPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShardingPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shard_count: Optional[_builtins.int] = None):
        """
        The sharding properties of the cluster. This includes the shard count and scaling options for the cluster.
        :param _builtins.int shard_count: Number of shards to provision on the cluster.
        """
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)

    @_builtins.property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[_builtins.int]:
        """
        Number of shards to provision on the cluster.
        """
        return pulumi.get(self, "shard_count")


@pulumi.output_type
class StoragePropertiesResponse(dict):
    """
    The storage properties of the cluster. This includes the data storage size and scaling applied to servers in the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeGb":
            suggest = "size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StoragePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StoragePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StoragePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_gb: Optional[_builtins.float] = None):
        """
        The storage properties of the cluster. This includes the data storage size and scaling applied to servers in the cluster.
        :param _builtins.float size_gb: The size of the data disk assigned to each server.
        """
        if size_gb is not None:
            pulumi.set(__self__, "size_gb", size_gb)

    @_builtins.property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> Optional[_builtins.float]:
        """
        The size of the data disk assigned to each server.
        """
        return pulumi.get(self, "size_gb")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserPropertiesResponse(dict):
    """
    Definition of Mongo user resource on a cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "identityProvider":
            suggest = "identity_provider"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 identity_provider: Optional['outputs.EntraIdentityProviderResponse'] = None,
                 roles: Optional[Sequence['outputs.DatabaseRoleResponse']] = None):
        """
        Definition of Mongo user resource on a cluster.
        :param _builtins.str provisioning_state: The provisioning state of the user.
        :param 'EntraIdentityProviderResponse' identity_provider: The user's identity provider definition.
        :param Sequence['DatabaseRoleResponse'] roles: Database roles that are assigned to the user.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if identity_provider is not None:
            pulumi.set(__self__, "identity_provider", identity_provider)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the user.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> Optional['outputs.EntraIdentityProviderResponse']:
        """
        The user's identity provider definition.
        """
        return pulumi.get(self, "identity_provider")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.DatabaseRoleResponse']]:
        """
        Database roles that are assigned to the user.
        """
        return pulumi.get(self, "roles")


