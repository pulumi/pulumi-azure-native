# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DiagnosticServiceArgs', 'DiagnosticService']

@pulumi.input_type
class DiagnosticServiceArgs:
    def __init__(__self__, *,
                 extended_location: pulumi.Input['ExtendedLocationPropertyArgs'],
                 image: pulumi.Input['ContainerImageArgs'],
                 mq_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 data_export_frequency_seconds: Optional[pulumi.Input[int]] = None,
                 diagnostic_service_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 max_data_storage_size: Optional[pulumi.Input[float]] = None,
                 metrics_port: Optional[pulumi.Input[int]] = None,
                 open_telemetry_traces_collector_addr: Optional[pulumi.Input[str]] = None,
                 stale_data_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DiagnosticService resource.
        :param pulumi.Input['ExtendedLocationPropertyArgs'] extended_location: Extended Location
        :param pulumi.Input['ContainerImageArgs'] image: The details of Diagnostic Service Docker Image.
        :param pulumi.Input[str] mq_name: Name of MQ resource
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[int] data_export_frequency_seconds: The frequency at which the data will be exported.
        :param pulumi.Input[str] diagnostic_service_name: Name of MQ diagnostic resource
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] log_format: The format for the logs generated.
        :param pulumi.Input[str] log_level: The format for the logs generated.
        :param pulumi.Input[float] max_data_storage_size: The maximum data stored in MiB.
        :param pulumi.Input[int] metrics_port: The port at which metrics is exposed.
        :param pulumi.Input[str] open_telemetry_traces_collector_addr: The destination to collect traces. Diagnostic service will push traces to this endpoint
        :param pulumi.Input[int] stale_data_timeout_seconds: Metric inactivity timeout.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "mq_name", mq_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if data_export_frequency_seconds is None:
            data_export_frequency_seconds = 10
        if data_export_frequency_seconds is not None:
            pulumi.set(__self__, "data_export_frequency_seconds", data_export_frequency_seconds)
        if diagnostic_service_name is not None:
            pulumi.set(__self__, "diagnostic_service_name", diagnostic_service_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log_format is None:
            log_format = 'json'
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_level is None:
            log_level = 'info'
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if max_data_storage_size is None:
            max_data_storage_size = 16
        if max_data_storage_size is not None:
            pulumi.set(__self__, "max_data_storage_size", max_data_storage_size)
        if metrics_port is None:
            metrics_port = 9600
        if metrics_port is not None:
            pulumi.set(__self__, "metrics_port", metrics_port)
        if open_telemetry_traces_collector_addr is not None:
            pulumi.set(__self__, "open_telemetry_traces_collector_addr", open_telemetry_traces_collector_addr)
        if stale_data_timeout_seconds is None:
            stale_data_timeout_seconds = 600
        if stale_data_timeout_seconds is not None:
            pulumi.set(__self__, "stale_data_timeout_seconds", stale_data_timeout_seconds)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationPropertyArgs']:
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationPropertyArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['ContainerImageArgs']:
        """
        The details of Diagnostic Service Docker Image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['ContainerImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="mqName")
    def mq_name(self) -> pulumi.Input[str]:
        """
        Name of MQ resource
        """
        return pulumi.get(self, "mq_name")

    @mq_name.setter
    def mq_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "mq_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="dataExportFrequencySeconds")
    def data_export_frequency_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The frequency at which the data will be exported.
        """
        return pulumi.get(self, "data_export_frequency_seconds")

    @data_export_frequency_seconds.setter
    def data_export_frequency_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_export_frequency_seconds", value)

    @property
    @pulumi.getter(name="diagnosticServiceName")
    def diagnostic_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of MQ diagnostic resource
        """
        return pulumi.get(self, "diagnostic_service_name")

    @diagnostic_service_name.setter
    def diagnostic_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diagnostic_service_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format for the logs generated.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        The format for the logs generated.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="maxDataStorageSize")
    def max_data_storage_size(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum data stored in MiB.
        """
        return pulumi.get(self, "max_data_storage_size")

    @max_data_storage_size.setter
    def max_data_storage_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_data_storage_size", value)

    @property
    @pulumi.getter(name="metricsPort")
    def metrics_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port at which metrics is exposed.
        """
        return pulumi.get(self, "metrics_port")

    @metrics_port.setter
    def metrics_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_port", value)

    @property
    @pulumi.getter(name="openTelemetryTracesCollectorAddr")
    def open_telemetry_traces_collector_addr(self) -> Optional[pulumi.Input[str]]:
        """
        The destination to collect traces. Diagnostic service will push traces to this endpoint
        """
        return pulumi.get(self, "open_telemetry_traces_collector_addr")

    @open_telemetry_traces_collector_addr.setter
    def open_telemetry_traces_collector_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_telemetry_traces_collector_addr", value)

    @property
    @pulumi.getter(name="staleDataTimeoutSeconds")
    def stale_data_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Metric inactivity timeout.
        """
        return pulumi.get(self, "stale_data_timeout_seconds")

    @stale_data_timeout_seconds.setter
    def stale_data_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_data_timeout_seconds", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class DiagnosticService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_export_frequency_seconds: Optional[pulumi.Input[int]] = None,
                 diagnostic_service_name: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']]] = None,
                 image: Optional[pulumi.Input[pulumi.InputType['ContainerImageArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 max_data_storage_size: Optional[pulumi.Input[float]] = None,
                 metrics_port: Optional[pulumi.Input[int]] = None,
                 mq_name: Optional[pulumi.Input[str]] = None,
                 open_telemetry_traces_collector_addr: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 stale_data_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        MQ diagnostic services resource
        Azure REST API version: 2023-10-04-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] data_export_frequency_seconds: The frequency at which the data will be exported.
        :param pulumi.Input[str] diagnostic_service_name: Name of MQ diagnostic resource
        :param pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']] extended_location: Extended Location
        :param pulumi.Input[pulumi.InputType['ContainerImageArgs']] image: The details of Diagnostic Service Docker Image.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] log_format: The format for the logs generated.
        :param pulumi.Input[str] log_level: The format for the logs generated.
        :param pulumi.Input[float] max_data_storage_size: The maximum data stored in MiB.
        :param pulumi.Input[int] metrics_port: The port at which metrics is exposed.
        :param pulumi.Input[str] mq_name: Name of MQ resource
        :param pulumi.Input[str] open_telemetry_traces_collector_addr: The destination to collect traces. Diagnostic service will push traces to this endpoint
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[int] stale_data_timeout_seconds: Metric inactivity timeout.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiagnosticServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        MQ diagnostic services resource
        Azure REST API version: 2023-10-04-preview.

        :param str resource_name: The name of the resource.
        :param DiagnosticServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiagnosticServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_export_frequency_seconds: Optional[pulumi.Input[int]] = None,
                 diagnostic_service_name: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']]] = None,
                 image: Optional[pulumi.Input[pulumi.InputType['ContainerImageArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 max_data_storage_size: Optional[pulumi.Input[float]] = None,
                 metrics_port: Optional[pulumi.Input[int]] = None,
                 mq_name: Optional[pulumi.Input[str]] = None,
                 open_telemetry_traces_collector_addr: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 stale_data_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiagnosticServiceArgs.__new__(DiagnosticServiceArgs)

            if data_export_frequency_seconds is None:
                data_export_frequency_seconds = 10
            __props__.__dict__["data_export_frequency_seconds"] = data_export_frequency_seconds
            __props__.__dict__["diagnostic_service_name"] = diagnostic_service_name
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["location"] = location
            if log_format is None:
                log_format = 'json'
            __props__.__dict__["log_format"] = log_format
            if log_level is None:
                log_level = 'info'
            __props__.__dict__["log_level"] = log_level
            if max_data_storage_size is None:
                max_data_storage_size = 16
            __props__.__dict__["max_data_storage_size"] = max_data_storage_size
            if metrics_port is None:
                metrics_port = 9600
            __props__.__dict__["metrics_port"] = metrics_port
            if mq_name is None and not opts.urn:
                raise TypeError("Missing required property 'mq_name'")
            __props__.__dict__["mq_name"] = mq_name
            __props__.__dict__["open_telemetry_traces_collector_addr"] = open_telemetry_traces_collector_addr
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if stale_data_timeout_seconds is None:
                stale_data_timeout_seconds = 600
            __props__.__dict__["stale_data_timeout_seconds"] = stale_data_timeout_seconds
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:iotoperationsmq/v20231004preview:DiagnosticService")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DiagnosticService, __self__).__init__(
            'azure-native:iotoperationsmq:DiagnosticService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DiagnosticService':
        """
        Get an existing DiagnosticService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DiagnosticServiceArgs.__new__(DiagnosticServiceArgs)

        __props__.__dict__["data_export_frequency_seconds"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["image"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["log_format"] = None
        __props__.__dict__["log_level"] = None
        __props__.__dict__["max_data_storage_size"] = None
        __props__.__dict__["metrics_port"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["open_telemetry_traces_collector_addr"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["stale_data_timeout_seconds"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return DiagnosticService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataExportFrequencySeconds")
    def data_export_frequency_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        The frequency at which the data will be exported.
        """
        return pulumi.get(self, "data_export_frequency_seconds")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationPropertyResponse']:
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output['outputs.ContainerImageResponse']:
        """
        The details of Diagnostic Service Docker Image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> pulumi.Output[Optional[str]]:
        """
        The format for the logs generated.
        """
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[str]]:
        """
        The format for the logs generated.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="maxDataStorageSize")
    def max_data_storage_size(self) -> pulumi.Output[Optional[float]]:
        """
        The maximum data stored in MiB.
        """
        return pulumi.get(self, "max_data_storage_size")

    @property
    @pulumi.getter(name="metricsPort")
    def metrics_port(self) -> pulumi.Output[Optional[int]]:
        """
        The port at which metrics is exposed.
        """
        return pulumi.get(self, "metrics_port")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openTelemetryTracesCollectorAddr")
    def open_telemetry_traces_collector_addr(self) -> pulumi.Output[Optional[str]]:
        """
        The destination to collect traces. Diagnostic service will push traces to this endpoint
        """
        return pulumi.get(self, "open_telemetry_traces_collector_addr")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="staleDataTimeoutSeconds")
    def stale_data_timeout_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Metric inactivity timeout.
        """
        return pulumi.get(self, "stale_data_timeout_seconds")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

