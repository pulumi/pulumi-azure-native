# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetKafkaConnectorTopicMapResult',
    'AwaitableGetKafkaConnectorTopicMapResult',
    'get_kafka_connector_topic_map',
    'get_kafka_connector_topic_map_output',
]

@pulumi.output_type
class GetKafkaConnectorTopicMapResult:
    """
    MQ kafkaConnector/topicMap resource
    """
    def __init__(__self__, batching=None, compression=None, copy_mqtt_properties=None, extended_location=None, id=None, kafka_connector_ref=None, location=None, name=None, partition_key_property=None, partition_strategy=None, provisioning_state=None, routes=None, system_data=None, tags=None, type=None):
        if batching and not isinstance(batching, dict):
            raise TypeError("Expected argument 'batching' to be a dict")
        pulumi.set(__self__, "batching", batching)
        if compression and not isinstance(compression, str):
            raise TypeError("Expected argument 'compression' to be a str")
        pulumi.set(__self__, "compression", compression)
        if copy_mqtt_properties and not isinstance(copy_mqtt_properties, str):
            raise TypeError("Expected argument 'copy_mqtt_properties' to be a str")
        pulumi.set(__self__, "copy_mqtt_properties", copy_mqtt_properties)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka_connector_ref and not isinstance(kafka_connector_ref, str):
            raise TypeError("Expected argument 'kafka_connector_ref' to be a str")
        pulumi.set(__self__, "kafka_connector_ref", kafka_connector_ref)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partition_key_property and not isinstance(partition_key_property, str):
            raise TypeError("Expected argument 'partition_key_property' to be a str")
        pulumi.set(__self__, "partition_key_property", partition_key_property)
        if partition_strategy and not isinstance(partition_strategy, str):
            raise TypeError("Expected argument 'partition_strategy' to be a str")
        pulumi.set(__self__, "partition_strategy", partition_strategy)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.KafkaTopicMapBatchingResponse']:
        """
        The batching settings for kafka messages.
        """
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        """
        The compression to use for kafka messages.
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="copyMqttProperties")
    def copy_mqtt_properties(self) -> Optional[str]:
        """
        The flag to copy Mqtt properties.
        """
        return pulumi.get(self, "copy_mqtt_properties")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> 'outputs.ExtendedLocationPropertyResponse':
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kafkaConnectorRef")
    def kafka_connector_ref(self) -> str:
        """
        The kafkaConnector CRD it refers to.
        """
        return pulumi.get(self, "kafka_connector_ref")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionKeyProperty")
    def partition_key_property(self) -> Optional[str]:
        """
        The partition to use for Kafka.
        """
        return pulumi.get(self, "partition_key_property")

    @property
    @pulumi.getter(name="partitionStrategy")
    def partition_strategy(self) -> Optional[str]:
        """
        The partition strategy to use for Kafka.
        """
        return pulumi.get(self, "partition_strategy")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.KafkaRoutesResponse']:
        """
        The route details for Kafka connector.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetKafkaConnectorTopicMapResult(GetKafkaConnectorTopicMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaConnectorTopicMapResult(
            batching=self.batching,
            compression=self.compression,
            copy_mqtt_properties=self.copy_mqtt_properties,
            extended_location=self.extended_location,
            id=self.id,
            kafka_connector_ref=self.kafka_connector_ref,
            location=self.location,
            name=self.name,
            partition_key_property=self.partition_key_property,
            partition_strategy=self.partition_strategy,
            provisioning_state=self.provisioning_state,
            routes=self.routes,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_kafka_connector_topic_map(kafka_connector_name: Optional[str] = None,
                                  mq_name: Optional[str] = None,
                                  resource_group_name: Optional[str] = None,
                                  topic_map_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaConnectorTopicMapResult:
    """
    Get a KafkaTopicMapResource
    Azure REST API version: 2023-10-04-preview.


    :param str kafka_connector_name: Name of MQ kafkaConnector resource
    :param str mq_name: Name of MQ resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str topic_map_name: Name of MQ kafka/topicMap resource
    """
    __args__ = dict()
    __args__['kafkaConnectorName'] = kafka_connector_name
    __args__['mqName'] = mq_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['topicMapName'] = topic_map_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:iotoperationsmq:getKafkaConnectorTopicMap', __args__, opts=opts, typ=GetKafkaConnectorTopicMapResult).value

    return AwaitableGetKafkaConnectorTopicMapResult(
        batching=pulumi.get(__ret__, 'batching'),
        compression=pulumi.get(__ret__, 'compression'),
        copy_mqtt_properties=pulumi.get(__ret__, 'copy_mqtt_properties'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        id=pulumi.get(__ret__, 'id'),
        kafka_connector_ref=pulumi.get(__ret__, 'kafka_connector_ref'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        partition_key_property=pulumi.get(__ret__, 'partition_key_property'),
        partition_strategy=pulumi.get(__ret__, 'partition_strategy'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        routes=pulumi.get(__ret__, 'routes'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_kafka_connector_topic_map)
def get_kafka_connector_topic_map_output(kafka_connector_name: Optional[pulumi.Input[str]] = None,
                                         mq_name: Optional[pulumi.Input[str]] = None,
                                         resource_group_name: Optional[pulumi.Input[str]] = None,
                                         topic_map_name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKafkaConnectorTopicMapResult]:
    """
    Get a KafkaTopicMapResource
    Azure REST API version: 2023-10-04-preview.


    :param str kafka_connector_name: Name of MQ kafkaConnector resource
    :param str mq_name: Name of MQ resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str topic_map_name: Name of MQ kafka/topicMap resource
    """
    ...
