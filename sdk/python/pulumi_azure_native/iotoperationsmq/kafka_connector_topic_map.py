# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['KafkaConnectorTopicMapArgs', 'KafkaConnectorTopicMap']

@pulumi.input_type
class KafkaConnectorTopicMapArgs:
    def __init__(__self__, *,
                 extended_location: pulumi.Input['ExtendedLocationPropertyArgs'],
                 kafka_connector_name: pulumi.Input[str],
                 kafka_connector_ref: pulumi.Input[str],
                 mq_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 routes: pulumi.Input[Sequence[pulumi.Input['KafkaRoutesArgs']]],
                 batching: Optional[pulumi.Input['KafkaTopicMapBatchingArgs']] = None,
                 compression: Optional[pulumi.Input[Union[str, 'KafkaMessageCompressionType']]] = None,
                 copy_mqtt_properties: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 partition_key_property: Optional[pulumi.Input[str]] = None,
                 partition_strategy: Optional[pulumi.Input[Union[str, 'KafkaPartitionStrategy']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 topic_map_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KafkaConnectorTopicMap resource.
        :param pulumi.Input['ExtendedLocationPropertyArgs'] extended_location: Extended Location
        :param pulumi.Input[str] kafka_connector_name: Name of MQ kafkaConnector resource
        :param pulumi.Input[str] kafka_connector_ref: The kafkaConnector CRD it refers to.
        :param pulumi.Input[str] mq_name: Name of MQ resource
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input['KafkaRoutesArgs']]] routes: The route details for Kafka connector.
        :param pulumi.Input['KafkaTopicMapBatchingArgs'] batching: The batching settings for kafka messages.
        :param pulumi.Input[Union[str, 'KafkaMessageCompressionType']] compression: The compression to use for kafka messages.
        :param pulumi.Input[str] copy_mqtt_properties: The flag to copy Mqtt properties.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] partition_key_property: The partition to use for Kafka.
        :param pulumi.Input[Union[str, 'KafkaPartitionStrategy']] partition_strategy: The partition strategy to use for Kafka.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] topic_map_name: Name of MQ kafka/topicMap resource
        """
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "kafka_connector_name", kafka_connector_name)
        pulumi.set(__self__, "kafka_connector_ref", kafka_connector_ref)
        pulumi.set(__self__, "mq_name", mq_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "routes", routes)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if compression is None:
            compression = 'none'
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if copy_mqtt_properties is not None:
            pulumi.set(__self__, "copy_mqtt_properties", copy_mqtt_properties)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if partition_key_property is not None:
            pulumi.set(__self__, "partition_key_property", partition_key_property)
        if partition_strategy is None:
            partition_strategy = 'default'
        if partition_strategy is not None:
            pulumi.set(__self__, "partition_strategy", partition_strategy)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if topic_map_name is not None:
            pulumi.set(__self__, "topic_map_name", topic_map_name)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationPropertyArgs']:
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationPropertyArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="kafkaConnectorName")
    def kafka_connector_name(self) -> pulumi.Input[str]:
        """
        Name of MQ kafkaConnector resource
        """
        return pulumi.get(self, "kafka_connector_name")

    @kafka_connector_name.setter
    def kafka_connector_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "kafka_connector_name", value)

    @property
    @pulumi.getter(name="kafkaConnectorRef")
    def kafka_connector_ref(self) -> pulumi.Input[str]:
        """
        The kafkaConnector CRD it refers to.
        """
        return pulumi.get(self, "kafka_connector_ref")

    @kafka_connector_ref.setter
    def kafka_connector_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "kafka_connector_ref", value)

    @property
    @pulumi.getter(name="mqName")
    def mq_name(self) -> pulumi.Input[str]:
        """
        Name of MQ resource
        """
        return pulumi.get(self, "mq_name")

    @mq_name.setter
    def mq_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "mq_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Input[Sequence[pulumi.Input['KafkaRoutesArgs']]]:
        """
        The route details for Kafka connector.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: pulumi.Input[Sequence[pulumi.Input['KafkaRoutesArgs']]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def batching(self) -> Optional[pulumi.Input['KafkaTopicMapBatchingArgs']]:
        """
        The batching settings for kafka messages.
        """
        return pulumi.get(self, "batching")

    @batching.setter
    def batching(self, value: Optional[pulumi.Input['KafkaTopicMapBatchingArgs']]):
        pulumi.set(self, "batching", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[Union[str, 'KafkaMessageCompressionType']]]:
        """
        The compression to use for kafka messages.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[Union[str, 'KafkaMessageCompressionType']]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="copyMqttProperties")
    def copy_mqtt_properties(self) -> Optional[pulumi.Input[str]]:
        """
        The flag to copy Mqtt properties.
        """
        return pulumi.get(self, "copy_mqtt_properties")

    @copy_mqtt_properties.setter
    def copy_mqtt_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_mqtt_properties", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="partitionKeyProperty")
    def partition_key_property(self) -> Optional[pulumi.Input[str]]:
        """
        The partition to use for Kafka.
        """
        return pulumi.get(self, "partition_key_property")

    @partition_key_property.setter
    def partition_key_property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_key_property", value)

    @property
    @pulumi.getter(name="partitionStrategy")
    def partition_strategy(self) -> Optional[pulumi.Input[Union[str, 'KafkaPartitionStrategy']]]:
        """
        The partition strategy to use for Kafka.
        """
        return pulumi.get(self, "partition_strategy")

    @partition_strategy.setter
    def partition_strategy(self, value: Optional[pulumi.Input[Union[str, 'KafkaPartitionStrategy']]]):
        pulumi.set(self, "partition_strategy", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="topicMapName")
    def topic_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of MQ kafka/topicMap resource
        """
        return pulumi.get(self, "topic_map_name")

    @topic_map_name.setter
    def topic_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_map_name", value)


class KafkaConnectorTopicMap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batching: Optional[pulumi.Input[pulumi.InputType['KafkaTopicMapBatchingArgs']]] = None,
                 compression: Optional[pulumi.Input[Union[str, 'KafkaMessageCompressionType']]] = None,
                 copy_mqtt_properties: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']]] = None,
                 kafka_connector_name: Optional[pulumi.Input[str]] = None,
                 kafka_connector_ref: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mq_name: Optional[pulumi.Input[str]] = None,
                 partition_key_property: Optional[pulumi.Input[str]] = None,
                 partition_strategy: Optional[pulumi.Input[Union[str, 'KafkaPartitionStrategy']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KafkaRoutesArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 topic_map_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        MQ kafkaConnector/topicMap resource
        Azure REST API version: 2023-10-04-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['KafkaTopicMapBatchingArgs']] batching: The batching settings for kafka messages.
        :param pulumi.Input[Union[str, 'KafkaMessageCompressionType']] compression: The compression to use for kafka messages.
        :param pulumi.Input[str] copy_mqtt_properties: The flag to copy Mqtt properties.
        :param pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']] extended_location: Extended Location
        :param pulumi.Input[str] kafka_connector_name: Name of MQ kafkaConnector resource
        :param pulumi.Input[str] kafka_connector_ref: The kafkaConnector CRD it refers to.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] mq_name: Name of MQ resource
        :param pulumi.Input[str] partition_key_property: The partition to use for Kafka.
        :param pulumi.Input[Union[str, 'KafkaPartitionStrategy']] partition_strategy: The partition strategy to use for Kafka.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KafkaRoutesArgs']]]] routes: The route details for Kafka connector.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] topic_map_name: Name of MQ kafka/topicMap resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaConnectorTopicMapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        MQ kafkaConnector/topicMap resource
        Azure REST API version: 2023-10-04-preview.

        :param str resource_name: The name of the resource.
        :param KafkaConnectorTopicMapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaConnectorTopicMapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batching: Optional[pulumi.Input[pulumi.InputType['KafkaTopicMapBatchingArgs']]] = None,
                 compression: Optional[pulumi.Input[Union[str, 'KafkaMessageCompressionType']]] = None,
                 copy_mqtt_properties: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']]] = None,
                 kafka_connector_name: Optional[pulumi.Input[str]] = None,
                 kafka_connector_ref: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mq_name: Optional[pulumi.Input[str]] = None,
                 partition_key_property: Optional[pulumi.Input[str]] = None,
                 partition_strategy: Optional[pulumi.Input[Union[str, 'KafkaPartitionStrategy']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KafkaRoutesArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 topic_map_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaConnectorTopicMapArgs.__new__(KafkaConnectorTopicMapArgs)

            __props__.__dict__["batching"] = batching
            if compression is None:
                compression = 'none'
            __props__.__dict__["compression"] = compression
            __props__.__dict__["copy_mqtt_properties"] = copy_mqtt_properties
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            if kafka_connector_name is None and not opts.urn:
                raise TypeError("Missing required property 'kafka_connector_name'")
            __props__.__dict__["kafka_connector_name"] = kafka_connector_name
            if kafka_connector_ref is None and not opts.urn:
                raise TypeError("Missing required property 'kafka_connector_ref'")
            __props__.__dict__["kafka_connector_ref"] = kafka_connector_ref
            __props__.__dict__["location"] = location
            if mq_name is None and not opts.urn:
                raise TypeError("Missing required property 'mq_name'")
            __props__.__dict__["mq_name"] = mq_name
            __props__.__dict__["partition_key_property"] = partition_key_property
            if partition_strategy is None:
                partition_strategy = 'default'
            __props__.__dict__["partition_strategy"] = partition_strategy
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if routes is None and not opts.urn:
                raise TypeError("Missing required property 'routes'")
            __props__.__dict__["routes"] = routes
            __props__.__dict__["tags"] = tags
            __props__.__dict__["topic_map_name"] = topic_map_name
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:iotoperationsmq/v20231004preview:KafkaConnectorTopicMap")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(KafkaConnectorTopicMap, __self__).__init__(
            'azure-native:iotoperationsmq:KafkaConnectorTopicMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'KafkaConnectorTopicMap':
        """
        Get an existing KafkaConnectorTopicMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = KafkaConnectorTopicMapArgs.__new__(KafkaConnectorTopicMapArgs)

        __props__.__dict__["batching"] = None
        __props__.__dict__["compression"] = None
        __props__.__dict__["copy_mqtt_properties"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["kafka_connector_ref"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["partition_key_property"] = None
        __props__.__dict__["partition_strategy"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["routes"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return KafkaConnectorTopicMap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def batching(self) -> pulumi.Output[Optional['outputs.KafkaTopicMapBatchingResponse']]:
        """
        The batching settings for kafka messages.
        """
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter
    def compression(self) -> pulumi.Output[Optional[str]]:
        """
        The compression to use for kafka messages.
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="copyMqttProperties")
    def copy_mqtt_properties(self) -> pulumi.Output[Optional[str]]:
        """
        The flag to copy Mqtt properties.
        """
        return pulumi.get(self, "copy_mqtt_properties")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationPropertyResponse']:
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="kafkaConnectorRef")
    def kafka_connector_ref(self) -> pulumi.Output[str]:
        """
        The kafkaConnector CRD it refers to.
        """
        return pulumi.get(self, "kafka_connector_ref")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionKeyProperty")
    def partition_key_property(self) -> pulumi.Output[Optional[str]]:
        """
        The partition to use for Kafka.
        """
        return pulumi.get(self, "partition_key_property")

    @property
    @pulumi.getter(name="partitionStrategy")
    def partition_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        The partition strategy to use for Kafka.
        """
        return pulumi.get(self, "partition_strategy")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence['outputs.KafkaRoutesResponse']]:
        """
        The route details for Kafka connector.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

