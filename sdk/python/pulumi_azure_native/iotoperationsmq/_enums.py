# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'BrokerMemoryProfile',
    'DataLakeDatabaseFormat',
    'DeltaTableFormatEnum',
    'ExtendedLocationType',
    'FabricPathType',
    'KafkaAcks',
    'KafkaMessageCompressionType',
    'KafkaPartitionStrategy',
    'KafkaSaslType',
    'MqttBridgeRemoteBrokerProtocol',
    'MqttBridgeRouteDirection',
    'MqttProtocol',
    'ResourceInfoDefinitionMethods',
    'RunMode',
    'ServiceType',
]


class BrokerMemoryProfile(str, Enum):
    """
    Memory profile of broker.
    """
    TINY = "tiny"
    """
    Tiny memory profile.
    """
    LOW = "low"
    """
    Low memory profile.
    """
    MEDIUM = "medium"
    """
    Medium memory profile.
    """
    HIGH = "high"
    """
    High memory profile.
    """


class DataLakeDatabaseFormat(str, Enum):
    """
    DataLake database format to use.
    """
    DELTA = "delta"
    """
    Delta format.
    """
    PARQUET = "parquet"
    """
    Parquet format.
    """


class DeltaTableFormatEnum(str, Enum):
    """
    Delta table format supported.
    """
    BOOLEAN = "boolean"
    """
    Bool format
    """
    INT8 = "int8"
    """
    Signed integer 8
    """
    INT16 = "int16"
    """
    Signed integer 16
    """
    INT32 = "int32"
    """
    Signed integer 32
    """
    U_INT8 = "uInt8"
    """
    Unsigned integer 8
    """
    U_INT16 = "uInt16"
    """
    Unsigned integer 16
    """
    U_INT32 = "uInt32"
    """
    Unsigned integer 32
    """
    U_INT64 = "uInt64"
    """
    Unsigned integer 64
    """
    FLOAT16 = "float16"
    """
    Float 16
    """
    FLOAT32 = "float32"
    """
    Float 32
    """
    FLOAT64 = "float64"
    """
    Float 64
    """
    DATE32 = "date32"
    """
    Date 32
    """
    DATE64 = "date64"
    """
    Date 64
    """
    BINARY = "binary"
    """
    Binary data
    """
    UTF8 = "utf8"
    """
    UTF8 format
    """


class ExtendedLocationType(str, Enum):
    """
    Type of ExtendedLocation.
    """
    CUSTOM_LOCATION = "CustomLocation"
    """
    CustomLocation type
    """


class FabricPathType(str, Enum):
    """
    Fabric path type to use.
    """
    FILES = "files"
    """
    Fabric path type is Files.
    """
    TABLES = "tables"
    """
    Fabric path type is Tables.
    """


class KafkaAcks(str, Enum):
    """
    The kafka acks to use.
    """
    ZERO = "zero"
    """
    Kafka acks zero.
    """
    ONE = "one"
    """
    Kafka acks one.
    """
    ALL = "all"
    """
    Kafka acks all.
    """


class KafkaMessageCompressionType(str, Enum):
    """
    The compression to use for kafka messages.
    """
    NONE = "none"
    """
    No Kafka message compression.
    """
    GZIP = "gzip"
    """
    Gzip Kafka message compression.
    """
    SNAPPY = "snappy"
    """
    Snappy Kafka message compression.
    """
    LZ4 = "lz4"
    """
    Lz4 Kafka message compression.
    """


class KafkaPartitionStrategy(str, Enum):
    """
    The partition strategy to use for Kafka.
    """
    DEFAULT = "default"
    """
    Default partition strategy.
    """
    STATIC = "static"
    """
    Static partition strategy.
    """
    TOPIC = "topic"
    """
    Topic partition strategy.
    """
    PROPERTY = "property"
    """
    Property partition strategy.
    """


class KafkaSaslType(str, Enum):
    """
    Sasl Mechanism for remote broker authentication.
    """
    PLAIN = "plain"
    """
    Sasl Plain authentication.
    """
    SCRAM_SHA256 = "scramSha256"
    """
    Sasl ScramSha256 authentication.
    """
    SCRAM_SHA512 = "scramSha512"
    """
    Sasl ScramSha512 authentication.
    """


class MqttBridgeRemoteBrokerProtocol(str, Enum):
    """
    Protocol for remote connection.
    """
    MQTT = "mqtt"
    """
    MQTT protocol.
    """
    WEB_SOCKET = "webSocket"
    """
    MQTT over WebSocket protocol.
    """


class MqttBridgeRouteDirection(str, Enum):
    """
    Direction of the route.
    """
    REMOTE_TO_LOCAL = "remote-to-local"
    """
    Remote to Local Broker.
    """
    LOCAL_TO_REMOTE = "local-to-remote"
    """
    Local to Remote Broker.
    """


class MqttProtocol(str, Enum):
    """
    The protocol to use for connecting with Brokers.
    """
    V3 = "v3"
    """
    Mqttv3
    """
    V5 = "v5"
    """
    Mqttv5
    """


class ResourceInfoDefinitionMethods(str, Enum):
    """
    The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
    """
    CONNECT = "Connect"
    """
    Allowed Connecting to Broker
    """
    PUBLISH = "Publish"
    """
    Allowed Publishing to Broker
    """
    SUBSCRIBE = "Subscribe"
    """
    Allowed Subscribing to Broker
    """


class RunMode(str, Enum):
    """
    The Running Mode of the Broker Deployment.
    """
    AUTO = "auto"
    """
    Automatically provision Frontend and Backend pods.
    """
    DISTRIBUTED = "distributed"
    """
    Use Cardinality to set Frontend and Backend pods.
    """


class ServiceType(str, Enum):
    """
    The Kubernetes Service type to deploy for Listener.
    """
    CLUSTER_IP = "clusterIp"
    """
    Cluster IP Service.
    """
    LOAD_BALANCER = "loadBalancer"
    """
    Load Balancer Service.
    """
    NODE_PORT = "nodePort"
    """
    Node Port Service.
    """
