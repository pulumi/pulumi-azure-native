# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DataLakeConnectorArgs', 'DataLakeConnector']

@pulumi.input_type
class DataLakeConnectorArgs:
    def __init__(__self__, *,
                 database_format: pulumi.Input[Union[str, 'DataLakeDatabaseFormat']],
                 extended_location: pulumi.Input['ExtendedLocationPropertyArgs'],
                 image: pulumi.Input['ContainerImageArgs'],
                 mq_name: pulumi.Input[str],
                 protocol: pulumi.Input[Union[str, 'MqttProtocol']],
                 resource_group_name: pulumi.Input[str],
                 target: pulumi.Input['DataLakeTargetStorageArgs'],
                 data_lake_connector_name: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 local_broker_connection: Optional[pulumi.Input['LocalBrokerConnectionSpecArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 node_tolerations: Optional[pulumi.Input['NodeTolerationsArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DataLakeConnector resource.
        :param pulumi.Input[Union[str, 'DataLakeDatabaseFormat']] database_format: DataLake database format to use.
        :param pulumi.Input['ExtendedLocationPropertyArgs'] extended_location: Extended Location
        :param pulumi.Input['ContainerImageArgs'] image: The details of DataLakeConnector Docker Image.
        :param pulumi.Input[str] mq_name: Name of MQ resource
        :param pulumi.Input[Union[str, 'MqttProtocol']] protocol: The protocol to use for connecting with Brokers.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input['DataLakeTargetStorageArgs'] target: The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
        :param pulumi.Input[str] data_lake_connector_name: Name of MQ dataLakeConnector resource
        :param pulumi.Input[int] instances: The number of DataLakeConnector pods to spin up.
        :param pulumi.Input['LocalBrokerConnectionSpecArgs'] local_broker_connection: The details for connecting with Local Broker.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] log_level: The log level of the DataLake Connector instances.
        :param pulumi.Input['NodeTolerationsArgs'] node_tolerations: The Node Tolerations for the DataLake Connector pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "database_format", database_format)
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "mq_name", mq_name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "target", target)
        if data_lake_connector_name is not None:
            pulumi.set(__self__, "data_lake_connector_name", data_lake_connector_name)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if local_broker_connection is not None:
            pulumi.set(__self__, "local_broker_connection", local_broker_connection)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if node_tolerations is not None:
            pulumi.set(__self__, "node_tolerations", node_tolerations)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="databaseFormat")
    def database_format(self) -> pulumi.Input[Union[str, 'DataLakeDatabaseFormat']]:
        """
        DataLake database format to use.
        """
        return pulumi.get(self, "database_format")

    @database_format.setter
    def database_format(self, value: pulumi.Input[Union[str, 'DataLakeDatabaseFormat']]):
        pulumi.set(self, "database_format", value)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationPropertyArgs']:
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationPropertyArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['ContainerImageArgs']:
        """
        The details of DataLakeConnector Docker Image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['ContainerImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="mqName")
    def mq_name(self) -> pulumi.Input[str]:
        """
        Name of MQ resource
        """
        return pulumi.get(self, "mq_name")

    @mq_name.setter
    def mq_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "mq_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[Union[str, 'MqttProtocol']]:
        """
        The protocol to use for connecting with Brokers.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[Union[str, 'MqttProtocol']]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['DataLakeTargetStorageArgs']:
        """
        The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['DataLakeTargetStorageArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="dataLakeConnectorName")
    def data_lake_connector_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of MQ dataLakeConnector resource
        """
        return pulumi.get(self, "data_lake_connector_name")

    @data_lake_connector_name.setter
    def data_lake_connector_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_lake_connector_name", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[int]]:
        """
        The number of DataLakeConnector pods to spin up.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="localBrokerConnection")
    def local_broker_connection(self) -> Optional[pulumi.Input['LocalBrokerConnectionSpecArgs']]:
        """
        The details for connecting with Local Broker.
        """
        return pulumi.get(self, "local_broker_connection")

    @local_broker_connection.setter
    def local_broker_connection(self, value: Optional[pulumi.Input['LocalBrokerConnectionSpecArgs']]):
        pulumi.set(self, "local_broker_connection", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        The log level of the DataLake Connector instances.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="nodeTolerations")
    def node_tolerations(self) -> Optional[pulumi.Input['NodeTolerationsArgs']]:
        """
        The Node Tolerations for the DataLake Connector pods.
        """
        return pulumi.get(self, "node_tolerations")

    @node_tolerations.setter
    def node_tolerations(self, value: Optional[pulumi.Input['NodeTolerationsArgs']]):
        pulumi.set(self, "node_tolerations", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class DataLakeConnector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_lake_connector_name: Optional[pulumi.Input[str]] = None,
                 database_format: Optional[pulumi.Input[Union[str, 'DataLakeDatabaseFormat']]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']]] = None,
                 image: Optional[pulumi.Input[pulumi.InputType['ContainerImageArgs']]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 local_broker_connection: Optional[pulumi.Input[pulumi.InputType['LocalBrokerConnectionSpecArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 mq_name: Optional[pulumi.Input[str]] = None,
                 node_tolerations: Optional[pulumi.Input[pulumi.InputType['NodeTolerationsArgs']]] = None,
                 protocol: Optional[pulumi.Input[Union[str, 'MqttProtocol']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target: Optional[pulumi.Input[pulumi.InputType['DataLakeTargetStorageArgs']]] = None,
                 __props__=None):
        """
        MQ dataLakeConnector resource
        Azure REST API version: 2023-10-04-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_lake_connector_name: Name of MQ dataLakeConnector resource
        :param pulumi.Input[Union[str, 'DataLakeDatabaseFormat']] database_format: DataLake database format to use.
        :param pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']] extended_location: Extended Location
        :param pulumi.Input[pulumi.InputType['ContainerImageArgs']] image: The details of DataLakeConnector Docker Image.
        :param pulumi.Input[int] instances: The number of DataLakeConnector pods to spin up.
        :param pulumi.Input[pulumi.InputType['LocalBrokerConnectionSpecArgs']] local_broker_connection: The details for connecting with Local Broker.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] log_level: The log level of the DataLake Connector instances.
        :param pulumi.Input[str] mq_name: Name of MQ resource
        :param pulumi.Input[pulumi.InputType['NodeTolerationsArgs']] node_tolerations: The Node Tolerations for the DataLake Connector pods.
        :param pulumi.Input[Union[str, 'MqttProtocol']] protocol: The protocol to use for connecting with Brokers.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[pulumi.InputType['DataLakeTargetStorageArgs']] target: The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataLakeConnectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        MQ dataLakeConnector resource
        Azure REST API version: 2023-10-04-preview.

        :param str resource_name: The name of the resource.
        :param DataLakeConnectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataLakeConnectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_lake_connector_name: Optional[pulumi.Input[str]] = None,
                 database_format: Optional[pulumi.Input[Union[str, 'DataLakeDatabaseFormat']]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationPropertyArgs']]] = None,
                 image: Optional[pulumi.Input[pulumi.InputType['ContainerImageArgs']]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 local_broker_connection: Optional[pulumi.Input[pulumi.InputType['LocalBrokerConnectionSpecArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 mq_name: Optional[pulumi.Input[str]] = None,
                 node_tolerations: Optional[pulumi.Input[pulumi.InputType['NodeTolerationsArgs']]] = None,
                 protocol: Optional[pulumi.Input[Union[str, 'MqttProtocol']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target: Optional[pulumi.Input[pulumi.InputType['DataLakeTargetStorageArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataLakeConnectorArgs.__new__(DataLakeConnectorArgs)

            __props__.__dict__["data_lake_connector_name"] = data_lake_connector_name
            if database_format is None and not opts.urn:
                raise TypeError("Missing required property 'database_format'")
            __props__.__dict__["database_format"] = database_format
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["instances"] = instances
            __props__.__dict__["local_broker_connection"] = local_broker_connection
            __props__.__dict__["location"] = location
            __props__.__dict__["log_level"] = log_level
            if mq_name is None and not opts.urn:
                raise TypeError("Missing required property 'mq_name'")
            __props__.__dict__["mq_name"] = mq_name
            __props__.__dict__["node_tolerations"] = node_tolerations
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:iotoperationsmq/v20231004preview:DataLakeConnector")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DataLakeConnector, __self__).__init__(
            'azure-native:iotoperationsmq:DataLakeConnector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DataLakeConnector':
        """
        Get an existing DataLakeConnector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DataLakeConnectorArgs.__new__(DataLakeConnectorArgs)

        __props__.__dict__["database_format"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["image"] = None
        __props__.__dict__["instances"] = None
        __props__.__dict__["local_broker_connection"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["log_level"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["node_tolerations"] = None
        __props__.__dict__["protocol"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["target"] = None
        __props__.__dict__["type"] = None
        return DataLakeConnector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="databaseFormat")
    def database_format(self) -> pulumi.Output[str]:
        """
        DataLake database format to use.
        """
        return pulumi.get(self, "database_format")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationPropertyResponse']:
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output['outputs.ContainerImageResponse']:
        """
        The details of DataLakeConnector Docker Image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Optional[int]]:
        """
        The number of DataLakeConnector pods to spin up.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="localBrokerConnection")
    def local_broker_connection(self) -> pulumi.Output[Optional['outputs.LocalBrokerConnectionSpecResponse']]:
        """
        The details for connecting with Local Broker.
        """
        return pulumi.get(self, "local_broker_connection")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[str]]:
        """
        The log level of the DataLake Connector instances.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeTolerations")
    def node_tolerations(self) -> pulumi.Output[Optional['outputs.NodeTolerationsResponse']]:
        """
        The Node Tolerations for the DataLake Connector pods.
        """
        return pulumi.get(self, "node_tolerations")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        The protocol to use for connecting with Brokers.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output['outputs.DataLakeTargetStorageResponse']:
        """
        The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

