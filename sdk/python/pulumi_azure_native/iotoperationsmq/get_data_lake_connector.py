# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataLakeConnectorResult',
    'AwaitableGetDataLakeConnectorResult',
    'get_data_lake_connector',
    'get_data_lake_connector_output',
]

@pulumi.output_type
class GetDataLakeConnectorResult:
    """
    MQ dataLakeConnector resource
    """
    def __init__(__self__, database_format=None, extended_location=None, id=None, image=None, instances=None, local_broker_connection=None, location=None, log_level=None, name=None, node_tolerations=None, protocol=None, provisioning_state=None, system_data=None, tags=None, target=None, type=None):
        if database_format and not isinstance(database_format, str):
            raise TypeError("Expected argument 'database_format' to be a str")
        pulumi.set(__self__, "database_format", database_format)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, dict):
            raise TypeError("Expected argument 'image' to be a dict")
        pulumi.set(__self__, "image", image)
        if instances and not isinstance(instances, int):
            raise TypeError("Expected argument 'instances' to be a int")
        pulumi.set(__self__, "instances", instances)
        if local_broker_connection and not isinstance(local_broker_connection, dict):
            raise TypeError("Expected argument 'local_broker_connection' to be a dict")
        pulumi.set(__self__, "local_broker_connection", local_broker_connection)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if log_level and not isinstance(log_level, str):
            raise TypeError("Expected argument 'log_level' to be a str")
        pulumi.set(__self__, "log_level", log_level)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_tolerations and not isinstance(node_tolerations, dict):
            raise TypeError("Expected argument 'node_tolerations' to be a dict")
        pulumi.set(__self__, "node_tolerations", node_tolerations)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if target and not isinstance(target, dict):
            raise TypeError("Expected argument 'target' to be a dict")
        pulumi.set(__self__, "target", target)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="databaseFormat")
    def database_format(self) -> str:
        """
        DataLake database format to use.
        """
        return pulumi.get(self, "database_format")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> 'outputs.ExtendedLocationPropertyResponse':
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> 'outputs.ContainerImageResponse':
        """
        The details of DataLakeConnector Docker Image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def instances(self) -> Optional[int]:
        """
        The number of DataLakeConnector pods to spin up.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="localBrokerConnection")
    def local_broker_connection(self) -> Optional['outputs.LocalBrokerConnectionSpecResponse']:
        """
        The details for connecting with Local Broker.
        """
        return pulumi.get(self, "local_broker_connection")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        """
        The log level of the DataLake Connector instances.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeTolerations")
    def node_tolerations(self) -> Optional['outputs.NodeTolerationsResponse']:
        """
        The Node Tolerations for the DataLake Connector pods.
        """
        return pulumi.get(self, "node_tolerations")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol to use for connecting with Brokers.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def target(self) -> 'outputs.DataLakeTargetStorageResponse':
        """
        The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDataLakeConnectorResult(GetDataLakeConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataLakeConnectorResult(
            database_format=self.database_format,
            extended_location=self.extended_location,
            id=self.id,
            image=self.image,
            instances=self.instances,
            local_broker_connection=self.local_broker_connection,
            location=self.location,
            log_level=self.log_level,
            name=self.name,
            node_tolerations=self.node_tolerations,
            protocol=self.protocol,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            target=self.target,
            type=self.type)


def get_data_lake_connector(data_lake_connector_name: Optional[str] = None,
                            mq_name: Optional[str] = None,
                            resource_group_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataLakeConnectorResult:
    """
    Get a DataLakeConnectorResource
    Azure REST API version: 2023-10-04-preview.


    :param str data_lake_connector_name: Name of MQ dataLakeConnector resource
    :param str mq_name: Name of MQ resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['dataLakeConnectorName'] = data_lake_connector_name
    __args__['mqName'] = mq_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:iotoperationsmq:getDataLakeConnector', __args__, opts=opts, typ=GetDataLakeConnectorResult).value

    return AwaitableGetDataLakeConnectorResult(
        database_format=pulumi.get(__ret__, 'database_format'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        instances=pulumi.get(__ret__, 'instances'),
        local_broker_connection=pulumi.get(__ret__, 'local_broker_connection'),
        location=pulumi.get(__ret__, 'location'),
        log_level=pulumi.get(__ret__, 'log_level'),
        name=pulumi.get(__ret__, 'name'),
        node_tolerations=pulumi.get(__ret__, 'node_tolerations'),
        protocol=pulumi.get(__ret__, 'protocol'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        target=pulumi.get(__ret__, 'target'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_data_lake_connector)
def get_data_lake_connector_output(data_lake_connector_name: Optional[pulumi.Input[str]] = None,
                                   mq_name: Optional[pulumi.Input[str]] = None,
                                   resource_group_name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataLakeConnectorResult]:
    """
    Get a DataLakeConnectorResource
    Azure REST API version: 2023-10-04-preview.


    :param str data_lake_connector_name: Name of MQ dataLakeConnector resource
    :param str mq_name: Name of MQ resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
