# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBrokerListenerResult',
    'AwaitableGetBrokerListenerResult',
    'get_broker_listener',
    'get_broker_listener_output',
]

@pulumi.output_type
class GetBrokerListenerResult:
    """
    MQ broker/listener resource
    """
    def __init__(__self__, authentication_enabled=None, authorization_enabled=None, broker_ref=None, extended_location=None, id=None, location=None, name=None, node_port=None, port=None, provisioning_state=None, service_name=None, service_type=None, system_data=None, tags=None, tls=None, type=None):
        if authentication_enabled and not isinstance(authentication_enabled, bool):
            raise TypeError("Expected argument 'authentication_enabled' to be a bool")
        pulumi.set(__self__, "authentication_enabled", authentication_enabled)
        if authorization_enabled and not isinstance(authorization_enabled, bool):
            raise TypeError("Expected argument 'authorization_enabled' to be a bool")
        pulumi.set(__self__, "authorization_enabled", authorization_enabled)
        if broker_ref and not isinstance(broker_ref, str):
            raise TypeError("Expected argument 'broker_ref' to be a str")
        pulumi.set(__self__, "broker_ref", broker_ref)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_port and not isinstance(node_port, int):
            raise TypeError("Expected argument 'node_port' to be a int")
        pulumi.set(__self__, "node_port", node_port)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tls and not isinstance(tls, dict):
            raise TypeError("Expected argument 'tls' to be a dict")
        pulumi.set(__self__, "tls", tls)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authenticationEnabled")
    def authentication_enabled(self) -> Optional[bool]:
        """
        The flag for enabling Authentication rules on Listener Port.
        """
        return pulumi.get(self, "authentication_enabled")

    @property
    @pulumi.getter(name="authorizationEnabled")
    def authorization_enabled(self) -> Optional[bool]:
        """
        The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.
        """
        return pulumi.get(self, "authorization_enabled")

    @property
    @pulumi.getter(name="brokerRef")
    def broker_ref(self) -> str:
        """
        The k8s cr/resource reference of mq/broker.
        """
        return pulumi.get(self, "broker_ref")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> 'outputs.ExtendedLocationPropertyResponse':
        """
        Extended Location
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        """
        The node port to use on the Host node.
        """
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to start Listening for connections on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        The service name to expose Listener port on.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        The Kubernetes Service type to deploy for Listener.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.TlsCertMethodResponse']:
        """
        Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetBrokerListenerResult(GetBrokerListenerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrokerListenerResult(
            authentication_enabled=self.authentication_enabled,
            authorization_enabled=self.authorization_enabled,
            broker_ref=self.broker_ref,
            extended_location=self.extended_location,
            id=self.id,
            location=self.location,
            name=self.name,
            node_port=self.node_port,
            port=self.port,
            provisioning_state=self.provisioning_state,
            service_name=self.service_name,
            service_type=self.service_type,
            system_data=self.system_data,
            tags=self.tags,
            tls=self.tls,
            type=self.type)


def get_broker_listener(broker_name: Optional[str] = None,
                        listener_name: Optional[str] = None,
                        mq_name: Optional[str] = None,
                        resource_group_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrokerListenerResult:
    """
    Get a BrokerListenerResource
    Azure REST API version: 2023-10-04-preview.


    :param str broker_name: Name of MQ broker resource
    :param str listener_name: Name of MQ broker/listener resource
    :param str mq_name: Name of MQ resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['brokerName'] = broker_name
    __args__['listenerName'] = listener_name
    __args__['mqName'] = mq_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:iotoperationsmq:getBrokerListener', __args__, opts=opts, typ=GetBrokerListenerResult).value

    return AwaitableGetBrokerListenerResult(
        authentication_enabled=pulumi.get(__ret__, 'authentication_enabled'),
        authorization_enabled=pulumi.get(__ret__, 'authorization_enabled'),
        broker_ref=pulumi.get(__ret__, 'broker_ref'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        node_port=pulumi.get(__ret__, 'node_port'),
        port=pulumi.get(__ret__, 'port'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        service_name=pulumi.get(__ret__, 'service_name'),
        service_type=pulumi.get(__ret__, 'service_type'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        tls=pulumi.get(__ret__, 'tls'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_broker_listener)
def get_broker_listener_output(broker_name: Optional[pulumi.Input[str]] = None,
                               listener_name: Optional[pulumi.Input[str]] = None,
                               mq_name: Optional[pulumi.Input[str]] = None,
                               resource_group_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrokerListenerResult]:
    """
    Get a BrokerListenerResource
    Azure REST API version: 2023-10-04-preview.


    :param str broker_name: Name of MQ broker resource
    :param str listener_name: Name of MQ broker/listener resource
    :param str mq_name: Name of MQ resource
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
