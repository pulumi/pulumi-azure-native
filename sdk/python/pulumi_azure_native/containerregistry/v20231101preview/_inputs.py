# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ArchivePackageSourcePropertiesArgs',
    'ArchivePackageSourcePropertiesArgsDict',
    'LoggingPropertiesArgs',
    'LoggingPropertiesArgsDict',
    'ParentPropertiesArgs',
    'ParentPropertiesArgsDict',
    'PipelineRunRequestArgs',
    'PipelineRunRequestArgsDict',
    'PipelineRunSourcePropertiesArgs',
    'PipelineRunSourcePropertiesArgsDict',
    'PipelineRunTargetPropertiesArgs',
    'PipelineRunTargetPropertiesArgsDict',
    'PrivateEndpointArgs',
    'PrivateEndpointArgsDict',
    'PrivateLinkServiceConnectionStateArgs',
    'PrivateLinkServiceConnectionStateArgsDict',
    'SyncPropertiesArgs',
    'SyncPropertiesArgsDict',
    'TokenCertificateArgs',
    'TokenCertificateArgsDict',
    'TokenCredentialsPropertiesArgs',
    'TokenCredentialsPropertiesArgsDict',
    'TokenPasswordArgs',
    'TokenPasswordArgsDict',
]

MYPY = False

if not MYPY:
    class ArchivePackageSourcePropertiesArgsDict(TypedDict):
        """
        The properties of the archive package source.
        """
        type: NotRequired[pulumi.Input[Union[str, 'PackageSourceType']]]
        """
        The type of package source for a archive.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        The external repository url.
        """
elif False:
    ArchivePackageSourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchivePackageSourcePropertiesArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'PackageSourceType']]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The properties of the archive package source.
        :param pulumi.Input[Union[str, 'PackageSourceType']] type: The type of package source for a archive.
        :param pulumi.Input[str] url: The external repository url.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'PackageSourceType']]]:
        """
        The type of package source for a archive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'PackageSourceType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The external repository url.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class LoggingPropertiesArgsDict(TypedDict):
        """
        The logging properties of the connected registry.
        """
        audit_log_status: NotRequired[pulumi.Input[Union[str, 'AuditLogStatus']]]
        """
        Indicates whether audit logs are enabled on the connected registry.
        """
        log_level: NotRequired[pulumi.Input[Union[str, 'LogLevel']]]
        """
        The verbosity of logs persisted on the connected registry.
        """
elif False:
    LoggingPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingPropertiesArgs:
    def __init__(__self__, *,
                 audit_log_status: Optional[pulumi.Input[Union[str, 'AuditLogStatus']]] = None,
                 log_level: Optional[pulumi.Input[Union[str, 'LogLevel']]] = None):
        """
        The logging properties of the connected registry.
        :param pulumi.Input[Union[str, 'AuditLogStatus']] audit_log_status: Indicates whether audit logs are enabled on the connected registry.
        :param pulumi.Input[Union[str, 'LogLevel']] log_level: The verbosity of logs persisted on the connected registry.
        """
        if audit_log_status is None:
            audit_log_status = 'Disabled'
        if audit_log_status is not None:
            pulumi.set(__self__, "audit_log_status", audit_log_status)
        if log_level is None:
            log_level = 'Information'
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="auditLogStatus")
    def audit_log_status(self) -> Optional[pulumi.Input[Union[str, 'AuditLogStatus']]]:
        """
        Indicates whether audit logs are enabled on the connected registry.
        """
        return pulumi.get(self, "audit_log_status")

    @audit_log_status.setter
    def audit_log_status(self, value: Optional[pulumi.Input[Union[str, 'AuditLogStatus']]]):
        pulumi.set(self, "audit_log_status", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[Union[str, 'LogLevel']]]:
        """
        The verbosity of logs persisted on the connected registry.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[Union[str, 'LogLevel']]]):
        pulumi.set(self, "log_level", value)


if not MYPY:
    class ParentPropertiesArgsDict(TypedDict):
        """
        The properties of the connected registry parent.
        """
        sync_properties: pulumi.Input['SyncPropertiesArgsDict']
        """
        The sync properties of the connected registry with its parent.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The resource ID of the parent to which the connected registry will be associated.
        """
elif False:
    ParentPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParentPropertiesArgs:
    def __init__(__self__, *,
                 sync_properties: pulumi.Input['SyncPropertiesArgs'],
                 id: Optional[pulumi.Input[str]] = None):
        """
        The properties of the connected registry parent.
        :param pulumi.Input['SyncPropertiesArgs'] sync_properties: The sync properties of the connected registry with its parent.
        :param pulumi.Input[str] id: The resource ID of the parent to which the connected registry will be associated.
        """
        pulumi.set(__self__, "sync_properties", sync_properties)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="syncProperties")
    def sync_properties(self) -> pulumi.Input['SyncPropertiesArgs']:
        """
        The sync properties of the connected registry with its parent.
        """
        return pulumi.get(self, "sync_properties")

    @sync_properties.setter
    def sync_properties(self, value: pulumi.Input['SyncPropertiesArgs']):
        pulumi.set(self, "sync_properties", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the parent to which the connected registry will be associated.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PipelineRunRequestArgsDict(TypedDict):
        """
        The request properties provided for a pipeline run.
        """
        artifacts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of source artifacts to be transferred by the pipeline. 
        Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        Specify an image by tag ('hello-world:latest').
        Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        """
        catalog_digest: NotRequired[pulumi.Input[str]]
        """
        The digest of the tar used to transfer the artifacts.
        """
        pipeline_resource_id: NotRequired[pulumi.Input[str]]
        """
        The resource ID of the pipeline to run.
        """
        source: NotRequired[pulumi.Input['PipelineRunSourcePropertiesArgsDict']]
        """
        The source properties of the pipeline run.
        """
        target: NotRequired[pulumi.Input['PipelineRunTargetPropertiesArgsDict']]
        """
        The target properties of the pipeline run.
        """
elif False:
    PipelineRunRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineRunRequestArgs:
    def __init__(__self__, *,
                 artifacts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 catalog_digest: Optional[pulumi.Input[str]] = None,
                 pipeline_resource_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['PipelineRunSourcePropertiesArgs']] = None,
                 target: Optional[pulumi.Input['PipelineRunTargetPropertiesArgs']] = None):
        """
        The request properties provided for a pipeline run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] artifacts: List of source artifacts to be transferred by the pipeline. 
               Specify an image by repository ('hello-world'). This will use the 'latest' tag.
               Specify an image by tag ('hello-world:latest').
               Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        :param pulumi.Input[str] catalog_digest: The digest of the tar used to transfer the artifacts.
        :param pulumi.Input[str] pipeline_resource_id: The resource ID of the pipeline to run.
        :param pulumi.Input['PipelineRunSourcePropertiesArgs'] source: The source properties of the pipeline run.
        :param pulumi.Input['PipelineRunTargetPropertiesArgs'] target: The target properties of the pipeline run.
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if catalog_digest is not None:
            pulumi.set(__self__, "catalog_digest", catalog_digest)
        if pipeline_resource_id is not None:
            pulumi.set(__self__, "pipeline_resource_id", pipeline_resource_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of source artifacts to be transferred by the pipeline. 
        Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        Specify an image by tag ('hello-world:latest').
        Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        """
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "artifacts", value)

    @property
    @pulumi.getter(name="catalogDigest")
    def catalog_digest(self) -> Optional[pulumi.Input[str]]:
        """
        The digest of the tar used to transfer the artifacts.
        """
        return pulumi.get(self, "catalog_digest")

    @catalog_digest.setter
    def catalog_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_digest", value)

    @property
    @pulumi.getter(name="pipelineResourceId")
    def pipeline_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the pipeline to run.
        """
        return pulumi.get(self, "pipeline_resource_id")

    @pipeline_resource_id.setter
    def pipeline_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_resource_id", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['PipelineRunSourcePropertiesArgs']]:
        """
        The source properties of the pipeline run.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['PipelineRunSourcePropertiesArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['PipelineRunTargetPropertiesArgs']]:
        """
        The target properties of the pipeline run.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['PipelineRunTargetPropertiesArgs']]):
        pulumi.set(self, "target", value)


if not MYPY:
    class PipelineRunSourcePropertiesArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the source.
        """
        type: NotRequired[pulumi.Input[Union[str, 'PipelineRunSourceType']]]
        """
        The type of the source.
        """
elif False:
    PipelineRunSourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineRunSourcePropertiesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'PipelineRunSourceType']]] = None):
        """
        :param pulumi.Input[str] name: The name of the source.
        :param pulumi.Input[Union[str, 'PipelineRunSourceType']] type: The type of the source.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is None:
            type = 'AzureStorageBlob'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'PipelineRunSourceType']]]:
        """
        The type of the source.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'PipelineRunSourceType']]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineRunTargetPropertiesArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the target.
        """
        type: NotRequired[pulumi.Input[Union[str, 'PipelineRunTargetType']]]
        """
        The type of the target.
        """
elif False:
    PipelineRunTargetPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineRunTargetPropertiesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'PipelineRunTargetType']]] = None):
        """
        :param pulumi.Input[str] name: The name of the target.
        :param pulumi.Input[Union[str, 'PipelineRunTargetType']] type: The type of the target.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is None:
            type = 'AzureStorageBlob'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the target.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'PipelineRunTargetType']]]:
        """
        The type of the target.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'PipelineRunTargetType']]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PrivateEndpointArgsDict(TypedDict):
        """
        The Private Endpoint resource.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        This is private endpoint resource created with Microsoft.Network resource provider.
        """
elif False:
    PrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        The Private Endpoint resource.
        :param pulumi.Input[str] id: This is private endpoint resource created with Microsoft.Network resource provider.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        This is private endpoint resource created with Microsoft.Network resource provider.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PrivateLinkServiceConnectionStateArgsDict(TypedDict):
        """
        The state of a private link service connection.
        """
        actions_required: NotRequired[pulumi.Input[Union[str, 'ActionsRequired']]]
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description for connection status. For example if connection is rejected it can indicate reason for rejection.
        """
        status: NotRequired[pulumi.Input[Union[str, 'ConnectionStatus']]]
        """
        The private link service connection status.
        """
elif False:
    PrivateLinkServiceConnectionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[Union[str, 'ActionsRequired']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'ConnectionStatus']]] = None):
        """
        The state of a private link service connection.
        :param pulumi.Input[Union[str, 'ActionsRequired']] actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param pulumi.Input[str] description: The description for connection status. For example if connection is rejected it can indicate reason for rejection.
        :param pulumi.Input[Union[str, 'ConnectionStatus']] status: The private link service connection status.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[Union[str, 'ActionsRequired']]]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[Union[str, 'ActionsRequired']]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for connection status. For example if connection is rejected it can indicate reason for rejection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'ConnectionStatus']]]:
        """
        The private link service connection status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'ConnectionStatus']]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class SyncPropertiesArgsDict(TypedDict):
        """
        The sync properties of the connected registry with its parent.
        """
        message_ttl: pulumi.Input[str]
        """
        The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        token_id: pulumi.Input[str]
        """
        The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
        """
        schedule: NotRequired[pulumi.Input[str]]
        """
        The cron expression indicating the schedule that the connected registry will sync with its parent.
        """
        sync_window: NotRequired[pulumi.Input[str]]
        """
        The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
elif False:
    SyncPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SyncPropertiesArgs:
    def __init__(__self__, *,
                 message_ttl: pulumi.Input[str],
                 token_id: pulumi.Input[str],
                 schedule: Optional[pulumi.Input[str]] = None,
                 sync_window: Optional[pulumi.Input[str]] = None):
        """
        The sync properties of the connected registry with its parent.
        :param pulumi.Input[str] message_ttl: The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        :param pulumi.Input[str] token_id: The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
        :param pulumi.Input[str] schedule: The cron expression indicating the schedule that the connected registry will sync with its parent.
        :param pulumi.Input[str] sync_window: The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        pulumi.set(__self__, "message_ttl", message_ttl)
        pulumi.set(__self__, "token_id", token_id)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if sync_window is not None:
            pulumi.set(__self__, "sync_window", sync_window)

    @property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> pulumi.Input[str]:
        """
        The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        return pulumi.get(self, "message_ttl")

    @message_ttl.setter
    def message_ttl(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_ttl", value)

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
        """
        return pulumi.get(self, "token_id")

    @token_id.setter
    def token_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_id", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        The cron expression indicating the schedule that the connected registry will sync with its parent.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="syncWindow")
    def sync_window(self) -> Optional[pulumi.Input[str]]:
        """
        The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        return pulumi.get(self, "sync_window")

    @sync_window.setter
    def sync_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_window", value)


if not MYPY:
    class TokenCertificateArgsDict(TypedDict):
        """
        The properties of a certificate used for authenticating a token.
        """
        encoded_pem_certificate: NotRequired[pulumi.Input[str]]
        """
        Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
        """
        expiry: NotRequired[pulumi.Input[str]]
        """
        The expiry datetime of the certificate.
        """
        name: NotRequired[pulumi.Input[Union[str, 'TokenCertificateName']]]
        thumbprint: NotRequired[pulumi.Input[str]]
        """
        The thumbprint of the certificate.
        """
elif False:
    TokenCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TokenCertificateArgs:
    def __init__(__self__, *,
                 encoded_pem_certificate: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[Union[str, 'TokenCertificateName']]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None):
        """
        The properties of a certificate used for authenticating a token.
        :param pulumi.Input[str] encoded_pem_certificate: Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
        :param pulumi.Input[str] expiry: The expiry datetime of the certificate.
        :param pulumi.Input[str] thumbprint: The thumbprint of the certificate.
        """
        if encoded_pem_certificate is not None:
            pulumi.set(__self__, "encoded_pem_certificate", encoded_pem_certificate)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter(name="encodedPemCertificate")
    def encoded_pem_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
        """
        return pulumi.get(self, "encoded_pem_certificate")

    @encoded_pem_certificate.setter
    def encoded_pem_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_pem_certificate", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        """
        The expiry datetime of the certificate.
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Union[str, 'TokenCertificateName']]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Union[str, 'TokenCertificateName']]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        """
        The thumbprint of the certificate.
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)


if not MYPY:
    class TokenCredentialsPropertiesArgsDict(TypedDict):
        """
        The properties of the credentials that can be used for authenticating the token.
        """
        certificates: NotRequired[pulumi.Input[Sequence[pulumi.Input['TokenCertificateArgsDict']]]]
        passwords: NotRequired[pulumi.Input[Sequence[pulumi.Input['TokenPasswordArgsDict']]]]
elif False:
    TokenCredentialsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TokenCredentialsPropertiesArgs:
    def __init__(__self__, *,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input['TokenCertificateArgs']]]] = None,
                 passwords: Optional[pulumi.Input[Sequence[pulumi.Input['TokenPasswordArgs']]]] = None):
        """
        The properties of the credentials that can be used for authenticating the token.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if passwords is not None:
            pulumi.set(__self__, "passwords", passwords)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TokenCertificateArgs']]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TokenCertificateArgs']]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter
    def passwords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TokenPasswordArgs']]]]:
        return pulumi.get(self, "passwords")

    @passwords.setter
    def passwords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TokenPasswordArgs']]]]):
        pulumi.set(self, "passwords", value)


if not MYPY:
    class TokenPasswordArgsDict(TypedDict):
        """
        The password that will be used for authenticating the token of a container registry.
        """
        creation_time: NotRequired[pulumi.Input[str]]
        """
        The creation datetime of the password.
        """
        expiry: NotRequired[pulumi.Input[str]]
        """
        The expiry datetime of the password.
        """
        name: NotRequired[pulumi.Input[Union[str, 'TokenPasswordName']]]
        """
        The password name "password1" or "password2"
        """
elif False:
    TokenPasswordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TokenPasswordArgs:
    def __init__(__self__, *,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[Union[str, 'TokenPasswordName']]] = None):
        """
        The password that will be used for authenticating the token of a container registry.
        :param pulumi.Input[str] creation_time: The creation datetime of the password.
        :param pulumi.Input[str] expiry: The expiry datetime of the password.
        :param pulumi.Input[Union[str, 'TokenPasswordName']] name: The password name "password1" or "password2"
        """
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The creation datetime of the password.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        """
        The expiry datetime of the password.
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Union[str, 'TokenPasswordName']]]:
        """
        The password name "password1" or "password2"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Union[str, 'TokenPasswordName']]]):
        pulumi.set(self, "name", value)


