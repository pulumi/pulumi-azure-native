# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ActivationPropertiesResponse',
    'ExportPipelineTargetPropertiesResponse',
    'IdentityPropertiesResponse',
    'ImportPipelineSourcePropertiesResponse',
    'LoggingPropertiesResponse',
    'LoginServerPropertiesResponse',
    'ParentPropertiesResponse',
    'PipelineRunRequestResponse',
    'PipelineRunResponseResponse',
    'PipelineRunSourcePropertiesResponse',
    'PipelineRunTargetPropertiesResponse',
    'PipelineSourceTriggerDescriptorResponse',
    'PipelineSourceTriggerPropertiesResponse',
    'PipelineTriggerDescriptorResponse',
    'PipelineTriggerPropertiesResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'ProgressPropertiesResponse',
    'StatusDetailPropertiesResponse',
    'SyncPropertiesResponse',
    'SystemDataResponse',
    'TlsCertificatePropertiesResponse',
    'TlsPropertiesResponse',
    'TokenCertificateResponse',
    'TokenCredentialsPropertiesResponse',
    'TokenPasswordResponse',
    'UserIdentityPropertiesResponse',
]

@pulumi.output_type
class ActivationPropertiesResponse(dict):
    """
    The activation properties of the connected registry.
    """
    def __init__(__self__, *,
                 status: str):
        """
        The activation properties of the connected registry.
        :param str status: The activation status of the connected registry.
        """
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The activation status of the connected registry.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ExportPipelineTargetPropertiesResponse(dict):
    """
    The properties of the export pipeline target.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyVaultUri":
            suggest = "key_vault_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExportPipelineTargetPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExportPipelineTargetPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExportPipelineTargetPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_vault_uri: str,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        The properties of the export pipeline target.
        :param str key_vault_uri: They key vault secret uri to obtain the target storage SAS token.
        :param str type: The type of target for the export pipeline.
        :param str uri: The target uri of the export pipeline.
               When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
               When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
        """
        pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> str:
        """
        They key vault secret uri to obtain the target storage SAS token.
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of target for the export pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        The target uri of the export pipeline.
        When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
        When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class IdentityPropertiesResponse(dict):
    """
    Managed identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserIdentityPropertiesResponse']] = None):
        """
        Managed identity for the resource.
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        :param Mapping[str, 'UserIdentityPropertiesResponse'] user_assigned_identities: The list of user identities associated with the resource. The user identity 
               dictionary key references will be ARM resource ids in the form: 
               '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
                   providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserIdentityPropertiesResponse']]:
        """
        The list of user identities associated with the resource. The user identity 
        dictionary key references will be ARM resource ids in the form: 
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
            providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ImportPipelineSourcePropertiesResponse(dict):
    """
    The properties of the import pipeline source.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyVaultUri":
            suggest = "key_vault_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImportPipelineSourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImportPipelineSourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImportPipelineSourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_vault_uri: str,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        The properties of the import pipeline source.
        :param str key_vault_uri: They key vault secret uri to obtain the source storage SAS token.
        :param str type: The type of source for the import pipeline.
        :param str uri: The source uri of the import pipeline.
               When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
               When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
        """
        pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if type is None:
            type = 'AzureStorageBlobContainer'
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> str:
        """
        They key vault secret uri to obtain the source storage SAS token.
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of source for the import pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        The source uri of the import pipeline.
        When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
        When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class LoggingPropertiesResponse(dict):
    """
    The logging properties of the connected registry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogStatus":
            suggest = "audit_log_status"
        elif key == "logLevel":
            suggest = "log_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_status: Optional[str] = None,
                 log_level: Optional[str] = None):
        """
        The logging properties of the connected registry.
        :param str audit_log_status: Indicates whether audit logs are enabled on the connected registry.
        :param str log_level: The verbosity of logs persisted on the connected registry.
        """
        if audit_log_status is None:
            audit_log_status = 'Disabled'
        if audit_log_status is not None:
            pulumi.set(__self__, "audit_log_status", audit_log_status)
        if log_level is None:
            log_level = 'Information'
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="auditLogStatus")
    def audit_log_status(self) -> Optional[str]:
        """
        Indicates whether audit logs are enabled on the connected registry.
        """
        return pulumi.get(self, "audit_log_status")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        """
        The verbosity of logs persisted on the connected registry.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class LoginServerPropertiesResponse(dict):
    """
    The login server properties of the connected registry.
    """
    def __init__(__self__, *,
                 host: str,
                 tls: 'outputs.TlsPropertiesResponse'):
        """
        The login server properties of the connected registry.
        :param str host: The host of the connected registry. Can be FQDN or IP.
        :param 'TlsPropertiesResponse' tls: The TLS properties of the connected registry login server.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host of the connected registry. Can be FQDN or IP.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.TlsPropertiesResponse':
        """
        The TLS properties of the connected registry login server.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class ParentPropertiesResponse(dict):
    """
    The properties of the connected registry parent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "syncProperties":
            suggest = "sync_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sync_properties: 'outputs.SyncPropertiesResponse',
                 id: Optional[str] = None):
        """
        The properties of the connected registry parent.
        :param 'SyncPropertiesResponse' sync_properties: The sync properties of the connected registry with its parent.
        :param str id: The resource ID of the parent to which the connected registry will be associated.
        """
        pulumi.set(__self__, "sync_properties", sync_properties)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="syncProperties")
    def sync_properties(self) -> 'outputs.SyncPropertiesResponse':
        """
        The sync properties of the connected registry with its parent.
        """
        return pulumi.get(self, "sync_properties")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The resource ID of the parent to which the connected registry will be associated.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PipelineRunRequestResponse(dict):
    """
    The request properties provided for a pipeline run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogDigest":
            suggest = "catalog_digest"
        elif key == "pipelineResourceId":
            suggest = "pipeline_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunRequestResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunRequestResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunRequestResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifacts: Optional[Sequence[str]] = None,
                 catalog_digest: Optional[str] = None,
                 pipeline_resource_id: Optional[str] = None,
                 source: Optional['outputs.PipelineRunSourcePropertiesResponse'] = None,
                 target: Optional['outputs.PipelineRunTargetPropertiesResponse'] = None):
        """
        The request properties provided for a pipeline run.
        :param Sequence[str] artifacts: List of source artifacts to be transferred by the pipeline. 
               Specify an image by repository ('hello-world'). This will use the 'latest' tag.
               Specify an image by tag ('hello-world:latest').
               Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        :param str catalog_digest: The digest of the tar used to transfer the artifacts.
        :param str pipeline_resource_id: The resource ID of the pipeline to run.
        :param 'PipelineRunSourcePropertiesResponse' source: The source properties of the pipeline run.
        :param 'PipelineRunTargetPropertiesResponse' target: The target properties of the pipeline run.
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if catalog_digest is not None:
            pulumi.set(__self__, "catalog_digest", catalog_digest)
        if pipeline_resource_id is not None:
            pulumi.set(__self__, "pipeline_resource_id", pipeline_resource_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence[str]]:
        """
        List of source artifacts to be transferred by the pipeline. 
        Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        Specify an image by tag ('hello-world:latest').
        Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        """
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="catalogDigest")
    def catalog_digest(self) -> Optional[str]:
        """
        The digest of the tar used to transfer the artifacts.
        """
        return pulumi.get(self, "catalog_digest")

    @property
    @pulumi.getter(name="pipelineResourceId")
    def pipeline_resource_id(self) -> Optional[str]:
        """
        The resource ID of the pipeline to run.
        """
        return pulumi.get(self, "pipeline_resource_id")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.PipelineRunSourcePropertiesResponse']:
        """
        The source properties of the pipeline run.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.PipelineRunTargetPropertiesResponse']:
        """
        The target properties of the pipeline run.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class PipelineRunResponseResponse(dict):
    """
    The response properties returned for a pipeline run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogDigest":
            suggest = "catalog_digest"
        elif key == "finishTime":
            suggest = "finish_time"
        elif key == "importedArtifacts":
            suggest = "imported_artifacts"
        elif key == "pipelineRunErrorMessage":
            suggest = "pipeline_run_error_message"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunResponseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunResponseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunResponseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_digest: Optional[str] = None,
                 finish_time: Optional[str] = None,
                 imported_artifacts: Optional[Sequence[str]] = None,
                 pipeline_run_error_message: Optional[str] = None,
                 progress: Optional['outputs.ProgressPropertiesResponse'] = None,
                 source: Optional['outputs.ImportPipelineSourcePropertiesResponse'] = None,
                 start_time: Optional[str] = None,
                 status: Optional[str] = None,
                 target: Optional['outputs.ExportPipelineTargetPropertiesResponse'] = None,
                 trigger: Optional['outputs.PipelineTriggerDescriptorResponse'] = None):
        """
        The response properties returned for a pipeline run.
        :param str catalog_digest: The digest of the tar used to transfer the artifacts.
        :param str finish_time: The time the pipeline run finished.
        :param Sequence[str] imported_artifacts: The artifacts imported in the pipeline run.
        :param str pipeline_run_error_message: The detailed error message for the pipeline run in the case of failure.
        :param 'ProgressPropertiesResponse' progress: The current progress of the copy operation.
        :param 'ImportPipelineSourcePropertiesResponse' source: The source of the pipeline run.
        :param str start_time: The time the pipeline run started.
        :param str status: The current status of the pipeline run.
        :param 'ExportPipelineTargetPropertiesResponse' target: The target of the pipeline run.
        :param 'PipelineTriggerDescriptorResponse' trigger: The trigger that caused the pipeline run.
        """
        if catalog_digest is not None:
            pulumi.set(__self__, "catalog_digest", catalog_digest)
        if finish_time is not None:
            pulumi.set(__self__, "finish_time", finish_time)
        if imported_artifacts is not None:
            pulumi.set(__self__, "imported_artifacts", imported_artifacts)
        if pipeline_run_error_message is not None:
            pulumi.set(__self__, "pipeline_run_error_message", pipeline_run_error_message)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter(name="catalogDigest")
    def catalog_digest(self) -> Optional[str]:
        """
        The digest of the tar used to transfer the artifacts.
        """
        return pulumi.get(self, "catalog_digest")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> Optional[str]:
        """
        The time the pipeline run finished.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="importedArtifacts")
    def imported_artifacts(self) -> Optional[Sequence[str]]:
        """
        The artifacts imported in the pipeline run.
        """
        return pulumi.get(self, "imported_artifacts")

    @property
    @pulumi.getter(name="pipelineRunErrorMessage")
    def pipeline_run_error_message(self) -> Optional[str]:
        """
        The detailed error message for the pipeline run in the case of failure.
        """
        return pulumi.get(self, "pipeline_run_error_message")

    @property
    @pulumi.getter
    def progress(self) -> Optional['outputs.ProgressPropertiesResponse']:
        """
        The current progress of the copy operation.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ImportPipelineSourcePropertiesResponse']:
        """
        The source of the pipeline run.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The time the pipeline run started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The current status of the pipeline run.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.ExportPipelineTargetPropertiesResponse']:
        """
        The target of the pipeline run.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def trigger(self) -> Optional['outputs.PipelineTriggerDescriptorResponse']:
        """
        The trigger that caused the pipeline run.
        """
        return pulumi.get(self, "trigger")


@pulumi.output_type
class PipelineRunSourcePropertiesResponse(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: The name of the source.
        :param str type: The type of the source.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is None:
            type = 'AzureStorageBlob'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the source.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineRunTargetPropertiesResponse(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: The name of the target.
        :param str type: The type of the target.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is None:
            type = 'AzureStorageBlob'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the target.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the target.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineSourceTriggerDescriptorResponse(dict):
    def __init__(__self__, *,
                 timestamp: Optional[str] = None):
        """
        :param str timestamp: The timestamp when the source update happened.
        """
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        The timestamp when the source update happened.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class PipelineSourceTriggerPropertiesResponse(dict):
    def __init__(__self__, *,
                 status: str):
        """
        :param str status: The current status of the source trigger.
        """
        if status is None:
            status = 'Enabled'
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current status of the source trigger.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PipelineTriggerDescriptorResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTrigger":
            suggest = "source_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineTriggerDescriptorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineTriggerDescriptorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineTriggerDescriptorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_trigger: Optional['outputs.PipelineSourceTriggerDescriptorResponse'] = None):
        """
        :param 'PipelineSourceTriggerDescriptorResponse' source_trigger: The source trigger that caused the pipeline run.
        """
        if source_trigger is not None:
            pulumi.set(__self__, "source_trigger", source_trigger)

    @property
    @pulumi.getter(name="sourceTrigger")
    def source_trigger(self) -> Optional['outputs.PipelineSourceTriggerDescriptorResponse']:
        """
        The source trigger that caused the pipeline run.
        """
        return pulumi.get(self, "source_trigger")


@pulumi.output_type
class PipelineTriggerPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTrigger":
            suggest = "source_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineTriggerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineTriggerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineTriggerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_trigger: Optional['outputs.PipelineSourceTriggerPropertiesResponse'] = None):
        """
        :param 'PipelineSourceTriggerPropertiesResponse' source_trigger: The source trigger properties of the pipeline.
        """
        if source_trigger is not None:
            pulumi.set(__self__, "source_trigger", source_trigger)

    @property
    @pulumi.getter(name="sourceTrigger")
    def source_trigger(self) -> Optional['outputs.PipelineSourceTriggerPropertiesResponse']:
        """
        The source trigger properties of the pipeline.
        """
        return pulumi.get(self, "source_trigger")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The Private Endpoint resource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        The Private Endpoint resource.
        :param str id: This is private endpoint resource created with Microsoft.Network resource provider.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        This is private endpoint resource created with Microsoft.Network resource provider.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    The state of a private link service connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[str] = None,
                 description: Optional[str] = None,
                 status: Optional[str] = None):
        """
        The state of a private link service connection.
        :param str actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param str description: The description for connection status. For example if connection is rejected it can indicate reason for rejection.
        :param str status: The private link service connection status.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[str]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description for connection status. For example if connection is rejected it can indicate reason for rejection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The private link service connection status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ProgressPropertiesResponse(dict):
    def __init__(__self__, *,
                 percentage: Optional[str] = None):
        """
        :param str percentage: The percentage complete of the copy operation.
        """
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[str]:
        """
        The percentage complete of the copy operation.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class StatusDetailPropertiesResponse(dict):
    """
    The status detail properties of the connected registry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "correlationId":
            suggest = "correlation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StatusDetailPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StatusDetailPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StatusDetailPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: str,
                 correlation_id: str,
                 description: str,
                 timestamp: str,
                 type: str):
        """
        The status detail properties of the connected registry.
        :param str code: The code of the status.
        :param str correlation_id: The correlation ID of the status.
        :param str description: The description of the status.
        :param str timestamp: The timestamp of the status.
        :param str type: The component of the connected registry corresponding to the status.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The code of the status.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        The correlation ID of the status.
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the status.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        The timestamp of the status.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The component of the connected registry corresponding to the status.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SyncPropertiesResponse(dict):
    """
    The sync properties of the connected registry with its parent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayEndpoint":
            suggest = "gateway_endpoint"
        elif key == "lastSyncTime":
            suggest = "last_sync_time"
        elif key == "messageTtl":
            suggest = "message_ttl"
        elif key == "tokenId":
            suggest = "token_id"
        elif key == "syncWindow":
            suggest = "sync_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_endpoint: str,
                 last_sync_time: str,
                 message_ttl: str,
                 token_id: str,
                 schedule: Optional[str] = None,
                 sync_window: Optional[str] = None):
        """
        The sync properties of the connected registry with its parent.
        :param str gateway_endpoint: The gateway endpoint used by the connected registry to communicate with its parent.
        :param str last_sync_time: The last time a sync occurred between the connected registry and its parent.
        :param str message_ttl: The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        :param str token_id: The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
        :param str schedule: The cron expression indicating the schedule that the connected registry will sync with its parent.
        :param str sync_window: The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        pulumi.set(__self__, "gateway_endpoint", gateway_endpoint)
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        pulumi.set(__self__, "message_ttl", message_ttl)
        pulumi.set(__self__, "token_id", token_id)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if sync_window is not None:
            pulumi.set(__self__, "sync_window", sync_window)

    @property
    @pulumi.getter(name="gatewayEndpoint")
    def gateway_endpoint(self) -> str:
        """
        The gateway endpoint used by the connected registry to communicate with its parent.
        """
        return pulumi.get(self, "gateway_endpoint")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> str:
        """
        The last time a sync occurred between the connected registry and its parent.
        """
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> str:
        """
        The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        return pulumi.get(self, "message_ttl")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> str:
        """
        The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
        """
        return pulumi.get(self, "token_id")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        """
        The cron expression indicating the schedule that the connected registry will sync with its parent.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="syncWindow")
    def sync_window(self) -> Optional[str]:
        """
        The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        """
        return pulumi.get(self, "sync_window")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource modification (UTC).
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource modification (UTC).
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TlsCertificatePropertiesResponse(dict):
    """
    The TLS certificate properties of the connected registry login server.
    """
    def __init__(__self__, *,
                 location: str,
                 type: str):
        """
        The TLS certificate properties of the connected registry login server.
        :param str location: Indicates the location of the certificates.
        :param str type: The type of certificate location.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Indicates the location of the certificates.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of certificate location.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TlsPropertiesResponse(dict):
    """
    The TLS properties of the connected registry login server.
    """
    def __init__(__self__, *,
                 certificate: 'outputs.TlsCertificatePropertiesResponse',
                 status: str):
        """
        The TLS properties of the connected registry login server.
        :param 'TlsCertificatePropertiesResponse' certificate: The certificate used to configure HTTPS for the login server.
        :param str status: Indicates whether HTTPS is enabled for the login server.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def certificate(self) -> 'outputs.TlsCertificatePropertiesResponse':
        """
        The certificate used to configure HTTPS for the login server.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Indicates whether HTTPS is enabled for the login server.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class TokenCertificateResponse(dict):
    """
    The properties of a certificate used for authenticating a token.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encodedPemCertificate":
            suggest = "encoded_pem_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TokenCertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TokenCertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TokenCertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encoded_pem_certificate: Optional[str] = None,
                 expiry: Optional[str] = None,
                 name: Optional[str] = None,
                 thumbprint: Optional[str] = None):
        """
        The properties of a certificate used for authenticating a token.
        :param str encoded_pem_certificate: Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
        :param str expiry: The expiry datetime of the certificate.
        :param str thumbprint: The thumbprint of the certificate.
        """
        if encoded_pem_certificate is not None:
            pulumi.set(__self__, "encoded_pem_certificate", encoded_pem_certificate)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter(name="encodedPemCertificate")
    def encoded_pem_certificate(self) -> Optional[str]:
        """
        Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
        """
        return pulumi.get(self, "encoded_pem_certificate")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        """
        The expiry datetime of the certificate.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the certificate.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class TokenCredentialsPropertiesResponse(dict):
    """
    The properties of the credentials that can be used for authenticating the token.
    """
    def __init__(__self__, *,
                 certificates: Optional[Sequence['outputs.TokenCertificateResponse']] = None,
                 passwords: Optional[Sequence['outputs.TokenPasswordResponse']] = None):
        """
        The properties of the credentials that can be used for authenticating the token.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if passwords is not None:
            pulumi.set(__self__, "passwords", passwords)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[Sequence['outputs.TokenCertificateResponse']]:
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter
    def passwords(self) -> Optional[Sequence['outputs.TokenPasswordResponse']]:
        return pulumi.get(self, "passwords")


@pulumi.output_type
class TokenPasswordResponse(dict):
    """
    The password that will be used for authenticating the token of a container registry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TokenPasswordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TokenPasswordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TokenPasswordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 creation_time: Optional[str] = None,
                 expiry: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The password that will be used for authenticating the token of a container registry.
        :param str value: The password value.
        :param str creation_time: The creation datetime of the password.
        :param str expiry: The expiry datetime of the password.
        :param str name: The password name "password1" or "password2"
        """
        pulumi.set(__self__, "value", value)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The password value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        """
        The creation datetime of the password.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        """
        The expiry datetime of the password.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The password name "password1" or "password2"
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserIdentityPropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 principal_id: Optional[str] = None):
        """
        :param str client_id: The client id of user assigned identity.
        :param str principal_id: The principal id of user assigned identity.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        The client id of user assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The principal id of user assigned identity.
        """
        return pulumi.get(self, "principal_id")


