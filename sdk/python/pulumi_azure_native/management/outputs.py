# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DescendantParentGroupInfoResponse',
    'EntityInfoResponse',
    'EntityParentGroupInfoResponse',
    'ManagementGroupChildInfoResponse',
    'ManagementGroupDetailsResponse',
    'ManagementGroupPathElementResponse',
    'ParentGroupInfoResponse',
    'ParentServiceGroupPropertiesResponse',
    'ServiceGroupPropertiesResponse',
    'ServiceGroupResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class DescendantParentGroupInfoResponse(dict):
    """
    The ID of the parent management group.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        The ID of the parent management group.
        :param _builtins.str id: The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EntityInfoResponse(dict):
    """
    The entity.
    """
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 display_name: Optional[_builtins.str] = None,
                 inherited_permissions: Optional[_builtins.str] = None,
                 number_of_child_groups: Optional[_builtins.int] = None,
                 number_of_children: Optional[_builtins.int] = None,
                 number_of_descendants: Optional[_builtins.int] = None,
                 parent: Optional['outputs.EntityParentGroupInfoResponse'] = None,
                 parent_display_name_chain: Optional[Sequence[_builtins.str]] = None,
                 parent_name_chain: Optional[Sequence[_builtins.str]] = None,
                 permissions: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        """
        The entity.
        :param _builtins.str id: The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        :param _builtins.str name: The name of the entity. For example, 00000000-0000-0000-0000-000000000000
        :param _builtins.str type: The type of the resource. For example, Microsoft.Management/managementGroups
        :param _builtins.str display_name: The friendly name of the management group.
        :param _builtins.str inherited_permissions: The users specific permissions to this item.
        :param _builtins.int number_of_child_groups: Number of children is the number of Groups that are exactly one level underneath the current Group.
        :param _builtins.int number_of_children: Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
        :param 'EntityParentGroupInfoResponse' parent: (Optional) The ID of the parent management group.
        :param Sequence[_builtins.str] parent_display_name_chain: The parent display name chain from the root group to the immediate parent
        :param Sequence[_builtins.str] parent_name_chain: The parent name chain from the root group to the immediate parent
        :param _builtins.str permissions: The users specific permissions to this item.
        :param _builtins.str tenant_id: The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if inherited_permissions is not None:
            pulumi.set(__self__, "inherited_permissions", inherited_permissions)
        if number_of_child_groups is not None:
            pulumi.set(__self__, "number_of_child_groups", number_of_child_groups)
        if number_of_children is not None:
            pulumi.set(__self__, "number_of_children", number_of_children)
        if number_of_descendants is not None:
            pulumi.set(__self__, "number_of_descendants", number_of_descendants)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if parent_display_name_chain is not None:
            pulumi.set(__self__, "parent_display_name_chain", parent_display_name_chain)
        if parent_name_chain is not None:
            pulumi.set(__self__, "parent_name_chain", parent_name_chain)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the entity. For example, 00000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource. For example, Microsoft.Management/managementGroups
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The friendly name of the management group.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="inheritedPermissions")
    def inherited_permissions(self) -> Optional[_builtins.str]:
        """
        The users specific permissions to this item.
        """
        return pulumi.get(self, "inherited_permissions")

    @_builtins.property
    @pulumi.getter(name="numberOfChildGroups")
    def number_of_child_groups(self) -> Optional[_builtins.int]:
        """
        Number of children is the number of Groups that are exactly one level underneath the current Group.
        """
        return pulumi.get(self, "number_of_child_groups")

    @_builtins.property
    @pulumi.getter(name="numberOfChildren")
    def number_of_children(self) -> Optional[_builtins.int]:
        """
        Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
        """
        return pulumi.get(self, "number_of_children")

    @_builtins.property
    @pulumi.getter(name="numberOfDescendants")
    def number_of_descendants(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "number_of_descendants")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> Optional['outputs.EntityParentGroupInfoResponse']:
        """
        (Optional) The ID of the parent management group.
        """
        return pulumi.get(self, "parent")

    @_builtins.property
    @pulumi.getter(name="parentDisplayNameChain")
    def parent_display_name_chain(self) -> Optional[Sequence[_builtins.str]]:
        """
        The parent display name chain from the root group to the immediate parent
        """
        return pulumi.get(self, "parent_display_name_chain")

    @_builtins.property
    @pulumi.getter(name="parentNameChain")
    def parent_name_chain(self) -> Optional[Sequence[_builtins.str]]:
        """
        The parent name chain from the root group to the immediate parent
        """
        return pulumi.get(self, "parent_name_chain")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[_builtins.str]:
        """
        The users specific permissions to this item.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        """
        The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class EntityParentGroupInfoResponse(dict):
    """
    (Optional) The ID of the parent management group.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        (Optional) The ID of the parent management group.
        :param _builtins.str id: The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ManagementGroupChildInfoResponse(dict):
    """
    The child information of a management group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementGroupChildInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementGroupChildInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementGroupChildInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 children: Optional[Sequence['outputs.ManagementGroupChildInfoResponse']] = None,
                 display_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        The child information of a management group.
        :param Sequence['ManagementGroupChildInfoResponse'] children: The list of children.
        :param _builtins.str display_name: The friendly name of the child resource.
        :param _builtins.str id: The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        :param _builtins.str name: The name of the child entity.
        :param _builtins.str type: The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
        """
        if children is not None:
            pulumi.set(__self__, "children", children)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def children(self) -> Optional[Sequence['outputs.ManagementGroupChildInfoResponse']]:
        """
        The list of children.
        """
        return pulumi.get(self, "children")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The friendly name of the child resource.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the child entity.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ManagementGroupDetailsResponse(dict):
    """
    The details of a management group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managementGroupAncestors":
            suggest = "management_group_ancestors"
        elif key == "managementGroupAncestorsChain":
            suggest = "management_group_ancestors_chain"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedTime":
            suggest = "updated_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementGroupDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementGroupDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementGroupDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 management_group_ancestors: Optional[Sequence[_builtins.str]] = None,
                 management_group_ancestors_chain: Optional[Sequence['outputs.ManagementGroupPathElementResponse']] = None,
                 parent: Optional['outputs.ParentGroupInfoResponse'] = None,
                 path: Optional[Sequence['outputs.ManagementGroupPathElementResponse']] = None,
                 updated_by: Optional[_builtins.str] = None,
                 updated_time: Optional[_builtins.str] = None,
                 version: Optional[_builtins.float] = None):
        """
        The details of a management group.
        :param Sequence[_builtins.str] management_group_ancestors: The ancestors of the management group.
        :param Sequence['ManagementGroupPathElementResponse'] management_group_ancestors_chain: The ancestors of the management group displayed in reversed order, from immediate parent to the root.
        :param 'ParentGroupInfoResponse' parent: (Optional) The ID of the parent management group.
        :param Sequence['ManagementGroupPathElementResponse'] path: The path from the root to the current group.
        :param _builtins.str updated_by: The identity of the principal or process that updated the object.
        :param _builtins.str updated_time: The date and time when this object was last updated.
        :param _builtins.float version: The version number of the object.
        """
        if management_group_ancestors is not None:
            pulumi.set(__self__, "management_group_ancestors", management_group_ancestors)
        if management_group_ancestors_chain is not None:
            pulumi.set(__self__, "management_group_ancestors_chain", management_group_ancestors_chain)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="managementGroupAncestors")
    def management_group_ancestors(self) -> Optional[Sequence[_builtins.str]]:
        """
        The ancestors of the management group.
        """
        return pulumi.get(self, "management_group_ancestors")

    @_builtins.property
    @pulumi.getter(name="managementGroupAncestorsChain")
    def management_group_ancestors_chain(self) -> Optional[Sequence['outputs.ManagementGroupPathElementResponse']]:
        """
        The ancestors of the management group displayed in reversed order, from immediate parent to the root.
        """
        return pulumi.get(self, "management_group_ancestors_chain")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> Optional['outputs.ParentGroupInfoResponse']:
        """
        (Optional) The ID of the parent management group.
        """
        return pulumi.get(self, "parent")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[Sequence['outputs.ManagementGroupPathElementResponse']]:
        """
        The path from the root to the current group.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[_builtins.str]:
        """
        The identity of the principal or process that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[_builtins.str]:
        """
        The date and time when this object was last updated.
        """
        return pulumi.get(self, "updated_time")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.float]:
        """
        The version number of the object.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ManagementGroupPathElementResponse(dict):
    """
    A path element of a management group ancestors.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementGroupPathElementResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementGroupPathElementResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementGroupPathElementResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        A path element of a management group ancestors.
        :param _builtins.str display_name: The friendly name of the group.
        :param _builtins.str name: The name of the group.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The friendly name of the group.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ParentGroupInfoResponse(dict):
    """
    (Optional) The ID of the parent management group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParentGroupInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParentGroupInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParentGroupInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        (Optional) The ID of the parent management group.
        :param _builtins.str display_name: The friendly name of the parent management group.
        :param _builtins.str id: The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        :param _builtins.str name: The name of the parent management group
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The friendly name of the parent management group.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the parent management group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ParentServiceGroupPropertiesResponse(dict):
    """
    The details of the parent serviceGroup.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParentServiceGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParentServiceGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParentServiceGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: Optional[_builtins.str] = None):
        """
        The details of the parent serviceGroup.
        :param _builtins.str resource_id: The fully qualified ID of the parent serviceGroup.  For example, '/providers/Microsoft.Management/serviceGroups/TestServiceGroup'
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The fully qualified ID of the parent serviceGroup.  For example, '/providers/Microsoft.Management/serviceGroups/TestServiceGroup'
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class ServiceGroupPropertiesResponse(dict):
    """
    ServiceGroup creation request body parameters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 display_name: Optional[_builtins.str] = None,
                 parent: Optional['outputs.ParentServiceGroupPropertiesResponse'] = None):
        """
        ServiceGroup creation request body parameters.
        :param _builtins.str provisioning_state: The provisioning state of the serviceGroup. For example, Running
        :param _builtins.str display_name: The display name of the serviceGroup. For example, ServiceGroupTest1
        :param 'ParentServiceGroupPropertiesResponse' parent: The details of the parent serviceGroup.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the serviceGroup. For example, Running
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The display name of the serviceGroup. For example, ServiceGroupTest1
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> Optional['outputs.ParentServiceGroupPropertiesResponse']:
        """
        The details of the parent serviceGroup.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class ServiceGroupResponse(dict):
    """
    The serviceGroup details.
    """
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: _builtins.str,
                 kind: Optional[_builtins.str] = None,
                 properties: Optional['outputs.ServiceGroupPropertiesResponse'] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        The serviceGroup details.
        :param _builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param _builtins.str name: The name of the resource
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param _builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param _builtins.str kind: The kind of the serviceGroup.
        :param 'ServiceGroupPropertiesResponse' properties: ServiceGroup creation request body parameters.
        :param Mapping[str, _builtins.str] tags: The serviceGroup tags.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        """
        The kind of the serviceGroup.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ServiceGroupPropertiesResponse']:
        """
        ServiceGroup creation request body parameters.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The serviceGroup tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


