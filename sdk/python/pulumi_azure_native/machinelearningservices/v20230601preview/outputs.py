# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse',
    'ApiKeyAuthWorkspaceConnectionPropertiesResponse',
    'CustomKeysResponse',
    'CustomKeysWorkspaceConnectionPropertiesResponse',
    'ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse',
    'ManagedServiceIdentityResponse',
    'NoneAuthTypeWorkspaceConnectionPropertiesResponse',
    'PATAuthTypeWorkspaceConnectionPropertiesResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'SASAuthTypeWorkspaceConnectionPropertiesResponse',
    'ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse',
    'SkuResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse',
    'WorkspaceConnectionAccessKeyResponse',
    'WorkspaceConnectionApiKeyResponse',
    'WorkspaceConnectionManagedIdentityResponse',
    'WorkspaceConnectionPersonalAccessTokenResponse',
    'WorkspaceConnectionServicePrincipalResponse',
    'WorkspaceConnectionSharedAccessSignatureResponse',
    'WorkspaceConnectionUsernamePasswordResponse',
    'WorkspacePrivateEndpointResourceResponse',
]

@pulumi.output_type
class AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionAccessKeyResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'AccessKey'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'AccessKey')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'AccessKey'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionAccessKeyResponse']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class ApiKeyAuthWorkspaceConnectionPropertiesResponse(dict):
    """
    This connection type covers the generic ApiKey auth connection categories, for examples:
    AzureOpenAI:
        Category:= AzureOpenAI
        AuthType:= ApiKey (as type discriminator)
        Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
        Target:= {ApiBase}
                
    CognitiveService:
        Category:= CognitiveService
        AuthType:= ApiKey (as type discriminator)
        Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
        Target:= ServiceRegion={serviceRegion}
                
    CognitiveSearch:
        Category:= CognitiveSearch
        AuthType:= ApiKey (as type discriminator)
        Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
        Target:= {Endpoint}
                
    Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
    """
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionApiKeyResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        This connection type covers the generic ApiKey auth connection categories, for examples:
        AzureOpenAI:
            Category:= AzureOpenAI
            AuthType:= ApiKey (as type discriminator)
            Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
            Target:= {ApiBase}
                    
        CognitiveService:
            Category:= CognitiveService
            AuthType:= ApiKey (as type discriminator)
            Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
            Target:= ServiceRegion={serviceRegion}
                    
        CognitiveSearch:
            Category:= CognitiveSearch
            AuthType:= ApiKey (as type discriminator)
            Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
            Target:= {Endpoint}
                    
        Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
        :param str auth_type: Authentication type of the connection target
               Expected value is 'ApiKey'.
        :param str category: Category of the connection
        :param 'WorkspaceConnectionApiKeyResponse' credentials: Api key object for workspace connection credential.
        """
        pulumi.set(__self__, "auth_type", 'ApiKey')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'ApiKey'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionApiKeyResponse']:
        """
        Api key object for workspace connection credential.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class CustomKeysResponse(dict):
    """
    Custom Keys credential object
    """
    def __init__(__self__, *,
                 keys: Optional[Mapping[str, str]] = None):
        """
        Custom Keys credential object
        """
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def keys(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class CustomKeysWorkspaceConnectionPropertiesResponse(dict):
    """
    Category:= CustomKeys
    AuthType:= CustomKeys (as type discriminator)
    Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
    Target:= {any value}
    Use Metadata property bag for ApiVersion and other metadata fields
    """
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.CustomKeysResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        Category:= CustomKeys
        AuthType:= CustomKeys (as type discriminator)
        Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
        Target:= {any value}
        Use Metadata property bag for ApiVersion and other metadata fields
        :param str auth_type: Authentication type of the connection target
               Expected value is 'CustomKeys'.
        :param str category: Category of the connection
        :param 'CustomKeysResponse' credentials: Custom Keys credential object
        """
        pulumi.set(__self__, "auth_type", 'CustomKeys')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'CustomKeys'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.CustomKeysResponse']:
        """
        Custom Keys credential object
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionManagedIdentityResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'ManagedIdentity'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'ManagedIdentity')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'ManagedIdentity'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionManagedIdentityResponse']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class NoneAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'None'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'None')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'None'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class PATAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionPersonalAccessTokenResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'PAT'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'PAT')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'PAT'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionPersonalAccessTokenResponse']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    A collection of information about the state of the connection between service consumer and provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[str] = None,
                 description: Optional[str] = None,
                 status: Optional[str] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param str actions_required: Some RP chose "None". Other RPs use this for region expansion.
        :param str description: User-defined message that, per NRP doc, may be used for approval-related message.
        :param str status: Connection status of the service consumer with the service provider
               Possible state transitions
               Pending -> Approved (Service provider approves the connection request)
               Pending -> Rejected (Service provider rejects the connection request)
               Pending -> Disconnected (Service provider deletes the connection)
               Approved -> Rejected (Service provider rejects the approved connection)
               Approved -> Disconnected (Service provider deletes the connection)
               Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
               Rejected -> Disconnected (Service provider deletes the connection)
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[str]:
        """
        Some RP chose "None". Other RPs use this for region expansion.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-defined message that, per NRP doc, may be used for approval-related message.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Connection status of the service consumer with the service provider
        Possible state transitions
        Pending -> Approved (Service provider approves the connection request)
        Pending -> Rejected (Service provider rejects the connection request)
        Pending -> Disconnected (Service provider deletes the connection)
        Approved -> Rejected (Service provider rejects the approved connection)
        Approved -> Disconnected (Service provider deletes the connection)
        Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
        Rejected -> Disconnected (Service provider deletes the connection)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SASAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionSharedAccessSignatureResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'SAS'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'SAS')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'SAS'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionSharedAccessSignatureResponse']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionServicePrincipalResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'ServicePrincipal'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'ServicePrincipal')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'ServicePrincipal'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionServicePrincipalResponse']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 category: Optional[str] = None,
                 credentials: Optional['outputs.WorkspaceConnectionUsernamePasswordResponse'] = None,
                 expiry_time: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 target: Optional[str] = None):
        """
        :param str auth_type: Authentication type of the connection target
               Expected value is 'UsernamePassword'.
        :param str category: Category of the connection
        """
        pulumi.set(__self__, "auth_type", 'UsernamePassword')
        if category is not None:
            pulumi.set(__self__, "category", category)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication type of the connection target
        Expected value is 'UsernamePassword'.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Category of the connection
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.WorkspaceConnectionUsernamePasswordResponse']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkspaceConnectionAccessKeyResponse(dict):
    def __init__(__self__, *,
                 access_key_id: Optional[str] = None,
                 secret_access_key: Optional[str] = None):
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class WorkspaceConnectionApiKeyResponse(dict):
    """
    Api key object for workspace connection credential.
    """
    def __init__(__self__, *,
                 key: Optional[str] = None):
        """
        Api key object for workspace connection credential.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class WorkspaceConnectionManagedIdentityResponse(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 resource_id: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class WorkspaceConnectionPersonalAccessTokenResponse(dict):
    def __init__(__self__, *,
                 pat: Optional[str] = None):
        if pat is not None:
            pulumi.set(__self__, "pat", pat)

    @property
    @pulumi.getter
    def pat(self) -> Optional[str]:
        return pulumi.get(self, "pat")


@pulumi.output_type
class WorkspaceConnectionServicePrincipalResponse(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class WorkspaceConnectionSharedAccessSignatureResponse(dict):
    def __init__(__self__, *,
                 sas: Optional[str] = None):
        if sas is not None:
            pulumi.set(__self__, "sas", sas)

    @property
    @pulumi.getter
    def sas(self) -> Optional[str]:
        return pulumi.get(self, "sas")


@pulumi.output_type
class WorkspaceConnectionUsernamePasswordResponse(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class WorkspacePrivateEndpointResourceResponse(dict):
    """
    The Private Endpoint resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetArmId":
            suggest = "subnet_arm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacePrivateEndpointResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacePrivateEndpointResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacePrivateEndpointResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 subnet_arm_id: str):
        """
        The Private Endpoint resource.
        :param str id: e.g. /subscriptions/{networkSubscriptionId}/resourceGroups/{rgName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
        :param str subnet_arm_id: The subnetId that the private endpoint is connected to.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subnet_arm_id", subnet_arm_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        e.g. /subscriptions/{networkSubscriptionId}/resourceGroups/{rgName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subnetArmId")
    def subnet_arm_id(self) -> str:
        """
        The subnetId that the private endpoint is connected to.
        """
        return pulumi.get(self, "subnet_arm_id")


