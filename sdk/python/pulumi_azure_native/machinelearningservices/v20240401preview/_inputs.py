# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'CognitiveServicesSkuArgs',
    'CognitiveServicesSkuArgsDict',
    'EndpointDeploymentModelArgs',
    'EndpointDeploymentModelArgsDict',
    'EndpointDeploymentResourcePropertiesArgs',
    'EndpointDeploymentResourcePropertiesArgsDict',
    'RaiBlocklistConfigArgs',
    'RaiBlocklistConfigArgsDict',
    'RaiPolicyContentFilterArgs',
    'RaiPolicyContentFilterArgsDict',
    'RaiPolicyPropertiesArgs',
    'RaiPolicyPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class CognitiveServicesSkuArgsDict(TypedDict):
        capacity: NotRequired[pulumi.Input[int]]
        family: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        tier: NotRequired[pulumi.Input[str]]
elif False:
    CognitiveServicesSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CognitiveServicesSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class EndpointDeploymentModelArgsDict(TypedDict):
        format: NotRequired[pulumi.Input[str]]
        """
        Model format
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Model name.
        """
        source: NotRequired[pulumi.Input[str]]
        """
        Optional. Deployment model source ARM resource ID.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Model version.
        """
elif False:
    EndpointDeploymentModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointDeploymentModelArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: Model format
        :param pulumi.Input[str] name: Model name.
        :param pulumi.Input[str] source: Optional. Deployment model source ARM resource ID.
        :param pulumi.Input[str] version: Model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Model format
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Model name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Model version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class EndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    EndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


if not MYPY:
    class RaiBlocklistConfigArgsDict(TypedDict):
        """
        Azure OpenAI blocklist config.
        """
        blocking: NotRequired[pulumi.Input[bool]]
        """
        If blocking would occur.
        """
        blocklist_name: NotRequired[pulumi.Input[str]]
        """
        Name of ContentFilter.
        """
elif False:
    RaiBlocklistConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RaiBlocklistConfigArgs:
    def __init__(__self__, *,
                 blocking: Optional[pulumi.Input[bool]] = None,
                 blocklist_name: Optional[pulumi.Input[str]] = None):
        """
        Azure OpenAI blocklist config.
        :param pulumi.Input[bool] blocking: If blocking would occur.
        :param pulumi.Input[str] blocklist_name: Name of ContentFilter.
        """
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if blocklist_name is not None:
            pulumi.set(__self__, "blocklist_name", blocklist_name)

    @property
    @pulumi.getter
    def blocking(self) -> Optional[pulumi.Input[bool]]:
        """
        If blocking would occur.
        """
        return pulumi.get(self, "blocking")

    @blocking.setter
    def blocking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocking", value)

    @property
    @pulumi.getter(name="blocklistName")
    def blocklist_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of ContentFilter.
        """
        return pulumi.get(self, "blocklist_name")

    @blocklist_name.setter
    def blocklist_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocklist_name", value)


if not MYPY:
    class RaiPolicyContentFilterArgsDict(TypedDict):
        """
        Azure OpenAI Content Filter.
        """
        allowed_content_level: NotRequired[pulumi.Input[Union[str, 'AllowedContentLevel']]]
        """
        Level at which content is filtered.
        """
        blocking: NotRequired[pulumi.Input[bool]]
        """
        If blocking would occur.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        If the ContentFilter is enabled.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of ContentFilter.
        """
        source: NotRequired[pulumi.Input[Union[str, 'RaiPolicyContentSource']]]
        """
        Content source to apply the Content Filters.
        """
elif False:
    RaiPolicyContentFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RaiPolicyContentFilterArgs:
    def __init__(__self__, *,
                 allowed_content_level: Optional[pulumi.Input[Union[str, 'AllowedContentLevel']]] = None,
                 blocking: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[Union[str, 'RaiPolicyContentSource']]] = None):
        """
        Azure OpenAI Content Filter.
        :param pulumi.Input[Union[str, 'AllowedContentLevel']] allowed_content_level: Level at which content is filtered.
        :param pulumi.Input[bool] blocking: If blocking would occur.
        :param pulumi.Input[bool] enabled: If the ContentFilter is enabled.
        :param pulumi.Input[str] name: Name of ContentFilter.
        :param pulumi.Input[Union[str, 'RaiPolicyContentSource']] source: Content source to apply the Content Filters.
        """
        if allowed_content_level is not None:
            pulumi.set(__self__, "allowed_content_level", allowed_content_level)
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="allowedContentLevel")
    def allowed_content_level(self) -> Optional[pulumi.Input[Union[str, 'AllowedContentLevel']]]:
        """
        Level at which content is filtered.
        """
        return pulumi.get(self, "allowed_content_level")

    @allowed_content_level.setter
    def allowed_content_level(self, value: Optional[pulumi.Input[Union[str, 'AllowedContentLevel']]]):
        pulumi.set(self, "allowed_content_level", value)

    @property
    @pulumi.getter
    def blocking(self) -> Optional[pulumi.Input[bool]]:
        """
        If blocking would occur.
        """
        return pulumi.get(self, "blocking")

    @blocking.setter
    def blocking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocking", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If the ContentFilter is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of ContentFilter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[Union[str, 'RaiPolicyContentSource']]]:
        """
        Content source to apply the Content Filters.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[Union[str, 'RaiPolicyContentSource']]]):
        pulumi.set(self, "source", value)


if not MYPY:
    class RaiPolicyPropertiesArgsDict(TypedDict):
        """
        Azure OpenAI Content Filters properties.
        """
        base_policy_name: NotRequired[pulumi.Input[str]]
        """
        Name of the base Content Filters.
        """
        completion_blocklists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgsDict']]]]
        content_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['RaiPolicyContentFilterArgsDict']]]]
        mode: NotRequired[pulumi.Input[Union[str, 'RaiPolicyMode']]]
        """
        Content Filters mode.
        """
        prompt_blocklists: NotRequired[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgsDict']]]]
        type: NotRequired[pulumi.Input[Union[str, 'RaiPolicyType']]]
        """
        Content Filters policy type.
        """
elif False:
    RaiPolicyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RaiPolicyPropertiesArgs:
    def __init__(__self__, *,
                 base_policy_name: Optional[pulumi.Input[str]] = None,
                 completion_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgs']]]] = None,
                 content_filters: Optional[pulumi.Input[Sequence[pulumi.Input['RaiPolicyContentFilterArgs']]]] = None,
                 mode: Optional[pulumi.Input[Union[str, 'RaiPolicyMode']]] = None,
                 prompt_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgs']]]] = None,
                 type: Optional[pulumi.Input[Union[str, 'RaiPolicyType']]] = None):
        """
        Azure OpenAI Content Filters properties.
        :param pulumi.Input[str] base_policy_name: Name of the base Content Filters.
        :param pulumi.Input[Union[str, 'RaiPolicyMode']] mode: Content Filters mode.
        :param pulumi.Input[Union[str, 'RaiPolicyType']] type: Content Filters policy type.
        """
        if base_policy_name is not None:
            pulumi.set(__self__, "base_policy_name", base_policy_name)
        if completion_blocklists is not None:
            pulumi.set(__self__, "completion_blocklists", completion_blocklists)
        if content_filters is not None:
            pulumi.set(__self__, "content_filters", content_filters)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if prompt_blocklists is not None:
            pulumi.set(__self__, "prompt_blocklists", prompt_blocklists)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="basePolicyName")
    def base_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the base Content Filters.
        """
        return pulumi.get(self, "base_policy_name")

    @base_policy_name.setter
    def base_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_policy_name", value)

    @property
    @pulumi.getter(name="completionBlocklists")
    def completion_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgs']]]]:
        return pulumi.get(self, "completion_blocklists")

    @completion_blocklists.setter
    def completion_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgs']]]]):
        pulumi.set(self, "completion_blocklists", value)

    @property
    @pulumi.getter(name="contentFilters")
    def content_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RaiPolicyContentFilterArgs']]]]:
        return pulumi.get(self, "content_filters")

    @content_filters.setter
    def content_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RaiPolicyContentFilterArgs']]]]):
        pulumi.set(self, "content_filters", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[Union[str, 'RaiPolicyMode']]]:
        """
        Content Filters mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[Union[str, 'RaiPolicyMode']]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="promptBlocklists")
    def prompt_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgs']]]]:
        return pulumi.get(self, "prompt_blocklists")

    @prompt_blocklists.setter
    def prompt_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RaiBlocklistConfigArgs']]]]):
        pulumi.set(self, "prompt_blocklists", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'RaiPolicyType']]]:
        """
        Content Filters policy type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'RaiPolicyType']]]):
        pulumi.set(self, "type", value)


