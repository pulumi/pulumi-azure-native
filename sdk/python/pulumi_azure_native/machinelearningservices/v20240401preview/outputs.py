# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccountModelResponse',
    'CallRateLimitResponse',
    'CapacityConfigResponse',
    'CognitiveServicesSkuResponse',
    'DeploymentModelResponse',
    'EndpointDeploymentModelResponse',
    'EndpointDeploymentResourcePropertiesResponse',
    'ModelDeprecationInfoResponse',
    'ModelSkuResponse',
    'RaiBlocklistConfigResponse',
    'RaiPolicyContentFilterResponse',
    'RaiPolicyPropertiesResponse',
    'RequestMatchPatternResponse',
    'SystemDataResponse',
    'ThrottlingRuleResponse',
]

@pulumi.output_type
class AccountModelResponse(dict):
    """
    Cognitive Services account Model.
    """
    def __init__(__self__, *,
                 call_rate_limit: 'outputs.CallRateLimitResponse',
                 system_data: 'outputs.SystemDataResponse',
                 base_model: Optional['outputs.DeploymentModelResponse'] = None,
                 capabilities: Optional[Mapping[str, str]] = None,
                 deprecation: Optional['outputs.ModelDeprecationInfoResponse'] = None,
                 finetune_capabilities: Optional[Mapping[str, str]] = None,
                 format: Optional[str] = None,
                 is_default_version: Optional[bool] = None,
                 lifecycle_status: Optional[str] = None,
                 max_capacity: Optional[int] = None,
                 name: Optional[str] = None,
                 skus: Optional[Sequence['outputs.ModelSkuResponse']] = None,
                 source: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Cognitive Services account Model.
        :param 'CallRateLimitResponse' call_rate_limit: The call rate limit Cognitive Services account.
        :param 'SystemDataResponse' system_data: Metadata pertaining to creation and last modification of the resource.
        :param 'DeploymentModelResponse' base_model: Base Model Identifier.
        :param Mapping[str, str] capabilities: The capabilities.
        :param 'ModelDeprecationInfoResponse' deprecation: Cognitive Services account ModelDeprecationInfo.
        :param Mapping[str, str] finetune_capabilities: The capabilities for finetune models.
        :param str format: Deployment model format.
        :param bool is_default_version: If the model is default version.
        :param str lifecycle_status: Model lifecycle status.
        :param int max_capacity: The max capacity.
        :param str name: Deployment model name.
        :param Sequence['ModelSkuResponse'] skus: The list of Model Sku.
        :param str source: Optional. Deployment model source ARM resource ID.
        :param str version: Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
        """
        pulumi.set(__self__, "call_rate_limit", call_rate_limit)
        pulumi.set(__self__, "system_data", system_data)
        if base_model is not None:
            pulumi.set(__self__, "base_model", base_model)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if deprecation is not None:
            pulumi.set(__self__, "deprecation", deprecation)
        if finetune_capabilities is not None:
            pulumi.set(__self__, "finetune_capabilities", finetune_capabilities)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if is_default_version is not None:
            pulumi.set(__self__, "is_default_version", is_default_version)
        if lifecycle_status is not None:
            pulumi.set(__self__, "lifecycle_status", lifecycle_status)
        if max_capacity is not None:
            pulumi.set(__self__, "max_capacity", max_capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skus is not None:
            pulumi.set(__self__, "skus", skus)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="callRateLimit")
    def call_rate_limit(self) -> 'outputs.CallRateLimitResponse':
        """
        The call rate limit Cognitive Services account.
        """
        return pulumi.get(self, "call_rate_limit")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="baseModel")
    def base_model(self) -> Optional['outputs.DeploymentModelResponse']:
        """
        Base Model Identifier.
        """
        return pulumi.get(self, "base_model")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Mapping[str, str]]:
        """
        The capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def deprecation(self) -> Optional['outputs.ModelDeprecationInfoResponse']:
        """
        Cognitive Services account ModelDeprecationInfo.
        """
        return pulumi.get(self, "deprecation")

    @property
    @pulumi.getter(name="finetuneCapabilities")
    def finetune_capabilities(self) -> Optional[Mapping[str, str]]:
        """
        The capabilities for finetune models.
        """
        return pulumi.get(self, "finetune_capabilities")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Deployment model format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="isDefaultVersion")
    def is_default_version(self) -> Optional[bool]:
        """
        If the model is default version.
        """
        return pulumi.get(self, "is_default_version")

    @property
    @pulumi.getter(name="lifecycleStatus")
    def lifecycle_status(self) -> Optional[str]:
        """
        Model lifecycle status.
        """
        return pulumi.get(self, "lifecycle_status")

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[int]:
        """
        The max capacity.
        """
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Deployment model name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def skus(self) -> Optional[Sequence['outputs.ModelSkuResponse']]:
        """
        The list of Model Sku.
        """
        return pulumi.get(self, "skus")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CallRateLimitResponse(dict):
    """
    The call rate limit Cognitive Services account.
    """
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 renewal_period: Optional[float] = None,
                 rules: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None):
        """
        The call rate limit Cognitive Services account.
        :param float count: The count value of Call Rate Limit.
        :param float renewal_period: The renewal period in seconds of Call Rate Limit.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if renewal_period is not None:
            pulumi.set(__self__, "renewal_period", renewal_period)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        """
        The count value of Call Rate Limit.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> Optional[float]:
        """
        The renewal period in seconds of Call Rate Limit.
        """
        return pulumi.get(self, "renewal_period")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.ThrottlingRuleResponse']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class CapacityConfigResponse(dict):
    """
    The capacity configuration.
    """
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[int]] = None,
                 default: Optional[int] = None,
                 maximum: Optional[int] = None,
                 minimum: Optional[int] = None,
                 step: Optional[int] = None):
        """
        The capacity configuration.
        :param Sequence[int] allowed_values: The array of allowed values for capacity.
        :param int default: The default capacity.
        :param int maximum: The maximum capacity.
        :param int minimum: The minimum capacity.
        :param int step: The minimal incremental between allowed values for capacity.
        """
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if step is not None:
            pulumi.set(__self__, "step", step)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[int]]:
        """
        The array of allowed values for capacity.
        """
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def default(self) -> Optional[int]:
        """
        The default capacity.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[int]:
        """
        The maximum capacity.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[int]:
        """
        The minimum capacity.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def step(self) -> Optional[int]:
        """
        The minimal incremental between allowed values for capacity.
        """
        return pulumi.get(self, "step")


@pulumi.output_type
class CognitiveServicesSkuResponse(dict):
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")


@pulumi.output_type
class DeploymentModelResponse(dict):
    """
    Properties of Cognitive Services account deployment model.
    """
    def __init__(__self__, *,
                 call_rate_limit: 'outputs.CallRateLimitResponse',
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param 'CallRateLimitResponse' call_rate_limit: The call rate limit Cognitive Services account.
        :param str format: Deployment model format.
        :param str name: Deployment model name.
        :param str source: Optional. Deployment model source ARM resource ID.
        :param str version: Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
        """
        pulumi.set(__self__, "call_rate_limit", call_rate_limit)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="callRateLimit")
    def call_rate_limit(self) -> 'outputs.CallRateLimitResponse':
        """
        The call rate limit Cognitive Services account.
        """
        return pulumi.get(self, "call_rate_limit")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Deployment model format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Deployment model name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class EndpointDeploymentModelResponse(dict):
    def __init__(__self__, *,
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str format: Model format
        :param str name: Model name.
        :param str source: Optional. Deployment model source ARM resource ID.
        :param str version: Model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Model format
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Model name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Model version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class EndpointDeploymentResourcePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "raiPolicyName":
            suggest = "rai_policy_name"
        elif key == "versionUpgradeOption":
            suggest = "version_upgrade_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model: 'outputs.EndpointDeploymentModelResponse',
                 provisioning_state: str,
                 rai_policy_name: Optional[str] = None,
                 version_upgrade_option: Optional[str] = None):
        """
        :param 'EndpointDeploymentModelResponse' model: Model used for the endpoint deployment.
        :param str provisioning_state: Read-only provision state status property.
        :param str rai_policy_name: The name of RAI policy.
        :param str version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> 'outputs.EndpointDeploymentModelResponse':
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Read-only provision state status property.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[str]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[str]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")


@pulumi.output_type
class ModelDeprecationInfoResponse(dict):
    """
    Cognitive Services account ModelDeprecationInfo.
    """
    def __init__(__self__, *,
                 fine_tune: Optional[str] = None,
                 inference: Optional[str] = None):
        """
        Cognitive Services account ModelDeprecationInfo.
        :param str fine_tune: The datetime of deprecation of the fineTune Model.
        :param str inference: The datetime of deprecation of the inference Model.
        """
        if fine_tune is not None:
            pulumi.set(__self__, "fine_tune", fine_tune)
        if inference is not None:
            pulumi.set(__self__, "inference", inference)

    @property
    @pulumi.getter(name="fineTune")
    def fine_tune(self) -> Optional[str]:
        """
        The datetime of deprecation of the fineTune Model.
        """
        return pulumi.get(self, "fine_tune")

    @property
    @pulumi.getter
    def inference(self) -> Optional[str]:
        """
        The datetime of deprecation of the inference Model.
        """
        return pulumi.get(self, "inference")


@pulumi.output_type
class ModelSkuResponse(dict):
    """
    Describes an available Cognitive Services Model SKU.
    """
    def __init__(__self__, *,
                 capacity: Optional['outputs.CapacityConfigResponse'] = None,
                 connection_ids: Optional[Sequence[str]] = None,
                 deprecation_date: Optional[str] = None,
                 name: Optional[str] = None,
                 rate_limits: Optional[Sequence['outputs.CallRateLimitResponse']] = None,
                 usage_name: Optional[str] = None):
        """
        Describes an available Cognitive Services Model SKU.
        :param 'CapacityConfigResponse' capacity: The capacity configuration.
        :param Sequence[str] connection_ids: The list of connection ids.
        :param str deprecation_date: The datetime of deprecation of the model SKU.
        :param str name: The name of the model SKU.
        :param Sequence['CallRateLimitResponse'] rate_limits: The list of rateLimit.
        :param str usage_name: The usage name of the model SKU.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if connection_ids is not None:
            pulumi.set(__self__, "connection_ids", connection_ids)
        if deprecation_date is not None:
            pulumi.set(__self__, "deprecation_date", deprecation_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rate_limits is not None:
            pulumi.set(__self__, "rate_limits", rate_limits)
        if usage_name is not None:
            pulumi.set(__self__, "usage_name", usage_name)

    @property
    @pulumi.getter
    def capacity(self) -> Optional['outputs.CapacityConfigResponse']:
        """
        The capacity configuration.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="connectionIds")
    def connection_ids(self) -> Optional[Sequence[str]]:
        """
        The list of connection ids.
        """
        return pulumi.get(self, "connection_ids")

    @property
    @pulumi.getter(name="deprecationDate")
    def deprecation_date(self) -> Optional[str]:
        """
        The datetime of deprecation of the model SKU.
        """
        return pulumi.get(self, "deprecation_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the model SKU.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rateLimits")
    def rate_limits(self) -> Optional[Sequence['outputs.CallRateLimitResponse']]:
        """
        The list of rateLimit.
        """
        return pulumi.get(self, "rate_limits")

    @property
    @pulumi.getter(name="usageName")
    def usage_name(self) -> Optional[str]:
        """
        The usage name of the model SKU.
        """
        return pulumi.get(self, "usage_name")


@pulumi.output_type
class RaiBlocklistConfigResponse(dict):
    """
    Azure OpenAI blocklist config.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blocklistName":
            suggest = "blocklist_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RaiBlocklistConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RaiBlocklistConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RaiBlocklistConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocking: Optional[bool] = None,
                 blocklist_name: Optional[str] = None):
        """
        Azure OpenAI blocklist config.
        :param bool blocking: If blocking would occur.
        :param str blocklist_name: Name of ContentFilter.
        """
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if blocklist_name is not None:
            pulumi.set(__self__, "blocklist_name", blocklist_name)

    @property
    @pulumi.getter
    def blocking(self) -> Optional[bool]:
        """
        If blocking would occur.
        """
        return pulumi.get(self, "blocking")

    @property
    @pulumi.getter(name="blocklistName")
    def blocklist_name(self) -> Optional[str]:
        """
        Name of ContentFilter.
        """
        return pulumi.get(self, "blocklist_name")


@pulumi.output_type
class RaiPolicyContentFilterResponse(dict):
    """
    Azure OpenAI Content Filter.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedContentLevel":
            suggest = "allowed_content_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RaiPolicyContentFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RaiPolicyContentFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RaiPolicyContentFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_content_level: Optional[str] = None,
                 blocking: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None):
        """
        Azure OpenAI Content Filter.
        :param str allowed_content_level: Level at which content is filtered.
        :param bool blocking: If blocking would occur.
        :param bool enabled: If the ContentFilter is enabled.
        :param str name: Name of ContentFilter.
        :param str source: Content source to apply the Content Filters.
        """
        if allowed_content_level is not None:
            pulumi.set(__self__, "allowed_content_level", allowed_content_level)
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="allowedContentLevel")
    def allowed_content_level(self) -> Optional[str]:
        """
        Level at which content is filtered.
        """
        return pulumi.get(self, "allowed_content_level")

    @property
    @pulumi.getter
    def blocking(self) -> Optional[bool]:
        """
        If blocking would occur.
        """
        return pulumi.get(self, "blocking")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If the ContentFilter is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of ContentFilter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Content source to apply the Content Filters.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class RaiPolicyPropertiesResponse(dict):
    """
    Azure OpenAI Content Filters properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePolicyName":
            suggest = "base_policy_name"
        elif key == "completionBlocklists":
            suggest = "completion_blocklists"
        elif key == "contentFilters":
            suggest = "content_filters"
        elif key == "promptBlocklists":
            suggest = "prompt_blocklists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RaiPolicyPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RaiPolicyPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RaiPolicyPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_policy_name: Optional[str] = None,
                 completion_blocklists: Optional[Sequence['outputs.RaiBlocklistConfigResponse']] = None,
                 content_filters: Optional[Sequence['outputs.RaiPolicyContentFilterResponse']] = None,
                 mode: Optional[str] = None,
                 prompt_blocklists: Optional[Sequence['outputs.RaiBlocklistConfigResponse']] = None,
                 type: Optional[str] = None):
        """
        Azure OpenAI Content Filters properties.
        :param str base_policy_name: Name of the base Content Filters.
        :param str mode: Content Filters mode.
        :param str type: Content Filters policy type.
        """
        if base_policy_name is not None:
            pulumi.set(__self__, "base_policy_name", base_policy_name)
        if completion_blocklists is not None:
            pulumi.set(__self__, "completion_blocklists", completion_blocklists)
        if content_filters is not None:
            pulumi.set(__self__, "content_filters", content_filters)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if prompt_blocklists is not None:
            pulumi.set(__self__, "prompt_blocklists", prompt_blocklists)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="basePolicyName")
    def base_policy_name(self) -> Optional[str]:
        """
        Name of the base Content Filters.
        """
        return pulumi.get(self, "base_policy_name")

    @property
    @pulumi.getter(name="completionBlocklists")
    def completion_blocklists(self) -> Optional[Sequence['outputs.RaiBlocklistConfigResponse']]:
        return pulumi.get(self, "completion_blocklists")

    @property
    @pulumi.getter(name="contentFilters")
    def content_filters(self) -> Optional[Sequence['outputs.RaiPolicyContentFilterResponse']]:
        return pulumi.get(self, "content_filters")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Content Filters mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="promptBlocklists")
    def prompt_blocklists(self) -> Optional[Sequence['outputs.RaiBlocklistConfigResponse']]:
        return pulumi.get(self, "prompt_blocklists")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Content Filters policy type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RequestMatchPatternResponse(dict):
    def __init__(__self__, *,
                 method: Optional[str] = None,
                 path: Optional[str] = None):
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ThrottlingRuleResponse(dict):
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 dynamic_throttling_enabled: Optional[bool] = None,
                 key: Optional[str] = None,
                 match_patterns: Optional[Sequence['outputs.RequestMatchPatternResponse']] = None,
                 min_count: Optional[float] = None,
                 renewal_period: Optional[float] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dynamic_throttling_enabled is not None:
            pulumi.set(__self__, "dynamic_throttling_enabled", dynamic_throttling_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if match_patterns is not None:
            pulumi.set(__self__, "match_patterns", match_patterns)
        if min_count is not None:
            pulumi.set(__self__, "min_count", min_count)
        if renewal_period is not None:
            pulumi.set(__self__, "renewal_period", renewal_period)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dynamicThrottlingEnabled")
    def dynamic_throttling_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_throttling_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="matchPatterns")
    def match_patterns(self) -> Optional[Sequence['outputs.RequestMatchPatternResponse']]:
        return pulumi.get(self, "match_patterns")

    @property
    @pulumi.getter(name="minCount")
    def min_count(self) -> Optional[float]:
        return pulumi.get(self, "min_count")

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> Optional[float]:
        return pulumi.get(self, "renewal_period")


