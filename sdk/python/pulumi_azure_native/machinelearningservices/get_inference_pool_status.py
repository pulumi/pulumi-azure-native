# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInferencePoolStatusResult',
    'AwaitableGetInferencePoolStatusResult',
    'get_inference_pool_status',
    'get_inference_pool_status_output',
]

@pulumi.output_type
class GetInferencePoolStatusResult:
    def __init__(__self__, actual_capacity=None, group_count=None, requested_capacity=None, reserved_capacity=None):
        if actual_capacity and not isinstance(actual_capacity, int):
            raise TypeError("Expected argument 'actual_capacity' to be a int")
        pulumi.set(__self__, "actual_capacity", actual_capacity)
        if group_count and not isinstance(group_count, int):
            raise TypeError("Expected argument 'group_count' to be a int")
        pulumi.set(__self__, "group_count", group_count)
        if requested_capacity and not isinstance(requested_capacity, int):
            raise TypeError("Expected argument 'requested_capacity' to be a int")
        pulumi.set(__self__, "requested_capacity", requested_capacity)
        if reserved_capacity and not isinstance(reserved_capacity, int):
            raise TypeError("Expected argument 'reserved_capacity' to be a int")
        pulumi.set(__self__, "reserved_capacity", reserved_capacity)

    @property
    @pulumi.getter(name="actualCapacity")
    def actual_capacity(self) -> Optional[int]:
        """
        Gets or sets the actual number of instances in the pool.
        """
        return pulumi.get(self, "actual_capacity")

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[int]:
        """
        Gets or sets the actual number of groups in the pool.
        """
        return pulumi.get(self, "group_count")

    @property
    @pulumi.getter(name="requestedCapacity")
    def requested_capacity(self) -> Optional[int]:
        """
        Gets or sets the requested number of instances for the pool.
        """
        return pulumi.get(self, "requested_capacity")

    @property
    @pulumi.getter(name="reservedCapacity")
    def reserved_capacity(self) -> Optional[int]:
        """
        Gets or sets the number of instances in the pool reserved by the system.
        """
        return pulumi.get(self, "reserved_capacity")


class AwaitableGetInferencePoolStatusResult(GetInferencePoolStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInferencePoolStatusResult(
            actual_capacity=self.actual_capacity,
            group_count=self.group_count,
            requested_capacity=self.requested_capacity,
            reserved_capacity=self.reserved_capacity)


def get_inference_pool_status(inference_pool_name: Optional[str] = None,
                              resource_group_name: Optional[str] = None,
                              workspace_name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInferencePoolStatusResult:
    """
    Azure REST API version: 2023-08-01-preview.


    :param str inference_pool_name: Name of InferencePool
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: Name of Azure Machine Learning workspace.
    """
    __args__ = dict()
    __args__['inferencePoolName'] = inference_pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:machinelearningservices:getInferencePoolStatus', __args__, opts=opts, typ=GetInferencePoolStatusResult).value

    return AwaitableGetInferencePoolStatusResult(
        actual_capacity=pulumi.get(__ret__, 'actual_capacity'),
        group_count=pulumi.get(__ret__, 'group_count'),
        requested_capacity=pulumi.get(__ret__, 'requested_capacity'),
        reserved_capacity=pulumi.get(__ret__, 'reserved_capacity'))


@_utilities.lift_output_func(get_inference_pool_status)
def get_inference_pool_status_output(inference_pool_name: Optional[pulumi.Input[str]] = None,
                                     resource_group_name: Optional[pulumi.Input[str]] = None,
                                     workspace_name: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInferencePoolStatusResult]:
    """
    Azure REST API version: 2023-08-01-preview.


    :param str inference_pool_name: Name of InferencePool
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: Name of Azure Machine Learning workspace.
    """
    ...
