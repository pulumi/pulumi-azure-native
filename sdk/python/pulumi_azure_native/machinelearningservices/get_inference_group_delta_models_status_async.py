# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInferenceGroupDeltaModelsStatusAsyncResult',
    'AwaitableGetInferenceGroupDeltaModelsStatusAsyncResult',
    'get_inference_group_delta_models_status_async',
    'get_inference_group_delta_models_status_async_output',
]

@pulumi.output_type
class GetInferenceGroupDeltaModelsStatusAsyncResult:
    """
    Contract returning to user the delta models.
    """
    def __init__(__self__, actual_instance_count=None, delta_models=None, expected_instance_count=None, revision_id=None, target_base_model=None):
        if actual_instance_count and not isinstance(actual_instance_count, int):
            raise TypeError("Expected argument 'actual_instance_count' to be a int")
        pulumi.set(__self__, "actual_instance_count", actual_instance_count)
        if delta_models and not isinstance(delta_models, dict):
            raise TypeError("Expected argument 'delta_models' to be a dict")
        pulumi.set(__self__, "delta_models", delta_models)
        if expected_instance_count and not isinstance(expected_instance_count, int):
            raise TypeError("Expected argument 'expected_instance_count' to be a int")
        pulumi.set(__self__, "expected_instance_count", expected_instance_count)
        if revision_id and not isinstance(revision_id, str):
            raise TypeError("Expected argument 'revision_id' to be a str")
        pulumi.set(__self__, "revision_id", revision_id)
        if target_base_model and not isinstance(target_base_model, str):
            raise TypeError("Expected argument 'target_base_model' to be a str")
        pulumi.set(__self__, "target_base_model", target_base_model)

    @property
    @pulumi.getter(name="actualInstanceCount")
    def actual_instance_count(self) -> Optional[int]:
        """
        Gets or sets actual instance count.
        """
        return pulumi.get(self, "actual_instance_count")

    @property
    @pulumi.getter(name="deltaModels")
    def delta_models(self) -> Optional[Mapping[str, Sequence['outputs.DeltaModelCurrentStateResponse']]]:
        """
        Gets or sets dictionary representing modelID and its current state.
        """
        return pulumi.get(self, "delta_models")

    @property
    @pulumi.getter(name="expectedInstanceCount")
    def expected_instance_count(self) -> Optional[int]:
        """
        Gets or sets expected instance count.
        """
        return pulumi.get(self, "expected_instance_count")

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[str]:
        """
        Gets or sets revision ID.
        """
        return pulumi.get(self, "revision_id")

    @property
    @pulumi.getter(name="targetBaseModel")
    def target_base_model(self) -> Optional[str]:
        """
        Gets or sets target base model.
        """
        return pulumi.get(self, "target_base_model")


class AwaitableGetInferenceGroupDeltaModelsStatusAsyncResult(GetInferenceGroupDeltaModelsStatusAsyncResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInferenceGroupDeltaModelsStatusAsyncResult(
            actual_instance_count=self.actual_instance_count,
            delta_models=self.delta_models,
            expected_instance_count=self.expected_instance_count,
            revision_id=self.revision_id,
            target_base_model=self.target_base_model)


def get_inference_group_delta_models_status_async(delta_models: Optional[Sequence[str]] = None,
                                                  group_name: Optional[str] = None,
                                                  pool_name: Optional[str] = None,
                                                  resource_group_name: Optional[str] = None,
                                                  target_base_model: Optional[str] = None,
                                                  workspace_name: Optional[str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInferenceGroupDeltaModelsStatusAsyncResult:
    """
    Contract returning to user the delta models.
    Azure REST API version: 2024-10-01-preview.


    :param Sequence[str] delta_models: Gets or sets collection of delta models to retrieve status for.
    :param str group_name: InferenceGroup name.
    :param str pool_name: InferencePool name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str target_base_model: Gets or sets target base model.
    :param str workspace_name: Name of Azure Machine Learning workspace.
    """
    __args__ = dict()
    __args__['deltaModels'] = delta_models
    __args__['groupName'] = group_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['targetBaseModel'] = target_base_model
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:machinelearningservices:getInferenceGroupDeltaModelsStatusAsync', __args__, opts=opts, typ=GetInferenceGroupDeltaModelsStatusAsyncResult).value

    return AwaitableGetInferenceGroupDeltaModelsStatusAsyncResult(
        actual_instance_count=pulumi.get(__ret__, 'actual_instance_count'),
        delta_models=pulumi.get(__ret__, 'delta_models'),
        expected_instance_count=pulumi.get(__ret__, 'expected_instance_count'),
        revision_id=pulumi.get(__ret__, 'revision_id'),
        target_base_model=pulumi.get(__ret__, 'target_base_model'))
def get_inference_group_delta_models_status_async_output(delta_models: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                         group_name: Optional[pulumi.Input[str]] = None,
                                                         pool_name: Optional[pulumi.Input[str]] = None,
                                                         resource_group_name: Optional[pulumi.Input[str]] = None,
                                                         target_base_model: Optional[pulumi.Input[Optional[str]]] = None,
                                                         workspace_name: Optional[pulumi.Input[str]] = None,
                                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInferenceGroupDeltaModelsStatusAsyncResult]:
    """
    Contract returning to user the delta models.
    Azure REST API version: 2024-10-01-preview.


    :param Sequence[str] delta_models: Gets or sets collection of delta models to retrieve status for.
    :param str group_name: InferenceGroup name.
    :param str pool_name: InferencePool name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str target_base_model: Gets or sets target base model.
    :param str workspace_name: Name of Azure Machine Learning workspace.
    """
    __args__ = dict()
    __args__['deltaModels'] = delta_models
    __args__['groupName'] = group_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['targetBaseModel'] = target_base_model
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:machinelearningservices:getInferenceGroupDeltaModelsStatusAsync', __args__, opts=opts, typ=GetInferenceGroupDeltaModelsStatusAsyncResult)
    return __ret__.apply(lambda __response__: GetInferenceGroupDeltaModelsStatusAsyncResult(
        actual_instance_count=pulumi.get(__response__, 'actual_instance_count'),
        delta_models=pulumi.get(__response__, 'delta_models'),
        expected_instance_count=pulumi.get(__response__, 'expected_instance_count'),
        revision_id=pulumi.get(__response__, 'revision_id'),
        target_base_model=pulumi.get(__response__, 'target_base_model')))
