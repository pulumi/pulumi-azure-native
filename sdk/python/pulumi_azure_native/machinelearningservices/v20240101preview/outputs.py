# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccountApiKeysResponse',
    'CognitiveServicesSkuResponse',
    'ContentSafetyEndpointDeploymentResourcePropertiesResponse',
    'EndpointDeploymentModelResponse',
    'ManagedOnlineEndpointDeploymentResourcePropertiesResponse',
    'MarketplacePlanResponse',
    'MarketplaceSubscriptionResponse',
    'OpenAIEndpointDeploymentResourcePropertiesResponse',
    'SpeechEndpointDeploymentResourcePropertiesResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AccountApiKeysResponse(dict):
    def __init__(__self__, *,
                 key1: Optional[str] = None,
                 key2: Optional[str] = None):
        if key1 is not None:
            pulumi.set(__self__, "key1", key1)
        if key2 is not None:
            pulumi.set(__self__, "key2", key2)

    @property
    @pulumi.getter
    def key1(self) -> Optional[str]:
        return pulumi.get(self, "key1")

    @property
    @pulumi.getter
    def key2(self) -> Optional[str]:
        return pulumi.get(self, "key2")


@pulumi.output_type
class CognitiveServicesSkuResponse(dict):
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")


@pulumi.output_type
class ContentSafetyEndpointDeploymentResourcePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "raiPolicyName":
            suggest = "rai_policy_name"
        elif key == "versionUpgradeOption":
            suggest = "version_upgrade_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentSafetyEndpointDeploymentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentSafetyEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentSafetyEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model: 'outputs.EndpointDeploymentModelResponse',
                 provisioning_state: str,
                 type: str,
                 failure_reason: Optional[str] = None,
                 rai_policy_name: Optional[str] = None,
                 sku: Optional['outputs.CognitiveServicesSkuResponse'] = None,
                 version_upgrade_option: Optional[str] = None):
        """
        :param 'EndpointDeploymentModelResponse' model: Model used for the endpoint deployment.
        :param str provisioning_state: Read-only provision state status property.
        :param str type: Kind of the deployment.
               Expected value is 'Azure.ContentSafety'.
        :param str failure_reason: The failure reason if the creation failed.
        :param str rai_policy_name: The name of RAI policy.
        :param str version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "type", 'Azure.ContentSafety')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> 'outputs.EndpointDeploymentModelResponse':
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Read-only provision state status property.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Kind of the deployment.
        Expected value is 'Azure.ContentSafety'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[str]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.CognitiveServicesSkuResponse']:
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[str]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")


@pulumi.output_type
class EndpointDeploymentModelResponse(dict):
    def __init__(__self__, *,
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str format: Model format
        :param str name: Model name.
        :param str source: Optional. Deployment model source ARM resource ID.
        :param str version: Model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Model format
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Model name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Model version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ManagedOnlineEndpointDeploymentResourcePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "failureReason":
            suggest = "failure_reason"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedOnlineEndpointDeploymentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedOnlineEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedOnlineEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 type: str,
                 failure_reason: Optional[str] = None):
        """
        :param str provisioning_state: Read-only provision state status property.
        :param str type: Kind of the deployment.
               Expected value is 'managedOnlineEndpoint'.
        :param str failure_reason: The failure reason if the creation failed.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "type", 'managedOnlineEndpoint')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Read-only provision state status property.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Kind of the deployment.
        Expected value is 'managedOnlineEndpoint'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")


@pulumi.output_type
class MarketplacePlanResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "offerId":
            suggest = "offer_id"
        elif key == "planId":
            suggest = "plan_id"
        elif key == "publisherId":
            suggest = "publisher_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplacePlanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplacePlanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplacePlanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 offer_id: str,
                 plan_id: str,
                 publisher_id: str):
        """
        :param str offer_id: The Offer ID of the Marketplace Plan.
        :param str plan_id: The Plan ID of the Marketplace Plan.
        :param str publisher_id: The Publisher ID of the Marketplace Plan.
        """
        pulumi.set(__self__, "offer_id", offer_id)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "publisher_id", publisher_id)

    @property
    @pulumi.getter(name="offerId")
    def offer_id(self) -> str:
        """
        The Offer ID of the Marketplace Plan.
        """
        return pulumi.get(self, "offer_id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The Plan ID of the Marketplace Plan.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="publisherId")
    def publisher_id(self) -> str:
        """
        The Publisher ID of the Marketplace Plan.
        """
        return pulumi.get(self, "publisher_id")


@pulumi.output_type
class MarketplaceSubscriptionResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "marketplacePlan":
            suggest = "marketplace_plan"
        elif key == "marketplaceSubscriptionStatus":
            suggest = "marketplace_subscription_status"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MarketplaceSubscriptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MarketplaceSubscriptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MarketplaceSubscriptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 marketplace_plan: 'outputs.MarketplacePlanResponse',
                 marketplace_subscription_status: str,
                 model_id: str,
                 provisioning_state: str):
        """
        :param 'MarketplacePlanResponse' marketplace_plan: Marketplace Plan associated with the Marketplace Subscription.
        :param str marketplace_subscription_status: Current status of the Marketplace Subscription.
        :param str model_id: [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        :param str provisioning_state: Provisioning State of the Marketplace Subscription.
        """
        pulumi.set(__self__, "marketplace_plan", marketplace_plan)
        pulumi.set(__self__, "marketplace_subscription_status", marketplace_subscription_status)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="marketplacePlan")
    def marketplace_plan(self) -> 'outputs.MarketplacePlanResponse':
        """
        Marketplace Plan associated with the Marketplace Subscription.
        """
        return pulumi.get(self, "marketplace_plan")

    @property
    @pulumi.getter(name="marketplaceSubscriptionStatus")
    def marketplace_subscription_status(self) -> str:
        """
        Current status of the Marketplace Subscription.
        """
        return pulumi.get(self, "marketplace_subscription_status")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning State of the Marketplace Subscription.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class OpenAIEndpointDeploymentResourcePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "raiPolicyName":
            suggest = "rai_policy_name"
        elif key == "versionUpgradeOption":
            suggest = "version_upgrade_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenAIEndpointDeploymentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenAIEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenAIEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model: 'outputs.EndpointDeploymentModelResponse',
                 provisioning_state: str,
                 type: str,
                 failure_reason: Optional[str] = None,
                 rai_policy_name: Optional[str] = None,
                 sku: Optional['outputs.CognitiveServicesSkuResponse'] = None,
                 version_upgrade_option: Optional[str] = None):
        """
        :param 'EndpointDeploymentModelResponse' model: Model used for the endpoint deployment.
        :param str provisioning_state: Read-only provision state status property.
        :param str type: Kind of the deployment.
               Expected value is 'Azure.OpenAI'.
        :param str failure_reason: The failure reason if the creation failed.
        :param str rai_policy_name: The name of RAI policy.
        :param str version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "type", 'Azure.OpenAI')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> 'outputs.EndpointDeploymentModelResponse':
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Read-only provision state status property.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Kind of the deployment.
        Expected value is 'Azure.OpenAI'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[str]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.CognitiveServicesSkuResponse']:
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[str]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")


@pulumi.output_type
class SpeechEndpointDeploymentResourcePropertiesResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "raiPolicyName":
            suggest = "rai_policy_name"
        elif key == "versionUpgradeOption":
            suggest = "version_upgrade_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpeechEndpointDeploymentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpeechEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpeechEndpointDeploymentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model: 'outputs.EndpointDeploymentModelResponse',
                 provisioning_state: str,
                 type: str,
                 failure_reason: Optional[str] = None,
                 rai_policy_name: Optional[str] = None,
                 sku: Optional['outputs.CognitiveServicesSkuResponse'] = None,
                 version_upgrade_option: Optional[str] = None):
        """
        :param 'EndpointDeploymentModelResponse' model: Model used for the endpoint deployment.
        :param str provisioning_state: Read-only provision state status property.
        :param str type: Kind of the deployment.
               Expected value is 'Azure.Speech'.
        :param str failure_reason: The failure reason if the creation failed.
        :param str rai_policy_name: The name of RAI policy.
        :param str version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "type", 'Azure.Speech')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> 'outputs.EndpointDeploymentModelResponse':
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Read-only provision state status property.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Kind of the deployment.
        Expected value is 'Azure.Speech'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[str]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.CognitiveServicesSkuResponse']:
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[str]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


