# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AllNodesArgs',
    'AllNodesArgsDict',
    'AmlTokenArgs',
    'AmlTokenArgsDict',
    'AzureDevOpsWebhookArgs',
    'AzureDevOpsWebhookArgsDict',
    'CapacityReservationGroupArgs',
    'CapacityReservationGroupArgsDict',
    'CognitiveServicesSkuArgs',
    'CognitiveServicesSkuArgsDict',
    'ContentSafetyEndpointDeploymentResourcePropertiesArgs',
    'ContentSafetyEndpointDeploymentResourcePropertiesArgsDict',
    'EndpointDeploymentModelArgs',
    'EndpointDeploymentModelArgsDict',
    'JobServiceArgs',
    'JobServiceArgsDict',
    'LabelCategoryArgs',
    'LabelCategoryArgsDict',
    'LabelClassArgs',
    'LabelClassArgsDict',
    'LabelingDataConfigurationArgs',
    'LabelingDataConfigurationArgsDict',
    'LabelingJobImagePropertiesArgs',
    'LabelingJobImagePropertiesArgsDict',
    'LabelingJobInstructionsArgs',
    'LabelingJobInstructionsArgsDict',
    'LabelingJobTextPropertiesArgs',
    'LabelingJobTextPropertiesArgsDict',
    'LabelingJobArgs',
    'LabelingJobArgsDict',
    'MLAssistConfigurationDisabledArgs',
    'MLAssistConfigurationDisabledArgsDict',
    'MLAssistConfigurationEnabledArgs',
    'MLAssistConfigurationEnabledArgsDict',
    'ManagedIdentityArgs',
    'ManagedIdentityArgsDict',
    'ManagedOnlineEndpointDeploymentResourcePropertiesArgs',
    'ManagedOnlineEndpointDeploymentResourcePropertiesArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'MarketplaceSubscriptionArgs',
    'MarketplaceSubscriptionArgsDict',
    'NotificationSettingArgs',
    'NotificationSettingArgsDict',
    'OpenAIEndpointDeploymentResourcePropertiesArgs',
    'OpenAIEndpointDeploymentResourcePropertiesArgsDict',
    'SecretConfigurationArgs',
    'SecretConfigurationArgsDict',
    'ServerlessOfferArgs',
    'ServerlessOfferArgsDict',
    'SkuArgs',
    'SkuArgsDict',
    'SpeechEndpointDeploymentResourcePropertiesArgs',
    'SpeechEndpointDeploymentResourcePropertiesArgsDict',
    'UserIdentityArgs',
    'UserIdentityArgsDict',
]

MYPY = False

if not MYPY:
    class AllNodesArgsDict(TypedDict):
        """
        All nodes means the service will be running on all of the nodes of the job
        """
        nodes_value_type: pulumi.Input[str]
        """
        The enumerated types for the nodes value
        Expected value is 'All'.
        """
elif False:
    AllNodesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AllNodesArgs:
    def __init__(__self__, *,
                 nodes_value_type: pulumi.Input[str]):
        """
        All nodes means the service will be running on all of the nodes of the job
        :param pulumi.Input[str] nodes_value_type: The enumerated types for the nodes value
               Expected value is 'All'.
        """
        pulumi.set(__self__, "nodes_value_type", 'All')

    @property
    @pulumi.getter(name="nodesValueType")
    def nodes_value_type(self) -> pulumi.Input[str]:
        """
        The enumerated types for the nodes value
        Expected value is 'All'.
        """
        return pulumi.get(self, "nodes_value_type")

    @nodes_value_type.setter
    def nodes_value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "nodes_value_type", value)


if not MYPY:
    class AmlTokenArgsDict(TypedDict):
        """
        AML Token identity configuration.
        """
        identity_type: pulumi.Input[str]
        """
        Enum to determine identity framework.
        Expected value is 'AMLToken'.
        """
elif False:
    AmlTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AmlTokenArgs:
    def __init__(__self__, *,
                 identity_type: pulumi.Input[str]):
        """
        AML Token identity configuration.
        :param pulumi.Input[str] identity_type: Enum to determine identity framework.
               Expected value is 'AMLToken'.
        """
        pulumi.set(__self__, "identity_type", 'AMLToken')

    @property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> pulumi.Input[str]:
        """
        Enum to determine identity framework.
        Expected value is 'AMLToken'.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_type", value)


if not MYPY:
    class AzureDevOpsWebhookArgsDict(TypedDict):
        """
        Webhook details specific for Azure DevOps
        """
        webhook_type: pulumi.Input[str]
        """
        Enum to determine the webhook callback service type.
        Expected value is 'AzureDevOps'.
        """
        event_type: NotRequired[pulumi.Input[str]]
        """
        Send callback on a specified notification event
        """
elif False:
    AzureDevOpsWebhookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureDevOpsWebhookArgs:
    def __init__(__self__, *,
                 webhook_type: pulumi.Input[str],
                 event_type: Optional[pulumi.Input[str]] = None):
        """
        Webhook details specific for Azure DevOps
        :param pulumi.Input[str] webhook_type: Enum to determine the webhook callback service type.
               Expected value is 'AzureDevOps'.
        :param pulumi.Input[str] event_type: Send callback on a specified notification event
        """
        pulumi.set(__self__, "webhook_type", 'AzureDevOps')
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)

    @property
    @pulumi.getter(name="webhookType")
    def webhook_type(self) -> pulumi.Input[str]:
        """
        Enum to determine the webhook callback service type.
        Expected value is 'AzureDevOps'.
        """
        return pulumi.get(self, "webhook_type")

    @webhook_type.setter
    def webhook_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook_type", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        """
        Send callback on a specified notification event
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)


if not MYPY:
    class CapacityReservationGroupArgsDict(TypedDict):
        reserved_capacity: pulumi.Input[int]
        """
        [Required] Specifies the amount of capacity to reserve.
        """
        offer: NotRequired[pulumi.Input['ServerlessOfferArgsDict']]
        """
        Offer used by this capacity reservation group.
        """
elif False:
    CapacityReservationGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CapacityReservationGroupArgs:
    def __init__(__self__, *,
                 reserved_capacity: pulumi.Input[int],
                 offer: Optional[pulumi.Input['ServerlessOfferArgs']] = None):
        """
        :param pulumi.Input[int] reserved_capacity: [Required] Specifies the amount of capacity to reserve.
        :param pulumi.Input['ServerlessOfferArgs'] offer: Offer used by this capacity reservation group.
        """
        pulumi.set(__self__, "reserved_capacity", reserved_capacity)
        if offer is not None:
            pulumi.set(__self__, "offer", offer)

    @property
    @pulumi.getter(name="reservedCapacity")
    def reserved_capacity(self) -> pulumi.Input[int]:
        """
        [Required] Specifies the amount of capacity to reserve.
        """
        return pulumi.get(self, "reserved_capacity")

    @reserved_capacity.setter
    def reserved_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "reserved_capacity", value)

    @property
    @pulumi.getter
    def offer(self) -> Optional[pulumi.Input['ServerlessOfferArgs']]:
        """
        Offer used by this capacity reservation group.
        """
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: Optional[pulumi.Input['ServerlessOfferArgs']]):
        pulumi.set(self, "offer", value)


if not MYPY:
    class CognitiveServicesSkuArgsDict(TypedDict):
        capacity: NotRequired[pulumi.Input[int]]
        family: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        tier: NotRequired[pulumi.Input[str]]
elif False:
    CognitiveServicesSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CognitiveServicesSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class ContentSafetyEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'Azure.ContentSafety'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        sku: NotRequired[pulumi.Input['CognitiveServicesSkuArgsDict']]
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    ContentSafetyEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContentSafetyEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['CognitiveServicesSkuArgs']] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'Azure.ContentSafety'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "type", 'Azure.ContentSafety')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'Azure.ContentSafety'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['CognitiveServicesSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['CognitiveServicesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


if not MYPY:
    class EndpointDeploymentModelArgsDict(TypedDict):
        format: NotRequired[pulumi.Input[str]]
        """
        Model format
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Model name.
        """
        source: NotRequired[pulumi.Input[str]]
        """
        Optional. Deployment model source ARM resource ID.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Model version.
        """
elif False:
    EndpointDeploymentModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointDeploymentModelArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: Model format
        :param pulumi.Input[str] name: Model name.
        :param pulumi.Input[str] source: Optional. Deployment model source ARM resource ID.
        :param pulumi.Input[str] version: Model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Model format
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Model name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Model version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class JobServiceArgsDict(TypedDict):
        """
        Job endpoint definition
        """
        endpoint: NotRequired[pulumi.Input[str]]
        """
        Url for endpoint.
        """
        job_service_type: NotRequired[pulumi.Input[str]]
        """
        Endpoint type.
        """
        nodes: NotRequired[pulumi.Input['AllNodesArgsDict']]
        """
        Nodes that user would like to start the service on.
        If Nodes is not set or set to null, the service will only be started on leader node.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port for endpoint set by user.
        """
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Additional properties to set on the endpoint.
        """
elif False:
    JobServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobServiceArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 job_service_type: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input['AllNodesArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Job endpoint definition
        :param pulumi.Input[str] endpoint: Url for endpoint.
        :param pulumi.Input[str] job_service_type: Endpoint type.
        :param pulumi.Input['AllNodesArgs'] nodes: Nodes that user would like to start the service on.
               If Nodes is not set or set to null, the service will only be started on leader node.
        :param pulumi.Input[int] port: Port for endpoint set by user.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Additional properties to set on the endpoint.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if job_service_type is not None:
            pulumi.set(__self__, "job_service_type", job_service_type)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Url for endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="jobServiceType")
    def job_service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint type.
        """
        return pulumi.get(self, "job_service_type")

    @job_service_type.setter
    def job_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_service_type", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input['AllNodesArgs']]:
        """
        Nodes that user would like to start the service on.
        If Nodes is not set or set to null, the service will only be started on leader node.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input['AllNodesArgs']]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for endpoint set by user.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional properties to set on the endpoint.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


if not MYPY:
    class LabelCategoryArgsDict(TypedDict):
        """
        Label category definition
        """
        classes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgsDict']]]]
        """
        Dictionary of label classes in this category.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        Display name of the label category.
        """
        multi_select: NotRequired[pulumi.Input[Union[str, 'MultiSelect']]]
        """
        Indicates whether it is allowed to select multiple classes in this category.
        """
elif False:
    LabelCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelCategoryArgs:
    def __init__(__self__, *,
                 classes: Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 multi_select: Optional[pulumi.Input[Union[str, 'MultiSelect']]] = None):
        """
        Label category definition
        :param pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]] classes: Dictionary of label classes in this category.
        :param pulumi.Input[str] display_name: Display name of the label category.
        :param pulumi.Input[Union[str, 'MultiSelect']] multi_select: Indicates whether it is allowed to select multiple classes in this category.
        """
        if classes is not None:
            pulumi.set(__self__, "classes", classes)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if multi_select is None:
            multi_select = 'Disabled'
        if multi_select is not None:
            pulumi.set(__self__, "multi_select", multi_select)

    @property
    @pulumi.getter
    def classes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]]]:
        """
        Dictionary of label classes in this category.
        """
        return pulumi.get(self, "classes")

    @classes.setter
    def classes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]]]):
        pulumi.set(self, "classes", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the label category.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="multiSelect")
    def multi_select(self) -> Optional[pulumi.Input[Union[str, 'MultiSelect']]]:
        """
        Indicates whether it is allowed to select multiple classes in this category.
        """
        return pulumi.get(self, "multi_select")

    @multi_select.setter
    def multi_select(self, value: Optional[pulumi.Input[Union[str, 'MultiSelect']]]):
        pulumi.set(self, "multi_select", value)


if not MYPY:
    class LabelClassArgsDict(TypedDict):
        """
        Label class definition
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        Display name of the label class.
        """
        subclasses: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgsDict']]]]
        """
        Dictionary of subclasses of the label class.
        """
elif False:
    LabelClassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelClassArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 subclasses: Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]]] = None):
        """
        Label class definition
        :param pulumi.Input[str] display_name: Display name of the label class.
        :param pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]] subclasses: Dictionary of subclasses of the label class.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if subclasses is not None:
            pulumi.set(__self__, "subclasses", subclasses)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the label class.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def subclasses(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]]]:
        """
        Dictionary of subclasses of the label class.
        """
        return pulumi.get(self, "subclasses")

    @subclasses.setter
    def subclasses(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelClassArgs']]]]):
        pulumi.set(self, "subclasses", value)


if not MYPY:
    class LabelingDataConfigurationArgsDict(TypedDict):
        """
        Labeling data configuration definition
        """
        data_id: NotRequired[pulumi.Input[str]]
        """
        Resource Id of the data asset to perform labeling.
        """
        incremental_data_refresh: NotRequired[pulumi.Input[Union[str, 'IncrementalDataRefresh']]]
        """
        Indicates whether to enable incremental data refresh.
        """
elif False:
    LabelingDataConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelingDataConfigurationArgs:
    def __init__(__self__, *,
                 data_id: Optional[pulumi.Input[str]] = None,
                 incremental_data_refresh: Optional[pulumi.Input[Union[str, 'IncrementalDataRefresh']]] = None):
        """
        Labeling data configuration definition
        :param pulumi.Input[str] data_id: Resource Id of the data asset to perform labeling.
        :param pulumi.Input[Union[str, 'IncrementalDataRefresh']] incremental_data_refresh: Indicates whether to enable incremental data refresh.
        """
        if data_id is not None:
            pulumi.set(__self__, "data_id", data_id)
        if incremental_data_refresh is None:
            incremental_data_refresh = 'Disabled'
        if incremental_data_refresh is not None:
            pulumi.set(__self__, "incremental_data_refresh", incremental_data_refresh)

    @property
    @pulumi.getter(name="dataId")
    def data_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id of the data asset to perform labeling.
        """
        return pulumi.get(self, "data_id")

    @data_id.setter
    def data_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_id", value)

    @property
    @pulumi.getter(name="incrementalDataRefresh")
    def incremental_data_refresh(self) -> Optional[pulumi.Input[Union[str, 'IncrementalDataRefresh']]]:
        """
        Indicates whether to enable incremental data refresh.
        """
        return pulumi.get(self, "incremental_data_refresh")

    @incremental_data_refresh.setter
    def incremental_data_refresh(self, value: Optional[pulumi.Input[Union[str, 'IncrementalDataRefresh']]]):
        pulumi.set(self, "incremental_data_refresh", value)


if not MYPY:
    class LabelingJobImagePropertiesArgsDict(TypedDict):
        """
        Properties of a labeling job for image data
        """
        media_type: pulumi.Input[str]
        """
        Media type of data asset.
        Expected value is 'Image'.
        """
        annotation_type: NotRequired[pulumi.Input[Union[str, 'ImageAnnotationType']]]
        """
        Annotation type of image labeling job.
        """
elif False:
    LabelingJobImagePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelingJobImagePropertiesArgs:
    def __init__(__self__, *,
                 media_type: pulumi.Input[str],
                 annotation_type: Optional[pulumi.Input[Union[str, 'ImageAnnotationType']]] = None):
        """
        Properties of a labeling job for image data
        :param pulumi.Input[str] media_type: Media type of data asset.
               Expected value is 'Image'.
        :param pulumi.Input[Union[str, 'ImageAnnotationType']] annotation_type: Annotation type of image labeling job.
        """
        pulumi.set(__self__, "media_type", 'Image')
        if annotation_type is None:
            annotation_type = 'Classification'
        if annotation_type is not None:
            pulumi.set(__self__, "annotation_type", annotation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> pulumi.Input[str]:
        """
        Media type of data asset.
        Expected value is 'Image'.
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter(name="annotationType")
    def annotation_type(self) -> Optional[pulumi.Input[Union[str, 'ImageAnnotationType']]]:
        """
        Annotation type of image labeling job.
        """
        return pulumi.get(self, "annotation_type")

    @annotation_type.setter
    def annotation_type(self, value: Optional[pulumi.Input[Union[str, 'ImageAnnotationType']]]):
        pulumi.set(self, "annotation_type", value)


if not MYPY:
    class LabelingJobInstructionsArgsDict(TypedDict):
        """
        Instructions for labeling job
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        The link to a page with detailed labeling instructions for labelers.
        """
elif False:
    LabelingJobInstructionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelingJobInstructionsArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Instructions for labeling job
        :param pulumi.Input[str] uri: The link to a page with detailed labeling instructions for labelers.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        The link to a page with detailed labeling instructions for labelers.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class LabelingJobTextPropertiesArgsDict(TypedDict):
        """
        Properties of a labeling job for text data
        """
        media_type: pulumi.Input[str]
        """
        Media type of data asset.
        Expected value is 'Text'.
        """
        annotation_type: NotRequired[pulumi.Input[Union[str, 'TextAnnotationType']]]
        """
        Annotation type of text labeling job.
        """
elif False:
    LabelingJobTextPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelingJobTextPropertiesArgs:
    def __init__(__self__, *,
                 media_type: pulumi.Input[str],
                 annotation_type: Optional[pulumi.Input[Union[str, 'TextAnnotationType']]] = None):
        """
        Properties of a labeling job for text data
        :param pulumi.Input[str] media_type: Media type of data asset.
               Expected value is 'Text'.
        :param pulumi.Input[Union[str, 'TextAnnotationType']] annotation_type: Annotation type of text labeling job.
        """
        pulumi.set(__self__, "media_type", 'Text')
        if annotation_type is None:
            annotation_type = 'Classification'
        if annotation_type is not None:
            pulumi.set(__self__, "annotation_type", annotation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> pulumi.Input[str]:
        """
        Media type of data asset.
        Expected value is 'Text'.
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter(name="annotationType")
    def annotation_type(self) -> Optional[pulumi.Input[Union[str, 'TextAnnotationType']]]:
        """
        Annotation type of text labeling job.
        """
        return pulumi.get(self, "annotation_type")

    @annotation_type.setter
    def annotation_type(self, value: Optional[pulumi.Input[Union[str, 'TextAnnotationType']]]):
        pulumi.set(self, "annotation_type", value)


if not MYPY:
    class LabelingJobArgsDict(TypedDict):
        """
        Labeling job definition
        """
        job_type: pulumi.Input[str]
        """
        Enum to determine the type of job.
        Expected value is 'Labeling'.
        """
        component_id: NotRequired[pulumi.Input[str]]
        """
        ARM resource ID of the component resource.
        """
        compute_id: NotRequired[pulumi.Input[str]]
        """
        ARM resource ID of the compute resource.
        """
        data_configuration: NotRequired[pulumi.Input['LabelingDataConfigurationArgsDict']]
        """
        Configuration of data used in the job.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The asset description text.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        Display name of job.
        """
        experiment_name: NotRequired[pulumi.Input[str]]
        """
        The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
        """
        identity: NotRequired[pulumi.Input[Union['AmlTokenArgsDict', 'ManagedIdentityArgsDict', 'UserIdentityArgsDict']]]
        """
        Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        Defaults to AmlToken if null.
        """
        is_archived: NotRequired[pulumi.Input[bool]]
        """
        Is the asset archived?
        """
        job_instructions: NotRequired[pulumi.Input['LabelingJobInstructionsArgsDict']]
        """
        Labeling instructions of the job.
        """
        label_categories: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['LabelCategoryArgsDict']]]]
        """
        Label categories of the job.
        """
        labeling_job_media_properties: NotRequired[pulumi.Input[Union['LabelingJobImagePropertiesArgsDict', 'LabelingJobTextPropertiesArgsDict']]]
        """
        Media type specific properties in the job.
        """
        ml_assist_configuration: NotRequired[pulumi.Input[Union['MLAssistConfigurationDisabledArgsDict', 'MLAssistConfigurationEnabledArgsDict']]]
        """
        Configuration of MLAssist feature in the job.
        """
        notification_setting: NotRequired[pulumi.Input['NotificationSettingArgsDict']]
        """
        Notification setting for the job
        """
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The asset property dictionary.
        """
        secrets_configuration: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['SecretConfigurationArgsDict']]]]
        """
        Configuration for secrets to be made available during runtime.
        """
        services: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['JobServiceArgsDict']]]]
        """
        List of JobEndpoints.
        For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Tag dictionary. Tags can be added, removed, and updated.
        """
elif False:
    LabelingJobArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelingJobArgs:
    def __init__(__self__, *,
                 job_type: pulumi.Input[str],
                 component_id: Optional[pulumi.Input[str]] = None,
                 compute_id: Optional[pulumi.Input[str]] = None,
                 data_configuration: Optional[pulumi.Input['LabelingDataConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 experiment_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[Union['AmlTokenArgs', 'ManagedIdentityArgs', 'UserIdentityArgs']]] = None,
                 is_archived: Optional[pulumi.Input[bool]] = None,
                 job_instructions: Optional[pulumi.Input['LabelingJobInstructionsArgs']] = None,
                 label_categories: Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelCategoryArgs']]]] = None,
                 labeling_job_media_properties: Optional[pulumi.Input[Union['LabelingJobImagePropertiesArgs', 'LabelingJobTextPropertiesArgs']]] = None,
                 ml_assist_configuration: Optional[pulumi.Input[Union['MLAssistConfigurationDisabledArgs', 'MLAssistConfigurationEnabledArgs']]] = None,
                 notification_setting: Optional[pulumi.Input['NotificationSettingArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secrets_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input['SecretConfigurationArgs']]]] = None,
                 services: Optional[pulumi.Input[Mapping[str, pulumi.Input['JobServiceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Labeling job definition
        :param pulumi.Input[str] job_type: Enum to determine the type of job.
               Expected value is 'Labeling'.
        :param pulumi.Input[str] component_id: ARM resource ID of the component resource.
        :param pulumi.Input[str] compute_id: ARM resource ID of the compute resource.
        :param pulumi.Input['LabelingDataConfigurationArgs'] data_configuration: Configuration of data used in the job.
        :param pulumi.Input[str] description: The asset description text.
        :param pulumi.Input[str] display_name: Display name of job.
        :param pulumi.Input[str] experiment_name: The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
        :param pulumi.Input[Union['AmlTokenArgs', 'ManagedIdentityArgs', 'UserIdentityArgs']] identity: Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
               Defaults to AmlToken if null.
        :param pulumi.Input[bool] is_archived: Is the asset archived?
        :param pulumi.Input['LabelingJobInstructionsArgs'] job_instructions: Labeling instructions of the job.
        :param pulumi.Input[Mapping[str, pulumi.Input['LabelCategoryArgs']]] label_categories: Label categories of the job.
        :param pulumi.Input[Union['LabelingJobImagePropertiesArgs', 'LabelingJobTextPropertiesArgs']] labeling_job_media_properties: Media type specific properties in the job.
        :param pulumi.Input[Union['MLAssistConfigurationDisabledArgs', 'MLAssistConfigurationEnabledArgs']] ml_assist_configuration: Configuration of MLAssist feature in the job.
        :param pulumi.Input['NotificationSettingArgs'] notification_setting: Notification setting for the job
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: The asset property dictionary.
        :param pulumi.Input[Mapping[str, pulumi.Input['SecretConfigurationArgs']]] secrets_configuration: Configuration for secrets to be made available during runtime.
        :param pulumi.Input[Mapping[str, pulumi.Input['JobServiceArgs']]] services: List of JobEndpoints.
               For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tag dictionary. Tags can be added, removed, and updated.
        """
        pulumi.set(__self__, "job_type", 'Labeling')
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if data_configuration is not None:
            pulumi.set(__self__, "data_configuration", data_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if experiment_name is None:
            experiment_name = 'Default'
        if experiment_name is not None:
            pulumi.set(__self__, "experiment_name", experiment_name)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if is_archived is None:
            is_archived = False
        if is_archived is not None:
            pulumi.set(__self__, "is_archived", is_archived)
        if job_instructions is not None:
            pulumi.set(__self__, "job_instructions", job_instructions)
        if label_categories is not None:
            pulumi.set(__self__, "label_categories", label_categories)
        if labeling_job_media_properties is not None:
            pulumi.set(__self__, "labeling_job_media_properties", labeling_job_media_properties)
        if ml_assist_configuration is not None:
            pulumi.set(__self__, "ml_assist_configuration", ml_assist_configuration)
        if notification_setting is not None:
            pulumi.set(__self__, "notification_setting", notification_setting)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secrets_configuration is not None:
            pulumi.set(__self__, "secrets_configuration", secrets_configuration)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> pulumi.Input[str]:
        """
        Enum to determine the type of job.
        Expected value is 'Labeling'.
        """
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_type", value)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM resource ID of the component resource.
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_id", value)

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[pulumi.Input[str]]:
        """
        ARM resource ID of the compute resource.
        """
        return pulumi.get(self, "compute_id")

    @compute_id.setter
    def compute_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_id", value)

    @property
    @pulumi.getter(name="dataConfiguration")
    def data_configuration(self) -> Optional[pulumi.Input['LabelingDataConfigurationArgs']]:
        """
        Configuration of data used in the job.
        """
        return pulumi.get(self, "data_configuration")

    @data_configuration.setter
    def data_configuration(self, value: Optional[pulumi.Input['LabelingDataConfigurationArgs']]):
        pulumi.set(self, "data_configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The asset description text.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of job.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="experimentName")
    def experiment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
        """
        return pulumi.get(self, "experiment_name")

    @experiment_name.setter
    def experiment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "experiment_name", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input[Union['AmlTokenArgs', 'ManagedIdentityArgs', 'UserIdentityArgs']]]:
        """
        Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        Defaults to AmlToken if null.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input[Union['AmlTokenArgs', 'ManagedIdentityArgs', 'UserIdentityArgs']]]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the asset archived?
        """
        return pulumi.get(self, "is_archived")

    @is_archived.setter
    def is_archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archived", value)

    @property
    @pulumi.getter(name="jobInstructions")
    def job_instructions(self) -> Optional[pulumi.Input['LabelingJobInstructionsArgs']]:
        """
        Labeling instructions of the job.
        """
        return pulumi.get(self, "job_instructions")

    @job_instructions.setter
    def job_instructions(self, value: Optional[pulumi.Input['LabelingJobInstructionsArgs']]):
        pulumi.set(self, "job_instructions", value)

    @property
    @pulumi.getter(name="labelCategories")
    def label_categories(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelCategoryArgs']]]]:
        """
        Label categories of the job.
        """
        return pulumi.get(self, "label_categories")

    @label_categories.setter
    def label_categories(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['LabelCategoryArgs']]]]):
        pulumi.set(self, "label_categories", value)

    @property
    @pulumi.getter(name="labelingJobMediaProperties")
    def labeling_job_media_properties(self) -> Optional[pulumi.Input[Union['LabelingJobImagePropertiesArgs', 'LabelingJobTextPropertiesArgs']]]:
        """
        Media type specific properties in the job.
        """
        return pulumi.get(self, "labeling_job_media_properties")

    @labeling_job_media_properties.setter
    def labeling_job_media_properties(self, value: Optional[pulumi.Input[Union['LabelingJobImagePropertiesArgs', 'LabelingJobTextPropertiesArgs']]]):
        pulumi.set(self, "labeling_job_media_properties", value)

    @property
    @pulumi.getter(name="mlAssistConfiguration")
    def ml_assist_configuration(self) -> Optional[pulumi.Input[Union['MLAssistConfigurationDisabledArgs', 'MLAssistConfigurationEnabledArgs']]]:
        """
        Configuration of MLAssist feature in the job.
        """
        return pulumi.get(self, "ml_assist_configuration")

    @ml_assist_configuration.setter
    def ml_assist_configuration(self, value: Optional[pulumi.Input[Union['MLAssistConfigurationDisabledArgs', 'MLAssistConfigurationEnabledArgs']]]):
        pulumi.set(self, "ml_assist_configuration", value)

    @property
    @pulumi.getter(name="notificationSetting")
    def notification_setting(self) -> Optional[pulumi.Input['NotificationSettingArgs']]:
        """
        Notification setting for the job
        """
        return pulumi.get(self, "notification_setting")

    @notification_setting.setter
    def notification_setting(self, value: Optional[pulumi.Input['NotificationSettingArgs']]):
        pulumi.set(self, "notification_setting", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The asset property dictionary.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="secretsConfiguration")
    def secrets_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SecretConfigurationArgs']]]]:
        """
        Configuration for secrets to be made available during runtime.
        """
        return pulumi.get(self, "secrets_configuration")

    @secrets_configuration.setter
    def secrets_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SecretConfigurationArgs']]]]):
        pulumi.set(self, "secrets_configuration", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['JobServiceArgs']]]]:
        """
        List of JobEndpoints.
        For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['JobServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tag dictionary. Tags can be added, removed, and updated.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class MLAssistConfigurationDisabledArgsDict(TypedDict):
        """
        Labeling MLAssist configuration definition when MLAssist is disabled
        """
        ml_assist: pulumi.Input[str]
        """

        Expected value is 'Disabled'.
        """
elif False:
    MLAssistConfigurationDisabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MLAssistConfigurationDisabledArgs:
    def __init__(__self__, *,
                 ml_assist: pulumi.Input[str]):
        """
        Labeling MLAssist configuration definition when MLAssist is disabled
        :param pulumi.Input[str] ml_assist: 
               Expected value is 'Disabled'.
        """
        pulumi.set(__self__, "ml_assist", 'Disabled')

    @property
    @pulumi.getter(name="mlAssist")
    def ml_assist(self) -> pulumi.Input[str]:
        """

        Expected value is 'Disabled'.
        """
        return pulumi.get(self, "ml_assist")

    @ml_assist.setter
    def ml_assist(self, value: pulumi.Input[str]):
        pulumi.set(self, "ml_assist", value)


if not MYPY:
    class MLAssistConfigurationEnabledArgsDict(TypedDict):
        """
        Labeling MLAssist configuration definition when MLAssist is enabled
        """
        inferencing_compute_binding: pulumi.Input[str]
        """
        [Required] AML compute binding used in inferencing.
        """
        ml_assist: pulumi.Input[str]
        """

        Expected value is 'Enabled'.
        """
        training_compute_binding: pulumi.Input[str]
        """
        [Required] AML compute binding used in training.
        """
elif False:
    MLAssistConfigurationEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MLAssistConfigurationEnabledArgs:
    def __init__(__self__, *,
                 inferencing_compute_binding: pulumi.Input[str],
                 ml_assist: pulumi.Input[str],
                 training_compute_binding: pulumi.Input[str]):
        """
        Labeling MLAssist configuration definition when MLAssist is enabled
        :param pulumi.Input[str] inferencing_compute_binding: [Required] AML compute binding used in inferencing.
        :param pulumi.Input[str] ml_assist: 
               Expected value is 'Enabled'.
        :param pulumi.Input[str] training_compute_binding: [Required] AML compute binding used in training.
        """
        pulumi.set(__self__, "inferencing_compute_binding", inferencing_compute_binding)
        pulumi.set(__self__, "ml_assist", 'Enabled')
        pulumi.set(__self__, "training_compute_binding", training_compute_binding)

    @property
    @pulumi.getter(name="inferencingComputeBinding")
    def inferencing_compute_binding(self) -> pulumi.Input[str]:
        """
        [Required] AML compute binding used in inferencing.
        """
        return pulumi.get(self, "inferencing_compute_binding")

    @inferencing_compute_binding.setter
    def inferencing_compute_binding(self, value: pulumi.Input[str]):
        pulumi.set(self, "inferencing_compute_binding", value)

    @property
    @pulumi.getter(name="mlAssist")
    def ml_assist(self) -> pulumi.Input[str]:
        """

        Expected value is 'Enabled'.
        """
        return pulumi.get(self, "ml_assist")

    @ml_assist.setter
    def ml_assist(self, value: pulumi.Input[str]):
        pulumi.set(self, "ml_assist", value)

    @property
    @pulumi.getter(name="trainingComputeBinding")
    def training_compute_binding(self) -> pulumi.Input[str]:
        """
        [Required] AML compute binding used in training.
        """
        return pulumi.get(self, "training_compute_binding")

    @training_compute_binding.setter
    def training_compute_binding(self, value: pulumi.Input[str]):
        pulumi.set(self, "training_compute_binding", value)


if not MYPY:
    class ManagedIdentityArgsDict(TypedDict):
        """
        Managed identity configuration.
        """
        identity_type: pulumi.Input[str]
        """
        Enum to determine identity framework.
        Expected value is 'Managed'.
        """
        client_id: NotRequired[pulumi.Input[str]]
        """
        Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
        """
        object_id: NotRequired[pulumi.Input[str]]
        """
        Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
        """
elif False:
    ManagedIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedIdentityArgs:
    def __init__(__self__, *,
                 identity_type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        Managed identity configuration.
        :param pulumi.Input[str] identity_type: Enum to determine identity framework.
               Expected value is 'Managed'.
        :param pulumi.Input[str] client_id: Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
        :param pulumi.Input[str] object_id: Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
        :param pulumi.Input[str] resource_id: Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
        """
        pulumi.set(__self__, "identity_type", 'Managed')
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> pulumi.Input[str]:
        """
        Enum to determine identity framework.
        Expected value is 'Managed'.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


if not MYPY:
    class ManagedOnlineEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'managedOnlineEndpoint'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
elif False:
    ManagedOnlineEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedOnlineEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'managedOnlineEndpoint'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        """
        pulumi.set(__self__, "type", 'managedOnlineEndpoint')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'managedOnlineEndpoint'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class MarketplaceSubscriptionArgsDict(TypedDict):
        model_id: pulumi.Input[str]
        """
        [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
elif False:
    MarketplaceSubscriptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MarketplaceSubscriptionArgs:
    def __init__(__self__, *,
                 model_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] model_id: [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
        pulumi.set(__self__, "model_id", model_id)

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[str]:
        """
        [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class NotificationSettingArgsDict(TypedDict):
        """
        Configuration for notification.
        """
        email_on: NotRequired[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EmailNotificationEnableType']]]]]
        """
        Send email notification to user on specified notification type
        """
        emails: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
        """
        webhooks: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['AzureDevOpsWebhookArgsDict']]]]
        """
        Send webhook callback to a service. Key is a user-provided name for the webhook.
        """
elif False:
    NotificationSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationSettingArgs:
    def __init__(__self__, *,
                 email_on: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EmailNotificationEnableType']]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 webhooks: Optional[pulumi.Input[Mapping[str, pulumi.Input['AzureDevOpsWebhookArgs']]]] = None):
        """
        Configuration for notification.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'EmailNotificationEnableType']]]] email_on: Send email notification to user on specified notification type
        :param pulumi.Input[Sequence[pulumi.Input[str]]] emails: This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
        :param pulumi.Input[Mapping[str, pulumi.Input['AzureDevOpsWebhookArgs']]] webhooks: Send webhook callback to a service. Key is a user-provided name for the webhook.
        """
        if email_on is not None:
            pulumi.set(__self__, "email_on", email_on)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if webhooks is not None:
            pulumi.set(__self__, "webhooks", webhooks)

    @property
    @pulumi.getter(name="emailOn")
    def email_on(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EmailNotificationEnableType']]]]]:
        """
        Send email notification to user on specified notification type
        """
        return pulumi.get(self, "email_on")

    @email_on.setter
    def email_on(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'EmailNotificationEnableType']]]]]):
        pulumi.set(self, "email_on", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def webhooks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['AzureDevOpsWebhookArgs']]]]:
        """
        Send webhook callback to a service. Key is a user-provided name for the webhook.
        """
        return pulumi.get(self, "webhooks")

    @webhooks.setter
    def webhooks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['AzureDevOpsWebhookArgs']]]]):
        pulumi.set(self, "webhooks", value)


if not MYPY:
    class OpenAIEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'Azure.OpenAI'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        sku: NotRequired[pulumi.Input['CognitiveServicesSkuArgsDict']]
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    OpenAIEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpenAIEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['CognitiveServicesSkuArgs']] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'Azure.OpenAI'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "type", 'Azure.OpenAI')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'Azure.OpenAI'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['CognitiveServicesSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['CognitiveServicesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


if not MYPY:
    class SecretConfigurationArgsDict(TypedDict):
        """
        Secret Configuration definition.
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        Secret Uri.
        Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
        """
        workspace_secret_name: NotRequired[pulumi.Input[str]]
        """
        Name of secret in workspace key vault.
        """
elif False:
    SecretConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretConfigurationArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None,
                 workspace_secret_name: Optional[pulumi.Input[str]] = None):
        """
        Secret Configuration definition.
        :param pulumi.Input[str] uri: Secret Uri.
               Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
        :param pulumi.Input[str] workspace_secret_name: Name of secret in workspace key vault.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if workspace_secret_name is not None:
            pulumi.set(__self__, "workspace_secret_name", workspace_secret_name)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        Secret Uri.
        Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="workspaceSecretName")
    def workspace_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of secret in workspace key vault.
        """
        return pulumi.get(self, "workspace_secret_name")

    @workspace_secret_name.setter
    def workspace_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_secret_name", value)


if not MYPY:
    class ServerlessOfferArgsDict(TypedDict):
        offer_name: pulumi.Input[str]
        """
        [Required] The name of the Serverless Offer
        """
        publisher: pulumi.Input[str]
        """
        [Required] Publisher name of the Serverless Offer
        """
elif False:
    ServerlessOfferArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerlessOfferArgs:
    def __init__(__self__, *,
                 offer_name: pulumi.Input[str],
                 publisher: pulumi.Input[str]):
        """
        :param pulumi.Input[str] offer_name: [Required] The name of the Serverless Offer
        :param pulumi.Input[str] publisher: [Required] Publisher name of the Serverless Offer
        """
        pulumi.set(__self__, "offer_name", offer_name)
        pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter(name="offerName")
    def offer_name(self) -> pulumi.Input[str]:
        """
        [Required] The name of the Serverless Offer
        """
        return pulumi.get(self, "offer_name")

    @offer_name.setter
    def offer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "offer_name", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        [Required] Publisher name of the Serverless Offer
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        The resource model definition representing SKU
        """
        name: pulumi.Input[str]
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        The resource model definition representing SKU
        :param pulumi.Input[str] name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param pulumi.Input[int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class SpeechEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'Azure.Speech'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        sku: NotRequired[pulumi.Input['CognitiveServicesSkuArgsDict']]
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    SpeechEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SpeechEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['CognitiveServicesSkuArgs']] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'Azure.Speech'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "type", 'Azure.Speech')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'Azure.Speech'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['CognitiveServicesSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['CognitiveServicesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


if not MYPY:
    class UserIdentityArgsDict(TypedDict):
        """
        User identity configuration.
        """
        identity_type: pulumi.Input[str]
        """
        Enum to determine identity framework.
        Expected value is 'UserIdentity'.
        """
elif False:
    UserIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserIdentityArgs:
    def __init__(__self__, *,
                 identity_type: pulumi.Input[str]):
        """
        User identity configuration.
        :param pulumi.Input[str] identity_type: Enum to determine identity framework.
               Expected value is 'UserIdentity'.
        """
        pulumi.set(__self__, "identity_type", 'UserIdentity')

    @property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> pulumi.Input[str]:
        """
        Enum to determine identity framework.
        Expected value is 'UserIdentity'.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_type", value)


