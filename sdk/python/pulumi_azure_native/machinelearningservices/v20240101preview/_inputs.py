# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'CognitiveServicesSkuArgs',
    'CognitiveServicesSkuArgsDict',
    'ContentSafetyEndpointDeploymentResourcePropertiesArgs',
    'ContentSafetyEndpointDeploymentResourcePropertiesArgsDict',
    'EndpointDeploymentModelArgs',
    'EndpointDeploymentModelArgsDict',
    'ManagedOnlineEndpointDeploymentResourcePropertiesArgs',
    'ManagedOnlineEndpointDeploymentResourcePropertiesArgsDict',
    'MarketplaceSubscriptionArgs',
    'MarketplaceSubscriptionArgsDict',
    'OpenAIEndpointDeploymentResourcePropertiesArgs',
    'OpenAIEndpointDeploymentResourcePropertiesArgsDict',
    'SpeechEndpointDeploymentResourcePropertiesArgs',
    'SpeechEndpointDeploymentResourcePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class CognitiveServicesSkuArgsDict(TypedDict):
        capacity: NotRequired[pulumi.Input[int]]
        family: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        tier: NotRequired[pulumi.Input[str]]
elif False:
    CognitiveServicesSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CognitiveServicesSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class ContentSafetyEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'Azure.ContentSafety'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        sku: NotRequired[pulumi.Input['CognitiveServicesSkuArgsDict']]
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    ContentSafetyEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContentSafetyEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['CognitiveServicesSkuArgs']] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'Azure.ContentSafety'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "type", 'Azure.ContentSafety')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'Azure.ContentSafety'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['CognitiveServicesSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['CognitiveServicesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


if not MYPY:
    class EndpointDeploymentModelArgsDict(TypedDict):
        format: NotRequired[pulumi.Input[str]]
        """
        Model format
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Model name.
        """
        source: NotRequired[pulumi.Input[str]]
        """
        Optional. Deployment model source ARM resource ID.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Model version.
        """
elif False:
    EndpointDeploymentModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointDeploymentModelArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: Model format
        :param pulumi.Input[str] name: Model name.
        :param pulumi.Input[str] source: Optional. Deployment model source ARM resource ID.
        :param pulumi.Input[str] version: Model version.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Model format
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Model name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Model version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ManagedOnlineEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'managedOnlineEndpoint'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
elif False:
    ManagedOnlineEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedOnlineEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'managedOnlineEndpoint'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        """
        pulumi.set(__self__, "type", 'managedOnlineEndpoint')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'managedOnlineEndpoint'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)


if not MYPY:
    class MarketplaceSubscriptionArgsDict(TypedDict):
        model_id: pulumi.Input[str]
        """
        [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
elif False:
    MarketplaceSubscriptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MarketplaceSubscriptionArgs:
    def __init__(__self__, *,
                 model_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] model_id: [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
        pulumi.set(__self__, "model_id", model_id)

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[str]:
        """
        [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
        """
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class OpenAIEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'Azure.OpenAI'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        sku: NotRequired[pulumi.Input['CognitiveServicesSkuArgsDict']]
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    OpenAIEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpenAIEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['CognitiveServicesSkuArgs']] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'Azure.OpenAI'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "type", 'Azure.OpenAI')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'Azure.OpenAI'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['CognitiveServicesSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['CognitiveServicesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


if not MYPY:
    class SpeechEndpointDeploymentResourcePropertiesArgsDict(TypedDict):
        model: pulumi.Input['EndpointDeploymentModelArgsDict']
        """
        Model used for the endpoint deployment.
        """
        type: pulumi.Input[str]
        """
        Kind of the deployment.
        Expected value is 'Azure.Speech'.
        """
        failure_reason: NotRequired[pulumi.Input[str]]
        """
        The failure reason if the creation failed.
        """
        rai_policy_name: NotRequired[pulumi.Input[str]]
        """
        The name of RAI policy.
        """
        sku: NotRequired[pulumi.Input['CognitiveServicesSkuArgsDict']]
        version_upgrade_option: NotRequired[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]
        """
        Deployment model version upgrade option.
        """
elif False:
    SpeechEndpointDeploymentResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SpeechEndpointDeploymentResourcePropertiesArgs:
    def __init__(__self__, *,
                 model: pulumi.Input['EndpointDeploymentModelArgs'],
                 type: pulumi.Input[str],
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 rai_policy_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['CognitiveServicesSkuArgs']] = None,
                 version_upgrade_option: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]] = None):
        """
        :param pulumi.Input['EndpointDeploymentModelArgs'] model: Model used for the endpoint deployment.
        :param pulumi.Input[str] type: Kind of the deployment.
               Expected value is 'Azure.Speech'.
        :param pulumi.Input[str] failure_reason: The failure reason if the creation failed.
        :param pulumi.Input[str] rai_policy_name: The name of RAI policy.
        :param pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']] version_upgrade_option: Deployment model version upgrade option.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "type", 'Azure.Speech')
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if rai_policy_name is not None:
            pulumi.set(__self__, "rai_policy_name", rai_policy_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version_upgrade_option is not None:
            pulumi.set(__self__, "version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input['EndpointDeploymentModelArgs']:
        """
        Model used for the endpoint deployment.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input['EndpointDeploymentModelArgs']):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Kind of the deployment.
        Expected value is 'Azure.Speech'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The failure reason if the creation failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @rai_policy_name.setter
    def rai_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rai_policy_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['CognitiveServicesSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['CognitiveServicesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")

    @version_upgrade_option.setter
    def version_upgrade_option(self, value: Optional[pulumi.Input[Union[str, 'DeploymentModelVersionUpgradeOption']]]):
        pulumi.set(self, "version_upgrade_option", value)


