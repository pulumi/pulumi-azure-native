# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'ListInferenceGroupDeltaModelsAsyncResult',
    'AwaitableListInferenceGroupDeltaModelsAsyncResult',
    'list_inference_group_delta_models_async',
    'list_inference_group_delta_models_async_output',
]

@pulumi.output_type
class ListInferenceGroupDeltaModelsAsyncResult:
    """
    A paginated list of String entities.
    """
    def __init__(__self__, next_link=None, value=None):
        if next_link and not isinstance(next_link, str):
            raise TypeError("Expected argument 'next_link' to be a str")
        pulumi.set(__self__, "next_link", next_link)
        if value and not isinstance(value, list):
            raise TypeError("Expected argument 'value' to be a list")
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="nextLink")
    def next_link(self) -> Optional[str]:
        """
        The link to the next page of String objects. If null, there are no additional pages.
        """
        return pulumi.get(self, "next_link")

    @property
    @pulumi.getter
    def value(self) -> Optional[Sequence[str]]:
        """
        An array of objects of type String.
        """
        return pulumi.get(self, "value")


class AwaitableListInferenceGroupDeltaModelsAsyncResult(ListInferenceGroupDeltaModelsAsyncResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListInferenceGroupDeltaModelsAsyncResult(
            next_link=self.next_link,
            value=self.value)


def list_inference_group_delta_models_async(count: Optional[int] = None,
                                            group_name: Optional[str] = None,
                                            pool_name: Optional[str] = None,
                                            resource_group_name: Optional[str] = None,
                                            skip_token: Optional[str] = None,
                                            target_base_model: Optional[str] = None,
                                            workspace_name: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListInferenceGroupDeltaModelsAsyncResult:
    """
    A paginated list of String entities.


    :param int count: Gets or sets number of delta models to return. Default: -1, means that all will be returned.
    :param str group_name: InferenceGroup name.
    :param str pool_name: InferencePool name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str skip_token: Gets or sets skip token for paginated response.
    :param str target_base_model: Gets or sets target base model.
    :param str workspace_name: Name of Azure Machine Learning workspace.
    """
    __args__ = dict()
    __args__['count'] = count
    __args__['groupName'] = group_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['skipToken'] = skip_token
    __args__['targetBaseModel'] = target_base_model
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:machinelearningservices/v20241001preview:listInferenceGroupDeltaModelsAsync', __args__, opts=opts, typ=ListInferenceGroupDeltaModelsAsyncResult).value

    return AwaitableListInferenceGroupDeltaModelsAsyncResult(
        next_link=pulumi.get(__ret__, 'next_link'),
        value=pulumi.get(__ret__, 'value'))
def list_inference_group_delta_models_async_output(count: Optional[pulumi.Input[Optional[int]]] = None,
                                                   group_name: Optional[pulumi.Input[str]] = None,
                                                   pool_name: Optional[pulumi.Input[str]] = None,
                                                   resource_group_name: Optional[pulumi.Input[str]] = None,
                                                   skip_token: Optional[pulumi.Input[Optional[str]]] = None,
                                                   target_base_model: Optional[pulumi.Input[Optional[str]]] = None,
                                                   workspace_name: Optional[pulumi.Input[str]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListInferenceGroupDeltaModelsAsyncResult]:
    """
    A paginated list of String entities.


    :param int count: Gets or sets number of delta models to return. Default: -1, means that all will be returned.
    :param str group_name: InferenceGroup name.
    :param str pool_name: InferencePool name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str skip_token: Gets or sets skip token for paginated response.
    :param str target_base_model: Gets or sets target base model.
    :param str workspace_name: Name of Azure Machine Learning workspace.
    """
    __args__ = dict()
    __args__['count'] = count
    __args__['groupName'] = group_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['skipToken'] = skip_token
    __args__['targetBaseModel'] = target_base_model
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:machinelearningservices/v20241001preview:listInferenceGroupDeltaModelsAsync', __args__, opts=opts, typ=ListInferenceGroupDeltaModelsAsyncResult)
    return __ret__.apply(lambda __response__: ListInferenceGroupDeltaModelsAsyncResult(
        next_link=pulumi.get(__response__, 'next_link'),
        value=pulumi.get(__response__, 'value')))
