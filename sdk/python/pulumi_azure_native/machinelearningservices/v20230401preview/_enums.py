# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'ApplicationSharingPolicy',
    'AutoDeleteCondition',
    'AutoRebuildSetting',
    'BatchDeploymentConfigurationType',
    'BatchLoggingLevel',
    'BatchOutputAction',
    'BlockedTransformers',
    'CategoricalDataDriftMetric',
    'CategoricalDataQualityMetric',
    'CategoricalPredictionDriftMetric',
    'ClassificationModelPerformanceMetric',
    'ClassificationModels',
    'ClassificationMultilabelPrimaryMetrics',
    'ClassificationPrimaryMetrics',
    'ClusterPurpose',
    'ComputeInstanceAuthorizationType',
    'ComputePowerAction',
    'ComputeType',
    'ConnectionAuthType',
    'ConnectionCategory',
    'ContainerType',
    'CredentialsType',
    'DataCollectionMode',
    'DataImportSourceType',
    'DataType',
    'DatastoreType',
    'DistributionType',
    'EarlyTerminationPolicyType',
    'EgressPublicNetworkAccessType',
    'EmailNotificationEnableType',
    'EncryptionStatus',
    'EndpointAuthMode',
    'EndpointComputeType',
    'EndpointServiceConnectionStatus',
    'EnvironmentVariableType',
    'FeatureAttributionMetric',
    'FeatureDataType',
    'FeatureLags',
    'FeaturizationMode',
    'ForecastHorizonMode',
    'ForecastingModels',
    'ForecastingPrimaryMetrics',
    'Goal',
    'IdentityConfigurationType',
    'ImageAnnotationType',
    'ImageType',
    'IncrementalDataRefresh',
    'InputDeliveryMode',
    'InstanceSegmentationPrimaryMetrics',
    'IsolationMode',
    'JobInputType',
    'JobLimitsType',
    'JobOutputType',
    'JobTier',
    'JobType',
    'LearningRateScheduler',
    'LoadBalancerType',
    'LogTrainingMetrics',
    'LogValidationLoss',
    'LogVerbosity',
    'MLAssistConfigurationType',
    'MLFlowAutologgerState',
    'ManagedNetworkStatus',
    'ManagedServiceIdentityType',
    'MaterializationStoreType',
    'MediaType',
    'MlflowAutologger',
    'ModelSize',
    'MonitoringAlertNotificationType',
    'MonitoringFeatureDataType',
    'MonitoringFeatureFilterType',
    'MonitoringInputDataContext',
    'MonitoringModelType',
    'MonitoringNotificationMode',
    'MonitoringSignalType',
    'MultiSelect',
    'NCrossValidationsMode',
    'NlpLearningRateScheduler',
    'NodesValueType',
    'NumericalDataDriftMetric',
    'NumericalDataQualityMetric',
    'NumericalPredictionDriftMetric',
    'ObjectDetectionPrimaryMetrics',
    'OneLakeArtifactType',
    'OperatingSystemType',
    'OsType',
    'OutputDeliveryMode',
    'PrivateEndpointServiceConnectionStatus',
    'ProtectionLevel',
    'Protocol',
    'PublicNetworkAccess',
    'PublicNetworkAccessType',
    'RandomSamplingAlgorithmRule',
    'RecurrenceFrequency',
    'ReferenceType',
    'RegressionModelPerformanceMetric',
    'RegressionModels',
    'RegressionPrimaryMetrics',
    'RemoteLoginPortPublicAccess',
    'RollingRateType',
    'RuleCategory',
    'RuleStatus',
    'RuleType',
    'SamplingAlgorithmType',
    'ScaleType',
    'ScheduleActionType',
    'ScheduleProvisioningState',
    'ScheduleStatus',
    'SeasonalityMode',
    'SecretsType',
    'ServiceDataAccessAuthIdentity',
    'ShortSeriesHandlingConfiguration',
    'SkuTier',
    'SparkJobEntryType',
    'SshPublicAccess',
    'SslConfigStatus',
    'StackMetaLearnerType',
    'StochasticOptimizer',
    'TargetAggregationFunction',
    'TargetLagsMode',
    'TargetRollingWindowSizeMode',
    'TaskType',
    'TextAnnotationType',
    'TrainingMode',
    'TriggerType',
    'UseStl',
    'ValidationMetricType',
    'ValueFormat',
    'VmPriority',
    'VolumeDefinitionType',
    'WebhookType',
    'WeekDay',
]


class ApplicationSharingPolicy(str, Enum):
    PERSONAL = "Personal"
    SHARED = "Shared"


class AutoDeleteCondition(str, Enum):
    CREATED_GREATER_THAN = "CreatedGreaterThan"
    LAST_ACCESSED_GREATER_THAN = "LastAccessedGreaterThan"


class AutoRebuildSetting(str, Enum):
    DISABLED = "Disabled"
    ON_BASE_IMAGE_UPDATE = "OnBaseImageUpdate"


class BatchDeploymentConfigurationType(str, Enum):
    MODEL = "Model"
    PIPELINE_COMPONENT = "PipelineComponent"


class BatchLoggingLevel(str, Enum):
    INFO = "Info"
    WARNING = "Warning"
    DEBUG = "Debug"


class BatchOutputAction(str, Enum):
    SUMMARY_ONLY = "SummaryOnly"
    APPEND_ROW = "AppendRow"


class BlockedTransformers(str, Enum):
    TEXT_TARGET_ENCODER = "TextTargetEncoder"
    """
    Target encoding for text data.
    """
    ONE_HOT_ENCODER = "OneHotEncoder"
    """
    Ohe hot encoding creates a binary feature transformation.
    """
    CAT_TARGET_ENCODER = "CatTargetEncoder"
    """
    Target encoding for categorical data.
    """
    TF_IDF = "TfIdf"
    """
    Tf-Idf stands for, term-frequency times inverse document-frequency. This is a common term weighting scheme for identifying information from documents.
    """
    WO_E_TARGET_ENCODER = "WoETargetEncoder"
    """
    Weight of Evidence encoding is a technique used to encode categorical variables. It uses the natural log of the P(1)/P(0) to create weights.
    """
    LABEL_ENCODER = "LabelEncoder"
    """
    Label encoder converts labels/categorical variables in a numerical form.
    """
    WORD_EMBEDDING = "WordEmbedding"
    """
    Word embedding helps represents words or phrases as a vector, or a series of numbers.
    """
    NAIVE_BAYES = "NaiveBayes"
    """
    Naive Bayes is a classified that is used for classification of discrete features that are categorically distributed.
    """
    COUNT_VECTORIZER = "CountVectorizer"
    """
    Count Vectorizer converts a collection of text documents to a matrix of token counts.
    """
    HASH_ONE_HOT_ENCODER = "HashOneHotEncoder"
    """
    Hashing One Hot Encoder can turn categorical variables into a limited number of new features. This is often used for high-cardinality categorical features.
    """


class CategoricalDataDriftMetric(str, Enum):
    JENSEN_SHANNON_DISTANCE = "JensenShannonDistance"
    """
    The Jensen Shannon Distance (JSD) metric.
    """
    POPULATION_STABILITY_INDEX = "PopulationStabilityIndex"
    """
    The Population Stability Index (PSI) metric.
    """
    PEARSONS_CHI_SQUARED_TEST = "PearsonsChiSquaredTest"
    """
    The Pearsons Chi Squared Test metric.
    """


class CategoricalDataQualityMetric(str, Enum):
    NULL_VALUE_RATE = "NullValueRate"
    """
    Calculates the rate of null values.
    """
    DATA_TYPE_ERROR_RATE = "DataTypeErrorRate"
    """
    Calculates the rate of data type errors.
    """
    OUT_OF_BOUNDS_RATE = "OutOfBoundsRate"
    """
    Calculates the rate values are out of bounds.
    """


class CategoricalPredictionDriftMetric(str, Enum):
    JENSEN_SHANNON_DISTANCE = "JensenShannonDistance"
    """
    The Jensen Shannon Distance (JSD) metric.
    """
    POPULATION_STABILITY_INDEX = "PopulationStabilityIndex"
    """
    The Population Stability Index (PSI) metric.
    """
    PEARSONS_CHI_SQUARED_TEST = "PearsonsChiSquaredTest"
    """
    The Pearsons Chi Squared Test metric.
    """


class ClassificationModelPerformanceMetric(str, Enum):
    ACCURACY = "Accuracy"
    """
    Calculates the accuracy of the model predictions.
    """
    PRECISION = "Precision"
    """
    Calculates the precision of the model predictions.
    """
    RECALL = "Recall"
    """
    Calculates the recall of the model predictions.
    """
    F1_SCORE = "F1Score"
    """
    Calculates the F1 score of the model predictions.
    """


class ClassificationModels(str, Enum):
    LOGISTIC_REGRESSION = "LogisticRegression"
    """
    Logistic regression is a fundamental classification technique.
    It belongs to the group of linear classifiers and is somewhat similar to polynomial and linear regression.
    Logistic regression is fast and relatively uncomplicated, and it's convenient for you to interpret the results.
    Although it's essentially a method for binary classification, it can also be applied to multiclass problems.
    """
    SGD = "SGD"
    """
    SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
    to find the model parameters that correspond to the best fit between predicted and actual outputs.
    """
    MULTINOMIAL_NAIVE_BAYES = "MultinomialNaiveBayes"
    """
    The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification).
    The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work.
    """
    BERNOULLI_NAIVE_BAYES = "BernoulliNaiveBayes"
    """
    Naive Bayes classifier for multivariate Bernoulli models.
    """
    SVM = "SVM"
    """
    A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.
    After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
    """
    LINEAR_SVM = "LinearSVM"
    """
    A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.
    After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
    Linear SVM performs best when input data is linear, i.e., data can be easily classified by drawing the straight line between classified values on a plotted graph.
    """
    KNN = "KNN"
    """
    K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
    which further means that the new data point will be assigned a value based on how closely it matches the points in the training set.
    """
    DECISION_TREE = "DecisionTree"
    """
    Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
    The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.
    """
    RANDOM_FOREST = "RandomForest"
    """
    Random forest is a supervised learning algorithm.
    The "forest" it builds, is an ensemble of decision trees, usually trained with the bagging method.
    The general idea of the bagging method is that a combination of learning models increases the overall result.
    """
    EXTREME_RANDOM_TREES = "ExtremeRandomTrees"
    """
    Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm.
    """
    LIGHT_GBM = "LightGBM"
    """
    LightGBM is a gradient boosting framework that uses tree based learning algorithms.
    """
    GRADIENT_BOOSTING = "GradientBoosting"
    """
    The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution.
    """
    XG_BOOST_CLASSIFIER = "XGBoostClassifier"
    """
    XGBoost: Extreme Gradient Boosting Algorithm. This algorithm is used for structured data where target column values can be divided into distinct class values.
    """


class ClassificationMultilabelPrimaryMetrics(str, Enum):
    AUC_WEIGHTED = "AUCWeighted"
    """
    AUC is the Area under the curve.
    This metric represents arithmetic mean of the score for each class,
    weighted by the number of true instances in each class.
    """
    ACCURACY = "Accuracy"
    """
    Accuracy is the ratio of predictions that exactly match the true class labels.
    """
    NORM_MACRO_RECALL = "NormMacroRecall"
    """
    Normalized macro recall is recall macro-averaged and normalized, so that random
    performance has a score of 0, and perfect performance has a score of 1.
    """
    AVERAGE_PRECISION_SCORE_WEIGHTED = "AveragePrecisionScoreWeighted"
    """
    The arithmetic mean of the average precision score for each class, weighted by
    the number of true instances in each class.
    """
    PRECISION_SCORE_WEIGHTED = "PrecisionScoreWeighted"
    """
    The arithmetic mean of precision for each class, weighted by number of true instances in each class.
    """
    IOU = "IOU"
    """
    Intersection Over Union. Intersection of predictions divided by union of predictions.
    """


class ClassificationPrimaryMetrics(str, Enum):
    AUC_WEIGHTED = "AUCWeighted"
    """
    AUC is the Area under the curve.
    This metric represents arithmetic mean of the score for each class,
    weighted by the number of true instances in each class.
    """
    ACCURACY = "Accuracy"
    """
    Accuracy is the ratio of predictions that exactly match the true class labels.
    """
    NORM_MACRO_RECALL = "NormMacroRecall"
    """
    Normalized macro recall is recall macro-averaged and normalized, so that random
    performance has a score of 0, and perfect performance has a score of 1.
    """
    AVERAGE_PRECISION_SCORE_WEIGHTED = "AveragePrecisionScoreWeighted"
    """
    The arithmetic mean of the average precision score for each class, weighted by
    the number of true instances in each class.
    """
    PRECISION_SCORE_WEIGHTED = "PrecisionScoreWeighted"
    """
    The arithmetic mean of precision for each class, weighted by number of true instances in each class.
    """


class ClusterPurpose(str, Enum):
    FAST_PROD = "FastProd"
    DENSE_PROD = "DenseProd"
    DEV_TEST = "DevTest"


class ComputeInstanceAuthorizationType(str, Enum):
    PERSONAL = "personal"


class ComputePowerAction(str, Enum):
    START = "Start"
    STOP = "Stop"


class ComputeType(str, Enum):
    AKS = "AKS"
    KUBERNETES = "Kubernetes"
    AML_COMPUTE = "AmlCompute"
    COMPUTE_INSTANCE = "ComputeInstance"
    DATA_FACTORY = "DataFactory"
    VIRTUAL_MACHINE = "VirtualMachine"
    HD_INSIGHT = "HDInsight"
    DATABRICKS = "Databricks"
    DATA_LAKE_ANALYTICS = "DataLakeAnalytics"
    SYNAPSE_SPARK = "SynapseSpark"


class ConnectionAuthType(str, Enum):
    PAT = "PAT"
    MANAGED_IDENTITY = "ManagedIdentity"
    USERNAME_PASSWORD = "UsernamePassword"
    NONE = "None"
    SAS = "SAS"
    SERVICE_PRINCIPAL = "ServicePrincipal"
    ACCESS_KEY = "AccessKey"


class ConnectionCategory(str, Enum):
    PYTHON_FEED = "PythonFeed"
    CONTAINER_REGISTRY = "ContainerRegistry"
    GIT = "Git"
    FEATURE_STORE = "FeatureStore"
    S3 = "S3"
    SNOWFLAKE = "Snowflake"
    AZURE_SQL_DB = "AzureSqlDb"
    AZURE_SYNAPSE_ANALYTICS = "AzureSynapseAnalytics"
    AZURE_MY_SQL_DB = "AzureMySqlDb"
    AZURE_POSTGRES_DB = "AzurePostgresDb"
    AZURE_DATA_LAKE_GEN2 = "AzureDataLakeGen2"
    REDIS = "Redis"


class ContainerType(str, Enum):
    STORAGE_INITIALIZER = "StorageInitializer"
    """
    The container used to download models and score script.
    """
    INFERENCE_SERVER = "InferenceServer"
    """
    The container used to serve user's request.
    """
    MODEL_DATA_COLLECTOR = "ModelDataCollector"
    """
    The container used to collect payload and custom logging when mdc is enabled.
    """


class CredentialsType(str, Enum):
    ACCOUNT_KEY = "AccountKey"
    CERTIFICATE = "Certificate"
    NONE = "None"
    SAS = "Sas"
    SERVICE_PRINCIPAL = "ServicePrincipal"
    KERBEROS_KEYTAB = "KerberosKeytab"
    KERBEROS_PASSWORD = "KerberosPassword"


class DataCollectionMode(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class DataImportSourceType(str, Enum):
    DATABASE = "database"
    FILE_SYSTEM = "file_system"


class DataType(str, Enum):
    URI_FILE = "uri_file"
    URI_FOLDER = "uri_folder"
    MLTABLE = "mltable"


class DatastoreType(str, Enum):
    AZURE_BLOB = "AzureBlob"
    AZURE_DATA_LAKE_GEN1 = "AzureDataLakeGen1"
    AZURE_DATA_LAKE_GEN2 = "AzureDataLakeGen2"
    AZURE_FILE = "AzureFile"
    HDFS = "Hdfs"
    ONE_LAKE = "OneLake"


class DistributionType(str, Enum):
    PY_TORCH = "PyTorch"
    TENSOR_FLOW = "TensorFlow"
    MPI = "Mpi"
    RAY = "Ray"


class EarlyTerminationPolicyType(str, Enum):
    BANDIT = "Bandit"
    MEDIAN_STOPPING = "MedianStopping"
    TRUNCATION_SELECTION = "TruncationSelection"


class EgressPublicNetworkAccessType(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class EmailNotificationEnableType(str, Enum):
    JOB_COMPLETED = "JobCompleted"
    JOB_FAILED = "JobFailed"
    JOB_CANCELLED = "JobCancelled"


class EncryptionStatus(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class EndpointAuthMode(str, Enum):
    AML_TOKEN = "AMLToken"
    KEY = "Key"
    AAD_TOKEN = "AADToken"


class EndpointComputeType(str, Enum):
    MANAGED = "Managed"
    KUBERNETES = "Kubernetes"
    AZURE_ML_COMPUTE = "AzureMLCompute"


class EndpointServiceConnectionStatus(str, Enum):
    APPROVED = "Approved"
    PENDING = "Pending"
    REJECTED = "Rejected"
    DISCONNECTED = "Disconnected"


class EnvironmentVariableType(str, Enum):
    LOCAL = "local"


class FeatureAttributionMetric(str, Enum):
    NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN = "NormalizedDiscountedCumulativeGain"
    """
    The Normalized Discounted Cumulative Gain metric.
    """


class FeatureDataType(str, Enum):
    STRING = "String"
    INTEGER = "Integer"
    LONG = "Long"
    FLOAT = "Float"
    DOUBLE = "Double"
    BINARY = "Binary"
    DATETIME = "Datetime"
    BOOLEAN = "Boolean"


class FeatureLags(str, Enum):
    NONE = "None"
    """
    No feature lags generated.
    """
    AUTO = "Auto"
    """
    System auto-generates feature lags.
    """


class FeaturizationMode(str, Enum):
    AUTO = "Auto"
    """
    Auto mode, system performs featurization without any custom featurization inputs.
    """
    CUSTOM = "Custom"
    """
    Custom featurization.
    """
    OFF = "Off"
    """
    Featurization off. 'Forecasting' task cannot use this value.
    """


class ForecastHorizonMode(str, Enum):
    AUTO = "Auto"
    """
    Forecast horizon to be determined automatically.
    """
    CUSTOM = "Custom"
    """
    Use the custom forecast horizon.
    """


class ForecastingModels(str, Enum):
    AUTO_ARIMA = "AutoArima"
    """
    Auto-Autoregressive Integrated Moving Average (ARIMA) model uses time-series data and statistical analysis to interpret the data and make future predictions.
    This model aims to explain data by using time series data on its past values and uses linear regression to make predictions.
    """
    PROPHET = "Prophet"
    """
    Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects.
    It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.
    """
    NAIVE = "Naive"
    """
    The Naive forecasting model makes predictions by carrying forward the latest target value for each time-series in the training data.
    """
    SEASONAL_NAIVE = "SeasonalNaive"
    """
    The Seasonal Naive forecasting model makes predictions by carrying forward the latest season of target values for each time-series in the training data.
    """
    AVERAGE = "Average"
    """
    The Average forecasting model makes predictions by carrying forward the average of the target values for each time-series in the training data.
    """
    SEASONAL_AVERAGE = "SeasonalAverage"
    """
    The Seasonal Average forecasting model makes predictions by carrying forward the average value of the latest season of data for each time-series in the training data.
    """
    EXPONENTIAL_SMOOTHING = "ExponentialSmoothing"
    """
    Exponential smoothing is a time series forecasting method for univariate data that can be extended to support data with a systematic trend or seasonal component.
    """
    ARIMAX = "Arimax"
    """
    An Autoregressive Integrated Moving Average with Explanatory Variable (ARIMAX) model can be viewed as a multiple regression model with one or more autoregressive (AR) terms and/or one or more moving average (MA) terms.
    This method is suitable for forecasting when data is stationary/non stationary, and multivariate with any type of data pattern, i.e., level/trend /seasonality/cyclicity.
    """
    TCN_FORECASTER = "TCNForecaster"
    """
    TCNForecaster: Temporal Convolutional Networks Forecaster. //TODO: Ask forecasting team for brief intro.
    """
    ELASTIC_NET = "ElasticNet"
    """
    Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1 and L2 penalty functions.
    """
    GRADIENT_BOOSTING = "GradientBoosting"
    """
    The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution.
    """
    DECISION_TREE = "DecisionTree"
    """
    Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
    The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.
    """
    KNN = "KNN"
    """
    K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
    which further means that the new data point will be assigned a value based on how closely it matches the points in the training set.
    """
    LASSO_LARS = "LassoLars"
    """
    Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer.
    """
    SGD = "SGD"
    """
    SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
    to find the model parameters that correspond to the best fit between predicted and actual outputs.
    It's an inexact but powerful technique.
    """
    RANDOM_FOREST = "RandomForest"
    """
    Random forest is a supervised learning algorithm.
    The "forest" it builds, is an ensemble of decision trees, usually trained with the bagging method.
    The general idea of the bagging method is that a combination of learning models increases the overall result.
    """
    EXTREME_RANDOM_TREES = "ExtremeRandomTrees"
    """
    Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm.
    """
    LIGHT_GBM = "LightGBM"
    """
    LightGBM is a gradient boosting framework that uses tree based learning algorithms.
    """
    XG_BOOST_REGRESSOR = "XGBoostRegressor"
    """
    XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners.
    """


class ForecastingPrimaryMetrics(str, Enum):
    SPEARMAN_CORRELATION = "SpearmanCorrelation"
    """
    The Spearman's rank coefficient of correlation is a non-parametric measure of rank correlation.
    """
    NORMALIZED_ROOT_MEAN_SQUARED_ERROR = "NormalizedRootMeanSquaredError"
    """
    The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the comparison between models with different scales.
    """
    R2_SCORE = "R2Score"
    """
    The R2 score is one of the performance evaluation measures for forecasting-based machine learning models.
    """
    NORMALIZED_MEAN_ABSOLUTE_ERROR = "NormalizedMeanAbsoluteError"
    """
    The Normalized Mean Absolute Error (NMAE) is a validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales.
    """


class Goal(str, Enum):
    MINIMIZE = "Minimize"
    MAXIMIZE = "Maximize"


class IdentityConfigurationType(str, Enum):
    MANAGED = "Managed"
    AML_TOKEN = "AMLToken"
    USER_IDENTITY = "UserIdentity"


class ImageAnnotationType(str, Enum):
    CLASSIFICATION = "Classification"
    BOUNDING_BOX = "BoundingBox"
    INSTANCE_SEGMENTATION = "InstanceSegmentation"


class ImageType(str, Enum):
    DOCKER = "docker"
    AZUREML = "azureml"


class IncrementalDataRefresh(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class InputDeliveryMode(str, Enum):
    READ_ONLY_MOUNT = "ReadOnlyMount"
    READ_WRITE_MOUNT = "ReadWriteMount"
    DOWNLOAD = "Download"
    DIRECT = "Direct"
    EVAL_MOUNT = "EvalMount"
    EVAL_DOWNLOAD = "EvalDownload"


class InstanceSegmentationPrimaryMetrics(str, Enum):
    MEAN_AVERAGE_PRECISION = "MeanAveragePrecision"
    """
    Mean Average Precision (MAP) is the average of AP (Average Precision).
    AP is calculated for each class and averaged to get the MAP.
    """


class IsolationMode(str, Enum):
    DISABLED = "Disabled"
    ALLOW_INTERNET_OUTBOUND = "AllowInternetOutbound"
    ALLOW_ONLY_APPROVED_OUTBOUND = "AllowOnlyApprovedOutbound"


class JobInputType(str, Enum):
    LITERAL = "literal"
    URI_FILE = "uri_file"
    URI_FOLDER = "uri_folder"
    MLTABLE = "mltable"
    CUSTOM_MODEL = "custom_model"
    MLFLOW_MODEL = "mlflow_model"
    TRITON_MODEL = "triton_model"


class JobLimitsType(str, Enum):
    COMMAND = "Command"
    SWEEP = "Sweep"


class JobOutputType(str, Enum):
    URI_FILE = "uri_file"
    URI_FOLDER = "uri_folder"
    MLTABLE = "mltable"
    CUSTOM_MODEL = "custom_model"
    MLFLOW_MODEL = "mlflow_model"
    TRITON_MODEL = "triton_model"


class JobTier(str, Enum):
    SPOT = "Spot"
    BASIC = "Basic"
    STANDARD = "Standard"
    PREMIUM = "Premium"


class JobType(str, Enum):
    AUTO_ML = "AutoML"
    COMMAND = "Command"
    LABELING = "Labeling"
    SWEEP = "Sweep"
    PIPELINE = "Pipeline"
    SPARK = "Spark"


class LearningRateScheduler(str, Enum):
    NONE = "None"
    """
    No learning rate scheduler selected.
    """
    WARMUP_COSINE = "WarmupCosine"
    """
    Cosine Annealing With Warmup.
    """
    STEP = "Step"
    """
    Step learning rate scheduler.
    """


class LoadBalancerType(str, Enum):
    PUBLIC_IP = "PublicIp"
    INTERNAL_LOAD_BALANCER = "InternalLoadBalancer"


class LogTrainingMetrics(str, Enum):
    ENABLE = "Enable"
    """
    Enable compute and log training metrics.
    """
    DISABLE = "Disable"
    """
    Disable compute and log training metrics.
    """


class LogValidationLoss(str, Enum):
    ENABLE = "Enable"
    """
    Enable compute and log validation metrics.
    """
    DISABLE = "Disable"
    """
    Disable compute and log validation metrics.
    """


class LogVerbosity(str, Enum):
    NOT_SET = "NotSet"
    """
    No logs emitted.
    """
    DEBUG = "Debug"
    """
    Debug and above log statements logged.
    """
    INFO = "Info"
    """
    Info and above log statements logged.
    """
    WARNING = "Warning"
    """
    Warning and above log statements logged.
    """
    ERROR = "Error"
    """
    Error and above log statements logged.
    """
    CRITICAL = "Critical"
    """
    Only critical statements logged.
    """


class MLAssistConfigurationType(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class MLFlowAutologgerState(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ManagedNetworkStatus(str, Enum):
    INACTIVE = "Inactive"
    ACTIVE = "Active"


class ManagedServiceIdentityType(str, Enum):
    NONE = "None"
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned,UserAssigned"


class MaterializationStoreType(str, Enum):
    NONE = "None"
    ONLINE = "Online"
    OFFLINE = "Offline"
    ONLINE_AND_OFFLINE = "OnlineAndOffline"


class MediaType(str, Enum):
    IMAGE = "Image"
    TEXT = "Text"


class MlflowAutologger(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ModelSize(str, Enum):
    NONE = "None"
    """
    No value selected.
    """
    SMALL = "Small"
    """
    Small size.
    """
    MEDIUM = "Medium"
    """
    Medium size.
    """
    LARGE = "Large"
    """
    Large size.
    """
    EXTRA_LARGE = "ExtraLarge"
    """
    Extra large size.
    """


class MonitoringAlertNotificationType(str, Enum):
    AZURE_MONITOR = "AzureMonitor"
    """
    Settings for Azure Monitor based alerting.
    """
    EMAIL = "Email"
    """
    Settings for AML email notifications.
    """


class MonitoringFeatureDataType(str, Enum):
    NUMERICAL = "Numerical"
    """
    Used for features of numerical data type.
    """
    CATEGORICAL = "Categorical"
    """
    Used for features of categorical data type.
    """


class MonitoringFeatureFilterType(str, Enum):
    ALL_FEATURES = "AllFeatures"
    """
    Includes all features.
    """
    TOP_N_BY_ATTRIBUTION = "TopNByAttribution"
    """
    Only includes the top contributing features, measured by feature attribution.
    """
    FEATURE_SUBSET = "FeatureSubset"
    """
    Includes a user-defined subset of features.
    """


class MonitoringInputDataContext(str, Enum):
    MODEL_INPUTS = "ModelInputs"
    """
    A dataset containing the feature input to the model.
    """
    MODEL_OUTPUTS = "ModelOutputs"
    """
    A dataset containing the inferred results of the model.
    """
    TRAINING = "Training"
    """
    A dataset containing the data used for training the model.
    """
    TEST = "Test"
    """
    A dataset leveraged to test the model.
    """
    VALIDATION = "Validation"
    """
    A dataset leveraged for model validation.
    """
    GROUND_TRUTH = "GroundTruth"
    """
    A dataset containing the ground truth data.
    """


class MonitoringModelType(str, Enum):
    CLASSIFICATION = "Classification"
    """
    A model trained for classification tasks.
    """
    REGRESSION = "Regression"
    """
    A model trained for regressions tasks.
    """


class MonitoringNotificationMode(str, Enum):
    DISABLED = "Disabled"
    """
    Disabled notifications will not produce emails/metrics leveraged for alerting.
    """
    ENABLED = "Enabled"
    """
    Enabled notification will produce emails/metrics leveraged for alerting.
    """


class MonitoringSignalType(str, Enum):
    DATA_DRIFT = "DataDrift"
    """
    Tracks model input data distribution change, comparing against training data or past production data.
    """
    PREDICTION_DRIFT = "PredictionDrift"
    """
    Tracks prediction result data distribution change, comparing against validation/test label data or past production data.
    """
    DATA_QUALITY = "DataQuality"
    """
    Tracks model input data integrity.
    """
    FEATURE_ATTRIBUTION_DRIFT = "FeatureAttributionDrift"
    """
    Tracks feature importance change in production, comparing against feature importance at training time.
    """
    CUSTOM = "Custom"
    """
    Tracks a custom signal provided by users.
    """
    MODEL_PERFORMANCE = "ModelPerformance"
    """
    Tracks model performance based on ground truth data.
    """


class MultiSelect(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class NCrossValidationsMode(str, Enum):
    AUTO = "Auto"
    """
    Determine N-Cross validations value automatically. Supported only for 'Forecasting' AutoML task.
    """
    CUSTOM = "Custom"
    """
    Use custom N-Cross validations value.
    """


class NlpLearningRateScheduler(str, Enum):
    NONE = "None"
    """
    No learning rate schedule.
    """
    LINEAR = "Linear"
    """
    Linear warmup and decay.
    """
    COSINE = "Cosine"
    """
    Linear warmup then cosine decay.
    """
    COSINE_WITH_RESTARTS = "CosineWithRestarts"
    """
    Linear warmup, cosine decay, then restart to initial LR.
    """
    POLYNOMIAL = "Polynomial"
    """
    Increase linearly then polynomially decay.
    """
    CONSTANT = "Constant"
    """
    Constant learning rate.
    """
    CONSTANT_WITH_WARMUP = "ConstantWithWarmup"
    """
    Linear warmup followed by constant value.
    """


class NodesValueType(str, Enum):
    ALL = "All"
    CUSTOM = "Custom"


class NumericalDataDriftMetric(str, Enum):
    JENSEN_SHANNON_DISTANCE = "JensenShannonDistance"
    """
    The Jensen Shannon Distance (JSD) metric.
    """
    POPULATION_STABILITY_INDEX = "PopulationStabilityIndex"
    """
    The Population Stability Index (PSI) metric.
    """
    NORMALIZED_WASSERSTEIN_DISTANCE = "NormalizedWassersteinDistance"
    """
    The Normalized Wasserstein Distance metric.
    """
    TWO_SAMPLE_KOLMOGOROV_SMIRNOV_TEST = "TwoSampleKolmogorovSmirnovTest"
    """
    The Two Sample Kolmogorov-Smirnov Test (two-sample K–S) metric.
    """


class NumericalDataQualityMetric(str, Enum):
    NULL_VALUE_RATE = "NullValueRate"
    """
    Calculates the rate of null values.
    """
    DATA_TYPE_ERROR_RATE = "DataTypeErrorRate"
    """
    Calculates the rate of data type errors.
    """
    OUT_OF_BOUNDS_RATE = "OutOfBoundsRate"
    """
    Calculates the rate values are out of bounds.
    """


class NumericalPredictionDriftMetric(str, Enum):
    JENSEN_SHANNON_DISTANCE = "JensenShannonDistance"
    """
    The Jensen Shannon Distance (JSD) metric.
    """
    POPULATION_STABILITY_INDEX = "PopulationStabilityIndex"
    """
    The Population Stability Index (PSI) metric.
    """
    NORMALIZED_WASSERSTEIN_DISTANCE = "NormalizedWassersteinDistance"
    """
    The Normalized Wasserstein Distance metric.
    """
    TWO_SAMPLE_KOLMOGOROV_SMIRNOV_TEST = "TwoSampleKolmogorovSmirnovTest"
    """
    The Two Sample Kolmogorov-Smirnov Test (two-sample K–S) metric.
    """


class ObjectDetectionPrimaryMetrics(str, Enum):
    MEAN_AVERAGE_PRECISION = "MeanAveragePrecision"
    """
    Mean Average Precision (MAP) is the average of AP (Average Precision).
    AP is calculated for each class and averaged to get the MAP.
    """


class OneLakeArtifactType(str, Enum):
    LAKE_HOUSE = "LakeHouse"


class OperatingSystemType(str, Enum):
    LINUX = "Linux"
    WINDOWS = "Windows"


class OsType(str, Enum):
    LINUX = "Linux"
    WINDOWS = "Windows"


class OutputDeliveryMode(str, Enum):
    READ_WRITE_MOUNT = "ReadWriteMount"
    UPLOAD = "Upload"
    DIRECT = "Direct"


class PrivateEndpointServiceConnectionStatus(str, Enum):
    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"
    DISCONNECTED = "Disconnected"
    TIMEOUT = "Timeout"


class ProtectionLevel(str, Enum):
    ALL = "All"
    """
    All means Intellectual Property is fully protected.
    """
    NONE = "None"
    """
    None means it is not an Intellectual Property.
    """


class Protocol(str, Enum):
    TCP = "tcp"
    UDP = "udp"
    HTTP = "http"


class PublicNetworkAccess(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class PublicNetworkAccessType(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class RandomSamplingAlgorithmRule(str, Enum):
    RANDOM = "Random"
    SOBOL = "Sobol"


class RecurrenceFrequency(str, Enum):
    MINUTE = "Minute"
    """
    Minute frequency
    """
    HOUR = "Hour"
    """
    Hour frequency
    """
    DAY = "Day"
    """
    Day frequency
    """
    WEEK = "Week"
    """
    Week frequency
    """
    MONTH = "Month"
    """
    Month frequency
    """


class ReferenceType(str, Enum):
    ID = "Id"
    DATA_PATH = "DataPath"
    OUTPUT_PATH = "OutputPath"


class RegressionModelPerformanceMetric(str, Enum):
    MEAN_ABSOLUTE_ERROR = "MeanAbsoluteError"
    """
    The Mean Absolute Error (MAE) metric.
    """
    ROOT_MEAN_SQUARED_ERROR = "RootMeanSquaredError"
    """
    The Root Mean Squared Error (RMSE) metric.
    """
    MEAN_SQUARED_ERROR = "MeanSquaredError"
    """
    The Mean Squared Error (MSE) metric.
    """


class RegressionModels(str, Enum):
    ELASTIC_NET = "ElasticNet"
    """
    Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1 and L2 penalty functions.
    """
    GRADIENT_BOOSTING = "GradientBoosting"
    """
    The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution.
    """
    DECISION_TREE = "DecisionTree"
    """
    Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
    The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.
    """
    KNN = "KNN"
    """
    K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
    which further means that the new data point will be assigned a value based on how closely it matches the points in the training set.
    """
    LASSO_LARS = "LassoLars"
    """
    Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer.
    """
    SGD = "SGD"
    """
    SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
    to find the model parameters that correspond to the best fit between predicted and actual outputs.
    It's an inexact but powerful technique.
    """
    RANDOM_FOREST = "RandomForest"
    """
    Random forest is a supervised learning algorithm.
    The "forest" it builds, is an ensemble of decision trees, usually trained with the bagging method.
    The general idea of the bagging method is that a combination of learning models increases the overall result.
    """
    EXTREME_RANDOM_TREES = "ExtremeRandomTrees"
    """
    Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm.
    """
    LIGHT_GBM = "LightGBM"
    """
    LightGBM is a gradient boosting framework that uses tree based learning algorithms.
    """
    XG_BOOST_REGRESSOR = "XGBoostRegressor"
    """
    XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners.
    """


class RegressionPrimaryMetrics(str, Enum):
    SPEARMAN_CORRELATION = "SpearmanCorrelation"
    """
    The Spearman's rank coefficient of correlation is a nonparametric measure of rank correlation.
    """
    NORMALIZED_ROOT_MEAN_SQUARED_ERROR = "NormalizedRootMeanSquaredError"
    """
    The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the comparison between models with different scales.
    """
    R2_SCORE = "R2Score"
    """
    The R2 score is one of the performance evaluation measures for forecasting-based machine learning models.
    """
    NORMALIZED_MEAN_ABSOLUTE_ERROR = "NormalizedMeanAbsoluteError"
    """
    The Normalized Mean Absolute Error (NMAE) is a validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales.
    """


class RemoteLoginPortPublicAccess(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"
    NOT_SPECIFIED = "NotSpecified"


class RollingRateType(str, Enum):
    YEAR = "Year"
    MONTH = "Month"
    DAY = "Day"
    HOUR = "Hour"
    MINUTE = "Minute"


class RuleCategory(str, Enum):
    REQUIRED = "Required"
    RECOMMENDED = "Recommended"
    USER_DEFINED = "UserDefined"


class RuleStatus(str, Enum):
    INACTIVE = "Inactive"
    ACTIVE = "Active"


class RuleType(str, Enum):
    FQDN = "FQDN"
    PRIVATE_ENDPOINT = "PrivateEndpoint"
    SERVICE_TAG = "ServiceTag"


class SamplingAlgorithmType(str, Enum):
    GRID = "Grid"
    RANDOM = "Random"
    BAYESIAN = "Bayesian"


class ScaleType(str, Enum):
    DEFAULT = "Default"
    TARGET_UTILIZATION = "TargetUtilization"


class ScheduleActionType(str, Enum):
    CREATE_JOB = "CreateJob"
    INVOKE_BATCH_ENDPOINT = "InvokeBatchEndpoint"
    IMPORT_DATA = "ImportData"
    CREATE_MONITOR = "CreateMonitor"


class ScheduleProvisioningState(str, Enum):
    COMPLETED = "Completed"
    PROVISIONING = "Provisioning"
    FAILED = "Failed"


class ScheduleStatus(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SeasonalityMode(str, Enum):
    AUTO = "Auto"
    """
    Seasonality to be determined automatically.
    """
    CUSTOM = "Custom"
    """
    Use the custom seasonality value.
    """


class SecretsType(str, Enum):
    ACCOUNT_KEY = "AccountKey"
    CERTIFICATE = "Certificate"
    SAS = "Sas"
    SERVICE_PRINCIPAL = "ServicePrincipal"
    KERBEROS_PASSWORD = "KerberosPassword"
    KERBEROS_KEYTAB = "KerberosKeytab"


class ServiceDataAccessAuthIdentity(str, Enum):
    NONE = "None"
    """
    Do not use any identity for service data access.
    """
    WORKSPACE_SYSTEM_ASSIGNED_IDENTITY = "WorkspaceSystemAssignedIdentity"
    """
    Use the system assigned managed identity of the Workspace to authenticate service data access.
    """
    WORKSPACE_USER_ASSIGNED_IDENTITY = "WorkspaceUserAssignedIdentity"
    """
    Use the user assigned managed identity of the Workspace to authenticate service data access.
    """


class ShortSeriesHandlingConfiguration(str, Enum):
    NONE = "None"
    """
    Represents no/null value.
    """
    AUTO = "Auto"
    """
    Short series will be padded if there are no long series, otherwise short series will be dropped.
    """
    PAD = "Pad"
    """
    All the short series will be padded.
    """
    DROP = "Drop"
    """
    All the short series will be dropped.
    """


class SkuTier(str, Enum):
    FREE = "Free"
    BASIC = "Basic"
    STANDARD = "Standard"
    PREMIUM = "Premium"


class SparkJobEntryType(str, Enum):
    SPARK_JOB_PYTHON_ENTRY = "SparkJobPythonEntry"
    SPARK_JOB_SCALA_ENTRY = "SparkJobScalaEntry"


class SshPublicAccess(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SslConfigStatus(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"
    AUTO = "Auto"


class StackMetaLearnerType(str, Enum):
    NONE = "None"
    LOGISTIC_REGRESSION = "LogisticRegression"
    """
    Default meta-learners are LogisticRegression for classification tasks.
    """
    LOGISTIC_REGRESSION_CV = "LogisticRegressionCV"
    """
    Default meta-learners are LogisticRegression for classification task when CV is on.
    """
    LIGHT_GBM_CLASSIFIER = "LightGBMClassifier"
    ELASTIC_NET = "ElasticNet"
    """
    Default meta-learners are LogisticRegression for regression task.
    """
    ELASTIC_NET_CV = "ElasticNetCV"
    """
    Default meta-learners are LogisticRegression for regression task when CV is on.
    """
    LIGHT_GBM_REGRESSOR = "LightGBMRegressor"
    LINEAR_REGRESSION = "LinearRegression"


class StochasticOptimizer(str, Enum):
    NONE = "None"
    """
    No optimizer selected.
    """
    SGD = "Sgd"
    """
    Stochastic Gradient Descent optimizer.
    """
    ADAM = "Adam"
    """
    Adam is algorithm the optimizes stochastic objective functions based on adaptive estimates of moments
    """
    ADAMW = "Adamw"
    """
    AdamW is a variant of the optimizer Adam that has an improved implementation of weight decay.
    """


class TargetAggregationFunction(str, Enum):
    NONE = "None"
    """
    Represent no value set.
    """
    SUM = "Sum"
    MAX = "Max"
    MIN = "Min"
    MEAN = "Mean"


class TargetLagsMode(str, Enum):
    AUTO = "Auto"
    """
    Target lags to be determined automatically.
    """
    CUSTOM = "Custom"
    """
    Use the custom target lags.
    """


class TargetRollingWindowSizeMode(str, Enum):
    AUTO = "Auto"
    """
    Determine rolling windows size automatically.
    """
    CUSTOM = "Custom"
    """
    Use the specified rolling window size.
    """


class TaskType(str, Enum):
    CLASSIFICATION = "Classification"
    """
    Classification in machine learning and statistics is a supervised learning approach in which
    the computer program learns from the data given to it and make new observations or classifications.
    """
    REGRESSION = "Regression"
    """
    Regression means to predict the value using the input data. Regression models are used to predict a continuous value.
    """
    FORECASTING = "Forecasting"
    """
    Forecasting is a special kind of regression task that deals with time-series data and creates forecasting model
    that can be used to predict the near future values based on the inputs.
    """
    IMAGE_CLASSIFICATION = "ImageClassification"
    """
    Image Classification. Multi-class image classification is used when an image is classified with only a single label
    from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
    """
    IMAGE_CLASSIFICATION_MULTILABEL = "ImageClassificationMultilabel"
    """
    Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
    from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
    """
    IMAGE_OBJECT_DETECTION = "ImageObjectDetection"
    """
    Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
    bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
    """
    IMAGE_INSTANCE_SEGMENTATION = "ImageInstanceSegmentation"
    """
    Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
    drawing a polygon around each object in the image.
    """
    TEXT_CLASSIFICATION = "TextClassification"
    """
    Text classification (also known as text tagging or text categorization) is the process of sorting texts into categories.
    Categories are mutually exclusive.
    """
    TEXT_CLASSIFICATION_MULTILABEL = "TextClassificationMultilabel"
    """
    Multilabel classification task assigns each sample to a group (zero or more) of target labels.
    """
    TEXT_NER = "TextNER"
    """
    Text Named Entity Recognition a.k.a. TextNER.
    Named Entity Recognition (NER) is the ability to take free-form text and identify the occurrences of entities such as people, locations, organizations, and more.
    """


class TextAnnotationType(str, Enum):
    CLASSIFICATION = "Classification"
    NAMED_ENTITY_RECOGNITION = "NamedEntityRecognition"


class TrainingMode(str, Enum):
    AUTO = "Auto"
    """
    Auto mode
    """
    DISTRIBUTED = "Distributed"
    """
    Distributed training mode
    """
    NON_DISTRIBUTED = "NonDistributed"
    """
    Non distributed training mode
    """


class TriggerType(str, Enum):
    RECURRENCE = "Recurrence"
    CRON = "Cron"


class UseStl(str, Enum):
    NONE = "None"
    """
    No stl decomposition.
    """
    SEASON = "Season"
    SEASON_TREND = "SeasonTrend"


class ValidationMetricType(str, Enum):
    NONE = "None"
    """
    No metric.
    """
    COCO = "Coco"
    """
    Coco metric.
    """
    VOC = "Voc"
    """
    Voc metric.
    """
    COCO_VOC = "CocoVoc"
    """
    CocoVoc metric.
    """


class ValueFormat(str, Enum):
    JSON = "JSON"


class VmPriority(str, Enum):
    DEDICATED = "Dedicated"
    LOW_PRIORITY = "LowPriority"


class VolumeDefinitionType(str, Enum):
    BIND = "bind"
    VOLUME = "volume"
    TMPFS = "tmpfs"
    NPIPE = "npipe"


class WebhookType(str, Enum):
    AZURE_DEV_OPS = "AzureDevOps"


class WeekDay(str, Enum):
    MONDAY = "Monday"
    """
    Monday weekday
    """
    TUESDAY = "Tuesday"
    """
    Tuesday weekday
    """
    WEDNESDAY = "Wednesday"
    """
    Wednesday weekday
    """
    THURSDAY = "Thursday"
    """
    Thursday weekday
    """
    FRIDAY = "Friday"
    """
    Friday weekday
    """
    SATURDAY = "Saturday"
    """
    Saturday weekday
    """
    SUNDAY = "Sunday"
    """
    Sunday weekday
    """
