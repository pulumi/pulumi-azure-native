# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WorkspaceArgs', 'Workspace']

@pulumi.input_type
class WorkspaceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 allow_public_access_when_behind_vnet: Optional[pulumi.Input[bool]] = None,
                 application_insights: Optional[pulumi.Input[str]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_registry: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discovery_url: Optional[pulumi.Input[str]] = None,
                 enable_data_isolation: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input['EncryptionPropertyArgs']] = None,
                 existing_workspaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 feature_store_settings: Optional[pulumi.Input['FeatureStoreSettingsArgs']] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 hbi_workspace: Optional[pulumi.Input[bool]] = None,
                 hub_resource_id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedServiceIdentityArgs']] = None,
                 image_build_compute: Optional[pulumi.Input[str]] = None,
                 key_vault: Optional[pulumi.Input[str]] = None,
                 key_vaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_network: Optional[pulumi.Input['ManagedNetworkSettingsArgs']] = None,
                 primary_user_assigned_identity: Optional[pulumi.Input[str]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 service_managed_resources_settings: Optional[pulumi.Input['ServiceManagedResourcesSettingsArgs']] = None,
                 shared_private_link_resources: Optional[pulumi.Input[Sequence[pulumi.Input['SharedPrivateLinkResourceArgs']]]] = None,
                 sku: Optional[pulumi.Input['SkuArgs']] = None,
                 soft_delete_retention_in_days: Optional[pulumi.Input[int]] = None,
                 storage_account: Optional[pulumi.Input[str]] = None,
                 storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_datastores_auth_mode: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 v1_legacy_mode: Optional[pulumi.Input[bool]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workspace resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[bool] allow_public_access_when_behind_vnet: The flag to indicate whether to allow public access when behind VNet.
        :param pulumi.Input[str] application_insights: ARM id of the application insights associated with this workspace.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_registries: A list of container registries used by Hub.
        :param pulumi.Input[str] container_registry: ARM id of the container registry associated with this workspace.
        :param pulumi.Input[str] description: The description of this workspace.
        :param pulumi.Input[str] discovery_url: Url for the discovery service to identify regional endpoints for machine learning experimentation services
        :param pulumi.Input[bool] enable_data_isolation: A flag to determine if workspace has data isolation enabled. The flag can only be set at the creation phase, it can't be updated.
        :param pulumi.Input['EncryptionPropertyArgs'] encryption: The encryption settings of Azure ML workspace.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] existing_workspaces: A list of existing workspaces used by Hub to perform convert.
        :param pulumi.Input['FeatureStoreSettingsArgs'] feature_store_settings: Settings for feature store type workspace.
        :param pulumi.Input[str] friendly_name: The friendly name for this workspace. This name in mutable
        :param pulumi.Input[bool] hbi_workspace: The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
        :param pulumi.Input[str] hub_resource_id: Resource Id of Hub used for lean workspace.
        :param pulumi.Input['ManagedServiceIdentityArgs'] identity: The identity of the resource.
        :param pulumi.Input[str] image_build_compute: The compute name for image build
        :param pulumi.Input[str] key_vault: ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_vaults: A list of key vaults used by Hub.
        :param pulumi.Input[str] location: Specifies the location of the resource.
        :param pulumi.Input['ManagedNetworkSettingsArgs'] managed_network: Managed Network settings for a machine learning workspace.
        :param pulumi.Input[str] primary_user_assigned_identity: The user assigned identity resource id that represents the workspace identity.
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Whether requests from Public Network are allowed.
        :param pulumi.Input['ServiceManagedResourcesSettingsArgs'] service_managed_resources_settings: The service managed resource settings.
        :param pulumi.Input[Sequence[pulumi.Input['SharedPrivateLinkResourceArgs']]] shared_private_link_resources: The list of shared private link resources in this workspace.
        :param pulumi.Input['SkuArgs'] sku: The sku of the workspace.
        :param pulumi.Input[int] soft_delete_retention_in_days: Retention time in days after workspace get soft deleted.
        :param pulumi.Input[str] storage_account: ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_accounts: : A list of storage accounts used by Hub.
        :param pulumi.Input[str] system_datastores_auth_mode: The auth mode used for accessing the system datastores of the workspace
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Contains resource tags defined as key/value pairs.
        :param pulumi.Input[bool] v1_legacy_mode: Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
        :param pulumi.Input[str] workspace_name: Name of Azure Machine Learning workspace.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if allow_public_access_when_behind_vnet is None:
            allow_public_access_when_behind_vnet = False
        if allow_public_access_when_behind_vnet is not None:
            pulumi.set(__self__, "allow_public_access_when_behind_vnet", allow_public_access_when_behind_vnet)
        if application_insights is not None:
            pulumi.set(__self__, "application_insights", application_insights)
        if container_registries is not None:
            pulumi.set(__self__, "container_registries", container_registries)
        if container_registry is not None:
            pulumi.set(__self__, "container_registry", container_registry)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if enable_data_isolation is None:
            enable_data_isolation = False
        if enable_data_isolation is not None:
            pulumi.set(__self__, "enable_data_isolation", enable_data_isolation)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if existing_workspaces is not None:
            pulumi.set(__self__, "existing_workspaces", existing_workspaces)
        if feature_store_settings is not None:
            pulumi.set(__self__, "feature_store_settings", feature_store_settings)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if hbi_workspace is None:
            hbi_workspace = False
        if hbi_workspace is not None:
            pulumi.set(__self__, "hbi_workspace", hbi_workspace)
        if hub_resource_id is not None:
            pulumi.set(__self__, "hub_resource_id", hub_resource_id)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if image_build_compute is not None:
            pulumi.set(__self__, "image_build_compute", image_build_compute)
        if key_vault is not None:
            pulumi.set(__self__, "key_vault", key_vault)
        if key_vaults is not None:
            pulumi.set(__self__, "key_vaults", key_vaults)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if managed_network is not None:
            pulumi.set(__self__, "managed_network", managed_network)
        if primary_user_assigned_identity is not None:
            pulumi.set(__self__, "primary_user_assigned_identity", primary_user_assigned_identity)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if service_managed_resources_settings is not None:
            pulumi.set(__self__, "service_managed_resources_settings", service_managed_resources_settings)
        if shared_private_link_resources is not None:
            pulumi.set(__self__, "shared_private_link_resources", shared_private_link_resources)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if soft_delete_retention_in_days is not None:
            pulumi.set(__self__, "soft_delete_retention_in_days", soft_delete_retention_in_days)
        if storage_account is not None:
            pulumi.set(__self__, "storage_account", storage_account)
        if storage_accounts is not None:
            pulumi.set(__self__, "storage_accounts", storage_accounts)
        if system_datastores_auth_mode is not None:
            pulumi.set(__self__, "system_datastores_auth_mode", system_datastores_auth_mode)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if v1_legacy_mode is None:
            v1_legacy_mode = False
        if v1_legacy_mode is not None:
            pulumi.set(__self__, "v1_legacy_mode", v1_legacy_mode)
        if workspace_name is not None:
            pulumi.set(__self__, "workspace_name", workspace_name)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="allowPublicAccessWhenBehindVnet")
    def allow_public_access_when_behind_vnet(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to indicate whether to allow public access when behind VNet.
        """
        return pulumi.get(self, "allow_public_access_when_behind_vnet")

    @allow_public_access_when_behind_vnet.setter
    def allow_public_access_when_behind_vnet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_public_access_when_behind_vnet", value)

    @property
    @pulumi.getter(name="applicationInsights")
    def application_insights(self) -> Optional[pulumi.Input[str]]:
        """
        ARM id of the application insights associated with this workspace.
        """
        return pulumi.get(self, "application_insights")

    @application_insights.setter
    def application_insights(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_insights", value)

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of container registries used by Hub.
        """
        return pulumi.get(self, "container_registries")

    @container_registries.setter
    def container_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_registries", value)

    @property
    @pulumi.getter(name="containerRegistry")
    def container_registry(self) -> Optional[pulumi.Input[str]]:
        """
        ARM id of the container registry associated with this workspace.
        """
        return pulumi.get(self, "container_registry")

    @container_registry.setter
    def container_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_registry", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this workspace.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[pulumi.Input[str]]:
        """
        Url for the discovery service to identify regional endpoints for machine learning experimentation services
        """
        return pulumi.get(self, "discovery_url")

    @discovery_url.setter
    def discovery_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_url", value)

    @property
    @pulumi.getter(name="enableDataIsolation")
    def enable_data_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag to determine if workspace has data isolation enabled. The flag can only be set at the creation phase, it can't be updated.
        """
        return pulumi.get(self, "enable_data_isolation")

    @enable_data_isolation.setter
    def enable_data_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_data_isolation", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionPropertyArgs']]:
        """
        The encryption settings of Azure ML workspace.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionPropertyArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="existingWorkspaces")
    def existing_workspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of existing workspaces used by Hub to perform convert.
        """
        return pulumi.get(self, "existing_workspaces")

    @existing_workspaces.setter
    def existing_workspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "existing_workspaces", value)

    @property
    @pulumi.getter(name="featureStoreSettings")
    def feature_store_settings(self) -> Optional[pulumi.Input['FeatureStoreSettingsArgs']]:
        """
        Settings for feature store type workspace.
        """
        return pulumi.get(self, "feature_store_settings")

    @feature_store_settings.setter
    def feature_store_settings(self, value: Optional[pulumi.Input['FeatureStoreSettingsArgs']]):
        pulumi.set(self, "feature_store_settings", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name for this workspace. This name in mutable
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="hbiWorkspace")
    def hbi_workspace(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
        """
        return pulumi.get(self, "hbi_workspace")

    @hbi_workspace.setter
    def hbi_workspace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hbi_workspace", value)

    @property
    @pulumi.getter(name="hubResourceId")
    def hub_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id of Hub used for lean workspace.
        """
        return pulumi.get(self, "hub_resource_id")

    @hub_resource_id.setter
    def hub_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hub_resource_id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedServiceIdentityArgs']]:
        """
        The identity of the resource.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedServiceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="imageBuildCompute")
    def image_build_compute(self) -> Optional[pulumi.Input[str]]:
        """
        The compute name for image build
        """
        return pulumi.get(self, "image_build_compute")

    @image_build_compute.setter
    def image_build_compute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_build_compute", value)

    @property
    @pulumi.getter(name="keyVault")
    def key_vault(self) -> Optional[pulumi.Input[str]]:
        """
        ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
        """
        return pulumi.get(self, "key_vault")

    @key_vault.setter
    def key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault", value)

    @property
    @pulumi.getter(name="keyVaults")
    def key_vaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of key vaults used by Hub.
        """
        return pulumi.get(self, "key_vaults")

    @key_vaults.setter
    def key_vaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_vaults", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the location of the resource.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedNetwork")
    def managed_network(self) -> Optional[pulumi.Input['ManagedNetworkSettingsArgs']]:
        """
        Managed Network settings for a machine learning workspace.
        """
        return pulumi.get(self, "managed_network")

    @managed_network.setter
    def managed_network(self, value: Optional[pulumi.Input['ManagedNetworkSettingsArgs']]):
        pulumi.set(self, "managed_network", value)

    @property
    @pulumi.getter(name="primaryUserAssignedIdentity")
    def primary_user_assigned_identity(self) -> Optional[pulumi.Input[str]]:
        """
        The user assigned identity resource id that represents the workspace identity.
        """
        return pulumi.get(self, "primary_user_assigned_identity")

    @primary_user_assigned_identity.setter
    def primary_user_assigned_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_user_assigned_identity", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        Whether requests from Public Network are allowed.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="serviceManagedResourcesSettings")
    def service_managed_resources_settings(self) -> Optional[pulumi.Input['ServiceManagedResourcesSettingsArgs']]:
        """
        The service managed resource settings.
        """
        return pulumi.get(self, "service_managed_resources_settings")

    @service_managed_resources_settings.setter
    def service_managed_resources_settings(self, value: Optional[pulumi.Input['ServiceManagedResourcesSettingsArgs']]):
        pulumi.set(self, "service_managed_resources_settings", value)

    @property
    @pulumi.getter(name="sharedPrivateLinkResources")
    def shared_private_link_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SharedPrivateLinkResourceArgs']]]]:
        """
        The list of shared private link resources in this workspace.
        """
        return pulumi.get(self, "shared_private_link_resources")

    @shared_private_link_resources.setter
    def shared_private_link_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SharedPrivateLinkResourceArgs']]]]):
        pulumi.set(self, "shared_private_link_resources", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['SkuArgs']]:
        """
        The sku of the workspace.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['SkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="softDeleteRetentionInDays")
    def soft_delete_retention_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Retention time in days after workspace get soft deleted.
        """
        return pulumi.get(self, "soft_delete_retention_in_days")

    @soft_delete_retention_in_days.setter
    def soft_delete_retention_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soft_delete_retention_in_days", value)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> Optional[pulumi.Input[str]]:
        """
        ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
        """
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account", value)

    @property
    @pulumi.getter(name="storageAccounts")
    def storage_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        : A list of storage accounts used by Hub.
        """
        return pulumi.get(self, "storage_accounts")

    @storage_accounts.setter
    def storage_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_accounts", value)

    @property
    @pulumi.getter(name="systemDatastoresAuthMode")
    def system_datastores_auth_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The auth mode used for accessing the system datastores of the workspace
        """
        return pulumi.get(self, "system_datastores_auth_mode")

    @system_datastores_auth_mode.setter
    def system_datastores_auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_datastores_auth_mode", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Contains resource tags defined as key/value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="v1LegacyMode")
    def v1_legacy_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
        """
        return pulumi.get(self, "v1_legacy_mode")

    @v1_legacy_mode.setter
    def v1_legacy_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "v1_legacy_mode", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Azure Machine Learning workspace.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_name", value)


class Workspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_public_access_when_behind_vnet: Optional[pulumi.Input[bool]] = None,
                 application_insights: Optional[pulumi.Input[str]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_registry: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discovery_url: Optional[pulumi.Input[str]] = None,
                 enable_data_isolation: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input[pulumi.InputType['EncryptionPropertyArgs']]] = None,
                 existing_workspaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 feature_store_settings: Optional[pulumi.Input[pulumi.InputType['FeatureStoreSettingsArgs']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 hbi_workspace: Optional[pulumi.Input[bool]] = None,
                 hub_resource_id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']]] = None,
                 image_build_compute: Optional[pulumi.Input[str]] = None,
                 key_vault: Optional[pulumi.Input[str]] = None,
                 key_vaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_network: Optional[pulumi.Input[pulumi.InputType['ManagedNetworkSettingsArgs']]] = None,
                 primary_user_assigned_identity: Optional[pulumi.Input[str]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_managed_resources_settings: Optional[pulumi.Input[pulumi.InputType['ServiceManagedResourcesSettingsArgs']]] = None,
                 shared_private_link_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SharedPrivateLinkResourceArgs']]]]] = None,
                 sku: Optional[pulumi.Input[pulumi.InputType['SkuArgs']]] = None,
                 soft_delete_retention_in_days: Optional[pulumi.Input[int]] = None,
                 storage_account: Optional[pulumi.Input[str]] = None,
                 storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_datastores_auth_mode: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 v1_legacy_mode: Optional[pulumi.Input[bool]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An object that represents a machine learning workspace.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_public_access_when_behind_vnet: The flag to indicate whether to allow public access when behind VNet.
        :param pulumi.Input[str] application_insights: ARM id of the application insights associated with this workspace.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_registries: A list of container registries used by Hub.
        :param pulumi.Input[str] container_registry: ARM id of the container registry associated with this workspace.
        :param pulumi.Input[str] description: The description of this workspace.
        :param pulumi.Input[str] discovery_url: Url for the discovery service to identify regional endpoints for machine learning experimentation services
        :param pulumi.Input[bool] enable_data_isolation: A flag to determine if workspace has data isolation enabled. The flag can only be set at the creation phase, it can't be updated.
        :param pulumi.Input[pulumi.InputType['EncryptionPropertyArgs']] encryption: The encryption settings of Azure ML workspace.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] existing_workspaces: A list of existing workspaces used by Hub to perform convert.
        :param pulumi.Input[pulumi.InputType['FeatureStoreSettingsArgs']] feature_store_settings: Settings for feature store type workspace.
        :param pulumi.Input[str] friendly_name: The friendly name for this workspace. This name in mutable
        :param pulumi.Input[bool] hbi_workspace: The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
        :param pulumi.Input[str] hub_resource_id: Resource Id of Hub used for lean workspace.
        :param pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']] identity: The identity of the resource.
        :param pulumi.Input[str] image_build_compute: The compute name for image build
        :param pulumi.Input[str] key_vault: ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_vaults: A list of key vaults used by Hub.
        :param pulumi.Input[str] location: Specifies the location of the resource.
        :param pulumi.Input[pulumi.InputType['ManagedNetworkSettingsArgs']] managed_network: Managed Network settings for a machine learning workspace.
        :param pulumi.Input[str] primary_user_assigned_identity: The user assigned identity resource id that represents the workspace identity.
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Whether requests from Public Network are allowed.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[pulumi.InputType['ServiceManagedResourcesSettingsArgs']] service_managed_resources_settings: The service managed resource settings.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SharedPrivateLinkResourceArgs']]]] shared_private_link_resources: The list of shared private link resources in this workspace.
        :param pulumi.Input[pulumi.InputType['SkuArgs']] sku: The sku of the workspace.
        :param pulumi.Input[int] soft_delete_retention_in_days: Retention time in days after workspace get soft deleted.
        :param pulumi.Input[str] storage_account: ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_accounts: : A list of storage accounts used by Hub.
        :param pulumi.Input[str] system_datastores_auth_mode: The auth mode used for accessing the system datastores of the workspace
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Contains resource tags defined as key/value pairs.
        :param pulumi.Input[bool] v1_legacy_mode: Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
        :param pulumi.Input[str] workspace_name: Name of Azure Machine Learning workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkspaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An object that represents a machine learning workspace.

        :param str resource_name: The name of the resource.
        :param WorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_public_access_when_behind_vnet: Optional[pulumi.Input[bool]] = None,
                 application_insights: Optional[pulumi.Input[str]] = None,
                 container_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_registry: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discovery_url: Optional[pulumi.Input[str]] = None,
                 enable_data_isolation: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input[pulumi.InputType['EncryptionPropertyArgs']]] = None,
                 existing_workspaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 feature_store_settings: Optional[pulumi.Input[pulumi.InputType['FeatureStoreSettingsArgs']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 hbi_workspace: Optional[pulumi.Input[bool]] = None,
                 hub_resource_id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']]] = None,
                 image_build_compute: Optional[pulumi.Input[str]] = None,
                 key_vault: Optional[pulumi.Input[str]] = None,
                 key_vaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_network: Optional[pulumi.Input[pulumi.InputType['ManagedNetworkSettingsArgs']]] = None,
                 primary_user_assigned_identity: Optional[pulumi.Input[str]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_managed_resources_settings: Optional[pulumi.Input[pulumi.InputType['ServiceManagedResourcesSettingsArgs']]] = None,
                 shared_private_link_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SharedPrivateLinkResourceArgs']]]]] = None,
                 sku: Optional[pulumi.Input[pulumi.InputType['SkuArgs']]] = None,
                 soft_delete_retention_in_days: Optional[pulumi.Input[int]] = None,
                 storage_account: Optional[pulumi.Input[str]] = None,
                 storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_datastores_auth_mode: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 v1_legacy_mode: Optional[pulumi.Input[bool]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceArgs.__new__(WorkspaceArgs)

            if allow_public_access_when_behind_vnet is None:
                allow_public_access_when_behind_vnet = False
            __props__.__dict__["allow_public_access_when_behind_vnet"] = allow_public_access_when_behind_vnet
            __props__.__dict__["application_insights"] = application_insights
            __props__.__dict__["container_registries"] = container_registries
            __props__.__dict__["container_registry"] = container_registry
            __props__.__dict__["description"] = description
            __props__.__dict__["discovery_url"] = discovery_url
            if enable_data_isolation is None:
                enable_data_isolation = False
            __props__.__dict__["enable_data_isolation"] = enable_data_isolation
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["existing_workspaces"] = existing_workspaces
            __props__.__dict__["feature_store_settings"] = feature_store_settings
            __props__.__dict__["friendly_name"] = friendly_name
            if hbi_workspace is None:
                hbi_workspace = False
            __props__.__dict__["hbi_workspace"] = hbi_workspace
            __props__.__dict__["hub_resource_id"] = hub_resource_id
            __props__.__dict__["identity"] = identity
            __props__.__dict__["image_build_compute"] = image_build_compute
            __props__.__dict__["key_vault"] = key_vault
            __props__.__dict__["key_vaults"] = key_vaults
            __props__.__dict__["kind"] = kind
            __props__.__dict__["location"] = location
            __props__.__dict__["managed_network"] = managed_network
            __props__.__dict__["primary_user_assigned_identity"] = primary_user_assigned_identity
            __props__.__dict__["public_network_access"] = public_network_access
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["service_managed_resources_settings"] = service_managed_resources_settings
            __props__.__dict__["shared_private_link_resources"] = shared_private_link_resources
            __props__.__dict__["sku"] = sku
            __props__.__dict__["soft_delete_retention_in_days"] = soft_delete_retention_in_days
            __props__.__dict__["storage_account"] = storage_account
            __props__.__dict__["storage_accounts"] = storage_accounts
            __props__.__dict__["system_datastores_auth_mode"] = system_datastores_auth_mode
            __props__.__dict__["tags"] = tags
            if v1_legacy_mode is None:
                v1_legacy_mode = False
            __props__.__dict__["v1_legacy_mode"] = v1_legacy_mode
            __props__.__dict__["workspace_name"] = workspace_name
            __props__.__dict__["associated_workspaces"] = None
            __props__.__dict__["ml_flow_tracking_uri"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["notebook_info"] = None
            __props__.__dict__["private_endpoint_connections"] = None
            __props__.__dict__["private_link_count"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["scheduled_purge_date"] = None
            __props__.__dict__["service_provisioned_resource_group"] = None
            __props__.__dict__["soft_deleted_at"] = None
            __props__.__dict__["storage_hns_enabled"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["tenant_id"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["workspace_id"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:machinelearningservices:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20180301preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20181119:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20190501:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20190601:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20191101:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200101:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200218preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200301:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200401:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200501preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200515preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200601:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200801:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20200901preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20210101:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20210301preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20210401:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20210701:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220101preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220201preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220501:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220601preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20221001:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20221001preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20221201preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20230201preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20230401:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20230601preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20230801preview:Workspace"), pulumi.Alias(type_="azure-native:machinelearningservices/v20231001:Workspace")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Workspace, __self__).__init__(
            'azure-native:machinelearningservices/v20230401preview:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Workspace':
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WorkspaceArgs.__new__(WorkspaceArgs)

        __props__.__dict__["allow_public_access_when_behind_vnet"] = None
        __props__.__dict__["application_insights"] = None
        __props__.__dict__["associated_workspaces"] = None
        __props__.__dict__["container_registries"] = None
        __props__.__dict__["container_registry"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["discovery_url"] = None
        __props__.__dict__["enable_data_isolation"] = None
        __props__.__dict__["encryption"] = None
        __props__.__dict__["existing_workspaces"] = None
        __props__.__dict__["feature_store_settings"] = None
        __props__.__dict__["friendly_name"] = None
        __props__.__dict__["hbi_workspace"] = None
        __props__.__dict__["hub_resource_id"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["image_build_compute"] = None
        __props__.__dict__["key_vault"] = None
        __props__.__dict__["key_vaults"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["managed_network"] = None
        __props__.__dict__["ml_flow_tracking_uri"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["notebook_info"] = None
        __props__.__dict__["primary_user_assigned_identity"] = None
        __props__.__dict__["private_endpoint_connections"] = None
        __props__.__dict__["private_link_count"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["public_network_access"] = None
        __props__.__dict__["scheduled_purge_date"] = None
        __props__.__dict__["service_managed_resources_settings"] = None
        __props__.__dict__["service_provisioned_resource_group"] = None
        __props__.__dict__["shared_private_link_resources"] = None
        __props__.__dict__["sku"] = None
        __props__.__dict__["soft_delete_retention_in_days"] = None
        __props__.__dict__["soft_deleted_at"] = None
        __props__.__dict__["storage_account"] = None
        __props__.__dict__["storage_accounts"] = None
        __props__.__dict__["storage_hns_enabled"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["system_datastores_auth_mode"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["tenant_id"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["v1_legacy_mode"] = None
        __props__.__dict__["workspace_id"] = None
        return Workspace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowPublicAccessWhenBehindVnet")
    def allow_public_access_when_behind_vnet(self) -> pulumi.Output[Optional[bool]]:
        """
        The flag to indicate whether to allow public access when behind VNet.
        """
        return pulumi.get(self, "allow_public_access_when_behind_vnet")

    @property
    @pulumi.getter(name="applicationInsights")
    def application_insights(self) -> pulumi.Output[Optional[str]]:
        """
        ARM id of the application insights associated with this workspace.
        """
        return pulumi.get(self, "application_insights")

    @property
    @pulumi.getter(name="associatedWorkspaces")
    def associated_workspaces(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of lean workspaces associated with Hub.
        """
        return pulumi.get(self, "associated_workspaces")

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of container registries used by Hub.
        """
        return pulumi.get(self, "container_registries")

    @property
    @pulumi.getter(name="containerRegistry")
    def container_registry(self) -> pulumi.Output[Optional[str]]:
        """
        ARM id of the container registry associated with this workspace.
        """
        return pulumi.get(self, "container_registry")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this workspace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> pulumi.Output[Optional[str]]:
        """
        Url for the discovery service to identify regional endpoints for machine learning experimentation services
        """
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="enableDataIsolation")
    def enable_data_isolation(self) -> pulumi.Output[Optional[bool]]:
        """
        A flag to determine if workspace has data isolation enabled. The flag can only be set at the creation phase, it can't be updated.
        """
        return pulumi.get(self, "enable_data_isolation")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[Optional['outputs.EncryptionPropertyResponse']]:
        """
        The encryption settings of Azure ML workspace.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="existingWorkspaces")
    def existing_workspaces(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of existing workspaces used by Hub to perform convert.
        """
        return pulumi.get(self, "existing_workspaces")

    @property
    @pulumi.getter(name="featureStoreSettings")
    def feature_store_settings(self) -> pulumi.Output[Optional['outputs.FeatureStoreSettingsResponse']]:
        """
        Settings for feature store type workspace.
        """
        return pulumi.get(self, "feature_store_settings")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[Optional[str]]:
        """
        The friendly name for this workspace. This name in mutable
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="hbiWorkspace")
    def hbi_workspace(self) -> pulumi.Output[Optional[bool]]:
        """
        The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
        """
        return pulumi.get(self, "hbi_workspace")

    @property
    @pulumi.getter(name="hubResourceId")
    def hub_resource_id(self) -> pulumi.Output[Optional[str]]:
        """
        Resource Id of Hub used for lean workspace.
        """
        return pulumi.get(self, "hub_resource_id")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ManagedServiceIdentityResponse']]:
        """
        The identity of the resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="imageBuildCompute")
    def image_build_compute(self) -> pulumi.Output[Optional[str]]:
        """
        The compute name for image build
        """
        return pulumi.get(self, "image_build_compute")

    @property
    @pulumi.getter(name="keyVault")
    def key_vault(self) -> pulumi.Output[Optional[str]]:
        """
        ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
        """
        return pulumi.get(self, "key_vault")

    @property
    @pulumi.getter(name="keyVaults")
    def key_vaults(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of key vaults used by Hub.
        """
        return pulumi.get(self, "key_vaults")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the location of the resource.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedNetwork")
    def managed_network(self) -> pulumi.Output[Optional['outputs.ManagedNetworkSettingsResponse']]:
        """
        Managed Network settings for a machine learning workspace.
        """
        return pulumi.get(self, "managed_network")

    @property
    @pulumi.getter(name="mlFlowTrackingUri")
    def ml_flow_tracking_uri(self) -> pulumi.Output[str]:
        """
        The URI associated with this workspace that machine learning flow must point at to set up tracking.
        """
        return pulumi.get(self, "ml_flow_tracking_uri")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notebookInfo")
    def notebook_info(self) -> pulumi.Output['outputs.NotebookResourceInfoResponse']:
        """
        The notebook info of Azure ML workspace.
        """
        return pulumi.get(self, "notebook_info")

    @property
    @pulumi.getter(name="primaryUserAssignedIdentity")
    def primary_user_assigned_identity(self) -> pulumi.Output[Optional[str]]:
        """
        The user assigned identity resource id that represents the workspace identity.
        """
        return pulumi.get(self, "primary_user_assigned_identity")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> pulumi.Output[Sequence['outputs.PrivateEndpointConnectionResponse']]:
        """
        The list of private endpoint connections in the workspace.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="privateLinkCount")
    def private_link_count(self) -> pulumi.Output[int]:
        """
        Count of private connections in the workspace
        """
        return pulumi.get(self, "private_link_count")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> pulumi.Output[Optional[str]]:
        """
        Whether requests from Public Network are allowed.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter(name="scheduledPurgeDate")
    def scheduled_purge_date(self) -> pulumi.Output[str]:
        """
        The timestamp when the soft deleted workspace is going to be purged
        """
        return pulumi.get(self, "scheduled_purge_date")

    @property
    @pulumi.getter(name="serviceManagedResourcesSettings")
    def service_managed_resources_settings(self) -> pulumi.Output[Optional['outputs.ServiceManagedResourcesSettingsResponse']]:
        """
        The service managed resource settings.
        """
        return pulumi.get(self, "service_managed_resources_settings")

    @property
    @pulumi.getter(name="serviceProvisionedResourceGroup")
    def service_provisioned_resource_group(self) -> pulumi.Output[str]:
        """
        The name of the managed resource group created by workspace RP in customer subscription if the workspace is CMK workspace
        """
        return pulumi.get(self, "service_provisioned_resource_group")

    @property
    @pulumi.getter(name="sharedPrivateLinkResources")
    def shared_private_link_resources(self) -> pulumi.Output[Optional[Sequence['outputs.SharedPrivateLinkResourceResponse']]]:
        """
        The list of shared private link resources in this workspace.
        """
        return pulumi.get(self, "shared_private_link_resources")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[Optional['outputs.SkuResponse']]:
        """
        The sku of the workspace.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="softDeleteRetentionInDays")
    def soft_delete_retention_in_days(self) -> pulumi.Output[Optional[int]]:
        """
        Retention time in days after workspace get soft deleted.
        """
        return pulumi.get(self, "soft_delete_retention_in_days")

    @property
    @pulumi.getter(name="softDeletedAt")
    def soft_deleted_at(self) -> pulumi.Output[str]:
        """
        The timestamp when the workspace was soft deleted
        """
        return pulumi.get(self, "soft_deleted_at")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> pulumi.Output[Optional[str]]:
        """
        ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
        """
        return pulumi.get(self, "storage_account")

    @property
    @pulumi.getter(name="storageAccounts")
    def storage_accounts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        : A list of storage accounts used by Hub.
        """
        return pulumi.get(self, "storage_accounts")

    @property
    @pulumi.getter(name="storageHnsEnabled")
    def storage_hns_enabled(self) -> pulumi.Output[bool]:
        """
        If the storage associated with the workspace has hierarchical namespace(HNS) enabled.
        """
        return pulumi.get(self, "storage_hns_enabled")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="systemDatastoresAuthMode")
    def system_datastores_auth_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The auth mode used for accessing the system datastores of the workspace
        """
        return pulumi.get(self, "system_datastores_auth_mode")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Contains resource tags defined as key/value pairs.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The tenant id associated with this workspace.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="v1LegacyMode")
    def v1_legacy_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
        """
        return pulumi.get(self, "v1_legacy_mode")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        The immutable id associated with this workspace.
        """
        return pulumi.get(self, "workspace_id")

