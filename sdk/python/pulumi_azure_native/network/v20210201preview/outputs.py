# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from ._enums import *

__all__ = [
    'AddressPrefixItemResponse',
    'ConnectivityGroupItemResponse',
    'EffectiveVirtualNetworkResponseResult',
    'GroupMembersItemResponse',
    'NetworkManagerDeploymentStatusResponseResult',
    'NetworkManagerPropertiesResponseNetworkManagerScopes',
    'NetworkManagerSecurityGroupItemResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AddressPrefixItemResponse(dict):
    """
    Address prefix item.
    """
    def __init__(__self__, *,
                 address_prefix: Optional[str] = None,
                 address_prefix_type: Optional[str] = None):
        """
        Address prefix item.
        :param str address_prefix: Address prefix.
        :param str address_prefix_type: Address prefix type.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefix_type is not None:
            pulumi.set(__self__, "address_prefix_type", address_prefix_type)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[str]:
        """
        Address prefix.
        """
        return pulumi.get(self, "address_prefix")

    @property
    @pulumi.getter(name="addressPrefixType")
    def address_prefix_type(self) -> Optional[str]:
        """
        Address prefix type.
        """
        return pulumi.get(self, "address_prefix_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectivityGroupItemResponse(dict):
    def __init__(__self__, *,
                 group_connectivity: Optional[str] = None,
                 is_global: Optional[bool] = None,
                 network_group_id: Optional[str] = None,
                 use_hub_gateway: Optional[bool] = None):
        """
        :param str group_connectivity: Group connectivity type.
        :param bool is_global: Flag if global is supported.
        :param str network_group_id: Network group Id.
        :param bool use_hub_gateway: Flag if need to use hub gateway.
        """
        if group_connectivity is not None:
            pulumi.set(__self__, "group_connectivity", group_connectivity)
        if is_global is not None:
            pulumi.set(__self__, "is_global", is_global)
        if network_group_id is not None:
            pulumi.set(__self__, "network_group_id", network_group_id)
        if use_hub_gateway is not None:
            pulumi.set(__self__, "use_hub_gateway", use_hub_gateway)

    @property
    @pulumi.getter(name="groupConnectivity")
    def group_connectivity(self) -> Optional[str]:
        """
        Group connectivity type.
        """
        return pulumi.get(self, "group_connectivity")

    @property
    @pulumi.getter(name="isGlobal")
    def is_global(self) -> Optional[bool]:
        """
        Flag if global is supported.
        """
        return pulumi.get(self, "is_global")

    @property
    @pulumi.getter(name="networkGroupId")
    def network_group_id(self) -> Optional[str]:
        """
        Network group Id.
        """
        return pulumi.get(self, "network_group_id")

    @property
    @pulumi.getter(name="useHubGateway")
    def use_hub_gateway(self) -> Optional[bool]:
        """
        Flag if need to use hub gateway.
        """
        return pulumi.get(self, "use_hub_gateway")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EffectiveVirtualNetworkResponseResult(dict):
    """
    Effective Virtual Network
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 location: Optional[str] = None,
                 membership_type: Optional[str] = None):
        """
        Effective Virtual Network
        :param str id: Effective vnet Id.
        :param str location: Location of vnet.
        :param str membership_type: Membership Type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if membership_type is not None:
            pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Effective vnet Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Location of vnet.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> Optional[str]:
        """
        Membership Type.
        """
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class GroupMembersItemResponse(dict):
    """
    GroupMembers Item.
    """
    def __init__(__self__, *,
                 resource_id: Optional[str] = None):
        """
        GroupMembers Item.
        :param str resource_id: Resource Id.
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        Resource Id.
        """
        return pulumi.get(self, "resource_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkManagerDeploymentStatusResponseResult(dict):
    """
    Network Manager Deployment Status.
    """
    def __init__(__self__, *,
                 commit_time: Optional[str] = None,
                 configuration_ids: Optional[Sequence[str]] = None,
                 deployment_status: Optional[str] = None,
                 deployment_type: Optional[str] = None,
                 error_message: Optional[str] = None,
                 region: Optional[str] = None):
        """
        Network Manager Deployment Status.
        :param str commit_time: Commit Time.
        :param Sequence[str] configuration_ids: List of configuration ids.
        :param str deployment_status: Deployment Status.
        :param str deployment_type: Configuration Deployment Type.
        :param str error_message: Error Message.
        :param str region: Region Name.
        """
        if commit_time is not None:
            pulumi.set(__self__, "commit_time", commit_time)
        if configuration_ids is not None:
            pulumi.set(__self__, "configuration_ids", configuration_ids)
        if deployment_status is not None:
            pulumi.set(__self__, "deployment_status", deployment_status)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="commitTime")
    def commit_time(self) -> Optional[str]:
        """
        Commit Time.
        """
        return pulumi.get(self, "commit_time")

    @property
    @pulumi.getter(name="configurationIds")
    def configuration_ids(self) -> Optional[Sequence[str]]:
        """
        List of configuration ids.
        """
        return pulumi.get(self, "configuration_ids")

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> Optional[str]:
        """
        Deployment Status.
        """
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        """
        Configuration Deployment Type.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error Message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region Name.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class NetworkManagerPropertiesResponseNetworkManagerScopes(dict):
    """
    Scope of Network Manager.
    """
    def __init__(__self__, *,
                 management_groups: Optional[Sequence[str]] = None,
                 subscriptions: Optional[Sequence[str]] = None):
        """
        Scope of Network Manager.
        :param Sequence[str] management_groups: List of management groups.
        :param Sequence[str] subscriptions: List of subscriptions.
        """
        if management_groups is not None:
            pulumi.set(__self__, "management_groups", management_groups)
        if subscriptions is not None:
            pulumi.set(__self__, "subscriptions", subscriptions)

    @property
    @pulumi.getter(name="managementGroups")
    def management_groups(self) -> Optional[Sequence[str]]:
        """
        List of management groups.
        """
        return pulumi.get(self, "management_groups")

    @property
    @pulumi.getter
    def subscriptions(self) -> Optional[Sequence[str]]:
        """
        List of subscriptions.
        """
        return pulumi.get(self, "subscriptions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkManagerSecurityGroupItemResponse(dict):
    """
    Network manager security group item.
    """
    def __init__(__self__, *,
                 network_group_id: Optional[str] = None):
        """
        Network manager security group item.
        :param str network_group_id: Network manager group Id.
        """
        if network_group_id is not None:
            pulumi.set(__self__, "network_group_id", network_group_id)

    @property
    @pulumi.getter(name="networkGroupId")
    def network_group_id(self) -> Optional[str]:
        """
        Network manager group Id.
        """
        return pulumi.get(self, "network_group_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The type of identity that last modified the resource.
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


