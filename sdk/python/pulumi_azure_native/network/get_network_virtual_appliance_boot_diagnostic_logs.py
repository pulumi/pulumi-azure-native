# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetNetworkVirtualApplianceBootDiagnosticLogsResult',
    'AwaitableGetNetworkVirtualApplianceBootDiagnosticLogsResult',
    'get_network_virtual_appliance_boot_diagnostic_logs',
    'get_network_virtual_appliance_boot_diagnostic_logs_output',
]

@pulumi.output_type
class GetNetworkVirtualApplianceBootDiagnosticLogsResult:
    def __init__(__self__, instance_id=None):
        if instance_id and not isinstance(instance_id, int):
            raise TypeError("Expected argument 'instance_id' to be a int")
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.int]:
        """
        The network virtual appliance instance id for which boot diagnostic logs is being requested
        """
        return pulumi.get(self, "instance_id")


class AwaitableGetNetworkVirtualApplianceBootDiagnosticLogsResult(GetNetworkVirtualApplianceBootDiagnosticLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkVirtualApplianceBootDiagnosticLogsResult(
            instance_id=self.instance_id)


def get_network_virtual_appliance_boot_diagnostic_logs(console_screenshot_storage_sas_url: Optional[builtins.str] = None,
                                                       instance_id: Optional[builtins.int] = None,
                                                       network_virtual_appliance_name: Optional[builtins.str] = None,
                                                       resource_group_name: Optional[builtins.str] = None,
                                                       serial_console_storage_sas_url: Optional[builtins.str] = None,
                                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkVirtualApplianceBootDiagnosticLogsResult:
    """
    Retrieves the boot diagnostic logs for a VM instance belonging to the specified Network Virtual Appliance.

    Uses Azure REST API version 2024-07-01.


    :param builtins.str console_screenshot_storage_sas_url: Specifies the sas-url to the storage blob into which console screen shot for the requested instance will be written
    :param builtins.int instance_id: The network virtual appliance instance id for which boot diagnostic logs is being requested
    :param builtins.str network_virtual_appliance_name: The name of Network Virtual Appliance.
    :param builtins.str resource_group_name: The name of the resource group.
    :param builtins.str serial_console_storage_sas_url: Specifies the sas-url to the storage blob into which serial console logs for the requested instance will be written
    """
    __args__ = dict()
    __args__['consoleScreenshotStorageSasUrl'] = console_screenshot_storage_sas_url
    __args__['instanceId'] = instance_id
    __args__['networkVirtualApplianceName'] = network_virtual_appliance_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serialConsoleStorageSasUrl'] = serial_console_storage_sas_url
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:network:getNetworkVirtualApplianceBootDiagnosticLogs', __args__, opts=opts, typ=GetNetworkVirtualApplianceBootDiagnosticLogsResult).value

    return AwaitableGetNetworkVirtualApplianceBootDiagnosticLogsResult(
        instance_id=pulumi.get(__ret__, 'instance_id'))
def get_network_virtual_appliance_boot_diagnostic_logs_output(console_screenshot_storage_sas_url: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                              instance_id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                                              network_virtual_appliance_name: Optional[pulumi.Input[builtins.str]] = None,
                                                              resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                                                              serial_console_storage_sas_url: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkVirtualApplianceBootDiagnosticLogsResult]:
    """
    Retrieves the boot diagnostic logs for a VM instance belonging to the specified Network Virtual Appliance.

    Uses Azure REST API version 2024-07-01.


    :param builtins.str console_screenshot_storage_sas_url: Specifies the sas-url to the storage blob into which console screen shot for the requested instance will be written
    :param builtins.int instance_id: The network virtual appliance instance id for which boot diagnostic logs is being requested
    :param builtins.str network_virtual_appliance_name: The name of Network Virtual Appliance.
    :param builtins.str resource_group_name: The name of the resource group.
    :param builtins.str serial_console_storage_sas_url: Specifies the sas-url to the storage blob into which serial console logs for the requested instance will be written
    """
    __args__ = dict()
    __args__['consoleScreenshotStorageSasUrl'] = console_screenshot_storage_sas_url
    __args__['instanceId'] = instance_id
    __args__['networkVirtualApplianceName'] = network_virtual_appliance_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['serialConsoleStorageSasUrl'] = serial_console_storage_sas_url
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:network:getNetworkVirtualApplianceBootDiagnosticLogs', __args__, opts=opts, typ=GetNetworkVirtualApplianceBootDiagnosticLogsResult)
    return __ret__.apply(lambda __response__: GetNetworkVirtualApplianceBootDiagnosticLogsResult(
        instance_id=pulumi.get(__response__, 'instance_id')))
