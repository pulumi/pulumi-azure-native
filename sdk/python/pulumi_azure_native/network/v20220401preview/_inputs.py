# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AddressPrefixItemArgs',
    'AddressPrefixItemArgsDict',
    'NetworkManagerSecurityGroupItemArgs',
    'NetworkManagerSecurityGroupItemArgsDict',
]

MYPY = False

if not MYPY:
    class AddressPrefixItemArgsDict(TypedDict):
        """
        Address prefix item.
        """
        address_prefix: NotRequired[pulumi.Input[str]]
        """
        Address prefix.
        """
        address_prefix_type: NotRequired[pulumi.Input[Union[str, 'AddressPrefixType']]]
        """
        Address prefix type.
        """
elif False:
    AddressPrefixItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressPrefixItemArgs:
    def __init__(__self__, *,
                 address_prefix: Optional[pulumi.Input[str]] = None,
                 address_prefix_type: Optional[pulumi.Input[Union[str, 'AddressPrefixType']]] = None):
        """
        Address prefix item.
        :param pulumi.Input[str] address_prefix: Address prefix.
        :param pulumi.Input[Union[str, 'AddressPrefixType']] address_prefix_type: Address prefix type.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefix_type is not None:
            pulumi.set(__self__, "address_prefix_type", address_prefix_type)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Address prefix.
        """
        return pulumi.get(self, "address_prefix")

    @address_prefix.setter
    def address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_prefix", value)

    @property
    @pulumi.getter(name="addressPrefixType")
    def address_prefix_type(self) -> Optional[pulumi.Input[Union[str, 'AddressPrefixType']]]:
        """
        Address prefix type.
        """
        return pulumi.get(self, "address_prefix_type")

    @address_prefix_type.setter
    def address_prefix_type(self, value: Optional[pulumi.Input[Union[str, 'AddressPrefixType']]]):
        pulumi.set(self, "address_prefix_type", value)


if not MYPY:
    class NetworkManagerSecurityGroupItemArgsDict(TypedDict):
        """
        Network manager security group item.
        """
        network_group_id: pulumi.Input[str]
        """
        Network manager group Id.
        """
elif False:
    NetworkManagerSecurityGroupItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkManagerSecurityGroupItemArgs:
    def __init__(__self__, *,
                 network_group_id: pulumi.Input[str]):
        """
        Network manager security group item.
        :param pulumi.Input[str] network_group_id: Network manager group Id.
        """
        pulumi.set(__self__, "network_group_id", network_group_id)

    @property
    @pulumi.getter(name="networkGroupId")
    def network_group_id(self) -> pulumi.Input[str]:
        """
        Network manager group Id.
        """
        return pulumi.get(self, "network_group_id")

    @network_group_id.setter
    def network_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_group_id", value)


