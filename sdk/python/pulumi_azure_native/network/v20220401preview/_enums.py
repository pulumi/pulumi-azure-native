# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AddressPrefixType',
    'AdminRuleKind',
    'AllowedEndpointRecordType',
    'AlwaysServe',
    'ConfigurationType',
    'ConnectivityTopology',
    'DeleteExistingNSGs',
    'DeleteExistingPeering',
    'EndpointMonitorStatus',
    'EndpointStatus',
    'GroupConnectivity',
    'IsGlobal',
    'MonitorProtocol',
    'NetworkIntentPolicyBasedService',
    'ProfileMonitorStatus',
    'ProfileStatus',
    'SecurityConfigurationRuleAccess',
    'SecurityConfigurationRuleDirection',
    'SecurityConfigurationRuleProtocol',
    'TrafficRoutingMethod',
    'TrafficViewEnrollmentStatus',
    'UseHubGateway',
    'UserRuleKind',
]


class AddressPrefixType(str, Enum):
    """
    Address prefix type.
    """
    IP_PREFIX = "IPPrefix"
    SERVICE_TAG = "ServiceTag"


class AdminRuleKind(str, Enum):
    """
    Whether the rule is custom or default.
    """
    CUSTOM = "Custom"
    DEFAULT = "Default"


class AllowedEndpointRecordType(str, Enum):
    """
    The allowed type DNS record types for this profile.
    """
    DOMAIN_NAME = "DomainName"
    I_PV4_ADDRESS = "IPv4Address"
    I_PV6_ADDRESS = "IPv6Address"
    ANY = "Any"


class AlwaysServe(str, Enum):
    """
    If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic routing method.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ConfigurationType(str, Enum):
    """
    Configuration Deployment Type.
    """
    SECURITY_ADMIN = "SecurityAdmin"
    SECURITY_USER = "SecurityUser"
    CONNECTIVITY = "Connectivity"


class ConnectivityTopology(str, Enum):
    """
    Connectivity topology type.
    """
    HUB_AND_SPOKE = "HubAndSpoke"
    MESH = "Mesh"


class DeleteExistingNSGs(str, Enum):
    """
    Flag if need to delete existing network security groups.
    """
    FALSE = "False"
    TRUE = "True"


class DeleteExistingPeering(str, Enum):
    """
    Flag if need to remove current existing peerings.
    """
    FALSE = "False"
    TRUE = "True"


class EndpointMonitorStatus(str, Enum):
    """
    The monitoring status of the endpoint.
    """
    CHECKING_ENDPOINT = "CheckingEndpoint"
    ONLINE = "Online"
    DEGRADED = "Degraded"
    DISABLED = "Disabled"
    INACTIVE = "Inactive"
    STOPPED = "Stopped"


class EndpointStatus(str, Enum):
    """
    The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class GroupConnectivity(str, Enum):
    """
    Group connectivity type.
    """
    NONE = "None"
    DIRECTLY_CONNECTED = "DirectlyConnected"


class IsGlobal(str, Enum):
    """
    Flag if global mesh is supported.
    """
    FALSE = "False"
    TRUE = "True"


class MonitorProtocol(str, Enum):
    """
    The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
    """
    HTTP = "HTTP"
    HTTPS = "HTTPS"
    TCP = "TCP"


class NetworkIntentPolicyBasedService(str, Enum):
    """
    Network intent policy based services.
    """
    NONE = "None"
    ALL = "All"


class ProfileMonitorStatus(str, Enum):
    """
    The profile-level monitoring status of the Traffic Manager profile.
    """
    CHECKING_ENDPOINTS = "CheckingEndpoints"
    ONLINE = "Online"
    DEGRADED = "Degraded"
    DISABLED = "Disabled"
    INACTIVE = "Inactive"


class ProfileStatus(str, Enum):
    """
    The status of the Traffic Manager profile.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SecurityConfigurationRuleAccess(str, Enum):
    """
    Indicates the access allowed for this particular rule
    """
    ALLOW = "Allow"
    DENY = "Deny"
    ALWAYS_ALLOW = "AlwaysAllow"


class SecurityConfigurationRuleDirection(str, Enum):
    """
    Indicates if the traffic matched against the rule in inbound or outbound.
    """
    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class SecurityConfigurationRuleProtocol(str, Enum):
    """
    Network protocol this rule applies to.
    """
    TCP = "Tcp"
    UDP = "Udp"
    ICMP = "Icmp"
    ESP = "Esp"
    ANY = "Any"
    AH = "Ah"


class TrafficRoutingMethod(str, Enum):
    """
    The traffic routing method of the Traffic Manager profile.
    """
    PERFORMANCE = "Performance"
    PRIORITY = "Priority"
    WEIGHTED = "Weighted"
    GEOGRAPHIC = "Geographic"
    MULTI_VALUE = "MultiValue"
    SUBNET = "Subnet"


class TrafficViewEnrollmentStatus(str, Enum):
    """
    Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class UseHubGateway(str, Enum):
    """
    Flag if need to use hub gateway.
    """
    FALSE = "False"
    TRUE = "True"


class UserRuleKind(str, Enum):
    """
    Whether the rule is custom or default.
    """
    CUSTOM = "Custom"
    DEFAULT = "Default"
