# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DnsSecurityRuleArgs', 'DnsSecurityRule']

@pulumi.input_type
class DnsSecurityRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['DnsSecurityRuleActionArgs'],
                 dns_resolver_domain_lists: pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]],
                 dns_resolver_policy_name: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 resource_group_name: pulumi.Input[str],
                 dns_security_rule_name: Optional[pulumi.Input[str]] = None,
                 dns_security_rule_state: Optional[pulumi.Input[Union[str, 'DnsSecurityRuleState']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DnsSecurityRule resource.
        :param pulumi.Input['DnsSecurityRuleActionArgs'] action: The action to take on DNS requests that match the DNS security rule.
        :param pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]] dns_resolver_domain_lists: DNS resolver policy domains lists that the DNS security rule applies to.
        :param pulumi.Input[str] dns_resolver_policy_name: The name of the DNS resolver policy.
        :param pulumi.Input[int] priority: The priority of the DNS security rule.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] dns_security_rule_name: The name of the DNS security rule.
        :param pulumi.Input[Union[str, 'DnsSecurityRuleState']] dns_security_rule_state: The state of DNS security rule.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dns_resolver_domain_lists", dns_resolver_domain_lists)
        pulumi.set(__self__, "dns_resolver_policy_name", dns_resolver_policy_name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if dns_security_rule_name is not None:
            pulumi.set(__self__, "dns_security_rule_name", dns_security_rule_name)
        if dns_security_rule_state is not None:
            pulumi.set(__self__, "dns_security_rule_state", dns_security_rule_state)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['DnsSecurityRuleActionArgs']:
        """
        The action to take on DNS requests that match the DNS security rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['DnsSecurityRuleActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dnsResolverDomainLists")
    def dns_resolver_domain_lists(self) -> pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]]:
        """
        DNS resolver policy domains lists that the DNS security rule applies to.
        """
        return pulumi.get(self, "dns_resolver_domain_lists")

    @dns_resolver_domain_lists.setter
    def dns_resolver_domain_lists(self, value: pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]]):
        pulumi.set(self, "dns_resolver_domain_lists", value)

    @property
    @pulumi.getter(name="dnsResolverPolicyName")
    def dns_resolver_policy_name(self) -> pulumi.Input[str]:
        """
        The name of the DNS resolver policy.
        """
        return pulumi.get(self, "dns_resolver_policy_name")

    @dns_resolver_policy_name.setter
    def dns_resolver_policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dns_resolver_policy_name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        The priority of the DNS security rule.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="dnsSecurityRuleName")
    def dns_security_rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the DNS security rule.
        """
        return pulumi.get(self, "dns_security_rule_name")

    @dns_security_rule_name.setter
    def dns_security_rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_security_rule_name", value)

    @property
    @pulumi.getter(name="dnsSecurityRuleState")
    def dns_security_rule_state(self) -> Optional[pulumi.Input[Union[str, 'DnsSecurityRuleState']]]:
        """
        The state of DNS security rule.
        """
        return pulumi.get(self, "dns_security_rule_state")

    @dns_security_rule_state.setter
    def dns_security_rule_state(self, value: Optional[pulumi.Input[Union[str, 'DnsSecurityRuleState']]]):
        pulumi.set(self, "dns_security_rule_state", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class DnsSecurityRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[Union['DnsSecurityRuleActionArgs', 'DnsSecurityRuleActionArgsDict']]] = None,
                 dns_resolver_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubResourceArgs', 'SubResourceArgsDict']]]]] = None,
                 dns_resolver_policy_name: Optional[pulumi.Input[str]] = None,
                 dns_security_rule_name: Optional[pulumi.Input[str]] = None,
                 dns_security_rule_state: Optional[pulumi.Input[Union[str, 'DnsSecurityRuleState']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Describes a DNS security rule.
        Azure REST API version: 2023-07-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DnsSecurityRuleActionArgs', 'DnsSecurityRuleActionArgsDict']] action: The action to take on DNS requests that match the DNS security rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SubResourceArgs', 'SubResourceArgsDict']]]] dns_resolver_domain_lists: DNS resolver policy domains lists that the DNS security rule applies to.
        :param pulumi.Input[str] dns_resolver_policy_name: The name of the DNS resolver policy.
        :param pulumi.Input[str] dns_security_rule_name: The name of the DNS security rule.
        :param pulumi.Input[Union[str, 'DnsSecurityRuleState']] dns_security_rule_state: The state of DNS security rule.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[int] priority: The priority of the DNS security rule.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsSecurityRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Describes a DNS security rule.
        Azure REST API version: 2023-07-01-preview.

        :param str resource_name: The name of the resource.
        :param DnsSecurityRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsSecurityRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[Union['DnsSecurityRuleActionArgs', 'DnsSecurityRuleActionArgsDict']]] = None,
                 dns_resolver_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubResourceArgs', 'SubResourceArgsDict']]]]] = None,
                 dns_resolver_policy_name: Optional[pulumi.Input[str]] = None,
                 dns_security_rule_name: Optional[pulumi.Input[str]] = None,
                 dns_security_rule_state: Optional[pulumi.Input[Union[str, 'DnsSecurityRuleState']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsSecurityRuleArgs.__new__(DnsSecurityRuleArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if dns_resolver_domain_lists is None and not opts.urn:
                raise TypeError("Missing required property 'dns_resolver_domain_lists'")
            __props__.__dict__["dns_resolver_domain_lists"] = dns_resolver_domain_lists
            if dns_resolver_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'dns_resolver_policy_name'")
            __props__.__dict__["dns_resolver_policy_name"] = dns_resolver_policy_name
            __props__.__dict__["dns_security_rule_name"] = dns_security_rule_name
            __props__.__dict__["dns_security_rule_state"] = dns_security_rule_state
            __props__.__dict__["location"] = location
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["etag"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:network/v20230701preview:DnsSecurityRule")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DnsSecurityRule, __self__).__init__(
            'azure-native:network:DnsSecurityRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DnsSecurityRule':
        """
        Get an existing DnsSecurityRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DnsSecurityRuleArgs.__new__(DnsSecurityRuleArgs)

        __props__.__dict__["action"] = None
        __props__.__dict__["dns_resolver_domain_lists"] = None
        __props__.__dict__["dns_security_rule_state"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return DnsSecurityRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output['outputs.DnsSecurityRuleActionResponse']:
        """
        The action to take on DNS requests that match the DNS security rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dnsResolverDomainLists")
    def dns_resolver_domain_lists(self) -> pulumi.Output[Sequence['outputs.SubResourceResponse']]:
        """
        DNS resolver policy domains lists that the DNS security rule applies to.
        """
        return pulumi.get(self, "dns_resolver_domain_lists")

    @property
    @pulumi.getter(name="dnsSecurityRuleState")
    def dns_security_rule_state(self) -> pulumi.Output[Optional[str]]:
        """
        The state of DNS security rule.
        """
        return pulumi.get(self, "dns_security_rule_state")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        ETag of the DNS security rule.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        The priority of the DNS security rule.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The current provisioning state of the DNS security rule. This is a read-only property and any attempt to set this value will be ignored.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

