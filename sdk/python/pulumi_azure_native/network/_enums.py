# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'Access',
    'AccessRuleDirection',
    'ActionType',
    'AddressPrefixType',
    'AdminRuleKind',
    'AdminState',
    'AllowedEndpointRecordType',
    'AlwaysServe',
    'ApplicationGatewayClientRevocationOptions',
    'ApplicationGatewayCookieBasedAffinity',
    'ApplicationGatewayCustomErrorStatusCode',
    'ApplicationGatewayFirewallMode',
    'ApplicationGatewayFirewallRateLimitDuration',
    'ApplicationGatewayFirewallUserSessionVariable',
    'ApplicationGatewayLoadDistributionAlgorithm',
    'ApplicationGatewayProtocol',
    'ApplicationGatewayRedirectType',
    'ApplicationGatewayRequestRoutingRuleType',
    'ApplicationGatewaySkuName',
    'ApplicationGatewaySslCipherSuite',
    'ApplicationGatewaySslPolicyName',
    'ApplicationGatewaySslPolicyType',
    'ApplicationGatewaySslProtocol',
    'ApplicationGatewayTier',
    'AssociationAccessMode',
    'AuthorizationUseStatus',
    'AutoLearnPrivateRangesMode',
    'AzureFirewallApplicationRuleProtocolType',
    'AzureFirewallNatRCActionType',
    'AzureFirewallNetworkRuleProtocol',
    'AzureFirewallRCActionType',
    'AzureFirewallSkuName',
    'AzureFirewallSkuTier',
    'AzureFirewallThreatIntelMode',
    'BackendEnabledState',
    'BastionHostSkuName',
    'CommissionedState',
    'ConfigurationType',
    'ConnectionMonitorEndpointFilterItemType',
    'ConnectionMonitorEndpointFilterType',
    'ConnectionMonitorTestConfigurationProtocol',
    'ConnectivityTopology',
    'CoverageLevel',
    'CustomIpPrefixType',
    'CustomRuleEnabledState',
    'DdosSettingsProtectionMode',
    'DeleteExistingNSGs',
    'DeleteExistingPeering',
    'DeleteOptions',
    'DestinationPortBehavior',
    'DhGroup',
    'DynamicCompressionEnabled',
    'EndpointMonitorStatus',
    'EndpointStatus',
    'EndpointType',
    'EnforceCertificateNameCheckEnabledState',
    'ExpressRouteCircuitPeeringState',
    'ExpressRouteCircuitSkuFamily',
    'ExpressRouteCircuitSkuTier',
    'ExpressRouteLinkAdminState',
    'ExpressRouteLinkMacSecCipher',
    'ExpressRouteLinkMacSecSciState',
    'ExpressRoutePeeringState',
    'ExpressRoutePeeringType',
    'ExpressRoutePortsBillingType',
    'ExpressRoutePortsEncapsulation',
    'ExtendedLocationTypes',
    'FirewallPolicyFilterRuleActionType',
    'FirewallPolicyFilterRuleCollectionActionType',
    'FirewallPolicyIDPSQuerySortOrder',
    'FirewallPolicyIntrusionDetectionProtocol',
    'FirewallPolicyIntrusionDetectionStateType',
    'FirewallPolicyNatRuleActionType',
    'FirewallPolicyNatRuleCollectionActionType',
    'FirewallPolicyRuleApplicationProtocolType',
    'FirewallPolicyRuleCollectionType',
    'FirewallPolicyRuleConditionApplicationProtocolType',
    'FirewallPolicyRuleConditionNetworkProtocol',
    'FirewallPolicyRuleConditionType',
    'FirewallPolicyRuleNetworkProtocol',
    'FirewallPolicyRuleType',
    'FirewallPolicySkuTier',
    'FlowLogFormatType',
    'ForwardingRuleState',
    'FrontDoorEnabledState',
    'FrontDoorForwardingProtocol',
    'FrontDoorHealthProbeMethod',
    'FrontDoorMatchVariable',
    'FrontDoorProtocol',
    'FrontDoorQuery',
    'FrontDoorRedirectProtocol',
    'FrontDoorRedirectType',
    'GatewayLoadBalancerTunnelInterfaceType',
    'GatewayLoadBalancerTunnelProtocol',
    'Geo',
    'GroupConnectivity',
    'HTTPConfigurationMethod',
    'HeaderActionType',
    'HealthProbeEnabled',
    'HubRoutingPreference',
    'IPAllocationMethod',
    'IPVersion',
    'IkeEncryption',
    'IkeIntegrity',
    'IpAllocationMethod',
    'IpAllocationType',
    'IpsecEncryption',
    'IpsecIntegrity',
    'IsGlobal',
    'LoadBalancerBackendAddressAdminState',
    'LoadBalancerOutboundRuleProtocol',
    'LoadBalancerSkuName',
    'LoadBalancerSkuTier',
    'LoadDistribution',
    'ManagedRuleEnabledState',
    'ManagedRuleExclusionMatchVariable',
    'ManagedRuleExclusionSelectorMatchOperator',
    'ManagedRuleSetActionType',
    'MatchProcessingBehavior',
    'MonitorProtocol',
    'NatGatewaySkuName',
    'NetworkIntentPolicyBasedService',
    'NetworkInterfaceAuxiliaryMode',
    'NetworkInterfaceAuxiliarySku',
    'NetworkInterfaceMigrationPhase',
    'NetworkInterfaceNicType',
    'NextStep',
    'Operator',
    'OutputType',
    'OwaspCrsExclusionEntryMatchVariable',
    'OwaspCrsExclusionEntrySelectorMatchOperator',
    'PacketCaptureTargetType',
    'PcProtocol',
    'PfsGroup',
    'PolicyEnabledState',
    'PolicyMode',
    'PolicyRequestBodyCheck',
    'PreferredIPVersion',
    'PreferredRoutingGateway',
    'ProbeProtocol',
    'ProfileMonitorStatus',
    'ProfileStatus',
    'ProtocolType',
    'PublicIPAddressMigrationPhase',
    'PublicIPAddressSkuName',
    'PublicIPAddressSkuTier',
    'PublicIPPrefixSkuName',
    'PublicIPPrefixSkuTier',
    'PublicIpAddressDnsSettingsDomainNameLabelScope',
    'ResourceIdentityType',
    'RouteFilterRuleType',
    'RouteMapActionType',
    'RouteMapMatchCondition',
    'RouteNextHopType',
    'RoutingRuleEnabledState',
    'RuleType',
    'RulesEngineMatchVariable',
    'RulesEngineOperator',
    'ScrubbingRuleEntryMatchOperator',
    'ScrubbingRuleEntryMatchVariable',
    'ScrubbingRuleEntryState',
    'SecurityConfigurationRuleAccess',
    'SecurityConfigurationRuleDirection',
    'SecurityConfigurationRuleProtocol',
    'SecurityProviderName',
    'SecurityRuleAccess',
    'SecurityRuleDirection',
    'SecurityRuleProtocol',
    'ServiceProviderProvisioningState',
    'SessionAffinityEnabledState',
    'SkuName',
    'State',
    'TrafficRoutingMethod',
    'TrafficViewEnrollmentStatus',
    'Transform',
    'TransformType',
    'TransportProtocol',
    'UseHubGateway',
    'UserRuleKind',
    'VirtualNetworkEncryptionEnforcement',
    'VirtualNetworkGatewayConnectionMode',
    'VirtualNetworkGatewayConnectionProtocol',
    'VirtualNetworkGatewayConnectionType',
    'VirtualNetworkGatewaySkuName',
    'VirtualNetworkGatewaySkuTier',
    'VirtualNetworkGatewayType',
    'VirtualNetworkPeeringLevel',
    'VirtualNetworkPeeringState',
    'VirtualNetworkPrivateEndpointNetworkPolicies',
    'VirtualNetworkPrivateLinkServiceNetworkPolicies',
    'VnetLocalRouteOverrideCriteria',
    'VpnAuthenticationType',
    'VpnClientProtocol',
    'VpnGatewayGeneration',
    'VpnGatewayTunnelingProtocol',
    'VpnLinkConnectionMode',
    'VpnNatRuleMode',
    'VpnNatRuleType',
    'VpnPolicyMemberAttributeType',
    'VpnType',
    'WebApplicationFirewallAction',
    'WebApplicationFirewallEnabledState',
    'WebApplicationFirewallMatchVariable',
    'WebApplicationFirewallMode',
    'WebApplicationFirewallOperator',
    'WebApplicationFirewallRuleType',
    'WebApplicationFirewallScrubbingState',
    'WebApplicationFirewallState',
    'WebApplicationFirewallTransform',
    'ZoneType',
]


class Access(str, Enum):
    """
    The access type of the rule.
    """
    ALLOW = "Allow"
    DENY = "Deny"


class AccessRuleDirection(str, Enum):
    """
    Direction that specifies whether the access rules is inbound/outbound.
    """
    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class ActionType(str, Enum):
    """
    Describes the override action to be applied when rule matches.
    """
    ANOMALY_SCORING = "AnomalyScoring"
    ALLOW = "Allow"
    BLOCK = "Block"
    LOG = "Log"


class AddressPrefixType(str, Enum):
    """
    Address prefix type.
    """
    IP_PREFIX = "IPPrefix"
    SERVICE_TAG = "ServiceTag"


class AdminRuleKind(str, Enum):
    """
    Whether the rule is custom or default.
    """
    CUSTOM = "Custom"
    DEFAULT = "Default"


class AdminState(str, Enum):
    """
    Property to indicate if the Express Route Gateway serves traffic when there are multiple Express Route Gateways in the vnet
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class AllowedEndpointRecordType(str, Enum):
    """
    The allowed type DNS record types for this profile.
    """
    DOMAIN_NAME = "DomainName"
    I_PV4_ADDRESS = "IPv4Address"
    I_PV6_ADDRESS = "IPv6Address"
    ANY = "Any"


class AlwaysServe(str, Enum):
    """
    If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic routing method.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ApplicationGatewayClientRevocationOptions(str, Enum):
    """
    Verify client certificate revocation status.
    """
    NONE = "None"
    OCSP = "OCSP"


class ApplicationGatewayCookieBasedAffinity(str, Enum):
    """
    Cookie based affinity.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ApplicationGatewayCustomErrorStatusCode(str, Enum):
    """
    Status code of the application gateway custom error.
    """
    HTTP_STATUS400 = "HttpStatus400"
    HTTP_STATUS403 = "HttpStatus403"
    HTTP_STATUS404 = "HttpStatus404"
    HTTP_STATUS405 = "HttpStatus405"
    HTTP_STATUS408 = "HttpStatus408"
    HTTP_STATUS500 = "HttpStatus500"
    HTTP_STATUS502 = "HttpStatus502"
    HTTP_STATUS503 = "HttpStatus503"
    HTTP_STATUS504 = "HttpStatus504"


class ApplicationGatewayFirewallMode(str, Enum):
    """
    Web application firewall mode.
    """
    DETECTION = "Detection"
    PREVENTION = "Prevention"


class ApplicationGatewayFirewallRateLimitDuration(str, Enum):
    """
    Duration over which Rate Limit policy will be applied. Applies only when ruleType is RateLimitRule.
    """
    ONE_MIN = "OneMin"
    FIVE_MINS = "FiveMins"


class ApplicationGatewayFirewallUserSessionVariable(str, Enum):
    """
    User Session clause variable.
    """
    CLIENT_ADDR = "ClientAddr"
    GEO_LOCATION = "GeoLocation"
    NONE = "None"


class ApplicationGatewayLoadDistributionAlgorithm(str, Enum):
    """
    Load Distribution Targets resource of an application gateway.
    """
    ROUND_ROBIN = "RoundRobin"
    LEAST_CONNECTIONS = "LeastConnections"
    IP_HASH = "IpHash"


class ApplicationGatewayProtocol(str, Enum):
    """
    The protocol used for the probe.
    """
    HTTP = "Http"
    HTTPS = "Https"
    TCP = "Tcp"
    TLS = "Tls"


class ApplicationGatewayRedirectType(str, Enum):
    """
    HTTP redirection type.
    """
    PERMANENT = "Permanent"
    FOUND = "Found"
    SEE_OTHER = "SeeOther"
    TEMPORARY = "Temporary"


class ApplicationGatewayRequestRoutingRuleType(str, Enum):
    """
    Rule type.
    """
    BASIC = "Basic"
    PATH_BASED_ROUTING = "PathBasedRouting"


class ApplicationGatewaySkuName(str, Enum):
    """
    Name of an application gateway SKU.
    """
    STANDARD_SMALL = "Standard_Small"
    STANDARD_MEDIUM = "Standard_Medium"
    STANDARD_LARGE = "Standard_Large"
    WA_F_MEDIUM = "WAF_Medium"
    WA_F_LARGE = "WAF_Large"
    STANDARD_V2 = "Standard_v2"
    WA_F_V2 = "WAF_v2"


class ApplicationGatewaySslCipherSuite(str, Enum):
    """
    Ssl cipher suites enums.
    """
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_256_CB_C_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
    TL_S_DH_E_RS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
    TL_S_DH_E_RS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
    TL_S_DH_E_RS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"
    TL_S_DH_E_RS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"
    TL_S_RS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"
    TL_S_RS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"
    TL_S_RS_A_WIT_H_AE_S_256_CB_C_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"
    TL_S_RS_A_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"
    TL_S_RS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"
    TL_S_RS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_256_CB_C_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
    TL_S_DH_E_DS_S_WIT_H_AE_S_256_CB_C_SHA256 = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
    TL_S_DH_E_DS_S_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
    TL_S_DH_E_DS_S_WIT_H_AE_S_256_CB_C_SHA = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"
    TL_S_DH_E_DS_S_WIT_H_AE_S_128_CB_C_SHA = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"
    TL_S_RS_A_WIT_H_3_DE_S_ED_E_CB_C_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
    TL_S_DH_E_DS_S_WIT_H_3_DE_S_ED_E_CB_C_SHA = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"


class ApplicationGatewaySslPolicyName(str, Enum):
    """
    Name of Ssl predefined policy.
    """
    APP_GW_SSL_POLICY20150501 = "AppGwSslPolicy20150501"
    APP_GW_SSL_POLICY20170401 = "AppGwSslPolicy20170401"
    APP_GW_SSL_POLICY20170401_S = "AppGwSslPolicy20170401S"
    APP_GW_SSL_POLICY20220101 = "AppGwSslPolicy20220101"
    APP_GW_SSL_POLICY20220101_S = "AppGwSslPolicy20220101S"


class ApplicationGatewaySslPolicyType(str, Enum):
    """
    Type of Ssl Policy.
    """
    PREDEFINED = "Predefined"
    CUSTOM = "Custom"
    CUSTOM_V2 = "CustomV2"


class ApplicationGatewaySslProtocol(str, Enum):
    """
    Minimum version of Ssl protocol to be supported on application gateway.
    """
    TL_SV1_0 = "TLSv1_0"
    TL_SV1_1 = "TLSv1_1"
    TL_SV1_2 = "TLSv1_2"
    TL_SV1_3 = "TLSv1_3"


class ApplicationGatewayTier(str, Enum):
    """
    Tier of an application gateway.
    """
    STANDARD = "Standard"
    WAF = "WAF"
    STANDARD_V2 = "Standard_v2"
    WA_F_V2 = "WAF_v2"


class AssociationAccessMode(str, Enum):
    """
    Access mode on the association.
    """
    LEARNING = "Learning"
    ENFORCED = "Enforced"
    AUDIT = "Audit"


class AuthorizationUseStatus(str, Enum):
    """
    The authorization use status.
    """
    AVAILABLE = "Available"
    IN_USE = "InUse"


class AutoLearnPrivateRangesMode(str, Enum):
    """
    The operation mode for automatically learning private ranges to not be SNAT
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class AzureFirewallApplicationRuleProtocolType(str, Enum):
    """
    Protocol type.
    """
    HTTP = "Http"
    HTTPS = "Https"
    MSSQL = "Mssql"


class AzureFirewallNatRCActionType(str, Enum):
    """
    The type of action.
    """
    SNAT = "Snat"
    DNAT = "Dnat"


class AzureFirewallNetworkRuleProtocol(str, Enum):
    """
    The protocol of a Network Rule resource.
    """
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"
    ICMP = "ICMP"


class AzureFirewallRCActionType(str, Enum):
    """
    The type of action.
    """
    ALLOW = "Allow"
    DENY = "Deny"


class AzureFirewallSkuName(str, Enum):
    """
    Name of an Azure Firewall SKU.
    """
    AZF_W_V_NET = "AZFW_VNet"
    AZF_W_HUB = "AZFW_Hub"


class AzureFirewallSkuTier(str, Enum):
    """
    Tier of an Azure Firewall.
    """
    STANDARD = "Standard"
    PREMIUM = "Premium"
    BASIC = "Basic"


class AzureFirewallThreatIntelMode(str, Enum):
    """
    The operation mode for Threat Intelligence.
    """
    ALERT = "Alert"
    DENY = "Deny"
    OFF = "Off"


class BackendEnabledState(str, Enum):
    """
    Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class BastionHostSkuName(str, Enum):
    """
    The name of this Bastion Host.
    """
    BASIC = "Basic"
    STANDARD = "Standard"


class CommissionedState(str, Enum):
    """
    The commissioned state of the Custom IP Prefix.
    """
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    COMMISSIONING = "Commissioning"
    COMMISSIONED_NO_INTERNET_ADVERTISE = "CommissionedNoInternetAdvertise"
    COMMISSIONED = "Commissioned"
    DECOMMISSIONING = "Decommissioning"
    DEPROVISIONING = "Deprovisioning"
    DEPROVISIONED = "Deprovisioned"


class ConfigurationType(str, Enum):
    """
    Configuration Deployment Type.
    """
    SECURITY_ADMIN = "SecurityAdmin"
    CONNECTIVITY = "Connectivity"


class ConnectionMonitorEndpointFilterItemType(str, Enum):
    """
    The type of item included in the filter. Currently only 'AgentAddress' is supported.
    """
    AGENT_ADDRESS = "AgentAddress"


class ConnectionMonitorEndpointFilterType(str, Enum):
    """
    The behavior of the endpoint filter. Currently only 'Include' is supported.
    """
    INCLUDE = "Include"


class ConnectionMonitorTestConfigurationProtocol(str, Enum):
    """
    The protocol to use in test evaluation.
    """
    TCP = "Tcp"
    HTTP = "Http"
    ICMP = "Icmp"


class ConnectivityTopology(str, Enum):
    """
    Connectivity topology type.
    """
    HUB_AND_SPOKE = "HubAndSpoke"
    MESH = "Mesh"


class CoverageLevel(str, Enum):
    """
    Test coverage for the endpoint.
    """
    DEFAULT = "Default"
    LOW = "Low"
    BELOW_AVERAGE = "BelowAverage"
    AVERAGE = "Average"
    ABOVE_AVERAGE = "AboveAverage"
    FULL = "Full"


class CustomIpPrefixType(str, Enum):
    """
    Type of custom IP prefix. Should be Singular, Parent, or Child.
    """
    SINGULAR = "Singular"
    PARENT = "Parent"
    CHILD = "Child"


class CustomRuleEnabledState(str, Enum):
    """
    Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class DdosSettingsProtectionMode(str, Enum):
    """
    The DDoS protection mode of the public IP
    """
    VIRTUAL_NETWORK_INHERITED = "VirtualNetworkInherited"
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class DeleteExistingNSGs(str, Enum):
    """
    Flag if need to delete existing network security groups.
    """
    FALSE = "False"
    TRUE = "True"


class DeleteExistingPeering(str, Enum):
    """
    Flag if need to remove current existing peerings.
    """
    FALSE = "False"
    TRUE = "True"


class DeleteOptions(str, Enum):
    """
    Specify what happens to the public IP address when the VM using it is deleted
    """
    DELETE = "Delete"
    DETACH = "Detach"


class DestinationPortBehavior(str, Enum):
    """
    Destination port behavior.
    """
    NONE = "None"
    LISTEN_IF_AVAILABLE = "ListenIfAvailable"


class DhGroup(str, Enum):
    """
    The DH Group used in IKE Phase 1 for initial SA.
    """
    NONE = "None"
    DH_GROUP1 = "DHGroup1"
    DH_GROUP2 = "DHGroup2"
    DH_GROUP14 = "DHGroup14"
    DH_GROUP2048 = "DHGroup2048"
    ECP256 = "ECP256"
    ECP384 = "ECP384"
    DH_GROUP24 = "DHGroup24"


class DynamicCompressionEnabled(str, Enum):
    """
    Whether to use dynamic compression for cached content
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class EndpointMonitorStatus(str, Enum):
    """
    The monitoring status of the endpoint.
    """
    CHECKING_ENDPOINT = "CheckingEndpoint"
    ONLINE = "Online"
    DEGRADED = "Degraded"
    DISABLED = "Disabled"
    INACTIVE = "Inactive"
    STOPPED = "Stopped"
    UNMONITORED = "Unmonitored"


class EndpointStatus(str, Enum):
    """
    The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class EndpointType(str, Enum):
    """
    The endpoint type.
    """
    AZURE_VM = "AzureVM"
    AZURE_V_NET = "AzureVNet"
    AZURE_SUBNET = "AzureSubnet"
    EXTERNAL_ADDRESS = "ExternalAddress"
    MMA_WORKSPACE_MACHINE = "MMAWorkspaceMachine"
    MMA_WORKSPACE_NETWORK = "MMAWorkspaceNetwork"
    AZURE_ARC_VM = "AzureArcVM"
    AZURE_VMSS = "AzureVMSS"


class EnforceCertificateNameCheckEnabledState(str, Enum):
    """
    Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ExpressRouteCircuitPeeringState(str, Enum):
    """
    The state of peering.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ExpressRouteCircuitSkuFamily(str, Enum):
    """
    The family of the SKU.
    """
    UNLIMITED_DATA = "UnlimitedData"
    METERED_DATA = "MeteredData"


class ExpressRouteCircuitSkuTier(str, Enum):
    """
    The tier of the SKU.
    """
    STANDARD = "Standard"
    PREMIUM = "Premium"
    BASIC = "Basic"
    LOCAL = "Local"


class ExpressRouteLinkAdminState(str, Enum):
    """
    Administrative state of the physical port.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ExpressRouteLinkMacSecCipher(str, Enum):
    """
    Mac security cipher.
    """
    GCM_AES256 = "GcmAes256"
    GCM_AES128 = "GcmAes128"
    GCM_AES_XPN128 = "GcmAesXpn128"
    GCM_AES_XPN256 = "GcmAesXpn256"


class ExpressRouteLinkMacSecSciState(str, Enum):
    """
    Sci mode enabled/disabled.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ExpressRoutePeeringState(str, Enum):
    """
    The peering state.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ExpressRoutePeeringType(str, Enum):
    """
    The peering type.
    """
    AZURE_PUBLIC_PEERING = "AzurePublicPeering"
    AZURE_PRIVATE_PEERING = "AzurePrivatePeering"
    MICROSOFT_PEERING = "MicrosoftPeering"


class ExpressRoutePortsBillingType(str, Enum):
    """
    The billing type of the ExpressRoutePort resource.
    """
    METERED_DATA = "MeteredData"
    UNLIMITED_DATA = "UnlimitedData"


class ExpressRoutePortsEncapsulation(str, Enum):
    """
    Encapsulation method on physical ports.
    """
    DOT1_Q = "Dot1Q"
    QIN_Q = "QinQ"


class ExtendedLocationTypes(str, Enum):
    """
    The type of the extended location.
    """
    EDGE_ZONE = "EdgeZone"


class FirewallPolicyFilterRuleActionType(str, Enum):
    """
    The type of action.
    """
    ALLOW = "Allow"
    DENY = "Deny"


class FirewallPolicyFilterRuleCollectionActionType(str, Enum):
    """
    The type of action.
    """
    ALLOW = "Allow"
    DENY = "Deny"


class FirewallPolicyIDPSQuerySortOrder(str, Enum):
    """
    Describes if results should be in ascending/descending order
    """
    ASCENDING = "Ascending"
    DESCENDING = "Descending"


class FirewallPolicyIntrusionDetectionProtocol(str, Enum):
    """
    The rule bypass protocol.
    """
    TCP = "TCP"
    UDP = "UDP"
    ICMP = "ICMP"
    ANY = "ANY"


class FirewallPolicyIntrusionDetectionStateType(str, Enum):
    """
    Intrusion detection general state.
    """
    OFF = "Off"
    ALERT = "Alert"
    DENY = "Deny"


class FirewallPolicyNatRuleActionType(str, Enum):
    """
    The type of action.
    """
    DNAT = "DNAT"


class FirewallPolicyNatRuleCollectionActionType(str, Enum):
    """
    The type of action.
    """
    DNAT = "DNAT"


class FirewallPolicyRuleApplicationProtocolType(str, Enum):
    """
    Protocol type.
    """
    HTTP = "Http"
    HTTPS = "Https"


class FirewallPolicyRuleCollectionType(str, Enum):
    """
    The type of the rule collection.
    """
    FIREWALL_POLICY_NAT_RULE_COLLECTION = "FirewallPolicyNatRuleCollection"
    FIREWALL_POLICY_FILTER_RULE_COLLECTION = "FirewallPolicyFilterRuleCollection"


class FirewallPolicyRuleConditionApplicationProtocolType(str, Enum):
    """
    Protocol type.
    """
    HTTP = "Http"
    HTTPS = "Https"


class FirewallPolicyRuleConditionNetworkProtocol(str, Enum):
    """
    The Network protocol of a Rule condition.
    """
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"
    ICMP = "ICMP"


class FirewallPolicyRuleConditionType(str, Enum):
    """
    Rule Condition Type.
    """
    APPLICATION_RULE_CONDITION = "ApplicationRuleCondition"
    NETWORK_RULE_CONDITION = "NetworkRuleCondition"
    NAT_RULE_CONDITION = "NatRuleCondition"


class FirewallPolicyRuleNetworkProtocol(str, Enum):
    """
    The Network protocol of a Rule.
    """
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"
    ICMP = "ICMP"


class FirewallPolicyRuleType(str, Enum):
    """
    The type of the rule.
    """
    FIREWALL_POLICY_NAT_RULE = "FirewallPolicyNatRule"
    FIREWALL_POLICY_FILTER_RULE = "FirewallPolicyFilterRule"


class FirewallPolicySkuTier(str, Enum):
    """
    Tier of Firewall Policy.
    """
    STANDARD = "Standard"
    PREMIUM = "Premium"
    BASIC = "Basic"


class FlowLogFormatType(str, Enum):
    """
    The file type of flow log.
    """
    JSON = "JSON"


class ForwardingRuleState(str, Enum):
    """
    The state of forwarding rule.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class FrontDoorEnabledState(str, Enum):
    """
    Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class FrontDoorForwardingProtocol(str, Enum):
    """
    Protocol this rule will use when forwarding traffic to backends.
    """
    HTTP_ONLY = "HttpOnly"
    HTTPS_ONLY = "HttpsOnly"
    MATCH_REQUEST = "MatchRequest"


class FrontDoorHealthProbeMethod(str, Enum):
    """
    Configures which HTTP method to use to probe the backends defined under backendPools.
    """
    GET = "GET"
    HEAD = "HEAD"


class FrontDoorMatchVariable(str, Enum):
    """
    Request variable to compare with.
    """
    REMOTE_ADDR = "RemoteAddr"
    REQUEST_METHOD = "RequestMethod"
    QUERY_STRING = "QueryString"
    POST_ARGS = "PostArgs"
    REQUEST_URI = "RequestUri"
    REQUEST_HEADER = "RequestHeader"
    REQUEST_BODY = "RequestBody"
    COOKIES = "Cookies"
    SOCKET_ADDR = "SocketAddr"


class FrontDoorProtocol(str, Enum):
    """
    Accepted protocol schemes.
    """
    HTTP = "Http"
    HTTPS = "Https"


class FrontDoorQuery(str, Enum):
    """
    Treatment of URL query terms when forming the cache key.
    """
    STRIP_NONE = "StripNone"
    STRIP_ALL = "StripAll"
    STRIP_ONLY = "StripOnly"
    STRIP_ALL_EXCEPT = "StripAllExcept"


class FrontDoorRedirectProtocol(str, Enum):
    """
    The protocol of the destination to where the traffic is redirected
    """
    HTTP_ONLY = "HttpOnly"
    HTTPS_ONLY = "HttpsOnly"
    MATCH_REQUEST = "MatchRequest"


class FrontDoorRedirectType(str, Enum):
    """
    The redirect type the rule will use when redirecting traffic.
    """
    MOVED = "Moved"
    FOUND = "Found"
    TEMPORARY_REDIRECT = "TemporaryRedirect"
    PERMANENT_REDIRECT = "PermanentRedirect"


class GatewayLoadBalancerTunnelInterfaceType(str, Enum):
    """
    Traffic type of gateway load balancer tunnel interface.
    """
    NONE = "None"
    INTERNAL = "Internal"
    EXTERNAL = "External"


class GatewayLoadBalancerTunnelProtocol(str, Enum):
    """
    Protocol of gateway load balancer tunnel interface.
    """
    NONE = "None"
    NATIVE = "Native"
    VXLAN = "VXLAN"


class Geo(str, Enum):
    """
    The Geo for CIDR advertising. Should be an Geo code.
    """
    GLOBAL_ = "GLOBAL"
    AFRI = "AFRI"
    APAC = "APAC"
    EURO = "EURO"
    LATAM = "LATAM"
    NAM = "NAM"
    ME = "ME"
    OCEANIA = "OCEANIA"
    AQ = "AQ"


class GroupConnectivity(str, Enum):
    """
    Group connectivity type.
    """
    NONE = "None"
    DIRECTLY_CONNECTED = "DirectlyConnected"


class HTTPConfigurationMethod(str, Enum):
    """
    The HTTP method to use.
    """
    GET = "Get"
    POST = "Post"


class HeaderActionType(str, Enum):
    """
    Which type of manipulation to apply to the header.
    """
    APPEND = "Append"
    DELETE = "Delete"
    OVERWRITE = "Overwrite"


class HealthProbeEnabled(str, Enum):
    """
    Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class HubRoutingPreference(str, Enum):
    """
    The hubRoutingPreference of this VirtualHub.
    """
    EXPRESS_ROUTE = "ExpressRoute"
    VPN_GATEWAY = "VpnGateway"
    AS_PATH = "ASPath"


class IPAllocationMethod(str, Enum):
    """
    The private IP address allocation method.
    """
    STATIC = "Static"
    DYNAMIC = "Dynamic"


class IPVersion(str, Enum):
    """
    Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
    """
    I_PV4 = "IPv4"
    I_PV6 = "IPv6"


class IkeEncryption(str, Enum):
    """
    The IKE encryption algorithm (IKE phase 2).
    """
    DES = "DES"
    DES3 = "DES3"
    AES128 = "AES128"
    AES192 = "AES192"
    AES256 = "AES256"
    GCMAES256 = "GCMAES256"
    GCMAES128 = "GCMAES128"


class IkeIntegrity(str, Enum):
    """
    The IKE integrity algorithm (IKE phase 2).
    """
    MD5 = "MD5"
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA384 = "SHA384"
    GCMAES256 = "GCMAES256"
    GCMAES128 = "GCMAES128"


class IpAllocationMethod(str, Enum):
    """
    Private IP address allocation method.
    """
    STATIC = "Static"
    DYNAMIC = "Dynamic"


class IpAllocationType(str, Enum):
    """
    The type for the IpAllocation.
    """
    UNDEFINED = "Undefined"
    HYPERNET = "Hypernet"


class IpsecEncryption(str, Enum):
    """
    The IPSec encryption algorithm (IKE phase 1).
    """
    NONE = "None"
    DES = "DES"
    DES3 = "DES3"
    AES128 = "AES128"
    AES192 = "AES192"
    AES256 = "AES256"
    GCMAES128 = "GCMAES128"
    GCMAES192 = "GCMAES192"
    GCMAES256 = "GCMAES256"


class IpsecIntegrity(str, Enum):
    """
    The IPSec integrity algorithm (IKE phase 1).
    """
    MD5 = "MD5"
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    GCMAES128 = "GCMAES128"
    GCMAES192 = "GCMAES192"
    GCMAES256 = "GCMAES256"


class IsGlobal(str, Enum):
    """
    Flag if global mesh is supported.
    """
    FALSE = "False"
    TRUE = "True"


class LoadBalancerBackendAddressAdminState(str, Enum):
    """
    A list of administrative states which once set can override health probe so that Load Balancer will always forward new connections to backend, or deny new connections and reset existing connections.
    """
    NONE = "None"
    UP = "Up"
    DOWN = "Down"


class LoadBalancerOutboundRuleProtocol(str, Enum):
    """
    The protocol for the outbound rule in load balancer.
    """
    TCP = "Tcp"
    UDP = "Udp"
    ALL = "All"


class LoadBalancerSkuName(str, Enum):
    """
    Name of a load balancer SKU.
    """
    BASIC = "Basic"
    STANDARD = "Standard"
    GATEWAY = "Gateway"


class LoadBalancerSkuTier(str, Enum):
    """
    Tier of a load balancer SKU.
    """
    REGIONAL = "Regional"
    GLOBAL_ = "Global"


class LoadDistribution(str, Enum):
    """
    The load distribution policy for this rule.
    """
    DEFAULT = "Default"
    SOURCE_IP = "SourceIP"
    SOURCE_IP_PROTOCOL = "SourceIPProtocol"


class ManagedRuleEnabledState(str, Enum):
    """
    The state of the managed rule. Defaults to Disabled if not specified.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ManagedRuleExclusionMatchVariable(str, Enum):
    """
    The variable type to be excluded.
    """
    REQUEST_HEADER_NAMES = "RequestHeaderNames"
    REQUEST_COOKIE_NAMES = "RequestCookieNames"
    QUERY_STRING_ARG_NAMES = "QueryStringArgNames"
    REQUEST_BODY_POST_ARG_NAMES = "RequestBodyPostArgNames"
    REQUEST_BODY_JSON_ARG_NAMES = "RequestBodyJsonArgNames"


class ManagedRuleExclusionSelectorMatchOperator(str, Enum):
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
    """
    EQUALS = "Equals"
    CONTAINS = "Contains"
    STARTS_WITH = "StartsWith"
    ENDS_WITH = "EndsWith"
    EQUALS_ANY = "EqualsAny"


class ManagedRuleSetActionType(str, Enum):
    """
    Defines the rule set action.
    """
    BLOCK = "Block"
    LOG = "Log"
    REDIRECT = "Redirect"


class MatchProcessingBehavior(str, Enum):
    """
    If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
    """
    CONTINUE_ = "Continue"
    STOP = "Stop"


class MonitorProtocol(str, Enum):
    """
    The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
    """
    HTTP = "HTTP"
    HTTPS = "HTTPS"
    TCP = "TCP"


class NatGatewaySkuName(str, Enum):
    """
    Name of Nat Gateway SKU.
    """
    STANDARD = "Standard"


class NetworkIntentPolicyBasedService(str, Enum):
    """
    Network intent policy based services.
    """
    NONE = "None"
    ALL = "All"
    ALLOW_RULES_ONLY = "AllowRulesOnly"


class NetworkInterfaceAuxiliaryMode(str, Enum):
    """
    Auxiliary mode of Network Interface resource.
    """
    NONE = "None"
    MAX_CONNECTIONS = "MaxConnections"
    FLOATING = "Floating"
    ACCELERATED_CONNECTIONS = "AcceleratedConnections"


class NetworkInterfaceAuxiliarySku(str, Enum):
    """
    Auxiliary sku of Network Interface resource.
    """
    NONE = "None"
    A1 = "A1"
    A2 = "A2"
    A4 = "A4"
    A8 = "A8"


class NetworkInterfaceMigrationPhase(str, Enum):
    """
    Migration phase of Network Interface resource.
    """
    NONE = "None"
    PREPARE = "Prepare"
    COMMIT = "Commit"
    ABORT = "Abort"
    COMMITTED = "Committed"


class NetworkInterfaceNicType(str, Enum):
    """
    Type of Network Interface resource.
    """
    STANDARD = "Standard"
    ELASTIC = "Elastic"


class NextStep(str, Enum):
    """
    Next step after rule is evaluated. Current supported behaviors are 'Continue'(to next rule) and 'Terminate'.
    """
    UNKNOWN = "Unknown"
    CONTINUE_ = "Continue"
    TERMINATE = "Terminate"


class Operator(str, Enum):
    """
    Comparison type to use for matching with the variable value.
    """
    ANY = "Any"
    IP_MATCH = "IPMatch"
    GEO_MATCH = "GeoMatch"
    EQUAL = "Equal"
    CONTAINS = "Contains"
    LESS_THAN = "LessThan"
    GREATER_THAN = "GreaterThan"
    LESS_THAN_OR_EQUAL = "LessThanOrEqual"
    GREATER_THAN_OR_EQUAL = "GreaterThanOrEqual"
    BEGINS_WITH = "BeginsWith"
    ENDS_WITH = "EndsWith"
    REG_EX = "RegEx"


class OutputType(str, Enum):
    """
    Connection monitor output destination type. Currently, only "Workspace" is supported.
    """
    WORKSPACE = "Workspace"


class OwaspCrsExclusionEntryMatchVariable(str, Enum):
    """
    The variable to be excluded.
    """
    REQUEST_HEADER_NAMES = "RequestHeaderNames"
    REQUEST_COOKIE_NAMES = "RequestCookieNames"
    REQUEST_ARG_NAMES = "RequestArgNames"
    REQUEST_HEADER_KEYS = "RequestHeaderKeys"
    REQUEST_HEADER_VALUES = "RequestHeaderValues"
    REQUEST_COOKIE_KEYS = "RequestCookieKeys"
    REQUEST_COOKIE_VALUES = "RequestCookieValues"
    REQUEST_ARG_KEYS = "RequestArgKeys"
    REQUEST_ARG_VALUES = "RequestArgValues"


class OwaspCrsExclusionEntrySelectorMatchOperator(str, Enum):
    """
    When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
    """
    EQUALS = "Equals"
    CONTAINS = "Contains"
    STARTS_WITH = "StartsWith"
    ENDS_WITH = "EndsWith"
    EQUALS_ANY = "EqualsAny"


class PacketCaptureTargetType(str, Enum):
    """
    Target type of the resource provided.
    """
    AZURE_VM = "AzureVM"
    AZURE_VMSS = "AzureVMSS"


class PcProtocol(str, Enum):
    """
    Protocol to be filtered on.
    """
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"


class PfsGroup(str, Enum):
    """
    The Pfs Group used in IKE Phase 2 for new child SA.
    """
    NONE = "None"
    PFS1 = "PFS1"
    PFS2 = "PFS2"
    PFS2048 = "PFS2048"
    ECP256 = "ECP256"
    ECP384 = "ECP384"
    PFS24 = "PFS24"
    PFS14 = "PFS14"
    PFSMM = "PFSMM"


class PolicyEnabledState(str, Enum):
    """
    Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class PolicyMode(str, Enum):
    """
    Describes if it is in detection mode or prevention mode at policy level.
    """
    PREVENTION = "Prevention"
    DETECTION = "Detection"


class PolicyRequestBodyCheck(str, Enum):
    """
    Describes if policy managed rules will inspect the request body content.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class PreferredIPVersion(str, Enum):
    """
    The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
    """
    I_PV4 = "IPv4"
    I_PV6 = "IPv6"


class PreferredRoutingGateway(str, Enum):
    """
    The preferred gateway to route on-prem traffic
    """
    EXPRESS_ROUTE = "ExpressRoute"
    VPN_GATEWAY = "VpnGateway"
    NONE = "None"


class ProbeProtocol(str, Enum):
    """
    The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
    """
    HTTP = "Http"
    TCP = "Tcp"
    HTTPS = "Https"


class ProfileMonitorStatus(str, Enum):
    """
    The profile-level monitoring status of the Traffic Manager profile.
    """
    CHECKING_ENDPOINTS = "CheckingEndpoints"
    ONLINE = "Online"
    DEGRADED = "Degraded"
    DISABLED = "Disabled"
    INACTIVE = "Inactive"


class ProfileStatus(str, Enum):
    """
    The status of the Traffic Manager profile.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ProtocolType(str, Enum):
    """
    RNM supported protocol types.
    """
    DO_NOT_USE = "DoNotUse"
    ICMP = "Icmp"
    TCP = "Tcp"
    UDP = "Udp"
    GRE = "Gre"
    ESP = "Esp"
    AH = "Ah"
    VXLAN = "Vxlan"
    ALL = "All"


class PublicIPAddressMigrationPhase(str, Enum):
    """
    Migration phase of Public IP Address.
    """
    NONE = "None"
    PREPARE = "Prepare"
    COMMIT = "Commit"
    ABORT = "Abort"
    COMMITTED = "Committed"


class PublicIPAddressSkuName(str, Enum):
    """
    Name of a public IP address SKU.
    """
    BASIC = "Basic"
    STANDARD = "Standard"


class PublicIPAddressSkuTier(str, Enum):
    """
    Tier of a public IP address SKU.
    """
    REGIONAL = "Regional"
    GLOBAL_ = "Global"


class PublicIPPrefixSkuName(str, Enum):
    """
    Name of a public IP prefix SKU.
    """
    STANDARD = "Standard"


class PublicIPPrefixSkuTier(str, Enum):
    """
    Tier of a public IP prefix SKU.
    """
    REGIONAL = "Regional"
    GLOBAL_ = "Global"


class PublicIpAddressDnsSettingsDomainNameLabelScope(str, Enum):
    """
    The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN.
    """
    TENANT_REUSE = "TenantReuse"
    SUBSCRIPTION_REUSE = "SubscriptionReuse"
    RESOURCE_GROUP_REUSE = "ResourceGroupReuse"
    NO_REUSE = "NoReuse"


class ResourceIdentityType(str, Enum):
    """
    The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
    """
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned, UserAssigned"
    NONE = "None"


class RouteFilterRuleType(str, Enum):
    """
    The rule type of the rule.
    """
    COMMUNITY = "Community"


class RouteMapActionType(str, Enum):
    """
    Type of action to be taken. Supported types are 'Remove', 'Add', 'Replace', and 'Drop.'
    """
    UNKNOWN = "Unknown"
    REMOVE = "Remove"
    ADD = "Add"
    REPLACE = "Replace"
    DROP = "Drop"


class RouteMapMatchCondition(str, Enum):
    """
    Match condition to apply RouteMap rules.
    """
    UNKNOWN = "Unknown"
    CONTAINS = "Contains"
    EQUALS = "Equals"
    NOT_CONTAINS = "NotContains"
    NOT_EQUALS = "NotEquals"


class RouteNextHopType(str, Enum):
    """
    The type of Azure hop the packet should be sent to.
    """
    VIRTUAL_NETWORK_GATEWAY = "VirtualNetworkGateway"
    VNET_LOCAL = "VnetLocal"
    INTERNET = "Internet"
    VIRTUAL_APPLIANCE = "VirtualAppliance"
    NONE = "None"


class RoutingRuleEnabledState(str, Enum):
    """
    Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class RuleType(str, Enum):
    """
    Describes type of rule.
    """
    MATCH_RULE = "MatchRule"
    RATE_LIMIT_RULE = "RateLimitRule"


class RulesEngineMatchVariable(str, Enum):
    """
    Match Variable
    """
    IS_MOBILE = "IsMobile"
    REMOTE_ADDR = "RemoteAddr"
    REQUEST_METHOD = "RequestMethod"
    QUERY_STRING = "QueryString"
    POST_ARGS = "PostArgs"
    REQUEST_URI = "RequestUri"
    REQUEST_PATH = "RequestPath"
    REQUEST_FILENAME = "RequestFilename"
    REQUEST_FILENAME_EXTENSION = "RequestFilenameExtension"
    REQUEST_HEADER = "RequestHeader"
    REQUEST_BODY = "RequestBody"
    REQUEST_SCHEME = "RequestScheme"


class RulesEngineOperator(str, Enum):
    """
    Describes operator to apply to the match condition.
    """
    ANY = "Any"
    IP_MATCH = "IPMatch"
    GEO_MATCH = "GeoMatch"
    EQUAL = "Equal"
    CONTAINS = "Contains"
    LESS_THAN = "LessThan"
    GREATER_THAN = "GreaterThan"
    LESS_THAN_OR_EQUAL = "LessThanOrEqual"
    GREATER_THAN_OR_EQUAL = "GreaterThanOrEqual"
    BEGINS_WITH = "BeginsWith"
    ENDS_WITH = "EndsWith"


class ScrubbingRuleEntryMatchOperator(str, Enum):
    """
    When matchVariable is a collection, operate on the selector to specify which elements in the collection this rule applies to.
    """
    EQUALS = "Equals"
    EQUALS_ANY = "EqualsAny"


class ScrubbingRuleEntryMatchVariable(str, Enum):
    """
    The variable to be scrubbed from the logs.
    """
    REQUEST_HEADER_NAMES = "RequestHeaderNames"
    REQUEST_COOKIE_NAMES = "RequestCookieNames"
    REQUEST_ARG_NAMES = "RequestArgNames"
    REQUEST_POST_ARG_NAMES = "RequestPostArgNames"
    REQUEST_JSON_ARG_NAMES = "RequestJSONArgNames"
    REQUEST_IP_ADDRESS = "RequestIPAddress"


class ScrubbingRuleEntryState(str, Enum):
    """
    Defines the state of log scrubbing rule. Default value is Enabled.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SecurityConfigurationRuleAccess(str, Enum):
    """
    Indicates the access allowed for this particular rule
    """
    ALLOW = "Allow"
    DENY = "Deny"
    ALWAYS_ALLOW = "AlwaysAllow"


class SecurityConfigurationRuleDirection(str, Enum):
    """
    Indicates if the traffic matched against the rule in inbound or outbound.
    """
    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class SecurityConfigurationRuleProtocol(str, Enum):
    """
    Network protocol this rule applies to.
    """
    TCP = "Tcp"
    UDP = "Udp"
    ICMP = "Icmp"
    ESP = "Esp"
    ANY = "Any"
    AH = "Ah"


class SecurityProviderName(str, Enum):
    """
    The security provider name.
    """
    Z_SCALER = "ZScaler"
    I_BOSS = "IBoss"
    CHECKPOINT = "Checkpoint"


class SecurityRuleAccess(str, Enum):
    """
    The network traffic is allowed or denied.
    """
    ALLOW = "Allow"
    DENY = "Deny"


class SecurityRuleDirection(str, Enum):
    """
    The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    """
    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class SecurityRuleProtocol(str, Enum):
    """
    Network protocol this rule applies to.
    """
    TCP = "Tcp"
    UDP = "Udp"
    ICMP = "Icmp"
    ESP = "Esp"
    ASTERISK = "*"
    AH = "Ah"


class ServiceProviderProvisioningState(str, Enum):
    """
    The ServiceProviderProvisioningState state of the resource.
    """
    NOT_PROVISIONED = "NotProvisioned"
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    DEPROVISIONING = "Deprovisioning"


class SessionAffinityEnabledState(str, Enum):
    """
    Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SkuName(str, Enum):
    """
    Name of the pricing tier.
    """
    CLASSIC_AZURE_FRONT_DOOR = "Classic_AzureFrontDoor"
    STANDARD_AZURE_FRONT_DOOR = "Standard_AzureFrontDoor"
    PREMIUM_AZURE_FRONT_DOOR = "Premium_AzureFrontDoor"


class State(str, Enum):
    """
    The state of the Experiment
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class TrafficRoutingMethod(str, Enum):
    """
    The traffic routing method of the Traffic Manager profile.
    """
    PERFORMANCE = "Performance"
    PRIORITY = "Priority"
    WEIGHTED = "Weighted"
    GEOGRAPHIC = "Geographic"
    MULTI_VALUE = "MultiValue"
    SUBNET = "Subnet"


class TrafficViewEnrollmentStatus(str, Enum):
    """
    Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class Transform(str, Enum):
    """
    Describes what transforms are applied before matching
    """
    LOWERCASE = "Lowercase"
    UPPERCASE = "Uppercase"
    TRIM = "Trim"
    URL_DECODE = "UrlDecode"
    URL_ENCODE = "UrlEncode"
    REMOVE_NULLS = "RemoveNulls"


class TransformType(str, Enum):
    """
    Describes what transforms applied before matching.
    """
    LOWERCASE = "Lowercase"
    UPPERCASE = "Uppercase"
    TRIM = "Trim"
    URL_DECODE = "UrlDecode"
    URL_ENCODE = "UrlEncode"
    REMOVE_NULLS = "RemoveNulls"


class TransportProtocol(str, Enum):
    """
    The reference to the transport protocol used by the load balancing rule.
    """
    UDP = "Udp"
    TCP = "Tcp"
    ALL = "All"


class UseHubGateway(str, Enum):
    """
    Flag if need to use hub gateway.
    """
    FALSE = "False"
    TRUE = "True"


class UserRuleKind(str, Enum):
    """
    Whether the rule is custom or default.
    """
    CUSTOM = "Custom"
    DEFAULT = "Default"


class VirtualNetworkEncryptionEnforcement(str, Enum):
    """
    If the encrypted VNet allows VM that does not support encryption
    """
    DROP_UNENCRYPTED = "DropUnencrypted"
    ALLOW_UNENCRYPTED = "AllowUnencrypted"


class VirtualNetworkGatewayConnectionMode(str, Enum):
    """
    The connection mode for this connection.
    """
    DEFAULT = "Default"
    RESPONDER_ONLY = "ResponderOnly"
    INITIATOR_ONLY = "InitiatorOnly"


class VirtualNetworkGatewayConnectionProtocol(str, Enum):
    """
    Connection protocol used for this connection.
    """
    IK_EV2 = "IKEv2"
    IK_EV1 = "IKEv1"


class VirtualNetworkGatewayConnectionType(str, Enum):
    """
    Gateway connection type.
    """
    IPSEC = "IPsec"
    VNET2_VNET = "Vnet2Vnet"
    EXPRESS_ROUTE = "ExpressRoute"
    VPN_CLIENT = "VPNClient"


class VirtualNetworkGatewaySkuName(str, Enum):
    """
    Gateway SKU name.
    """
    BASIC = "Basic"
    HIGH_PERFORMANCE = "HighPerformance"
    STANDARD = "Standard"
    ULTRA_PERFORMANCE = "UltraPerformance"
    VPN_GW1 = "VpnGw1"
    VPN_GW2 = "VpnGw2"
    VPN_GW3 = "VpnGw3"
    VPN_GW4 = "VpnGw4"
    VPN_GW5 = "VpnGw5"
    VPN_GW1_AZ = "VpnGw1AZ"
    VPN_GW2_AZ = "VpnGw2AZ"
    VPN_GW3_AZ = "VpnGw3AZ"
    VPN_GW4_AZ = "VpnGw4AZ"
    VPN_GW5_AZ = "VpnGw5AZ"
    ER_GW1_AZ = "ErGw1AZ"
    ER_GW2_AZ = "ErGw2AZ"
    ER_GW3_AZ = "ErGw3AZ"


class VirtualNetworkGatewaySkuTier(str, Enum):
    """
    Gateway SKU tier.
    """
    BASIC = "Basic"
    HIGH_PERFORMANCE = "HighPerformance"
    STANDARD = "Standard"
    ULTRA_PERFORMANCE = "UltraPerformance"
    VPN_GW1 = "VpnGw1"
    VPN_GW2 = "VpnGw2"
    VPN_GW3 = "VpnGw3"
    VPN_GW4 = "VpnGw4"
    VPN_GW5 = "VpnGw5"
    VPN_GW1_AZ = "VpnGw1AZ"
    VPN_GW2_AZ = "VpnGw2AZ"
    VPN_GW3_AZ = "VpnGw3AZ"
    VPN_GW4_AZ = "VpnGw4AZ"
    VPN_GW5_AZ = "VpnGw5AZ"
    ER_GW1_AZ = "ErGw1AZ"
    ER_GW2_AZ = "ErGw2AZ"
    ER_GW3_AZ = "ErGw3AZ"


class VirtualNetworkGatewayType(str, Enum):
    """
    The type of this virtual network gateway.
    """
    VPN = "Vpn"
    EXPRESS_ROUTE = "ExpressRoute"
    LOCAL_GATEWAY = "LocalGateway"


class VirtualNetworkPeeringLevel(str, Enum):
    """
    The peering sync status of the virtual network peering.
    """
    FULLY_IN_SYNC = "FullyInSync"
    REMOTE_NOT_IN_SYNC = "RemoteNotInSync"
    LOCAL_NOT_IN_SYNC = "LocalNotInSync"
    LOCAL_AND_REMOTE_NOT_IN_SYNC = "LocalAndRemoteNotInSync"


class VirtualNetworkPeeringState(str, Enum):
    """
    The status of the virtual network peering.
    """
    INITIATED = "Initiated"
    CONNECTED = "Connected"
    DISCONNECTED = "Disconnected"


class VirtualNetworkPrivateEndpointNetworkPolicies(str, Enum):
    """
    Enable or Disable apply network policies on private end point in the subnet.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class VirtualNetworkPrivateLinkServiceNetworkPolicies(str, Enum):
    """
    Enable or Disable apply network policies on private link service in the subnet.
    """
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class VnetLocalRouteOverrideCriteria(str, Enum):
    """
    Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
    """
    CONTAINS = "Contains"
    EQUAL = "Equal"


class VpnAuthenticationType(str, Enum):
    """
    VPN authentication types enabled for the VpnServerConfiguration.
    """
    CERTIFICATE = "Certificate"
    RADIUS = "Radius"
    AAD = "AAD"


class VpnClientProtocol(str, Enum):
    """
    VPN client protocol enabled for the virtual network gateway.
    """
    IKE_V2 = "IkeV2"
    SSTP = "SSTP"
    OPEN_VPN = "OpenVPN"


class VpnGatewayGeneration(str, Enum):
    """
    The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
    """
    NONE = "None"
    GENERATION1 = "Generation1"
    GENERATION2 = "Generation2"


class VpnGatewayTunnelingProtocol(str, Enum):
    """
    VPN protocol enabled for the VpnServerConfiguration.
    """
    IKE_V2 = "IkeV2"
    OPEN_VPN = "OpenVPN"


class VpnLinkConnectionMode(str, Enum):
    """
    Vpn link connection mode.
    """
    DEFAULT = "Default"
    RESPONDER_ONLY = "ResponderOnly"
    INITIATOR_ONLY = "InitiatorOnly"


class VpnNatRuleMode(str, Enum):
    """
    The Source NAT direction of a VPN NAT.
    """
    EGRESS_SNAT = "EgressSnat"
    INGRESS_SNAT = "IngressSnat"


class VpnNatRuleType(str, Enum):
    """
    The type of NAT rule for VPN NAT.
    """
    STATIC = "Static"
    DYNAMIC = "Dynamic"


class VpnPolicyMemberAttributeType(str, Enum):
    """
    The Vpn Policy member attribute type.
    """
    CERTIFICATE_GROUP_ID = "CertificateGroupId"
    AAD_GROUP_ID = "AADGroupId"
    RADIUS_AZURE_GROUP_ID = "RadiusAzureGroupId"


class VpnType(str, Enum):
    """
    The type of this virtual network gateway.
    """
    POLICY_BASED = "PolicyBased"
    ROUTE_BASED = "RouteBased"


class WebApplicationFirewallAction(str, Enum):
    """
    Type of Actions.
    """
    ALLOW = "Allow"
    BLOCK = "Block"
    LOG = "Log"


class WebApplicationFirewallEnabledState(str, Enum):
    """
    The state of the policy.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class WebApplicationFirewallMatchVariable(str, Enum):
    """
    Match Variable.
    """
    REMOTE_ADDR = "RemoteAddr"
    REQUEST_METHOD = "RequestMethod"
    QUERY_STRING = "QueryString"
    POST_ARGS = "PostArgs"
    REQUEST_URI = "RequestUri"
    REQUEST_HEADERS = "RequestHeaders"
    REQUEST_BODY = "RequestBody"
    REQUEST_COOKIES = "RequestCookies"


class WebApplicationFirewallMode(str, Enum):
    """
    The mode of the policy.
    """
    PREVENTION = "Prevention"
    DETECTION = "Detection"


class WebApplicationFirewallOperator(str, Enum):
    """
    The operator to be matched.
    """
    IP_MATCH = "IPMatch"
    EQUAL = "Equal"
    CONTAINS = "Contains"
    LESS_THAN = "LessThan"
    GREATER_THAN = "GreaterThan"
    LESS_THAN_OR_EQUAL = "LessThanOrEqual"
    GREATER_THAN_OR_EQUAL = "GreaterThanOrEqual"
    BEGINS_WITH = "BeginsWith"
    ENDS_WITH = "EndsWith"
    REGEX = "Regex"
    GEO_MATCH = "GeoMatch"
    ANY = "Any"


class WebApplicationFirewallRuleType(str, Enum):
    """
    The rule type.
    """
    MATCH_RULE = "MatchRule"
    RATE_LIMIT_RULE = "RateLimitRule"
    INVALID = "Invalid"


class WebApplicationFirewallScrubbingState(str, Enum):
    """
    State of the log scrubbing config. Default value is Enabled.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class WebApplicationFirewallState(str, Enum):
    """
    Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
    """
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class WebApplicationFirewallTransform(str, Enum):
    """
    Transforms applied before matching.
    """
    UPPERCASE = "Uppercase"
    LOWERCASE = "Lowercase"
    TRIM = "Trim"
    URL_DECODE = "UrlDecode"
    URL_ENCODE = "UrlEncode"
    REMOVE_NULLS = "RemoveNulls"
    HTML_ENTITY_DECODE = "HtmlEntityDecode"


class ZoneType(str, Enum):
    """
    The type of this DNS zone (Public or Private).
    """
    PUBLIC = "Public"
    PRIVATE = "Private"
