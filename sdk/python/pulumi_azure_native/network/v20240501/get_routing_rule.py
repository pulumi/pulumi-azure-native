# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetRoutingRuleResult',
    'AwaitableGetRoutingRuleResult',
    'get_routing_rule',
    'get_routing_rule_output',
]

@pulumi.output_type
class GetRoutingRuleResult:
    """
    Network routing rule.
    """
    def __init__(__self__, description=None, destination=None, etag=None, id=None, name=None, next_hop=None, provisioning_state=None, resource_guid=None, system_data=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination and not isinstance(destination, dict):
            raise TypeError("Expected argument 'destination' to be a dict")
        pulumi.set(__self__, "destination", destination)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_hop and not isinstance(next_hop, dict):
            raise TypeError("Expected argument 'next_hop' to be a dict")
        pulumi.set(__self__, "next_hop", next_hop)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if resource_guid and not isinstance(resource_guid, str):
            raise TypeError("Expected argument 'resource_guid' to be a str")
        pulumi.set(__self__, "resource_guid", resource_guid)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description for this rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.RoutingRuleRouteDestinationResponse':
        """
        Indicates the destination for this particular rule.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> 'outputs.RoutingRuleNextHopResponse':
        """
        Indicates the next hop for this particular rule.
        """
        return pulumi.get(self, "next_hop")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="resourceGuid")
    def resource_guid(self) -> str:
        """
        Unique identifier for this resource.
        """
        return pulumi.get(self, "resource_guid")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        The system metadata related to this resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetRoutingRuleResult(GetRoutingRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoutingRuleResult(
            description=self.description,
            destination=self.destination,
            etag=self.etag,
            id=self.id,
            name=self.name,
            next_hop=self.next_hop,
            provisioning_state=self.provisioning_state,
            resource_guid=self.resource_guid,
            system_data=self.system_data,
            type=self.type)


def get_routing_rule(configuration_name: Optional[str] = None,
                     network_manager_name: Optional[str] = None,
                     resource_group_name: Optional[str] = None,
                     rule_collection_name: Optional[str] = None,
                     rule_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoutingRuleResult:
    """
    Gets a network manager routing configuration routing rule.


    :param str configuration_name: The name of the network manager Routing Configuration.
    :param str network_manager_name: The name of the network manager.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str rule_collection_name: The name of the network manager routing Configuration rule collection.
    :param str rule_name: The name of the rule.
    """
    __args__ = dict()
    __args__['configurationName'] = configuration_name
    __args__['networkManagerName'] = network_manager_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['ruleCollectionName'] = rule_collection_name
    __args__['ruleName'] = rule_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:network/v20240501:getRoutingRule', __args__, opts=opts, typ=GetRoutingRuleResult).value

    return AwaitableGetRoutingRuleResult(
        description=pulumi.get(__ret__, 'description'),
        destination=pulumi.get(__ret__, 'destination'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        next_hop=pulumi.get(__ret__, 'next_hop'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        resource_guid=pulumi.get(__ret__, 'resource_guid'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_routing_rule_output(configuration_name: Optional[pulumi.Input[str]] = None,
                            network_manager_name: Optional[pulumi.Input[str]] = None,
                            resource_group_name: Optional[pulumi.Input[str]] = None,
                            rule_collection_name: Optional[pulumi.Input[str]] = None,
                            rule_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRoutingRuleResult]:
    """
    Gets a network manager routing configuration routing rule.


    :param str configuration_name: The name of the network manager Routing Configuration.
    :param str network_manager_name: The name of the network manager.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str rule_collection_name: The name of the network manager routing Configuration rule collection.
    :param str rule_name: The name of the rule.
    """
    __args__ = dict()
    __args__['configurationName'] = configuration_name
    __args__['networkManagerName'] = network_manager_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['ruleCollectionName'] = rule_collection_name
    __args__['ruleName'] = rule_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:network/v20240501:getRoutingRule', __args__, opts=opts, typ=GetRoutingRuleResult)
    return __ret__.apply(lambda __response__: GetRoutingRuleResult(
        description=pulumi.get(__response__, 'description'),
        destination=pulumi.get(__response__, 'destination'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        next_hop=pulumi.get(__response__, 'next_hop'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        resource_guid=pulumi.get(__response__, 'resource_guid'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
