# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetIpamPoolUsageResult',
    'AwaitableGetIpamPoolUsageResult',
    'get_ipam_pool_usage',
    'get_ipam_pool_usage_output',
]

@pulumi.output_type
class GetIpamPoolUsageResult:
    """
    IpamPool usage information.
    """
    def __init__(__self__, address_prefixes=None, allocated_address_prefixes=None, available_address_prefixes=None, child_pools=None, number_of_allocated_ip_addresses=None, number_of_available_ip_addresses=None, number_of_reserved_ip_addresses=None, reserved_address_prefixes=None, total_number_of_ip_addresses=None):
        if address_prefixes and not isinstance(address_prefixes, list):
            raise TypeError("Expected argument 'address_prefixes' to be a list")
        pulumi.set(__self__, "address_prefixes", address_prefixes)
        if allocated_address_prefixes and not isinstance(allocated_address_prefixes, list):
            raise TypeError("Expected argument 'allocated_address_prefixes' to be a list")
        pulumi.set(__self__, "allocated_address_prefixes", allocated_address_prefixes)
        if available_address_prefixes and not isinstance(available_address_prefixes, list):
            raise TypeError("Expected argument 'available_address_prefixes' to be a list")
        pulumi.set(__self__, "available_address_prefixes", available_address_prefixes)
        if child_pools and not isinstance(child_pools, list):
            raise TypeError("Expected argument 'child_pools' to be a list")
        pulumi.set(__self__, "child_pools", child_pools)
        if number_of_allocated_ip_addresses and not isinstance(number_of_allocated_ip_addresses, str):
            raise TypeError("Expected argument 'number_of_allocated_ip_addresses' to be a str")
        pulumi.set(__self__, "number_of_allocated_ip_addresses", number_of_allocated_ip_addresses)
        if number_of_available_ip_addresses and not isinstance(number_of_available_ip_addresses, str):
            raise TypeError("Expected argument 'number_of_available_ip_addresses' to be a str")
        pulumi.set(__self__, "number_of_available_ip_addresses", number_of_available_ip_addresses)
        if number_of_reserved_ip_addresses and not isinstance(number_of_reserved_ip_addresses, str):
            raise TypeError("Expected argument 'number_of_reserved_ip_addresses' to be a str")
        pulumi.set(__self__, "number_of_reserved_ip_addresses", number_of_reserved_ip_addresses)
        if reserved_address_prefixes and not isinstance(reserved_address_prefixes, list):
            raise TypeError("Expected argument 'reserved_address_prefixes' to be a list")
        pulumi.set(__self__, "reserved_address_prefixes", reserved_address_prefixes)
        if total_number_of_ip_addresses and not isinstance(total_number_of_ip_addresses, str):
            raise TypeError("Expected argument 'total_number_of_ip_addresses' to be a str")
        pulumi.set(__self__, "total_number_of_ip_addresses", total_number_of_ip_addresses)

    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Sequence[str]:
        """
        List of IP address prefixes of the resource.
        """
        return pulumi.get(self, "address_prefixes")

    @property
    @pulumi.getter(name="allocatedAddressPrefixes")
    def allocated_address_prefixes(self) -> Sequence[str]:
        """
        List of assigned IP address prefixes.
        """
        return pulumi.get(self, "allocated_address_prefixes")

    @property
    @pulumi.getter(name="availableAddressPrefixes")
    def available_address_prefixes(self) -> Sequence[str]:
        """
        List of available IP address prefixes.
        """
        return pulumi.get(self, "available_address_prefixes")

    @property
    @pulumi.getter(name="childPools")
    def child_pools(self) -> Sequence['outputs.ResourceBasicsResponse']:
        """
        List of IpamPool that are children of this IpamPool.
        """
        return pulumi.get(self, "child_pools")

    @property
    @pulumi.getter(name="numberOfAllocatedIPAddresses")
    def number_of_allocated_ip_addresses(self) -> str:
        """
        Total number of assigned IP addresses in the IpamPool.
        """
        return pulumi.get(self, "number_of_allocated_ip_addresses")

    @property
    @pulumi.getter(name="numberOfAvailableIPAddresses")
    def number_of_available_ip_addresses(self) -> str:
        """
        Total number of available IP addresses in the IpamPool.
        """
        return pulumi.get(self, "number_of_available_ip_addresses")

    @property
    @pulumi.getter(name="numberOfReservedIPAddresses")
    def number_of_reserved_ip_addresses(self) -> str:
        """
        Total number of reserved IP addresses in the IpamPool.
        """
        return pulumi.get(self, "number_of_reserved_ip_addresses")

    @property
    @pulumi.getter(name="reservedAddressPrefixes")
    def reserved_address_prefixes(self) -> Sequence[str]:
        """
        List of reserved IP address prefixes. These IP addresses could be reclaimed if not assigned in the given time.
        """
        return pulumi.get(self, "reserved_address_prefixes")

    @property
    @pulumi.getter(name="totalNumberOfIPAddresses")
    def total_number_of_ip_addresses(self) -> str:
        """
        Total number of IP addresses managed in the IpamPool.
        """
        return pulumi.get(self, "total_number_of_ip_addresses")


class AwaitableGetIpamPoolUsageResult(GetIpamPoolUsageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpamPoolUsageResult(
            address_prefixes=self.address_prefixes,
            allocated_address_prefixes=self.allocated_address_prefixes,
            available_address_prefixes=self.available_address_prefixes,
            child_pools=self.child_pools,
            number_of_allocated_ip_addresses=self.number_of_allocated_ip_addresses,
            number_of_available_ip_addresses=self.number_of_available_ip_addresses,
            number_of_reserved_ip_addresses=self.number_of_reserved_ip_addresses,
            reserved_address_prefixes=self.reserved_address_prefixes,
            total_number_of_ip_addresses=self.total_number_of_ip_addresses)


def get_ipam_pool_usage(network_manager_name: Optional[str] = None,
                        pool_name: Optional[str] = None,
                        resource_group_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpamPoolUsageResult:
    """
    IpamPool usage information.


    :param str network_manager_name: The name of the network manager.
    :param str pool_name: Pool resource name.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['networkManagerName'] = network_manager_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:network/v20240501:getIpamPoolUsage', __args__, opts=opts, typ=GetIpamPoolUsageResult).value

    return AwaitableGetIpamPoolUsageResult(
        address_prefixes=pulumi.get(__ret__, 'address_prefixes'),
        allocated_address_prefixes=pulumi.get(__ret__, 'allocated_address_prefixes'),
        available_address_prefixes=pulumi.get(__ret__, 'available_address_prefixes'),
        child_pools=pulumi.get(__ret__, 'child_pools'),
        number_of_allocated_ip_addresses=pulumi.get(__ret__, 'number_of_allocated_ip_addresses'),
        number_of_available_ip_addresses=pulumi.get(__ret__, 'number_of_available_ip_addresses'),
        number_of_reserved_ip_addresses=pulumi.get(__ret__, 'number_of_reserved_ip_addresses'),
        reserved_address_prefixes=pulumi.get(__ret__, 'reserved_address_prefixes'),
        total_number_of_ip_addresses=pulumi.get(__ret__, 'total_number_of_ip_addresses'))
def get_ipam_pool_usage_output(network_manager_name: Optional[pulumi.Input[str]] = None,
                               pool_name: Optional[pulumi.Input[str]] = None,
                               resource_group_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpamPoolUsageResult]:
    """
    IpamPool usage information.


    :param str network_manager_name: The name of the network manager.
    :param str pool_name: Pool resource name.
    :param str resource_group_name: The name of the resource group.
    """
    __args__ = dict()
    __args__['networkManagerName'] = network_manager_name
    __args__['poolName'] = pool_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:network/v20240501:getIpamPoolUsage', __args__, opts=opts, typ=GetIpamPoolUsageResult)
    return __ret__.apply(lambda __response__: GetIpamPoolUsageResult(
        address_prefixes=pulumi.get(__response__, 'address_prefixes'),
        allocated_address_prefixes=pulumi.get(__response__, 'allocated_address_prefixes'),
        available_address_prefixes=pulumi.get(__response__, 'available_address_prefixes'),
        child_pools=pulumi.get(__response__, 'child_pools'),
        number_of_allocated_ip_addresses=pulumi.get(__response__, 'number_of_allocated_ip_addresses'),
        number_of_available_ip_addresses=pulumi.get(__response__, 'number_of_available_ip_addresses'),
        number_of_reserved_ip_addresses=pulumi.get(__response__, 'number_of_reserved_ip_addresses'),
        reserved_address_prefixes=pulumi.get(__response__, 'reserved_address_prefixes'),
        total_number_of_ip_addresses=pulumi.get(__response__, 'total_number_of_ip_addresses')))
