# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'DnsSettingsArgs',
    'ExplicitProxySettingsArgs',
    'FilterItems',
    'FirewallPolicyCertificateAuthorityArgs',
    'FirewallPolicyInsightsArgs',
    'FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs',
    'FirewallPolicyIntrusionDetectionConfigurationArgs',
    'FirewallPolicyIntrusionDetectionSignatureSpecificationArgs',
    'FirewallPolicyIntrusionDetectionArgs',
    'FirewallPolicyLogAnalyticsResourcesArgs',
    'FirewallPolicyLogAnalyticsWorkspaceArgs',
    'FirewallPolicySNATArgs',
    'FirewallPolicySQLArgs',
    'FirewallPolicySkuArgs',
    'FirewallPolicyThreatIntelWhitelistArgs',
    'FirewallPolicyTransportSecurityArgs',
    'ManagedServiceIdentityArgs',
    'OrderBy',
    'SubResourceArgs',
]

@pulumi.input_type
class DnsSettingsArgs:
    def __init__(__self__, *,
                 enable_proxy: Optional[pulumi.Input[bool]] = None,
                 require_proxy_for_network_rules: Optional[pulumi.Input[bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        DNS Proxy Settings in Firewall Policy.
        :param pulumi.Input[bool] enable_proxy: Enable DNS Proxy on Firewalls attached to the Firewall Policy.
        :param pulumi.Input[bool] require_proxy_for_network_rules: FQDNs in Network Rules are supported when set to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers: List of Custom DNS Servers.
        """
        if enable_proxy is not None:
            pulumi.set(__self__, "enable_proxy", enable_proxy)
        if require_proxy_for_network_rules is not None:
            pulumi.set(__self__, "require_proxy_for_network_rules", require_proxy_for_network_rules)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter(name="enableProxy")
    def enable_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable DNS Proxy on Firewalls attached to the Firewall Policy.
        """
        return pulumi.get(self, "enable_proxy")

    @enable_proxy.setter
    def enable_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_proxy", value)

    @property
    @pulumi.getter(name="requireProxyForNetworkRules")
    def require_proxy_for_network_rules(self) -> Optional[pulumi.Input[bool]]:
        """
        FQDNs in Network Rules are supported when set to true.
        """
        return pulumi.get(self, "require_proxy_for_network_rules")

    @require_proxy_for_network_rules.setter
    def require_proxy_for_network_rules(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_proxy_for_network_rules", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Custom DNS Servers.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)


@pulumi.input_type
class ExplicitProxySettingsArgs:
    def __init__(__self__, *,
                 enable_explicit_proxy: Optional[pulumi.Input[bool]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 pac_file: Optional[pulumi.Input[str]] = None,
                 pac_file_port: Optional[pulumi.Input[int]] = None):
        """
        Explicit Proxy Settings in Firewall Policy.
        :param pulumi.Input[bool] enable_explicit_proxy: When set to true, explicit proxy mode is enabled.
        :param pulumi.Input[int] http_port: Port number for explicit proxy http protocol, cannot be greater than 64000.
        :param pulumi.Input[int] https_port: Port number for explicit proxy https protocol, cannot be greater than 64000.
        :param pulumi.Input[str] pac_file: SAS URL for PAC file.
        :param pulumi.Input[int] pac_file_port: Port number for firewall to serve PAC file.
        """
        if enable_explicit_proxy is not None:
            pulumi.set(__self__, "enable_explicit_proxy", enable_explicit_proxy)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if pac_file is not None:
            pulumi.set(__self__, "pac_file", pac_file)
        if pac_file_port is not None:
            pulumi.set(__self__, "pac_file_port", pac_file_port)

    @property
    @pulumi.getter(name="enableExplicitProxy")
    def enable_explicit_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, explicit proxy mode is enabled.
        """
        return pulumi.get(self, "enable_explicit_proxy")

    @enable_explicit_proxy.setter
    def enable_explicit_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_explicit_proxy", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number for explicit proxy http protocol, cannot be greater than 64000.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number for explicit proxy https protocol, cannot be greater than 64000.
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="pacFile")
    def pac_file(self) -> Optional[pulumi.Input[str]]:
        """
        SAS URL for PAC file.
        """
        return pulumi.get(self, "pac_file")

    @pac_file.setter
    def pac_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file", value)

    @property
    @pulumi.getter(name="pacFilePort")
    def pac_file_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number for firewall to serve PAC file.
        """
        return pulumi.get(self, "pac_file_port")

    @pac_file_port.setter
    def pac_file_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pac_file_port", value)


@pulumi.input_type
class FilterItems:
    def __init__(__self__, *,
                 field: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        Will contain the filter name and values to operate on
        :param str field: The name of the field we would like to filter
        :param Sequence[str] values: List of values to filter the current field by
        """
        if field is not None:
            pulumi.set(__self__, "field", field)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        The name of the field we would like to filter
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        List of values to filter the current field by
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class FirewallPolicyCertificateAuthorityArgs:
    def __init__(__self__, *,
                 key_vault_secret_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Trusted Root certificates properties for tls.
        :param pulumi.Input[str] key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
        :param pulumi.Input[str] name: Name of the CA certificate.
        """
        if key_vault_secret_id is not None:
            pulumi.set(__self__, "key_vault_secret_id", key_vault_secret_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="keyVaultSecretId")
    def key_vault_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
        """
        return pulumi.get(self, "key_vault_secret_id")

    @key_vault_secret_id.setter
    def key_vault_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_secret_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CA certificate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInsightsArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 log_analytics_resources: Optional[pulumi.Input['FirewallPolicyLogAnalyticsResourcesArgs']] = None,
                 retention_days: Optional[pulumi.Input[int]] = None):
        """
        Firewall Policy Insights.
        :param pulumi.Input[bool] is_enabled: A flag to indicate if the insights are enabled on the policy.
        :param pulumi.Input['FirewallPolicyLogAnalyticsResourcesArgs'] log_analytics_resources: Workspaces needed to configure the Firewall Policy Insights.
        :param pulumi.Input[int] retention_days: Number of days the insights should be enabled on the policy.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_analytics_resources is not None:
            pulumi.set(__self__, "log_analytics_resources", log_analytics_resources)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag to indicate if the insights are enabled on the policy.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="logAnalyticsResources")
    def log_analytics_resources(self) -> Optional[pulumi.Input['FirewallPolicyLogAnalyticsResourcesArgs']]:
        """
        Workspaces needed to configure the Firewall Policy Insights.
        """
        return pulumi.get(self, "log_analytics_resources")

    @log_analytics_resources.setter
    def log_analytics_resources(self, value: Optional[pulumi.Input['FirewallPolicyLogAnalyticsResourcesArgs']]):
        pulumi.set(self, "log_analytics_resources", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days the insights should be enabled on the policy.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)


@pulumi.input_type
class FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 destination_ip_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionProtocol']]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ip_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Intrusion detection bypass traffic specification.
        :param pulumi.Input[str] description: Description of the bypass traffic rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_addresses: List of destination IP addresses or ranges for this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ip_groups: List of destination IpGroups for this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_ports: List of destination ports or ranges.
        :param pulumi.Input[str] name: Name of the bypass traffic rule.
        :param pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionProtocol']] protocol: The rule bypass protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_addresses: List of source IP addresses or ranges for this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ip_groups: List of source IpGroups for this rule.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if destination_ip_groups is not None:
            pulumi.set(__self__, "destination_ip_groups", destination_ip_groups)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_ip_groups is not None:
            pulumi.set(__self__, "source_ip_groups", source_ip_groups)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the bypass traffic rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of destination IP addresses or ranges for this rule.
        """
        return pulumi.get(self, "destination_addresses")

    @destination_addresses.setter
    def destination_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_addresses", value)

    @property
    @pulumi.getter(name="destinationIpGroups")
    def destination_ip_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of destination IpGroups for this rule.
        """
        return pulumi.get(self, "destination_ip_groups")

    @destination_ip_groups.setter
    def destination_ip_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ip_groups", value)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of destination ports or ranges.
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the bypass traffic rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionProtocol']]]:
        """
        The rule bypass protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionProtocol']]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of source IP addresses or ranges for this rule.
        """
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="sourceIpGroups")
    def source_ip_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of source IpGroups for this rule.
        """
        return pulumi.get(self, "source_ip_groups")

    @source_ip_groups.setter
    def source_ip_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ip_groups", value)


@pulumi.input_type
class FirewallPolicyIntrusionDetectionConfigurationArgs:
    def __init__(__self__, *,
                 bypass_traffic_settings: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs']]]] = None,
                 private_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 signature_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionSignatureSpecificationArgs']]]] = None):
        """
        The operation for configuring intrusion detection.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs']]] bypass_traffic_settings: List of rules for traffic to bypass.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ranges: IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
        :param pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionSignatureSpecificationArgs']]] signature_overrides: List of specific signatures states.
        """
        if bypass_traffic_settings is not None:
            pulumi.set(__self__, "bypass_traffic_settings", bypass_traffic_settings)
        if private_ranges is not None:
            pulumi.set(__self__, "private_ranges", private_ranges)
        if signature_overrides is not None:
            pulumi.set(__self__, "signature_overrides", signature_overrides)

    @property
    @pulumi.getter(name="bypassTrafficSettings")
    def bypass_traffic_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs']]]]:
        """
        List of rules for traffic to bypass.
        """
        return pulumi.get(self, "bypass_traffic_settings")

    @bypass_traffic_settings.setter
    def bypass_traffic_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs']]]]):
        pulumi.set(self, "bypass_traffic_settings", value)

    @property
    @pulumi.getter(name="privateRanges")
    def private_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
        """
        return pulumi.get(self, "private_ranges")

    @private_ranges.setter
    def private_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ranges", value)

    @property
    @pulumi.getter(name="signatureOverrides")
    def signature_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionSignatureSpecificationArgs']]]]:
        """
        List of specific signatures states.
        """
        return pulumi.get(self, "signature_overrides")

    @signature_overrides.setter
    def signature_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyIntrusionDetectionSignatureSpecificationArgs']]]]):
        pulumi.set(self, "signature_overrides", value)


@pulumi.input_type
class FirewallPolicyIntrusionDetectionSignatureSpecificationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']]] = None):
        """
        Intrusion detection signatures specification states.
        :param pulumi.Input[str] id: Signature id.
        :param pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']] mode: The signature state.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Signature id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']]]:
        """
        The signature state.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class FirewallPolicyIntrusionDetectionArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['FirewallPolicyIntrusionDetectionConfigurationArgs']] = None,
                 mode: Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']]] = None):
        """
        Configuration for intrusion detection mode and rules.
        :param pulumi.Input['FirewallPolicyIntrusionDetectionConfigurationArgs'] configuration: Intrusion detection configuration properties.
        :param pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']] mode: Intrusion detection general state.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['FirewallPolicyIntrusionDetectionConfigurationArgs']]:
        """
        Intrusion detection configuration properties.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['FirewallPolicyIntrusionDetectionConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']]]:
        """
        Intrusion detection general state.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[Union[str, 'FirewallPolicyIntrusionDetectionStateType']]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class FirewallPolicyLogAnalyticsResourcesArgs:
    def __init__(__self__, *,
                 default_workspace_id: Optional[pulumi.Input['SubResourceArgs']] = None,
                 workspaces: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyLogAnalyticsWorkspaceArgs']]]] = None):
        """
        Log Analytics Resources for Firewall Policy Insights.
        :param pulumi.Input['SubResourceArgs'] default_workspace_id: The default workspace Id for Firewall Policy Insights.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallPolicyLogAnalyticsWorkspaceArgs']]] workspaces: List of workspaces for Firewall Policy Insights.
        """
        if default_workspace_id is not None:
            pulumi.set(__self__, "default_workspace_id", default_workspace_id)
        if workspaces is not None:
            pulumi.set(__self__, "workspaces", workspaces)

    @property
    @pulumi.getter(name="defaultWorkspaceId")
    def default_workspace_id(self) -> Optional[pulumi.Input['SubResourceArgs']]:
        """
        The default workspace Id for Firewall Policy Insights.
        """
        return pulumi.get(self, "default_workspace_id")

    @default_workspace_id.setter
    def default_workspace_id(self, value: Optional[pulumi.Input['SubResourceArgs']]):
        pulumi.set(self, "default_workspace_id", value)

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyLogAnalyticsWorkspaceArgs']]]]:
        """
        List of workspaces for Firewall Policy Insights.
        """
        return pulumi.get(self, "workspaces")

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyLogAnalyticsWorkspaceArgs']]]]):
        pulumi.set(self, "workspaces", value)


@pulumi.input_type
class FirewallPolicyLogAnalyticsWorkspaceArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input['SubResourceArgs']] = None):
        """
        Log Analytics Workspace for Firewall Policy Insights.
        :param pulumi.Input[str] region: Region to configure the Workspace.
        :param pulumi.Input['SubResourceArgs'] workspace_id: The workspace Id for Firewall Policy Insights.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region to configure the Workspace.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input['SubResourceArgs']]:
        """
        The workspace Id for Firewall Policy Insights.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input['SubResourceArgs']]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class FirewallPolicySNATArgs:
    def __init__(__self__, *,
                 private_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The private IP addresses/IP ranges to which traffic will not be SNAT.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ranges: List of private IP addresses/IP address ranges to not be SNAT.
        """
        if private_ranges is not None:
            pulumi.set(__self__, "private_ranges", private_ranges)

    @property
    @pulumi.getter(name="privateRanges")
    def private_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of private IP addresses/IP address ranges to not be SNAT.
        """
        return pulumi.get(self, "private_ranges")

    @private_ranges.setter
    def private_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ranges", value)


@pulumi.input_type
class FirewallPolicySQLArgs:
    def __init__(__self__, *,
                 allow_sql_redirect: Optional[pulumi.Input[bool]] = None):
        """
        SQL Settings in Firewall Policy.
        :param pulumi.Input[bool] allow_sql_redirect: A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
        """
        if allow_sql_redirect is not None:
            pulumi.set(__self__, "allow_sql_redirect", allow_sql_redirect)

    @property
    @pulumi.getter(name="allowSqlRedirect")
    def allow_sql_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
        """
        return pulumi.get(self, "allow_sql_redirect")

    @allow_sql_redirect.setter
    def allow_sql_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_sql_redirect", value)


@pulumi.input_type
class FirewallPolicySkuArgs:
    def __init__(__self__, *,
                 tier: Optional[pulumi.Input[Union[str, 'FirewallPolicySkuTier']]] = None):
        """
        SKU of Firewall policy.
        :param pulumi.Input[Union[str, 'FirewallPolicySkuTier']] tier: Tier of Firewall Policy.
        """
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[Union[str, 'FirewallPolicySkuTier']]]:
        """
        Tier of Firewall Policy.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[Union[str, 'FirewallPolicySkuTier']]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class FirewallPolicyThreatIntelWhitelistArgs:
    def __init__(__self__, *,
                 fqdns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ThreatIntel Whitelist for Firewall Policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fqdns: List of FQDNs for the ThreatIntel Whitelist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: List of IP addresses for the ThreatIntel Whitelist.
        """
        if fqdns is not None:
            pulumi.set(__self__, "fqdns", fqdns)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)

    @property
    @pulumi.getter
    def fqdns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of FQDNs for the ThreatIntel Whitelist.
        """
        return pulumi.get(self, "fqdns")

    @fqdns.setter
    def fqdns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fqdns", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP addresses for the ThreatIntel Whitelist.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)


@pulumi.input_type
class FirewallPolicyTransportSecurityArgs:
    def __init__(__self__, *,
                 certificate_authority: Optional[pulumi.Input['FirewallPolicyCertificateAuthorityArgs']] = None):
        """
        Configuration needed to perform TLS termination & initiation.
        :param pulumi.Input['FirewallPolicyCertificateAuthorityArgs'] certificate_authority: The CA used for intermediate CA generation.
        """
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input['FirewallPolicyCertificateAuthorityArgs']]:
        """
        The CA used for intermediate CA generation.
        """
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input['FirewallPolicyCertificateAuthorityArgs']]):
        pulumi.set(self, "certificate_authority", value)


@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None,
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Identity for the resource.
        :param pulumi.Input['ResourceIdentityType'] type: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ResourceIdentityType']]:
        """
        The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ResourceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class OrderBy:
    def __init__(__self__, *,
                 field: Optional[str] = None,
                 order: Optional[Union[str, 'FirewallPolicyIDPSQuerySortOrder']] = None):
        """
        Describes a column to sort
        :param str field: Describes the actual column name to sort by
        :param Union[str, 'FirewallPolicyIDPSQuerySortOrder'] order: Describes if results should be in ascending/descending order
        """
        if field is not None:
            pulumi.set(__self__, "field", field)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        Describes the actual column name to sort by
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[Union[str, 'FirewallPolicyIDPSQuerySortOrder']]:
        """
        Describes if results should be in ascending/descending order
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[Union[str, 'FirewallPolicyIDPSQuerySortOrder']]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class SubResourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Reference to another subresource.
        :param pulumi.Input[str] id: Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
               An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
               A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
               Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
        An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
        A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
        Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


