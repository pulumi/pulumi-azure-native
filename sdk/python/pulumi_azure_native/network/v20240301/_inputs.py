# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AddressPrefixItemArgs',
    'AddressPrefixItemArgsDict',
    'NetworkManagerPropertiesNetworkManagerScopesArgs',
    'NetworkManagerPropertiesNetworkManagerScopesArgsDict',
    'NetworkManagerRoutingGroupItemArgs',
    'NetworkManagerRoutingGroupItemArgsDict',
    'RoutingRuleNextHopArgs',
    'RoutingRuleNextHopArgsDict',
    'RoutingRuleRouteDestinationArgs',
    'RoutingRuleRouteDestinationArgsDict',
    'SecurityUserGroupItemArgs',
    'SecurityUserGroupItemArgsDict',
]

MYPY = False

if not MYPY:
    class AddressPrefixItemArgsDict(TypedDict):
        """
        Address prefix item.
        """
        address_prefix: NotRequired[pulumi.Input[str]]
        """
        Address prefix.
        """
        address_prefix_type: NotRequired[pulumi.Input[Union[str, 'AddressPrefixType']]]
        """
        Address prefix type.
        """
elif False:
    AddressPrefixItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressPrefixItemArgs:
    def __init__(__self__, *,
                 address_prefix: Optional[pulumi.Input[str]] = None,
                 address_prefix_type: Optional[pulumi.Input[Union[str, 'AddressPrefixType']]] = None):
        """
        Address prefix item.
        :param pulumi.Input[str] address_prefix: Address prefix.
        :param pulumi.Input[Union[str, 'AddressPrefixType']] address_prefix_type: Address prefix type.
        """
        if address_prefix is not None:
            pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefix_type is not None:
            pulumi.set(__self__, "address_prefix_type", address_prefix_type)

    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Address prefix.
        """
        return pulumi.get(self, "address_prefix")

    @address_prefix.setter
    def address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_prefix", value)

    @property
    @pulumi.getter(name="addressPrefixType")
    def address_prefix_type(self) -> Optional[pulumi.Input[Union[str, 'AddressPrefixType']]]:
        """
        Address prefix type.
        """
        return pulumi.get(self, "address_prefix_type")

    @address_prefix_type.setter
    def address_prefix_type(self, value: Optional[pulumi.Input[Union[str, 'AddressPrefixType']]]):
        pulumi.set(self, "address_prefix_type", value)


if not MYPY:
    class NetworkManagerPropertiesNetworkManagerScopesArgsDict(TypedDict):
        """
        Scope of Network Manager.
        """
        management_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of management groups.
        """
        subscriptions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of subscriptions.
        """
elif False:
    NetworkManagerPropertiesNetworkManagerScopesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkManagerPropertiesNetworkManagerScopesArgs:
    def __init__(__self__, *,
                 management_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Scope of Network Manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] management_groups: List of management groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subscriptions: List of subscriptions.
        """
        if management_groups is not None:
            pulumi.set(__self__, "management_groups", management_groups)
        if subscriptions is not None:
            pulumi.set(__self__, "subscriptions", subscriptions)

    @property
    @pulumi.getter(name="managementGroups")
    def management_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of management groups.
        """
        return pulumi.get(self, "management_groups")

    @management_groups.setter
    def management_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "management_groups", value)

    @property
    @pulumi.getter
    def subscriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of subscriptions.
        """
        return pulumi.get(self, "subscriptions")

    @subscriptions.setter
    def subscriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subscriptions", value)


if not MYPY:
    class NetworkManagerRoutingGroupItemArgsDict(TypedDict):
        """
        Network manager routing group item.
        """
        network_group_id: pulumi.Input[str]
        """
        Network manager group Id.
        """
elif False:
    NetworkManagerRoutingGroupItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkManagerRoutingGroupItemArgs:
    def __init__(__self__, *,
                 network_group_id: pulumi.Input[str]):
        """
        Network manager routing group item.
        :param pulumi.Input[str] network_group_id: Network manager group Id.
        """
        pulumi.set(__self__, "network_group_id", network_group_id)

    @property
    @pulumi.getter(name="networkGroupId")
    def network_group_id(self) -> pulumi.Input[str]:
        """
        Network manager group Id.
        """
        return pulumi.get(self, "network_group_id")

    @network_group_id.setter
    def network_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_group_id", value)


if not MYPY:
    class RoutingRuleNextHopArgsDict(TypedDict):
        """
        Next hop.
        """
        next_hop_type: pulumi.Input[Union[str, 'RoutingRuleNextHopType']]
        """
        Next hop type.
        """
        next_hop_address: NotRequired[pulumi.Input[str]]
        """
        Next hop address. Only required if the next hop type is VirtualAppliance.
        """
elif False:
    RoutingRuleNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingRuleNextHopArgs:
    def __init__(__self__, *,
                 next_hop_type: pulumi.Input[Union[str, 'RoutingRuleNextHopType']],
                 next_hop_address: Optional[pulumi.Input[str]] = None):
        """
        Next hop.
        :param pulumi.Input[Union[str, 'RoutingRuleNextHopType']] next_hop_type: Next hop type.
        :param pulumi.Input[str] next_hop_address: Next hop address. Only required if the next hop type is VirtualAppliance.
        """
        pulumi.set(__self__, "next_hop_type", next_hop_type)
        if next_hop_address is not None:
            pulumi.set(__self__, "next_hop_address", next_hop_address)

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> pulumi.Input[Union[str, 'RoutingRuleNextHopType']]:
        """
        Next hop type.
        """
        return pulumi.get(self, "next_hop_type")

    @next_hop_type.setter
    def next_hop_type(self, value: pulumi.Input[Union[str, 'RoutingRuleNextHopType']]):
        pulumi.set(self, "next_hop_type", value)

    @property
    @pulumi.getter(name="nextHopAddress")
    def next_hop_address(self) -> Optional[pulumi.Input[str]]:
        """
        Next hop address. Only required if the next hop type is VirtualAppliance.
        """
        return pulumi.get(self, "next_hop_address")

    @next_hop_address.setter
    def next_hop_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_address", value)


if not MYPY:
    class RoutingRuleRouteDestinationArgsDict(TypedDict):
        """
        Route destination.
        """
        destination_address: pulumi.Input[str]
        """
        Destination address.
        """
        type: pulumi.Input[Union[str, 'RoutingRuleDestinationType']]
        """
        Destination type.
        """
elif False:
    RoutingRuleRouteDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingRuleRouteDestinationArgs:
    def __init__(__self__, *,
                 destination_address: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'RoutingRuleDestinationType']]):
        """
        Route destination.
        :param pulumi.Input[str] destination_address: Destination address.
        :param pulumi.Input[Union[str, 'RoutingRuleDestinationType']] type: Destination type.
        """
        pulumi.set(__self__, "destination_address", destination_address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="destinationAddress")
    def destination_address(self) -> pulumi.Input[str]:
        """
        Destination address.
        """
        return pulumi.get(self, "destination_address")

    @destination_address.setter
    def destination_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_address", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'RoutingRuleDestinationType']]:
        """
        Destination type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'RoutingRuleDestinationType']]):
        pulumi.set(self, "type", value)


if not MYPY:
    class SecurityUserGroupItemArgsDict(TypedDict):
        """
        Network manager security user group item.
        """
        network_group_id: pulumi.Input[str]
        """
        Network manager group Id.
        """
elif False:
    SecurityUserGroupItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityUserGroupItemArgs:
    def __init__(__self__, *,
                 network_group_id: pulumi.Input[str]):
        """
        Network manager security user group item.
        :param pulumi.Input[str] network_group_id: Network manager group Id.
        """
        pulumi.set(__self__, "network_group_id", network_group_id)

    @property
    @pulumi.getter(name="networkGroupId")
    def network_group_id(self) -> pulumi.Input[str]:
        """
        Network manager group Id.
        """
        return pulumi.get(self, "network_group_id")

    @network_group_id.setter
    def network_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_group_id", value)


