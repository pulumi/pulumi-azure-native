# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .admin_rule import *
from .application_gateway import *
from .application_gateway_private_endpoint_connection import *
from .application_security_group import *
from .azure_firewall import *
from .bastion_host import *
from .connection_monitor import *
from .connectivity_configuration import *
from .custom_ip_prefix import *
from .ddos_custom_policy import *
from .ddos_protection_plan import *
from .dscp_configuration import *
from .endpoint import *
from .experiment import *
from .express_route_circuit import *
from .express_route_circuit_authorization import *
from .express_route_circuit_connection import *
from .express_route_circuit_peering import *
from .express_route_connection import *
from .express_route_cross_connection_peering import *
from .express_route_gateway import *
from .express_route_port import *
from .firewall_policy import *
from .firewall_policy_rule_collection_group import *
from .firewall_policy_rule_group import *
from .flow_log import *
from .front_door import *
from .get_active_sessions import *
from .get_admin_rule import *
from .get_application_gateway import *
from .get_application_gateway_backend_health_on_demand import *
from .get_application_gateway_private_endpoint_connection import *
from .get_application_security_group import *
from .get_azure_firewall import *
from .get_bastion_host import *
from .get_bastion_shareable_link import *
from .get_connection_monitor import *
from .get_connectivity_configuration import *
from .get_custom_ip_prefix import *
from .get_ddos_custom_policy import *
from .get_ddos_protection_plan import *
from .get_dns_resource_reference_by_tar_resources import *
from .get_dscp_configuration import *
from .get_endpoint import *
from .get_experiment import *
from .get_express_route_circuit import *
from .get_express_route_circuit_authorization import *
from .get_express_route_circuit_connection import *
from .get_express_route_circuit_peering import *
from .get_express_route_connection import *
from .get_express_route_cross_connection_peering import *
from .get_express_route_gateway import *
from .get_express_route_port import *
from .get_firewall_policy import *
from .get_firewall_policy_rule_collection_group import *
from .get_firewall_policy_rule_group import *
from .get_flow_log import *
from .get_front_door import *
from .get_hub_route_table import *
from .get_hub_virtual_network_connection import *
from .get_inbound_nat_rule import *
from .get_ip_allocation import *
from .get_ip_group import *
from .get_load_balancer import *
from .get_load_balancer_backend_address_pool import *
from .get_local_network_gateway import *
from .get_nat_gateway import *
from .get_nat_rule import *
from .get_network_experiment_profile import *
from .get_network_group import *
from .get_network_interface import *
from .get_network_interface_tap_configuration import *
from .get_network_manager import *
from .get_network_profile import *
from .get_network_security_group import *
from .get_network_virtual_appliance import *
from .get_network_watcher import *
from .get_p2s_vpn_gateway import *
from .get_p2s_vpn_gateway_p2s_vpn_connection_health import *
from .get_p2s_vpn_gateway_p2s_vpn_connection_health_detailed import *
from .get_p2s_vpn_server_configuration import *
from .get_packet_capture import *
from .get_policy import *
from .get_private_dns_zone_group import *
from .get_private_endpoint import *
from .get_private_link_service import *
from .get_private_link_service_private_endpoint_connection import *
from .get_private_record_set import *
from .get_private_zone import *
from .get_profile import *
from .get_public_ip_address import *
from .get_public_ip_prefix import *
from .get_record_set import *
from .get_route import *
from .get_route_filter import *
from .get_route_filter_rule import *
from .get_route_table import *
from .get_rules_engine import *
from .get_security_configuration import *
from .get_security_partner_provider import *
from .get_security_rule import *
from .get_service_endpoint_policy import *
from .get_service_endpoint_policy_definition import *
from .get_subnet import *
from .get_traffic_manager_user_metrics_key import *
from .get_user_rule import *
from .get_virtual_appliance_site import *
from .get_virtual_hub import *
from .get_virtual_hub_bgp_connection import *
from .get_virtual_hub_ip_configuration import *
from .get_virtual_hub_route_table_v2 import *
from .get_virtual_network import *
from .get_virtual_network_gateway import *
from .get_virtual_network_gateway_advertised_routes import *
from .get_virtual_network_gateway_bgp_peer_status import *
from .get_virtual_network_gateway_connection import *
from .get_virtual_network_gateway_learned_routes import *
from .get_virtual_network_gateway_vpnclient_connection_health import *
from .get_virtual_network_gateway_vpnclient_ipsec_parameters import *
from .get_virtual_network_link import *
from .get_virtual_network_peering import *
from .get_virtual_network_tap import *
from .get_virtual_router import *
from .get_virtual_router_peering import *
from .get_virtual_wan import *
from .get_vpn_connection import *
from .get_vpn_gateway import *
from .get_vpn_server_configuration import *
from .get_vpn_site import *
from .get_web_application_firewall_policy import *
from .get_zone import *
from .hub_route_table import *
from .hub_virtual_network_connection import *
from .inbound_nat_rule import *
from .ip_allocation import *
from .ip_group import *
from .list_effective_virtual_network_by_network_group import *
from .list_effective_virtual_network_by_network_manager import *
from .list_network_manager_deployment_status import *
from .load_balancer import *
from .load_balancer_backend_address_pool import *
from .local_network_gateway import *
from .nat_gateway import *
from .nat_rule import *
from .network_experiment_profile import *
from .network_group import *
from .network_interface import *
from .network_interface_tap_configuration import *
from .network_manager import *
from .network_profile import *
from .network_security_group import *
from .network_virtual_appliance import *
from .network_watcher import *
from .p2s_vpn_gateway import *
from .p2s_vpn_server_configuration import *
from .packet_capture import *
from .policy import *
from .private_dns_zone_group import *
from .private_endpoint import *
from .private_link_service import *
from .private_link_service_private_endpoint_connection import *
from .private_record_set import *
from .private_zone import *
from .profile import *
from .public_ip_address import *
from .public_ip_prefix import *
from .record_set import *
from .route import *
from .route_filter import *
from .route_filter_rule import *
from .route_table import *
from .rules_engine import *
from .security_configuration import *
from .security_partner_provider import *
from .security_rule import *
from .service_endpoint_policy import *
from .service_endpoint_policy_definition import *
from .subnet import *
from .traffic_manager_user_metrics_key import *
from .user_rule import *
from .virtual_appliance_site import *
from .virtual_hub import *
from .virtual_hub_bgp_connection import *
from .virtual_hub_ip_configuration import *
from .virtual_hub_route_table_v2 import *
from .virtual_network import *
from .virtual_network_gateway import *
from .virtual_network_gateway_connection import *
from .virtual_network_link import *
from .virtual_network_peering import *
from .virtual_network_tap import *
from .virtual_router import *
from .virtual_router_peering import *
from .virtual_wan import *
from .vpn_connection import *
from .vpn_gateway import *
from .vpn_server_configuration import *
from .vpn_site import *
from .web_application_firewall_policy import *
from .zone import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    v20150501preview,
    v20150504preview,
    v20150615,
    v20151101,
    v20160330,
    v20160401,
    v20160601,
    v20160901,
    v20161201,
    v20170301,
    v20170501,
    v20170601,
    v20170801,
    v20170901,
    v20170901preview,
    v20171001,
    v20171101,
    v20180101,
    v20180201,
    v20180301,
    v20180301preview,
    v20180401,
    v20180501,
    v20180601,
    v20180701,
    v20180801,
    v20180901,
    v20181001,
    v20181101,
    v20181201,
    v20190201,
    v20190301,
    v20190401,
    v20190501,
    v20190601,
    v20190701,
    v20190801,
    v20190901,
    v20191001,
    v20191101,
    v20191201,
    v20200101,
    v20200301,
    v20200401,
    v20200501,
    v20200601,
    v20200701,
    v20200801,
    v20201101,
    v20210201preview,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:network:AdminRule":
                return AdminRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ApplicationGateway":
                return ApplicationGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ApplicationGatewayPrivateEndpointConnection":
                return ApplicationGatewayPrivateEndpointConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ApplicationSecurityGroup":
                return ApplicationSecurityGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:AzureFirewall":
                return AzureFirewall(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:BastionHost":
                return BastionHost(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ConnectionMonitor":
                return ConnectionMonitor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ConnectivityConfiguration":
                return ConnectivityConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:CustomIPPrefix":
                return CustomIPPrefix(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:DdosCustomPolicy":
                return DdosCustomPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:DdosProtectionPlan":
                return DdosProtectionPlan(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:DscpConfiguration":
                return DscpConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Endpoint":
                return Endpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Experiment":
                return Experiment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteCircuit":
                return ExpressRouteCircuit(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteCircuitAuthorization":
                return ExpressRouteCircuitAuthorization(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteCircuitConnection":
                return ExpressRouteCircuitConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteCircuitPeering":
                return ExpressRouteCircuitPeering(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteConnection":
                return ExpressRouteConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteCrossConnectionPeering":
                return ExpressRouteCrossConnectionPeering(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRouteGateway":
                return ExpressRouteGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ExpressRoutePort":
                return ExpressRoutePort(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:FirewallPolicy":
                return FirewallPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:FirewallPolicyRuleCollectionGroup":
                return FirewallPolicyRuleCollectionGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:FirewallPolicyRuleGroup":
                return FirewallPolicyRuleGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:FlowLog":
                return FlowLog(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:FrontDoor":
                return FrontDoor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:HubRouteTable":
                return HubRouteTable(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:HubVirtualNetworkConnection":
                return HubVirtualNetworkConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:InboundNatRule":
                return InboundNatRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:IpAllocation":
                return IpAllocation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:IpGroup":
                return IpGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:LoadBalancer":
                return LoadBalancer(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:LoadBalancerBackendAddressPool":
                return LoadBalancerBackendAddressPool(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:LocalNetworkGateway":
                return LocalNetworkGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NatGateway":
                return NatGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NatRule":
                return NatRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkExperimentProfile":
                return NetworkExperimentProfile(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkGroup":
                return NetworkGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkInterface":
                return NetworkInterface(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkInterfaceTapConfiguration":
                return NetworkInterfaceTapConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkManager":
                return NetworkManager(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkProfile":
                return NetworkProfile(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkSecurityGroup":
                return NetworkSecurityGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkVirtualAppliance":
                return NetworkVirtualAppliance(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:NetworkWatcher":
                return NetworkWatcher(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:P2sVpnGateway":
                return P2sVpnGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:P2sVpnServerConfiguration":
                return P2sVpnServerConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PacketCapture":
                return PacketCapture(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Policy":
                return Policy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PrivateDnsZoneGroup":
                return PrivateDnsZoneGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PrivateEndpoint":
                return PrivateEndpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PrivateLinkService":
                return PrivateLinkService(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PrivateLinkServicePrivateEndpointConnection":
                return PrivateLinkServicePrivateEndpointConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PrivateRecordSet":
                return PrivateRecordSet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PrivateZone":
                return PrivateZone(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Profile":
                return Profile(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PublicIPAddress":
                return PublicIPAddress(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:PublicIPPrefix":
                return PublicIPPrefix(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:RecordSet":
                return RecordSet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Route":
                return Route(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:RouteFilter":
                return RouteFilter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:RouteFilterRule":
                return RouteFilterRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:RouteTable":
                return RouteTable(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:RulesEngine":
                return RulesEngine(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:SecurityConfiguration":
                return SecurityConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:SecurityPartnerProvider":
                return SecurityPartnerProvider(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:SecurityRule":
                return SecurityRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ServiceEndpointPolicy":
                return ServiceEndpointPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:ServiceEndpointPolicyDefinition":
                return ServiceEndpointPolicyDefinition(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Subnet":
                return Subnet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:TrafficManagerUserMetricsKey":
                return TrafficManagerUserMetricsKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:UserRule":
                return UserRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualApplianceSite":
                return VirtualApplianceSite(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualHub":
                return VirtualHub(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualHubBgpConnection":
                return VirtualHubBgpConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualHubIpConfiguration":
                return VirtualHubIpConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualHubRouteTableV2":
                return VirtualHubRouteTableV2(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualNetwork":
                return VirtualNetwork(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualNetworkGateway":
                return VirtualNetworkGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualNetworkGatewayConnection":
                return VirtualNetworkGatewayConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualNetworkLink":
                return VirtualNetworkLink(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualNetworkPeering":
                return VirtualNetworkPeering(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualNetworkTap":
                return VirtualNetworkTap(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualRouter":
                return VirtualRouter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualRouterPeering":
                return VirtualRouterPeering(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VirtualWan":
                return VirtualWan(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VpnConnection":
                return VpnConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VpnGateway":
                return VpnGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VpnServerConfiguration":
                return VpnServerConfiguration(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:VpnSite":
                return VpnSite(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:WebApplicationFirewallPolicy":
                return WebApplicationFirewallPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:network:Zone":
                return Zone(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "network", _module_instance)

_register_module()
