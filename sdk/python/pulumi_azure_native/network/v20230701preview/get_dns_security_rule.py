# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetDnsSecurityRuleResult',
    'AwaitableGetDnsSecurityRuleResult',
    'get_dns_security_rule',
    'get_dns_security_rule_output',
]

@pulumi.output_type
class GetDnsSecurityRuleResult:
    """
    Describes a DNS security rule.
    """
    def __init__(__self__, action=None, dns_resolver_domain_lists=None, dns_security_rule_state=None, etag=None, id=None, location=None, name=None, priority=None, provisioning_state=None, system_data=None, tags=None, type=None):
        if action and not isinstance(action, dict):
            raise TypeError("Expected argument 'action' to be a dict")
        pulumi.set(__self__, "action", action)
        if dns_resolver_domain_lists and not isinstance(dns_resolver_domain_lists, list):
            raise TypeError("Expected argument 'dns_resolver_domain_lists' to be a list")
        pulumi.set(__self__, "dns_resolver_domain_lists", dns_resolver_domain_lists)
        if dns_security_rule_state and not isinstance(dns_security_rule_state, str):
            raise TypeError("Expected argument 'dns_security_rule_state' to be a str")
        pulumi.set(__self__, "dns_security_rule_state", dns_security_rule_state)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> 'outputs.DnsSecurityRuleActionResponse':
        """
        The action to take on DNS requests that match the DNS security rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dnsResolverDomainLists")
    def dns_resolver_domain_lists(self) -> Sequence['outputs.SubResourceResponse']:
        """
        DNS resolver policy domains lists that the DNS security rule applies to.
        """
        return pulumi.get(self, "dns_resolver_domain_lists")

    @property
    @pulumi.getter(name="dnsSecurityRuleState")
    def dns_security_rule_state(self) -> Optional[str]:
        """
        The state of DNS security rule.
        """
        return pulumi.get(self, "dns_security_rule_state")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the DNS security rule.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The priority of the DNS security rule.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The current provisioning state of the DNS security rule. This is a read-only property and any attempt to set this value will be ignored.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDnsSecurityRuleResult(GetDnsSecurityRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnsSecurityRuleResult(
            action=self.action,
            dns_resolver_domain_lists=self.dns_resolver_domain_lists,
            dns_security_rule_state=self.dns_security_rule_state,
            etag=self.etag,
            id=self.id,
            location=self.location,
            name=self.name,
            priority=self.priority,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_dns_security_rule(dns_resolver_policy_name: Optional[str] = None,
                          dns_security_rule_name: Optional[str] = None,
                          resource_group_name: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnsSecurityRuleResult:
    """
    Gets properties of a DNS security rule for a DNS resolver policy.


    :param str dns_resolver_policy_name: The name of the DNS resolver policy.
    :param str dns_security_rule_name: The name of the DNS security rule.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['dnsResolverPolicyName'] = dns_resolver_policy_name
    __args__['dnsSecurityRuleName'] = dns_security_rule_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:network/v20230701preview:getDnsSecurityRule', __args__, opts=opts, typ=GetDnsSecurityRuleResult).value

    return AwaitableGetDnsSecurityRuleResult(
        action=pulumi.get(__ret__, 'action'),
        dns_resolver_domain_lists=pulumi.get(__ret__, 'dns_resolver_domain_lists'),
        dns_security_rule_state=pulumi.get(__ret__, 'dns_security_rule_state'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        priority=pulumi.get(__ret__, 'priority'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_dns_security_rule_output(dns_resolver_policy_name: Optional[pulumi.Input[str]] = None,
                                 dns_security_rule_name: Optional[pulumi.Input[str]] = None,
                                 resource_group_name: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDnsSecurityRuleResult]:
    """
    Gets properties of a DNS security rule for a DNS resolver policy.


    :param str dns_resolver_policy_name: The name of the DNS resolver policy.
    :param str dns_security_rule_name: The name of the DNS security rule.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['dnsResolverPolicyName'] = dns_resolver_policy_name
    __args__['dnsSecurityRuleName'] = dns_security_rule_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:network/v20230701preview:getDnsSecurityRule', __args__, opts=opts, typ=GetDnsSecurityRuleResult)
    return __ret__.apply(lambda __response__: GetDnsSecurityRuleResult(
        action=pulumi.get(__response__, 'action'),
        dns_resolver_domain_lists=pulumi.get(__response__, 'dns_resolver_domain_lists'),
        dns_security_rule_state=pulumi.get(__response__, 'dns_security_rule_state'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        priority=pulumi.get(__response__, 'priority'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
