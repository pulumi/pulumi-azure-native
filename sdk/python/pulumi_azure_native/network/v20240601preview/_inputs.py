# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'NspLoggingConfigurationPropertiesArgs',
    'NspLoggingConfigurationPropertiesArgsDict',
    'SubResourceArgs',
    'SubResourceArgsDict',
    'SubscriptionIdArgs',
    'SubscriptionIdArgsDict',
]

MYPY = False

if not MYPY:
    class NspLoggingConfigurationPropertiesArgsDict(TypedDict):
        """
        The NSP logging configuration properties.
        """
        enabled_log_categories: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The log categories to enable in the NSP logging configuration.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        The version of the NSP logging configuration.
        """
elif False:
    NspLoggingConfigurationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NspLoggingConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 enabled_log_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The NSP logging configuration properties.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_log_categories: The log categories to enable in the NSP logging configuration.
        :param pulumi.Input[str] version: The version of the NSP logging configuration.
        """
        if enabled_log_categories is not None:
            pulumi.set(__self__, "enabled_log_categories", enabled_log_categories)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="enabledLogCategories")
    def enabled_log_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The log categories to enable in the NSP logging configuration.
        """
        return pulumi.get(self, "enabled_log_categories")

    @enabled_log_categories.setter
    def enabled_log_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enabled_log_categories", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the NSP logging configuration.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class SubResourceArgsDict(TypedDict):
        """
        Reference to another subresource.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
        An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
        A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
        Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
elif False:
    SubResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubResourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Reference to another subresource.
        :param pulumi.Input[str] id: Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
               An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
               A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
               Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
        An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
        A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
        Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class SubscriptionIdArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Subscription id in the ARM id format.
        """
elif False:
    SubscriptionIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubscriptionIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Subscription id in the ARM id format.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription id in the ARM id format.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


