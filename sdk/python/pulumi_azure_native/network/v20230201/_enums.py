# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'Access',
    'ActionType',
    'AddressPrefixType',
    'AdminRuleKind',
    'AdminState',
    'ApplicationGatewayClientRevocationOptions',
    'ApplicationGatewayCookieBasedAffinity',
    'ApplicationGatewayCustomErrorStatusCode',
    'ApplicationGatewayFirewallMode',
    'ApplicationGatewayFirewallRateLimitDuration',
    'ApplicationGatewayFirewallUserSessionVariable',
    'ApplicationGatewayLoadDistributionAlgorithm',
    'ApplicationGatewayProtocol',
    'ApplicationGatewayRedirectType',
    'ApplicationGatewayRequestRoutingRuleType',
    'ApplicationGatewaySkuName',
    'ApplicationGatewaySslCipherSuite',
    'ApplicationGatewaySslPolicyName',
    'ApplicationGatewaySslPolicyType',
    'ApplicationGatewaySslProtocol',
    'ApplicationGatewayTier',
    'AuthorizationUseStatus',
    'AutoLearnPrivateRangesMode',
    'AzureFirewallApplicationRuleProtocolType',
    'AzureFirewallNatRCActionType',
    'AzureFirewallNetworkRuleProtocol',
    'AzureFirewallRCActionType',
    'AzureFirewallSkuName',
    'AzureFirewallSkuTier',
    'AzureFirewallThreatIntelMode',
    'BastionHostSkuName',
    'CommissionedState',
    'ConfigurationType',
    'ConnectionMonitorEndpointFilterItemType',
    'ConnectionMonitorEndpointFilterType',
    'ConnectionMonitorTestConfigurationProtocol',
    'ConnectivityTopology',
    'CoverageLevel',
    'CustomIpPrefixType',
    'DdosSettingsProtectionMode',
    'DeleteExistingPeering',
    'DeleteOptions',
    'DestinationPortBehavior',
    'DhGroup',
    'EndpointType',
    'ExpressRouteCircuitPeeringState',
    'ExpressRouteCircuitSkuFamily',
    'ExpressRouteCircuitSkuTier',
    'ExpressRouteLinkAdminState',
    'ExpressRouteLinkMacSecCipher',
    'ExpressRouteLinkMacSecSciState',
    'ExpressRoutePeeringState',
    'ExpressRoutePeeringType',
    'ExpressRoutePortsBillingType',
    'ExpressRoutePortsEncapsulation',
    'ExtendedLocationTypes',
    'FirewallPolicyFilterRuleCollectionActionType',
    'FirewallPolicyIDPSQuerySortOrder',
    'FirewallPolicyIntrusionDetectionProtocol',
    'FirewallPolicyIntrusionDetectionStateType',
    'FirewallPolicyNatRuleCollectionActionType',
    'FirewallPolicyRuleApplicationProtocolType',
    'FirewallPolicyRuleCollectionType',
    'FirewallPolicyRuleNetworkProtocol',
    'FirewallPolicyRuleType',
    'FirewallPolicySkuTier',
    'FlowLogFormatType',
    'GatewayLoadBalancerTunnelInterfaceType',
    'GatewayLoadBalancerTunnelProtocol',
    'Geo',
    'GroupConnectivity',
    'HTTPConfigurationMethod',
    'HubRoutingPreference',
    'IPAllocationMethod',
    'IPVersion',
    'IkeEncryption',
    'IkeIntegrity',
    'IpAllocationType',
    'IpsecEncryption',
    'IpsecIntegrity',
    'IsGlobal',
    'LoadBalancerBackendAddressAdminState',
    'LoadBalancerOutboundRuleProtocol',
    'LoadBalancerSkuName',
    'LoadBalancerSkuTier',
    'LoadDistribution',
    'ManagedRuleEnabledState',
    'NatGatewaySkuName',
    'NetworkIntentPolicyBasedService',
    'NetworkInterfaceAuxiliaryMode',
    'NetworkInterfaceAuxiliarySku',
    'NetworkInterfaceMigrationPhase',
    'NetworkInterfaceNicType',
    'NextStep',
    'OutputType',
    'OwaspCrsExclusionEntryMatchVariable',
    'OwaspCrsExclusionEntrySelectorMatchOperator',
    'PacketCaptureTargetType',
    'PcProtocol',
    'PfsGroup',
    'PreferredIPVersion',
    'PreferredRoutingGateway',
    'ProbeProtocol',
    'ProtocolType',
    'PublicIPAddressMigrationPhase',
    'PublicIPAddressSkuName',
    'PublicIPAddressSkuTier',
    'PublicIPPrefixSkuName',
    'PublicIPPrefixSkuTier',
    'PublicIpAddressDnsSettingsDomainNameLabelScope',
    'ResourceIdentityType',
    'RouteFilterRuleType',
    'RouteMapActionType',
    'RouteMapMatchCondition',
    'RouteNextHopType',
    'ScrubbingRuleEntryMatchOperator',
    'ScrubbingRuleEntryMatchVariable',
    'ScrubbingRuleEntryState',
    'SecurityConfigurationRuleAccess',
    'SecurityConfigurationRuleDirection',
    'SecurityConfigurationRuleProtocol',
    'SecurityProviderName',
    'SecurityRuleAccess',
    'SecurityRuleDirection',
    'SecurityRuleProtocol',
    'ServiceProviderProvisioningState',
    'TransportProtocol',
    'UseHubGateway',
    'VirtualNetworkEncryptionEnforcement',
    'VirtualNetworkGatewayConnectionMode',
    'VirtualNetworkGatewayConnectionProtocol',
    'VirtualNetworkGatewayConnectionType',
    'VirtualNetworkGatewaySkuName',
    'VirtualNetworkGatewaySkuTier',
    'VirtualNetworkGatewayType',
    'VirtualNetworkPeeringLevel',
    'VirtualNetworkPeeringState',
    'VirtualNetworkPrivateEndpointNetworkPolicies',
    'VirtualNetworkPrivateLinkServiceNetworkPolicies',
    'VnetLocalRouteOverrideCriteria',
    'VpnAuthenticationType',
    'VpnClientProtocol',
    'VpnGatewayGeneration',
    'VpnGatewayTunnelingProtocol',
    'VpnLinkConnectionMode',
    'VpnNatRuleMode',
    'VpnNatRuleType',
    'VpnPolicyMemberAttributeType',
    'VpnType',
    'WebApplicationFirewallAction',
    'WebApplicationFirewallEnabledState',
    'WebApplicationFirewallMatchVariable',
    'WebApplicationFirewallMode',
    'WebApplicationFirewallOperator',
    'WebApplicationFirewallRuleType',
    'WebApplicationFirewallScrubbingState',
    'WebApplicationFirewallState',
    'WebApplicationFirewallTransform',
]


class Access(str, Enum):
    ALLOW = "Allow"
    DENY = "Deny"


class ActionType(str, Enum):
    ANOMALY_SCORING = "AnomalyScoring"
    ALLOW = "Allow"
    BLOCK = "Block"
    LOG = "Log"


class AddressPrefixType(str, Enum):
    IP_PREFIX = "IPPrefix"
    SERVICE_TAG = "ServiceTag"


class AdminRuleKind(str, Enum):
    CUSTOM = "Custom"
    DEFAULT = "Default"


class AdminState(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ApplicationGatewayClientRevocationOptions(str, Enum):
    NONE = "None"
    OCSP = "OCSP"


class ApplicationGatewayCookieBasedAffinity(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ApplicationGatewayCustomErrorStatusCode(str, Enum):
    HTTP_STATUS400 = "HttpStatus400"
    HTTP_STATUS403 = "HttpStatus403"
    HTTP_STATUS404 = "HttpStatus404"
    HTTP_STATUS405 = "HttpStatus405"
    HTTP_STATUS408 = "HttpStatus408"
    HTTP_STATUS500 = "HttpStatus500"
    HTTP_STATUS502 = "HttpStatus502"
    HTTP_STATUS503 = "HttpStatus503"
    HTTP_STATUS504 = "HttpStatus504"


class ApplicationGatewayFirewallMode(str, Enum):
    DETECTION = "Detection"
    PREVENTION = "Prevention"


class ApplicationGatewayFirewallRateLimitDuration(str, Enum):
    ONE_MIN = "OneMin"
    FIVE_MINS = "FiveMins"


class ApplicationGatewayFirewallUserSessionVariable(str, Enum):
    CLIENT_ADDR = "ClientAddr"
    GEO_LOCATION = "GeoLocation"
    NONE = "None"


class ApplicationGatewayLoadDistributionAlgorithm(str, Enum):
    ROUND_ROBIN = "RoundRobin"
    LEAST_CONNECTIONS = "LeastConnections"
    IP_HASH = "IpHash"


class ApplicationGatewayProtocol(str, Enum):
    HTTP = "Http"
    HTTPS = "Https"
    TCP = "Tcp"
    TLS = "Tls"


class ApplicationGatewayRedirectType(str, Enum):
    PERMANENT = "Permanent"
    FOUND = "Found"
    SEE_OTHER = "SeeOther"
    TEMPORARY = "Temporary"


class ApplicationGatewayRequestRoutingRuleType(str, Enum):
    BASIC = "Basic"
    PATH_BASED_ROUTING = "PathBasedRouting"


class ApplicationGatewaySkuName(str, Enum):
    STANDARD_SMALL = "Standard_Small"
    STANDARD_MEDIUM = "Standard_Medium"
    STANDARD_LARGE = "Standard_Large"
    WA_F_MEDIUM = "WAF_Medium"
    WA_F_LARGE = "WAF_Large"
    STANDARD_V2 = "Standard_v2"
    WA_F_V2 = "WAF_v2"


class ApplicationGatewaySslCipherSuite(str, Enum):
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_256_CB_C_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
    TL_S_DH_E_RS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
    TL_S_DH_E_RS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
    TL_S_DH_E_RS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"
    TL_S_DH_E_RS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"
    TL_S_RS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"
    TL_S_RS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"
    TL_S_RS_A_WIT_H_AE_S_256_CB_C_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"
    TL_S_RS_A_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"
    TL_S_RS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"
    TL_S_RS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_256_CB_C_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_256_CB_C_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
    TL_S_ECDH_E_ECDS_A_WIT_H_AE_S_128_CB_C_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
    TL_S_DH_E_DS_S_WIT_H_AE_S_256_CB_C_SHA256 = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
    TL_S_DH_E_DS_S_WIT_H_AE_S_128_CB_C_SHA256 = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
    TL_S_DH_E_DS_S_WIT_H_AE_S_256_CB_C_SHA = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"
    TL_S_DH_E_DS_S_WIT_H_AE_S_128_CB_C_SHA = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"
    TL_S_RS_A_WIT_H_3_DE_S_ED_E_CB_C_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
    TL_S_DH_E_DS_S_WIT_H_3_DE_S_ED_E_CB_C_SHA = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_128_GC_M_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
    TL_S_ECDH_E_RS_A_WIT_H_AE_S_256_GC_M_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"


class ApplicationGatewaySslPolicyName(str, Enum):
    APP_GW_SSL_POLICY20150501 = "AppGwSslPolicy20150501"
    APP_GW_SSL_POLICY20170401 = "AppGwSslPolicy20170401"
    APP_GW_SSL_POLICY20170401_S = "AppGwSslPolicy20170401S"
    APP_GW_SSL_POLICY20220101 = "AppGwSslPolicy20220101"
    APP_GW_SSL_POLICY20220101_S = "AppGwSslPolicy20220101S"


class ApplicationGatewaySslPolicyType(str, Enum):
    PREDEFINED = "Predefined"
    CUSTOM = "Custom"
    CUSTOM_V2 = "CustomV2"


class ApplicationGatewaySslProtocol(str, Enum):
    TL_SV1_0 = "TLSv1_0"
    TL_SV1_1 = "TLSv1_1"
    TL_SV1_2 = "TLSv1_2"
    TL_SV1_3 = "TLSv1_3"


class ApplicationGatewayTier(str, Enum):
    STANDARD = "Standard"
    WAF = "WAF"
    STANDARD_V2 = "Standard_v2"
    WA_F_V2 = "WAF_v2"


class AuthorizationUseStatus(str, Enum):
    AVAILABLE = "Available"
    IN_USE = "InUse"


class AutoLearnPrivateRangesMode(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class AzureFirewallApplicationRuleProtocolType(str, Enum):
    HTTP = "Http"
    HTTPS = "Https"
    MSSQL = "Mssql"


class AzureFirewallNatRCActionType(str, Enum):
    SNAT = "Snat"
    DNAT = "Dnat"


class AzureFirewallNetworkRuleProtocol(str, Enum):
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"
    ICMP = "ICMP"


class AzureFirewallRCActionType(str, Enum):
    ALLOW = "Allow"
    DENY = "Deny"


class AzureFirewallSkuName(str, Enum):
    AZF_W_V_NET = "AZFW_VNet"
    AZF_W_HUB = "AZFW_Hub"


class AzureFirewallSkuTier(str, Enum):
    STANDARD = "Standard"
    PREMIUM = "Premium"
    BASIC = "Basic"


class AzureFirewallThreatIntelMode(str, Enum):
    ALERT = "Alert"
    DENY = "Deny"
    OFF = "Off"


class BastionHostSkuName(str, Enum):
    BASIC = "Basic"
    STANDARD = "Standard"


class CommissionedState(str, Enum):
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    COMMISSIONING = "Commissioning"
    COMMISSIONED_NO_INTERNET_ADVERTISE = "CommissionedNoInternetAdvertise"
    COMMISSIONED = "Commissioned"
    DECOMMISSIONING = "Decommissioning"
    DEPROVISIONING = "Deprovisioning"
    DEPROVISIONED = "Deprovisioned"


class ConfigurationType(str, Enum):
    SECURITY_ADMIN = "SecurityAdmin"
    CONNECTIVITY = "Connectivity"


class ConnectionMonitorEndpointFilterItemType(str, Enum):
    AGENT_ADDRESS = "AgentAddress"


class ConnectionMonitorEndpointFilterType(str, Enum):
    INCLUDE = "Include"


class ConnectionMonitorTestConfigurationProtocol(str, Enum):
    TCP = "Tcp"
    HTTP = "Http"
    ICMP = "Icmp"


class ConnectivityTopology(str, Enum):
    HUB_AND_SPOKE = "HubAndSpoke"
    MESH = "Mesh"


class CoverageLevel(str, Enum):
    DEFAULT = "Default"
    LOW = "Low"
    BELOW_AVERAGE = "BelowAverage"
    AVERAGE = "Average"
    ABOVE_AVERAGE = "AboveAverage"
    FULL = "Full"


class CustomIpPrefixType(str, Enum):
    SINGULAR = "Singular"
    PARENT = "Parent"
    CHILD = "Child"


class DdosSettingsProtectionMode(str, Enum):
    VIRTUAL_NETWORK_INHERITED = "VirtualNetworkInherited"
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class DeleteExistingPeering(str, Enum):
    FALSE = "False"
    TRUE = "True"


class DeleteOptions(str, Enum):
    DELETE = "Delete"
    DETACH = "Detach"


class DestinationPortBehavior(str, Enum):
    NONE = "None"
    LISTEN_IF_AVAILABLE = "ListenIfAvailable"


class DhGroup(str, Enum):
    NONE = "None"
    DH_GROUP1 = "DHGroup1"
    DH_GROUP2 = "DHGroup2"
    DH_GROUP14 = "DHGroup14"
    DH_GROUP2048 = "DHGroup2048"
    ECP256 = "ECP256"
    ECP384 = "ECP384"
    DH_GROUP24 = "DHGroup24"


class EndpointType(str, Enum):
    AZURE_VM = "AzureVM"
    AZURE_V_NET = "AzureVNet"
    AZURE_SUBNET = "AzureSubnet"
    EXTERNAL_ADDRESS = "ExternalAddress"
    MMA_WORKSPACE_MACHINE = "MMAWorkspaceMachine"
    MMA_WORKSPACE_NETWORK = "MMAWorkspaceNetwork"
    AZURE_ARC_VM = "AzureArcVM"
    AZURE_VMSS = "AzureVMSS"


class ExpressRouteCircuitPeeringState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ExpressRouteCircuitSkuFamily(str, Enum):
    UNLIMITED_DATA = "UnlimitedData"
    METERED_DATA = "MeteredData"


class ExpressRouteCircuitSkuTier(str, Enum):
    STANDARD = "Standard"
    PREMIUM = "Premium"
    BASIC = "Basic"
    LOCAL = "Local"


class ExpressRouteLinkAdminState(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class ExpressRouteLinkMacSecCipher(str, Enum):
    GCM_AES256 = "GcmAes256"
    GCM_AES128 = "GcmAes128"
    GCM_AES_XPN128 = "GcmAesXpn128"
    GCM_AES_XPN256 = "GcmAesXpn256"


class ExpressRouteLinkMacSecSciState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ExpressRoutePeeringState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class ExpressRoutePeeringType(str, Enum):
    AZURE_PUBLIC_PEERING = "AzurePublicPeering"
    AZURE_PRIVATE_PEERING = "AzurePrivatePeering"
    MICROSOFT_PEERING = "MicrosoftPeering"


class ExpressRoutePortsBillingType(str, Enum):
    METERED_DATA = "MeteredData"
    UNLIMITED_DATA = "UnlimitedData"


class ExpressRoutePortsEncapsulation(str, Enum):
    DOT1_Q = "Dot1Q"
    QIN_Q = "QinQ"


class ExtendedLocationTypes(str, Enum):
    EDGE_ZONE = "EdgeZone"


class FirewallPolicyFilterRuleCollectionActionType(str, Enum):
    ALLOW = "Allow"
    DENY = "Deny"


class FirewallPolicyIDPSQuerySortOrder(str, Enum):
    ASCENDING = "Ascending"
    DESCENDING = "Descending"


class FirewallPolicyIntrusionDetectionProtocol(str, Enum):
    TCP = "TCP"
    UDP = "UDP"
    ICMP = "ICMP"
    ANY = "ANY"


class FirewallPolicyIntrusionDetectionStateType(str, Enum):
    OFF = "Off"
    ALERT = "Alert"
    DENY = "Deny"


class FirewallPolicyNatRuleCollectionActionType(str, Enum):
    DNAT = "DNAT"


class FirewallPolicyRuleApplicationProtocolType(str, Enum):
    HTTP = "Http"
    HTTPS = "Https"


class FirewallPolicyRuleCollectionType(str, Enum):
    FIREWALL_POLICY_NAT_RULE_COLLECTION = "FirewallPolicyNatRuleCollection"
    FIREWALL_POLICY_FILTER_RULE_COLLECTION = "FirewallPolicyFilterRuleCollection"


class FirewallPolicyRuleNetworkProtocol(str, Enum):
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"
    ICMP = "ICMP"


class FirewallPolicyRuleType(str, Enum):
    APPLICATION_RULE = "ApplicationRule"
    NETWORK_RULE = "NetworkRule"
    NAT_RULE = "NatRule"


class FirewallPolicySkuTier(str, Enum):
    STANDARD = "Standard"
    PREMIUM = "Premium"
    BASIC = "Basic"


class FlowLogFormatType(str, Enum):
    JSON = "JSON"


class GatewayLoadBalancerTunnelInterfaceType(str, Enum):
    NONE = "None"
    INTERNAL = "Internal"
    EXTERNAL = "External"


class GatewayLoadBalancerTunnelProtocol(str, Enum):
    NONE = "None"
    NATIVE = "Native"
    VXLAN = "VXLAN"


class Geo(str, Enum):
    GLOBAL_ = "GLOBAL"
    AFRI = "AFRI"
    APAC = "APAC"
    EURO = "EURO"
    LATAM = "LATAM"
    NAM = "NAM"
    ME = "ME"
    OCEANIA = "OCEANIA"
    AQ = "AQ"


class GroupConnectivity(str, Enum):
    NONE = "None"
    DIRECTLY_CONNECTED = "DirectlyConnected"


class HTTPConfigurationMethod(str, Enum):
    GET = "Get"
    POST = "Post"


class HubRoutingPreference(str, Enum):
    EXPRESS_ROUTE = "ExpressRoute"
    VPN_GATEWAY = "VpnGateway"
    AS_PATH = "ASPath"


class IPAllocationMethod(str, Enum):
    STATIC = "Static"
    DYNAMIC = "Dynamic"


class IPVersion(str, Enum):
    I_PV4 = "IPv4"
    I_PV6 = "IPv6"


class IkeEncryption(str, Enum):
    DES = "DES"
    DES3 = "DES3"
    AES128 = "AES128"
    AES192 = "AES192"
    AES256 = "AES256"
    GCMAES256 = "GCMAES256"
    GCMAES128 = "GCMAES128"


class IkeIntegrity(str, Enum):
    MD5 = "MD5"
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA384 = "SHA384"
    GCMAES256 = "GCMAES256"
    GCMAES128 = "GCMAES128"


class IpAllocationType(str, Enum):
    UNDEFINED = "Undefined"
    HYPERNET = "Hypernet"


class IpsecEncryption(str, Enum):
    NONE = "None"
    DES = "DES"
    DES3 = "DES3"
    AES128 = "AES128"
    AES192 = "AES192"
    AES256 = "AES256"
    GCMAES128 = "GCMAES128"
    GCMAES192 = "GCMAES192"
    GCMAES256 = "GCMAES256"


class IpsecIntegrity(str, Enum):
    MD5 = "MD5"
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    GCMAES128 = "GCMAES128"
    GCMAES192 = "GCMAES192"
    GCMAES256 = "GCMAES256"


class IsGlobal(str, Enum):
    FALSE = "False"
    TRUE = "True"


class LoadBalancerBackendAddressAdminState(str, Enum):
    NONE = "None"
    UP = "Up"
    DOWN = "Down"


class LoadBalancerOutboundRuleProtocol(str, Enum):
    TCP = "Tcp"
    UDP = "Udp"
    ALL = "All"


class LoadBalancerSkuName(str, Enum):
    BASIC = "Basic"
    STANDARD = "Standard"
    GATEWAY = "Gateway"


class LoadBalancerSkuTier(str, Enum):
    REGIONAL = "Regional"
    GLOBAL_ = "Global"


class LoadDistribution(str, Enum):
    DEFAULT = "Default"
    SOURCE_IP = "SourceIP"
    SOURCE_IP_PROTOCOL = "SourceIPProtocol"


class ManagedRuleEnabledState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class NatGatewaySkuName(str, Enum):
    STANDARD = "Standard"


class NetworkIntentPolicyBasedService(str, Enum):
    NONE = "None"
    ALL = "All"
    ALLOW_RULES_ONLY = "AllowRulesOnly"


class NetworkInterfaceAuxiliaryMode(str, Enum):
    NONE = "None"
    MAX_CONNECTIONS = "MaxConnections"
    FLOATING = "Floating"
    ACCELERATED_CONNECTIONS = "AcceleratedConnections"


class NetworkInterfaceAuxiliarySku(str, Enum):
    NONE = "None"
    A1 = "A1"
    A2 = "A2"
    A4 = "A4"
    A8 = "A8"


class NetworkInterfaceMigrationPhase(str, Enum):
    NONE = "None"
    PREPARE = "Prepare"
    COMMIT = "Commit"
    ABORT = "Abort"
    COMMITTED = "Committed"


class NetworkInterfaceNicType(str, Enum):
    STANDARD = "Standard"
    ELASTIC = "Elastic"


class NextStep(str, Enum):
    UNKNOWN = "Unknown"
    CONTINUE_ = "Continue"
    TERMINATE = "Terminate"


class OutputType(str, Enum):
    WORKSPACE = "Workspace"


class OwaspCrsExclusionEntryMatchVariable(str, Enum):
    REQUEST_HEADER_NAMES = "RequestHeaderNames"
    REQUEST_COOKIE_NAMES = "RequestCookieNames"
    REQUEST_ARG_NAMES = "RequestArgNames"
    REQUEST_HEADER_KEYS = "RequestHeaderKeys"
    REQUEST_HEADER_VALUES = "RequestHeaderValues"
    REQUEST_COOKIE_KEYS = "RequestCookieKeys"
    REQUEST_COOKIE_VALUES = "RequestCookieValues"
    REQUEST_ARG_KEYS = "RequestArgKeys"
    REQUEST_ARG_VALUES = "RequestArgValues"


class OwaspCrsExclusionEntrySelectorMatchOperator(str, Enum):
    EQUALS = "Equals"
    CONTAINS = "Contains"
    STARTS_WITH = "StartsWith"
    ENDS_WITH = "EndsWith"
    EQUALS_ANY = "EqualsAny"


class PacketCaptureTargetType(str, Enum):
    AZURE_VM = "AzureVM"
    AZURE_VMSS = "AzureVMSS"


class PcProtocol(str, Enum):
    TCP = "TCP"
    UDP = "UDP"
    ANY = "Any"


class PfsGroup(str, Enum):
    NONE = "None"
    PFS1 = "PFS1"
    PFS2 = "PFS2"
    PFS2048 = "PFS2048"
    ECP256 = "ECP256"
    ECP384 = "ECP384"
    PFS24 = "PFS24"
    PFS14 = "PFS14"
    PFSMM = "PFSMM"


class PreferredIPVersion(str, Enum):
    I_PV4 = "IPv4"
    I_PV6 = "IPv6"


class PreferredRoutingGateway(str, Enum):
    EXPRESS_ROUTE = "ExpressRoute"
    VPN_GATEWAY = "VpnGateway"
    NONE = "None"


class ProbeProtocol(str, Enum):
    HTTP = "Http"
    TCP = "Tcp"
    HTTPS = "Https"


class ProtocolType(str, Enum):
    DO_NOT_USE = "DoNotUse"
    ICMP = "Icmp"
    TCP = "Tcp"
    UDP = "Udp"
    GRE = "Gre"
    ESP = "Esp"
    AH = "Ah"
    VXLAN = "Vxlan"
    ALL = "All"


class PublicIPAddressMigrationPhase(str, Enum):
    NONE = "None"
    PREPARE = "Prepare"
    COMMIT = "Commit"
    ABORT = "Abort"
    COMMITTED = "Committed"


class PublicIPAddressSkuName(str, Enum):
    BASIC = "Basic"
    STANDARD = "Standard"


class PublicIPAddressSkuTier(str, Enum):
    REGIONAL = "Regional"
    GLOBAL_ = "Global"


class PublicIPPrefixSkuName(str, Enum):
    STANDARD = "Standard"


class PublicIPPrefixSkuTier(str, Enum):
    REGIONAL = "Regional"
    GLOBAL_ = "Global"


class PublicIpAddressDnsSettingsDomainNameLabelScope(str, Enum):
    TENANT_REUSE = "TenantReuse"
    SUBSCRIPTION_REUSE = "SubscriptionReuse"
    RESOURCE_GROUP_REUSE = "ResourceGroupReuse"
    NO_REUSE = "NoReuse"


class ResourceIdentityType(str, Enum):
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned, UserAssigned"
    NONE = "None"


class RouteFilterRuleType(str, Enum):
    COMMUNITY = "Community"


class RouteMapActionType(str, Enum):
    UNKNOWN = "Unknown"
    REMOVE = "Remove"
    ADD = "Add"
    REPLACE = "Replace"
    DROP = "Drop"


class RouteMapMatchCondition(str, Enum):
    UNKNOWN = "Unknown"
    CONTAINS = "Contains"
    EQUALS = "Equals"
    NOT_CONTAINS = "NotContains"
    NOT_EQUALS = "NotEquals"


class RouteNextHopType(str, Enum):
    VIRTUAL_NETWORK_GATEWAY = "VirtualNetworkGateway"
    VNET_LOCAL = "VnetLocal"
    INTERNET = "Internet"
    VIRTUAL_APPLIANCE = "VirtualAppliance"
    NONE = "None"


class ScrubbingRuleEntryMatchOperator(str, Enum):
    EQUALS = "Equals"
    EQUALS_ANY = "EqualsAny"


class ScrubbingRuleEntryMatchVariable(str, Enum):
    REQUEST_HEADER_NAMES = "RequestHeaderNames"
    REQUEST_COOKIE_NAMES = "RequestCookieNames"
    REQUEST_ARG_NAMES = "RequestArgNames"
    REQUEST_POST_ARG_NAMES = "RequestPostArgNames"
    REQUEST_JSON_ARG_NAMES = "RequestJSONArgNames"
    REQUEST_IP_ADDRESS = "RequestIPAddress"


class ScrubbingRuleEntryState(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class SecurityConfigurationRuleAccess(str, Enum):
    ALLOW = "Allow"
    DENY = "Deny"
    ALWAYS_ALLOW = "AlwaysAllow"


class SecurityConfigurationRuleDirection(str, Enum):
    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class SecurityConfigurationRuleProtocol(str, Enum):
    TCP = "Tcp"
    UDP = "Udp"
    ICMP = "Icmp"
    ESP = "Esp"
    ANY = "Any"
    AH = "Ah"


class SecurityProviderName(str, Enum):
    Z_SCALER = "ZScaler"
    I_BOSS = "IBoss"
    CHECKPOINT = "Checkpoint"


class SecurityRuleAccess(str, Enum):
    ALLOW = "Allow"
    DENY = "Deny"


class SecurityRuleDirection(str, Enum):
    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class SecurityRuleProtocol(str, Enum):
    TCP = "Tcp"
    UDP = "Udp"
    ICMP = "Icmp"
    ESP = "Esp"
    ASTERISK = "*"
    AH = "Ah"


class ServiceProviderProvisioningState(str, Enum):
    NOT_PROVISIONED = "NotProvisioned"
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    DEPROVISIONING = "Deprovisioning"


class TransportProtocol(str, Enum):
    UDP = "Udp"
    TCP = "Tcp"
    ALL = "All"


class UseHubGateway(str, Enum):
    FALSE = "False"
    TRUE = "True"


class VirtualNetworkEncryptionEnforcement(str, Enum):
    DROP_UNENCRYPTED = "DropUnencrypted"
    ALLOW_UNENCRYPTED = "AllowUnencrypted"


class VirtualNetworkGatewayConnectionMode(str, Enum):
    DEFAULT = "Default"
    RESPONDER_ONLY = "ResponderOnly"
    INITIATOR_ONLY = "InitiatorOnly"


class VirtualNetworkGatewayConnectionProtocol(str, Enum):
    IK_EV2 = "IKEv2"
    IK_EV1 = "IKEv1"


class VirtualNetworkGatewayConnectionType(str, Enum):
    IPSEC = "IPsec"
    VNET2_VNET = "Vnet2Vnet"
    EXPRESS_ROUTE = "ExpressRoute"
    VPN_CLIENT = "VPNClient"


class VirtualNetworkGatewaySkuName(str, Enum):
    BASIC = "Basic"
    HIGH_PERFORMANCE = "HighPerformance"
    STANDARD = "Standard"
    ULTRA_PERFORMANCE = "UltraPerformance"
    VPN_GW1 = "VpnGw1"
    VPN_GW2 = "VpnGw2"
    VPN_GW3 = "VpnGw3"
    VPN_GW4 = "VpnGw4"
    VPN_GW5 = "VpnGw5"
    VPN_GW1_AZ = "VpnGw1AZ"
    VPN_GW2_AZ = "VpnGw2AZ"
    VPN_GW3_AZ = "VpnGw3AZ"
    VPN_GW4_AZ = "VpnGw4AZ"
    VPN_GW5_AZ = "VpnGw5AZ"
    ER_GW1_AZ = "ErGw1AZ"
    ER_GW2_AZ = "ErGw2AZ"
    ER_GW3_AZ = "ErGw3AZ"


class VirtualNetworkGatewaySkuTier(str, Enum):
    BASIC = "Basic"
    HIGH_PERFORMANCE = "HighPerformance"
    STANDARD = "Standard"
    ULTRA_PERFORMANCE = "UltraPerformance"
    VPN_GW1 = "VpnGw1"
    VPN_GW2 = "VpnGw2"
    VPN_GW3 = "VpnGw3"
    VPN_GW4 = "VpnGw4"
    VPN_GW5 = "VpnGw5"
    VPN_GW1_AZ = "VpnGw1AZ"
    VPN_GW2_AZ = "VpnGw2AZ"
    VPN_GW3_AZ = "VpnGw3AZ"
    VPN_GW4_AZ = "VpnGw4AZ"
    VPN_GW5_AZ = "VpnGw5AZ"
    ER_GW1_AZ = "ErGw1AZ"
    ER_GW2_AZ = "ErGw2AZ"
    ER_GW3_AZ = "ErGw3AZ"


class VirtualNetworkGatewayType(str, Enum):
    VPN = "Vpn"
    EXPRESS_ROUTE = "ExpressRoute"
    LOCAL_GATEWAY = "LocalGateway"


class VirtualNetworkPeeringLevel(str, Enum):
    FULLY_IN_SYNC = "FullyInSync"
    REMOTE_NOT_IN_SYNC = "RemoteNotInSync"
    LOCAL_NOT_IN_SYNC = "LocalNotInSync"
    LOCAL_AND_REMOTE_NOT_IN_SYNC = "LocalAndRemoteNotInSync"


class VirtualNetworkPeeringState(str, Enum):
    INITIATED = "Initiated"
    CONNECTED = "Connected"
    DISCONNECTED = "Disconnected"


class VirtualNetworkPrivateEndpointNetworkPolicies(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class VirtualNetworkPrivateLinkServiceNetworkPolicies(str, Enum):
    ENABLED = "Enabled"
    DISABLED = "Disabled"


class VnetLocalRouteOverrideCriteria(str, Enum):
    CONTAINS = "Contains"
    EQUAL = "Equal"


class VpnAuthenticationType(str, Enum):
    CERTIFICATE = "Certificate"
    RADIUS = "Radius"
    AAD = "AAD"


class VpnClientProtocol(str, Enum):
    IKE_V2 = "IkeV2"
    SSTP = "SSTP"
    OPEN_VPN = "OpenVPN"


class VpnGatewayGeneration(str, Enum):
    NONE = "None"
    GENERATION1 = "Generation1"
    GENERATION2 = "Generation2"


class VpnGatewayTunnelingProtocol(str, Enum):
    IKE_V2 = "IkeV2"
    OPEN_VPN = "OpenVPN"


class VpnLinkConnectionMode(str, Enum):
    DEFAULT = "Default"
    RESPONDER_ONLY = "ResponderOnly"
    INITIATOR_ONLY = "InitiatorOnly"


class VpnNatRuleMode(str, Enum):
    EGRESS_SNAT = "EgressSnat"
    INGRESS_SNAT = "IngressSnat"


class VpnNatRuleType(str, Enum):
    STATIC = "Static"
    DYNAMIC = "Dynamic"


class VpnPolicyMemberAttributeType(str, Enum):
    CERTIFICATE_GROUP_ID = "CertificateGroupId"
    AAD_GROUP_ID = "AADGroupId"
    RADIUS_AZURE_GROUP_ID = "RadiusAzureGroupId"


class VpnType(str, Enum):
    POLICY_BASED = "PolicyBased"
    ROUTE_BASED = "RouteBased"


class WebApplicationFirewallAction(str, Enum):
    ALLOW = "Allow"
    BLOCK = "Block"
    LOG = "Log"


class WebApplicationFirewallEnabledState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class WebApplicationFirewallMatchVariable(str, Enum):
    REMOTE_ADDR = "RemoteAddr"
    REQUEST_METHOD = "RequestMethod"
    QUERY_STRING = "QueryString"
    POST_ARGS = "PostArgs"
    REQUEST_URI = "RequestUri"
    REQUEST_HEADERS = "RequestHeaders"
    REQUEST_BODY = "RequestBody"
    REQUEST_COOKIES = "RequestCookies"


class WebApplicationFirewallMode(str, Enum):
    PREVENTION = "Prevention"
    DETECTION = "Detection"


class WebApplicationFirewallOperator(str, Enum):
    IP_MATCH = "IPMatch"
    EQUAL = "Equal"
    CONTAINS = "Contains"
    LESS_THAN = "LessThan"
    GREATER_THAN = "GreaterThan"
    LESS_THAN_OR_EQUAL = "LessThanOrEqual"
    GREATER_THAN_OR_EQUAL = "GreaterThanOrEqual"
    BEGINS_WITH = "BeginsWith"
    ENDS_WITH = "EndsWith"
    REGEX = "Regex"
    GEO_MATCH = "GeoMatch"
    ANY = "Any"


class WebApplicationFirewallRuleType(str, Enum):
    MATCH_RULE = "MatchRule"
    RATE_LIMIT_RULE = "RateLimitRule"
    INVALID = "Invalid"


class WebApplicationFirewallScrubbingState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class WebApplicationFirewallState(str, Enum):
    DISABLED = "Disabled"
    ENABLED = "Enabled"


class WebApplicationFirewallTransform(str, Enum):
    UPPERCASE = "Uppercase"
    LOWERCASE = "Lowercase"
    TRIM = "Trim"
    URL_DECODE = "UrlDecode"
    URL_ENCODE = "UrlEncode"
    REMOVE_NULLS = "RemoveNulls"
    HTML_ENTITY_DECODE = "HtmlEntityDecode"
