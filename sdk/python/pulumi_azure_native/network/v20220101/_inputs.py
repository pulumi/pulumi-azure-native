# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ProtocolCustomSettingsFormatArgs',
    'RoutingPolicyArgs',
    'SubResourceArgs',
    'VpnServerConfigurationPolicyGroupMemberArgs',
]

@pulumi.input_type
class ProtocolCustomSettingsFormatArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[Union[str, 'DdosCustomPolicyProtocol']]] = None,
                 source_rate_override: Optional[pulumi.Input[str]] = None,
                 trigger_rate_override: Optional[pulumi.Input[str]] = None,
                 trigger_sensitivity_override: Optional[pulumi.Input[Union[str, 'DdosCustomPolicyTriggerSensitivityOverride']]] = None):
        """
        DDoS custom policy properties.
        :param pulumi.Input[Union[str, 'DdosCustomPolicyProtocol']] protocol: The protocol for which the DDoS protection policy is being customized.
        :param pulumi.Input[str] source_rate_override: The customized DDoS protection source rate.
        :param pulumi.Input[str] trigger_rate_override: The customized DDoS protection trigger rate.
        :param pulumi.Input[Union[str, 'DdosCustomPolicyTriggerSensitivityOverride']] trigger_sensitivity_override: The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_rate_override is not None:
            pulumi.set(__self__, "source_rate_override", source_rate_override)
        if trigger_rate_override is not None:
            pulumi.set(__self__, "trigger_rate_override", trigger_rate_override)
        if trigger_sensitivity_override is not None:
            pulumi.set(__self__, "trigger_sensitivity_override", trigger_sensitivity_override)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[Union[str, 'DdosCustomPolicyProtocol']]]:
        """
        The protocol for which the DDoS protection policy is being customized.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[Union[str, 'DdosCustomPolicyProtocol']]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceRateOverride")
    def source_rate_override(self) -> Optional[pulumi.Input[str]]:
        """
        The customized DDoS protection source rate.
        """
        return pulumi.get(self, "source_rate_override")

    @source_rate_override.setter
    def source_rate_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_rate_override", value)

    @property
    @pulumi.getter(name="triggerRateOverride")
    def trigger_rate_override(self) -> Optional[pulumi.Input[str]]:
        """
        The customized DDoS protection trigger rate.
        """
        return pulumi.get(self, "trigger_rate_override")

    @trigger_rate_override.setter
    def trigger_rate_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_rate_override", value)

    @property
    @pulumi.getter(name="triggerSensitivityOverride")
    def trigger_sensitivity_override(self) -> Optional[pulumi.Input[Union[str, 'DdosCustomPolicyTriggerSensitivityOverride']]]:
        """
        The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
        """
        return pulumi.get(self, "trigger_sensitivity_override")

    @trigger_sensitivity_override.setter
    def trigger_sensitivity_override(self, value: Optional[pulumi.Input[Union[str, 'DdosCustomPolicyTriggerSensitivityOverride']]]):
        pulumi.set(self, "trigger_sensitivity_override", value)


@pulumi.input_type
class RoutingPolicyArgs:
    def __init__(__self__, *,
                 destinations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 next_hop: pulumi.Input[str]):
        """
        The routing policy object used in a RoutingIntent resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destinations: List of all destinations which this routing policy is applicable to (for example: Internet, PrivateTraffic).
        :param pulumi.Input[str] name: The unique name for the routing policy.
        :param pulumi.Input[str] next_hop: The next hop resource id on which this routing policy is applicable to.
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of all destinations which this routing policy is applicable to (for example: Internet, PrivateTraffic).
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The unique name for the routing policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Input[str]:
        """
        The next hop resource id on which this routing policy is applicable to.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_hop", value)


@pulumi.input_type
class SubResourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Reference to another subresource.
        :param pulumi.Input[str] id: Resource ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VpnServerConfigurationPolicyGroupMemberArgs:
    def __init__(__self__, *,
                 attribute_type: Optional[pulumi.Input[Union[str, 'VpnPolicyMemberAttributeType']]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        VpnServerConfiguration PolicyGroup member
        :param pulumi.Input[Union[str, 'VpnPolicyMemberAttributeType']] attribute_type: The Vpn Policy member attribute type.
        :param pulumi.Input[str] attribute_value: The value of Attribute used for this VpnServerConfigurationPolicyGroupMember.
        :param pulumi.Input[str] name: Name of the VpnServerConfigurationPolicyGroupMember.
        """
        if attribute_type is not None:
            pulumi.set(__self__, "attribute_type", attribute_type)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> Optional[pulumi.Input[Union[str, 'VpnPolicyMemberAttributeType']]]:
        """
        The Vpn Policy member attribute type.
        """
        return pulumi.get(self, "attribute_type")

    @attribute_type.setter
    def attribute_type(self, value: Optional[pulumi.Input[Union[str, 'VpnPolicyMemberAttributeType']]]):
        pulumi.set(self, "attribute_type", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of Attribute used for this VpnServerConfigurationPolicyGroupMember.
        """
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the VpnServerConfigurationPolicyGroupMember.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


