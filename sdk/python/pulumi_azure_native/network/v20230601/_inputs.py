# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'NetworkVirtualApplianceConnectionPropertiesArgs',
    'NetworkVirtualApplianceConnectionPropertiesArgsDict',
    'PropagatedRouteTableArgs',
    'PropagatedRouteTableArgsDict',
    'RoutingConfigurationArgs',
    'RoutingConfigurationArgsDict',
    'StaticRoutesConfigArgs',
    'StaticRoutesConfigArgsDict',
    'StaticRouteArgs',
    'StaticRouteArgsDict',
    'SubResourceArgs',
    'SubResourceArgsDict',
    'VnetRouteArgs',
    'VnetRouteArgsDict',
]

MYPY = False

if not MYPY:
    class NetworkVirtualApplianceConnectionPropertiesArgsDict(TypedDict):
        """
        Properties of the NetworkVirtualApplianceConnection subresource.
        """
        asn: NotRequired[pulumi.Input[float]]
        """
        Network Virtual Appliance ASN.
        """
        bgp_peer_address: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of bgpPeerAddresses for the NVA instances
        """
        enable_internet_security: NotRequired[pulumi.Input[bool]]
        """
        Enable internet security.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the resource.
        """
        routing_configuration: NotRequired[pulumi.Input['RoutingConfigurationArgsDict']]
        """
        The Routing Configuration indicating the associated and propagated route tables on this connection.
        """
        tunnel_identifier: NotRequired[pulumi.Input[float]]
        """
        Unique identifier for the connection.
        """
elif False:
    NetworkVirtualApplianceConnectionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkVirtualApplianceConnectionPropertiesArgs:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[float]] = None,
                 bgp_peer_address: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_internet_security: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routing_configuration: Optional[pulumi.Input['RoutingConfigurationArgs']] = None,
                 tunnel_identifier: Optional[pulumi.Input[float]] = None):
        """
        Properties of the NetworkVirtualApplianceConnection subresource.
        :param pulumi.Input[float] asn: Network Virtual Appliance ASN.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bgp_peer_address: List of bgpPeerAddresses for the NVA instances
        :param pulumi.Input[bool] enable_internet_security: Enable internet security.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input['RoutingConfigurationArgs'] routing_configuration: The Routing Configuration indicating the associated and propagated route tables on this connection.
        :param pulumi.Input[float] tunnel_identifier: Unique identifier for the connection.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if bgp_peer_address is not None:
            pulumi.set(__self__, "bgp_peer_address", bgp_peer_address)
        if enable_internet_security is not None:
            pulumi.set(__self__, "enable_internet_security", enable_internet_security)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routing_configuration is not None:
            pulumi.set(__self__, "routing_configuration", routing_configuration)
        if tunnel_identifier is not None:
            pulumi.set(__self__, "tunnel_identifier", tunnel_identifier)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[float]]:
        """
        Network Virtual Appliance ASN.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter(name="bgpPeerAddress")
    def bgp_peer_address(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of bgpPeerAddresses for the NVA instances
        """
        return pulumi.get(self, "bgp_peer_address")

    @bgp_peer_address.setter
    def bgp_peer_address(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bgp_peer_address", value)

    @property
    @pulumi.getter(name="enableInternetSecurity")
    def enable_internet_security(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable internet security.
        """
        return pulumi.get(self, "enable_internet_security")

    @enable_internet_security.setter
    def enable_internet_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_internet_security", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routingConfiguration")
    def routing_configuration(self) -> Optional[pulumi.Input['RoutingConfigurationArgs']]:
        """
        The Routing Configuration indicating the associated and propagated route tables on this connection.
        """
        return pulumi.get(self, "routing_configuration")

    @routing_configuration.setter
    def routing_configuration(self, value: Optional[pulumi.Input['RoutingConfigurationArgs']]):
        pulumi.set(self, "routing_configuration", value)

    @property
    @pulumi.getter(name="tunnelIdentifier")
    def tunnel_identifier(self) -> Optional[pulumi.Input[float]]:
        """
        Unique identifier for the connection.
        """
        return pulumi.get(self, "tunnel_identifier")

    @tunnel_identifier.setter
    def tunnel_identifier(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "tunnel_identifier", value)


if not MYPY:
    class PropagatedRouteTableArgsDict(TypedDict):
        """
        The list of RouteTables to advertise the routes to.
        """
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['SubResourceArgsDict']]]]
        """
        The list of resource ids of all the RouteTables.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of labels.
        """
elif False:
    PropagatedRouteTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropagatedRouteTableArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The list of RouteTables to advertise the routes to.
        :param pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]] ids: The list of resource ids of all the RouteTables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: The list of labels.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]]]:
        """
        The list of resource ids of all the RouteTables.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubResourceArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class RoutingConfigurationArgsDict(TypedDict):
        """
        Routing Configuration indicating the associated and propagated route tables for this connection.
        """
        associated_route_table: NotRequired[pulumi.Input['SubResourceArgsDict']]
        """
        The resource id RouteTable associated with this RoutingConfiguration.
        """
        inbound_route_map: NotRequired[pulumi.Input['SubResourceArgsDict']]
        """
        The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.
        """
        outbound_route_map: NotRequired[pulumi.Input['SubResourceArgsDict']]
        """
        The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.
        """
        propagated_route_tables: NotRequired[pulumi.Input['PropagatedRouteTableArgsDict']]
        """
        The list of RouteTables to advertise the routes to.
        """
        vnet_routes: NotRequired[pulumi.Input['VnetRouteArgsDict']]
        """
        List of routes that control routing from VirtualHub into a virtual network connection.
        """
elif False:
    RoutingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingConfigurationArgs:
    def __init__(__self__, *,
                 associated_route_table: Optional[pulumi.Input['SubResourceArgs']] = None,
                 inbound_route_map: Optional[pulumi.Input['SubResourceArgs']] = None,
                 outbound_route_map: Optional[pulumi.Input['SubResourceArgs']] = None,
                 propagated_route_tables: Optional[pulumi.Input['PropagatedRouteTableArgs']] = None,
                 vnet_routes: Optional[pulumi.Input['VnetRouteArgs']] = None):
        """
        Routing Configuration indicating the associated and propagated route tables for this connection.
        :param pulumi.Input['SubResourceArgs'] associated_route_table: The resource id RouteTable associated with this RoutingConfiguration.
        :param pulumi.Input['SubResourceArgs'] inbound_route_map: The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.
        :param pulumi.Input['SubResourceArgs'] outbound_route_map: The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.
        :param pulumi.Input['PropagatedRouteTableArgs'] propagated_route_tables: The list of RouteTables to advertise the routes to.
        :param pulumi.Input['VnetRouteArgs'] vnet_routes: List of routes that control routing from VirtualHub into a virtual network connection.
        """
        if associated_route_table is not None:
            pulumi.set(__self__, "associated_route_table", associated_route_table)
        if inbound_route_map is not None:
            pulumi.set(__self__, "inbound_route_map", inbound_route_map)
        if outbound_route_map is not None:
            pulumi.set(__self__, "outbound_route_map", outbound_route_map)
        if propagated_route_tables is not None:
            pulumi.set(__self__, "propagated_route_tables", propagated_route_tables)
        if vnet_routes is not None:
            pulumi.set(__self__, "vnet_routes", vnet_routes)

    @property
    @pulumi.getter(name="associatedRouteTable")
    def associated_route_table(self) -> Optional[pulumi.Input['SubResourceArgs']]:
        """
        The resource id RouteTable associated with this RoutingConfiguration.
        """
        return pulumi.get(self, "associated_route_table")

    @associated_route_table.setter
    def associated_route_table(self, value: Optional[pulumi.Input['SubResourceArgs']]):
        pulumi.set(self, "associated_route_table", value)

    @property
    @pulumi.getter(name="inboundRouteMap")
    def inbound_route_map(self) -> Optional[pulumi.Input['SubResourceArgs']]:
        """
        The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.
        """
        return pulumi.get(self, "inbound_route_map")

    @inbound_route_map.setter
    def inbound_route_map(self, value: Optional[pulumi.Input['SubResourceArgs']]):
        pulumi.set(self, "inbound_route_map", value)

    @property
    @pulumi.getter(name="outboundRouteMap")
    def outbound_route_map(self) -> Optional[pulumi.Input['SubResourceArgs']]:
        """
        The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.
        """
        return pulumi.get(self, "outbound_route_map")

    @outbound_route_map.setter
    def outbound_route_map(self, value: Optional[pulumi.Input['SubResourceArgs']]):
        pulumi.set(self, "outbound_route_map", value)

    @property
    @pulumi.getter(name="propagatedRouteTables")
    def propagated_route_tables(self) -> Optional[pulumi.Input['PropagatedRouteTableArgs']]:
        """
        The list of RouteTables to advertise the routes to.
        """
        return pulumi.get(self, "propagated_route_tables")

    @propagated_route_tables.setter
    def propagated_route_tables(self, value: Optional[pulumi.Input['PropagatedRouteTableArgs']]):
        pulumi.set(self, "propagated_route_tables", value)

    @property
    @pulumi.getter(name="vnetRoutes")
    def vnet_routes(self) -> Optional[pulumi.Input['VnetRouteArgs']]:
        """
        List of routes that control routing from VirtualHub into a virtual network connection.
        """
        return pulumi.get(self, "vnet_routes")

    @vnet_routes.setter
    def vnet_routes(self, value: Optional[pulumi.Input['VnetRouteArgs']]):
        pulumi.set(self, "vnet_routes", value)


if not MYPY:
    class StaticRoutesConfigArgsDict(TypedDict):
        """
        Configuration for static routes on this HubVnetConnectionConfiguration for static routes on this HubVnetConnection.
        """
        vnet_local_route_override_criteria: NotRequired[pulumi.Input[Union[str, 'VnetLocalRouteOverrideCriteria']]]
        """
        Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
        """
elif False:
    StaticRoutesConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StaticRoutesConfigArgs:
    def __init__(__self__, *,
                 vnet_local_route_override_criteria: Optional[pulumi.Input[Union[str, 'VnetLocalRouteOverrideCriteria']]] = None):
        """
        Configuration for static routes on this HubVnetConnectionConfiguration for static routes on this HubVnetConnection.
        :param pulumi.Input[Union[str, 'VnetLocalRouteOverrideCriteria']] vnet_local_route_override_criteria: Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
        """
        if vnet_local_route_override_criteria is not None:
            pulumi.set(__self__, "vnet_local_route_override_criteria", vnet_local_route_override_criteria)

    @property
    @pulumi.getter(name="vnetLocalRouteOverrideCriteria")
    def vnet_local_route_override_criteria(self) -> Optional[pulumi.Input[Union[str, 'VnetLocalRouteOverrideCriteria']]]:
        """
        Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
        """
        return pulumi.get(self, "vnet_local_route_override_criteria")

    @vnet_local_route_override_criteria.setter
    def vnet_local_route_override_criteria(self, value: Optional[pulumi.Input[Union[str, 'VnetLocalRouteOverrideCriteria']]]):
        pulumi.set(self, "vnet_local_route_override_criteria", value)


if not MYPY:
    class StaticRouteArgsDict(TypedDict):
        """
        List of all Static Routes.
        """
        address_prefixes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of all address prefixes.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the StaticRoute that is unique within a VnetRoute.
        """
        next_hop_ip_address: NotRequired[pulumi.Input[str]]
        """
        The ip address of the next hop.
        """
elif False:
    StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StaticRouteArgs:
    def __init__(__self__, *,
                 address_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop_ip_address: Optional[pulumi.Input[str]] = None):
        """
        List of all Static Routes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_prefixes: List of all address prefixes.
        :param pulumi.Input[str] name: The name of the StaticRoute that is unique within a VnetRoute.
        :param pulumi.Input[str] next_hop_ip_address: The ip address of the next hop.
        """
        if address_prefixes is not None:
            pulumi.set(__self__, "address_prefixes", address_prefixes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_ip_address is not None:
            pulumi.set(__self__, "next_hop_ip_address", next_hop_ip_address)

    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of all address prefixes.
        """
        return pulumi.get(self, "address_prefixes")

    @address_prefixes.setter
    def address_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_prefixes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the StaticRoute that is unique within a VnetRoute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The ip address of the next hop.
        """
        return pulumi.get(self, "next_hop_ip_address")

    @next_hop_ip_address.setter
    def next_hop_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_ip_address", value)


if not MYPY:
    class SubResourceArgsDict(TypedDict):
        """
        Reference to another subresource.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
        An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
        A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
        Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
elif False:
    SubResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubResourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Reference to another subresource.
        :param pulumi.Input[str] id: Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
               An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
               A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
               Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
        An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
        A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
        Example of a relative ID: $self/frontEndConfigurations/my-frontend.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class VnetRouteArgsDict(TypedDict):
        """
        List of routes that control routing from VirtualHub into a virtual network connection.
        """
        static_routes: NotRequired[pulumi.Input[Sequence[pulumi.Input['StaticRouteArgsDict']]]]
        """
        List of all Static Routes.
        """
        static_routes_config: NotRequired[pulumi.Input['StaticRoutesConfigArgsDict']]
        """
        Configuration for static routes on this HubVnetConnection.
        """
elif False:
    VnetRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VnetRouteArgs:
    def __init__(__self__, *,
                 static_routes: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRouteArgs']]]] = None,
                 static_routes_config: Optional[pulumi.Input['StaticRoutesConfigArgs']] = None):
        """
        List of routes that control routing from VirtualHub into a virtual network connection.
        :param pulumi.Input[Sequence[pulumi.Input['StaticRouteArgs']]] static_routes: List of all Static Routes.
        :param pulumi.Input['StaticRoutesConfigArgs'] static_routes_config: Configuration for static routes on this HubVnetConnection.
        """
        if static_routes is not None:
            pulumi.set(__self__, "static_routes", static_routes)
        if static_routes_config is not None:
            pulumi.set(__self__, "static_routes_config", static_routes_config)

    @property
    @pulumi.getter(name="staticRoutes")
    def static_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StaticRouteArgs']]]]:
        """
        List of all Static Routes.
        """
        return pulumi.get(self, "static_routes")

    @static_routes.setter
    def static_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRouteArgs']]]]):
        pulumi.set(self, "static_routes", value)

    @property
    @pulumi.getter(name="staticRoutesConfig")
    def static_routes_config(self) -> Optional[pulumi.Input['StaticRoutesConfigArgs']]:
        """
        Configuration for static routes on this HubVnetConnection.
        """
        return pulumi.get(self, "static_routes_config")

    @static_routes_config.setter
    def static_routes_config(self, value: Optional[pulumi.Input['StaticRoutesConfigArgs']]):
        pulumi.set(self, "static_routes_config", value)


