# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'NetworkVirtualApplianceConnectionPropertiesResponse',
    'PropagatedRouteTableResponse',
    'RoutingConfigurationResponse',
    'StaticRouteResponse',
    'StaticRoutesConfigResponse',
    'SubResourceResponse',
    'VnetRouteResponse',
]

@pulumi.output_type
class NetworkVirtualApplianceConnectionPropertiesResponse(dict):
    """
    Properties of the NetworkVirtualApplianceConnection subresource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "bgpPeerAddress":
            suggest = "bgp_peer_address"
        elif key == "enableInternetSecurity":
            suggest = "enable_internet_security"
        elif key == "routingConfiguration":
            suggest = "routing_configuration"
        elif key == "tunnelIdentifier":
            suggest = "tunnel_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkVirtualApplianceConnectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkVirtualApplianceConnectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkVirtualApplianceConnectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 asn: Optional[float] = None,
                 bgp_peer_address: Optional[Sequence[str]] = None,
                 enable_internet_security: Optional[bool] = None,
                 name: Optional[str] = None,
                 routing_configuration: Optional['outputs.RoutingConfigurationResponse'] = None,
                 tunnel_identifier: Optional[float] = None):
        """
        Properties of the NetworkVirtualApplianceConnection subresource.
        :param str provisioning_state: The provisioning state of the NetworkVirtualApplianceConnection resource.
        :param float asn: Network Virtual Appliance ASN.
        :param Sequence[str] bgp_peer_address: List of bgpPeerAddresses for the NVA instances
        :param bool enable_internet_security: Enable internet security.
        :param str name: The name of the resource.
        :param 'RoutingConfigurationResponse' routing_configuration: The Routing Configuration indicating the associated and propagated route tables on this connection.
        :param float tunnel_identifier: Unique identifier for the connection.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if bgp_peer_address is not None:
            pulumi.set(__self__, "bgp_peer_address", bgp_peer_address)
        if enable_internet_security is not None:
            pulumi.set(__self__, "enable_internet_security", enable_internet_security)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routing_configuration is not None:
            pulumi.set(__self__, "routing_configuration", routing_configuration)
        if tunnel_identifier is not None:
            pulumi.set(__self__, "tunnel_identifier", tunnel_identifier)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the NetworkVirtualApplianceConnection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def asn(self) -> Optional[float]:
        """
        Network Virtual Appliance ASN.
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="bgpPeerAddress")
    def bgp_peer_address(self) -> Optional[Sequence[str]]:
        """
        List of bgpPeerAddresses for the NVA instances
        """
        return pulumi.get(self, "bgp_peer_address")

    @property
    @pulumi.getter(name="enableInternetSecurity")
    def enable_internet_security(self) -> Optional[bool]:
        """
        Enable internet security.
        """
        return pulumi.get(self, "enable_internet_security")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routingConfiguration")
    def routing_configuration(self) -> Optional['outputs.RoutingConfigurationResponse']:
        """
        The Routing Configuration indicating the associated and propagated route tables on this connection.
        """
        return pulumi.get(self, "routing_configuration")

    @property
    @pulumi.getter(name="tunnelIdentifier")
    def tunnel_identifier(self) -> Optional[float]:
        """
        Unique identifier for the connection.
        """
        return pulumi.get(self, "tunnel_identifier")


@pulumi.output_type
class PropagatedRouteTableResponse(dict):
    """
    The list of RouteTables to advertise the routes to.
    """
    def __init__(__self__, *,
                 ids: Optional[Sequence['outputs.SubResourceResponse']] = None,
                 labels: Optional[Sequence[str]] = None):
        """
        The list of RouteTables to advertise the routes to.
        :param Sequence['SubResourceResponse'] ids: The list of resource ids of all the RouteTables.
        :param Sequence[str] labels: The list of labels.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence['outputs.SubResourceResponse']]:
        """
        The list of resource ids of all the RouteTables.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        The list of labels.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class RoutingConfigurationResponse(dict):
    """
    Routing Configuration indicating the associated and propagated route tables for this connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associatedRouteTable":
            suggest = "associated_route_table"
        elif key == "inboundRouteMap":
            suggest = "inbound_route_map"
        elif key == "outboundRouteMap":
            suggest = "outbound_route_map"
        elif key == "propagatedRouteTables":
            suggest = "propagated_route_tables"
        elif key == "vnetRoutes":
            suggest = "vnet_routes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 associated_route_table: Optional['outputs.SubResourceResponse'] = None,
                 inbound_route_map: Optional['outputs.SubResourceResponse'] = None,
                 outbound_route_map: Optional['outputs.SubResourceResponse'] = None,
                 propagated_route_tables: Optional['outputs.PropagatedRouteTableResponse'] = None,
                 vnet_routes: Optional['outputs.VnetRouteResponse'] = None):
        """
        Routing Configuration indicating the associated and propagated route tables for this connection.
        :param 'SubResourceResponse' associated_route_table: The resource id RouteTable associated with this RoutingConfiguration.
        :param 'SubResourceResponse' inbound_route_map: The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.
        :param 'SubResourceResponse' outbound_route_map: The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.
        :param 'PropagatedRouteTableResponse' propagated_route_tables: The list of RouteTables to advertise the routes to.
        :param 'VnetRouteResponse' vnet_routes: List of routes that control routing from VirtualHub into a virtual network connection.
        """
        if associated_route_table is not None:
            pulumi.set(__self__, "associated_route_table", associated_route_table)
        if inbound_route_map is not None:
            pulumi.set(__self__, "inbound_route_map", inbound_route_map)
        if outbound_route_map is not None:
            pulumi.set(__self__, "outbound_route_map", outbound_route_map)
        if propagated_route_tables is not None:
            pulumi.set(__self__, "propagated_route_tables", propagated_route_tables)
        if vnet_routes is not None:
            pulumi.set(__self__, "vnet_routes", vnet_routes)

    @property
    @pulumi.getter(name="associatedRouteTable")
    def associated_route_table(self) -> Optional['outputs.SubResourceResponse']:
        """
        The resource id RouteTable associated with this RoutingConfiguration.
        """
        return pulumi.get(self, "associated_route_table")

    @property
    @pulumi.getter(name="inboundRouteMap")
    def inbound_route_map(self) -> Optional['outputs.SubResourceResponse']:
        """
        The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.
        """
        return pulumi.get(self, "inbound_route_map")

    @property
    @pulumi.getter(name="outboundRouteMap")
    def outbound_route_map(self) -> Optional['outputs.SubResourceResponse']:
        """
        The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.
        """
        return pulumi.get(self, "outbound_route_map")

    @property
    @pulumi.getter(name="propagatedRouteTables")
    def propagated_route_tables(self) -> Optional['outputs.PropagatedRouteTableResponse']:
        """
        The list of RouteTables to advertise the routes to.
        """
        return pulumi.get(self, "propagated_route_tables")

    @property
    @pulumi.getter(name="vnetRoutes")
    def vnet_routes(self) -> Optional['outputs.VnetRouteResponse']:
        """
        List of routes that control routing from VirtualHub into a virtual network connection.
        """
        return pulumi.get(self, "vnet_routes")


@pulumi.output_type
class StaticRouteResponse(dict):
    """
    List of all Static Routes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressPrefixes":
            suggest = "address_prefixes"
        elif key == "nextHopIpAddress":
            suggest = "next_hop_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRouteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRouteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRouteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_prefixes: Optional[Sequence[str]] = None,
                 name: Optional[str] = None,
                 next_hop_ip_address: Optional[str] = None):
        """
        List of all Static Routes.
        :param Sequence[str] address_prefixes: List of all address prefixes.
        :param str name: The name of the StaticRoute that is unique within a VnetRoute.
        :param str next_hop_ip_address: The ip address of the next hop.
        """
        if address_prefixes is not None:
            pulumi.set(__self__, "address_prefixes", address_prefixes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_ip_address is not None:
            pulumi.set(__self__, "next_hop_ip_address", next_hop_ip_address)

    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> Optional[Sequence[str]]:
        """
        List of all address prefixes.
        """
        return pulumi.get(self, "address_prefixes")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the StaticRoute that is unique within a VnetRoute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> Optional[str]:
        """
        The ip address of the next hop.
        """
        return pulumi.get(self, "next_hop_ip_address")


@pulumi.output_type
class StaticRoutesConfigResponse(dict):
    """
    Configuration for static routes on this HubVnetConnectionConfiguration for static routes on this HubVnetConnection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propagateStaticRoutes":
            suggest = "propagate_static_routes"
        elif key == "vnetLocalRouteOverrideCriteria":
            suggest = "vnet_local_route_override_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRoutesConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRoutesConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRoutesConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 propagate_static_routes: bool,
                 vnet_local_route_override_criteria: Optional[str] = None):
        """
        Configuration for static routes on this HubVnetConnectionConfiguration for static routes on this HubVnetConnection.
        :param bool propagate_static_routes: Boolean indicating whether static routes on this connection are automatically propagate to route tables which this connection propagates to.
        :param str vnet_local_route_override_criteria: Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
        """
        pulumi.set(__self__, "propagate_static_routes", propagate_static_routes)
        if vnet_local_route_override_criteria is not None:
            pulumi.set(__self__, "vnet_local_route_override_criteria", vnet_local_route_override_criteria)

    @property
    @pulumi.getter(name="propagateStaticRoutes")
    def propagate_static_routes(self) -> bool:
        """
        Boolean indicating whether static routes on this connection are automatically propagate to route tables which this connection propagates to.
        """
        return pulumi.get(self, "propagate_static_routes")

    @property
    @pulumi.getter(name="vnetLocalRouteOverrideCriteria")
    def vnet_local_route_override_criteria(self) -> Optional[str]:
        """
        Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
        """
        return pulumi.get(self, "vnet_local_route_override_criteria")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    Reference to another subresource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Reference to another subresource.
        :param str id: Resource ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VnetRouteResponse(dict):
    """
    List of routes that control routing from VirtualHub into a virtual network connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpConnections":
            suggest = "bgp_connections"
        elif key == "staticRoutes":
            suggest = "static_routes"
        elif key == "staticRoutesConfig":
            suggest = "static_routes_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VnetRouteResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VnetRouteResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VnetRouteResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgp_connections: Sequence['outputs.SubResourceResponse'],
                 static_routes: Optional[Sequence['outputs.StaticRouteResponse']] = None,
                 static_routes_config: Optional['outputs.StaticRoutesConfigResponse'] = None):
        """
        List of routes that control routing from VirtualHub into a virtual network connection.
        :param Sequence['SubResourceResponse'] bgp_connections: The list of references to HubBgpConnection objects.
        :param Sequence['StaticRouteResponse'] static_routes: List of all Static Routes.
        :param 'StaticRoutesConfigResponse' static_routes_config: Configuration for static routes on this HubVnetConnection.
        """
        pulumi.set(__self__, "bgp_connections", bgp_connections)
        if static_routes is not None:
            pulumi.set(__self__, "static_routes", static_routes)
        if static_routes_config is not None:
            pulumi.set(__self__, "static_routes_config", static_routes_config)

    @property
    @pulumi.getter(name="bgpConnections")
    def bgp_connections(self) -> Sequence['outputs.SubResourceResponse']:
        """
        The list of references to HubBgpConnection objects.
        """
        return pulumi.get(self, "bgp_connections")

    @property
    @pulumi.getter(name="staticRoutes")
    def static_routes(self) -> Optional[Sequence['outputs.StaticRouteResponse']]:
        """
        List of all Static Routes.
        """
        return pulumi.get(self, "static_routes")

    @property
    @pulumi.getter(name="staticRoutesConfig")
    def static_routes_config(self) -> Optional['outputs.StaticRoutesConfigResponse']:
        """
        Configuration for static routes on this HubVnetConnection.
        """
        return pulumi.get(self, "static_routes_config")


