# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ARecordResponse',
    'AaaaRecordResponse',
    'CaaRecordResponse',
    'CnameRecordResponse',
    'DnsResourceReferenceResponse',
    'MxRecordResponse',
    'NsRecordResponse',
    'PtrRecordResponse',
    'SoaRecordResponse',
    'SrvRecordResponse',
    'SubResourceResponse',
    'TxtRecordResponse',
]

@pulumi.output_type
class ARecordResponse(dict):
    """
    An A record.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ARecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ARecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ARecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None):
        """
        An A record.
        :param str ipv4_address: The IPv4 address of this A record.
        """
        ARecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipv4_address=ipv4_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipv4_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ipv4_address is not None:
            _setter("ipv4_address", ipv4_address)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        The IPv4 address of this A record.
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class AaaaRecordResponse(dict):
    """
    An AAAA record.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Address":
            suggest = "ipv6_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaaRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaaRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaaRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_address: Optional[str] = None):
        """
        An AAAA record.
        :param str ipv6_address: The IPv6 address of this AAAA record.
        """
        AaaaRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipv6_address=ipv6_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipv6_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ipv6_address is not None:
            _setter("ipv6_address", ipv6_address)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        The IPv6 address of this AAAA record.
        """
        return pulumi.get(self, "ipv6_address")


@pulumi.output_type
class CaaRecordResponse(dict):
    """
    A CAA record.
    """
    def __init__(__self__, *,
                 flags: Optional[int] = None,
                 tag: Optional[str] = None,
                 value: Optional[str] = None):
        """
        A CAA record.
        :param int flags: The flags for this CAA record as an integer between 0 and 255.
        :param str tag: The tag for this CAA record.
        :param str value: The value for this CAA record.
        """
        CaaRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            flags=flags,
            tag=tag,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             flags: Optional[int] = None,
             tag: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if flags is not None:
            _setter("flags", flags)
        if tag is not None:
            _setter("tag", tag)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        The flags for this CAA record as an integer between 0 and 255.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        The tag for this CAA record.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value for this CAA record.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CnameRecordResponse(dict):
    """
    A CNAME record.
    """
    def __init__(__self__, *,
                 cname: Optional[str] = None):
        """
        A CNAME record.
        :param str cname: The canonical name for this CNAME record.
        """
        CnameRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cname=cname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cname is not None:
            _setter("cname", cname)

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        """
        The canonical name for this CNAME record.
        """
        return pulumi.get(self, "cname")


@pulumi.output_type
class DnsResourceReferenceResponse(dict):
    """
    Represents a single Azure resource and its referencing DNS records.
    """
    def __init__(__self__, *,
                 dns_resources: Optional[Sequence['outputs.SubResourceResponse']] = None,
                 target_resource: Optional['outputs.SubResourceResponse'] = None):
        """
        Represents a single Azure resource and its referencing DNS records.
        :param Sequence['SubResourceResponse'] dns_resources: A list of dns Records 
        :param 'SubResourceResponse' target_resource: A reference to an azure resource from where the dns resource value is taken.
        """
        DnsResourceReferenceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_resources=dns_resources,
            target_resource=target_resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_resources: Optional[Sequence['outputs.SubResourceResponse']] = None,
             target_resource: Optional['outputs.SubResourceResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dns_resources is not None:
            _setter("dns_resources", dns_resources)
        if target_resource is not None:
            _setter("target_resource", target_resource)

    @property
    @pulumi.getter(name="dnsResources")
    def dns_resources(self) -> Optional[Sequence['outputs.SubResourceResponse']]:
        """
        A list of dns Records 
        """
        return pulumi.get(self, "dns_resources")

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional['outputs.SubResourceResponse']:
        """
        A reference to an azure resource from where the dns resource value is taken.
        """
        return pulumi.get(self, "target_resource")


@pulumi.output_type
class MxRecordResponse(dict):
    """
    An MX record.
    """
    def __init__(__self__, *,
                 exchange: Optional[str] = None,
                 preference: Optional[int] = None):
        """
        An MX record.
        :param str exchange: The domain name of the mail host for this MX record.
        :param int preference: The preference value for this MX record.
        """
        MxRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exchange=exchange,
            preference=preference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exchange: Optional[str] = None,
             preference: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exchange is not None:
            _setter("exchange", exchange)
        if preference is not None:
            _setter("preference", preference)

    @property
    @pulumi.getter
    def exchange(self) -> Optional[str]:
        """
        The domain name of the mail host for this MX record.
        """
        return pulumi.get(self, "exchange")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        The preference value for this MX record.
        """
        return pulumi.get(self, "preference")


@pulumi.output_type
class NsRecordResponse(dict):
    """
    An NS record.
    """
    def __init__(__self__, *,
                 nsdname: Optional[str] = None):
        """
        An NS record.
        :param str nsdname: The name server name for this NS record.
        """
        NsRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nsdname=nsdname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nsdname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if nsdname is not None:
            _setter("nsdname", nsdname)

    @property
    @pulumi.getter
    def nsdname(self) -> Optional[str]:
        """
        The name server name for this NS record.
        """
        return pulumi.get(self, "nsdname")


@pulumi.output_type
class PtrRecordResponse(dict):
    """
    A PTR record.
    """
    def __init__(__self__, *,
                 ptrdname: Optional[str] = None):
        """
        A PTR record.
        :param str ptrdname: The PTR target domain name for this PTR record.
        """
        PtrRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ptrdname=ptrdname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ptrdname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ptrdname is not None:
            _setter("ptrdname", ptrdname)

    @property
    @pulumi.getter
    def ptrdname(self) -> Optional[str]:
        """
        The PTR target domain name for this PTR record.
        """
        return pulumi.get(self, "ptrdname")


@pulumi.output_type
class SoaRecordResponse(dict):
    """
    An SOA record.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"
        elif key == "minimumTtl":
            suggest = "minimum_ttl"
        elif key == "refreshTime":
            suggest = "refresh_time"
        elif key == "retryTime":
            suggest = "retry_time"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoaRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoaRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoaRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 expire_time: Optional[float] = None,
                 host: Optional[str] = None,
                 minimum_ttl: Optional[float] = None,
                 refresh_time: Optional[float] = None,
                 retry_time: Optional[float] = None,
                 serial_number: Optional[float] = None):
        """
        An SOA record.
        :param str email: The email contact for this SOA record.
        :param float expire_time: The expire time for this SOA record.
        :param str host: The domain name of the authoritative name server for this SOA record.
        :param float minimum_ttl: The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
        :param float refresh_time: The refresh value for this SOA record.
        :param float retry_time: The retry time for this SOA record.
        :param float serial_number: The serial number for this SOA record.
        """
        SoaRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            expire_time=expire_time,
            host=host,
            minimum_ttl=minimum_ttl,
            refresh_time=refresh_time,
            retry_time=retry_time,
            serial_number=serial_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: Optional[str] = None,
             expire_time: Optional[float] = None,
             host: Optional[str] = None,
             minimum_ttl: Optional[float] = None,
             refresh_time: Optional[float] = None,
             retry_time: Optional[float] = None,
             serial_number: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email is not None:
            _setter("email", email)
        if expire_time is not None:
            _setter("expire_time", expire_time)
        if host is not None:
            _setter("host", host)
        if minimum_ttl is not None:
            _setter("minimum_ttl", minimum_ttl)
        if refresh_time is not None:
            _setter("refresh_time", refresh_time)
        if retry_time is not None:
            _setter("retry_time", retry_time)
        if serial_number is not None:
            _setter("serial_number", serial_number)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The email contact for this SOA record.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[float]:
        """
        The expire time for this SOA record.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The domain name of the authoritative name server for this SOA record.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> Optional[float]:
        """
        The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
        """
        return pulumi.get(self, "minimum_ttl")

    @property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[float]:
        """
        The refresh value for this SOA record.
        """
        return pulumi.get(self, "refresh_time")

    @property
    @pulumi.getter(name="retryTime")
    def retry_time(self) -> Optional[float]:
        """
        The retry time for this SOA record.
        """
        return pulumi.get(self, "retry_time")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[float]:
        """
        The serial number for this SOA record.
        """
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class SrvRecordResponse(dict):
    """
    An SRV record.
    """
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 priority: Optional[int] = None,
                 target: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        An SRV record.
        :param int port: The port value for this SRV record.
        :param int priority: The priority value for this SRV record.
        :param str target: The target domain name for this SRV record.
        :param int weight: The weight value for this SRV record.
        """
        SrvRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            priority=priority,
            target=target,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: Optional[int] = None,
             priority: Optional[int] = None,
             target: Optional[str] = None,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if port is not None:
            _setter("port", port)
        if priority is not None:
            _setter("priority", priority)
        if target is not None:
            _setter("target", target)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port value for this SRV record.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The priority value for this SRV record.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        The target domain name for this SRV record.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        The weight value for this SRV record.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    A reference to a another resource
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        A reference to a another resource
        :param str id: Resource Id.
        """
        SubResourceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource Id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class TxtRecordResponse(dict):
    """
    A TXT record.
    """
    def __init__(__self__, *,
                 value: Optional[Sequence[str]] = None):
        """
        A TXT record.
        :param Sequence[str] value: The text value of this TXT record.
        """
        TxtRecordResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Sequence[str]]:
        """
        The text value of this TXT record.
        """
        return pulumi.get(self, "value")


