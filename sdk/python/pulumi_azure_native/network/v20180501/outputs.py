# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'DnsResourceReferenceResponse',
    'SubResourceResponse',
]

@pulumi.output_type
class DnsResourceReferenceResponse(dict):
    """
    Represents a single Azure resource and its referencing DNS records.
    """
    def __init__(__self__, *,
                 dns_resources: Optional[Sequence['outputs.SubResourceResponse']] = None,
                 target_resource: Optional['outputs.SubResourceResponse'] = None):
        """
        Represents a single Azure resource and its referencing DNS records.
        :param Sequence['SubResourceResponse'] dns_resources: A list of dns Records 
        :param 'SubResourceResponse' target_resource: A reference to an azure resource from where the dns resource value is taken.
        """
        if dns_resources is not None:
            pulumi.set(__self__, "dns_resources", dns_resources)
        if target_resource is not None:
            pulumi.set(__self__, "target_resource", target_resource)

    @property
    @pulumi.getter(name="dnsResources")
    def dns_resources(self) -> Optional[Sequence['outputs.SubResourceResponse']]:
        """
        A list of dns Records 
        """
        return pulumi.get(self, "dns_resources")

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional['outputs.SubResourceResponse']:
        """
        A reference to an azure resource from where the dns resource value is taken.
        """
        return pulumi.get(self, "target_resource")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    A reference to a another resource
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        A reference to a another resource
        :param str id: Resource Id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource Id.
        """
        return pulumi.get(self, "id")


