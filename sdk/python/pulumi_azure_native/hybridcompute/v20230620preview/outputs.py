# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'EsuKeyResponse',
    'LicenseDetailsResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class EsuKeyResponse(dict):
    """
    ESU key
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseStatus":
            suggest = "license_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EsuKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EsuKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EsuKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_status: Optional[str] = None,
                 sku: Optional[str] = None):
        """
        ESU key
        :param str license_status: The current status of the license profile key.
        :param str sku: SKU number.
        """
        if license_status is not None:
            pulumi.set(__self__, "license_status", license_status)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter(name="licenseStatus")
    def license_status(self) -> Optional[str]:
        """
        The current status of the license profile key.
        """
        return pulumi.get(self, "license_status")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        SKU number.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class LicenseDetailsResponse(dict):
    """
    Describes the properties of a License.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedLicenses":
            suggest = "assigned_licenses"
        elif key == "immutableId":
            suggest = "immutable_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_licenses: int,
                 immutable_id: str,
                 edition: Optional[str] = None,
                 processors: Optional[int] = None,
                 state: Optional[str] = None,
                 target: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Describes the properties of a License.
        :param int assigned_licenses: Describes the number of assigned licenses.
        :param str immutable_id: Describes the immutable id.
        :param str edition: Describes the edition of the license. The values are either Standard or Datacenter.
        :param int processors: Describes the number of processors.
        :param str state: Describes the state of the license.
        :param str target: Describes the license target server.
        :param str type: Describes the license core type (pCore or vCore).
        """
        pulumi.set(__self__, "assigned_licenses", assigned_licenses)
        pulumi.set(__self__, "immutable_id", immutable_id)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assignedLicenses")
    def assigned_licenses(self) -> int:
        """
        Describes the number of assigned licenses.
        """
        return pulumi.get(self, "assigned_licenses")

    @property
    @pulumi.getter(name="immutableId")
    def immutable_id(self) -> str:
        """
        Describes the immutable id.
        """
        return pulumi.get(self, "immutable_id")

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        """
        Describes the edition of the license. The values are either Standard or Datacenter.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def processors(self) -> Optional[int]:
        """
        Describes the number of processors.
        """
        return pulumi.get(self, "processors")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Describes the state of the license.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Describes the license target server.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Describes the license core type (pCore or vCore).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


