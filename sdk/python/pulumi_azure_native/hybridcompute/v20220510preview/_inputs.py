# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'IdentityArgs',
    'IdentityArgsDict',
    'LocationDataArgs',
    'LocationDataArgsDict',
    'MachinePropertiesArgs',
    'MachinePropertiesArgsDict',
    'OSProfileLinuxConfigurationArgs',
    'OSProfileLinuxConfigurationArgsDict',
    'OSProfileWindowsConfigurationArgs',
    'OSProfileWindowsConfigurationArgsDict',
    'OSProfileArgs',
    'OSProfileArgsDict',
    'ServiceStatusesArgs',
    'ServiceStatusesArgsDict',
    'ServiceStatusArgs',
    'ServiceStatusArgsDict',
]

MYPY = False

if not MYPY:
    class IdentityArgsDict(TypedDict):
        """
        Identity for the resource.
        """
        type: NotRequired[pulumi.Input['ResourceIdentityType']]
        """
        The identity type.
        """
elif False:
    IdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None):
        """
        Identity for the resource.
        :param pulumi.Input['ResourceIdentityType'] type: The identity type.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ResourceIdentityType']]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ResourceIdentityType']]):
        pulumi.set(self, "type", value)


if not MYPY:
    class LocationDataArgsDict(TypedDict):
        """
        Metadata pertaining to the geographic location of the resource.
        """
        name: pulumi.Input[str]
        """
        A canonical name for the geographic or physical location.
        """
        city: NotRequired[pulumi.Input[str]]
        """
        The city or locality where the resource is located.
        """
        country_or_region: NotRequired[pulumi.Input[str]]
        """
        The country or region where the resource is located
        """
        district: NotRequired[pulumi.Input[str]]
        """
        The district, state, or province where the resource is located.
        """
elif False:
    LocationDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LocationDataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 city: Optional[pulumi.Input[str]] = None,
                 country_or_region: Optional[pulumi.Input[str]] = None,
                 district: Optional[pulumi.Input[str]] = None):
        """
        Metadata pertaining to the geographic location of the resource.
        :param pulumi.Input[str] name: A canonical name for the geographic or physical location.
        :param pulumi.Input[str] city: The city or locality where the resource is located.
        :param pulumi.Input[str] country_or_region: The country or region where the resource is located
        :param pulumi.Input[str] district: The district, state, or province where the resource is located.
        """
        pulumi.set(__self__, "name", name)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country_or_region is not None:
            pulumi.set(__self__, "country_or_region", country_or_region)
        if district is not None:
            pulumi.set(__self__, "district", district)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A canonical name for the geographic or physical location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        The city or locality where the resource is located.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryOrRegion")
    def country_or_region(self) -> Optional[pulumi.Input[str]]:
        """
        The country or region where the resource is located
        """
        return pulumi.get(self, "country_or_region")

    @country_or_region.setter
    def country_or_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_or_region", value)

    @property
    @pulumi.getter
    def district(self) -> Optional[pulumi.Input[str]]:
        """
        The district, state, or province where the resource is located.
        """
        return pulumi.get(self, "district")

    @district.setter
    def district(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "district", value)


if not MYPY:
    class MachinePropertiesArgsDict(TypedDict):
        """
        Describes the properties of a hybrid machine.
        """
        client_public_key: NotRequired[pulumi.Input[str]]
        """
        Public Key that the client provides to be used during initial resource onboarding
        """
        location_data: NotRequired[pulumi.Input['LocationDataArgsDict']]
        """
        Metadata pertaining to the geographic location of the resource.
        """
        mssql_discovered: NotRequired[pulumi.Input[str]]
        """
        Specifies whether any MS SQL instance is discovered on the machine.
        """
        os_profile: NotRequired[pulumi.Input['OSProfileArgsDict']]
        """
        Specifies the operating system settings for the hybrid machine.
        """
        os_type: NotRequired[pulumi.Input[str]]
        """
        The type of Operating System (windows/linux).
        """
        parent_cluster_resource_id: NotRequired[pulumi.Input[str]]
        """
        The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        """
        private_link_scope_resource_id: NotRequired[pulumi.Input[str]]
        """
        The resource id of the private link scope this machine is assigned to, if any.
        """
        service_statuses: NotRequired[pulumi.Input['ServiceStatusesArgsDict']]
        """
        Statuses of dependent services that are reported back to ARM.
        """
        vm_id: NotRequired[pulumi.Input[str]]
        """
        Specifies the hybrid machine unique ID.
        """
elif False:
    MachinePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MachinePropertiesArgs:
    def __init__(__self__, *,
                 client_public_key: Optional[pulumi.Input[str]] = None,
                 location_data: Optional[pulumi.Input['LocationDataArgs']] = None,
                 mssql_discovered: Optional[pulumi.Input[str]] = None,
                 os_profile: Optional[pulumi.Input['OSProfileArgs']] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 parent_cluster_resource_id: Optional[pulumi.Input[str]] = None,
                 private_link_scope_resource_id: Optional[pulumi.Input[str]] = None,
                 service_statuses: Optional[pulumi.Input['ServiceStatusesArgs']] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        """
        Describes the properties of a hybrid machine.
        :param pulumi.Input[str] client_public_key: Public Key that the client provides to be used during initial resource onboarding
        :param pulumi.Input['LocationDataArgs'] location_data: Metadata pertaining to the geographic location of the resource.
        :param pulumi.Input[str] mssql_discovered: Specifies whether any MS SQL instance is discovered on the machine.
        :param pulumi.Input['OSProfileArgs'] os_profile: Specifies the operating system settings for the hybrid machine.
        :param pulumi.Input[str] os_type: The type of Operating System (windows/linux).
        :param pulumi.Input[str] parent_cluster_resource_id: The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        :param pulumi.Input[str] private_link_scope_resource_id: The resource id of the private link scope this machine is assigned to, if any.
        :param pulumi.Input['ServiceStatusesArgs'] service_statuses: Statuses of dependent services that are reported back to ARM.
        :param pulumi.Input[str] vm_id: Specifies the hybrid machine unique ID.
        """
        if client_public_key is not None:
            pulumi.set(__self__, "client_public_key", client_public_key)
        if location_data is not None:
            pulumi.set(__self__, "location_data", location_data)
        if mssql_discovered is not None:
            pulumi.set(__self__, "mssql_discovered", mssql_discovered)
        if os_profile is not None:
            pulumi.set(__self__, "os_profile", os_profile)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if parent_cluster_resource_id is not None:
            pulumi.set(__self__, "parent_cluster_resource_id", parent_cluster_resource_id)
        if private_link_scope_resource_id is not None:
            pulumi.set(__self__, "private_link_scope_resource_id", private_link_scope_resource_id)
        if service_statuses is not None:
            pulumi.set(__self__, "service_statuses", service_statuses)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="clientPublicKey")
    def client_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public Key that the client provides to be used during initial resource onboarding
        """
        return pulumi.get(self, "client_public_key")

    @client_public_key.setter
    def client_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_public_key", value)

    @property
    @pulumi.getter(name="locationData")
    def location_data(self) -> Optional[pulumi.Input['LocationDataArgs']]:
        """
        Metadata pertaining to the geographic location of the resource.
        """
        return pulumi.get(self, "location_data")

    @location_data.setter
    def location_data(self, value: Optional[pulumi.Input['LocationDataArgs']]):
        pulumi.set(self, "location_data", value)

    @property
    @pulumi.getter(name="mssqlDiscovered")
    def mssql_discovered(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether any MS SQL instance is discovered on the machine.
        """
        return pulumi.get(self, "mssql_discovered")

    @mssql_discovered.setter
    def mssql_discovered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mssql_discovered", value)

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional[pulumi.Input['OSProfileArgs']]:
        """
        Specifies the operating system settings for the hybrid machine.
        """
        return pulumi.get(self, "os_profile")

    @os_profile.setter
    def os_profile(self, value: Optional[pulumi.Input['OSProfileArgs']]):
        pulumi.set(self, "os_profile", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of Operating System (windows/linux).
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="parentClusterResourceId")
    def parent_cluster_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        """
        return pulumi.get(self, "parent_cluster_resource_id")

    @parent_cluster_resource_id.setter
    def parent_cluster_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_cluster_resource_id", value)

    @property
    @pulumi.getter(name="privateLinkScopeResourceId")
    def private_link_scope_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the private link scope this machine is assigned to, if any.
        """
        return pulumi.get(self, "private_link_scope_resource_id")

    @private_link_scope_resource_id.setter
    def private_link_scope_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_scope_resource_id", value)

    @property
    @pulumi.getter(name="serviceStatuses")
    def service_statuses(self) -> Optional[pulumi.Input['ServiceStatusesArgs']]:
        """
        Statuses of dependent services that are reported back to ARM.
        """
        return pulumi.get(self, "service_statuses")

    @service_statuses.setter
    def service_statuses(self, value: Optional[pulumi.Input['ServiceStatusesArgs']]):
        pulumi.set(self, "service_statuses", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the hybrid machine unique ID.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


if not MYPY:
    class OSProfileLinuxConfigurationArgsDict(TypedDict):
        """
        Specifies the linux configuration for update management.
        """
        assessment_mode: NotRequired[pulumi.Input[Union[str, 'AssessmentModeTypes']]]
        """
        Specifies the assessment mode.
        """
        patch_mode: NotRequired[pulumi.Input[Union[str, 'PatchModeTypes']]]
        """
        Specifies the patch mode.
        """
elif False:
    OSProfileLinuxConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSProfileLinuxConfigurationArgs:
    def __init__(__self__, *,
                 assessment_mode: Optional[pulumi.Input[Union[str, 'AssessmentModeTypes']]] = None,
                 patch_mode: Optional[pulumi.Input[Union[str, 'PatchModeTypes']]] = None):
        """
        Specifies the linux configuration for update management.
        :param pulumi.Input[Union[str, 'AssessmentModeTypes']] assessment_mode: Specifies the assessment mode.
        :param pulumi.Input[Union[str, 'PatchModeTypes']] patch_mode: Specifies the patch mode.
        """
        if assessment_mode is not None:
            pulumi.set(__self__, "assessment_mode", assessment_mode)
        if patch_mode is not None:
            pulumi.set(__self__, "patch_mode", patch_mode)

    @property
    @pulumi.getter(name="assessmentMode")
    def assessment_mode(self) -> Optional[pulumi.Input[Union[str, 'AssessmentModeTypes']]]:
        """
        Specifies the assessment mode.
        """
        return pulumi.get(self, "assessment_mode")

    @assessment_mode.setter
    def assessment_mode(self, value: Optional[pulumi.Input[Union[str, 'AssessmentModeTypes']]]):
        pulumi.set(self, "assessment_mode", value)

    @property
    @pulumi.getter(name="patchMode")
    def patch_mode(self) -> Optional[pulumi.Input[Union[str, 'PatchModeTypes']]]:
        """
        Specifies the patch mode.
        """
        return pulumi.get(self, "patch_mode")

    @patch_mode.setter
    def patch_mode(self, value: Optional[pulumi.Input[Union[str, 'PatchModeTypes']]]):
        pulumi.set(self, "patch_mode", value)


if not MYPY:
    class OSProfileWindowsConfigurationArgsDict(TypedDict):
        """
        Specifies the windows configuration for update management.
        """
        assessment_mode: NotRequired[pulumi.Input[Union[str, 'AssessmentModeTypes']]]
        """
        Specifies the assessment mode.
        """
        patch_mode: NotRequired[pulumi.Input[Union[str, 'PatchModeTypes']]]
        """
        Specifies the patch mode.
        """
elif False:
    OSProfileWindowsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSProfileWindowsConfigurationArgs:
    def __init__(__self__, *,
                 assessment_mode: Optional[pulumi.Input[Union[str, 'AssessmentModeTypes']]] = None,
                 patch_mode: Optional[pulumi.Input[Union[str, 'PatchModeTypes']]] = None):
        """
        Specifies the windows configuration for update management.
        :param pulumi.Input[Union[str, 'AssessmentModeTypes']] assessment_mode: Specifies the assessment mode.
        :param pulumi.Input[Union[str, 'PatchModeTypes']] patch_mode: Specifies the patch mode.
        """
        if assessment_mode is not None:
            pulumi.set(__self__, "assessment_mode", assessment_mode)
        if patch_mode is not None:
            pulumi.set(__self__, "patch_mode", patch_mode)

    @property
    @pulumi.getter(name="assessmentMode")
    def assessment_mode(self) -> Optional[pulumi.Input[Union[str, 'AssessmentModeTypes']]]:
        """
        Specifies the assessment mode.
        """
        return pulumi.get(self, "assessment_mode")

    @assessment_mode.setter
    def assessment_mode(self, value: Optional[pulumi.Input[Union[str, 'AssessmentModeTypes']]]):
        pulumi.set(self, "assessment_mode", value)

    @property
    @pulumi.getter(name="patchMode")
    def patch_mode(self) -> Optional[pulumi.Input[Union[str, 'PatchModeTypes']]]:
        """
        Specifies the patch mode.
        """
        return pulumi.get(self, "patch_mode")

    @patch_mode.setter
    def patch_mode(self, value: Optional[pulumi.Input[Union[str, 'PatchModeTypes']]]):
        pulumi.set(self, "patch_mode", value)


if not MYPY:
    class OSProfileArgsDict(TypedDict):
        """
        Specifies the operating system settings for the hybrid machine.
        """
        linux_configuration: NotRequired[pulumi.Input['OSProfileLinuxConfigurationArgsDict']]
        """
        Specifies the linux configuration for update management.
        """
        windows_configuration: NotRequired[pulumi.Input['OSProfileWindowsConfigurationArgsDict']]
        """
        Specifies the windows configuration for update management.
        """
elif False:
    OSProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSProfileArgs:
    def __init__(__self__, *,
                 linux_configuration: Optional[pulumi.Input['OSProfileLinuxConfigurationArgs']] = None,
                 windows_configuration: Optional[pulumi.Input['OSProfileWindowsConfigurationArgs']] = None):
        """
        Specifies the operating system settings for the hybrid machine.
        :param pulumi.Input['OSProfileLinuxConfigurationArgs'] linux_configuration: Specifies the linux configuration for update management.
        :param pulumi.Input['OSProfileWindowsConfigurationArgs'] windows_configuration: Specifies the windows configuration for update management.
        """
        if linux_configuration is not None:
            pulumi.set(__self__, "linux_configuration", linux_configuration)
        if windows_configuration is not None:
            pulumi.set(__self__, "windows_configuration", windows_configuration)

    @property
    @pulumi.getter(name="linuxConfiguration")
    def linux_configuration(self) -> Optional[pulumi.Input['OSProfileLinuxConfigurationArgs']]:
        """
        Specifies the linux configuration for update management.
        """
        return pulumi.get(self, "linux_configuration")

    @linux_configuration.setter
    def linux_configuration(self, value: Optional[pulumi.Input['OSProfileLinuxConfigurationArgs']]):
        pulumi.set(self, "linux_configuration", value)

    @property
    @pulumi.getter(name="windowsConfiguration")
    def windows_configuration(self) -> Optional[pulumi.Input['OSProfileWindowsConfigurationArgs']]:
        """
        Specifies the windows configuration for update management.
        """
        return pulumi.get(self, "windows_configuration")

    @windows_configuration.setter
    def windows_configuration(self, value: Optional[pulumi.Input['OSProfileWindowsConfigurationArgs']]):
        pulumi.set(self, "windows_configuration", value)


if not MYPY:
    class ServiceStatusesArgsDict(TypedDict):
        """
        Reports the state and behavior of dependent services.
        """
        extension_service: NotRequired[pulumi.Input['ServiceStatusArgsDict']]
        """
        The state of the extension service on the Arc-enabled machine.
        """
        guest_configuration_service: NotRequired[pulumi.Input['ServiceStatusArgsDict']]
        """
        The state of the guest configuration service on the Arc-enabled machine.
        """
elif False:
    ServiceStatusesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceStatusesArgs:
    def __init__(__self__, *,
                 extension_service: Optional[pulumi.Input['ServiceStatusArgs']] = None,
                 guest_configuration_service: Optional[pulumi.Input['ServiceStatusArgs']] = None):
        """
        Reports the state and behavior of dependent services.
        :param pulumi.Input['ServiceStatusArgs'] extension_service: The state of the extension service on the Arc-enabled machine.
        :param pulumi.Input['ServiceStatusArgs'] guest_configuration_service: The state of the guest configuration service on the Arc-enabled machine.
        """
        if extension_service is not None:
            pulumi.set(__self__, "extension_service", extension_service)
        if guest_configuration_service is not None:
            pulumi.set(__self__, "guest_configuration_service", guest_configuration_service)

    @property
    @pulumi.getter(name="extensionService")
    def extension_service(self) -> Optional[pulumi.Input['ServiceStatusArgs']]:
        """
        The state of the extension service on the Arc-enabled machine.
        """
        return pulumi.get(self, "extension_service")

    @extension_service.setter
    def extension_service(self, value: Optional[pulumi.Input['ServiceStatusArgs']]):
        pulumi.set(self, "extension_service", value)

    @property
    @pulumi.getter(name="guestConfigurationService")
    def guest_configuration_service(self) -> Optional[pulumi.Input['ServiceStatusArgs']]:
        """
        The state of the guest configuration service on the Arc-enabled machine.
        """
        return pulumi.get(self, "guest_configuration_service")

    @guest_configuration_service.setter
    def guest_configuration_service(self, value: Optional[pulumi.Input['ServiceStatusArgs']]):
        pulumi.set(self, "guest_configuration_service", value)


if not MYPY:
    class ServiceStatusArgsDict(TypedDict):
        """
        Describes the status and behavior of a service.
        """
        startup_type: NotRequired[pulumi.Input[str]]
        """
        The behavior of the service when the Arc-enabled machine starts up.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        The current status of the service.
        """
elif False:
    ServiceStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceStatusArgs:
    def __init__(__self__, *,
                 startup_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Describes the status and behavior of a service.
        :param pulumi.Input[str] startup_type: The behavior of the service when the Arc-enabled machine starts up.
        :param pulumi.Input[str] status: The current status of the service.
        """
        if startup_type is not None:
            pulumi.set(__self__, "startup_type", startup_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="startupType")
    def startup_type(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior of the service when the Arc-enabled machine starts up.
        """
        return pulumi.get(self, "startup_type")

    @startup_type.setter
    def startup_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The current status of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


