# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ApiBridgePropertiesArgs',
    'CustomSipHeadersPropertiesArgs',
    'CustomSipHeaderArgs',
    'DnsDelegationPropertiesArgs',
    'DnsDelegationsPropertiesArgs',
    'ManagedServiceIdentityArgs',
    'PrimaryRegionPropertiesArgs',
    'ServiceRegionPropertiesArgs',
    'SkuArgs',
]

@pulumi.input_type
class ApiBridgePropertiesArgs:
    def __init__(__self__, *,
                 allowed_address_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 configure_api_bridge: Optional[pulumi.Input[Union[str, 'ApiBridgeActivationState']]] = None):
        """
        Configuration of the API Bridge.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_address_prefixes: The allowed source IP addresses or CIDR ranges for accessing the API Bridge
        :param pulumi.Input[Union[str, 'ApiBridgeActivationState']] configure_api_bridge: The activation state of the API Bridge for this Communications Gateway
        """
        if allowed_address_prefixes is not None:
            pulumi.set(__self__, "allowed_address_prefixes", allowed_address_prefixes)
        if configure_api_bridge is None:
            configure_api_bridge = 'disabled'
        if configure_api_bridge is not None:
            pulumi.set(__self__, "configure_api_bridge", configure_api_bridge)

    @property
    @pulumi.getter(name="allowedAddressPrefixes")
    def allowed_address_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The allowed source IP addresses or CIDR ranges for accessing the API Bridge
        """
        return pulumi.get(self, "allowed_address_prefixes")

    @allowed_address_prefixes.setter
    def allowed_address_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_address_prefixes", value)

    @property
    @pulumi.getter(name="configureApiBridge")
    def configure_api_bridge(self) -> Optional[pulumi.Input[Union[str, 'ApiBridgeActivationState']]]:
        """
        The activation state of the API Bridge for this Communications Gateway
        """
        return pulumi.get(self, "configure_api_bridge")

    @configure_api_bridge.setter
    def configure_api_bridge(self, value: Optional[pulumi.Input[Union[str, 'ApiBridgeActivationState']]]):
        pulumi.set(self, "configure_api_bridge", value)


@pulumi.input_type
class CustomSipHeadersPropertiesArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CustomSipHeaderArgs']]]] = None):
        """
        Properties of Custom SIP Headers.
        :param pulumi.Input[Sequence[pulumi.Input['CustomSipHeaderArgs']]] headers: The Custom SIP Headers to apply to the calls which traverse the Communications Gateway
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomSipHeaderArgs']]]]:
        """
        The Custom SIP Headers to apply to the calls which traverse the Communications Gateway
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomSipHeaderArgs']]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class CustomSipHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Details of a Custom SIP Header.
        :param pulumi.Input[str] name: The name of the Custom SIP Header
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Custom SIP Header
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DnsDelegationPropertiesArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        """
        Details of a DNS Domain delegated to the Communications Gateway.
        :param pulumi.Input[str] domain: Domain name to delegate
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name to delegate
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class DnsDelegationsPropertiesArgs:
    def __init__(__self__, *,
                 delegations: Optional[pulumi.Input[Sequence[pulumi.Input['DnsDelegationPropertiesArgs']]]] = None):
        """
        Details of DNS Domains delegated to the Communications Gateway.
        :param pulumi.Input[Sequence[pulumi.Input['DnsDelegationPropertiesArgs']]] delegations: DNS Domains to delegate for the creation of DNS Zones by the Azure Communications Gateway
        """
        if delegations is not None:
            pulumi.set(__self__, "delegations", delegations)

    @property
    @pulumi.getter
    def delegations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsDelegationPropertiesArgs']]]]:
        """
        DNS Domains to delegate for the creation of DNS Zones by the Azure Communications Gateway
        """
        return pulumi.get(self, "delegations")

    @delegations.setter
    def delegations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsDelegationPropertiesArgs']]]]):
        pulumi.set(self, "delegations", value)


@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class PrimaryRegionPropertiesArgs:
    def __init__(__self__, *,
                 operator_addresses: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_media_source_address_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_signaling_source_address_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 esrp_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The configuration used in this region as primary, and other regions as backup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] operator_addresses: IP address to use to contact the operator network from this region
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_media_source_address_prefixes: The allowed source IP addresses or CIDR ranges for media
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_signaling_source_address_prefixes: The allowed source IP addresses or CIDR ranges for signaling
        :param pulumi.Input[Sequence[pulumi.Input[str]]] esrp_addresses: IP address to use to contact the ESRP from this region
        """
        pulumi.set(__self__, "operator_addresses", operator_addresses)
        if allowed_media_source_address_prefixes is not None:
            pulumi.set(__self__, "allowed_media_source_address_prefixes", allowed_media_source_address_prefixes)
        if allowed_signaling_source_address_prefixes is not None:
            pulumi.set(__self__, "allowed_signaling_source_address_prefixes", allowed_signaling_source_address_prefixes)
        if esrp_addresses is not None:
            pulumi.set(__self__, "esrp_addresses", esrp_addresses)

    @property
    @pulumi.getter(name="operatorAddresses")
    def operator_addresses(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        IP address to use to contact the operator network from this region
        """
        return pulumi.get(self, "operator_addresses")

    @operator_addresses.setter
    def operator_addresses(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "operator_addresses", value)

    @property
    @pulumi.getter(name="allowedMediaSourceAddressPrefixes")
    def allowed_media_source_address_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The allowed source IP addresses or CIDR ranges for media
        """
        return pulumi.get(self, "allowed_media_source_address_prefixes")

    @allowed_media_source_address_prefixes.setter
    def allowed_media_source_address_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_media_source_address_prefixes", value)

    @property
    @pulumi.getter(name="allowedSignalingSourceAddressPrefixes")
    def allowed_signaling_source_address_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The allowed source IP addresses or CIDR ranges for signaling
        """
        return pulumi.get(self, "allowed_signaling_source_address_prefixes")

    @allowed_signaling_source_address_prefixes.setter
    def allowed_signaling_source_address_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_signaling_source_address_prefixes", value)

    @property
    @pulumi.getter(name="esrpAddresses")
    def esrp_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP address to use to contact the ESRP from this region
        """
        return pulumi.get(self, "esrp_addresses")

    @esrp_addresses.setter
    def esrp_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "esrp_addresses", value)


@pulumi.input_type
class ServiceRegionPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_region_properties: pulumi.Input['PrimaryRegionPropertiesArgs']):
        """
        The service region configuration needed for Teams Callings.
        :param pulumi.Input[str] name: The name of the region in which the resources needed for Teams Calling will be deployed.
        :param pulumi.Input['PrimaryRegionPropertiesArgs'] primary_region_properties: The configuration used in this region as primary, and other regions as backup.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_region_properties", primary_region_properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the region in which the resources needed for Teams Calling will be deployed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryRegionProperties")
    def primary_region_properties(self) -> pulumi.Input['PrimaryRegionPropertiesArgs']:
        """
        The configuration used in this region as primary, and other regions as backup.
        """
        return pulumi.get(self, "primary_region_properties")

    @primary_region_properties.setter
    def primary_region_properties(self, value: pulumi.Input['PrimaryRegionPropertiesArgs']):
        pulumi.set(self, "primary_region_properties", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        The resource model definition representing SKU
        :param pulumi.Input[str] name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param pulumi.Input[int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


