# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'RetentionPolicyDetailsArgs',
    'RetentionPolicyDetailsArgsDict',
    'RetentionPolicyPropertiesArgs',
    'RetentionPolicyPropertiesArgsDict',
    'SchedulerPropertiesArgs',
    'SchedulerPropertiesArgsDict',
    'SchedulerSkuArgs',
    'SchedulerSkuArgsDict',
]

MYPY = False

if not MYPY:
    class RetentionPolicyDetailsArgsDict(TypedDict):
        """
        The properties of a retention policy
        """
        retention_period_in_days: pulumi.Input[builtins.int]
        """
        The retention period in days after which the orchestration will be purged automatically
        """
        orchestration_state: NotRequired[pulumi.Input[Union[builtins.str, 'PurgeableOrchestrationState']]]
        """
        The orchestration state to which this policy applies. If omitted, the policy applies to all purgeable orchestration states.
        """
elif False:
    RetentionPolicyDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RetentionPolicyDetailsArgs:
    def __init__(__self__, *,
                 retention_period_in_days: pulumi.Input[builtins.int],
                 orchestration_state: Optional[pulumi.Input[Union[builtins.str, 'PurgeableOrchestrationState']]] = None):
        """
        The properties of a retention policy
        :param pulumi.Input[builtins.int] retention_period_in_days: The retention period in days after which the orchestration will be purged automatically
        :param pulumi.Input[Union[builtins.str, 'PurgeableOrchestrationState']] orchestration_state: The orchestration state to which this policy applies. If omitted, the policy applies to all purgeable orchestration states.
        """
        pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)
        if orchestration_state is not None:
            pulumi.set(__self__, "orchestration_state", orchestration_state)

    @property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> pulumi.Input[builtins.int]:
        """
        The retention period in days after which the orchestration will be purged automatically
        """
        return pulumi.get(self, "retention_period_in_days")

    @retention_period_in_days.setter
    def retention_period_in_days(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "retention_period_in_days", value)

    @property
    @pulumi.getter(name="orchestrationState")
    def orchestration_state(self) -> Optional[pulumi.Input[Union[builtins.str, 'PurgeableOrchestrationState']]]:
        """
        The orchestration state to which this policy applies. If omitted, the policy applies to all purgeable orchestration states.
        """
        return pulumi.get(self, "orchestration_state")

    @orchestration_state.setter
    def orchestration_state(self, value: Optional[pulumi.Input[Union[builtins.str, 'PurgeableOrchestrationState']]]):
        pulumi.set(self, "orchestration_state", value)


if not MYPY:
    class RetentionPolicyPropertiesArgsDict(TypedDict):
        """
        The retention policy settings for the resource
        """
        retention_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['RetentionPolicyDetailsArgsDict']]]]
        """
        The orchestration retention policies
        """
elif False:
    RetentionPolicyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RetentionPolicyPropertiesArgs:
    def __init__(__self__, *,
                 retention_policies: Optional[pulumi.Input[Sequence[pulumi.Input['RetentionPolicyDetailsArgs']]]] = None):
        """
        The retention policy settings for the resource
        :param pulumi.Input[Sequence[pulumi.Input['RetentionPolicyDetailsArgs']]] retention_policies: The orchestration retention policies
        """
        if retention_policies is not None:
            pulumi.set(__self__, "retention_policies", retention_policies)

    @property
    @pulumi.getter(name="retentionPolicies")
    def retention_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RetentionPolicyDetailsArgs']]]]:
        """
        The orchestration retention policies
        """
        return pulumi.get(self, "retention_policies")

    @retention_policies.setter
    def retention_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RetentionPolicyDetailsArgs']]]]):
        pulumi.set(self, "retention_policies", value)


if not MYPY:
    class SchedulerPropertiesArgsDict(TypedDict):
        """
        Details of the Scheduler
        """
        ip_allowlist: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR
        """
        sku: pulumi.Input['SchedulerSkuArgsDict']
        """
        SKU of the durable task scheduler
        """
elif False:
    SchedulerPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchedulerPropertiesArgs:
    def __init__(__self__, *,
                 ip_allowlist: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 sku: pulumi.Input['SchedulerSkuArgs']):
        """
        Details of the Scheduler
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ip_allowlist: IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR
        :param pulumi.Input['SchedulerSkuArgs'] sku: SKU of the durable task scheduler
        """
        pulumi.set(__self__, "ip_allowlist", ip_allowlist)
        pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR
        """
        return pulumi.get(self, "ip_allowlist")

    @ip_allowlist.setter
    def ip_allowlist(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ip_allowlist", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input['SchedulerSkuArgs']:
        """
        SKU of the durable task scheduler
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input['SchedulerSkuArgs']):
        pulumi.set(self, "sku", value)


if not MYPY:
    class SchedulerSkuArgsDict(TypedDict):
        """
        The SKU (Stock Keeping Unit) assigned to this durable task scheduler
        """
        name: pulumi.Input[builtins.str]
        """
        The name of the SKU
        """
        capacity: NotRequired[pulumi.Input[builtins.int]]
        """
        The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy
        """
elif False:
    SchedulerSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchedulerSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 capacity: Optional[pulumi.Input[builtins.int]] = None):
        """
        The SKU (Stock Keeping Unit) assigned to this durable task scheduler
        :param pulumi.Input[builtins.str] name: The name of the SKU
        :param pulumi.Input[builtins.int] capacity: The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the SKU
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "capacity", value)


