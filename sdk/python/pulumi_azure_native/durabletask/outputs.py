# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'RetentionPolicyDetailsResponse',
    'RetentionPolicyPropertiesResponse',
    'SchedulerPropertiesResponse',
    'SchedulerSkuResponse',
    'SystemDataResponse',
    'TaskHubPropertiesResponse',
]

@pulumi.output_type
class RetentionPolicyDetailsResponse(dict):
    """
    The properties of a retention policy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPeriodInDays":
            suggest = "retention_period_in_days"
        elif key == "orchestrationState":
            suggest = "orchestration_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetentionPolicyDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetentionPolicyDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetentionPolicyDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_period_in_days: builtins.int,
                 orchestration_state: Optional[builtins.str] = None):
        """
        The properties of a retention policy
        :param builtins.int retention_period_in_days: The retention period in days after which the orchestration will be purged automatically
        :param builtins.str orchestration_state: The orchestration state to which this policy applies. If omitted, the policy applies to all purgeable orchestration states.
        """
        pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)
        if orchestration_state is not None:
            pulumi.set(__self__, "orchestration_state", orchestration_state)

    @property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> builtins.int:
        """
        The retention period in days after which the orchestration will be purged automatically
        """
        return pulumi.get(self, "retention_period_in_days")

    @property
    @pulumi.getter(name="orchestrationState")
    def orchestration_state(self) -> Optional[builtins.str]:
        """
        The orchestration state to which this policy applies. If omitted, the policy applies to all purgeable orchestration states.
        """
        return pulumi.get(self, "orchestration_state")


@pulumi.output_type
class RetentionPolicyPropertiesResponse(dict):
    """
    The retention policy settings for the resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "retentionPolicies":
            suggest = "retention_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetentionPolicyPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetentionPolicyPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetentionPolicyPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 retention_policies: Optional[Sequence['outputs.RetentionPolicyDetailsResponse']] = None):
        """
        The retention policy settings for the resource
        :param builtins.str provisioning_state: The status of the last operation
        :param Sequence['RetentionPolicyDetailsResponse'] retention_policies: The orchestration retention policies
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if retention_policies is not None:
            pulumi.set(__self__, "retention_policies", retention_policies)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The status of the last operation
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="retentionPolicies")
    def retention_policies(self) -> Optional[Sequence['outputs.RetentionPolicyDetailsResponse']]:
        """
        The orchestration retention policies
        """
        return pulumi.get(self, "retention_policies")


@pulumi.output_type
class SchedulerPropertiesResponse(dict):
    """
    Details of the Scheduler
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAllowlist":
            suggest = "ip_allowlist"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: builtins.str,
                 ip_allowlist: Sequence[builtins.str],
                 provisioning_state: builtins.str,
                 sku: 'outputs.SchedulerSkuResponse'):
        """
        Details of the Scheduler
        :param builtins.str endpoint: URL of the durable task scheduler
        :param Sequence[builtins.str] ip_allowlist: IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR
        :param builtins.str provisioning_state: The status of the last operation
        :param 'SchedulerSkuResponse' sku: SKU of the durable task scheduler
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "ip_allowlist", ip_allowlist)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        URL of the durable task scheduler
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> Sequence[builtins.str]:
        """
        IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR
        """
        return pulumi.get(self, "ip_allowlist")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The status of the last operation
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def sku(self) -> 'outputs.SchedulerSkuResponse':
        """
        SKU of the durable task scheduler
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class SchedulerSkuResponse(dict):
    """
    The SKU (Stock Keeping Unit) assigned to this durable task scheduler
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redundancyState":
            suggest = "redundancy_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerSkuResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerSkuResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerSkuResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 redundancy_state: builtins.str,
                 capacity: Optional[builtins.int] = None):
        """
        The SKU (Stock Keeping Unit) assigned to this durable task scheduler
        :param builtins.str name: The name of the SKU
        :param builtins.str redundancy_state: Indicates whether the current SKU configuration is zone redundant
        :param builtins.int capacity: The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancy_state", redundancy_state)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the SKU
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redundancyState")
    def redundancy_state(self) -> builtins.str:
        """
        Indicates whether the current SKU configuration is zone redundant
        """
        return pulumi.get(self, "redundancy_state")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[builtins.int]:
        """
        The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy
        """
        return pulumi.get(self, "capacity")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TaskHubPropertiesResponse(dict):
    """
    The properties of Task Hub
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dashboardUrl":
            suggest = "dashboard_url"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskHubPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskHubPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskHubPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dashboard_url: builtins.str,
                 provisioning_state: builtins.str):
        """
        The properties of Task Hub
        :param builtins.str dashboard_url: URL of the durable task scheduler dashboard
        :param builtins.str provisioning_state: The status of the last operation
        """
        pulumi.set(__self__, "dashboard_url", dashboard_url)
        pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> builtins.str:
        """
        URL of the durable task scheduler dashboard
        """
        return pulumi.get(self, "dashboard_url")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The status of the last operation
        """
        return pulumi.get(self, "provisioning_state")


