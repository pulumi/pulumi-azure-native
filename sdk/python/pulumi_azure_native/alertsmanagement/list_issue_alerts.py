# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ListIssueAlertsResult',
    'AwaitableListIssueAlertsResult',
    'list_issue_alerts',
    'list_issue_alerts_output',
]

@pulumi.output_type
class ListIssueAlertsResult:
    """
    Paged collection of RelatedAlert items
    """
    def __init__(__self__, next_link=None, value=None):
        if next_link and not isinstance(next_link, str):
            raise TypeError("Expected argument 'next_link' to be a str")
        pulumi.set(__self__, "next_link", next_link)
        if value and not isinstance(value, list):
            raise TypeError("Expected argument 'value' to be a list")
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="nextLink")
    def next_link(self) -> Optional[builtins.str]:
        """
        The link to the next page of items
        """
        return pulumi.get(self, "next_link")

    @property
    @pulumi.getter
    def value(self) -> Sequence['outputs.RelatedAlertResponse']:
        """
        The RelatedAlert items on this page
        """
        return pulumi.get(self, "value")


class AwaitableListIssueAlertsResult(ListIssueAlertsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListIssueAlertsResult(
            next_link=self.next_link,
            value=self.value)


def list_issue_alerts(filter: Optional[builtins.str] = None,
                      issue_name: Optional[builtins.str] = None,
                      resource_uri: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListIssueAlertsResult:
    """
    List all alerts in the issue - this method uses pagination to return all alerts

    Uses Azure REST API version 2025-03-01-preview.


    :param builtins.str filter: The filter to apply on the operation. For example, to filter by relevance, use "$filter=relevance eq 'Relevant'"
    :param builtins.str issue_name: The name of the IssueResource
    :param builtins.str resource_uri: The fully qualified Azure Resource manager identifier of the resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['issueName'] = issue_name
    __args__['resourceUri'] = resource_uri
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:alertsmanagement:listIssueAlerts', __args__, opts=opts, typ=ListIssueAlertsResult).value

    return AwaitableListIssueAlertsResult(
        next_link=pulumi.get(__ret__, 'next_link'),
        value=pulumi.get(__ret__, 'value'))
def list_issue_alerts_output(filter: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             issue_name: Optional[pulumi.Input[builtins.str]] = None,
                             resource_uri: Optional[pulumi.Input[builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListIssueAlertsResult]:
    """
    List all alerts in the issue - this method uses pagination to return all alerts

    Uses Azure REST API version 2025-03-01-preview.


    :param builtins.str filter: The filter to apply on the operation. For example, to filter by relevance, use "$filter=relevance eq 'Relevant'"
    :param builtins.str issue_name: The name of the IssueResource
    :param builtins.str resource_uri: The fully qualified Azure Resource manager identifier of the resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['issueName'] = issue_name
    __args__['resourceUri'] = resource_uri
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:alertsmanagement:listIssueAlerts', __args__, opts=opts, typ=ListIssueAlertsResult)
    return __ret__.apply(lambda __response__: ListIssueAlertsResult(
        next_link=pulumi.get(__response__, 'next_link'),
        value=pulumi.get(__response__, 'value')))
