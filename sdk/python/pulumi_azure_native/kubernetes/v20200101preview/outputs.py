# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConnectedClusterAADProfileResponse',
    'ConnectedClusterIdentityResponse',
    'ConnectedClusterPropertiesResponse',
    'CredentialResultResponse',
    'HybridConnectionConfigResponse',
]

@pulumi.output_type
class ConnectedClusterAADProfileResponse(dict):
    """
    AAD profile of the connected cluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientAppId":
            suggest = "client_app_id"
        elif key == "serverAppId":
            suggest = "server_app_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectedClusterAADProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectedClusterAADProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectedClusterAADProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_app_id: str,
                 server_app_id: str,
                 tenant_id: str):
        """
        AAD profile of the connected cluster
        :param str client_app_id: The client app id configured on target K8 cluster 
        :param str server_app_id: The server app id to access AD server
        :param str tenant_id: The aad tenant id which is configured on target K8s cluster
        """
        pulumi.set(__self__, "client_app_id", client_app_id)
        pulumi.set(__self__, "server_app_id", server_app_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> str:
        """
        The client app id configured on target K8 cluster 
        """
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="serverAppId")
    def server_app_id(self) -> str:
        """
        The server app id to access AD server
        """
        return pulumi.get(self, "server_app_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The aad tenant id which is configured on target K8s cluster
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ConnectedClusterIdentityResponse(dict):
    """
    Identity for the connected cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectedClusterIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectedClusterIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectedClusterIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str):
        """
        Identity for the connected cluster.
        :param str principal_id: The principal id of connected cluster identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant id associated with the connected cluster. This property will only be provided for a system assigned identity.
        :param str type: The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal id of connected cluster identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant id associated with the connected cluster. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ConnectedClusterPropertiesResponse(dict):
    """
    Properties of the connected cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadProfile":
            suggest = "aad_profile"
        elif key == "agentPublicKeyCertificate":
            suggest = "agent_public_key_certificate"
        elif key == "agentVersion":
            suggest = "agent_version"
        elif key == "kubernetesVersion":
            suggest = "kubernetes_version"
        elif key == "lastConnectivityTime":
            suggest = "last_connectivity_time"
        elif key == "managedIdentityCertificateExpirationTime":
            suggest = "managed_identity_certificate_expiration_time"
        elif key == "totalCoreCount":
            suggest = "total_core_count"
        elif key == "totalNodeCount":
            suggest = "total_node_count"
        elif key == "connectivityStatus":
            suggest = "connectivity_status"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectedClusterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectedClusterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectedClusterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aad_profile: 'outputs.ConnectedClusterAADProfileResponse',
                 agent_public_key_certificate: str,
                 agent_version: str,
                 kubernetes_version: str,
                 last_connectivity_time: str,
                 managed_identity_certificate_expiration_time: str,
                 offering: str,
                 total_core_count: int,
                 total_node_count: int,
                 connectivity_status: Optional[str] = None,
                 distribution: Optional[str] = None,
                 infrastructure: Optional[str] = None,
                 provisioning_state: Optional[str] = None):
        """
        Properties of the connected cluster.
        :param 'ConnectedClusterAADProfileResponse' aad_profile: AAD profile of the connected cluster.
        :param str agent_public_key_certificate: Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
        :param str agent_version: Version of the agent running on the connected cluster resource
        :param str kubernetes_version: The Kubernetes version of the connected cluster resource
        :param str last_connectivity_time: Time representing the last instance when heart beat was received from the cluster
        :param str managed_identity_certificate_expiration_time: Expiration time of the managed identity certificate
        :param str offering: Connected cluster offering
        :param int total_core_count: Number of CPU cores present in the connected cluster resource
        :param int total_node_count: Number of nodes present in the connected cluster resource
        :param str connectivity_status: Represents the connectivity status of the connected cluster.
        :param str distribution: The Kubernetes distribution running on this connected cluster.
        :param str infrastructure: The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
        :param str provisioning_state: Provisioning state of the connected cluster resource.
        """
        pulumi.set(__self__, "aad_profile", aad_profile)
        pulumi.set(__self__, "agent_public_key_certificate", agent_public_key_certificate)
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        pulumi.set(__self__, "last_connectivity_time", last_connectivity_time)
        pulumi.set(__self__, "managed_identity_certificate_expiration_time", managed_identity_certificate_expiration_time)
        pulumi.set(__self__, "offering", offering)
        pulumi.set(__self__, "total_core_count", total_core_count)
        pulumi.set(__self__, "total_node_count", total_node_count)
        if connectivity_status is not None:
            pulumi.set(__self__, "connectivity_status", connectivity_status)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if infrastructure is not None:
            pulumi.set(__self__, "infrastructure", infrastructure)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="aadProfile")
    def aad_profile(self) -> 'outputs.ConnectedClusterAADProfileResponse':
        """
        AAD profile of the connected cluster.
        """
        return pulumi.get(self, "aad_profile")

    @property
    @pulumi.getter(name="agentPublicKeyCertificate")
    def agent_public_key_certificate(self) -> str:
        """
        Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
        """
        return pulumi.get(self, "agent_public_key_certificate")

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> str:
        """
        Version of the agent running on the connected cluster resource
        """
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        The Kubernetes version of the connected cluster resource
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="lastConnectivityTime")
    def last_connectivity_time(self) -> str:
        """
        Time representing the last instance when heart beat was received from the cluster
        """
        return pulumi.get(self, "last_connectivity_time")

    @property
    @pulumi.getter(name="managedIdentityCertificateExpirationTime")
    def managed_identity_certificate_expiration_time(self) -> str:
        """
        Expiration time of the managed identity certificate
        """
        return pulumi.get(self, "managed_identity_certificate_expiration_time")

    @property
    @pulumi.getter
    def offering(self) -> str:
        """
        Connected cluster offering
        """
        return pulumi.get(self, "offering")

    @property
    @pulumi.getter(name="totalCoreCount")
    def total_core_count(self) -> int:
        """
        Number of CPU cores present in the connected cluster resource
        """
        return pulumi.get(self, "total_core_count")

    @property
    @pulumi.getter(name="totalNodeCount")
    def total_node_count(self) -> int:
        """
        Number of nodes present in the connected cluster resource
        """
        return pulumi.get(self, "total_node_count")

    @property
    @pulumi.getter(name="connectivityStatus")
    def connectivity_status(self) -> Optional[str]:
        """
        Represents the connectivity status of the connected cluster.
        """
        return pulumi.get(self, "connectivity_status")

    @property
    @pulumi.getter
    def distribution(self) -> Optional[str]:
        """
        The Kubernetes distribution running on this connected cluster.
        """
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter
    def infrastructure(self) -> Optional[str]:
        """
        The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
        """
        return pulumi.get(self, "infrastructure")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        Provisioning state of the connected cluster resource.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class CredentialResultResponse(dict):
    """
    The credential result response.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        The credential result response.
        :param str name: The name of the credential.
        :param str value: Base64-encoded Kubernetes configuration file.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Base64-encoded Kubernetes configuration file.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HybridConnectionConfigResponse(dict):
    """
    Contains the REP (rendezvous endpoint) and “Sender” access token.
    """
    def __init__(__self__, *,
                 expiration_time: float,
                 hybrid_connection_name: str,
                 relay: str,
                 token: str):
        """
        Contains the REP (rendezvous endpoint) and “Sender” access token.
        :param float expiration_time: Timestamp when this token will be expired.
        :param str hybrid_connection_name: Name of the connection
        :param str relay: Name of the relay.
        :param str token: Sender access token
        """
        pulumi.set(__self__, "expiration_time", expiration_time)
        pulumi.set(__self__, "hybrid_connection_name", hybrid_connection_name)
        pulumi.set(__self__, "relay", relay)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> float:
        """
        Timestamp when this token will be expired.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="hybridConnectionName")
    def hybrid_connection_name(self) -> str:
        """
        Name of the connection
        """
        return pulumi.get(self, "hybrid_connection_name")

    @property
    @pulumi.getter
    def relay(self) -> str:
        """
        Name of the relay.
        """
        return pulumi.get(self, "relay")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Sender access token
        """
        return pulumi.get(self, "token")


