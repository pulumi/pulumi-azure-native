# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AuthenticationDetailsValue',
    'ConnectedClusterAADProfileArgs',
    'ConnectedClusterIdentityArgs',
    'ConnectedClusterPropertiesArgs',
]

@pulumi.input_type
class AuthenticationDetailsValue:
    def __init__(__self__, *,
                 token: Optional[str] = None):
        """
        Authentication token value.
        :param str token: Authentication token.
        """
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Authentication token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class ConnectedClusterAADProfileArgs:
    def __init__(__self__, *,
                 client_app_id: pulumi.Input[str],
                 server_app_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        AAD profile of the connected cluster
        :param pulumi.Input[str] client_app_id: The client app id configured on target K8 cluster 
        :param pulumi.Input[str] server_app_id: The server app id to access AD server
        :param pulumi.Input[str] tenant_id: The aad tenant id which is configured on target K8s cluster
        """
        pulumi.set(__self__, "client_app_id", client_app_id)
        pulumi.set(__self__, "server_app_id", server_app_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> pulumi.Input[str]:
        """
        The client app id configured on target K8 cluster 
        """
        return pulumi.get(self, "client_app_id")

    @client_app_id.setter
    def client_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_app_id", value)

    @property
    @pulumi.getter(name="serverAppId")
    def server_app_id(self) -> pulumi.Input[str]:
        """
        The server app id to access AD server
        """
        return pulumi.get(self, "server_app_id")

    @server_app_id.setter
    def server_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_app_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The aad tenant id which is configured on target K8s cluster
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ConnectedClusterIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ResourceIdentityType']):
        """
        Identity for the connected cluster.
        :param pulumi.Input['ResourceIdentityType'] type: The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ResourceIdentityType']:
        """
        The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ResourceIdentityType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ConnectedClusterPropertiesArgs:
    def __init__(__self__, *,
                 aad_profile: pulumi.Input['ConnectedClusterAADProfileArgs'],
                 agent_public_key_certificate: pulumi.Input[str],
                 connectivity_status: Optional[pulumi.Input[Union[str, 'ConnectivityStatus']]] = None,
                 distribution: Optional[pulumi.Input[str]] = None,
                 infrastructure: Optional[pulumi.Input[str]] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'ProvisioningState']]] = None):
        """
        Properties of the connected cluster.
        :param pulumi.Input['ConnectedClusterAADProfileArgs'] aad_profile: AAD profile of the connected cluster.
        :param pulumi.Input[str] agent_public_key_certificate: Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
        :param pulumi.Input[Union[str, 'ConnectivityStatus']] connectivity_status: Represents the connectivity status of the connected cluster.
        :param pulumi.Input[str] distribution: The Kubernetes distribution running on this connected cluster.
        :param pulumi.Input[str] infrastructure: The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
        :param pulumi.Input[Union[str, 'ProvisioningState']] provisioning_state: Provisioning state of the connected cluster resource.
        """
        pulumi.set(__self__, "aad_profile", aad_profile)
        pulumi.set(__self__, "agent_public_key_certificate", agent_public_key_certificate)
        if connectivity_status is not None:
            pulumi.set(__self__, "connectivity_status", connectivity_status)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if infrastructure is not None:
            pulumi.set(__self__, "infrastructure", infrastructure)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="aadProfile")
    def aad_profile(self) -> pulumi.Input['ConnectedClusterAADProfileArgs']:
        """
        AAD profile of the connected cluster.
        """
        return pulumi.get(self, "aad_profile")

    @aad_profile.setter
    def aad_profile(self, value: pulumi.Input['ConnectedClusterAADProfileArgs']):
        pulumi.set(self, "aad_profile", value)

    @property
    @pulumi.getter(name="agentPublicKeyCertificate")
    def agent_public_key_certificate(self) -> pulumi.Input[str]:
        """
        Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
        """
        return pulumi.get(self, "agent_public_key_certificate")

    @agent_public_key_certificate.setter
    def agent_public_key_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_public_key_certificate", value)

    @property
    @pulumi.getter(name="connectivityStatus")
    def connectivity_status(self) -> Optional[pulumi.Input[Union[str, 'ConnectivityStatus']]]:
        """
        Represents the connectivity status of the connected cluster.
        """
        return pulumi.get(self, "connectivity_status")

    @connectivity_status.setter
    def connectivity_status(self, value: Optional[pulumi.Input[Union[str, 'ConnectivityStatus']]]):
        pulumi.set(self, "connectivity_status", value)

    @property
    @pulumi.getter
    def distribution(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes distribution running on this connected cluster.
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribution", value)

    @property
    @pulumi.getter
    def infrastructure(self) -> Optional[pulumi.Input[str]]:
        """
        The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
        """
        return pulumi.get(self, "infrastructure")

    @infrastructure.setter
    def infrastructure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infrastructure", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningState']]]:
        """
        Provisioning state of the connected cluster resource.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)


