# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['FleetspaceArgs', 'Fleetspace']

@pulumi.input_type
class FleetspaceArgs:
    def __init__(__self__, *,
                 fleet_name: pulumi.Input[builtins.str],
                 resource_group_name: pulumi.Input[builtins.str],
                 fleetspace_api_kind: Optional[pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']]] = None,
                 fleetspace_name: Optional[pulumi.Input[builtins.str]] = None,
                 throughput_pool_configuration: Optional[pulumi.Input['FleetspacePropertiesThroughputPoolConfigurationArgs']] = None):
        """
        The set of arguments for constructing a Fleetspace resource.
        :param pulumi.Input[builtins.str] fleet_name: Cosmos DB fleet name. Needs to be unique under a subscription.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']] fleetspace_api_kind: The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'
        :param pulumi.Input[builtins.str] fleetspace_name: Cosmos DB fleetspace name. Needs to be unique under a fleet.
        :param pulumi.Input['FleetspacePropertiesThroughputPoolConfigurationArgs'] throughput_pool_configuration: Configuration for throughput pool in the fleetspace.
        """
        pulumi.set(__self__, "fleet_name", fleet_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if fleetspace_api_kind is not None:
            pulumi.set(__self__, "fleetspace_api_kind", fleetspace_api_kind)
        if fleetspace_name is not None:
            pulumi.set(__self__, "fleetspace_name", fleetspace_name)
        if throughput_pool_configuration is not None:
            pulumi.set(__self__, "throughput_pool_configuration", throughput_pool_configuration)

    @property
    @pulumi.getter(name="fleetName")
    def fleet_name(self) -> pulumi.Input[builtins.str]:
        """
        Cosmos DB fleet name. Needs to be unique under a subscription.
        """
        return pulumi.get(self, "fleet_name")

    @fleet_name.setter
    def fleet_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "fleet_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="fleetspaceApiKind")
    def fleetspace_api_kind(self) -> Optional[pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']]]:
        """
        The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'
        """
        return pulumi.get(self, "fleetspace_api_kind")

    @fleetspace_api_kind.setter
    def fleetspace_api_kind(self, value: Optional[pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']]]):
        pulumi.set(self, "fleetspace_api_kind", value)

    @property
    @pulumi.getter(name="fleetspaceName")
    def fleetspace_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cosmos DB fleetspace name. Needs to be unique under a fleet.
        """
        return pulumi.get(self, "fleetspace_name")

    @fleetspace_name.setter
    def fleetspace_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fleetspace_name", value)

    @property
    @pulumi.getter(name="throughputPoolConfiguration")
    def throughput_pool_configuration(self) -> Optional[pulumi.Input['FleetspacePropertiesThroughputPoolConfigurationArgs']]:
        """
        Configuration for throughput pool in the fleetspace.
        """
        return pulumi.get(self, "throughput_pool_configuration")

    @throughput_pool_configuration.setter
    def throughput_pool_configuration(self, value: Optional[pulumi.Input['FleetspacePropertiesThroughputPoolConfigurationArgs']]):
        pulumi.set(self, "throughput_pool_configuration", value)


class Fleetspace(pulumi.CustomResource):

    pulumi_type = "azure-native:cosmosdb:Fleetspace"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fleet_name: Optional[pulumi.Input[builtins.str]] = None,
                 fleetspace_api_kind: Optional[pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']]] = None,
                 fleetspace_name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 throughput_pool_configuration: Optional[pulumi.Input[Union['FleetspacePropertiesThroughputPoolConfigurationArgs', 'FleetspacePropertiesThroughputPoolConfigurationArgsDict']]] = None,
                 __props__=None):
        """
        An Azure Cosmos DB Fleetspace.

        Uses Azure REST API version 2025-05-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] fleet_name: Cosmos DB fleet name. Needs to be unique under a subscription.
        :param pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']] fleetspace_api_kind: The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'
        :param pulumi.Input[builtins.str] fleetspace_name: Cosmos DB fleetspace name. Needs to be unique under a fleet.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union['FleetspacePropertiesThroughputPoolConfigurationArgs', 'FleetspacePropertiesThroughputPoolConfigurationArgsDict']] throughput_pool_configuration: Configuration for throughput pool in the fleetspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FleetspaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An Azure Cosmos DB Fleetspace.

        Uses Azure REST API version 2025-05-01-preview.

        :param str resource_name: The name of the resource.
        :param FleetspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FleetspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fleet_name: Optional[pulumi.Input[builtins.str]] = None,
                 fleetspace_api_kind: Optional[pulumi.Input[Union[builtins.str, 'FleetspaceApiKind']]] = None,
                 fleetspace_name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 throughput_pool_configuration: Optional[pulumi.Input[Union['FleetspacePropertiesThroughputPoolConfigurationArgs', 'FleetspacePropertiesThroughputPoolConfigurationArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FleetspaceArgs.__new__(FleetspaceArgs)

            if fleet_name is None and not opts.urn:
                raise TypeError("Missing required property 'fleet_name'")
            __props__.__dict__["fleet_name"] = fleet_name
            __props__.__dict__["fleetspace_api_kind"] = fleetspace_api_kind
            __props__.__dict__["fleetspace_name"] = fleetspace_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["throughput_pool_configuration"] = throughput_pool_configuration
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:cosmosdb/v20250501preview:Fleetspace")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Fleetspace, __self__).__init__(
            'azure-native:cosmosdb:Fleetspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Fleetspace':
        """
        Get an existing Fleetspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FleetspaceArgs.__new__(FleetspaceArgs)

        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["fleetspace_api_kind"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["throughput_pool_configuration"] = None
        __props__.__dict__["type"] = None
        return Fleetspace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="fleetspaceApiKind")
    def fleetspace_api_kind(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'
        """
        return pulumi.get(self, "fleetspace_api_kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        A provisioning state of the Fleetspace.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="throughputPoolConfiguration")
    def throughput_pool_configuration(self) -> pulumi.Output[Optional['outputs.FleetspacePropertiesResponseThroughputPoolConfiguration']]:
        """
        Configuration for throughput pool in the fleetspace.
        """
        return pulumi.get(self, "throughput_pool_configuration")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

