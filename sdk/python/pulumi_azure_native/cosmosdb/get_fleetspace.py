# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFleetspaceResult',
    'AwaitableGetFleetspaceResult',
    'get_fleetspace',
    'get_fleetspace_output',
]

@pulumi.output_type
class GetFleetspaceResult:
    """
    An Azure Cosmos DB Fleetspace.
    """
    def __init__(__self__, azure_api_version=None, fleetspace_api_kind=None, id=None, name=None, provisioning_state=None, system_data=None, throughput_pool_configuration=None, type=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if fleetspace_api_kind and not isinstance(fleetspace_api_kind, str):
            raise TypeError("Expected argument 'fleetspace_api_kind' to be a str")
        pulumi.set(__self__, "fleetspace_api_kind", fleetspace_api_kind)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if throughput_pool_configuration and not isinstance(throughput_pool_configuration, dict):
            raise TypeError("Expected argument 'throughput_pool_configuration' to be a dict")
        pulumi.set(__self__, "throughput_pool_configuration", throughput_pool_configuration)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="fleetspaceApiKind")
    def fleetspace_api_kind(self) -> Optional[builtins.str]:
        """
        The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'
        """
        return pulumi.get(self, "fleetspace_api_kind")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        A provisioning state of the Fleetspace.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="throughputPoolConfiguration")
    def throughput_pool_configuration(self) -> Optional['outputs.FleetspacePropertiesResponseThroughputPoolConfiguration']:
        """
        Configuration for throughput pool in the fleetspace.
        """
        return pulumi.get(self, "throughput_pool_configuration")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetFleetspaceResult(GetFleetspaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFleetspaceResult(
            azure_api_version=self.azure_api_version,
            fleetspace_api_kind=self.fleetspace_api_kind,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            throughput_pool_configuration=self.throughput_pool_configuration,
            type=self.type)


def get_fleetspace(fleet_name: Optional[builtins.str] = None,
                   fleetspace_name: Optional[builtins.str] = None,
                   resource_group_name: Optional[builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFleetspaceResult:
    """
    Retrieves the properties of an existing Azure Cosmos DB fleetspace under a fleet

    Uses Azure REST API version 2025-05-01-preview.


    :param builtins.str fleet_name: Cosmos DB fleet name. Needs to be unique under a subscription.
    :param builtins.str fleetspace_name: Cosmos DB fleetspace name. Needs to be unique under a fleet.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['fleetName'] = fleet_name
    __args__['fleetspaceName'] = fleetspace_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:cosmosdb:getFleetspace', __args__, opts=opts, typ=GetFleetspaceResult).value

    return AwaitableGetFleetspaceResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        fleetspace_api_kind=pulumi.get(__ret__, 'fleetspace_api_kind'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        throughput_pool_configuration=pulumi.get(__ret__, 'throughput_pool_configuration'),
        type=pulumi.get(__ret__, 'type'))
def get_fleetspace_output(fleet_name: Optional[pulumi.Input[builtins.str]] = None,
                          fleetspace_name: Optional[pulumi.Input[builtins.str]] = None,
                          resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFleetspaceResult]:
    """
    Retrieves the properties of an existing Azure Cosmos DB fleetspace under a fleet

    Uses Azure REST API version 2025-05-01-preview.


    :param builtins.str fleet_name: Cosmos DB fleet name. Needs to be unique under a subscription.
    :param builtins.str fleetspace_name: Cosmos DB fleetspace name. Needs to be unique under a fleet.
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['fleetName'] = fleet_name
    __args__['fleetspaceName'] = fleetspace_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:cosmosdb:getFleetspace', __args__, opts=opts, typ=GetFleetspaceResult)
    return __ret__.apply(lambda __response__: GetFleetspaceResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        fleetspace_api_kind=pulumi.get(__response__, 'fleetspace_api_kind'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        throughput_pool_configuration=pulumi.get(__response__, 'throughput_pool_configuration'),
        type=pulumi.get(__response__, 'type')))
