# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPackageResult',
    'AwaitableGetPackageResult',
    'get_package',
    'get_package_output',
]

@pulumi.output_type
class GetPackageResult:
    """
    Definition of the Package type.
    """
    def __init__(__self__, all_of=None, content_link=None, default=None, error=None, id=None, location=None, name=None, provisioning_state=None, size_in_bytes=None, system_data=None, tags=None, type=None, version=None):
        if all_of and not isinstance(all_of, dict):
            raise TypeError("Expected argument 'all_of' to be a dict")
        pulumi.set(__self__, "all_of", all_of)
        if content_link and not isinstance(content_link, dict):
            raise TypeError("Expected argument 'content_link' to be a dict")
        pulumi.set(__self__, "content_link", content_link)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if size_in_bytes and not isinstance(size_in_bytes, float):
            raise TypeError("Expected argument 'size_in_bytes' to be a float")
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="allOf")
    def all_of(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "all_of")

    @property
    @pulumi.getter(name="contentLink")
    def content_link(self) -> Optional['outputs.ContentLinkResponse']:
        """
        Gets or sets the contentLink of the Package.
        """
        return pulumi.get(self, "content_link")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        Gets or sets the isGlobal flag of the package.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.PackageErrorInfoResponse']:
        """
        Gets or sets the error info of the Package.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets or sets the provisioning state of the Package.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[float]:
        """
        Gets or sets the size in bytes of the Package.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Gets or sets the version of the Package.
        """
        return pulumi.get(self, "version")


class AwaitableGetPackageResult(GetPackageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPackageResult(
            all_of=self.all_of,
            content_link=self.content_link,
            default=self.default,
            error=self.error,
            id=self.id,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            size_in_bytes=self.size_in_bytes,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            version=self.version)


def get_package(automation_account_name: Optional[str] = None,
                package_name: Optional[str] = None,
                resource_group_name: Optional[str] = None,
                runtime_environment_name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPackageResult:
    """
    Retrieve the Package identified by Package name.
    Azure REST API version: 2023-05-15-preview.


    :param str automation_account_name: The name of the automation account.
    :param str package_name: The Package name.
    :param str resource_group_name: Name of an Azure Resource group.
    :param str runtime_environment_name: The name of the Runtime Environment.
    """
    __args__ = dict()
    __args__['automationAccountName'] = automation_account_name
    __args__['packageName'] = package_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['runtimeEnvironmentName'] = runtime_environment_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:automation:getPackage', __args__, opts=opts, typ=GetPackageResult).value

    return AwaitableGetPackageResult(
        all_of=pulumi.get(__ret__, 'all_of'),
        content_link=pulumi.get(__ret__, 'content_link'),
        default=pulumi.get(__ret__, 'default'),
        error=pulumi.get(__ret__, 'error'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        size_in_bytes=pulumi.get(__ret__, 'size_in_bytes'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_package)
def get_package_output(automation_account_name: Optional[pulumi.Input[str]] = None,
                       package_name: Optional[pulumi.Input[str]] = None,
                       resource_group_name: Optional[pulumi.Input[str]] = None,
                       runtime_environment_name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPackageResult]:
    """
    Retrieve the Package identified by Package name.
    Azure REST API version: 2023-05-15-preview.


    :param str automation_account_name: The name of the automation account.
    :param str package_name: The Package name.
    :param str resource_group_name: Name of an Azure Resource group.
    :param str runtime_environment_name: The name of the Runtime Environment.
    """
    ...
