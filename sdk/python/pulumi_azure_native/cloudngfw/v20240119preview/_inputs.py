# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AzureResourceManagerManagedIdentityPropertiesArgs',
    'AzureResourceManagerUserAssignedIdentityArgs',
    'CategoryArgs',
    'DNSSettingsArgs',
    'DestinationAddrArgs',
    'EndpointConfigurationArgs',
    'FrontendSettingArgs',
    'IPAddressSpaceArgs',
    'IPAddressArgs',
    'MarketplaceDetailsArgs',
    'NetworkProfileArgs',
    'PanoramaConfigArgs',
    'PlanDataArgs',
    'RulestackDetailsArgs',
    'SecurityServicesArgs',
    'SourceAddrArgs',
    'StrataCloudManagerConfigArgs',
    'TagInfoArgs',
    'VnetConfigurationArgs',
    'VwanConfigurationArgs',
]

@pulumi.input_type
class AzureResourceManagerManagedIdentityPropertiesArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Mapping[str, pulumi.Input['AzureResourceManagerUserAssignedIdentityArgs']]]] = None):
        """
        The properties of the managed service identities assigned to this resource.
        :param pulumi.Input[Union[str, 'ManagedIdentityType']] type: The type of managed identity assigned to this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input['AzureResourceManagerUserAssignedIdentityArgs']]] user_assigned_identities: The identities assigned to this resource by the user.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedIdentityType']]:
        """
        The type of managed identity assigned to this resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['AzureResourceManagerUserAssignedIdentityArgs']]]]:
        """
        The identities assigned to this resource by the user.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['AzureResourceManagerUserAssignedIdentityArgs']]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class AzureResourceManagerUserAssignedIdentityArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None):
        """
        A managed identity assigned by the user.
        :param pulumi.Input[str] client_id: The active directory client identifier for this principal.
        :param pulumi.Input[str] principal_id: The active directory identifier for this principal.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The active directory client identifier for this principal.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The active directory identifier for this principal.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)


@pulumi.input_type
class CategoryArgs:
    def __init__(__self__, *,
                 feeds: pulumi.Input[Sequence[pulumi.Input[str]]],
                 url_custom: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        URL/EDL to match
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feeds: feed list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] url_custom: custom URL
        """
        pulumi.set(__self__, "feeds", feeds)
        pulumi.set(__self__, "url_custom", url_custom)

    @property
    @pulumi.getter
    def feeds(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        feed list
        """
        return pulumi.get(self, "feeds")

    @feeds.setter
    def feeds(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "feeds", value)

    @property
    @pulumi.getter(name="urlCustom")
    def url_custom(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        custom URL
        """
        return pulumi.get(self, "url_custom")

    @url_custom.setter
    def url_custom(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "url_custom", value)


@pulumi.input_type
class DNSSettingsArgs:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]] = None,
                 enable_dns_proxy: Optional[pulumi.Input[Union[str, 'DNSProxy']]] = None,
                 enabled_dns_type: Optional[pulumi.Input[Union[str, 'EnabledDNSType']]] = None):
        """
        DNS Proxy settings for Firewall
        :param pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]] dns_servers: List of IPs associated with the Firewall
        :param pulumi.Input[Union[str, 'DNSProxy']] enable_dns_proxy: Enable DNS proxy, disabled by default
        :param pulumi.Input[Union[str, 'EnabledDNSType']] enabled_dns_type: Enabled DNS proxy type, disabled by default
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if enable_dns_proxy is not None:
            pulumi.set(__self__, "enable_dns_proxy", enable_dns_proxy)
        if enabled_dns_type is not None:
            pulumi.set(__self__, "enabled_dns_type", enabled_dns_type)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]]:
        """
        List of IPs associated with the Firewall
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="enableDnsProxy")
    def enable_dns_proxy(self) -> Optional[pulumi.Input[Union[str, 'DNSProxy']]]:
        """
        Enable DNS proxy, disabled by default
        """
        return pulumi.get(self, "enable_dns_proxy")

    @enable_dns_proxy.setter
    def enable_dns_proxy(self, value: Optional[pulumi.Input[Union[str, 'DNSProxy']]]):
        pulumi.set(self, "enable_dns_proxy", value)

    @property
    @pulumi.getter(name="enabledDnsType")
    def enabled_dns_type(self) -> Optional[pulumi.Input[Union[str, 'EnabledDNSType']]]:
        """
        Enabled DNS proxy type, disabled by default
        """
        return pulumi.get(self, "enabled_dns_type")

    @enabled_dns_type.setter
    def enabled_dns_type(self, value: Optional[pulumi.Input[Union[str, 'EnabledDNSType']]]):
        pulumi.set(self, "enabled_dns_type", value)


@pulumi.input_type
class DestinationAddrArgs:
    def __init__(__self__, *,
                 cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 feeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fqdn_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        destination address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidrs: special value 'any'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: list of countries
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feeds: list of feeds
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fqdn_lists: fqdn list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prefix_lists: prefix list
        """
        if cidrs is not None:
            pulumi.set(__self__, "cidrs", cidrs)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if feeds is not None:
            pulumi.set(__self__, "feeds", feeds)
        if fqdn_lists is not None:
            pulumi.set(__self__, "fqdn_lists", fqdn_lists)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @property
    @pulumi.getter
    def cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        special value 'any'
        """
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidrs", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of countries
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def feeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of feeds
        """
        return pulumi.get(self, "feeds")

    @feeds.setter
    def feeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "feeds", value)

    @property
    @pulumi.getter(name="fqdnLists")
    def fqdn_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        fqdn list
        """
        return pulumi.get(self, "fqdn_lists")

    @fqdn_lists.setter
    def fqdn_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fqdn_lists", value)

    @property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        prefix list
        """
        return pulumi.get(self, "prefix_lists")

    @prefix_lists.setter
    def prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prefix_lists", value)


@pulumi.input_type
class EndpointConfigurationArgs:
    def __init__(__self__, *,
                 address: pulumi.Input['IPAddressArgs'],
                 port: pulumi.Input[str]):
        """
        Endpoint Configuration for frontend and backend
        :param pulumi.Input['IPAddressArgs'] address: Address Space
        :param pulumi.Input[str] port: port ID
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input['IPAddressArgs']:
        """
        Address Space
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input['IPAddressArgs']):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        port ID
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class FrontendSettingArgs:
    def __init__(__self__, *,
                 backend_configuration: pulumi.Input['EndpointConfigurationArgs'],
                 frontend_configuration: pulumi.Input['EndpointConfigurationArgs'],
                 name: pulumi.Input[str],
                 protocol: pulumi.Input[Union[str, 'ProtocolType']]):
        """
        Frontend setting for Firewall
        :param pulumi.Input['EndpointConfigurationArgs'] backend_configuration: Backend configurations
        :param pulumi.Input['EndpointConfigurationArgs'] frontend_configuration: Frontend configurations
        :param pulumi.Input[str] name: Settings name
        :param pulumi.Input[Union[str, 'ProtocolType']] protocol: Protocol Type
        """
        pulumi.set(__self__, "backend_configuration", backend_configuration)
        pulumi.set(__self__, "frontend_configuration", frontend_configuration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="backendConfiguration")
    def backend_configuration(self) -> pulumi.Input['EndpointConfigurationArgs']:
        """
        Backend configurations
        """
        return pulumi.get(self, "backend_configuration")

    @backend_configuration.setter
    def backend_configuration(self, value: pulumi.Input['EndpointConfigurationArgs']):
        pulumi.set(self, "backend_configuration", value)

    @property
    @pulumi.getter(name="frontendConfiguration")
    def frontend_configuration(self) -> pulumi.Input['EndpointConfigurationArgs']:
        """
        Frontend configurations
        """
        return pulumi.get(self, "frontend_configuration")

    @frontend_configuration.setter
    def frontend_configuration(self, value: pulumi.Input['EndpointConfigurationArgs']):
        pulumi.set(self, "frontend_configuration", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Settings name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[Union[str, 'ProtocolType']]:
        """
        Protocol Type
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[Union[str, 'ProtocolType']]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class IPAddressSpaceArgs:
    def __init__(__self__, *,
                 address_space: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        IP Address Space
        :param pulumi.Input[str] address_space: Address Space
        :param pulumi.Input[str] resource_id: Resource Id
        """
        if address_space is not None:
            pulumi.set(__self__, "address_space", address_space)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> Optional[pulumi.Input[str]]:
        """
        Address Space
        """
        return pulumi.get(self, "address_space")

    @address_space.setter
    def address_space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_space", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


@pulumi.input_type
class IPAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        IP Address
        :param pulumi.Input[str] address: Address value
        :param pulumi.Input[str] resource_id: Resource Id
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address value
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


@pulumi.input_type
class MarketplaceDetailsArgs:
    def __init__(__self__, *,
                 offer_id: pulumi.Input[str],
                 publisher_id: pulumi.Input[str],
                 marketplace_subscription_status: Optional[pulumi.Input[Union[str, 'MarketplaceSubscriptionStatus']]] = None):
        """
        MarketplaceDetails of PAN Firewall resource
        :param pulumi.Input[str] offer_id: Offer Id
        :param pulumi.Input[str] publisher_id: Publisher Id
        :param pulumi.Input[Union[str, 'MarketplaceSubscriptionStatus']] marketplace_subscription_status: Marketplace Subscription Status
        """
        pulumi.set(__self__, "offer_id", offer_id)
        pulumi.set(__self__, "publisher_id", publisher_id)
        if marketplace_subscription_status is not None:
            pulumi.set(__self__, "marketplace_subscription_status", marketplace_subscription_status)

    @property
    @pulumi.getter(name="offerId")
    def offer_id(self) -> pulumi.Input[str]:
        """
        Offer Id
        """
        return pulumi.get(self, "offer_id")

    @offer_id.setter
    def offer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "offer_id", value)

    @property
    @pulumi.getter(name="publisherId")
    def publisher_id(self) -> pulumi.Input[str]:
        """
        Publisher Id
        """
        return pulumi.get(self, "publisher_id")

    @publisher_id.setter
    def publisher_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher_id", value)

    @property
    @pulumi.getter(name="marketplaceSubscriptionStatus")
    def marketplace_subscription_status(self) -> Optional[pulumi.Input[Union[str, 'MarketplaceSubscriptionStatus']]]:
        """
        Marketplace Subscription Status
        """
        return pulumi.get(self, "marketplace_subscription_status")

    @marketplace_subscription_status.setter
    def marketplace_subscription_status(self, value: Optional[pulumi.Input[Union[str, 'MarketplaceSubscriptionStatus']]]):
        pulumi.set(self, "marketplace_subscription_status", value)


@pulumi.input_type
class NetworkProfileArgs:
    def __init__(__self__, *,
                 enable_egress_nat: pulumi.Input[Union[str, 'EgressNat']],
                 network_type: pulumi.Input[Union[str, 'NetworkType']],
                 public_ips: pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]],
                 egress_nat_ip: Optional[pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]] = None,
                 private_source_nat_rules_destination: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trusted_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vnet_configuration: Optional[pulumi.Input['VnetConfigurationArgs']] = None,
                 vwan_configuration: Optional[pulumi.Input['VwanConfigurationArgs']] = None):
        """
        Network settings for Firewall
        :param pulumi.Input[Union[str, 'EgressNat']] enable_egress_nat: Enable egress NAT, enabled by default
        :param pulumi.Input[Union[str, 'NetworkType']] network_type: vnet or vwan, cannot be updated
        :param pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]] public_ips: List of IPs associated with the Firewall
        :param pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]] egress_nat_ip: Egress nat IP to use
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_source_nat_rules_destination: Array of ipv4 destination address for which source NAT is to be performed
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trusted_ranges: Non-RFC 1918 address
        :param pulumi.Input['VnetConfigurationArgs'] vnet_configuration: Vnet configurations
        :param pulumi.Input['VwanConfigurationArgs'] vwan_configuration: Vwan configurations
        """
        pulumi.set(__self__, "enable_egress_nat", enable_egress_nat)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "public_ips", public_ips)
        if egress_nat_ip is not None:
            pulumi.set(__self__, "egress_nat_ip", egress_nat_ip)
        if private_source_nat_rules_destination is not None:
            pulumi.set(__self__, "private_source_nat_rules_destination", private_source_nat_rules_destination)
        if trusted_ranges is not None:
            pulumi.set(__self__, "trusted_ranges", trusted_ranges)
        if vnet_configuration is not None:
            pulumi.set(__self__, "vnet_configuration", vnet_configuration)
        if vwan_configuration is not None:
            pulumi.set(__self__, "vwan_configuration", vwan_configuration)

    @property
    @pulumi.getter(name="enableEgressNat")
    def enable_egress_nat(self) -> pulumi.Input[Union[str, 'EgressNat']]:
        """
        Enable egress NAT, enabled by default
        """
        return pulumi.get(self, "enable_egress_nat")

    @enable_egress_nat.setter
    def enable_egress_nat(self, value: pulumi.Input[Union[str, 'EgressNat']]):
        pulumi.set(self, "enable_egress_nat", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Input[Union[str, 'NetworkType']]:
        """
        vnet or vwan, cannot be updated
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: pulumi.Input[Union[str, 'NetworkType']]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]:
        """
        List of IPs associated with the Firewall
        """
        return pulumi.get(self, "public_ips")

    @public_ips.setter
    def public_ips(self, value: pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]):
        pulumi.set(self, "public_ips", value)

    @property
    @pulumi.getter(name="egressNatIp")
    def egress_nat_ip(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]]:
        """
        Egress nat IP to use
        """
        return pulumi.get(self, "egress_nat_ip")

    @egress_nat_ip.setter
    def egress_nat_ip(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IPAddressArgs']]]]):
        pulumi.set(self, "egress_nat_ip", value)

    @property
    @pulumi.getter(name="privateSourceNatRulesDestination")
    def private_source_nat_rules_destination(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of ipv4 destination address for which source NAT is to be performed
        """
        return pulumi.get(self, "private_source_nat_rules_destination")

    @private_source_nat_rules_destination.setter
    def private_source_nat_rules_destination(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_source_nat_rules_destination", value)

    @property
    @pulumi.getter(name="trustedRanges")
    def trusted_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Non-RFC 1918 address
        """
        return pulumi.get(self, "trusted_ranges")

    @trusted_ranges.setter
    def trusted_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_ranges", value)

    @property
    @pulumi.getter(name="vnetConfiguration")
    def vnet_configuration(self) -> Optional[pulumi.Input['VnetConfigurationArgs']]:
        """
        Vnet configurations
        """
        return pulumi.get(self, "vnet_configuration")

    @vnet_configuration.setter
    def vnet_configuration(self, value: Optional[pulumi.Input['VnetConfigurationArgs']]):
        pulumi.set(self, "vnet_configuration", value)

    @property
    @pulumi.getter(name="vwanConfiguration")
    def vwan_configuration(self) -> Optional[pulumi.Input['VwanConfigurationArgs']]:
        """
        Vwan configurations
        """
        return pulumi.get(self, "vwan_configuration")

    @vwan_configuration.setter
    def vwan_configuration(self, value: Optional[pulumi.Input['VwanConfigurationArgs']]):
        pulumi.set(self, "vwan_configuration", value)


@pulumi.input_type
class PanoramaConfigArgs:
    def __init__(__self__, *,
                 config_string: pulumi.Input[str]):
        """
        Panorama Config
        :param pulumi.Input[str] config_string: Base64 encoded string representing Panorama parameters to be used by Firewall to connect to Panorama. This string is generated via azure plugin in Panorama
        """
        pulumi.set(__self__, "config_string", config_string)

    @property
    @pulumi.getter(name="configString")
    def config_string(self) -> pulumi.Input[str]:
        """
        Base64 encoded string representing Panorama parameters to be used by Firewall to connect to Panorama. This string is generated via azure plugin in Panorama
        """
        return pulumi.get(self, "config_string")

    @config_string.setter
    def config_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_string", value)


@pulumi.input_type
class PlanDataArgs:
    def __init__(__self__, *,
                 billing_cycle: pulumi.Input[Union[str, 'BillingCycle']],
                 plan_id: pulumi.Input[str],
                 usage_type: Optional[pulumi.Input[Union[str, 'UsageType']]] = None):
        """
        Billing plan information.
        :param pulumi.Input[Union[str, 'BillingCycle']] billing_cycle: different billing cycles like MONTHLY/WEEKLY
        :param pulumi.Input[str] plan_id: plan id as published by Liftr.PAN
        :param pulumi.Input[Union[str, 'UsageType']] usage_type: different usage type like PAYG/COMMITTED
        """
        pulumi.set(__self__, "billing_cycle", billing_cycle)
        pulumi.set(__self__, "plan_id", plan_id)
        if usage_type is not None:
            pulumi.set(__self__, "usage_type", usage_type)

    @property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> pulumi.Input[Union[str, 'BillingCycle']]:
        """
        different billing cycles like MONTHLY/WEEKLY
        """
        return pulumi.get(self, "billing_cycle")

    @billing_cycle.setter
    def billing_cycle(self, value: pulumi.Input[Union[str, 'BillingCycle']]):
        pulumi.set(self, "billing_cycle", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Input[str]:
        """
        plan id as published by Liftr.PAN
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="usageType")
    def usage_type(self) -> Optional[pulumi.Input[Union[str, 'UsageType']]]:
        """
        different usage type like PAYG/COMMITTED
        """
        return pulumi.get(self, "usage_type")

    @usage_type.setter
    def usage_type(self, value: Optional[pulumi.Input[Union[str, 'UsageType']]]):
        pulumi.set(self, "usage_type", value)


@pulumi.input_type
class RulestackDetailsArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 rulestack_id: Optional[pulumi.Input[str]] = None):
        """
        Associated rulestack details
        :param pulumi.Input[str] location: Rulestack location
        :param pulumi.Input[str] resource_id: Resource Id
        :param pulumi.Input[str] rulestack_id: Associated rulestack Id
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if rulestack_id is not None:
            pulumi.set(__self__, "rulestack_id", rulestack_id)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Rulestack location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Id
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="rulestackId")
    def rulestack_id(self) -> Optional[pulumi.Input[str]]:
        """
        Associated rulestack Id
        """
        return pulumi.get(self, "rulestack_id")

    @rulestack_id.setter
    def rulestack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rulestack_id", value)


@pulumi.input_type
class SecurityServicesArgs:
    def __init__(__self__, *,
                 anti_spyware_profile: Optional[pulumi.Input[str]] = None,
                 anti_virus_profile: Optional[pulumi.Input[str]] = None,
                 dns_subscription: Optional[pulumi.Input[str]] = None,
                 file_blocking_profile: Optional[pulumi.Input[str]] = None,
                 outbound_trust_certificate: Optional[pulumi.Input[str]] = None,
                 outbound_un_trust_certificate: Optional[pulumi.Input[str]] = None,
                 url_filtering_profile: Optional[pulumi.Input[str]] = None,
                 vulnerability_profile: Optional[pulumi.Input[str]] = None):
        """
        security services
        :param pulumi.Input[str] anti_spyware_profile: Anti spyware Profile data
        :param pulumi.Input[str] anti_virus_profile: anti virus profile data
        :param pulumi.Input[str] dns_subscription: DNS Subscription profile data
        :param pulumi.Input[str] file_blocking_profile: File blocking profile data
        :param pulumi.Input[str] outbound_trust_certificate: Trusted Egress Decryption profile data
        :param pulumi.Input[str] outbound_un_trust_certificate: Untrusted Egress Decryption profile data
        :param pulumi.Input[str] url_filtering_profile: URL filtering profile data
        :param pulumi.Input[str] vulnerability_profile: IPs Vulnerability Profile Data
        """
        if anti_spyware_profile is not None:
            pulumi.set(__self__, "anti_spyware_profile", anti_spyware_profile)
        if anti_virus_profile is not None:
            pulumi.set(__self__, "anti_virus_profile", anti_virus_profile)
        if dns_subscription is not None:
            pulumi.set(__self__, "dns_subscription", dns_subscription)
        if file_blocking_profile is not None:
            pulumi.set(__self__, "file_blocking_profile", file_blocking_profile)
        if outbound_trust_certificate is not None:
            pulumi.set(__self__, "outbound_trust_certificate", outbound_trust_certificate)
        if outbound_un_trust_certificate is not None:
            pulumi.set(__self__, "outbound_un_trust_certificate", outbound_un_trust_certificate)
        if url_filtering_profile is not None:
            pulumi.set(__self__, "url_filtering_profile", url_filtering_profile)
        if vulnerability_profile is not None:
            pulumi.set(__self__, "vulnerability_profile", vulnerability_profile)

    @property
    @pulumi.getter(name="antiSpywareProfile")
    def anti_spyware_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Anti spyware Profile data
        """
        return pulumi.get(self, "anti_spyware_profile")

    @anti_spyware_profile.setter
    def anti_spyware_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_spyware_profile", value)

    @property
    @pulumi.getter(name="antiVirusProfile")
    def anti_virus_profile(self) -> Optional[pulumi.Input[str]]:
        """
        anti virus profile data
        """
        return pulumi.get(self, "anti_virus_profile")

    @anti_virus_profile.setter
    def anti_virus_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_virus_profile", value)

    @property
    @pulumi.getter(name="dnsSubscription")
    def dns_subscription(self) -> Optional[pulumi.Input[str]]:
        """
        DNS Subscription profile data
        """
        return pulumi.get(self, "dns_subscription")

    @dns_subscription.setter
    def dns_subscription(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_subscription", value)

    @property
    @pulumi.getter(name="fileBlockingProfile")
    def file_blocking_profile(self) -> Optional[pulumi.Input[str]]:
        """
        File blocking profile data
        """
        return pulumi.get(self, "file_blocking_profile")

    @file_blocking_profile.setter
    def file_blocking_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_blocking_profile", value)

    @property
    @pulumi.getter(name="outboundTrustCertificate")
    def outbound_trust_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted Egress Decryption profile data
        """
        return pulumi.get(self, "outbound_trust_certificate")

    @outbound_trust_certificate.setter
    def outbound_trust_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_trust_certificate", value)

    @property
    @pulumi.getter(name="outboundUnTrustCertificate")
    def outbound_un_trust_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Untrusted Egress Decryption profile data
        """
        return pulumi.get(self, "outbound_un_trust_certificate")

    @outbound_un_trust_certificate.setter
    def outbound_un_trust_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_un_trust_certificate", value)

    @property
    @pulumi.getter(name="urlFilteringProfile")
    def url_filtering_profile(self) -> Optional[pulumi.Input[str]]:
        """
        URL filtering profile data
        """
        return pulumi.get(self, "url_filtering_profile")

    @url_filtering_profile.setter
    def url_filtering_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_filtering_profile", value)

    @property
    @pulumi.getter(name="vulnerabilityProfile")
    def vulnerability_profile(self) -> Optional[pulumi.Input[str]]:
        """
        IPs Vulnerability Profile Data
        """
        return pulumi.get(self, "vulnerability_profile")

    @vulnerability_profile.setter
    def vulnerability_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vulnerability_profile", value)


@pulumi.input_type
class SourceAddrArgs:
    def __init__(__self__, *,
                 cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 feeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Address properties
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidrs: special value 'any'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: list of countries
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feeds: list of feeds
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prefix_lists: prefix list
        """
        if cidrs is not None:
            pulumi.set(__self__, "cidrs", cidrs)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if feeds is not None:
            pulumi.set(__self__, "feeds", feeds)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @property
    @pulumi.getter
    def cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        special value 'any'
        """
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidrs", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of countries
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def feeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of feeds
        """
        return pulumi.get(self, "feeds")

    @feeds.setter
    def feeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "feeds", value)

    @property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        prefix list
        """
        return pulumi.get(self, "prefix_lists")

    @prefix_lists.setter
    def prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prefix_lists", value)


@pulumi.input_type
class StrataCloudManagerConfigArgs:
    def __init__(__self__, *,
                 cloud_manager_name: pulumi.Input[str]):
        """
        This field is only present if Strata Cloud Manager is managing the policy for this firewall
        :param pulumi.Input[str] cloud_manager_name: Strata Cloud Manager name which is intended to manage the policy for this firewall.
        """
        pulumi.set(__self__, "cloud_manager_name", cloud_manager_name)

    @property
    @pulumi.getter(name="cloudManagerName")
    def cloud_manager_name(self) -> pulumi.Input[str]:
        """
        Strata Cloud Manager name which is intended to manage the policy for this firewall.
        """
        return pulumi.get(self, "cloud_manager_name")

    @cloud_manager_name.setter
    def cloud_manager_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_manager_name", value)


@pulumi.input_type
class TagInfoArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        Tag
        :param pulumi.Input[str] key: tag name
        :param pulumi.Input[str] value: tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        tag name
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        tag value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VnetConfigurationArgs:
    def __init__(__self__, *,
                 trust_subnet: pulumi.Input['IPAddressSpaceArgs'],
                 un_trust_subnet: pulumi.Input['IPAddressSpaceArgs'],
                 vnet: pulumi.Input['IPAddressSpaceArgs'],
                 ip_of_trust_subnet_for_udr: Optional[pulumi.Input['IPAddressArgs']] = None):
        """
        VnetInfo for Firewall Networking
        :param pulumi.Input['IPAddressSpaceArgs'] trust_subnet: Trust Subnet
        :param pulumi.Input['IPAddressSpaceArgs'] un_trust_subnet: Untrust Subnet
        :param pulumi.Input['IPAddressSpaceArgs'] vnet: Azure Virtual Network
        :param pulumi.Input['IPAddressArgs'] ip_of_trust_subnet_for_udr: IP of trust subnet for UDR
        """
        pulumi.set(__self__, "trust_subnet", trust_subnet)
        pulumi.set(__self__, "un_trust_subnet", un_trust_subnet)
        pulumi.set(__self__, "vnet", vnet)
        if ip_of_trust_subnet_for_udr is not None:
            pulumi.set(__self__, "ip_of_trust_subnet_for_udr", ip_of_trust_subnet_for_udr)

    @property
    @pulumi.getter(name="trustSubnet")
    def trust_subnet(self) -> pulumi.Input['IPAddressSpaceArgs']:
        """
        Trust Subnet
        """
        return pulumi.get(self, "trust_subnet")

    @trust_subnet.setter
    def trust_subnet(self, value: pulumi.Input['IPAddressSpaceArgs']):
        pulumi.set(self, "trust_subnet", value)

    @property
    @pulumi.getter(name="unTrustSubnet")
    def un_trust_subnet(self) -> pulumi.Input['IPAddressSpaceArgs']:
        """
        Untrust Subnet
        """
        return pulumi.get(self, "un_trust_subnet")

    @un_trust_subnet.setter
    def un_trust_subnet(self, value: pulumi.Input['IPAddressSpaceArgs']):
        pulumi.set(self, "un_trust_subnet", value)

    @property
    @pulumi.getter
    def vnet(self) -> pulumi.Input['IPAddressSpaceArgs']:
        """
        Azure Virtual Network
        """
        return pulumi.get(self, "vnet")

    @vnet.setter
    def vnet(self, value: pulumi.Input['IPAddressSpaceArgs']):
        pulumi.set(self, "vnet", value)

    @property
    @pulumi.getter(name="ipOfTrustSubnetForUdr")
    def ip_of_trust_subnet_for_udr(self) -> Optional[pulumi.Input['IPAddressArgs']]:
        """
        IP of trust subnet for UDR
        """
        return pulumi.get(self, "ip_of_trust_subnet_for_udr")

    @ip_of_trust_subnet_for_udr.setter
    def ip_of_trust_subnet_for_udr(self, value: Optional[pulumi.Input['IPAddressArgs']]):
        pulumi.set(self, "ip_of_trust_subnet_for_udr", value)


@pulumi.input_type
class VwanConfigurationArgs:
    def __init__(__self__, *,
                 v_hub: pulumi.Input['IPAddressSpaceArgs'],
                 ip_of_trust_subnet_for_udr: Optional[pulumi.Input['IPAddressArgs']] = None,
                 network_virtual_appliance_id: Optional[pulumi.Input[str]] = None,
                 trust_subnet: Optional[pulumi.Input['IPAddressSpaceArgs']] = None,
                 un_trust_subnet: Optional[pulumi.Input['IPAddressSpaceArgs']] = None):
        """
        VwanInfo for Firewall Networking
        :param pulumi.Input['IPAddressSpaceArgs'] v_hub: vHub Address
        :param pulumi.Input['IPAddressArgs'] ip_of_trust_subnet_for_udr: IP of trust subnet for UDR
        :param pulumi.Input[str] network_virtual_appliance_id: Network Virtual Appliance resource ID 
        :param pulumi.Input['IPAddressSpaceArgs'] trust_subnet: Trust Subnet
        :param pulumi.Input['IPAddressSpaceArgs'] un_trust_subnet: Untrust Subnet
        """
        pulumi.set(__self__, "v_hub", v_hub)
        if ip_of_trust_subnet_for_udr is not None:
            pulumi.set(__self__, "ip_of_trust_subnet_for_udr", ip_of_trust_subnet_for_udr)
        if network_virtual_appliance_id is not None:
            pulumi.set(__self__, "network_virtual_appliance_id", network_virtual_appliance_id)
        if trust_subnet is not None:
            pulumi.set(__self__, "trust_subnet", trust_subnet)
        if un_trust_subnet is not None:
            pulumi.set(__self__, "un_trust_subnet", un_trust_subnet)

    @property
    @pulumi.getter(name="vHub")
    def v_hub(self) -> pulumi.Input['IPAddressSpaceArgs']:
        """
        vHub Address
        """
        return pulumi.get(self, "v_hub")

    @v_hub.setter
    def v_hub(self, value: pulumi.Input['IPAddressSpaceArgs']):
        pulumi.set(self, "v_hub", value)

    @property
    @pulumi.getter(name="ipOfTrustSubnetForUdr")
    def ip_of_trust_subnet_for_udr(self) -> Optional[pulumi.Input['IPAddressArgs']]:
        """
        IP of trust subnet for UDR
        """
        return pulumi.get(self, "ip_of_trust_subnet_for_udr")

    @ip_of_trust_subnet_for_udr.setter
    def ip_of_trust_subnet_for_udr(self, value: Optional[pulumi.Input['IPAddressArgs']]):
        pulumi.set(self, "ip_of_trust_subnet_for_udr", value)

    @property
    @pulumi.getter(name="networkVirtualApplianceId")
    def network_virtual_appliance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Network Virtual Appliance resource ID 
        """
        return pulumi.get(self, "network_virtual_appliance_id")

    @network_virtual_appliance_id.setter
    def network_virtual_appliance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_virtual_appliance_id", value)

    @property
    @pulumi.getter(name="trustSubnet")
    def trust_subnet(self) -> Optional[pulumi.Input['IPAddressSpaceArgs']]:
        """
        Trust Subnet
        """
        return pulumi.get(self, "trust_subnet")

    @trust_subnet.setter
    def trust_subnet(self, value: Optional[pulumi.Input['IPAddressSpaceArgs']]):
        pulumi.set(self, "trust_subnet", value)

    @property
    @pulumi.getter(name="unTrustSubnet")
    def un_trust_subnet(self) -> Optional[pulumi.Input['IPAddressSpaceArgs']]:
        """
        Untrust Subnet
        """
        return pulumi.get(self, "un_trust_subnet")

    @un_trust_subnet.setter
    def un_trust_subnet(self, value: Optional[pulumi.Input['IPAddressSpaceArgs']]):
        pulumi.set(self, "un_trust_subnet", value)


