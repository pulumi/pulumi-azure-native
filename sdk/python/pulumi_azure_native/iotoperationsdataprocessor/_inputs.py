# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DatasetPropertyKeyArgs',
    'DatasetPropertyKeyArgsDict',
    'ExtendedLocationArgs',
    'ExtendedLocationArgsDict',
    'PipelineInputArgs',
    'PipelineInputArgsDict',
    'PipelineStageArgs',
    'PipelineStageArgsDict',
]

MYPY = False

if not MYPY:
    class DatasetPropertyKeyArgsDict(TypedDict):
        """
        Key that can be used for joining on enrich.
        """
        path: pulumi.Input[_builtins.str]
        """
        Path to the input value from the message.
        """
        primary_key: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If true the property will be used as a primary key. At most one primary key can exists.
        """
elif False:
    DatasetPropertyKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetPropertyKeyArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 primary_key: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Key that can be used for joining on enrich.
        :param pulumi.Input[_builtins.str] path: Path to the input value from the message.
        :param pulumi.Input[_builtins.bool] primary_key: If true the property will be used as a primary key. At most one primary key can exists.
        """
        pulumi.set(__self__, "path", path)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Path to the input value from the message.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true the property will be used as a primary key. At most one primary key can exists.
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "primary_key", value)


if not MYPY:
    class ExtendedLocationArgsDict(TypedDict):
        """
        Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
        """
        name: pulumi.Input[_builtins.str]
        """
        The name of the extended location.
        """
        type: pulumi.Input[_builtins.str]
        """
        The type of the extended location.
        """
elif False:
    ExtendedLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str]):
        """
        Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
        :param pulumi.Input[_builtins.str] name: The name of the extended location.
        :param pulumi.Input[_builtins.str] type: The type of the extended location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PipelineInputArgsDict(TypedDict):
        """
        Stage configuration for Pipeline input stage.
        """
        next: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Next stage in the pipeline.
        """
        type: pulumi.Input[_builtins.str]
        """
        ARM resource type.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Description for stage.
        """
elif False:
    PipelineInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineInputArgs:
    def __init__(__self__, *,
                 next: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Stage configuration for Pipeline input stage.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] next: Next stage in the pipeline.
        :param pulumi.Input[_builtins.str] type: ARM resource type.
        :param pulumi.Input[_builtins.str] description: Description for stage.
        """
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def next(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Next stage in the pipeline.
        """
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "next", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        ARM resource type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description for stage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class PipelineStageArgsDict(TypedDict):
        """
        Stage configurations for all Pipeline processing and output stages.
        """
        type: pulumi.Input[_builtins.str]
        """
        ARM resource type.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Description for stage.
        """
        next: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Next stage in the pipeline. Not required if output stage.
        """
elif False:
    PipelineStageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineStageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 next: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Stage configurations for all Pipeline processing and output stages.
        :param pulumi.Input[_builtins.str] type: ARM resource type.
        :param pulumi.Input[_builtins.str] description: Description for stage.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] next: Next stage in the pipeline. Not required if output stage.
        """
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if next is not None:
            pulumi.set(__self__, "next", next)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        ARM resource type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description for stage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Next stage in the pipeline. Not required if output stage.
        """
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "next", value)


