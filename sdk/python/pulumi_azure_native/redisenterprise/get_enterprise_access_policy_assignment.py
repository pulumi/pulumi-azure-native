# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEnterpriseAccessPolicyAssignmentResult',
    'AwaitableGetEnterpriseAccessPolicyAssignmentResult',
    'get_enterprise_access_policy_assignment',
    'get_enterprise_access_policy_assignment_output',
]

@pulumi.output_type
class GetEnterpriseAccessPolicyAssignmentResult:
    """
    Describes the access policy assignment of Redis Enterprise database
    """
    def __init__(__self__, access_policy_name=None, azure_api_version=None, id=None, name=None, provisioning_state=None, type=None, user=None):
        if access_policy_name and not isinstance(access_policy_name, str):
            raise TypeError("Expected argument 'access_policy_name' to be a str")
        pulumi.set(__self__, "access_policy_name", access_policy_name)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user and not isinstance(user, dict):
            raise TypeError("Expected argument 'user' to be a dict")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="accessPolicyName")
    def access_policy_name(self) -> str:
        """
        Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
        """
        return pulumi.get(self, "access_policy_name")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Current provisioning status of the access policy assignment.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> 'outputs.AccessPolicyAssignmentPropertiesResponseUser':
        """
        The user associated with the access policy.
        """
        return pulumi.get(self, "user")


class AwaitableGetEnterpriseAccessPolicyAssignmentResult(GetEnterpriseAccessPolicyAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnterpriseAccessPolicyAssignmentResult(
            access_policy_name=self.access_policy_name,
            azure_api_version=self.azure_api_version,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            type=self.type,
            user=self.user)


def get_enterprise_access_policy_assignment(access_policy_assignment_name: Optional[str] = None,
                                            cluster_name: Optional[str] = None,
                                            database_name: Optional[str] = None,
                                            resource_group_name: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnterpriseAccessPolicyAssignmentResult:
    """
    Gets information about access policy assignment for database.
    Azure REST API version: 2024-09-01-preview.


    :param str access_policy_assignment_name: The name of the Redis Enterprise database access policy assignment.
    :param str cluster_name: The name of the Redis Enterprise cluster.
    :param str database_name: The name of the Redis Enterprise database.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['accessPolicyAssignmentName'] = access_policy_assignment_name
    __args__['clusterName'] = cluster_name
    __args__['databaseName'] = database_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:redisenterprise:getEnterpriseAccessPolicyAssignment', __args__, opts=opts, typ=GetEnterpriseAccessPolicyAssignmentResult).value

    return AwaitableGetEnterpriseAccessPolicyAssignmentResult(
        access_policy_name=pulumi.get(__ret__, 'access_policy_name'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        type=pulumi.get(__ret__, 'type'),
        user=pulumi.get(__ret__, 'user'))
def get_enterprise_access_policy_assignment_output(access_policy_assignment_name: Optional[pulumi.Input[str]] = None,
                                                   cluster_name: Optional[pulumi.Input[str]] = None,
                                                   database_name: Optional[pulumi.Input[str]] = None,
                                                   resource_group_name: Optional[pulumi.Input[str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnterpriseAccessPolicyAssignmentResult]:
    """
    Gets information about access policy assignment for database.
    Azure REST API version: 2024-09-01-preview.


    :param str access_policy_assignment_name: The name of the Redis Enterprise database access policy assignment.
    :param str cluster_name: The name of the Redis Enterprise cluster.
    :param str database_name: The name of the Redis Enterprise database.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['accessPolicyAssignmentName'] = access_policy_assignment_name
    __args__['clusterName'] = cluster_name
    __args__['databaseName'] = database_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:redisenterprise:getEnterpriseAccessPolicyAssignment', __args__, opts=opts, typ=GetEnterpriseAccessPolicyAssignmentResult)
    return __ret__.apply(lambda __response__: GetEnterpriseAccessPolicyAssignmentResult(
        access_policy_name=pulumi.get(__response__, 'access_policy_name'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        type=pulumi.get(__response__, 'type'),
        user=pulumi.get(__response__, 'user')))
