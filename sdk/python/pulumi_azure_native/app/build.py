# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BuildArgs', 'Build']

@pulumi.input_type
class BuildArgs:
    def __init__(__self__, *,
                 builder_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 build_name: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['BuildConfigurationArgs']] = None,
                 destination_container_registry: Optional[pulumi.Input['ContainerRegistryWithCustomImageArgs']] = None):
        """
        The set of arguments for constructing a Build resource.
        :param pulumi.Input[str] builder_name: The name of the builder.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] build_name: The name of a build.
        :param pulumi.Input['BuildConfigurationArgs'] configuration: Configuration of the build.
        :param pulumi.Input['ContainerRegistryWithCustomImageArgs'] destination_container_registry: Container registry that the final image will be uploaded to.
        """
        pulumi.set(__self__, "builder_name", builder_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if build_name is not None:
            pulumi.set(__self__, "build_name", build_name)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if destination_container_registry is not None:
            pulumi.set(__self__, "destination_container_registry", destination_container_registry)

    @property
    @pulumi.getter(name="builderName")
    def builder_name(self) -> pulumi.Input[str]:
        """
        The name of the builder.
        """
        return pulumi.get(self, "builder_name")

    @builder_name.setter
    def builder_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "builder_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="buildName")
    def build_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a build.
        """
        return pulumi.get(self, "build_name")

    @build_name.setter
    def build_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_name", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['BuildConfigurationArgs']]:
        """
        Configuration of the build.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['BuildConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="destinationContainerRegistry")
    def destination_container_registry(self) -> Optional[pulumi.Input['ContainerRegistryWithCustomImageArgs']]:
        """
        Container registry that the final image will be uploaded to.
        """
        return pulumi.get(self, "destination_container_registry")

    @destination_container_registry.setter
    def destination_container_registry(self, value: Optional[pulumi.Input['ContainerRegistryWithCustomImageArgs']]):
        pulumi.set(self, "destination_container_registry", value)


class Build(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 build_name: Optional[pulumi.Input[str]] = None,
                 builder_name: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['BuildConfigurationArgs']]] = None,
                 destination_container_registry: Optional[pulumi.Input[pulumi.InputType['ContainerRegistryWithCustomImageArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Information pertaining to an individual build.
        Azure REST API version: 2023-08-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] build_name: The name of a build.
        :param pulumi.Input[str] builder_name: The name of the builder.
        :param pulumi.Input[pulumi.InputType['BuildConfigurationArgs']] configuration: Configuration of the build.
        :param pulumi.Input[pulumi.InputType['ContainerRegistryWithCustomImageArgs']] destination_container_registry: Container registry that the final image will be uploaded to.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Information pertaining to an individual build.
        Azure REST API version: 2023-08-01-preview.

        :param str resource_name: The name of the resource.
        :param BuildArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 build_name: Optional[pulumi.Input[str]] = None,
                 builder_name: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['BuildConfigurationArgs']]] = None,
                 destination_container_registry: Optional[pulumi.Input[pulumi.InputType['ContainerRegistryWithCustomImageArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildArgs.__new__(BuildArgs)

            __props__.__dict__["build_name"] = build_name
            if builder_name is None and not opts.urn:
                raise TypeError("Missing required property 'builder_name'")
            __props__.__dict__["builder_name"] = builder_name
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["destination_container_registry"] = destination_container_registry
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["build_status"] = None
            __props__.__dict__["log_stream_endpoint"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["token_endpoint"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["upload_endpoint"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:app/v20230801preview:Build")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Build, __self__).__init__(
            'azure-native:app:Build',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Build':
        """
        Get an existing Build resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BuildArgs.__new__(BuildArgs)

        __props__.__dict__["build_status"] = None
        __props__.__dict__["configuration"] = None
        __props__.__dict__["destination_container_registry"] = None
        __props__.__dict__["log_stream_endpoint"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["token_endpoint"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["upload_endpoint"] = None
        return Build(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="buildStatus")
    def build_status(self) -> pulumi.Output[str]:
        """
        Status of the build once it has been provisioned.
        """
        return pulumi.get(self, "build_status")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional['outputs.BuildConfigurationResponse']]:
        """
        Configuration of the build.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="destinationContainerRegistry")
    def destination_container_registry(self) -> pulumi.Output[Optional['outputs.ContainerRegistryWithCustomImageResponse']]:
        """
        Container registry that the final image will be uploaded to.
        """
        return pulumi.get(self, "destination_container_registry")

    @property
    @pulumi.getter(name="logStreamEndpoint")
    def log_stream_endpoint(self) -> pulumi.Output[str]:
        """
        Endpoint from which the build logs can be streamed.
        """
        return pulumi.get(self, "log_stream_endpoint")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Build provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Output[str]:
        """
        Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uploadEndpoint")
    def upload_endpoint(self) -> pulumi.Output[str]:
        """
        Endpoint to which the source code should be uploaded.
        """
        return pulumi.get(self, "upload_endpoint")

