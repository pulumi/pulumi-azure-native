# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ContainerAppsSessionPoolArgs', 'ContainerAppsSessionPool']

@pulumi.input_type
class ContainerAppsSessionPoolArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 container_type: Optional[pulumi.Input[Union[str, 'ContainerType']]] = None,
                 custom_container_template: Optional[pulumi.Input['CustomContainerTemplateArgs']] = None,
                 dynamic_pool_configuration: Optional[pulumi.Input['DynamicPoolConfigurationArgs']] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 pool_management_type: Optional[pulumi.Input[Union[str, 'PoolManagementType']]] = None,
                 scale_configuration: Optional[pulumi.Input['ScaleConfigurationArgs']] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['SessionPoolSecretArgs']]]] = None,
                 session_network_configuration: Optional[pulumi.Input['SessionNetworkConfigurationArgs']] = None,
                 session_pool_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ContainerAppsSessionPool resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'ContainerType']] container_type: The container type of the sessions.
        :param pulumi.Input['CustomContainerTemplateArgs'] custom_container_template: The custom container configuration if the containerType is CustomContainer.
        :param pulumi.Input['DynamicPoolConfigurationArgs'] dynamic_pool_configuration: The pool configuration if the poolManagementType is dynamic.
        :param pulumi.Input[str] environment_id: Resource ID of the session pool's environment.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Union[str, 'PoolManagementType']] pool_management_type: The pool management type of the session pool.
        :param pulumi.Input['ScaleConfigurationArgs'] scale_configuration: The scale configuration of the session pool.
        :param pulumi.Input[Sequence[pulumi.Input['SessionPoolSecretArgs']]] secrets: The secrets of the session pool.
        :param pulumi.Input['SessionNetworkConfigurationArgs'] session_network_configuration: The network configuration of the sessions in the session pool.
        :param pulumi.Input[str] session_pool_name: Name of the session pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if container_type is not None:
            pulumi.set(__self__, "container_type", container_type)
        if custom_container_template is not None:
            pulumi.set(__self__, "custom_container_template", custom_container_template)
        if dynamic_pool_configuration is not None:
            pulumi.set(__self__, "dynamic_pool_configuration", dynamic_pool_configuration)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if pool_management_type is not None:
            pulumi.set(__self__, "pool_management_type", pool_management_type)
        if scale_configuration is not None:
            pulumi.set(__self__, "scale_configuration", scale_configuration)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if session_network_configuration is not None:
            pulumi.set(__self__, "session_network_configuration", session_network_configuration)
        if session_pool_name is not None:
            pulumi.set(__self__, "session_pool_name", session_pool_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> Optional[pulumi.Input[Union[str, 'ContainerType']]]:
        """
        The container type of the sessions.
        """
        return pulumi.get(self, "container_type")

    @container_type.setter
    def container_type(self, value: Optional[pulumi.Input[Union[str, 'ContainerType']]]):
        pulumi.set(self, "container_type", value)

    @property
    @pulumi.getter(name="customContainerTemplate")
    def custom_container_template(self) -> Optional[pulumi.Input['CustomContainerTemplateArgs']]:
        """
        The custom container configuration if the containerType is CustomContainer.
        """
        return pulumi.get(self, "custom_container_template")

    @custom_container_template.setter
    def custom_container_template(self, value: Optional[pulumi.Input['CustomContainerTemplateArgs']]):
        pulumi.set(self, "custom_container_template", value)

    @property
    @pulumi.getter(name="dynamicPoolConfiguration")
    def dynamic_pool_configuration(self) -> Optional[pulumi.Input['DynamicPoolConfigurationArgs']]:
        """
        The pool configuration if the poolManagementType is dynamic.
        """
        return pulumi.get(self, "dynamic_pool_configuration")

    @dynamic_pool_configuration.setter
    def dynamic_pool_configuration(self, value: Optional[pulumi.Input['DynamicPoolConfigurationArgs']]):
        pulumi.set(self, "dynamic_pool_configuration", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID of the session pool's environment.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="poolManagementType")
    def pool_management_type(self) -> Optional[pulumi.Input[Union[str, 'PoolManagementType']]]:
        """
        The pool management type of the session pool.
        """
        return pulumi.get(self, "pool_management_type")

    @pool_management_type.setter
    def pool_management_type(self, value: Optional[pulumi.Input[Union[str, 'PoolManagementType']]]):
        pulumi.set(self, "pool_management_type", value)

    @property
    @pulumi.getter(name="scaleConfiguration")
    def scale_configuration(self) -> Optional[pulumi.Input['ScaleConfigurationArgs']]:
        """
        The scale configuration of the session pool.
        """
        return pulumi.get(self, "scale_configuration")

    @scale_configuration.setter
    def scale_configuration(self, value: Optional[pulumi.Input['ScaleConfigurationArgs']]):
        pulumi.set(self, "scale_configuration", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SessionPoolSecretArgs']]]]:
        """
        The secrets of the session pool.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SessionPoolSecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="sessionNetworkConfiguration")
    def session_network_configuration(self) -> Optional[pulumi.Input['SessionNetworkConfigurationArgs']]:
        """
        The network configuration of the sessions in the session pool.
        """
        return pulumi.get(self, "session_network_configuration")

    @session_network_configuration.setter
    def session_network_configuration(self, value: Optional[pulumi.Input['SessionNetworkConfigurationArgs']]):
        pulumi.set(self, "session_network_configuration", value)

    @property
    @pulumi.getter(name="sessionPoolName")
    def session_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the session pool.
        """
        return pulumi.get(self, "session_pool_name")

    @session_pool_name.setter
    def session_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pool_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class ContainerAppsSessionPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_type: Optional[pulumi.Input[Union[str, 'ContainerType']]] = None,
                 custom_container_template: Optional[pulumi.Input[Union['CustomContainerTemplateArgs', 'CustomContainerTemplateArgsDict']]] = None,
                 dynamic_pool_configuration: Optional[pulumi.Input[Union['DynamicPoolConfigurationArgs', 'DynamicPoolConfigurationArgsDict']]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 pool_management_type: Optional[pulumi.Input[Union[str, 'PoolManagementType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scale_configuration: Optional[pulumi.Input[Union['ScaleConfigurationArgs', 'ScaleConfigurationArgsDict']]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SessionPoolSecretArgs', 'SessionPoolSecretArgsDict']]]]] = None,
                 session_network_configuration: Optional[pulumi.Input[Union['SessionNetworkConfigurationArgs', 'SessionNetworkConfigurationArgsDict']]] = None,
                 session_pool_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Container App session pool.
        Azure REST API version: 2024-02-02-preview.

        Other available API versions: 2024-08-02-preview, 2024-10-02-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[str, 'ContainerType']] container_type: The container type of the sessions.
        :param pulumi.Input[Union['CustomContainerTemplateArgs', 'CustomContainerTemplateArgsDict']] custom_container_template: The custom container configuration if the containerType is CustomContainer.
        :param pulumi.Input[Union['DynamicPoolConfigurationArgs', 'DynamicPoolConfigurationArgsDict']] dynamic_pool_configuration: The pool configuration if the poolManagementType is dynamic.
        :param pulumi.Input[str] environment_id: Resource ID of the session pool's environment.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Union[str, 'PoolManagementType']] pool_management_type: The pool management type of the session pool.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union['ScaleConfigurationArgs', 'ScaleConfigurationArgsDict']] scale_configuration: The scale configuration of the session pool.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SessionPoolSecretArgs', 'SessionPoolSecretArgsDict']]]] secrets: The secrets of the session pool.
        :param pulumi.Input[Union['SessionNetworkConfigurationArgs', 'SessionNetworkConfigurationArgsDict']] session_network_configuration: The network configuration of the sessions in the session pool.
        :param pulumi.Input[str] session_pool_name: Name of the session pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerAppsSessionPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Container App session pool.
        Azure REST API version: 2024-02-02-preview.

        Other available API versions: 2024-08-02-preview, 2024-10-02-preview.

        :param str resource_name: The name of the resource.
        :param ContainerAppsSessionPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerAppsSessionPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_type: Optional[pulumi.Input[Union[str, 'ContainerType']]] = None,
                 custom_container_template: Optional[pulumi.Input[Union['CustomContainerTemplateArgs', 'CustomContainerTemplateArgsDict']]] = None,
                 dynamic_pool_configuration: Optional[pulumi.Input[Union['DynamicPoolConfigurationArgs', 'DynamicPoolConfigurationArgsDict']]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 pool_management_type: Optional[pulumi.Input[Union[str, 'PoolManagementType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scale_configuration: Optional[pulumi.Input[Union['ScaleConfigurationArgs', 'ScaleConfigurationArgsDict']]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SessionPoolSecretArgs', 'SessionPoolSecretArgsDict']]]]] = None,
                 session_network_configuration: Optional[pulumi.Input[Union['SessionNetworkConfigurationArgs', 'SessionNetworkConfigurationArgsDict']]] = None,
                 session_pool_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerAppsSessionPoolArgs.__new__(ContainerAppsSessionPoolArgs)

            __props__.__dict__["container_type"] = container_type
            __props__.__dict__["custom_container_template"] = custom_container_template
            __props__.__dict__["dynamic_pool_configuration"] = dynamic_pool_configuration
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["location"] = location
            __props__.__dict__["pool_management_type"] = pool_management_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["scale_configuration"] = scale_configuration
            __props__.__dict__["secrets"] = secrets
            __props__.__dict__["session_network_configuration"] = session_network_configuration
            __props__.__dict__["session_pool_name"] = session_pool_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["node_count"] = None
            __props__.__dict__["pool_management_endpoint"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:app/v20240202preview:ContainerAppsSessionPool"), pulumi.Alias(type_="azure-native:app/v20240802preview:ContainerAppsSessionPool"), pulumi.Alias(type_="azure-native:app/v20241002preview:ContainerAppsSessionPool")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ContainerAppsSessionPool, __self__).__init__(
            'azure-native:app:ContainerAppsSessionPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ContainerAppsSessionPool':
        """
        Get an existing ContainerAppsSessionPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ContainerAppsSessionPoolArgs.__new__(ContainerAppsSessionPoolArgs)

        __props__.__dict__["container_type"] = None
        __props__.__dict__["custom_container_template"] = None
        __props__.__dict__["dynamic_pool_configuration"] = None
        __props__.__dict__["environment_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["node_count"] = None
        __props__.__dict__["pool_management_endpoint"] = None
        __props__.__dict__["pool_management_type"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["scale_configuration"] = None
        __props__.__dict__["secrets"] = None
        __props__.__dict__["session_network_configuration"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return ContainerAppsSessionPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> pulumi.Output[Optional[str]]:
        """
        The container type of the sessions.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter(name="customContainerTemplate")
    def custom_container_template(self) -> pulumi.Output[Optional['outputs.CustomContainerTemplateResponse']]:
        """
        The custom container configuration if the containerType is CustomContainer.
        """
        return pulumi.get(self, "custom_container_template")

    @property
    @pulumi.getter(name="dynamicPoolConfiguration")
    def dynamic_pool_configuration(self) -> pulumi.Output[Optional['outputs.DynamicPoolConfigurationResponse']]:
        """
        The pool configuration if the poolManagementType is dynamic.
        """
        return pulumi.get(self, "dynamic_pool_configuration")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[Optional[str]]:
        """
        Resource ID of the session pool's environment.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        """
        The number of nodes the session pool is using.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="poolManagementEndpoint")
    def pool_management_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint to manage the pool.
        """
        return pulumi.get(self, "pool_management_endpoint")

    @property
    @pulumi.getter(name="poolManagementType")
    def pool_management_type(self) -> pulumi.Output[Optional[str]]:
        """
        The pool management type of the session pool.
        """
        return pulumi.get(self, "pool_management_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the session pool.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="scaleConfiguration")
    def scale_configuration(self) -> pulumi.Output[Optional['outputs.ScaleConfigurationResponse']]:
        """
        The scale configuration of the session pool.
        """
        return pulumi.get(self, "scale_configuration")

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Output[Optional[Sequence['outputs.SessionPoolSecretResponse']]]:
        """
        The secrets of the session pool.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="sessionNetworkConfiguration")
    def session_network_configuration(self) -> pulumi.Output[Optional['outputs.SessionNetworkConfigurationResponse']]:
        """
        The network configuration of the sessions in the session pool.
        """
        return pulumi.get(self, "session_network_configuration")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

