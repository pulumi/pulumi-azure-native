# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = ['LogicAppArgs', 'LogicApp']

@pulumi.input_type
class LogicAppArgs:
    def __init__(__self__, *,
                 container_app_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 logic_app_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogicApp resource.
        :param pulumi.Input[str] container_app_name: Name of the Container App.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] logic_app_name: Name of the Logic App, the extension resource.
        """
        pulumi.set(__self__, "container_app_name", container_app_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if logic_app_name is not None:
            pulumi.set(__self__, "logic_app_name", logic_app_name)

    @property
    @pulumi.getter(name="containerAppName")
    def container_app_name(self) -> pulumi.Input[str]:
        """
        Name of the Container App.
        """
        return pulumi.get(self, "container_app_name")

    @container_app_name.setter
    def container_app_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_app_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="logicAppName")
    def logic_app_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Logic App, the extension resource.
        """
        return pulumi.get(self, "logic_app_name")

    @logic_app_name.setter
    def logic_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logic_app_name", value)


class LogicApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_app_name: Optional[pulumi.Input[str]] = None,
                 logic_app_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A logic app extension resource
        Azure REST API version: 2024-02-02-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] container_app_name: Name of the Container App.
        :param pulumi.Input[str] logic_app_name: Name of the Logic App, the extension resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogicAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A logic app extension resource
        Azure REST API version: 2024-02-02-preview.

        :param str resource_name: The name of the resource.
        :param LogicAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogicAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_app_name: Optional[pulumi.Input[str]] = None,
                 logic_app_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogicAppArgs.__new__(LogicAppArgs)

            if container_app_name is None and not opts.urn:
                raise TypeError("Missing required property 'container_app_name'")
            __props__.__dict__["container_app_name"] = container_app_name
            __props__.__dict__["logic_app_name"] = logic_app_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:app/v20240202preview:LogicApp")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(LogicApp, __self__).__init__(
            'azure-native:app:LogicApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'LogicApp':
        """
        Get an existing LogicApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = LogicAppArgs.__new__(LogicAppArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return LogicApp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

