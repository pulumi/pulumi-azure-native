# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetContainerAppsSessionPoolResult',
    'AwaitableGetContainerAppsSessionPoolResult',
    'get_container_apps_session_pool',
    'get_container_apps_session_pool_output',
]

@pulumi.output_type
class GetContainerAppsSessionPoolResult:
    """
    Container App session pool.
    """
    def __init__(__self__, container_type=None, custom_container_template=None, dynamic_pool_configuration=None, environment_id=None, id=None, location=None, name=None, node_count=None, pool_management_endpoint=None, pool_management_type=None, provisioning_state=None, scale_configuration=None, secrets=None, session_network_configuration=None, system_data=None, tags=None, type=None):
        if container_type and not isinstance(container_type, str):
            raise TypeError("Expected argument 'container_type' to be a str")
        pulumi.set(__self__, "container_type", container_type)
        if custom_container_template and not isinstance(custom_container_template, dict):
            raise TypeError("Expected argument 'custom_container_template' to be a dict")
        pulumi.set(__self__, "custom_container_template", custom_container_template)
        if dynamic_pool_configuration and not isinstance(dynamic_pool_configuration, dict):
            raise TypeError("Expected argument 'dynamic_pool_configuration' to be a dict")
        pulumi.set(__self__, "dynamic_pool_configuration", dynamic_pool_configuration)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if pool_management_endpoint and not isinstance(pool_management_endpoint, str):
            raise TypeError("Expected argument 'pool_management_endpoint' to be a str")
        pulumi.set(__self__, "pool_management_endpoint", pool_management_endpoint)
        if pool_management_type and not isinstance(pool_management_type, str):
            raise TypeError("Expected argument 'pool_management_type' to be a str")
        pulumi.set(__self__, "pool_management_type", pool_management_type)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if scale_configuration and not isinstance(scale_configuration, dict):
            raise TypeError("Expected argument 'scale_configuration' to be a dict")
        pulumi.set(__self__, "scale_configuration", scale_configuration)
        if secrets and not isinstance(secrets, list):
            raise TypeError("Expected argument 'secrets' to be a list")
        pulumi.set(__self__, "secrets", secrets)
        if session_network_configuration and not isinstance(session_network_configuration, dict):
            raise TypeError("Expected argument 'session_network_configuration' to be a dict")
        pulumi.set(__self__, "session_network_configuration", session_network_configuration)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> Optional[str]:
        """
        The container type of the sessions.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter(name="customContainerTemplate")
    def custom_container_template(self) -> Optional['outputs.CustomContainerTemplateResponse']:
        """
        The custom container configuration if the containerType is CustomContainer.
        """
        return pulumi.get(self, "custom_container_template")

    @property
    @pulumi.getter(name="dynamicPoolConfiguration")
    def dynamic_pool_configuration(self) -> Optional['outputs.DynamicPoolConfigurationResponse']:
        """
        The pool configuration if the poolManagementType is dynamic.
        """
        return pulumi.get(self, "dynamic_pool_configuration")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[str]:
        """
        Resource ID of the session pool's environment.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        The number of nodes the session pool is using.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="poolManagementEndpoint")
    def pool_management_endpoint(self) -> str:
        """
        The endpoint to manage the pool.
        """
        return pulumi.get(self, "pool_management_endpoint")

    @property
    @pulumi.getter(name="poolManagementType")
    def pool_management_type(self) -> Optional[str]:
        """
        The pool management type of the session pool.
        """
        return pulumi.get(self, "pool_management_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the session pool.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="scaleConfiguration")
    def scale_configuration(self) -> Optional['outputs.ScaleConfigurationResponse']:
        """
        The scale configuration of the session pool.
        """
        return pulumi.get(self, "scale_configuration")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.SessionPoolSecretResponse']]:
        """
        The secrets of the session pool.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="sessionNetworkConfiguration")
    def session_network_configuration(self) -> Optional['outputs.SessionNetworkConfigurationResponse']:
        """
        The network configuration of the sessions in the session pool.
        """
        return pulumi.get(self, "session_network_configuration")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetContainerAppsSessionPoolResult(GetContainerAppsSessionPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerAppsSessionPoolResult(
            container_type=self.container_type,
            custom_container_template=self.custom_container_template,
            dynamic_pool_configuration=self.dynamic_pool_configuration,
            environment_id=self.environment_id,
            id=self.id,
            location=self.location,
            name=self.name,
            node_count=self.node_count,
            pool_management_endpoint=self.pool_management_endpoint,
            pool_management_type=self.pool_management_type,
            provisioning_state=self.provisioning_state,
            scale_configuration=self.scale_configuration,
            secrets=self.secrets,
            session_network_configuration=self.session_network_configuration,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_container_apps_session_pool(resource_group_name: Optional[str] = None,
                                    session_pool_name: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerAppsSessionPoolResult:
    """
    Container App session pool.
    Azure REST API version: 2024-02-02-preview.

    Other available API versions: 2024-08-02-preview, 2024-10-02-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str session_pool_name: Name of the session pool.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['sessionPoolName'] = session_pool_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:app:getContainerAppsSessionPool', __args__, opts=opts, typ=GetContainerAppsSessionPoolResult).value

    return AwaitableGetContainerAppsSessionPoolResult(
        container_type=pulumi.get(__ret__, 'container_type'),
        custom_container_template=pulumi.get(__ret__, 'custom_container_template'),
        dynamic_pool_configuration=pulumi.get(__ret__, 'dynamic_pool_configuration'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        node_count=pulumi.get(__ret__, 'node_count'),
        pool_management_endpoint=pulumi.get(__ret__, 'pool_management_endpoint'),
        pool_management_type=pulumi.get(__ret__, 'pool_management_type'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        scale_configuration=pulumi.get(__ret__, 'scale_configuration'),
        secrets=pulumi.get(__ret__, 'secrets'),
        session_network_configuration=pulumi.get(__ret__, 'session_network_configuration'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_container_apps_session_pool_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                                           session_pool_name: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerAppsSessionPoolResult]:
    """
    Container App session pool.
    Azure REST API version: 2024-02-02-preview.

    Other available API versions: 2024-08-02-preview, 2024-10-02-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str session_pool_name: Name of the session pool.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['sessionPoolName'] = session_pool_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:app:getContainerAppsSessionPool', __args__, opts=opts, typ=GetContainerAppsSessionPoolResult)
    return __ret__.apply(lambda __response__: GetContainerAppsSessionPoolResult(
        container_type=pulumi.get(__response__, 'container_type'),
        custom_container_template=pulumi.get(__response__, 'custom_container_template'),
        dynamic_pool_configuration=pulumi.get(__response__, 'dynamic_pool_configuration'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        node_count=pulumi.get(__response__, 'node_count'),
        pool_management_endpoint=pulumi.get(__response__, 'pool_management_endpoint'),
        pool_management_type=pulumi.get(__response__, 'pool_management_type'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        scale_configuration=pulumi.get(__response__, 'scale_configuration'),
        secrets=pulumi.get(__response__, 'secrets'),
        session_network_configuration=pulumi.get(__response__, 'session_network_configuration'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
