# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'DotNetComponentConfigurationPropertyArgs',
    'DotNetComponentConfigurationPropertyArgsDict',
    'DotNetComponentServiceBindArgs',
    'DotNetComponentServiceBindArgsDict',
    'JavaComponentConfigurationPropertyArgs',
    'JavaComponentConfigurationPropertyArgsDict',
    'JavaComponentServiceBindArgs',
    'JavaComponentServiceBindArgsDict',
]

MYPY = False

if not MYPY:
    class DotNetComponentConfigurationPropertyArgsDict(TypedDict):
        """
        Configuration properties for a .NET Component
        """
        property_name: NotRequired[pulumi.Input[str]]
        """
        The name of the property
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The value of the property
        """
elif False:
    DotNetComponentConfigurationPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DotNetComponentConfigurationPropertyArgs:
    def __init__(__self__, *,
                 property_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Configuration properties for a .NET Component
        :param pulumi.Input[str] property_name: The name of the property
        :param pulumi.Input[str] value: The value of the property
        """
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the property
        """
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the property
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DotNetComponentServiceBindArgsDict(TypedDict):
        """
        Configuration to bind a .NET Component to another .NET Component
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the service bind
        """
        service_id: NotRequired[pulumi.Input[str]]
        """
        Resource id of the target service
        """
elif False:
    DotNetComponentServiceBindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DotNetComponentServiceBindArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration to bind a .NET Component to another .NET Component
        :param pulumi.Input[str] name: Name of the service bind
        :param pulumi.Input[str] service_id: Resource id of the target service
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service bind
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource id of the target service
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


if not MYPY:
    class JavaComponentConfigurationPropertyArgsDict(TypedDict):
        """
        Configuration properties for a Java Component
        """
        property_name: NotRequired[pulumi.Input[str]]
        """
        The name of the property
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The value of the property
        """
elif False:
    JavaComponentConfigurationPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JavaComponentConfigurationPropertyArgs:
    def __init__(__self__, *,
                 property_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Configuration properties for a Java Component
        :param pulumi.Input[str] property_name: The name of the property
        :param pulumi.Input[str] value: The value of the property
        """
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the property
        """
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the property
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class JavaComponentServiceBindArgsDict(TypedDict):
        """
        Configuration to bind a Java Component to another Java Component
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the service bind
        """
        service_id: NotRequired[pulumi.Input[str]]
        """
        Resource id of the target service
        """
elif False:
    JavaComponentServiceBindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JavaComponentServiceBindArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration to bind a Java Component to another Java Component
        :param pulumi.Input[str] name: Name of the service bind
        :param pulumi.Input[str] service_id: Resource id of the target service
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service bind
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource id of the target service
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


