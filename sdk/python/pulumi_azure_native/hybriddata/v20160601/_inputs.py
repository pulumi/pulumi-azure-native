# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'CustomerSecretArgs',
    'DataStorePropertiesArgs',
    'JobDefinitionPropertiesArgs',
    'ScheduleArgs',
    'SkuArgs',
]

@pulumi.input_type
class CustomerSecretArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input['SupportedAlgorithm'],
                 key_identifier: pulumi.Input[str],
                 key_value: pulumi.Input[str]):
        """
        The pair of customer secret.
        :param pulumi.Input['SupportedAlgorithm'] algorithm: The encryption algorithm used to encrypt data.
        :param pulumi.Input[str] key_identifier: The identifier to the data service input object which this secret corresponds to.
        :param pulumi.Input[str] key_value: It contains the encrypted customer secret.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "key_identifier", key_identifier)
        pulumi.set(__self__, "key_value", key_value)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input['SupportedAlgorithm']:
        """
        The encryption algorithm used to encrypt data.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input['SupportedAlgorithm']):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> pulumi.Input[str]:
        """
        The identifier to the data service input object which this secret corresponds to.
        """
        return pulumi.get(self, "key_identifier")

    @key_identifier.setter
    def key_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_identifier", value)

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> pulumi.Input[str]:
        """
        It contains the encrypted customer secret.
        """
        return pulumi.get(self, "key_value")

    @key_value.setter
    def key_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_value", value)


@pulumi.input_type
class DataStorePropertiesArgs:
    def __init__(__self__, *,
                 data_store_type_id: pulumi.Input[str],
                 state: pulumi.Input['State'],
                 customer_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]]] = None,
                 extended_properties: Optional[Any] = None,
                 repository_id: Optional[pulumi.Input[str]] = None):
        """
        Data Store for sources and sinks
        :param pulumi.Input[str] data_store_type_id: The arm id of the data store type.
        :param pulumi.Input['State'] state: State of the data source.
        :param pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]] customer_secrets: List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
        :param Any extended_properties: A generic json used differently by each data source type.
        :param pulumi.Input[str] repository_id: Arm Id for the manager resource to which the data source is associated. This is optional.
        """
        pulumi.set(__self__, "data_store_type_id", data_store_type_id)
        pulumi.set(__self__, "state", state)
        if customer_secrets is not None:
            pulumi.set(__self__, "customer_secrets", customer_secrets)
        if extended_properties is not None:
            pulumi.set(__self__, "extended_properties", extended_properties)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="dataStoreTypeId")
    def data_store_type_id(self) -> pulumi.Input[str]:
        """
        The arm id of the data store type.
        """
        return pulumi.get(self, "data_store_type_id")

    @data_store_type_id.setter
    def data_store_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_store_type_id", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input['State']:
        """
        State of the data source.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input['State']):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="customerSecrets")
    def customer_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]]]:
        """
        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
        """
        return pulumi.get(self, "customer_secrets")

    @customer_secrets.setter
    def customer_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]]]):
        pulumi.set(self, "customer_secrets", value)

    @property
    @pulumi.getter(name="extendedProperties")
    def extended_properties(self) -> Optional[Any]:
        """
        A generic json used differently by each data source type.
        """
        return pulumi.get(self, "extended_properties")

    @extended_properties.setter
    def extended_properties(self, value: Optional[Any]):
        pulumi.set(self, "extended_properties", value)

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[pulumi.Input[str]]:
        """
        Arm Id for the manager resource to which the data source is associated. This is optional.
        """
        return pulumi.get(self, "repository_id")

    @repository_id.setter
    def repository_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_id", value)


@pulumi.input_type
class JobDefinitionPropertiesArgs:
    def __init__(__self__, *,
                 data_sink_id: pulumi.Input[str],
                 data_source_id: pulumi.Input[str],
                 state: pulumi.Input['State'],
                 customer_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]]] = None,
                 data_service_input: Optional[Any] = None,
                 last_modified_time: Optional[pulumi.Input[str]] = None,
                 run_location: Optional[pulumi.Input['RunLocation']] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleArgs']]]] = None,
                 user_confirmation: Optional[pulumi.Input['UserConfirmation']] = None):
        """
        Job Definition
        :param pulumi.Input[str] data_sink_id: Data Sink Id associated to the job definition.
        :param pulumi.Input[str] data_source_id: Data Source Id associated to the job definition.
        :param pulumi.Input['State'] state: State of the job definition.
        :param pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]] customer_secrets: List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
        :param Any data_service_input: A generic json used differently by each data service type.
        :param pulumi.Input[str] last_modified_time: Last modified time of the job definition.
        :param pulumi.Input['RunLocation'] run_location: This is the preferred geo location for the job to run.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleArgs']]] schedules: Schedule for running the job definition
        :param pulumi.Input['UserConfirmation'] user_confirmation: Enum to detect if user confirmation is required. If not passed will default to NotRequired.
        """
        pulumi.set(__self__, "data_sink_id", data_sink_id)
        pulumi.set(__self__, "data_source_id", data_source_id)
        pulumi.set(__self__, "state", state)
        if customer_secrets is not None:
            pulumi.set(__self__, "customer_secrets", customer_secrets)
        if data_service_input is not None:
            pulumi.set(__self__, "data_service_input", data_service_input)
        if last_modified_time is not None:
            pulumi.set(__self__, "last_modified_time", last_modified_time)
        if run_location is not None:
            pulumi.set(__self__, "run_location", run_location)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if user_confirmation is None:
            user_confirmation = 'NotRequired'
        if user_confirmation is not None:
            pulumi.set(__self__, "user_confirmation", user_confirmation)

    @property
    @pulumi.getter(name="dataSinkId")
    def data_sink_id(self) -> pulumi.Input[str]:
        """
        Data Sink Id associated to the job definition.
        """
        return pulumi.get(self, "data_sink_id")

    @data_sink_id.setter
    def data_sink_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_sink_id", value)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> pulumi.Input[str]:
        """
        Data Source Id associated to the job definition.
        """
        return pulumi.get(self, "data_source_id")

    @data_source_id.setter
    def data_source_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_id", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input['State']:
        """
        State of the job definition.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input['State']):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="customerSecrets")
    def customer_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]]]:
        """
        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
        """
        return pulumi.get(self, "customer_secrets")

    @customer_secrets.setter
    def customer_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomerSecretArgs']]]]):
        pulumi.set(self, "customer_secrets", value)

    @property
    @pulumi.getter(name="dataServiceInput")
    def data_service_input(self) -> Optional[Any]:
        """
        A generic json used differently by each data service type.
        """
        return pulumi.get(self, "data_service_input")

    @data_service_input.setter
    def data_service_input(self, value: Optional[Any]):
        pulumi.set(self, "data_service_input", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time of the job definition.
        """
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="runLocation")
    def run_location(self) -> Optional[pulumi.Input['RunLocation']]:
        """
        This is the preferred geo location for the job to run.
        """
        return pulumi.get(self, "run_location")

    @run_location.setter
    def run_location(self, value: Optional[pulumi.Input['RunLocation']]):
        pulumi.set(self, "run_location", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleArgs']]]]:
        """
        Schedule for running the job definition
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="userConfirmation")
    def user_confirmation(self) -> Optional[pulumi.Input['UserConfirmation']]:
        """
        Enum to detect if user confirmation is required. If not passed will default to NotRequired.
        """
        return pulumi.get(self, "user_confirmation")

    @user_confirmation.setter
    def user_confirmation(self, value: Optional[pulumi.Input['UserConfirmation']]):
        pulumi.set(self, "user_confirmation", value)


@pulumi.input_type
class ScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Schedule for the job run.
        :param pulumi.Input[str] name: Name of the schedule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_list: A list of repetition intervals in ISO 8601 format.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_list is not None:
            pulumi.set(__self__, "policy_list", policy_list)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyList")
    def policy_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of repetition intervals in ISO 8601 format.
        """
        return pulumi.get(self, "policy_list")

    @policy_list.setter
    def policy_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_list", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        The sku type.
        :param pulumi.Input[str] name: The sku name. Required for data manager creation, optional for update.
        :param pulumi.Input[str] tier: The sku tier. This is based on the SKU name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The sku name. Required for data manager creation, optional for update.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        The sku tier. This is based on the SKU name.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


