# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'DataSourceConfigurationArgs',
    'DataSourceArgs',
    'EtwEventConfigurationArgs',
    'EtwProviderConfigurationArgs',
    'EventLogConfigurationArgs',
    'GuestDiagnosticSettingsAssociationArgs',
    'GuestDiagnosticSettingsArgs',
    'PerformanceCounterConfigurationArgs',
    'SinkConfigurationArgs',
]

@pulumi.input_type
class DataSourceConfigurationArgs:
    def __init__(__self__, *,
                 event_logs: Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]] = None,
                 perf_counters: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]] = None,
                 providers: Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]] event_logs: Windows event logs configuration.
        :param pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]] perf_counters: Performance counter configuration
        :param pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]] providers: ETW providers configuration
        """
        if event_logs is not None:
            pulumi.set(__self__, "event_logs", event_logs)
        if perf_counters is not None:
            pulumi.set(__self__, "perf_counters", perf_counters)
        if providers is not None:
            pulumi.set(__self__, "providers", providers)

    @property
    @pulumi.getter(name="eventLogs")
    def event_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]]:
        """
        Windows event logs configuration.
        """
        return pulumi.get(self, "event_logs")

    @event_logs.setter
    def event_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]]):
        pulumi.set(self, "event_logs", value)

    @property
    @pulumi.getter(name="perfCounters")
    def perf_counters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]]:
        """
        Performance counter configuration
        """
        return pulumi.get(self, "perf_counters")

    @perf_counters.setter
    def perf_counters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]]):
        pulumi.set(self, "perf_counters", value)

    @property
    @pulumi.getter
    def providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]]:
        """
        ETW providers configuration
        """
        return pulumi.get(self, "providers")

    @providers.setter
    def providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]]):
        pulumi.set(self, "providers", value)


@pulumi.input_type
class DataSourceArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['DataSourceConfigurationArgs'],
                 kind: pulumi.Input[str],
                 sinks: pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]]):
        """
        Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
        :param pulumi.Input[str] kind: Datasource kind
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "sinks", sinks)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['DataSourceConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['DataSourceConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Datasource kind
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def sinks(self) -> pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]]:
        return pulumi.get(self, "sinks")

    @sinks.setter
    def sinks(self, value: pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]]):
        pulumi.set(self, "sinks", value)


@pulumi.input_type
class EtwEventConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class EtwProviderConfigurationArgs:
    def __init__(__self__, *,
                 events: pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]],
                 id: pulumi.Input[str]):
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class EventLogConfigurationArgs:
    def __init__(__self__, *,
                 log_name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "log_name", log_name)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter(name="logName")
    def log_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_name")

    @log_name.setter
    def log_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_name", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class GuestDiagnosticSettingsAssociationArgs:
    def __init__(__self__, *,
                 guest_diagnostic_settings_name: pulumi.Input[str]):
        """
        A guest diagnostic settings association.
        :param pulumi.Input[str] guest_diagnostic_settings_name: The guest diagnostic settings name.
        """
        pulumi.set(__self__, "guest_diagnostic_settings_name", guest_diagnostic_settings_name)

    @property
    @pulumi.getter(name="guestDiagnosticSettingsName")
    def guest_diagnostic_settings_name(self) -> pulumi.Input[str]:
        """
        The guest diagnostic settings name.
        """
        return pulumi.get(self, "guest_diagnostic_settings_name")

    @guest_diagnostic_settings_name.setter
    def guest_diagnostic_settings_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "guest_diagnostic_settings_name", value)


@pulumi.input_type
class GuestDiagnosticSettingsArgs:
    def __init__(__self__, *,
                 data_sources: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceArgs']]]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 proxy_setting: Optional[pulumi.Input[str]] = None):
        """
        Virtual machine diagnostic settings
        :param pulumi.Input[Sequence[pulumi.Input['DataSourceArgs']]] data_sources: the array of data source object which are configured to collect and send data
        :param pulumi.Input[str] os_type: Operating system type for the configuration
        """
        if data_sources is not None:
            pulumi.set(__self__, "data_sources", data_sources)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if proxy_setting is not None:
            pulumi.set(__self__, "proxy_setting", proxy_setting)

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceArgs']]]]:
        """
        the array of data source object which are configured to collect and send data
        """
        return pulumi.get(self, "data_sources")

    @data_sources.setter
    def data_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceArgs']]]]):
        pulumi.set(self, "data_sources", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system type for the configuration
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="proxySetting")
    def proxy_setting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_setting")

    @proxy_setting.setter
    def proxy_setting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_setting", value)


@pulumi.input_type
class PerformanceCounterConfigurationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 sampling_period: pulumi.Input[str],
                 instance: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sampling_period", sampling_period)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="samplingPeriod")
    def sampling_period(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sampling_period")

    @sampling_period.setter
    def sampling_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "sampling_period", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)


@pulumi.input_type
class SinkConfigurationArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str]):
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


