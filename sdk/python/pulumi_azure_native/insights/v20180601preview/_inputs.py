# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'DataSourceConfigurationArgs',
    'DataSourceArgs',
    'EtwEventConfigurationArgs',
    'EtwProviderConfigurationArgs',
    'EventLogConfigurationArgs',
    'PerformanceCounterConfigurationArgs',
    'SinkConfigurationArgs',
]

@pulumi.input_type
class DataSourceConfigurationArgs:
    def __init__(__self__, *,
                 event_logs: Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]] = None,
                 perf_counters: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]] = None,
                 providers: Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]] event_logs: Windows event logs configuration.
        :param pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]] perf_counters: Performance counter configuration
        :param pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]] providers: ETW providers configuration
        """
        DataSourceConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_logs=event_logs,
            perf_counters=perf_counters,
            providers=providers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_logs: Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]] = None,
             perf_counters: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]] = None,
             providers: Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if event_logs is not None:
            _setter("event_logs", event_logs)
        if perf_counters is not None:
            _setter("perf_counters", perf_counters)
        if providers is not None:
            _setter("providers", providers)

    @property
    @pulumi.getter(name="eventLogs")
    def event_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]]:
        """
        Windows event logs configuration.
        """
        return pulumi.get(self, "event_logs")

    @event_logs.setter
    def event_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventLogConfigurationArgs']]]]):
        pulumi.set(self, "event_logs", value)

    @property
    @pulumi.getter(name="perfCounters")
    def perf_counters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]]:
        """
        Performance counter configuration
        """
        return pulumi.get(self, "perf_counters")

    @perf_counters.setter
    def perf_counters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceCounterConfigurationArgs']]]]):
        pulumi.set(self, "perf_counters", value)

    @property
    @pulumi.getter
    def providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]]:
        """
        ETW providers configuration
        """
        return pulumi.get(self, "providers")

    @providers.setter
    def providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EtwProviderConfigurationArgs']]]]):
        pulumi.set(self, "providers", value)


@pulumi.input_type
class DataSourceArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['DataSourceConfigurationArgs'],
                 kind: pulumi.Input[str],
                 sinks: pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]]):
        """
        Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
        :param pulumi.Input[str] kind: Datasource kind
        """
        DataSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            kind=kind,
            sinks=sinks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['DataSourceConfigurationArgs'],
             kind: pulumi.Input[str],
             sinks: pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)
        _setter("kind", kind)
        _setter("sinks", sinks)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['DataSourceConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['DataSourceConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Datasource kind
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def sinks(self) -> pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]]:
        return pulumi.get(self, "sinks")

    @sinks.setter
    def sinks(self, value: pulumi.Input[Sequence[pulumi.Input['SinkConfigurationArgs']]]):
        pulumi.set(self, "sinks", value)


@pulumi.input_type
class EtwEventConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None):
        EtwEventConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            filter=filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[int],
             name: pulumi.Input[str],
             filter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        if filter is not None:
            _setter("filter", filter)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class EtwProviderConfigurationArgs:
    def __init__(__self__, *,
                 events: pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]],
                 id: pulumi.Input[str]):
        EtwProviderConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            events=events,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             events: pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]],
             id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("events", events)
        _setter("id", id)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input['EtwEventConfigurationArgs']]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class EventLogConfigurationArgs:
    def __init__(__self__, *,
                 log_name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None):
        EventLogConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_name=log_name,
            filter=filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_name: pulumi.Input[str],
             filter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("log_name", log_name)
        if filter is not None:
            _setter("filter", filter)

    @property
    @pulumi.getter(name="logName")
    def log_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_name")

    @log_name.setter
    def log_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_name", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class PerformanceCounterConfigurationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 sampling_period: pulumi.Input[str],
                 instance: Optional[pulumi.Input[str]] = None):
        PerformanceCounterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            sampling_period=sampling_period,
            instance=instance,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             sampling_period: pulumi.Input[str],
             instance: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("sampling_period", sampling_period)
        if instance is not None:
            _setter("instance", instance)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="samplingPeriod")
    def sampling_period(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sampling_period")

    @sampling_period.setter
    def sampling_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "sampling_period", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)


@pulumi.input_type
class SinkConfigurationArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str]):
        SinkConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kind=kind,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kind: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


