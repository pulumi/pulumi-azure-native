# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'DataSourceConfigurationResponse',
    'DataSourceResponse',
    'EtwEventConfigurationResponse',
    'EtwProviderConfigurationResponse',
    'EventLogConfigurationResponse',
    'PerformanceCounterConfigurationResponse',
    'SinkConfigurationResponse',
]

@pulumi.output_type
class DataSourceConfigurationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventLogs":
            suggest = "event_logs"
        elif key == "perfCounters":
            suggest = "perf_counters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_logs: Optional[Sequence['outputs.EventLogConfigurationResponse']] = None,
                 perf_counters: Optional[Sequence['outputs.PerformanceCounterConfigurationResponse']] = None,
                 providers: Optional[Sequence['outputs.EtwProviderConfigurationResponse']] = None):
        """
        :param Sequence['EventLogConfigurationResponse'] event_logs: Windows event logs configuration.
        :param Sequence['PerformanceCounterConfigurationResponse'] perf_counters: Performance counter configuration
        :param Sequence['EtwProviderConfigurationResponse'] providers: ETW providers configuration
        """
        DataSourceConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_logs=event_logs,
            perf_counters=perf_counters,
            providers=providers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_logs: Optional[Sequence['outputs.EventLogConfigurationResponse']] = None,
             perf_counters: Optional[Sequence['outputs.PerformanceCounterConfigurationResponse']] = None,
             providers: Optional[Sequence['outputs.EtwProviderConfigurationResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if event_logs is not None:
            _setter("event_logs", event_logs)
        if perf_counters is not None:
            _setter("perf_counters", perf_counters)
        if providers is not None:
            _setter("providers", providers)

    @property
    @pulumi.getter(name="eventLogs")
    def event_logs(self) -> Optional[Sequence['outputs.EventLogConfigurationResponse']]:
        """
        Windows event logs configuration.
        """
        return pulumi.get(self, "event_logs")

    @property
    @pulumi.getter(name="perfCounters")
    def perf_counters(self) -> Optional[Sequence['outputs.PerformanceCounterConfigurationResponse']]:
        """
        Performance counter configuration
        """
        return pulumi.get(self, "perf_counters")

    @property
    @pulumi.getter
    def providers(self) -> Optional[Sequence['outputs.EtwProviderConfigurationResponse']]:
        """
        ETW providers configuration
        """
        return pulumi.get(self, "providers")


@pulumi.output_type
class DataSourceResponse(dict):
    """
    Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
    """
    def __init__(__self__, *,
                 configuration: 'outputs.DataSourceConfigurationResponse',
                 kind: str,
                 sinks: Sequence['outputs.SinkConfigurationResponse']):
        """
        Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
        :param str kind: Datasource kind
        """
        DataSourceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            kind=kind,
            sinks=sinks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: 'outputs.DataSourceConfigurationResponse',
             kind: str,
             sinks: Sequence['outputs.SinkConfigurationResponse'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)
        _setter("kind", kind)
        _setter("sinks", sinks)

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.DataSourceConfigurationResponse':
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Datasource kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def sinks(self) -> Sequence['outputs.SinkConfigurationResponse']:
        return pulumi.get(self, "sinks")


@pulumi.output_type
class EtwEventConfigurationResponse(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 filter: Optional[str] = None):
        EtwEventConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            filter=filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             name: str,
             filter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        if filter is not None:
            _setter("filter", filter)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")


@pulumi.output_type
class EtwProviderConfigurationResponse(dict):
    def __init__(__self__, *,
                 events: Sequence['outputs.EtwEventConfigurationResponse'],
                 id: str):
        EtwProviderConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            events=events,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             events: Sequence['outputs.EtwEventConfigurationResponse'],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("events", events)
        _setter("id", id)

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.EtwEventConfigurationResponse']:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class EventLogConfigurationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logName":
            suggest = "log_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventLogConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventLogConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventLogConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_name: str,
                 filter: Optional[str] = None):
        EventLogConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_name=log_name,
            filter=filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_name: str,
             filter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("log_name", log_name)
        if filter is not None:
            _setter("filter", filter)

    @property
    @pulumi.getter(name="logName")
    def log_name(self) -> str:
        return pulumi.get(self, "log_name")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")


@pulumi.output_type
class PerformanceCounterConfigurationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "samplingPeriod":
            suggest = "sampling_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerformanceCounterConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerformanceCounterConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerformanceCounterConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 sampling_period: str,
                 instance: Optional[str] = None):
        PerformanceCounterConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            sampling_period=sampling_period,
            instance=instance,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             sampling_period: str,
             instance: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("sampling_period", sampling_period)
        if instance is not None:
            _setter("instance", instance)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="samplingPeriod")
    def sampling_period(self) -> str:
        return pulumi.get(self, "sampling_period")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")


@pulumi.output_type
class SinkConfigurationResponse(dict):
    def __init__(__self__, *,
                 kind: str):
        SinkConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kind=kind,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kind: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")


