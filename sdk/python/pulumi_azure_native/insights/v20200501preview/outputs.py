# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ActionResponse',
    'ConditionResponse',
    'ConditionResponseFailingPeriods',
    'DimensionResponse',
    'ScheduledQueryRuleCriteriaResponse',
    'ScheduledQueryRulePropertiesResponse',
]

@pulumi.output_type
class ActionResponse(dict):
    """
    Actions to invoke when the alert fires.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroupId":
            suggest = "action_group_id"
        elif key == "webHookProperties":
            suggest = "web_hook_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_group_id: Optional[str] = None,
                 web_hook_properties: Optional[Mapping[str, str]] = None):
        """
        Actions to invoke when the alert fires.
        :param str action_group_id: Action Group resource Id to invoke when the alert fires.
        :param Mapping[str, str] web_hook_properties: The properties of a webhook object.
        """
        if action_group_id is not None:
            pulumi.set(__self__, "action_group_id", action_group_id)
        if web_hook_properties is not None:
            pulumi.set(__self__, "web_hook_properties", web_hook_properties)

    @property
    @pulumi.getter(name="actionGroupId")
    def action_group_id(self) -> Optional[str]:
        """
        Action Group resource Id to invoke when the alert fires.
        """
        return pulumi.get(self, "action_group_id")

    @property
    @pulumi.getter(name="webHookProperties")
    def web_hook_properties(self) -> Optional[Mapping[str, str]]:
        """
        The properties of a webhook object.
        """
        return pulumi.get(self, "web_hook_properties")


@pulumi.output_type
class ConditionResponse(dict):
    """
    A condition of the scheduled query rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeAggregation":
            suggest = "time_aggregation"
        elif key == "failingPeriods":
            suggest = "failing_periods"
        elif key == "metricMeasureColumn":
            suggest = "metric_measure_column"
        elif key == "resourceIdColumn":
            suggest = "resource_id_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 threshold: float,
                 time_aggregation: str,
                 dimensions: Optional[Sequence['outputs.DimensionResponse']] = None,
                 failing_periods: Optional['outputs.ConditionResponseFailingPeriods'] = None,
                 metric_measure_column: Optional[str] = None,
                 query: Optional[str] = None,
                 resource_id_column: Optional[str] = None):
        """
        A condition of the scheduled query rule.
        :param str operator: The criteria operator.
        :param float threshold: the criteria threshold value that activates the alert.
        :param str time_aggregation: Aggregation type
        :param Sequence['DimensionResponse'] dimensions: List of Dimensions conditions
        :param 'ConditionResponseFailingPeriods' failing_periods: The minimum number of violations required within the selected lookback time window required to raise an alert.
        :param str metric_measure_column: The column containing the metric measure number.
        :param str query: Log query alert
        :param str resource_id_column: The column containing the resource id. The content of the column must be a uri formatted as resource id
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "time_aggregation", time_aggregation)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if failing_periods is not None:
            pulumi.set(__self__, "failing_periods", failing_periods)
        if metric_measure_column is not None:
            pulumi.set(__self__, "metric_measure_column", metric_measure_column)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if resource_id_column is not None:
            pulumi.set(__self__, "resource_id_column", resource_id_column)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The criteria operator.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        the criteria threshold value that activates the alert.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="timeAggregation")
    def time_aggregation(self) -> str:
        """
        Aggregation type
        """
        return pulumi.get(self, "time_aggregation")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.DimensionResponse']]:
        """
        List of Dimensions conditions
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="failingPeriods")
    def failing_periods(self) -> Optional['outputs.ConditionResponseFailingPeriods']:
        """
        The minimum number of violations required within the selected lookback time window required to raise an alert.
        """
        return pulumi.get(self, "failing_periods")

    @property
    @pulumi.getter(name="metricMeasureColumn")
    def metric_measure_column(self) -> Optional[str]:
        """
        The column containing the metric measure number.
        """
        return pulumi.get(self, "metric_measure_column")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Log query alert
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="resourceIdColumn")
    def resource_id_column(self) -> Optional[str]:
        """
        The column containing the resource id. The content of the column must be a uri formatted as resource id
        """
        return pulumi.get(self, "resource_id_column")


@pulumi.output_type
class ConditionResponseFailingPeriods(dict):
    """
    The minimum number of violations required within the selected lookback time window required to raise an alert.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minFailingPeriodsToAlert":
            suggest = "min_failing_periods_to_alert"
        elif key == "numberOfEvaluationPeriods":
            suggest = "number_of_evaluation_periods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionResponseFailingPeriods. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionResponseFailingPeriods.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionResponseFailingPeriods.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_failing_periods_to_alert: Optional[float] = None,
                 number_of_evaluation_periods: Optional[float] = None):
        """
        The minimum number of violations required within the selected lookback time window required to raise an alert.
        :param float min_failing_periods_to_alert: The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
        :param float number_of_evaluation_periods: The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
        """
        if min_failing_periods_to_alert is None:
            min_failing_periods_to_alert = 1
        if min_failing_periods_to_alert is not None:
            pulumi.set(__self__, "min_failing_periods_to_alert", min_failing_periods_to_alert)
        if number_of_evaluation_periods is None:
            number_of_evaluation_periods = 1
        if number_of_evaluation_periods is not None:
            pulumi.set(__self__, "number_of_evaluation_periods", number_of_evaluation_periods)

    @property
    @pulumi.getter(name="minFailingPeriodsToAlert")
    def min_failing_periods_to_alert(self) -> Optional[float]:
        """
        The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
        """
        return pulumi.get(self, "min_failing_periods_to_alert")

    @property
    @pulumi.getter(name="numberOfEvaluationPeriods")
    def number_of_evaluation_periods(self) -> Optional[float]:
        """
        The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
        """
        return pulumi.get(self, "number_of_evaluation_periods")


@pulumi.output_type
class DimensionResponse(dict):
    """
    Dimension splitting and filtering definition
    """
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        Dimension splitting and filtering definition
        :param str name: Name of the dimension
        :param str operator: Operator for dimension values
        :param Sequence[str] values: List of dimension values
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dimension
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator for dimension values
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of dimension values
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ScheduledQueryRuleCriteriaResponse(dict):
    """
    The rule criteria that defines the conditions of the scheduled query rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allOf":
            suggest = "all_of"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRuleCriteriaResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRuleCriteriaResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRuleCriteriaResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_of: Optional[Sequence['outputs.ConditionResponse']] = None):
        """
        The rule criteria that defines the conditions of the scheduled query rule.
        :param Sequence['ConditionResponse'] all_of: A list of conditions to evaluate against the specified scopes
        """
        if all_of is not None:
            pulumi.set(__self__, "all_of", all_of)

    @property
    @pulumi.getter(name="allOf")
    def all_of(self) -> Optional[Sequence['outputs.ConditionResponse']]:
        """
        A list of conditions to evaluate against the specified scopes
        """
        return pulumi.get(self, "all_of")


@pulumi.output_type
class ScheduledQueryRulePropertiesResponse(dict):
    """
    scheduled query rule Definition
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdWithApiVersion":
            suggest = "created_with_api_version"
        elif key == "evaluationFrequency":
            suggest = "evaluation_frequency"
        elif key == "isLegacyLogAnalyticsRule":
            suggest = "is_legacy_log_analytics_rule"
        elif key == "windowSize":
            suggest = "window_size"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "muteActionsDuration":
            suggest = "mute_actions_duration"
        elif key == "overrideQueryTimeRange":
            suggest = "override_query_time_range"
        elif key == "targetResourceTypes":
            suggest = "target_resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_with_api_version: str,
                 criteria: 'outputs.ScheduledQueryRuleCriteriaResponse',
                 enabled: bool,
                 evaluation_frequency: str,
                 is_legacy_log_analytics_rule: bool,
                 scopes: Sequence[str],
                 severity: float,
                 window_size: str,
                 actions: Optional[Sequence['outputs.ActionResponse']] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 mute_actions_duration: Optional[str] = None,
                 override_query_time_range: Optional[str] = None,
                 target_resource_types: Optional[Sequence[str]] = None):
        """
        scheduled query rule Definition
        :param str created_with_api_version: The api-version used when creating this alert rule
        :param 'ScheduledQueryRuleCriteriaResponse' criteria: The rule criteria that defines the conditions of the scheduled query rule.
        :param bool enabled: The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        :param str evaluation_frequency: How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
        :param bool is_legacy_log_analytics_rule: True if alert rule is legacy Log Analytic rule
        :param Sequence[str] scopes: The list of resource id's that this scheduled query rule is scoped to.
        :param float severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
        :param str window_size: The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
        :param str description: The description of the scheduled query rule.
        :param str display_name: The display name of the alert rule
        :param str mute_actions_duration: Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
        :param str override_query_time_range: If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods)
        :param Sequence[str] target_resource_types: List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
        """
        pulumi.set(__self__, "created_with_api_version", created_with_api_version)
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "evaluation_frequency", evaluation_frequency)
        pulumi.set(__self__, "is_legacy_log_analytics_rule", is_legacy_log_analytics_rule)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "window_size", window_size)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if mute_actions_duration is not None:
            pulumi.set(__self__, "mute_actions_duration", mute_actions_duration)
        if override_query_time_range is not None:
            pulumi.set(__self__, "override_query_time_range", override_query_time_range)
        if target_resource_types is not None:
            pulumi.set(__self__, "target_resource_types", target_resource_types)

    @property
    @pulumi.getter(name="createdWithApiVersion")
    def created_with_api_version(self) -> str:
        """
        The api-version used when creating this alert rule
        """
        return pulumi.get(self, "created_with_api_version")

    @property
    @pulumi.getter
    def criteria(self) -> 'outputs.ScheduledQueryRuleCriteriaResponse':
        """
        The rule criteria that defines the conditions of the scheduled query rule.
        """
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="evaluationFrequency")
    def evaluation_frequency(self) -> str:
        """
        How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
        """
        return pulumi.get(self, "evaluation_frequency")

    @property
    @pulumi.getter(name="isLegacyLogAnalyticsRule")
    def is_legacy_log_analytics_rule(self) -> bool:
        """
        True if alert rule is legacy Log Analytic rule
        """
        return pulumi.get(self, "is_legacy_log_analytics_rule")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        The list of resource id's that this scheduled query rule is scoped to.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def severity(self) -> float:
        """
        Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> str:
        """
        The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
        """
        return pulumi.get(self, "window_size")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.ActionResponse']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the scheduled query rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the alert rule
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="muteActionsDuration")
    def mute_actions_duration(self) -> Optional[str]:
        """
        Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
        """
        return pulumi.get(self, "mute_actions_duration")

    @property
    @pulumi.getter(name="overrideQueryTimeRange")
    def override_query_time_range(self) -> Optional[str]:
        """
        If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods)
        """
        return pulumi.get(self, "override_query_time_range")

    @property
    @pulumi.getter(name="targetResourceTypes")
    def target_resource_types(self) -> Optional[Sequence[str]]:
        """
        List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
        """
        return pulumi.get(self, "target_resource_types")


