# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetPrivateLinkScopedResourceResult',
    'AwaitableGetPrivateLinkScopedResourceResult',
    'get_private_link_scoped_resource',
    'get_private_link_scoped_resource_output',
]

@pulumi.output_type
class GetPrivateLinkScopedResourceResult:
    """
    A private link scoped resource
    """
    def __init__(__self__, id=None, kind=None, linked_resource_id=None, name=None, provisioning_state=None, subscription_location=None, system_data=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if linked_resource_id and not isinstance(linked_resource_id, str):
            raise TypeError("Expected argument 'linked_resource_id' to be a str")
        pulumi.set(__self__, "linked_resource_id", linked_resource_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if subscription_location and not isinstance(subscription_location, str):
            raise TypeError("Expected argument 'subscription_location' to be a str")
        pulumi.set(__self__, "subscription_location", subscription_location)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The kind of scoped Azure monitor resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="linkedResourceId")
    def linked_resource_id(self) -> Optional[str]:
        """
        The resource id of the scoped Azure monitor resource.
        """
        return pulumi.get(self, "linked_resource_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the Azure monitor resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="subscriptionLocation")
    def subscription_location(self) -> Optional[str]:
        """
        The location of a scoped subscription. Only needs to be specified for metric dataplane subscriptions.
        """
        return pulumi.get(self, "subscription_location")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        System data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPrivateLinkScopedResourceResult(GetPrivateLinkScopedResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateLinkScopedResourceResult(
            id=self.id,
            kind=self.kind,
            linked_resource_id=self.linked_resource_id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            subscription_location=self.subscription_location,
            system_data=self.system_data,
            type=self.type)


def get_private_link_scoped_resource(name: Optional[str] = None,
                                     resource_group_name: Optional[str] = None,
                                     scope_name: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateLinkScopedResourceResult:
    """
    Gets a scoped resource in a private link scope.


    :param str name: The name of the scoped resource object.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str scope_name: The name of the Azure Monitor PrivateLinkScope resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['scopeName'] = scope_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:insights/v20230601preview:getPrivateLinkScopedResource', __args__, opts=opts, typ=GetPrivateLinkScopedResourceResult).value

    return AwaitableGetPrivateLinkScopedResourceResult(
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        linked_resource_id=pulumi.get(__ret__, 'linked_resource_id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        subscription_location=pulumi.get(__ret__, 'subscription_location'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_private_link_scoped_resource_output(name: Optional[pulumi.Input[str]] = None,
                                            resource_group_name: Optional[pulumi.Input[str]] = None,
                                            scope_name: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateLinkScopedResourceResult]:
    """
    Gets a scoped resource in a private link scope.


    :param str name: The name of the scoped resource object.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str scope_name: The name of the Azure Monitor PrivateLinkScope resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['scopeName'] = scope_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:insights/v20230601preview:getPrivateLinkScopedResource', __args__, opts=opts, typ=GetPrivateLinkScopedResourceResult)
    return __ret__.apply(lambda __response__: GetPrivateLinkScopedResourceResult(
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        linked_resource_id=pulumi.get(__response__, 'linked_resource_id'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        subscription_location=pulumi.get(__response__, 'subscription_location'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
