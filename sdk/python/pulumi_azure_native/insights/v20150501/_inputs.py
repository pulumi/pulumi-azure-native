# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ApplicationInsightsComponentAnalyticsItemPropertiesArgs',
    'ApplicationInsightsComponentDataVolumeCapArgs',
    'ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgs',
]

@pulumi.input_type
class ApplicationInsightsComponentAnalyticsItemPropertiesArgs:
    def __init__(__self__, *,
                 function_alias: Optional[pulumi.Input[str]] = None):
        """
        A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
        :param pulumi.Input[str] function_alias: A function alias, used when the type of the item is Function
        """
        ApplicationInsightsComponentAnalyticsItemPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_alias=function_alias,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_alias: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if function_alias is not None:
            _setter("function_alias", function_alias)

    @property
    @pulumi.getter(name="functionAlias")
    def function_alias(self) -> Optional[pulumi.Input[str]]:
        """
        A function alias, used when the type of the item is Function
        """
        return pulumi.get(self, "function_alias")

    @function_alias.setter
    def function_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_alias", value)


@pulumi.input_type
class ApplicationInsightsComponentDataVolumeCapArgs:
    def __init__(__self__, *,
                 cap: Optional[pulumi.Input[float]] = None,
                 stop_send_notification_when_hit_cap: Optional[pulumi.Input[bool]] = None,
                 stop_send_notification_when_hit_threshold: Optional[pulumi.Input[bool]] = None,
                 warning_threshold: Optional[pulumi.Input[int]] = None):
        """
        An Application Insights component daily data volume cap
        :param pulumi.Input[float] cap: Daily data volume cap in GB.
        :param pulumi.Input[bool] stop_send_notification_when_hit_cap: Do not send a notification email when the daily data volume cap is met.
        :param pulumi.Input[bool] stop_send_notification_when_hit_threshold: Reserved, not used for now.
        :param pulumi.Input[int] warning_threshold: Reserved, not used for now.
        """
        ApplicationInsightsComponentDataVolumeCapArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cap=cap,
            stop_send_notification_when_hit_cap=stop_send_notification_when_hit_cap,
            stop_send_notification_when_hit_threshold=stop_send_notification_when_hit_threshold,
            warning_threshold=warning_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cap: Optional[pulumi.Input[float]] = None,
             stop_send_notification_when_hit_cap: Optional[pulumi.Input[bool]] = None,
             stop_send_notification_when_hit_threshold: Optional[pulumi.Input[bool]] = None,
             warning_threshold: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cap is not None:
            _setter("cap", cap)
        if stop_send_notification_when_hit_cap is not None:
            _setter("stop_send_notification_when_hit_cap", stop_send_notification_when_hit_cap)
        if stop_send_notification_when_hit_threshold is not None:
            _setter("stop_send_notification_when_hit_threshold", stop_send_notification_when_hit_threshold)
        if warning_threshold is not None:
            _setter("warning_threshold", warning_threshold)

    @property
    @pulumi.getter
    def cap(self) -> Optional[pulumi.Input[float]]:
        """
        Daily data volume cap in GB.
        """
        return pulumi.get(self, "cap")

    @cap.setter
    def cap(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cap", value)

    @property
    @pulumi.getter(name="stopSendNotificationWhenHitCap")
    def stop_send_notification_when_hit_cap(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not send a notification email when the daily data volume cap is met.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_cap")

    @stop_send_notification_when_hit_cap.setter
    def stop_send_notification_when_hit_cap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stop_send_notification_when_hit_cap", value)

    @property
    @pulumi.getter(name="stopSendNotificationWhenHitThreshold")
    def stop_send_notification_when_hit_threshold(self) -> Optional[pulumi.Input[bool]]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_threshold")

    @stop_send_notification_when_hit_threshold.setter
    def stop_send_notification_when_hit_threshold(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stop_send_notification_when_hit_threshold", value)

    @property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "warning_threshold")

    @warning_threshold.setter
    def warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warning_threshold", value)


@pulumi.input_type
class ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 help_url: Optional[pulumi.Input[str]] = None,
                 is_enabled_by_default: Optional[pulumi.Input[bool]] = None,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 is_in_preview: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 supports_email_notifications: Optional[pulumi.Input[bool]] = None):
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        :param pulumi.Input[str] description: The rule description
        :param pulumi.Input[str] display_name: The rule name as it is displayed in UI
        :param pulumi.Input[str] help_url: URL which displays additional info about the proactive detection rule
        :param pulumi.Input[bool] is_enabled_by_default: A flag indicating whether the rule is enabled by default
        :param pulumi.Input[bool] is_hidden: A flag indicating whether the rule is hidden (from the UI)
        :param pulumi.Input[bool] is_in_preview: A flag indicating whether the rule is in preview
        :param pulumi.Input[str] name: The rule name
        :param pulumi.Input[bool] supports_email_notifications: A flag indicating whether email notifications are supported for detections for this rule
        """
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            display_name=display_name,
            help_url=help_url,
            is_enabled_by_default=is_enabled_by_default,
            is_hidden=is_hidden,
            is_in_preview=is_in_preview,
            name=name,
            supports_email_notifications=supports_email_notifications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             help_url: Optional[pulumi.Input[str]] = None,
             is_enabled_by_default: Optional[pulumi.Input[bool]] = None,
             is_hidden: Optional[pulumi.Input[bool]] = None,
             is_in_preview: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             supports_email_notifications: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if display_name is not None:
            _setter("display_name", display_name)
        if help_url is not None:
            _setter("help_url", help_url)
        if is_enabled_by_default is not None:
            _setter("is_enabled_by_default", is_enabled_by_default)
        if is_hidden is not None:
            _setter("is_hidden", is_hidden)
        if is_in_preview is not None:
            _setter("is_in_preview", is_in_preview)
        if name is not None:
            _setter("name", name)
        if supports_email_notifications is not None:
            _setter("supports_email_notifications", supports_email_notifications)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The rule name as it is displayed in UI
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL which displays additional info about the proactive detection rule
        """
        return pulumi.get(self, "help_url")

    @help_url.setter
    def help_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_url", value)

    @property
    @pulumi.getter(name="isEnabledByDefault")
    def is_enabled_by_default(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether the rule is enabled by default
        """
        return pulumi.get(self, "is_enabled_by_default")

    @is_enabled_by_default.setter
    def is_enabled_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled_by_default", value)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether the rule is hidden (from the UI)
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter(name="isInPreview")
    def is_in_preview(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether the rule is in preview
        """
        return pulumi.get(self, "is_in_preview")

    @is_in_preview.setter
    def is_in_preview(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_in_preview", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="supportsEmailNotifications")
    def supports_email_notifications(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether email notifications are supported for detections for this rule
        """
        return pulumi.get(self, "supports_email_notifications")

    @supports_email_notifications.setter
    def supports_email_notifications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_email_notifications", value)


