# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ApplicationInsightsComponentAnalyticsItemPropertiesArgs',
    'ApplicationInsightsComponentAnalyticsItemPropertiesArgsDict',
    'ApplicationInsightsComponentDataVolumeCapArgs',
    'ApplicationInsightsComponentDataVolumeCapArgsDict',
    'ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgs',
    'ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgsDict',
    'WorkbookPropertiesArgs',
    'WorkbookPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationInsightsComponentAnalyticsItemPropertiesArgsDict(TypedDict):
        """
        A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
        """
        function_alias: NotRequired[pulumi.Input[str]]
        """
        A function alias, used when the type of the item is Function
        """
elif False:
    ApplicationInsightsComponentAnalyticsItemPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInsightsComponentAnalyticsItemPropertiesArgs:
    def __init__(__self__, *,
                 function_alias: Optional[pulumi.Input[str]] = None):
        """
        A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
        :param pulumi.Input[str] function_alias: A function alias, used when the type of the item is Function
        """
        if function_alias is not None:
            pulumi.set(__self__, "function_alias", function_alias)

    @property
    @pulumi.getter(name="functionAlias")
    def function_alias(self) -> Optional[pulumi.Input[str]]:
        """
        A function alias, used when the type of the item is Function
        """
        return pulumi.get(self, "function_alias")

    @function_alias.setter
    def function_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_alias", value)


if not MYPY:
    class ApplicationInsightsComponentDataVolumeCapArgsDict(TypedDict):
        """
        An Application Insights component daily data volume cap
        """
        cap: NotRequired[pulumi.Input[float]]
        """
        Daily data volume cap in GB.
        """
        stop_send_notification_when_hit_cap: NotRequired[pulumi.Input[bool]]
        """
        Do not send a notification email when the daily data volume cap is met.
        """
        stop_send_notification_when_hit_threshold: NotRequired[pulumi.Input[bool]]
        """
        Reserved, not used for now.
        """
        warning_threshold: NotRequired[pulumi.Input[int]]
        """
        Reserved, not used for now.
        """
elif False:
    ApplicationInsightsComponentDataVolumeCapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInsightsComponentDataVolumeCapArgs:
    def __init__(__self__, *,
                 cap: Optional[pulumi.Input[float]] = None,
                 stop_send_notification_when_hit_cap: Optional[pulumi.Input[bool]] = None,
                 stop_send_notification_when_hit_threshold: Optional[pulumi.Input[bool]] = None,
                 warning_threshold: Optional[pulumi.Input[int]] = None):
        """
        An Application Insights component daily data volume cap
        :param pulumi.Input[float] cap: Daily data volume cap in GB.
        :param pulumi.Input[bool] stop_send_notification_when_hit_cap: Do not send a notification email when the daily data volume cap is met.
        :param pulumi.Input[bool] stop_send_notification_when_hit_threshold: Reserved, not used for now.
        :param pulumi.Input[int] warning_threshold: Reserved, not used for now.
        """
        if cap is not None:
            pulumi.set(__self__, "cap", cap)
        if stop_send_notification_when_hit_cap is not None:
            pulumi.set(__self__, "stop_send_notification_when_hit_cap", stop_send_notification_when_hit_cap)
        if stop_send_notification_when_hit_threshold is not None:
            pulumi.set(__self__, "stop_send_notification_when_hit_threshold", stop_send_notification_when_hit_threshold)
        if warning_threshold is not None:
            pulumi.set(__self__, "warning_threshold", warning_threshold)

    @property
    @pulumi.getter
    def cap(self) -> Optional[pulumi.Input[float]]:
        """
        Daily data volume cap in GB.
        """
        return pulumi.get(self, "cap")

    @cap.setter
    def cap(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cap", value)

    @property
    @pulumi.getter(name="stopSendNotificationWhenHitCap")
    def stop_send_notification_when_hit_cap(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not send a notification email when the daily data volume cap is met.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_cap")

    @stop_send_notification_when_hit_cap.setter
    def stop_send_notification_when_hit_cap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stop_send_notification_when_hit_cap", value)

    @property
    @pulumi.getter(name="stopSendNotificationWhenHitThreshold")
    def stop_send_notification_when_hit_threshold(self) -> Optional[pulumi.Input[bool]]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_threshold")

    @stop_send_notification_when_hit_threshold.setter
    def stop_send_notification_when_hit_threshold(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stop_send_notification_when_hit_threshold", value)

    @property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "warning_threshold")

    @warning_threshold.setter
    def warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warning_threshold", value)


if not MYPY:
    class ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgsDict(TypedDict):
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The rule description
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The rule name as it is displayed in UI
        """
        help_url: NotRequired[pulumi.Input[str]]
        """
        URL which displays additional info about the proactive detection rule
        """
        is_enabled_by_default: NotRequired[pulumi.Input[bool]]
        """
        A flag indicating whether the rule is enabled by default
        """
        is_hidden: NotRequired[pulumi.Input[bool]]
        """
        A flag indicating whether the rule is hidden (from the UI)
        """
        is_in_preview: NotRequired[pulumi.Input[bool]]
        """
        A flag indicating whether the rule is in preview
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The rule name
        """
        supports_email_notifications: NotRequired[pulumi.Input[bool]]
        """
        A flag indicating whether email notifications are supported for detections for this rule
        """
elif False:
    ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitionsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 help_url: Optional[pulumi.Input[str]] = None,
                 is_enabled_by_default: Optional[pulumi.Input[bool]] = None,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 is_in_preview: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 supports_email_notifications: Optional[pulumi.Input[bool]] = None):
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        :param pulumi.Input[str] description: The rule description
        :param pulumi.Input[str] display_name: The rule name as it is displayed in UI
        :param pulumi.Input[str] help_url: URL which displays additional info about the proactive detection rule
        :param pulumi.Input[bool] is_enabled_by_default: A flag indicating whether the rule is enabled by default
        :param pulumi.Input[bool] is_hidden: A flag indicating whether the rule is hidden (from the UI)
        :param pulumi.Input[bool] is_in_preview: A flag indicating whether the rule is in preview
        :param pulumi.Input[str] name: The rule name
        :param pulumi.Input[bool] supports_email_notifications: A flag indicating whether email notifications are supported for detections for this rule
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if is_enabled_by_default is not None:
            pulumi.set(__self__, "is_enabled_by_default", is_enabled_by_default)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if is_in_preview is not None:
            pulumi.set(__self__, "is_in_preview", is_in_preview)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if supports_email_notifications is not None:
            pulumi.set(__self__, "supports_email_notifications", supports_email_notifications)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The rule name as it is displayed in UI
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL which displays additional info about the proactive detection rule
        """
        return pulumi.get(self, "help_url")

    @help_url.setter
    def help_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_url", value)

    @property
    @pulumi.getter(name="isEnabledByDefault")
    def is_enabled_by_default(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether the rule is enabled by default
        """
        return pulumi.get(self, "is_enabled_by_default")

    @is_enabled_by_default.setter
    def is_enabled_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled_by_default", value)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether the rule is hidden (from the UI)
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter(name="isInPreview")
    def is_in_preview(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether the rule is in preview
        """
        return pulumi.get(self, "is_in_preview")

    @is_in_preview.setter
    def is_in_preview(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_in_preview", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="supportsEmailNotifications")
    def supports_email_notifications(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether email notifications are supported for detections for this rule
        """
        return pulumi.get(self, "supports_email_notifications")

    @supports_email_notifications.setter
    def supports_email_notifications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_email_notifications", value)


if not MYPY:
    class WorkbookPropertiesArgsDict(TypedDict):
        """
        Properties that contain a workbook.
        """
        category: pulumi.Input[str]
        """
        Workbook category, as defined by the user at creation time.
        """
        name: pulumi.Input[str]
        """
        The user-defined name of the workbook.
        """
        serialized_data: pulumi.Input[str]
        """
        Configuration of this particular workbook. Configuration data is a string containing valid JSON
        """
        shared_type_kind: pulumi.Input[Union[str, 'SharedTypeKind']]
        """
        Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.
        """
        user_id: pulumi.Input[str]
        """
        Unique user id of the specific user that owns this workbook.
        """
        workbook_id: pulumi.Input[str]
        """
        Internally assigned unique id of the workbook definition.
        """
        source_resource_id: NotRequired[pulumi.Input[str]]
        """
        Optional resourceId for a source resource.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of 0 or more tags that are associated with this workbook definition
        """
        version: NotRequired[pulumi.Input[str]]
        """
        This instance's version of the data model. This can change as new features are added that can be marked workbook.
        """
elif False:
    WorkbookPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkbookPropertiesArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 name: pulumi.Input[str],
                 serialized_data: pulumi.Input[str],
                 shared_type_kind: Optional[pulumi.Input[Union[str, 'SharedTypeKind']]] = None,
                 user_id: pulumi.Input[str],
                 workbook_id: pulumi.Input[str],
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Properties that contain a workbook.
        :param pulumi.Input[str] category: Workbook category, as defined by the user at creation time.
        :param pulumi.Input[str] name: The user-defined name of the workbook.
        :param pulumi.Input[str] serialized_data: Configuration of this particular workbook. Configuration data is a string containing valid JSON
        :param pulumi.Input[Union[str, 'SharedTypeKind']] shared_type_kind: Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.
        :param pulumi.Input[str] user_id: Unique user id of the specific user that owns this workbook.
        :param pulumi.Input[str] workbook_id: Internally assigned unique id of the workbook definition.
        :param pulumi.Input[str] source_resource_id: Optional resourceId for a source resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of 0 or more tags that are associated with this workbook definition
        :param pulumi.Input[str] version: This instance's version of the data model. This can change as new features are added that can be marked workbook.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serialized_data", serialized_data)
        if shared_type_kind is None:
            shared_type_kind = 'shared'
        pulumi.set(__self__, "shared_type_kind", shared_type_kind)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "workbook_id", workbook_id)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        Workbook category, as defined by the user at creation time.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The user-defined name of the workbook.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serializedData")
    def serialized_data(self) -> pulumi.Input[str]:
        """
        Configuration of this particular workbook. Configuration data is a string containing valid JSON
        """
        return pulumi.get(self, "serialized_data")

    @serialized_data.setter
    def serialized_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "serialized_data", value)

    @property
    @pulumi.getter(name="sharedTypeKind")
    def shared_type_kind(self) -> pulumi.Input[Union[str, 'SharedTypeKind']]:
        """
        Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.
        """
        return pulumi.get(self, "shared_type_kind")

    @shared_type_kind.setter
    def shared_type_kind(self, value: pulumi.Input[Union[str, 'SharedTypeKind']]):
        pulumi.set(self, "shared_type_kind", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        Unique user id of the specific user that owns this workbook.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="workbookId")
    def workbook_id(self) -> pulumi.Input[str]:
        """
        Internally assigned unique id of the workbook definition.
        """
        return pulumi.get(self, "workbook_id")

    @workbook_id.setter
    def workbook_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workbook_id", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional resourceId for a source resource.
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of 0 or more tags that are associated with this workbook definition
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        This instance's version of the data model. This can change as new features are added that can be marked workbook.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


