# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._enums import *

__all__ = [
    'AzureOperationalStoreParametersResponse',
    'DatasourceResponse',
    'DatasourceSetResponse',
    'DppIdentityDetailsResponse',
    'InnerErrorResponse',
    'PolicyInfoResponse',
    'PolicyParametersResponse',
    'ProtectionStatusDetailsResponse',
    'StorageSettingResponse',
    'SystemDataResponse',
    'UserFacingErrorResponse',
]

@pulumi.output_type
class AzureOperationalStoreParametersResponse(dict):
    """
    Parameters for Operational-Tier DataStore
    """
    def __init__(__self__, *,
                 data_store_type: str,
                 object_type: str,
                 resource_group_id: Optional[str] = None):
        """
        Parameters for Operational-Tier DataStore
        :param str data_store_type: type of datastore; Operational/Vault/Archive
        :param str object_type: Type of the specific object - used for deserializing
               Expected value is 'AzureOperationalStoreParameters'.
        :param str resource_group_id: Gets or sets the Snapshot Resource Group Uri.
        """
        pulumi.set(__self__, "data_store_type", data_store_type)
        pulumi.set(__self__, "object_type", 'AzureOperationalStoreParameters')
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)

    @property
    @pulumi.getter(name="dataStoreType")
    def data_store_type(self) -> str:
        """
        type of datastore; Operational/Vault/Archive
        """
        return pulumi.get(self, "data_store_type")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Type of the specific object - used for deserializing
        Expected value is 'AzureOperationalStoreParameters'.
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[str]:
        """
        Gets or sets the Snapshot Resource Group Uri.
        """
        return pulumi.get(self, "resource_group_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasourceResponse(dict):
    """
    Datasource to be backed up
    """
    def __init__(__self__, *,
                 resource_id: str,
                 datasource_type: Optional[str] = None,
                 object_type: Optional[str] = None,
                 resource_location: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 resource_uri: Optional[str] = None):
        """
        Datasource to be backed up
        :param str resource_id: Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.
        :param str datasource_type: DatasourceType of the resource.
        :param str object_type: Type of Datasource object, used to initialize the right inherited type
        :param str resource_location: Location of datasource.
        :param str resource_name: Unique identifier of the resource in the context of parent.
        :param str resource_type: Resource Type of Datasource.
        :param str resource_uri: Uri of the resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if datasource_type is not None:
            pulumi.set(__self__, "datasource_type", datasource_type)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if resource_location is not None:
            pulumi.set(__self__, "resource_location", resource_location)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> str:
        """
        Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="datasourceType")
    def datasource_type(self) -> Optional[str]:
        """
        DatasourceType of the resource.
        """
        return pulumi.get(self, "datasource_type")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Type of Datasource object, used to initialize the right inherited type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> Optional[str]:
        """
        Location of datasource.
        """
        return pulumi.get(self, "resource_location")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        Unique identifier of the resource in the context of parent.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Resource Type of Datasource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[str]:
        """
        Uri of the resource.
        """
        return pulumi.get(self, "resource_uri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasourceSetResponse(dict):
    """
    DatasourceSet details of datasource to be backed up
    """
    def __init__(__self__, *,
                 resource_id: str,
                 datasource_type: Optional[str] = None,
                 object_type: Optional[str] = None,
                 resource_location: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 resource_uri: Optional[str] = None):
        """
        DatasourceSet details of datasource to be backed up
        :param str resource_id: Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.
        :param str datasource_type: DatasourceType of the resource.
        :param str object_type: Type of Datasource object, used to initialize the right inherited type
        :param str resource_location: Location of datasource.
        :param str resource_name: Unique identifier of the resource in the context of parent.
        :param str resource_type: Resource Type of Datasource.
        :param str resource_uri: Uri of the resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if datasource_type is not None:
            pulumi.set(__self__, "datasource_type", datasource_type)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if resource_location is not None:
            pulumi.set(__self__, "resource_location", resource_location)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> str:
        """
        Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="datasourceType")
    def datasource_type(self) -> Optional[str]:
        """
        DatasourceType of the resource.
        """
        return pulumi.get(self, "datasource_type")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Type of Datasource object, used to initialize the right inherited type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> Optional[str]:
        """
        Location of datasource.
        """
        return pulumi.get(self, "resource_location")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        Unique identifier of the resource in the context of parent.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Resource Type of Datasource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[str]:
        """
        Uri of the resource.
        """
        return pulumi.get(self, "resource_uri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DppIdentityDetailsResponse(dict):
    """
    Identity details
    """
    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        Identity details
        :param str principal_id: The object ID of the service principal object for the managed identity that is used to grant role-based access to an Azure resource.
        :param str tenant_id: A Globally Unique Identifier (GUID) that represents the Azure AD tenant where the resource is now a member.
        :param str type: The identityType which can be either SystemAssigned or None
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The object ID of the service principal object for the managed identity that is used to grant role-based access to an Azure resource.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        A Globally Unique Identifier (GUID) that represents the Azure AD tenant where the resource is now a member.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identityType which can be either SystemAssigned or None
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InnerErrorResponse(dict):
    """
    Inner Error
    """
    def __init__(__self__, *,
                 additional_info: Optional[Mapping[str, str]] = None,
                 code: Optional[str] = None,
                 embedded_inner_error: Optional['outputs.InnerErrorResponse'] = None):
        """
        Inner Error
        :param Mapping[str, str] additional_info: Any Key value pairs that can be provided to the client for additional  verbose information.
        :param str code: Unique code for this error
        :param 'InnerErrorResponseArgs' embedded_inner_error: Child Inner Error, to allow Nesting.
        """
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if embedded_inner_error is not None:
            pulumi.set(__self__, "embedded_inner_error", embedded_inner_error)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Mapping[str, str]]:
        """
        Any Key value pairs that can be provided to the client for additional  verbose information.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Unique code for this error
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="embeddedInnerError")
    def embedded_inner_error(self) -> Optional['outputs.InnerErrorResponse']:
        """
        Child Inner Error, to allow Nesting.
        """
        return pulumi.get(self, "embedded_inner_error")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyInfoResponse(dict):
    """
    Policy Info in backupInstance
    """
    def __init__(__self__, *,
                 policy_id: str,
                 policy_version: str,
                 policy_parameters: Optional['outputs.PolicyParametersResponse'] = None):
        """
        Policy Info in backupInstance
        :param 'PolicyParametersResponseArgs' policy_parameters: Policy parameters for the backup instance
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_version", policy_version)
        if policy_parameters is not None:
            pulumi.set(__self__, "policy_parameters", policy_parameters)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> str:
        return pulumi.get(self, "policy_version")

    @property
    @pulumi.getter(name="policyParameters")
    def policy_parameters(self) -> Optional['outputs.PolicyParametersResponse']:
        """
        Policy parameters for the backup instance
        """
        return pulumi.get(self, "policy_parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyParametersResponse(dict):
    """
    Parameters in Policy
    """
    def __init__(__self__, *,
                 data_store_parameters_list: Optional[Sequence['outputs.AzureOperationalStoreParametersResponse']] = None):
        """
        Parameters in Policy
        :param Sequence['AzureOperationalStoreParametersResponseArgs'] data_store_parameters_list: Gets or sets the DataStore Parameters
        """
        if data_store_parameters_list is not None:
            pulumi.set(__self__, "data_store_parameters_list", data_store_parameters_list)

    @property
    @pulumi.getter(name="dataStoreParametersList")
    def data_store_parameters_list(self) -> Optional[Sequence['outputs.AzureOperationalStoreParametersResponse']]:
        """
        Gets or sets the DataStore Parameters
        """
        return pulumi.get(self, "data_store_parameters_list")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProtectionStatusDetailsResponse(dict):
    """
    Protection status details
    """
    def __init__(__self__, *,
                 error_details: Optional['outputs.UserFacingErrorResponse'] = None,
                 status: Optional[str] = None):
        """
        Protection status details
        :param 'UserFacingErrorResponseArgs' error_details: Specifies the protection status error of the resource
        :param str status: Specifies the protection status of the resource
        """
        if error_details is not None:
            pulumi.set(__self__, "error_details", error_details)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Optional['outputs.UserFacingErrorResponse']:
        """
        Specifies the protection status error of the resource
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Specifies the protection status of the resource
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageSettingResponse(dict):
    """
    Storage setting
    """
    def __init__(__self__, *,
                 datastore_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Storage setting
        :param str datastore_type: Gets or sets the type of the datastore.
        :param str type: Gets or sets the type.
        """
        if datastore_type is not None:
            pulumi.set(__self__, "datastore_type", datastore_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> Optional[str]:
        """
        Gets or sets the type of the datastore.
        """
        return pulumi.get(self, "datastore_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Gets or sets the type.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The type of identity that last modified the resource.
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserFacingErrorResponse(dict):
    """
    Error object used by layers that have access to localized content, and propagate that to user
    """
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 details: Optional[Sequence['outputs.UserFacingErrorResponse']] = None,
                 inner_error: Optional['outputs.InnerErrorResponse'] = None,
                 is_retryable: Optional[bool] = None,
                 is_user_error: Optional[bool] = None,
                 message: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 recommended_action: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        """
        Error object used by layers that have access to localized content, and propagate that to user
        :param str code: Unique code for this error
        :param Sequence['UserFacingErrorResponseArgs'] details: Additional related Errors
        :param 'InnerErrorResponseArgs' inner_error: Inner Error
        :param bool is_retryable: Whether the operation will be retryable or not
        :param bool is_user_error: Whether the operation is due to a user error or service error
        :param Mapping[str, str] properties: Any key value pairs that can be injected inside error object
        :param Sequence[str] recommended_action: RecommendedAction � localized.
        :param str target: Target of the error.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if inner_error is not None:
            pulumi.set(__self__, "inner_error", inner_error)
        if is_retryable is not None:
            pulumi.set(__self__, "is_retryable", is_retryable)
        if is_user_error is not None:
            pulumi.set(__self__, "is_user_error", is_user_error)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if recommended_action is not None:
            pulumi.set(__self__, "recommended_action", recommended_action)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Unique code for this error
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.UserFacingErrorResponse']]:
        """
        Additional related Errors
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="innerError")
    def inner_error(self) -> Optional['outputs.InnerErrorResponse']:
        """
        Inner Error
        """
        return pulumi.get(self, "inner_error")

    @property
    @pulumi.getter(name="isRetryable")
    def is_retryable(self) -> Optional[bool]:
        """
        Whether the operation will be retryable or not
        """
        return pulumi.get(self, "is_retryable")

    @property
    @pulumi.getter(name="isUserError")
    def is_user_error(self) -> Optional[bool]:
        """
        Whether the operation is due to a user error or service error
        """
        return pulumi.get(self, "is_user_error")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        Any key value pairs that can be injected inside error object
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="recommendedAction")
    def recommended_action(self) -> Optional[Sequence[str]]:
        """
        RecommendedAction � localized.
        """
        return pulumi.get(self, "recommended_action")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Target of the error.
        """
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


