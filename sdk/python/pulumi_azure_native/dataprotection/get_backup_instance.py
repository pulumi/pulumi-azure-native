# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GetBackupInstanceResult',
    'AwaitableGetBackupInstanceResult',
    'get_backup_instance',
]

@pulumi.output_type
class GetBackupInstanceResult:
    """
    BackupInstance Resource
    """
    def __init__(__self__, current_protection_state=None, data_source_info=None, data_source_set_info=None, friendly_name=None, id=None, name=None, object_type=None, policy_info=None, protection_error_details=None, protection_status=None, provisioning_state=None, system_data=None, type=None):
        if current_protection_state and not isinstance(current_protection_state, str):
            raise TypeError("Expected argument 'current_protection_state' to be a str")
        pulumi.set(__self__, "current_protection_state", current_protection_state)
        if data_source_info and not isinstance(data_source_info, dict):
            raise TypeError("Expected argument 'data_source_info' to be a dict")
        pulumi.set(__self__, "data_source_info", data_source_info)
        if data_source_set_info and not isinstance(data_source_set_info, dict):
            raise TypeError("Expected argument 'data_source_set_info' to be a dict")
        pulumi.set(__self__, "data_source_set_info", data_source_set_info)
        if friendly_name and not isinstance(friendly_name, str):
            raise TypeError("Expected argument 'friendly_name' to be a str")
        pulumi.set(__self__, "friendly_name", friendly_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_type and not isinstance(object_type, str):
            raise TypeError("Expected argument 'object_type' to be a str")
        pulumi.set(__self__, "object_type", object_type)
        if policy_info and not isinstance(policy_info, dict):
            raise TypeError("Expected argument 'policy_info' to be a dict")
        pulumi.set(__self__, "policy_info", policy_info)
        if protection_error_details and not isinstance(protection_error_details, dict):
            raise TypeError("Expected argument 'protection_error_details' to be a dict")
        pulumi.set(__self__, "protection_error_details", protection_error_details)
        if protection_status and not isinstance(protection_status, dict):
            raise TypeError("Expected argument 'protection_status' to be a dict")
        pulumi.set(__self__, "protection_status", protection_status)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="currentProtectionState")
    def current_protection_state(self) -> str:
        """
        Specifies the current protection state of the resource
        """
        return pulumi.get(self, "current_protection_state")

    @property
    @pulumi.getter(name="dataSourceInfo")
    def data_source_info(self) -> 'outputs.DatasourceResponse':
        """
        Gets or sets the data source information.
        """
        return pulumi.get(self, "data_source_info")

    @property
    @pulumi.getter(name="dataSourceSetInfo")
    def data_source_set_info(self) -> Optional['outputs.DatasourceSetResponse']:
        """
        Gets or sets the data source set information.
        """
        return pulumi.get(self, "data_source_set_info")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> str:
        """
        Gets or sets the Backup Instance friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id represents the complete path to the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name associated with the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="policyInfo")
    def policy_info(self) -> 'outputs.PolicyInfoResponse':
        """
        Gets or sets the policy information.
        """
        return pulumi.get(self, "policy_info")

    @property
    @pulumi.getter(name="protectionErrorDetails")
    def protection_error_details(self) -> 'outputs.UserFacingErrorResponse':
        """
        Specifies the protection error of the resource
        """
        return pulumi.get(self, "protection_error_details")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> 'outputs.ProtectionStatusDetailsResponse':
        """
        Specifies the protection status of the resource
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
        """
        return pulumi.get(self, "type")


class AwaitableGetBackupInstanceResult(GetBackupInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupInstanceResult(
            current_protection_state=self.current_protection_state,
            data_source_info=self.data_source_info,
            data_source_set_info=self.data_source_set_info,
            friendly_name=self.friendly_name,
            id=self.id,
            name=self.name,
            object_type=self.object_type,
            policy_info=self.policy_info,
            protection_error_details=self.protection_error_details,
            protection_status=self.protection_status,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            type=self.type)


def get_backup_instance(backup_instance_name: Optional[str] = None,
                        resource_group_name: Optional[str] = None,
                        vault_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupInstanceResult:
    """
    BackupInstance Resource
    API Version: 2021-01-01.


    :param str backup_instance_name: The name of the backup instance
    :param str resource_group_name: The name of the resource group where the backup vault is present.
    :param str vault_name: The name of the backup vault.
    """
    __args__ = dict()
    __args__['backupInstanceName'] = backup_instance_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['vaultName'] = vault_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-native:dataprotection:getBackupInstance', __args__, opts=opts, typ=GetBackupInstanceResult).value

    return AwaitableGetBackupInstanceResult(
        current_protection_state=__ret__.current_protection_state,
        data_source_info=__ret__.data_source_info,
        data_source_set_info=__ret__.data_source_set_info,
        friendly_name=__ret__.friendly_name,
        id=__ret__.id,
        name=__ret__.name,
        object_type=__ret__.object_type,
        policy_info=__ret__.policy_info,
        protection_error_details=__ret__.protection_error_details,
        protection_status=__ret__.protection_status,
        provisioning_state=__ret__.provisioning_state,
        system_data=__ret__.system_data,
        type=__ret__.type)
