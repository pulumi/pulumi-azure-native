# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['BackupInstance']


class BackupInstance(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_instance_name: Optional[pulumi.Input[str]] = None,
                 data_source_info: Optional[pulumi.Input[pulumi.InputType['DatasourceArgs']]] = None,
                 data_source_set_info: Optional[pulumi.Input[pulumi.InputType['DatasourceSetArgs']]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 policy_info: Optional[pulumi.Input[pulumi.InputType['PolicyInfoArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 vault_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        BackupInstance Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_instance_name: The name of the backup instance
        :param pulumi.Input[pulumi.InputType['DatasourceArgs']] data_source_info: Gets or sets the data source information.
        :param pulumi.Input[pulumi.InputType['DatasourceSetArgs']] data_source_set_info: Gets or sets the data source set information.
        :param pulumi.Input[str] friendly_name: Gets or sets the Backup Instance friendly name.
        :param pulumi.Input[pulumi.InputType['PolicyInfoArgs']] policy_info: Gets or sets the policy information.
        :param pulumi.Input[str] resource_group_name: The name of the resource group where the backup vault is present.
        :param pulumi.Input[str] vault_name: The name of the backup vault.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['backup_instance_name'] = backup_instance_name
            if data_source_info is None and not opts.urn:
                raise TypeError("Missing required property 'data_source_info'")
            __props__['data_source_info'] = data_source_info
            __props__['data_source_set_info'] = data_source_set_info
            if friendly_name is None and not opts.urn:
                raise TypeError("Missing required property 'friendly_name'")
            __props__['friendly_name'] = friendly_name
            if object_type is None and not opts.urn:
                raise TypeError("Missing required property 'object_type'")
            __props__['object_type'] = object_type
            if policy_info is None and not opts.urn:
                raise TypeError("Missing required property 'policy_info'")
            __props__['policy_info'] = policy_info
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if vault_name is None and not opts.urn:
                raise TypeError("Missing required property 'vault_name'")
            __props__['vault_name'] = vault_name
            __props__['current_protection_state'] = None
            __props__['name'] = None
            __props__['protection_error_details'] = None
            __props__['protection_status'] = None
            __props__['provisioning_state'] = None
            __props__['system_data'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:dataprotection/v20210201preview:BackupInstance"), pulumi.Alias(type_="azure-native:dataprotection:BackupInstance"), pulumi.Alias(type_="azure-nextgen:dataprotection:BackupInstance"), pulumi.Alias(type_="azure-native:dataprotection/v20210101:BackupInstance"), pulumi.Alias(type_="azure-nextgen:dataprotection/v20210101:BackupInstance")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(BackupInstance, __self__).__init__(
            'azure-native:dataprotection/v20210201preview:BackupInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BackupInstance':
        """
        Get an existing BackupInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["current_protection_state"] = None
        __props__["data_source_info"] = None
        __props__["data_source_set_info"] = None
        __props__["friendly_name"] = None
        __props__["name"] = None
        __props__["object_type"] = None
        __props__["policy_info"] = None
        __props__["protection_error_details"] = None
        __props__["protection_status"] = None
        __props__["provisioning_state"] = None
        __props__["system_data"] = None
        __props__["type"] = None
        return BackupInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="currentProtectionState")
    def current_protection_state(self) -> pulumi.Output[str]:
        """
        Specifies the current protection state of the resource
        """
        return pulumi.get(self, "current_protection_state")

    @property
    @pulumi.getter(name="dataSourceInfo")
    def data_source_info(self) -> pulumi.Output['outputs.DatasourceResponse']:
        """
        Gets or sets the data source information.
        """
        return pulumi.get(self, "data_source_info")

    @property
    @pulumi.getter(name="dataSourceSetInfo")
    def data_source_set_info(self) -> pulumi.Output[Optional['outputs.DatasourceSetResponse']]:
        """
        Gets or sets the data source set information.
        """
        return pulumi.get(self, "data_source_set_info")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[str]:
        """
        Gets or sets the Backup Instance friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name associated with the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="policyInfo")
    def policy_info(self) -> pulumi.Output['outputs.PolicyInfoResponse']:
        """
        Gets or sets the policy information.
        """
        return pulumi.get(self, "policy_info")

    @property
    @pulumi.getter(name="protectionErrorDetails")
    def protection_error_details(self) -> pulumi.Output['outputs.UserFacingErrorResponse']:
        """
        Specifies the protection error of the resource
        """
        return pulumi.get(self, "protection_error_details")

    @property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> pulumi.Output['outputs.ProtectionStatusDetailsResponse']:
        """
        Specifies the protection status of the resource
        """
        return pulumi.get(self, "protection_status")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

