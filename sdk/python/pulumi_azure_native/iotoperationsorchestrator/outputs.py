# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BindingPropertiesResponse',
    'ComponentPropertiesResponse',
    'ExtendedLocationResponse',
    'ReconciliationPolicyResponse',
    'SystemDataResponse',
    'TargetSelectorPropertiesResponse',
    'TopologiesPropertiesResponse',
]

@pulumi.output_type
class BindingPropertiesResponse(dict):
    """
    Defines a component binding for a provider.
    """
    def __init__(__self__, *,
                 config: Any,
                 provider: _builtins.str,
                 role: _builtins.str):
        """
        Defines a component binding for a provider.
        :param Any config: Configuration values for the binding.
        :param _builtins.str provider: Name of the provider.
        :param _builtins.str role: Role that the provider binds to with the component.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "role", role)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Any:
        """
        Configuration values for the binding.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        Name of the provider.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Role that the provider binds to with the component.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class ComponentPropertiesResponse(dict):
    """
    Defines a desired runtime component.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 type: _builtins.str,
                 dependencies: Optional[Sequence[_builtins.str]] = None,
                 properties: Optional[Any] = None):
        """
        Defines a desired runtime component.
        :param _builtins.str name: Name of the component.
        :param _builtins.str type: Component type.
        :param Sequence[_builtins.str] dependencies: Component dependencies.
        :param Any properties: Properties of the component.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the component.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Component type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def dependencies(self) -> Optional[Sequence[_builtins.str]]:
        """
        Component dependencies.
        """
        return pulumi.get(self, "dependencies")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[Any]:
        """
        Properties of the component.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
        :param _builtins.str name: The name of the extended location.
        :param _builtins.str type: The type of the extended location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ReconciliationPolicyResponse(dict):
    """
    Reconciliation Policy.
    """
    def __init__(__self__, *,
                 type: _builtins.str,
                 interval: Optional[_builtins.str] = None):
        """
        Reconciliation Policy.
        :param _builtins.str type: Policy type
        :param _builtins.str interval: Policy interval.
        """
        pulumi.set(__self__, "type", type)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.str]:
        """
        Policy interval.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TargetSelectorPropertiesResponse(dict):
    """
    Properties of the reference target.
    """
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None):
        """
        Properties of the reference target.
        :param _builtins.str name: Name of the target.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the target.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TopologiesPropertiesResponse(dict):
    """
    Defines a desired runtime component.
    """
    def __init__(__self__, *,
                 bindings: Optional[Sequence['outputs.BindingPropertiesResponse']] = None):
        """
        Defines a desired runtime component.
        :param Sequence['BindingPropertiesResponse'] bindings: bindings description.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.BindingPropertiesResponse']]:
        """
        bindings description.
        """
        return pulumi.get(self, "bindings")


