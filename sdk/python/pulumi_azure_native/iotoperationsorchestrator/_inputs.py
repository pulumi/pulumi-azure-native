# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'BindingPropertiesArgs',
    'BindingPropertiesArgsDict',
    'ComponentPropertiesArgs',
    'ComponentPropertiesArgsDict',
    'ExtendedLocationArgs',
    'ExtendedLocationArgsDict',
    'ReconciliationPolicyArgs',
    'ReconciliationPolicyArgsDict',
    'TargetSelectorPropertiesArgs',
    'TargetSelectorPropertiesArgsDict',
    'TopologiesPropertiesArgs',
    'TopologiesPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class BindingPropertiesArgsDict(TypedDict):
        """
        Defines a component binding for a provider.
        """
        config: Any
        """
        Configuration values for the binding.
        """
        provider: pulumi.Input[builtins.str]
        """
        Name of the provider.
        """
        role: pulumi.Input[builtins.str]
        """
        Role that the provider binds to with the component.
        """
elif False:
    BindingPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BindingPropertiesArgs:
    def __init__(__self__, *,
                 config: Any,
                 provider: pulumi.Input[builtins.str],
                 role: pulumi.Input[builtins.str]):
        """
        Defines a component binding for a provider.
        :param Any config: Configuration values for the binding.
        :param pulumi.Input[builtins.str] provider: Name of the provider.
        :param pulumi.Input[builtins.str] role: Role that the provider binds to with the component.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def config(self) -> Any:
        """
        Configuration values for the binding.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Any):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Input[builtins.str]:
        """
        Name of the provider.
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[builtins.str]:
        """
        Role that the provider binds to with the component.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role", value)


if not MYPY:
    class ComponentPropertiesArgsDict(TypedDict):
        """
        Defines a desired runtime component.
        """
        name: pulumi.Input[builtins.str]
        """
        Name of the component.
        """
        type: pulumi.Input[builtins.str]
        """
        Component type.
        """
        dependencies: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Component dependencies.
        """
        properties: NotRequired[Any]
        """
        Properties of the component.
        """
elif False:
    ComponentPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComponentPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 properties: Optional[Any] = None):
        """
        Defines a desired runtime component.
        :param pulumi.Input[builtins.str] name: Name of the component.
        :param pulumi.Input[builtins.str] type: Component type.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dependencies: Component dependencies.
        :param Any properties: Properties of the component.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the component.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Component type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Component dependencies.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Any]:
        """
        Properties of the component.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[Any]):
        pulumi.set(self, "properties", value)


if not MYPY:
    class ExtendedLocationArgsDict(TypedDict):
        """
        Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
        """
        name: pulumi.Input[builtins.str]
        """
        The name of the extended location.
        """
        type: pulumi.Input[builtins.str]
        """
        The type of the extended location.
        """
elif False:
    ExtendedLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str]):
        """
        Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
        :param pulumi.Input[builtins.str] name: The name of the extended location.
        :param pulumi.Input[builtins.str] type: The type of the extended location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the extended location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The type of the extended location.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ReconciliationPolicyArgsDict(TypedDict):
        """
        Reconciliation Policy.
        """
        type: pulumi.Input[Union[builtins.str, 'ReconciliationPolicies']]
        """
        Policy type
        """
        interval: NotRequired[pulumi.Input[builtins.str]]
        """
        Policy interval.
        """
elif False:
    ReconciliationPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReconciliationPolicyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[builtins.str, 'ReconciliationPolicies']],
                 interval: Optional[pulumi.Input[builtins.str]] = None):
        """
        Reconciliation Policy.
        :param pulumi.Input[Union[builtins.str, 'ReconciliationPolicies']] type: Policy type
        :param pulumi.Input[builtins.str] interval: Policy interval.
        """
        pulumi.set(__self__, "type", type)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[builtins.str, 'ReconciliationPolicies']]:
        """
        Policy type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[builtins.str, 'ReconciliationPolicies']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Policy interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "interval", value)


if not MYPY:
    class TargetSelectorPropertiesArgsDict(TypedDict):
        """
        Properties of the reference target.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the target.
        """
elif False:
    TargetSelectorPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetSelectorPropertiesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Properties of the reference target.
        :param pulumi.Input[builtins.str] name: Name of the target.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the target.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TopologiesPropertiesArgsDict(TypedDict):
        """
        Defines a desired runtime component.
        """
        bindings: NotRequired[pulumi.Input[Sequence[pulumi.Input['BindingPropertiesArgsDict']]]]
        """
        bindings description.
        """
elif False:
    TopologiesPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TopologiesPropertiesArgs:
    def __init__(__self__, *,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['BindingPropertiesArgs']]]] = None):
        """
        Defines a desired runtime component.
        :param pulumi.Input[Sequence[pulumi.Input['BindingPropertiesArgs']]] bindings: bindings description.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingPropertiesArgs']]]]:
        """
        bindings description.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingPropertiesArgs']]]]):
        pulumi.set(self, "bindings", value)


