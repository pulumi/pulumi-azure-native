# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNamespaceDeviceResult',
    'AwaitableGetNamespaceDeviceResult',
    'get_namespace_device',
    'get_namespace_device_output',
]

@pulumi.output_type
class GetNamespaceDeviceResult:
    """
    Device definition.
    """
    def __init__(__self__, attributes=None, azure_api_version=None, discovered_device_ref=None, enabled=None, endpoints=None, etag=None, extended_location=None, external_device_id=None, id=None, last_transition_time=None, location=None, manufacturer=None, model=None, name=None, operating_system=None, operating_system_version=None, provisioning_state=None, status=None, system_data=None, tags=None, type=None, uuid=None, version=None):
        if attributes and not isinstance(attributes, dict):
            raise TypeError("Expected argument 'attributes' to be a dict")
        pulumi.set(__self__, "attributes", attributes)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if discovered_device_ref and not isinstance(discovered_device_ref, str):
            raise TypeError("Expected argument 'discovered_device_ref' to be a str")
        pulumi.set(__self__, "discovered_device_ref", discovered_device_ref)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if endpoints and not isinstance(endpoints, dict):
            raise TypeError("Expected argument 'endpoints' to be a dict")
        pulumi.set(__self__, "endpoints", endpoints)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if external_device_id and not isinstance(external_device_id, str):
            raise TypeError("Expected argument 'external_device_id' to be a str")
        pulumi.set(__self__, "external_device_id", external_device_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_transition_time and not isinstance(last_transition_time, str):
            raise TypeError("Expected argument 'last_transition_time' to be a str")
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if manufacturer and not isinstance(manufacturer, str):
            raise TypeError("Expected argument 'manufacturer' to be a str")
        pulumi.set(__self__, "manufacturer", manufacturer)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version and not isinstance(operating_system_version, str):
            raise TypeError("Expected argument 'operating_system_version' to be a str")
        pulumi.set(__self__, "operating_system_version", operating_system_version)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> _builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @_builtins.property
    @pulumi.getter(name="discoveredDeviceRef")
    def discovered_device_ref(self) -> Optional[_builtins.str]:
        """
        Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.
        """
        return pulumi.get(self, "discovered_device_ref")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Indicates if the resource is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Optional['outputs.MessagingEndpointsResponse']:
        """
        Property bag containing the device's unassigned and assigned endpoints.
        """
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        Resource Tag.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional['outputs.ExtendedLocationResponse']:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @_builtins.property
    @pulumi.getter(name="externalDeviceId")
    def external_device_id(self) -> Optional[_builtins.str]:
        """
        The Device ID provided by the customer.
        """
        return pulumi.get(self, "external_device_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> _builtins.str:
        """
        A timestamp (in UTC) that is updated each time the resource is modified.
        """
        return pulumi.get(self, "last_transition_time")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def manufacturer(self) -> Optional[_builtins.str]:
        """
        Device manufacturer.
        """
        return pulumi.get(self, "manufacturer")

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional[_builtins.str]:
        """
        Device model.
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[_builtins.str]:
        """
        Device operating system.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[_builtins.str]:
        """
        Device operating system version.
        """
        return pulumi.get(self, "operating_system_version")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.DeviceStatusResponse':
        """
        Device status updates.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        """
        A unique identifier for the device.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.float:
        """
        An integer that is incremented each time the resource is modified.
        """
        return pulumi.get(self, "version")


class AwaitableGetNamespaceDeviceResult(GetNamespaceDeviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespaceDeviceResult(
            attributes=self.attributes,
            azure_api_version=self.azure_api_version,
            discovered_device_ref=self.discovered_device_ref,
            enabled=self.enabled,
            endpoints=self.endpoints,
            etag=self.etag,
            extended_location=self.extended_location,
            external_device_id=self.external_device_id,
            id=self.id,
            last_transition_time=self.last_transition_time,
            location=self.location,
            manufacturer=self.manufacturer,
            model=self.model,
            name=self.name,
            operating_system=self.operating_system,
            operating_system_version=self.operating_system_version,
            provisioning_state=self.provisioning_state,
            status=self.status,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            uuid=self.uuid,
            version=self.version)


def get_namespace_device(device_name: Optional[_builtins.str] = None,
                         namespace_name: Optional[_builtins.str] = None,
                         resource_group_name: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamespaceDeviceResult:
    """
    Get a NamespaceDevice

    Uses Azure REST API version 2025-07-01-preview.

    Other available API versions: 2025-10-01, 2025-11-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native deviceregistry [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param _builtins.str device_name: The name of the device.
    :param _builtins.str namespace_name: The name of the namespace.
    :param _builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['deviceName'] = device_name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:deviceregistry:getNamespaceDevice', __args__, opts=opts, typ=GetNamespaceDeviceResult).value

    return AwaitableGetNamespaceDeviceResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        discovered_device_ref=pulumi.get(__ret__, 'discovered_device_ref'),
        enabled=pulumi.get(__ret__, 'enabled'),
        endpoints=pulumi.get(__ret__, 'endpoints'),
        etag=pulumi.get(__ret__, 'etag'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        external_device_id=pulumi.get(__ret__, 'external_device_id'),
        id=pulumi.get(__ret__, 'id'),
        last_transition_time=pulumi.get(__ret__, 'last_transition_time'),
        location=pulumi.get(__ret__, 'location'),
        manufacturer=pulumi.get(__ret__, 'manufacturer'),
        model=pulumi.get(__ret__, 'model'),
        name=pulumi.get(__ret__, 'name'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        operating_system_version=pulumi.get(__ret__, 'operating_system_version'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'),
        version=pulumi.get(__ret__, 'version'))
def get_namespace_device_output(device_name: Optional[pulumi.Input[_builtins.str]] = None,
                                namespace_name: Optional[pulumi.Input[_builtins.str]] = None,
                                resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNamespaceDeviceResult]:
    """
    Get a NamespaceDevice

    Uses Azure REST API version 2025-07-01-preview.

    Other available API versions: 2025-10-01, 2025-11-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native deviceregistry [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.


    :param _builtins.str device_name: The name of the device.
    :param _builtins.str namespace_name: The name of the namespace.
    :param _builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['deviceName'] = device_name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:deviceregistry:getNamespaceDevice', __args__, opts=opts, typ=GetNamespaceDeviceResult)
    return __ret__.apply(lambda __response__: GetNamespaceDeviceResult(
        attributes=pulumi.get(__response__, 'attributes'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        discovered_device_ref=pulumi.get(__response__, 'discovered_device_ref'),
        enabled=pulumi.get(__response__, 'enabled'),
        endpoints=pulumi.get(__response__, 'endpoints'),
        etag=pulumi.get(__response__, 'etag'),
        extended_location=pulumi.get(__response__, 'extended_location'),
        external_device_id=pulumi.get(__response__, 'external_device_id'),
        id=pulumi.get(__response__, 'id'),
        last_transition_time=pulumi.get(__response__, 'last_transition_time'),
        location=pulumi.get(__response__, 'location'),
        manufacturer=pulumi.get(__response__, 'manufacturer'),
        model=pulumi.get(__response__, 'model'),
        name=pulumi.get(__response__, 'name'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        operating_system_version=pulumi.get(__response__, 'operating_system_version'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        status=pulumi.get(__response__, 'status'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid'),
        version=pulumi.get(__response__, 'version')))
