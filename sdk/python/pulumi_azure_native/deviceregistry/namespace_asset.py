# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['NamespaceAssetArgs', 'NamespaceAsset']

@pulumi.input_type
class NamespaceAssetArgs:
    def __init__(__self__, *,
                 device_ref: pulumi.Input['DeviceRefArgs'],
                 extended_location: pulumi.Input['ExtendedLocationArgs'],
                 namespace_name: pulumi.Input[builtins.str],
                 resource_group_name: pulumi.Input[builtins.str],
                 asset_name: Optional[pulumi.Input[builtins.str]] = None,
                 asset_type_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 attributes: Optional[Any] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceDatasetArgs']]]] = None,
                 default_datasets_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_datasets_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetMqttDestinationArgs', 'DatasetStorageDestinationArgs']]]]] = None,
                 default_events_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_events_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventMqttDestinationArgs', 'EventStorageDestinationArgs']]]]] = None,
                 default_management_groups_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_streams_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_streams_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StreamMqttDestinationArgs', 'StreamStorageDestinationArgs']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 discovered_asset_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 documentation_uri: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceEventArgs']]]] = None,
                 external_asset_id: Optional[pulumi.Input[builtins.str]] = None,
                 hardware_revision: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 management_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementGroupArgs']]]] = None,
                 manufacturer: Optional[pulumi.Input[builtins.str]] = None,
                 manufacturer_uri: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 product_code: Optional[pulumi.Input[builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[builtins.str]] = None,
                 software_revision: Optional[pulumi.Input[builtins.str]] = None,
                 streams: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceStreamArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a NamespaceAsset resource.
        :param pulumi.Input['DeviceRefArgs'] device_ref: Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.
        :param pulumi.Input['ExtendedLocationArgs'] extended_location: The extended location.
        :param pulumi.Input[builtins.str] namespace_name: The name of the namespace.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] asset_name: The name of the asset.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] asset_type_refs: URIs or type definition IDs.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceDatasetArgs']]] datasets: Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        :param pulumi.Input[builtins.str] default_datasets_configuration: Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetMqttDestinationArgs', 'DatasetStorageDestinationArgs']]]] default_datasets_destinations: Default destinations for a dataset.
        :param pulumi.Input[builtins.str] default_events_configuration: Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EventMqttDestinationArgs', 'EventStorageDestinationArgs']]]] default_events_destinations: Default destinations for an event.
        :param pulumi.Input[builtins.str] default_management_groups_configuration: Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        :param pulumi.Input[builtins.str] default_streams_configuration: Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StreamMqttDestinationArgs', 'StreamStorageDestinationArgs']]]] default_streams_destinations: Default destinations for a stream.
        :param pulumi.Input[builtins.str] description: Human-readable description of the asset.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] discovered_asset_refs: Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        :param pulumi.Input[builtins.str] display_name: Human-readable display name.
        :param pulumi.Input[builtins.str] documentation_uri: Asset documentation reference.
        :param pulumi.Input[builtins.bool] enabled: Enabled/disabled status of the asset.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceEventArgs']]] events: Array of events that are part of the asset. Each event can have per-event configuration.
        :param pulumi.Input[builtins.str] external_asset_id: Asset ID provided by the customer.
        :param pulumi.Input[builtins.str] hardware_revision: Asset hardware revision number.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[Sequence[pulumi.Input['ManagementGroupArgs']]] management_groups: Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        :param pulumi.Input[builtins.str] manufacturer: Asset manufacturer.
        :param pulumi.Input[builtins.str] manufacturer_uri: Asset manufacturer URI.
        :param pulumi.Input[builtins.str] model: Asset model.
        :param pulumi.Input[builtins.str] product_code: Asset product code.
        :param pulumi.Input[builtins.str] serial_number: Asset serial number.
        :param pulumi.Input[builtins.str] software_revision: Asset software revision number.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceStreamArgs']]] streams: Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "device_ref", device_ref)
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if asset_name is not None:
            pulumi.set(__self__, "asset_name", asset_name)
        if asset_type_refs is not None:
            pulumi.set(__self__, "asset_type_refs", asset_type_refs)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if default_datasets_configuration is not None:
            pulumi.set(__self__, "default_datasets_configuration", default_datasets_configuration)
        if default_datasets_destinations is not None:
            pulumi.set(__self__, "default_datasets_destinations", default_datasets_destinations)
        if default_events_configuration is not None:
            pulumi.set(__self__, "default_events_configuration", default_events_configuration)
        if default_events_destinations is not None:
            pulumi.set(__self__, "default_events_destinations", default_events_destinations)
        if default_management_groups_configuration is not None:
            pulumi.set(__self__, "default_management_groups_configuration", default_management_groups_configuration)
        if default_streams_configuration is not None:
            pulumi.set(__self__, "default_streams_configuration", default_streams_configuration)
        if default_streams_destinations is not None:
            pulumi.set(__self__, "default_streams_destinations", default_streams_destinations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discovered_asset_refs is not None:
            pulumi.set(__self__, "discovered_asset_refs", discovered_asset_refs)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if documentation_uri is not None:
            pulumi.set(__self__, "documentation_uri", documentation_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if external_asset_id is not None:
            pulumi.set(__self__, "external_asset_id", external_asset_id)
        if hardware_revision is not None:
            pulumi.set(__self__, "hardware_revision", hardware_revision)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if management_groups is not None:
            pulumi.set(__self__, "management_groups", management_groups)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if manufacturer_uri is not None:
            pulumi.set(__self__, "manufacturer_uri", manufacturer_uri)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if product_code is not None:
            pulumi.set(__self__, "product_code", product_code)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if software_revision is not None:
            pulumi.set(__self__, "software_revision", software_revision)
        if streams is not None:
            pulumi.set(__self__, "streams", streams)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="deviceRef")
    def device_ref(self) -> pulumi.Input['DeviceRefArgs']:
        """
        Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.
        """
        return pulumi.get(self, "device_ref")

    @device_ref.setter
    def device_ref(self, value: pulumi.Input['DeviceRefArgs']):
        pulumi.set(self, "device_ref", value)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationArgs']:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="assetName")
    def asset_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the asset.
        """
        return pulumi.get(self, "asset_name")

    @asset_name.setter
    def asset_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "asset_name", value)

    @property
    @pulumi.getter(name="assetTypeRefs")
    def asset_type_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URIs or type definition IDs.
        """
        return pulumi.get(self, "asset_type_refs")

    @asset_type_refs.setter
    def asset_type_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "asset_type_refs", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[Any]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def datasets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceDatasetArgs']]]]:
        """
        Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        """
        return pulumi.get(self, "datasets")

    @datasets.setter
    def datasets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceDatasetArgs']]]]):
        pulumi.set(self, "datasets", value)

    @property
    @pulumi.getter(name="defaultDatasetsConfiguration")
    def default_datasets_configuration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_datasets_configuration")

    @default_datasets_configuration.setter
    def default_datasets_configuration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_datasets_configuration", value)

    @property
    @pulumi.getter(name="defaultDatasetsDestinations")
    def default_datasets_destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetMqttDestinationArgs', 'DatasetStorageDestinationArgs']]]]]:
        """
        Default destinations for a dataset.
        """
        return pulumi.get(self, "default_datasets_destinations")

    @default_datasets_destinations.setter
    def default_datasets_destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetMqttDestinationArgs', 'DatasetStorageDestinationArgs']]]]]):
        pulumi.set(self, "default_datasets_destinations", value)

    @property
    @pulumi.getter(name="defaultEventsConfiguration")
    def default_events_configuration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_events_configuration")

    @default_events_configuration.setter
    def default_events_configuration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_events_configuration", value)

    @property
    @pulumi.getter(name="defaultEventsDestinations")
    def default_events_destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventMqttDestinationArgs', 'EventStorageDestinationArgs']]]]]:
        """
        Default destinations for an event.
        """
        return pulumi.get(self, "default_events_destinations")

    @default_events_destinations.setter
    def default_events_destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EventMqttDestinationArgs', 'EventStorageDestinationArgs']]]]]):
        pulumi.set(self, "default_events_destinations", value)

    @property
    @pulumi.getter(name="defaultManagementGroupsConfiguration")
    def default_management_groups_configuration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_management_groups_configuration")

    @default_management_groups_configuration.setter
    def default_management_groups_configuration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_management_groups_configuration", value)

    @property
    @pulumi.getter(name="defaultStreamsConfiguration")
    def default_streams_configuration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_streams_configuration")

    @default_streams_configuration.setter
    def default_streams_configuration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_streams_configuration", value)

    @property
    @pulumi.getter(name="defaultStreamsDestinations")
    def default_streams_destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union['StreamMqttDestinationArgs', 'StreamStorageDestinationArgs']]]]]:
        """
        Default destinations for a stream.
        """
        return pulumi.get(self, "default_streams_destinations")

    @default_streams_destinations.setter
    def default_streams_destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StreamMqttDestinationArgs', 'StreamStorageDestinationArgs']]]]]):
        pulumi.set(self, "default_streams_destinations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Human-readable description of the asset.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discoveredAssetRefs")
    def discovered_asset_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        """
        return pulumi.get(self, "discovered_asset_refs")

    @discovered_asset_refs.setter
    def discovered_asset_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "discovered_asset_refs", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Human-readable display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="documentationUri")
    def documentation_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset documentation reference.
        """
        return pulumi.get(self, "documentation_uri")

    @documentation_uri.setter
    def documentation_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "documentation_uri", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enabled/disabled status of the asset.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceEventArgs']]]]:
        """
        Array of events that are part of the asset. Each event can have per-event configuration.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="externalAssetId")
    def external_asset_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset ID provided by the customer.
        """
        return pulumi.get(self, "external_asset_id")

    @external_asset_id.setter
    def external_asset_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_asset_id", value)

    @property
    @pulumi.getter(name="hardwareRevision")
    def hardware_revision(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset hardware revision number.
        """
        return pulumi.get(self, "hardware_revision")

    @hardware_revision.setter
    def hardware_revision(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hardware_revision", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managementGroups")
    def management_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementGroupArgs']]]]:
        """
        Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        """
        return pulumi.get(self, "management_groups")

    @management_groups.setter
    def management_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementGroupArgs']]]]):
        pulumi.set(self, "management_groups", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset manufacturer.
        """
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="manufacturerUri")
    def manufacturer_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset manufacturer URI.
        """
        return pulumi.get(self, "manufacturer_uri")

    @manufacturer_uri.setter
    def manufacturer_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "manufacturer_uri", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset model.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset product code.
        """
        return pulumi.get(self, "product_code")

    @product_code.setter
    def product_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "product_code", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset serial number.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="softwareRevision")
    def software_revision(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Asset software revision number.
        """
        return pulumi.get(self, "software_revision")

    @software_revision.setter
    def software_revision(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "software_revision", value)

    @property
    @pulumi.getter
    def streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceStreamArgs']]]]:
        """
        Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        """
        return pulumi.get(self, "streams")

    @streams.setter
    def streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceStreamArgs']]]]):
        pulumi.set(self, "streams", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:deviceregistry:NamespaceAsset")
class NamespaceAsset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_name: Optional[pulumi.Input[builtins.str]] = None,
                 asset_type_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 attributes: Optional[Any] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceDatasetArgs', 'NamespaceDatasetArgsDict']]]]] = None,
                 default_datasets_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_datasets_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetBrokerStateStoreDestinationArgsDict'], Union['DatasetMqttDestinationArgs', 'DatasetMqttDestinationArgsDict'], Union['DatasetStorageDestinationArgs', 'DatasetStorageDestinationArgsDict']]]]]] = None,
                 default_events_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_events_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['EventMqttDestinationArgs', 'EventMqttDestinationArgsDict'], Union['EventStorageDestinationArgs', 'EventStorageDestinationArgsDict']]]]]] = None,
                 default_management_groups_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_streams_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_streams_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['StreamMqttDestinationArgs', 'StreamMqttDestinationArgsDict'], Union['StreamStorageDestinationArgs', 'StreamStorageDestinationArgsDict']]]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 device_ref: Optional[pulumi.Input[Union['DeviceRefArgs', 'DeviceRefArgsDict']]] = None,
                 discovered_asset_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 documentation_uri: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceEventArgs', 'NamespaceEventArgsDict']]]]] = None,
                 extended_location: Optional[pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']]] = None,
                 external_asset_id: Optional[pulumi.Input[builtins.str]] = None,
                 hardware_revision: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 management_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ManagementGroupArgs', 'ManagementGroupArgsDict']]]]] = None,
                 manufacturer: Optional[pulumi.Input[builtins.str]] = None,
                 manufacturer_uri: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[builtins.str]] = None,
                 product_code: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[builtins.str]] = None,
                 software_revision: Optional[pulumi.Input[builtins.str]] = None,
                 streams: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceStreamArgs', 'NamespaceStreamArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Asset definition.

        Uses Azure REST API version 2025-07-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] asset_name: The name of the asset.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] asset_type_refs: URIs or type definition IDs.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NamespaceDatasetArgs', 'NamespaceDatasetArgsDict']]]] datasets: Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        :param pulumi.Input[builtins.str] default_datasets_configuration: Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        :param pulumi.Input[Sequence[pulumi.Input[Union[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetBrokerStateStoreDestinationArgsDict'], Union['DatasetMqttDestinationArgs', 'DatasetMqttDestinationArgsDict'], Union['DatasetStorageDestinationArgs', 'DatasetStorageDestinationArgsDict']]]]] default_datasets_destinations: Default destinations for a dataset.
        :param pulumi.Input[builtins.str] default_events_configuration: Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        :param pulumi.Input[Sequence[pulumi.Input[Union[Union['EventMqttDestinationArgs', 'EventMqttDestinationArgsDict'], Union['EventStorageDestinationArgs', 'EventStorageDestinationArgsDict']]]]] default_events_destinations: Default destinations for an event.
        :param pulumi.Input[builtins.str] default_management_groups_configuration: Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        :param pulumi.Input[builtins.str] default_streams_configuration: Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        :param pulumi.Input[Sequence[pulumi.Input[Union[Union['StreamMqttDestinationArgs', 'StreamMqttDestinationArgsDict'], Union['StreamStorageDestinationArgs', 'StreamStorageDestinationArgsDict']]]]] default_streams_destinations: Default destinations for a stream.
        :param pulumi.Input[builtins.str] description: Human-readable description of the asset.
        :param pulumi.Input[Union['DeviceRefArgs', 'DeviceRefArgsDict']] device_ref: Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] discovered_asset_refs: Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        :param pulumi.Input[builtins.str] display_name: Human-readable display name.
        :param pulumi.Input[builtins.str] documentation_uri: Asset documentation reference.
        :param pulumi.Input[builtins.bool] enabled: Enabled/disabled status of the asset.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NamespaceEventArgs', 'NamespaceEventArgsDict']]]] events: Array of events that are part of the asset. Each event can have per-event configuration.
        :param pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']] extended_location: The extended location.
        :param pulumi.Input[builtins.str] external_asset_id: Asset ID provided by the customer.
        :param pulumi.Input[builtins.str] hardware_revision: Asset hardware revision number.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[Sequence[pulumi.Input[Union['ManagementGroupArgs', 'ManagementGroupArgsDict']]]] management_groups: Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        :param pulumi.Input[builtins.str] manufacturer: Asset manufacturer.
        :param pulumi.Input[builtins.str] manufacturer_uri: Asset manufacturer URI.
        :param pulumi.Input[builtins.str] model: Asset model.
        :param pulumi.Input[builtins.str] namespace_name: The name of the namespace.
        :param pulumi.Input[builtins.str] product_code: Asset product code.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[builtins.str] serial_number: Asset serial number.
        :param pulumi.Input[builtins.str] software_revision: Asset software revision number.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NamespaceStreamArgs', 'NamespaceStreamArgsDict']]]] streams: Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceAssetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Asset definition.

        Uses Azure REST API version 2025-07-01-preview.

        :param str resource_name: The name of the resource.
        :param NamespaceAssetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceAssetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_name: Optional[pulumi.Input[builtins.str]] = None,
                 asset_type_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 attributes: Optional[Any] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceDatasetArgs', 'NamespaceDatasetArgsDict']]]]] = None,
                 default_datasets_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_datasets_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['DatasetBrokerStateStoreDestinationArgs', 'DatasetBrokerStateStoreDestinationArgsDict'], Union['DatasetMqttDestinationArgs', 'DatasetMqttDestinationArgsDict'], Union['DatasetStorageDestinationArgs', 'DatasetStorageDestinationArgsDict']]]]]] = None,
                 default_events_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_events_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['EventMqttDestinationArgs', 'EventMqttDestinationArgsDict'], Union['EventStorageDestinationArgs', 'EventStorageDestinationArgsDict']]]]]] = None,
                 default_management_groups_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_streams_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 default_streams_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['StreamMqttDestinationArgs', 'StreamMqttDestinationArgsDict'], Union['StreamStorageDestinationArgs', 'StreamStorageDestinationArgsDict']]]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 device_ref: Optional[pulumi.Input[Union['DeviceRefArgs', 'DeviceRefArgsDict']]] = None,
                 discovered_asset_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 documentation_uri: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceEventArgs', 'NamespaceEventArgsDict']]]]] = None,
                 extended_location: Optional[pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']]] = None,
                 external_asset_id: Optional[pulumi.Input[builtins.str]] = None,
                 hardware_revision: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 management_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ManagementGroupArgs', 'ManagementGroupArgsDict']]]]] = None,
                 manufacturer: Optional[pulumi.Input[builtins.str]] = None,
                 manufacturer_uri: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[builtins.str]] = None,
                 product_code: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[builtins.str]] = None,
                 software_revision: Optional[pulumi.Input[builtins.str]] = None,
                 streams: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceStreamArgs', 'NamespaceStreamArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceAssetArgs.__new__(NamespaceAssetArgs)

            __props__.__dict__["asset_name"] = asset_name
            __props__.__dict__["asset_type_refs"] = asset_type_refs
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["datasets"] = datasets
            __props__.__dict__["default_datasets_configuration"] = default_datasets_configuration
            __props__.__dict__["default_datasets_destinations"] = default_datasets_destinations
            __props__.__dict__["default_events_configuration"] = default_events_configuration
            __props__.__dict__["default_events_destinations"] = default_events_destinations
            __props__.__dict__["default_management_groups_configuration"] = default_management_groups_configuration
            __props__.__dict__["default_streams_configuration"] = default_streams_configuration
            __props__.__dict__["default_streams_destinations"] = default_streams_destinations
            __props__.__dict__["description"] = description
            if device_ref is None and not opts.urn:
                raise TypeError("Missing required property 'device_ref'")
            __props__.__dict__["device_ref"] = device_ref
            __props__.__dict__["discovered_asset_refs"] = discovered_asset_refs
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["documentation_uri"] = documentation_uri
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["events"] = events
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            __props__.__dict__["external_asset_id"] = external_asset_id
            __props__.__dict__["hardware_revision"] = hardware_revision
            __props__.__dict__["location"] = location
            __props__.__dict__["management_groups"] = management_groups
            __props__.__dict__["manufacturer"] = manufacturer
            __props__.__dict__["manufacturer_uri"] = manufacturer_uri
            __props__.__dict__["model"] = model
            if namespace_name is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_name'")
            __props__.__dict__["namespace_name"] = namespace_name
            __props__.__dict__["product_code"] = product_code
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["software_revision"] = software_revision
            __props__.__dict__["streams"] = streams
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["last_transition_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
            __props__.__dict__["version"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:deviceregistry/v20250701preview:NamespaceAsset")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(NamespaceAsset, __self__).__init__(
            'azure-native:deviceregistry:NamespaceAsset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NamespaceAsset':
        """
        Get an existing NamespaceAsset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NamespaceAssetArgs.__new__(NamespaceAssetArgs)

        __props__.__dict__["asset_type_refs"] = None
        __props__.__dict__["attributes"] = None
        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["datasets"] = None
        __props__.__dict__["default_datasets_configuration"] = None
        __props__.__dict__["default_datasets_destinations"] = None
        __props__.__dict__["default_events_configuration"] = None
        __props__.__dict__["default_events_destinations"] = None
        __props__.__dict__["default_management_groups_configuration"] = None
        __props__.__dict__["default_streams_configuration"] = None
        __props__.__dict__["default_streams_destinations"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["device_ref"] = None
        __props__.__dict__["discovered_asset_refs"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["documentation_uri"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["events"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["external_asset_id"] = None
        __props__.__dict__["hardware_revision"] = None
        __props__.__dict__["last_transition_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["management_groups"] = None
        __props__.__dict__["manufacturer"] = None
        __props__.__dict__["manufacturer_uri"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["product_code"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["serial_number"] = None
        __props__.__dict__["software_revision"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["streams"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["uuid"] = None
        __props__.__dict__["version"] = None
        return NamespaceAsset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assetTypeRefs")
    def asset_type_refs(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        URIs or type definition IDs.
        """
        return pulumi.get(self, "asset_type_refs")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[Any]]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def datasets(self) -> pulumi.Output[Optional[Sequence['outputs.NamespaceDatasetResponse']]]:
        """
        Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter(name="defaultDatasetsConfiguration")
    def default_datasets_configuration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_datasets_configuration")

    @property
    @pulumi.getter(name="defaultDatasetsDestinations")
    def default_datasets_destinations(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        Default destinations for a dataset.
        """
        return pulumi.get(self, "default_datasets_destinations")

    @property
    @pulumi.getter(name="defaultEventsConfiguration")
    def default_events_configuration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_events_configuration")

    @property
    @pulumi.getter(name="defaultEventsDestinations")
    def default_events_destinations(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        Default destinations for an event.
        """
        return pulumi.get(self, "default_events_destinations")

    @property
    @pulumi.getter(name="defaultManagementGroupsConfiguration")
    def default_management_groups_configuration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_management_groups_configuration")

    @property
    @pulumi.getter(name="defaultStreamsConfiguration")
    def default_streams_configuration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_streams_configuration")

    @property
    @pulumi.getter(name="defaultStreamsDestinations")
    def default_streams_destinations(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        Default destinations for a stream.
        """
        return pulumi.get(self, "default_streams_destinations")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Human-readable description of the asset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceRef")
    def device_ref(self) -> pulumi.Output['outputs.DeviceRefResponse']:
        """
        Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.
        """
        return pulumi.get(self, "device_ref")

    @property
    @pulumi.getter(name="discoveredAssetRefs")
    def discovered_asset_refs(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        """
        return pulumi.get(self, "discovered_asset_refs")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Human-readable display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="documentationUri")
    def documentation_uri(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset documentation reference.
        """
        return pulumi.get(self, "documentation_uri")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enabled/disabled status of the asset.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Optional[Sequence['outputs.NamespaceEventResponse']]]:
        """
        Array of events that are part of the asset. Each event can have per-event configuration.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationResponse']:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="externalAssetId")
    def external_asset_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset ID provided by the customer.
        """
        return pulumi.get(self, "external_asset_id")

    @property
    @pulumi.getter(name="hardwareRevision")
    def hardware_revision(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset hardware revision number.
        """
        return pulumi.get(self, "hardware_revision")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Output[builtins.str]:
        """
        A timestamp (in UTC) that is updated each time the resource is modified.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managementGroups")
    def management_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ManagementGroupResponse']]]:
        """
        Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        """
        return pulumi.get(self, "management_groups")

    @property
    @pulumi.getter
    def manufacturer(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset manufacturer.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="manufacturerUri")
    def manufacturer_uri(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset manufacturer URI.
        """
        return pulumi.get(self, "manufacturer_uri")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset model.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="softwareRevision")
    def software_revision(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Asset software revision number.
        """
        return pulumi.get(self, "software_revision")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.NamespaceAssetStatusResponse']:
        """
        Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def streams(self) -> pulumi.Output[Optional[Sequence['outputs.NamespaceStreamResponse']]]:
        """
        Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[builtins.str]:
        """
        Globally unique, immutable, non-reusable ID.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.float]:
        """
        An integer that is incremented each time the resource is modified.
        """
        return pulumi.get(self, "version")

