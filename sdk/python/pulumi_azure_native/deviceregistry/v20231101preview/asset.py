# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AssetArgs', 'Asset']

@pulumi.input_type
class AssetArgs:
    def __init__(__self__, *,
                 asset_endpoint_profile_uri: pulumi.Input[str],
                 extended_location: pulumi.Input['ExtendedLocationArgs'],
                 resource_group_name: pulumi.Input[str],
                 asset_name: Optional[pulumi.Input[str]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[Any] = None,
                 data_points: Optional[pulumi.Input[Sequence[pulumi.Input['DataPointArgs']]]] = None,
                 default_data_points_configuration: Optional[pulumi.Input[str]] = None,
                 default_events_configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 documentation_uri: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['EventArgs']]]] = None,
                 external_asset_id: Optional[pulumi.Input[str]] = None,
                 hardware_revision: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 manufacturer_uri: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 product_code: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 software_revision: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Asset resource.
        :param pulumi.Input[str] asset_endpoint_profile_uri: A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>.
        :param pulumi.Input['ExtendedLocationArgs'] extended_location: The extended location.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] asset_name: Asset name parameter.
        :param pulumi.Input[str] asset_type: Resource path to asset type (model) definition.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param pulumi.Input[Sequence[pulumi.Input['DataPointArgs']]] data_points: Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element.
        :param pulumi.Input[str] default_data_points_configuration: Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        :param pulumi.Input[str] default_events_configuration: Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        :param pulumi.Input[str] description: Human-readable description of the asset.
        :param pulumi.Input[str] display_name: Human-readable display name.
        :param pulumi.Input[str] documentation_uri: Reference to the documentation.
        :param pulumi.Input[bool] enabled: Enabled/Disabled status of the asset.
        :param pulumi.Input[Sequence[pulumi.Input['EventArgs']]] events: Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element.
        :param pulumi.Input[str] external_asset_id: Asset id provided by the customer.
        :param pulumi.Input[str] hardware_revision: Revision number of the hardware.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] manufacturer: Asset manufacturer name.
        :param pulumi.Input[str] manufacturer_uri: Asset manufacturer URI.
        :param pulumi.Input[str] model: Asset model name.
        :param pulumi.Input[str] product_code: Asset product code.
        :param pulumi.Input[str] serial_number: Asset serial number.
        :param pulumi.Input[str] software_revision: Revision number of the software.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "asset_endpoint_profile_uri", asset_endpoint_profile_uri)
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if asset_name is not None:
            pulumi.set(__self__, "asset_name", asset_name)
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if data_points is not None:
            pulumi.set(__self__, "data_points", data_points)
        if default_data_points_configuration is not None:
            pulumi.set(__self__, "default_data_points_configuration", default_data_points_configuration)
        if default_events_configuration is not None:
            pulumi.set(__self__, "default_events_configuration", default_events_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if documentation_uri is not None:
            pulumi.set(__self__, "documentation_uri", documentation_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if external_asset_id is not None:
            pulumi.set(__self__, "external_asset_id", external_asset_id)
        if hardware_revision is not None:
            pulumi.set(__self__, "hardware_revision", hardware_revision)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if manufacturer_uri is not None:
            pulumi.set(__self__, "manufacturer_uri", manufacturer_uri)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if product_code is not None:
            pulumi.set(__self__, "product_code", product_code)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if software_revision is not None:
            pulumi.set(__self__, "software_revision", software_revision)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="assetEndpointProfileUri")
    def asset_endpoint_profile_uri(self) -> pulumi.Input[str]:
        """
        A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>.
        """
        return pulumi.get(self, "asset_endpoint_profile_uri")

    @asset_endpoint_profile_uri.setter
    def asset_endpoint_profile_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "asset_endpoint_profile_uri", value)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationArgs']:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="assetName")
    def asset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Asset name parameter.
        """
        return pulumi.get(self, "asset_name")

    @asset_name.setter
    def asset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_name", value)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[pulumi.Input[str]]:
        """
        Resource path to asset type (model) definition.
        """
        return pulumi.get(self, "asset_type")

    @asset_type.setter
    def asset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_type", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[Any]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataPointArgs']]]]:
        """
        Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element.
        """
        return pulumi.get(self, "data_points")

    @data_points.setter
    def data_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataPointArgs']]]]):
        pulumi.set(self, "data_points", value)

    @property
    @pulumi.getter(name="defaultDataPointsConfiguration")
    def default_data_points_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        """
        return pulumi.get(self, "default_data_points_configuration")

    @default_data_points_configuration.setter
    def default_data_points_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_data_points_configuration", value)

    @property
    @pulumi.getter(name="defaultEventsConfiguration")
    def default_events_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        """
        return pulumi.get(self, "default_events_configuration")

    @default_events_configuration.setter
    def default_events_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_events_configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable description of the asset.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="documentationUri")
    def documentation_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the documentation.
        """
        return pulumi.get(self, "documentation_uri")

    @documentation_uri.setter
    def documentation_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "documentation_uri", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled/Disabled status of the asset.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventArgs']]]]:
        """
        Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="externalAssetId")
    def external_asset_id(self) -> Optional[pulumi.Input[str]]:
        """
        Asset id provided by the customer.
        """
        return pulumi.get(self, "external_asset_id")

    @external_asset_id.setter
    def external_asset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_asset_id", value)

    @property
    @pulumi.getter(name="hardwareRevision")
    def hardware_revision(self) -> Optional[pulumi.Input[str]]:
        """
        Revision number of the hardware.
        """
        return pulumi.get(self, "hardware_revision")

    @hardware_revision.setter
    def hardware_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hardware_revision", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        """
        Asset manufacturer name.
        """
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="manufacturerUri")
    def manufacturer_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Asset manufacturer URI.
        """
        return pulumi.get(self, "manufacturer_uri")

    @manufacturer_uri.setter
    def manufacturer_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer_uri", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Asset model name.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> Optional[pulumi.Input[str]]:
        """
        Asset product code.
        """
        return pulumi.get(self, "product_code")

    @product_code.setter
    def product_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_code", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Asset serial number.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="softwareRevision")
    def software_revision(self) -> Optional[pulumi.Input[str]]:
        """
        Revision number of the software.
        """
        return pulumi.get(self, "software_revision")

    @software_revision.setter
    def software_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_revision", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Asset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_endpoint_profile_uri: Optional[pulumi.Input[str]] = None,
                 asset_name: Optional[pulumi.Input[str]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[Any] = None,
                 data_points: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataPointArgs']]]]] = None,
                 default_data_points_configuration: Optional[pulumi.Input[str]] = None,
                 default_events_configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 documentation_uri: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventArgs']]]]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationArgs']]] = None,
                 external_asset_id: Optional[pulumi.Input[str]] = None,
                 hardware_revision: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 manufacturer_uri: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 product_code: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 software_revision: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Asset definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asset_endpoint_profile_uri: A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>.
        :param pulumi.Input[str] asset_name: Asset name parameter.
        :param pulumi.Input[str] asset_type: Resource path to asset type (model) definition.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataPointArgs']]]] data_points: Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element.
        :param pulumi.Input[str] default_data_points_configuration: Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        :param pulumi.Input[str] default_events_configuration: Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        :param pulumi.Input[str] description: Human-readable description of the asset.
        :param pulumi.Input[str] display_name: Human-readable display name.
        :param pulumi.Input[str] documentation_uri: Reference to the documentation.
        :param pulumi.Input[bool] enabled: Enabled/Disabled status of the asset.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventArgs']]]] events: Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element.
        :param pulumi.Input[pulumi.InputType['ExtendedLocationArgs']] extended_location: The extended location.
        :param pulumi.Input[str] external_asset_id: Asset id provided by the customer.
        :param pulumi.Input[str] hardware_revision: Revision number of the hardware.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] manufacturer: Asset manufacturer name.
        :param pulumi.Input[str] manufacturer_uri: Asset manufacturer URI.
        :param pulumi.Input[str] model: Asset model name.
        :param pulumi.Input[str] product_code: Asset product code.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] serial_number: Asset serial number.
        :param pulumi.Input[str] software_revision: Revision number of the software.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AssetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Asset definition.

        :param str resource_name: The name of the resource.
        :param AssetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_endpoint_profile_uri: Optional[pulumi.Input[str]] = None,
                 asset_name: Optional[pulumi.Input[str]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[Any] = None,
                 data_points: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataPointArgs']]]]] = None,
                 default_data_points_configuration: Optional[pulumi.Input[str]] = None,
                 default_events_configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 documentation_uri: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventArgs']]]]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationArgs']]] = None,
                 external_asset_id: Optional[pulumi.Input[str]] = None,
                 hardware_revision: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 manufacturer_uri: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 product_code: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 software_revision: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssetArgs.__new__(AssetArgs)

            if asset_endpoint_profile_uri is None and not opts.urn:
                raise TypeError("Missing required property 'asset_endpoint_profile_uri'")
            __props__.__dict__["asset_endpoint_profile_uri"] = asset_endpoint_profile_uri
            __props__.__dict__["asset_name"] = asset_name
            __props__.__dict__["asset_type"] = asset_type
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["data_points"] = data_points
            __props__.__dict__["default_data_points_configuration"] = default_data_points_configuration
            __props__.__dict__["default_events_configuration"] = default_events_configuration
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["documentation_uri"] = documentation_uri
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["events"] = events
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            __props__.__dict__["external_asset_id"] = external_asset_id
            __props__.__dict__["hardware_revision"] = hardware_revision
            __props__.__dict__["location"] = location
            __props__.__dict__["manufacturer"] = manufacturer
            __props__.__dict__["manufacturer_uri"] = manufacturer_uri
            __props__.__dict__["model"] = model
            __props__.__dict__["product_code"] = product_code
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["software_revision"] = software_revision
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
            __props__.__dict__["version"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:deviceregistry:Asset")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Asset, __self__).__init__(
            'azure-native:deviceregistry/v20231101preview:Asset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Asset':
        """
        Get an existing Asset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AssetArgs.__new__(AssetArgs)

        __props__.__dict__["asset_endpoint_profile_uri"] = None
        __props__.__dict__["asset_type"] = None
        __props__.__dict__["attributes"] = None
        __props__.__dict__["data_points"] = None
        __props__.__dict__["default_data_points_configuration"] = None
        __props__.__dict__["default_events_configuration"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["documentation_uri"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["events"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["external_asset_id"] = None
        __props__.__dict__["hardware_revision"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["manufacturer"] = None
        __props__.__dict__["manufacturer_uri"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["product_code"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["serial_number"] = None
        __props__.__dict__["software_revision"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["uuid"] = None
        __props__.__dict__["version"] = None
        return Asset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assetEndpointProfileUri")
    def asset_endpoint_profile_uri(self) -> pulumi.Output[str]:
        """
        A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>.
        """
        return pulumi.get(self, "asset_endpoint_profile_uri")

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> pulumi.Output[Optional[str]]:
        """
        Resource path to asset type (model) definition.
        """
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[Any]]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> pulumi.Output[Optional[Sequence['outputs.DataPointResponse']]]:
        """
        Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element.
        """
        return pulumi.get(self, "data_points")

    @property
    @pulumi.getter(name="defaultDataPointsConfiguration")
    def default_data_points_configuration(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        """
        return pulumi.get(self, "default_data_points_configuration")

    @property
    @pulumi.getter(name="defaultEventsConfiguration")
    def default_events_configuration(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        """
        return pulumi.get(self, "default_events_configuration")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Human-readable description of the asset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Human-readable display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="documentationUri")
    def documentation_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Reference to the documentation.
        """
        return pulumi.get(self, "documentation_uri")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enabled/Disabled status of the asset.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Optional[Sequence['outputs.EventResponse']]]:
        """
        Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationResponse']:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="externalAssetId")
    def external_asset_id(self) -> pulumi.Output[Optional[str]]:
        """
        Asset id provided by the customer.
        """
        return pulumi.get(self, "external_asset_id")

    @property
    @pulumi.getter(name="hardwareRevision")
    def hardware_revision(self) -> pulumi.Output[Optional[str]]:
        """
        Revision number of the hardware.
        """
        return pulumi.get(self, "hardware_revision")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def manufacturer(self) -> pulumi.Output[Optional[str]]:
        """
        Asset manufacturer name.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="manufacturerUri")
    def manufacturer_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Asset manufacturer URI.
        """
        return pulumi.get(self, "manufacturer_uri")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[Optional[str]]:
        """
        Asset model name.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> pulumi.Output[Optional[str]]:
        """
        Asset product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[Optional[str]]:
        """
        Asset serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="softwareRevision")
    def software_revision(self) -> pulumi.Output[Optional[str]]:
        """
        Revision number of the software.
        """
        return pulumi.get(self, "software_revision")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.AssetStatusResponse']:
        """
        Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Globally unique, immutable, non-reusable id.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        An integer that is incremented each time the resource is modified.
        """
        return pulumi.get(self, "version")

