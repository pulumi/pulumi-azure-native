# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssetEndpointProfilePropertiesResponse',
    'AssetEndpointProfilePropertiesResponseOwnCertificates',
    'AssetEndpointProfilePropertiesResponseTransportAuthentication',
    'AssetEndpointProfilePropertiesResponseUserAuthentication',
    'AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials',
    'AssetEndpointProfilePropertiesResponseX509Credentials',
    'AssetEndpointProfileResponseExtendedLocation',
    'AssetPropertiesResponseDataPoints',
    'AssetPropertiesResponseErrors',
    'AssetPropertiesResponseEvents',
    'AssetPropertiesResponseStatus',
    'AssetResponseExtendedLocation',
    'AssetResponseProperties',
    'SystemDataResponse',
]

@pulumi.output_type
class AssetEndpointProfilePropertiesResponse(dict):
    """
    Defines the Asset Endpoint Profile properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "targetAddress":
            suggest = "target_address"
        elif key == "additionalConfiguration":
            suggest = "additional_configuration"
        elif key == "transportAuthentication":
            suggest = "transport_authentication"
        elif key == "userAuthentication":
            suggest = "user_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetEndpointProfilePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetEndpointProfilePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetEndpointProfilePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 target_address: str,
                 uuid: str,
                 additional_configuration: Optional[str] = None,
                 transport_authentication: Optional['outputs.AssetEndpointProfilePropertiesResponseTransportAuthentication'] = None,
                 user_authentication: Optional['outputs.AssetEndpointProfilePropertiesResponseUserAuthentication'] = None):
        """
        Defines the Asset Endpoint Profile properties.
        :param str provisioning_state: Provisioning state of the resource.
        :param str target_address: The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration.
        :param str uuid: Globally unique, immutable, non-reusable id.
        :param str additional_configuration: Contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF).
        :param 'AssetEndpointProfilePropertiesResponseTransportAuthentication' transport_authentication: Defines the authentication mechanism for the southbound connector connecting to the shop floor/OT device.
        :param 'AssetEndpointProfilePropertiesResponseUserAuthentication' user_authentication: Defines the client authentication mechanism to the server.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "target_address", target_address)
        pulumi.set(__self__, "uuid", uuid)
        if additional_configuration is not None:
            pulumi.set(__self__, "additional_configuration", additional_configuration)
        if transport_authentication is not None:
            pulumi.set(__self__, "transport_authentication", transport_authentication)
        if user_authentication is not None:
            pulumi.set(__self__, "user_authentication", user_authentication)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="targetAddress")
    def target_address(self) -> str:
        """
        The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration.
        """
        return pulumi.get(self, "target_address")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Globally unique, immutable, non-reusable id.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="additionalConfiguration")
    def additional_configuration(self) -> Optional[str]:
        """
        Contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF).
        """
        return pulumi.get(self, "additional_configuration")

    @property
    @pulumi.getter(name="transportAuthentication")
    def transport_authentication(self) -> Optional['outputs.AssetEndpointProfilePropertiesResponseTransportAuthentication']:
        """
        Defines the authentication mechanism for the southbound connector connecting to the shop floor/OT device.
        """
        return pulumi.get(self, "transport_authentication")

    @property
    @pulumi.getter(name="userAuthentication")
    def user_authentication(self) -> Optional['outputs.AssetEndpointProfilePropertiesResponseUserAuthentication']:
        """
        Defines the client authentication mechanism to the server.
        """
        return pulumi.get(self, "user_authentication")


@pulumi.output_type
class AssetEndpointProfilePropertiesResponseOwnCertificates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certPasswordReference":
            suggest = "cert_password_reference"
        elif key == "certSecretReference":
            suggest = "cert_secret_reference"
        elif key == "certThumbprint":
            suggest = "cert_thumbprint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetEndpointProfilePropertiesResponseOwnCertificates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetEndpointProfilePropertiesResponseOwnCertificates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetEndpointProfilePropertiesResponseOwnCertificates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_password_reference: Optional[str] = None,
                 cert_secret_reference: Optional[str] = None,
                 cert_thumbprint: Optional[str] = None):
        """
        :param str cert_password_reference: Secret Reference Name (Pfx or Pem password)
        :param str cert_secret_reference: Secret Reference name (cert and private key).
        :param str cert_thumbprint: Certificate thumbprint.
        """
        if cert_password_reference is not None:
            pulumi.set(__self__, "cert_password_reference", cert_password_reference)
        if cert_secret_reference is not None:
            pulumi.set(__self__, "cert_secret_reference", cert_secret_reference)
        if cert_thumbprint is not None:
            pulumi.set(__self__, "cert_thumbprint", cert_thumbprint)

    @property
    @pulumi.getter(name="certPasswordReference")
    def cert_password_reference(self) -> Optional[str]:
        """
        Secret Reference Name (Pfx or Pem password)
        """
        return pulumi.get(self, "cert_password_reference")

    @property
    @pulumi.getter(name="certSecretReference")
    def cert_secret_reference(self) -> Optional[str]:
        """
        Secret Reference name (cert and private key).
        """
        return pulumi.get(self, "cert_secret_reference")

    @property
    @pulumi.getter(name="certThumbprint")
    def cert_thumbprint(self) -> Optional[str]:
        """
        Certificate thumbprint.
        """
        return pulumi.get(self, "cert_thumbprint")


@pulumi.output_type
class AssetEndpointProfilePropertiesResponseTransportAuthentication(dict):
    """
    Defines the authentication mechanism for the southbound connector connecting to the shop floor/OT device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownCertificates":
            suggest = "own_certificates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetEndpointProfilePropertiesResponseTransportAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetEndpointProfilePropertiesResponseTransportAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetEndpointProfilePropertiesResponseTransportAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 own_certificates: Sequence['outputs.AssetEndpointProfilePropertiesResponseOwnCertificates']):
        """
        Defines the authentication mechanism for the southbound connector connecting to the shop floor/OT device.
        :param Sequence['AssetEndpointProfilePropertiesResponseOwnCertificates'] own_certificates: Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
        """
        pulumi.set(__self__, "own_certificates", own_certificates)

    @property
    @pulumi.getter(name="ownCertificates")
    def own_certificates(self) -> Sequence['outputs.AssetEndpointProfilePropertiesResponseOwnCertificates']:
        """
        Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
        """
        return pulumi.get(self, "own_certificates")


@pulumi.output_type
class AssetEndpointProfilePropertiesResponseUserAuthentication(dict):
    """
    Defines the client authentication mechanism to the server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usernamePasswordCredentials":
            suggest = "username_password_credentials"
        elif key == "x509Credentials":
            suggest = "x509_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetEndpointProfilePropertiesResponseUserAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetEndpointProfilePropertiesResponseUserAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetEndpointProfilePropertiesResponseUserAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 username_password_credentials: Optional['outputs.AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials'] = None,
                 x509_credentials: Optional['outputs.AssetEndpointProfilePropertiesResponseX509Credentials'] = None):
        """
        Defines the client authentication mechanism to the server.
        :param str mode: Defines the mode to authenticate the user of the client at the server.
        :param 'AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials' username_password_credentials: Defines the username and password references when UsernamePassword user authentication mode is selected.
        :param 'AssetEndpointProfilePropertiesResponseX509Credentials' x509_credentials: Defines the certificate reference when Certificate user authentication mode is selected.
        """
        if mode is None:
            mode = 'Certificate'
        pulumi.set(__self__, "mode", mode)
        if username_password_credentials is not None:
            pulumi.set(__self__, "username_password_credentials", username_password_credentials)
        if x509_credentials is not None:
            pulumi.set(__self__, "x509_credentials", x509_credentials)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Defines the mode to authenticate the user of the client at the server.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="usernamePasswordCredentials")
    def username_password_credentials(self) -> Optional['outputs.AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials']:
        """
        Defines the username and password references when UsernamePassword user authentication mode is selected.
        """
        return pulumi.get(self, "username_password_credentials")

    @property
    @pulumi.getter(name="x509Credentials")
    def x509_credentials(self) -> Optional['outputs.AssetEndpointProfilePropertiesResponseX509Credentials']:
        """
        Defines the certificate reference when Certificate user authentication mode is selected.
        """
        return pulumi.get(self, "x509_credentials")


@pulumi.output_type
class AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials(dict):
    """
    Defines the username and password references when UsernamePassword user authentication mode is selected.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordReference":
            suggest = "password_reference"
        elif key == "usernameReference":
            suggest = "username_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetEndpointProfilePropertiesResponseUsernamePasswordCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_reference: str,
                 username_reference: str):
        """
        Defines the username and password references when UsernamePassword user authentication mode is selected.
        :param str password_reference: A reference to secret containing the password.
        :param str username_reference: A reference to secret containing the username.
        """
        pulumi.set(__self__, "password_reference", password_reference)
        pulumi.set(__self__, "username_reference", username_reference)

    @property
    @pulumi.getter(name="passwordReference")
    def password_reference(self) -> str:
        """
        A reference to secret containing the password.
        """
        return pulumi.get(self, "password_reference")

    @property
    @pulumi.getter(name="usernameReference")
    def username_reference(self) -> str:
        """
        A reference to secret containing the username.
        """
        return pulumi.get(self, "username_reference")


@pulumi.output_type
class AssetEndpointProfilePropertiesResponseX509Credentials(dict):
    """
    Defines the certificate reference when Certificate user authentication mode is selected.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateReference":
            suggest = "certificate_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetEndpointProfilePropertiesResponseX509Credentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetEndpointProfilePropertiesResponseX509Credentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetEndpointProfilePropertiesResponseX509Credentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_reference: str):
        """
        Defines the certificate reference when Certificate user authentication mode is selected.
        :param str certificate_reference: A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        """
        pulumi.set(__self__, "certificate_reference", certificate_reference)

    @property
    @pulumi.getter(name="certificateReference")
    def certificate_reference(self) -> str:
        """
        A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        """
        return pulumi.get(self, "certificate_reference")


@pulumi.output_type
class AssetEndpointProfileResponseExtendedLocation(dict):
    """
    The extended location.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The extended location.
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AssetPropertiesResponseDataPoints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "capabilityId":
            suggest = "capability_id"
        elif key == "dataPointConfiguration":
            suggest = "data_point_configuration"
        elif key == "observabilityMode":
            suggest = "observability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetPropertiesResponseDataPoints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetPropertiesResponseDataPoints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetPropertiesResponseDataPoints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 capability_id: Optional[str] = None,
                 data_point_configuration: Optional[str] = None,
                 name: Optional[str] = None,
                 observability_mode: Optional[str] = None):
        """
        :param str data_source: The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
        :param str capability_id: The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        :param str data_point_configuration: Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        :param str name: The name of the data point.
        :param str observability_mode: An indication of how the data point should be mapped to OpenTelemetry.
        """
        pulumi.set(__self__, "data_source", data_source)
        if capability_id is not None:
            pulumi.set(__self__, "capability_id", capability_id)
        if data_point_configuration is not None:
            pulumi.set(__self__, "data_point_configuration", data_point_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if observability_mode is None:
            observability_mode = 'none'
        if observability_mode is not None:
            pulumi.set(__self__, "observability_mode", observability_mode)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        """
        The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="capabilityId")
    def capability_id(self) -> Optional[str]:
        """
        The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        """
        return pulumi.get(self, "capability_id")

    @property
    @pulumi.getter(name="dataPointConfiguration")
    def data_point_configuration(self) -> Optional[str]:
        """
        Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        """
        return pulumi.get(self, "data_point_configuration")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the data point.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observabilityMode")
    def observability_mode(self) -> Optional[str]:
        """
        An indication of how the data point should be mapped to OpenTelemetry.
        """
        return pulumi.get(self, "observability_mode")


@pulumi.output_type
class AssetPropertiesResponseErrors(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 message: Optional[str] = None):
        """
        :param int code: Error code for classification of errors (ex: 400, 404, 500, etc.).
        :param str message: Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        """
        Error code for classification of errors (ex: 400, 404, 500, etc.).
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class AssetPropertiesResponseEvents(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventNotifier":
            suggest = "event_notifier"
        elif key == "capabilityId":
            suggest = "capability_id"
        elif key == "eventConfiguration":
            suggest = "event_configuration"
        elif key == "observabilityMode":
            suggest = "observability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetPropertiesResponseEvents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetPropertiesResponseEvents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetPropertiesResponseEvents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_notifier: str,
                 capability_id: Optional[str] = None,
                 event_configuration: Optional[str] = None,
                 name: Optional[str] = None,
                 observability_mode: Optional[str] = None):
        """
        :param str event_notifier: The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        :param str capability_id: The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        :param str event_configuration: Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        :param str name: The name of the event.
        :param str observability_mode: An indication of how the event should be mapped to OpenTelemetry.
        """
        pulumi.set(__self__, "event_notifier", event_notifier)
        if capability_id is not None:
            pulumi.set(__self__, "capability_id", capability_id)
        if event_configuration is not None:
            pulumi.set(__self__, "event_configuration", event_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if observability_mode is None:
            observability_mode = 'none'
        if observability_mode is not None:
            pulumi.set(__self__, "observability_mode", observability_mode)

    @property
    @pulumi.getter(name="eventNotifier")
    def event_notifier(self) -> str:
        """
        The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        """
        return pulumi.get(self, "event_notifier")

    @property
    @pulumi.getter(name="capabilityId")
    def capability_id(self) -> Optional[str]:
        """
        The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        """
        return pulumi.get(self, "capability_id")

    @property
    @pulumi.getter(name="eventConfiguration")
    def event_configuration(self) -> Optional[str]:
        """
        Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        """
        return pulumi.get(self, "event_configuration")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the event.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observabilityMode")
    def observability_mode(self) -> Optional[str]:
        """
        An indication of how the event should be mapped to OpenTelemetry.
        """
        return pulumi.get(self, "observability_mode")


@pulumi.output_type
class AssetPropertiesResponseStatus(dict):
    """
    Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
    """
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.AssetPropertiesResponseErrors']] = None,
                 version: Optional[int] = None):
        """
        Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        :param Sequence['AssetPropertiesResponseErrors'] errors: Array object to transfer and persist errors that originate from the Edge.
        :param int version: A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.AssetPropertiesResponseErrors']]:
        """
        Array object to transfer and persist errors that originate from the Edge.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class AssetResponseExtendedLocation(dict):
    """
    The extended location.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The extended location.
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AssetResponseProperties(dict):
    """
    Asset resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assetEndpointProfileUri":
            suggest = "asset_endpoint_profile_uri"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "assetType":
            suggest = "asset_type"
        elif key == "dataPoints":
            suggest = "data_points"
        elif key == "defaultDataPointsConfiguration":
            suggest = "default_data_points_configuration"
        elif key == "defaultEventsConfiguration":
            suggest = "default_events_configuration"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "documentationUri":
            suggest = "documentation_uri"
        elif key == "externalAssetId":
            suggest = "external_asset_id"
        elif key == "hardwareRevision":
            suggest = "hardware_revision"
        elif key == "manufacturerUri":
            suggest = "manufacturer_uri"
        elif key == "productCode":
            suggest = "product_code"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "softwareRevision":
            suggest = "software_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asset_endpoint_profile_uri: str,
                 provisioning_state: str,
                 status: 'outputs.AssetPropertiesResponseStatus',
                 uuid: str,
                 version: int,
                 asset_type: Optional[str] = None,
                 attributes: Optional[Any] = None,
                 data_points: Optional[Sequence['outputs.AssetPropertiesResponseDataPoints']] = None,
                 default_data_points_configuration: Optional[str] = None,
                 default_events_configuration: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 documentation_uri: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 events: Optional[Sequence['outputs.AssetPropertiesResponseEvents']] = None,
                 external_asset_id: Optional[str] = None,
                 hardware_revision: Optional[str] = None,
                 manufacturer: Optional[str] = None,
                 manufacturer_uri: Optional[str] = None,
                 model: Optional[str] = None,
                 product_code: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 software_revision: Optional[str] = None):
        """
        Asset resource properties.
        :param str asset_endpoint_profile_uri: A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>.
        :param str provisioning_state: Provisioning state of the resource.
        :param 'AssetPropertiesResponseStatus' status: Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        :param str uuid: Globally unique, immutable, non-reusable id.
        :param int version: An integer that is incremented each time the resource is modified.
        :param str asset_type: Resource path to asset type (model) definition.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param Sequence['AssetPropertiesResponseDataPoints'] data_points: Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element.
        :param str default_data_points_configuration: Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        :param str default_events_configuration: Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        :param str description: Human-readable description of the asset.
        :param str display_name: Human-readable display name.
        :param str documentation_uri: Reference to the documentation.
        :param bool enabled: Enabled/Disabled status of the asset.
        :param Sequence['AssetPropertiesResponseEvents'] events: Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element.
        :param str external_asset_id: Asset id provided by the customer.
        :param str hardware_revision: Revision number of the hardware.
        :param str manufacturer: Asset manufacturer name.
        :param str manufacturer_uri: Asset manufacturer URI.
        :param str model: Asset model name.
        :param str product_code: Asset product code.
        :param str serial_number: Asset serial number.
        :param str software_revision: Revision number of the software.
        """
        pulumi.set(__self__, "asset_endpoint_profile_uri", asset_endpoint_profile_uri)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "version", version)
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if data_points is not None:
            pulumi.set(__self__, "data_points", data_points)
        if default_data_points_configuration is not None:
            pulumi.set(__self__, "default_data_points_configuration", default_data_points_configuration)
        if default_events_configuration is not None:
            pulumi.set(__self__, "default_events_configuration", default_events_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if documentation_uri is not None:
            pulumi.set(__self__, "documentation_uri", documentation_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if external_asset_id is not None:
            pulumi.set(__self__, "external_asset_id", external_asset_id)
        if hardware_revision is not None:
            pulumi.set(__self__, "hardware_revision", hardware_revision)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if manufacturer_uri is not None:
            pulumi.set(__self__, "manufacturer_uri", manufacturer_uri)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if product_code is not None:
            pulumi.set(__self__, "product_code", product_code)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if software_revision is not None:
            pulumi.set(__self__, "software_revision", software_revision)

    @property
    @pulumi.getter(name="assetEndpointProfileUri")
    def asset_endpoint_profile_uri(self) -> str:
        """
        A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>.
        """
        return pulumi.get(self, "asset_endpoint_profile_uri")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.AssetPropertiesResponseStatus':
        """
        Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Globally unique, immutable, non-reusable id.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def version(self) -> int:
        """
        An integer that is incremented each time the resource is modified.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[str]:
        """
        Resource path to asset type (model) definition.
        """
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Optional[Sequence['outputs.AssetPropertiesResponseDataPoints']]:
        """
        Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element.
        """
        return pulumi.get(self, "data_points")

    @property
    @pulumi.getter(name="defaultDataPointsConfiguration")
    def default_data_points_configuration(self) -> Optional[str]:
        """
        Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        """
        return pulumi.get(self, "default_data_points_configuration")

    @property
    @pulumi.getter(name="defaultEventsConfiguration")
    def default_events_configuration(self) -> Optional[str]:
        """
        Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol.
        """
        return pulumi.get(self, "default_events_configuration")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Human-readable description of the asset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Human-readable display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="documentationUri")
    def documentation_uri(self) -> Optional[str]:
        """
        Reference to the documentation.
        """
        return pulumi.get(self, "documentation_uri")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enabled/Disabled status of the asset.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.AssetPropertiesResponseEvents']]:
        """
        Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="externalAssetId")
    def external_asset_id(self) -> Optional[str]:
        """
        Asset id provided by the customer.
        """
        return pulumi.get(self, "external_asset_id")

    @property
    @pulumi.getter(name="hardwareRevision")
    def hardware_revision(self) -> Optional[str]:
        """
        Revision number of the hardware.
        """
        return pulumi.get(self, "hardware_revision")

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[str]:
        """
        Asset manufacturer name.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="manufacturerUri")
    def manufacturer_uri(self) -> Optional[str]:
        """
        Asset manufacturer URI.
        """
        return pulumi.get(self, "manufacturer_uri")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        Asset model name.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> Optional[str]:
        """
        Asset product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        """
        Asset serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="softwareRevision")
    def software_revision(self) -> Optional[str]:
        """
        Revision number of the software.
        """
        return pulumi.get(self, "software_revision")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


