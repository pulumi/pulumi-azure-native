# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssetEndpointProfileStatusErrorResponse',
    'AssetEndpointProfileStatusResponse',
    'AssetStatusDatasetResponse',
    'AssetStatusErrorResponse',
    'AssetStatusEventResponse',
    'AssetStatusResponse',
    'AuthenticationResponse',
    'DataPointResponse',
    'DatasetResponse',
    'EventResponse',
    'ExtendedLocationResponse',
    'MessageSchemaReferenceResponse',
    'SystemDataResponse',
    'TopicResponse',
    'UsernamePasswordCredentialsResponse',
    'X509CredentialsResponse',
]

@pulumi.output_type
class AssetEndpointProfileStatusErrorResponse(dict):
    """
    Defines the asset endpoint profile status error properties.
    """
    def __init__(__self__, *,
                 code: int,
                 message: str):
        """
        Defines the asset endpoint profile status error properties.
        :param int code: Error code for classification of errors (ex: 400, 404, 500, etc.).
        :param str message: Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        Error code for classification of errors (ex: 400, 404, 500, etc.).
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class AssetEndpointProfileStatusResponse(dict):
    """
    Defines the asset endpoint profile status properties.
    """
    def __init__(__self__, *,
                 errors: Sequence['outputs.AssetEndpointProfileStatusErrorResponse']):
        """
        Defines the asset endpoint profile status properties.
        :param Sequence['AssetEndpointProfileStatusErrorResponse'] errors: Array object to transfer and persist errors that originate from the Edge.
        """
        pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.AssetEndpointProfileStatusErrorResponse']:
        """
        Array object to transfer and persist errors that originate from the Edge.
        """
        return pulumi.get(self, "errors")


@pulumi.output_type
class AssetStatusDatasetResponse(dict):
    """
    Defines the asset status dataset properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageSchemaReference":
            suggest = "message_schema_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetStatusDatasetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetStatusDatasetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetStatusDatasetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_schema_reference: 'outputs.MessageSchemaReferenceResponse',
                 name: str):
        """
        Defines the asset status dataset properties.
        :param 'MessageSchemaReferenceResponse' message_schema_reference: The message schema reference object.
        :param str name: The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.
        """
        pulumi.set(__self__, "message_schema_reference", message_schema_reference)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="messageSchemaReference")
    def message_schema_reference(self) -> 'outputs.MessageSchemaReferenceResponse':
        """
        The message schema reference object.
        """
        return pulumi.get(self, "message_schema_reference")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetStatusErrorResponse(dict):
    """
    Defines the asset status error properties.
    """
    def __init__(__self__, *,
                 code: int,
                 message: str):
        """
        Defines the asset status error properties.
        :param int code: Error code for classification of errors (ex: 400, 404, 500, etc.).
        :param str message: Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        Error code for classification of errors (ex: 400, 404, 500, etc.).
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class AssetStatusEventResponse(dict):
    """
    Defines the asset status event properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageSchemaReference":
            suggest = "message_schema_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetStatusEventResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetStatusEventResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetStatusEventResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_schema_reference: 'outputs.MessageSchemaReferenceResponse',
                 name: str):
        """
        Defines the asset status event properties.
        :param 'MessageSchemaReferenceResponse' message_schema_reference: The message schema reference object.
        :param str name: The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.
        """
        pulumi.set(__self__, "message_schema_reference", message_schema_reference)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="messageSchemaReference")
    def message_schema_reference(self) -> 'outputs.MessageSchemaReferenceResponse':
        """
        The message schema reference object.
        """
        return pulumi.get(self, "message_schema_reference")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetStatusResponse(dict):
    """
    Defines the asset status properties.
    """
    def __init__(__self__, *,
                 datasets: Sequence['outputs.AssetStatusDatasetResponse'],
                 errors: Sequence['outputs.AssetStatusErrorResponse'],
                 events: Sequence['outputs.AssetStatusEventResponse'],
                 version: float):
        """
        Defines the asset status properties.
        :param Sequence['AssetStatusDatasetResponse'] datasets: Array of dataset statuses that describe the status of each dataset.
        :param Sequence['AssetStatusErrorResponse'] errors: Array object to transfer and persist errors that originate from the Edge.
        :param Sequence['AssetStatusEventResponse'] events: Array of event statuses that describe the status of each event.
        :param float version: A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
        """
        pulumi.set(__self__, "datasets", datasets)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def datasets(self) -> Sequence['outputs.AssetStatusDatasetResponse']:
        """
        Array of dataset statuses that describe the status of each dataset.
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.AssetStatusErrorResponse']:
        """
        Array object to transfer and persist errors that originate from the Edge.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.AssetStatusEventResponse']:
        """
        Array of event statuses that describe the status of each event.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def version(self) -> float:
        """
        A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class AuthenticationResponse(dict):
    """
    Definition of the client authentication mechanism to the server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usernamePasswordCredentials":
            suggest = "username_password_credentials"
        elif key == "x509Credentials":
            suggest = "x509_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: Optional[str] = None,
                 username_password_credentials: Optional['outputs.UsernamePasswordCredentialsResponse'] = None,
                 x509_credentials: Optional['outputs.X509CredentialsResponse'] = None):
        """
        Definition of the client authentication mechanism to the server.
        :param str method: Defines the method to authenticate the user of the client at the server.
        :param 'UsernamePasswordCredentialsResponse' username_password_credentials: Defines the username and password references when UsernamePassword user authentication mode is selected.
        :param 'X509CredentialsResponse' x509_credentials: Defines the certificate reference when Certificate user authentication mode is selected.
        """
        if method is None:
            method = 'Certificate'
        pulumi.set(__self__, "method", method)
        if username_password_credentials is not None:
            pulumi.set(__self__, "username_password_credentials", username_password_credentials)
        if x509_credentials is not None:
            pulumi.set(__self__, "x509_credentials", x509_credentials)

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Defines the method to authenticate the user of the client at the server.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="usernamePasswordCredentials")
    def username_password_credentials(self) -> Optional['outputs.UsernamePasswordCredentialsResponse']:
        """
        Defines the username and password references when UsernamePassword user authentication mode is selected.
        """
        return pulumi.get(self, "username_password_credentials")

    @property
    @pulumi.getter(name="x509Credentials")
    def x509_credentials(self) -> Optional['outputs.X509CredentialsResponse']:
        """
        Defines the certificate reference when Certificate user authentication mode is selected.
        """
        return pulumi.get(self, "x509_credentials")


@pulumi.output_type
class DataPointResponse(dict):
    """
    Defines the data point properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "dataPointConfiguration":
            suggest = "data_point_configuration"
        elif key == "observabilityMode":
            suggest = "observability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataPointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataPointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataPointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 name: str,
                 data_point_configuration: Optional[str] = None,
                 observability_mode: Optional[str] = None):
        """
        Defines the data point properties.
        :param str data_source: The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
        :param str name: The name of the data point.
        :param str data_point_configuration: Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        :param str observability_mode: An indication of how the data point should be mapped to OpenTelemetry.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if data_point_configuration is not None:
            pulumi.set(__self__, "data_point_configuration", data_point_configuration)
        if observability_mode is None:
            observability_mode = 'None'
        if observability_mode is not None:
            pulumi.set(__self__, "observability_mode", observability_mode)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        """
        The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the data point.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dataPointConfiguration")
    def data_point_configuration(self) -> Optional[str]:
        """
        Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        """
        return pulumi.get(self, "data_point_configuration")

    @property
    @pulumi.getter(name="observabilityMode")
    def observability_mode(self) -> Optional[str]:
        """
        An indication of how the data point should be mapped to OpenTelemetry.
        """
        return pulumi.get(self, "observability_mode")


@pulumi.output_type
class DatasetResponse(dict):
    """
    Defines the dataset properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPoints":
            suggest = "data_points"
        elif key == "datasetConfiguration":
            suggest = "dataset_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 data_points: Optional[Sequence['outputs.DataPointResponse']] = None,
                 dataset_configuration: Optional[str] = None,
                 topic: Optional['outputs.TopicResponse'] = None):
        """
        Defines the dataset properties.
        :param str name: Name of the dataset.
        :param Sequence['DataPointResponse'] data_points: Array of data points that are part of the dataset. Each data point can have per-data point configuration.
        :param str dataset_configuration: Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
        :param 'TopicResponse' topic: Object that describes the topic information for the specific dataset.
        """
        pulumi.set(__self__, "name", name)
        if data_points is not None:
            pulumi.set(__self__, "data_points", data_points)
        if dataset_configuration is not None:
            pulumi.set(__self__, "dataset_configuration", dataset_configuration)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dataset.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Optional[Sequence['outputs.DataPointResponse']]:
        """
        Array of data points that are part of the dataset. Each data point can have per-data point configuration.
        """
        return pulumi.get(self, "data_points")

    @property
    @pulumi.getter(name="datasetConfiguration")
    def dataset_configuration(self) -> Optional[str]:
        """
        Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
        """
        return pulumi.get(self, "dataset_configuration")

    @property
    @pulumi.getter
    def topic(self) -> Optional['outputs.TopicResponse']:
        """
        Object that describes the topic information for the specific dataset.
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class EventResponse(dict):
    """
    Defines the event properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventNotifier":
            suggest = "event_notifier"
        elif key == "eventConfiguration":
            suggest = "event_configuration"
        elif key == "observabilityMode":
            suggest = "observability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_notifier: str,
                 name: str,
                 event_configuration: Optional[str] = None,
                 observability_mode: Optional[str] = None,
                 topic: Optional['outputs.TopicResponse'] = None):
        """
        Defines the event properties.
        :param str event_notifier: The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        :param str name: The name of the event.
        :param str event_configuration: Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        :param str observability_mode: An indication of how the event should be mapped to OpenTelemetry.
        :param 'TopicResponse' topic: Object that describes the topic information for the specific event.
        """
        pulumi.set(__self__, "event_notifier", event_notifier)
        pulumi.set(__self__, "name", name)
        if event_configuration is not None:
            pulumi.set(__self__, "event_configuration", event_configuration)
        if observability_mode is None:
            observability_mode = 'None'
        if observability_mode is not None:
            pulumi.set(__self__, "observability_mode", observability_mode)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter(name="eventNotifier")
    def event_notifier(self) -> str:
        """
        The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        """
        return pulumi.get(self, "event_notifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the event.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="eventConfiguration")
    def event_configuration(self) -> Optional[str]:
        """
        Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        """
        return pulumi.get(self, "event_configuration")

    @property
    @pulumi.getter(name="observabilityMode")
    def observability_mode(self) -> Optional[str]:
        """
        An indication of how the event should be mapped to OpenTelemetry.
        """
        return pulumi.get(self, "observability_mode")

    @property
    @pulumi.getter
    def topic(self) -> Optional['outputs.TopicResponse']:
        """
        Object that describes the topic information for the specific event.
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    The extended location.
    """
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        The extended location.
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MessageSchemaReferenceResponse(dict):
    """
    Defines the message schema reference properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "schemaRegistryNamespace":
            suggest = "schema_registry_namespace"
        elif key == "schemaVersion":
            suggest = "schema_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageSchemaReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageSchemaReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageSchemaReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: str,
                 schema_registry_namespace: str,
                 schema_version: str):
        """
        Defines the message schema reference properties.
        :param str schema_name: The message schema name.
        :param str schema_registry_namespace: The message schema registry namespace.
        :param str schema_version: The message schema version.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_registry_namespace", schema_registry_namespace)
        pulumi.set(__self__, "schema_version", schema_version)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The message schema name.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaRegistryNamespace")
    def schema_registry_namespace(self) -> str:
        """
        The message schema registry namespace.
        """
        return pulumi.get(self, "schema_registry_namespace")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> str:
        """
        The message schema version.
        """
        return pulumi.get(self, "schema_version")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TopicResponse(dict):
    """
    Object that describes the topic information.
    """
    def __init__(__self__, *,
                 path: str,
                 retain: Optional[str] = None):
        """
        Object that describes the topic information.
        :param str path: The topic path for messages published to an MQTT broker.
        :param str retain: When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
        """
        pulumi.set(__self__, "path", path)
        if retain is None:
            retain = 'Never'
        if retain is not None:
            pulumi.set(__self__, "retain", retain)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The topic path for messages published to an MQTT broker.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def retain(self) -> Optional[str]:
        """
        When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
        """
        return pulumi.get(self, "retain")


@pulumi.output_type
class UsernamePasswordCredentialsResponse(dict):
    """
    The credentials for authentication mode UsernamePassword.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordSecretName":
            suggest = "password_secret_name"
        elif key == "usernameSecretName":
            suggest = "username_secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsernamePasswordCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsernamePasswordCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsernamePasswordCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_secret_name: str,
                 username_secret_name: str):
        """
        The credentials for authentication mode UsernamePassword.
        :param str password_secret_name: The name of the secret containing the password.
        :param str username_secret_name: The name of the secret containing the username.
        """
        pulumi.set(__self__, "password_secret_name", password_secret_name)
        pulumi.set(__self__, "username_secret_name", username_secret_name)

    @property
    @pulumi.getter(name="passwordSecretName")
    def password_secret_name(self) -> str:
        """
        The name of the secret containing the password.
        """
        return pulumi.get(self, "password_secret_name")

    @property
    @pulumi.getter(name="usernameSecretName")
    def username_secret_name(self) -> str:
        """
        The name of the secret containing the username.
        """
        return pulumi.get(self, "username_secret_name")


@pulumi.output_type
class X509CredentialsResponse(dict):
    """
    The x509 certificate for authentication mode Certificate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateSecretName":
            suggest = "certificate_secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in X509CredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        X509CredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        X509CredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_secret_name: str):
        """
        The x509 certificate for authentication mode Certificate.
        :param str certificate_secret_name: The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        """
        pulumi.set(__self__, "certificate_secret_name", certificate_secret_name)

    @property
    @pulumi.getter(name="certificateSecretName")
    def certificate_secret_name(self) -> str:
        """
        The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        """
        return pulumi.get(self, "certificate_secret_name")


