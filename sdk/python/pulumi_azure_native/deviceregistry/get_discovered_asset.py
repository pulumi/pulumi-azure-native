# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDiscoveredAssetResult',
    'AwaitableGetDiscoveredAssetResult',
    'get_discovered_asset',
    'get_discovered_asset_output',
]

@pulumi.output_type
class GetDiscoveredAssetResult:
    """
    Discovered Asset definition.
    """
    def __init__(__self__, asset_endpoint_profile_ref=None, datasets=None, default_datasets_configuration=None, default_events_configuration=None, default_topic=None, discovery_id=None, documentation_uri=None, events=None, extended_location=None, hardware_revision=None, id=None, location=None, manufacturer=None, manufacturer_uri=None, model=None, name=None, product_code=None, provisioning_state=None, serial_number=None, software_revision=None, system_data=None, tags=None, type=None, version=None):
        if asset_endpoint_profile_ref and not isinstance(asset_endpoint_profile_ref, str):
            raise TypeError("Expected argument 'asset_endpoint_profile_ref' to be a str")
        pulumi.set(__self__, "asset_endpoint_profile_ref", asset_endpoint_profile_ref)
        if datasets and not isinstance(datasets, list):
            raise TypeError("Expected argument 'datasets' to be a list")
        pulumi.set(__self__, "datasets", datasets)
        if default_datasets_configuration and not isinstance(default_datasets_configuration, str):
            raise TypeError("Expected argument 'default_datasets_configuration' to be a str")
        pulumi.set(__self__, "default_datasets_configuration", default_datasets_configuration)
        if default_events_configuration and not isinstance(default_events_configuration, str):
            raise TypeError("Expected argument 'default_events_configuration' to be a str")
        pulumi.set(__self__, "default_events_configuration", default_events_configuration)
        if default_topic and not isinstance(default_topic, dict):
            raise TypeError("Expected argument 'default_topic' to be a dict")
        pulumi.set(__self__, "default_topic", default_topic)
        if discovery_id and not isinstance(discovery_id, str):
            raise TypeError("Expected argument 'discovery_id' to be a str")
        pulumi.set(__self__, "discovery_id", discovery_id)
        if documentation_uri and not isinstance(documentation_uri, str):
            raise TypeError("Expected argument 'documentation_uri' to be a str")
        pulumi.set(__self__, "documentation_uri", documentation_uri)
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        pulumi.set(__self__, "events", events)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if hardware_revision and not isinstance(hardware_revision, str):
            raise TypeError("Expected argument 'hardware_revision' to be a str")
        pulumi.set(__self__, "hardware_revision", hardware_revision)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if manufacturer and not isinstance(manufacturer, str):
            raise TypeError("Expected argument 'manufacturer' to be a str")
        pulumi.set(__self__, "manufacturer", manufacturer)
        if manufacturer_uri and not isinstance(manufacturer_uri, str):
            raise TypeError("Expected argument 'manufacturer_uri' to be a str")
        pulumi.set(__self__, "manufacturer_uri", manufacturer_uri)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if product_code and not isinstance(product_code, str):
            raise TypeError("Expected argument 'product_code' to be a str")
        pulumi.set(__self__, "product_code", product_code)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if serial_number and not isinstance(serial_number, str):
            raise TypeError("Expected argument 'serial_number' to be a str")
        pulumi.set(__self__, "serial_number", serial_number)
        if software_revision and not isinstance(software_revision, str):
            raise TypeError("Expected argument 'software_revision' to be a str")
        pulumi.set(__self__, "software_revision", software_revision)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="assetEndpointProfileRef")
    def asset_endpoint_profile_ref(self) -> str:
        """
        A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.
        """
        return pulumi.get(self, "asset_endpoint_profile_ref")

    @property
    @pulumi.getter
    def datasets(self) -> Optional[Sequence['outputs.DiscoveredDatasetResponse']]:
        """
        Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter(name="defaultDatasetsConfiguration")
    def default_datasets_configuration(self) -> Optional[str]:
        """
        Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_datasets_configuration")

    @property
    @pulumi.getter(name="defaultEventsConfiguration")
    def default_events_configuration(self) -> Optional[str]:
        """
        Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        """
        return pulumi.get(self, "default_events_configuration")

    @property
    @pulumi.getter(name="defaultTopic")
    def default_topic(self) -> Optional['outputs.TopicResponse']:
        """
        Object that describes the default topic information for the asset.
        """
        return pulumi.get(self, "default_topic")

    @property
    @pulumi.getter(name="discoveryId")
    def discovery_id(self) -> str:
        """
        Identifier used to detect changes in the asset.
        """
        return pulumi.get(self, "discovery_id")

    @property
    @pulumi.getter(name="documentationUri")
    def documentation_uri(self) -> Optional[str]:
        """
        Reference to the documentation.
        """
        return pulumi.get(self, "documentation_uri")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.DiscoveredEventResponse']]:
        """
        Array of events that are part of the asset. Each event can have per-event configuration.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> 'outputs.ExtendedLocationResponse':
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="hardwareRevision")
    def hardware_revision(self) -> Optional[str]:
        """
        Revision number of the hardware.
        """
        return pulumi.get(self, "hardware_revision")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[str]:
        """
        Asset manufacturer name.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="manufacturerUri")
    def manufacturer_uri(self) -> Optional[str]:
        """
        Asset manufacturer URI.
        """
        return pulumi.get(self, "manufacturer_uri")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        Asset model name.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> Optional[str]:
        """
        Asset product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        """
        Asset serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="softwareRevision")
    def software_revision(self) -> Optional[str]:
        """
        Revision number of the software.
        """
        return pulumi.get(self, "software_revision")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> float:
        """
        An integer that is incremented each time the resource is modified.
        """
        return pulumi.get(self, "version")


class AwaitableGetDiscoveredAssetResult(GetDiscoveredAssetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiscoveredAssetResult(
            asset_endpoint_profile_ref=self.asset_endpoint_profile_ref,
            datasets=self.datasets,
            default_datasets_configuration=self.default_datasets_configuration,
            default_events_configuration=self.default_events_configuration,
            default_topic=self.default_topic,
            discovery_id=self.discovery_id,
            documentation_uri=self.documentation_uri,
            events=self.events,
            extended_location=self.extended_location,
            hardware_revision=self.hardware_revision,
            id=self.id,
            location=self.location,
            manufacturer=self.manufacturer,
            manufacturer_uri=self.manufacturer_uri,
            model=self.model,
            name=self.name,
            product_code=self.product_code,
            provisioning_state=self.provisioning_state,
            serial_number=self.serial_number,
            software_revision=self.software_revision,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            version=self.version)


def get_discovered_asset(discovered_asset_name: Optional[str] = None,
                         resource_group_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiscoveredAssetResult:
    """
    Get a DiscoveredAsset
    Azure REST API version: 2024-09-01-preview.


    :param str discovered_asset_name: Discovered Asset name parameter.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['discoveredAssetName'] = discovered_asset_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:deviceregistry:getDiscoveredAsset', __args__, opts=opts, typ=GetDiscoveredAssetResult).value

    return AwaitableGetDiscoveredAssetResult(
        asset_endpoint_profile_ref=pulumi.get(__ret__, 'asset_endpoint_profile_ref'),
        datasets=pulumi.get(__ret__, 'datasets'),
        default_datasets_configuration=pulumi.get(__ret__, 'default_datasets_configuration'),
        default_events_configuration=pulumi.get(__ret__, 'default_events_configuration'),
        default_topic=pulumi.get(__ret__, 'default_topic'),
        discovery_id=pulumi.get(__ret__, 'discovery_id'),
        documentation_uri=pulumi.get(__ret__, 'documentation_uri'),
        events=pulumi.get(__ret__, 'events'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        hardware_revision=pulumi.get(__ret__, 'hardware_revision'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        manufacturer=pulumi.get(__ret__, 'manufacturer'),
        manufacturer_uri=pulumi.get(__ret__, 'manufacturer_uri'),
        model=pulumi.get(__ret__, 'model'),
        name=pulumi.get(__ret__, 'name'),
        product_code=pulumi.get(__ret__, 'product_code'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        serial_number=pulumi.get(__ret__, 'serial_number'),
        software_revision=pulumi.get(__ret__, 'software_revision'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))
def get_discovered_asset_output(discovered_asset_name: Optional[pulumi.Input[str]] = None,
                                resource_group_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDiscoveredAssetResult]:
    """
    Get a DiscoveredAsset
    Azure REST API version: 2024-09-01-preview.


    :param str discovered_asset_name: Discovered Asset name parameter.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['discoveredAssetName'] = discovered_asset_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:deviceregistry:getDiscoveredAsset', __args__, opts=opts, typ=GetDiscoveredAssetResult)
    return __ret__.apply(lambda __response__: GetDiscoveredAssetResult(
        asset_endpoint_profile_ref=pulumi.get(__response__, 'asset_endpoint_profile_ref'),
        datasets=pulumi.get(__response__, 'datasets'),
        default_datasets_configuration=pulumi.get(__response__, 'default_datasets_configuration'),
        default_events_configuration=pulumi.get(__response__, 'default_events_configuration'),
        default_topic=pulumi.get(__response__, 'default_topic'),
        discovery_id=pulumi.get(__response__, 'discovery_id'),
        documentation_uri=pulumi.get(__response__, 'documentation_uri'),
        events=pulumi.get(__response__, 'events'),
        extended_location=pulumi.get(__response__, 'extended_location'),
        hardware_revision=pulumi.get(__response__, 'hardware_revision'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        manufacturer=pulumi.get(__response__, 'manufacturer'),
        manufacturer_uri=pulumi.get(__response__, 'manufacturer_uri'),
        model=pulumi.get(__response__, 'model'),
        name=pulumi.get(__response__, 'name'),
        product_code=pulumi.get(__response__, 'product_code'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        serial_number=pulumi.get(__response__, 'serial_number'),
        software_revision=pulumi.get(__response__, 'software_revision'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        version=pulumi.get(__response__, 'version')))
