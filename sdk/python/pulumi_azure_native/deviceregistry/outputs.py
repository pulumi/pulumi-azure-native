# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssetStatusErrorResponse',
    'AssetStatusResponse',
    'DataPointResponse',
    'EventResponse',
    'ExtendedLocationResponse',
    'OwnCertificateResponse',
    'SystemDataResponse',
    'TransportAuthenticationResponse',
    'UserAuthenticationResponse',
    'UsernamePasswordCredentialsResponse',
    'X509CredentialsResponse',
]

@pulumi.output_type
class AssetStatusErrorResponse(dict):
    """
    Defines the asset status error properties.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 message: Optional[str] = None):
        """
        Defines the asset status error properties.
        :param int code: Error code for classification of errors (ex: 400, 404, 500, etc.).
        :param str message: Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        """
        Error code for classification of errors (ex: 400, 404, 500, etc.).
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class AssetStatusResponse(dict):
    """
    Defines the asset status properties.
    """
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.AssetStatusErrorResponse']] = None,
                 version: Optional[int] = None):
        """
        Defines the asset status properties.
        :param Sequence['AssetStatusErrorResponse'] errors: Array object to transfer and persist errors that originate from the Edge.
        :param int version: A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.AssetStatusErrorResponse']]:
        """
        Array object to transfer and persist errors that originate from the Edge.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DataPointResponse(dict):
    """
    Defines the data point properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "capabilityId":
            suggest = "capability_id"
        elif key == "dataPointConfiguration":
            suggest = "data_point_configuration"
        elif key == "observabilityMode":
            suggest = "observability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataPointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataPointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataPointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 capability_id: Optional[str] = None,
                 data_point_configuration: Optional[str] = None,
                 name: Optional[str] = None,
                 observability_mode: Optional[str] = None):
        """
        Defines the data point properties.
        :param str data_source: The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
        :param str capability_id: The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        :param str data_point_configuration: Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        :param str name: The name of the data point.
        :param str observability_mode: An indication of how the data point should be mapped to OpenTelemetry.
        """
        pulumi.set(__self__, "data_source", data_source)
        if capability_id is not None:
            pulumi.set(__self__, "capability_id", capability_id)
        if data_point_configuration is not None:
            pulumi.set(__self__, "data_point_configuration", data_point_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if observability_mode is None:
            observability_mode = 'none'
        if observability_mode is not None:
            pulumi.set(__self__, "observability_mode", observability_mode)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        """
        The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="capabilityId")
    def capability_id(self) -> Optional[str]:
        """
        The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        """
        return pulumi.get(self, "capability_id")

    @property
    @pulumi.getter(name="dataPointConfiguration")
    def data_point_configuration(self) -> Optional[str]:
        """
        Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        """
        return pulumi.get(self, "data_point_configuration")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the data point.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observabilityMode")
    def observability_mode(self) -> Optional[str]:
        """
        An indication of how the data point should be mapped to OpenTelemetry.
        """
        return pulumi.get(self, "observability_mode")


@pulumi.output_type
class EventResponse(dict):
    """
    Defines the event properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventNotifier":
            suggest = "event_notifier"
        elif key == "capabilityId":
            suggest = "capability_id"
        elif key == "eventConfiguration":
            suggest = "event_configuration"
        elif key == "observabilityMode":
            suggest = "observability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_notifier: str,
                 capability_id: Optional[str] = None,
                 event_configuration: Optional[str] = None,
                 name: Optional[str] = None,
                 observability_mode: Optional[str] = None):
        """
        Defines the event properties.
        :param str event_notifier: The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        :param str capability_id: The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        :param str event_configuration: Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        :param str name: The name of the event.
        :param str observability_mode: An indication of how the event should be mapped to OpenTelemetry.
        """
        pulumi.set(__self__, "event_notifier", event_notifier)
        if capability_id is not None:
            pulumi.set(__self__, "capability_id", capability_id)
        if event_configuration is not None:
            pulumi.set(__self__, "event_configuration", event_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if observability_mode is None:
            observability_mode = 'none'
        if observability_mode is not None:
            pulumi.set(__self__, "observability_mode", observability_mode)

    @property
    @pulumi.getter(name="eventNotifier")
    def event_notifier(self) -> str:
        """
        The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        """
        return pulumi.get(self, "event_notifier")

    @property
    @pulumi.getter(name="capabilityId")
    def capability_id(self) -> Optional[str]:
        """
        The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
        """
        return pulumi.get(self, "capability_id")

    @property
    @pulumi.getter(name="eventConfiguration")
    def event_configuration(self) -> Optional[str]:
        """
        Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        """
        return pulumi.get(self, "event_configuration")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the event.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observabilityMode")
    def observability_mode(self) -> Optional[str]:
        """
        An indication of how the event should be mapped to OpenTelemetry.
        """
        return pulumi.get(self, "observability_mode")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    The extended location.
    """
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        The extended location.
        :param str name: The extended location name.
        :param str type: The extended location type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OwnCertificateResponse(dict):
    """
    Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certPasswordReference":
            suggest = "cert_password_reference"
        elif key == "certSecretReference":
            suggest = "cert_secret_reference"
        elif key == "certThumbprint":
            suggest = "cert_thumbprint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OwnCertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OwnCertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OwnCertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_password_reference: Optional[str] = None,
                 cert_secret_reference: Optional[str] = None,
                 cert_thumbprint: Optional[str] = None):
        """
        Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
        :param str cert_password_reference: Secret Reference Name (Pfx or Pem password).
        :param str cert_secret_reference: Secret Reference name (cert and private key).
        :param str cert_thumbprint: Certificate thumbprint.
        """
        if cert_password_reference is not None:
            pulumi.set(__self__, "cert_password_reference", cert_password_reference)
        if cert_secret_reference is not None:
            pulumi.set(__self__, "cert_secret_reference", cert_secret_reference)
        if cert_thumbprint is not None:
            pulumi.set(__self__, "cert_thumbprint", cert_thumbprint)

    @property
    @pulumi.getter(name="certPasswordReference")
    def cert_password_reference(self) -> Optional[str]:
        """
        Secret Reference Name (Pfx or Pem password).
        """
        return pulumi.get(self, "cert_password_reference")

    @property
    @pulumi.getter(name="certSecretReference")
    def cert_secret_reference(self) -> Optional[str]:
        """
        Secret Reference name (cert and private key).
        """
        return pulumi.get(self, "cert_secret_reference")

    @property
    @pulumi.getter(name="certThumbprint")
    def cert_thumbprint(self) -> Optional[str]:
        """
        Certificate thumbprint.
        """
        return pulumi.get(self, "cert_thumbprint")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TransportAuthenticationResponse(dict):
    """
    Definition of the authentication mechanism for the southbound connector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownCertificates":
            suggest = "own_certificates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportAuthenticationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportAuthenticationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportAuthenticationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 own_certificates: Sequence['outputs.OwnCertificateResponse']):
        """
        Definition of the authentication mechanism for the southbound connector.
        :param Sequence['OwnCertificateResponse'] own_certificates: Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
        """
        pulumi.set(__self__, "own_certificates", own_certificates)

    @property
    @pulumi.getter(name="ownCertificates")
    def own_certificates(self) -> Sequence['outputs.OwnCertificateResponse']:
        """
        Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
        """
        return pulumi.get(self, "own_certificates")


@pulumi.output_type
class UserAuthenticationResponse(dict):
    """
    Definition of the client authentication mechanism to the server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usernamePasswordCredentials":
            suggest = "username_password_credentials"
        elif key == "x509Credentials":
            suggest = "x509_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAuthenticationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAuthenticationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAuthenticationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 username_password_credentials: Optional['outputs.UsernamePasswordCredentialsResponse'] = None,
                 x509_credentials: Optional['outputs.X509CredentialsResponse'] = None):
        """
        Definition of the client authentication mechanism to the server.
        :param str mode: Defines the mode to authenticate the user of the client at the server.
        :param 'UsernamePasswordCredentialsResponse' username_password_credentials: Defines the username and password references when UsernamePassword user authentication mode is selected.
        :param 'X509CredentialsResponse' x509_credentials: Defines the certificate reference when Certificate user authentication mode is selected.
        """
        if mode is None:
            mode = 'Certificate'
        pulumi.set(__self__, "mode", mode)
        if username_password_credentials is not None:
            pulumi.set(__self__, "username_password_credentials", username_password_credentials)
        if x509_credentials is not None:
            pulumi.set(__self__, "x509_credentials", x509_credentials)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Defines the mode to authenticate the user of the client at the server.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="usernamePasswordCredentials")
    def username_password_credentials(self) -> Optional['outputs.UsernamePasswordCredentialsResponse']:
        """
        Defines the username and password references when UsernamePassword user authentication mode is selected.
        """
        return pulumi.get(self, "username_password_credentials")

    @property
    @pulumi.getter(name="x509Credentials")
    def x509_credentials(self) -> Optional['outputs.X509CredentialsResponse']:
        """
        Defines the certificate reference when Certificate user authentication mode is selected.
        """
        return pulumi.get(self, "x509_credentials")


@pulumi.output_type
class UsernamePasswordCredentialsResponse(dict):
    """
    The credentials for authentication mode UsernamePassword.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordReference":
            suggest = "password_reference"
        elif key == "usernameReference":
            suggest = "username_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsernamePasswordCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsernamePasswordCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsernamePasswordCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_reference: str,
                 username_reference: str):
        """
        The credentials for authentication mode UsernamePassword.
        :param str password_reference: A reference to secret containing the password.
        :param str username_reference: A reference to secret containing the username.
        """
        pulumi.set(__self__, "password_reference", password_reference)
        pulumi.set(__self__, "username_reference", username_reference)

    @property
    @pulumi.getter(name="passwordReference")
    def password_reference(self) -> str:
        """
        A reference to secret containing the password.
        """
        return pulumi.get(self, "password_reference")

    @property
    @pulumi.getter(name="usernameReference")
    def username_reference(self) -> str:
        """
        A reference to secret containing the username.
        """
        return pulumi.get(self, "username_reference")


@pulumi.output_type
class X509CredentialsResponse(dict):
    """
    The x509 certificate for authentication mode Certificate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateReference":
            suggest = "certificate_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in X509CredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        X509CredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        X509CredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_reference: str):
        """
        The x509 certificate for authentication mode Certificate.
        :param str certificate_reference: A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        """
        pulumi.set(__self__, "certificate_reference", certificate_reference)

    @property
    @pulumi.getter(name="certificateReference")
    def certificate_reference(self) -> str:
        """
        A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        """
        return pulumi.get(self, "certificate_reference")


