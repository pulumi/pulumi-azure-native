# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSchemaVersionResult',
    'AwaitableGetSchemaVersionResult',
    'get_schema_version',
    'get_schema_version_output',
]

@pulumi.output_type
class GetSchemaVersionResult:
    """
    Schema version's definition.
    """
    def __init__(__self__, description=None, hash=None, id=None, name=None, provisioning_state=None, schema_content=None, system_data=None, type=None, uuid=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if hash and not isinstance(hash, str):
            raise TypeError("Expected argument 'hash' to be a str")
        pulumi.set(__self__, "hash", hash)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if schema_content and not isinstance(schema_content, str):
            raise TypeError("Expected argument 'schema_content' to be a str")
        pulumi.set(__self__, "schema_content", schema_content)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Human-readable description of the schema.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hash(self) -> str:
        """
        Hash of the schema content.
        """
        return pulumi.get(self, "hash")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="schemaContent")
    def schema_content(self) -> str:
        """
        Schema content.
        """
        return pulumi.get(self, "schema_content")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Globally unique, immutable, non-reusable id.
        """
        return pulumi.get(self, "uuid")


class AwaitableGetSchemaVersionResult(GetSchemaVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchemaVersionResult(
            description=self.description,
            hash=self.hash,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            schema_content=self.schema_content,
            system_data=self.system_data,
            type=self.type,
            uuid=self.uuid)


def get_schema_version(resource_group_name: Optional[str] = None,
                       schema_name: Optional[str] = None,
                       schema_registry_name: Optional[str] = None,
                       schema_version_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchemaVersionResult:
    """
    Get a SchemaVersion
    Azure REST API version: 2024-09-01-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str schema_name: Schema name parameter.
    :param str schema_registry_name: Schema registry name parameter.
    :param str schema_version_name: Schema version name parameter.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['schemaName'] = schema_name
    __args__['schemaRegistryName'] = schema_registry_name
    __args__['schemaVersionName'] = schema_version_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:deviceregistry:getSchemaVersion', __args__, opts=opts, typ=GetSchemaVersionResult).value

    return AwaitableGetSchemaVersionResult(
        description=pulumi.get(__ret__, 'description'),
        hash=pulumi.get(__ret__, 'hash'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        schema_content=pulumi.get(__ret__, 'schema_content'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_schema_version_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                              schema_name: Optional[pulumi.Input[str]] = None,
                              schema_registry_name: Optional[pulumi.Input[str]] = None,
                              schema_version_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchemaVersionResult]:
    """
    Get a SchemaVersion
    Azure REST API version: 2024-09-01-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str schema_name: Schema name parameter.
    :param str schema_registry_name: Schema registry name parameter.
    :param str schema_version_name: Schema version name parameter.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['schemaName'] = schema_name
    __args__['schemaRegistryName'] = schema_registry_name
    __args__['schemaVersionName'] = schema_version_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:deviceregistry:getSchemaVersion', __args__, opts=opts, typ=GetSchemaVersionResult)
    return __ret__.apply(lambda __response__: GetSchemaVersionResult(
        description=pulumi.get(__response__, 'description'),
        hash=pulumi.get(__response__, 'hash'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        schema_content=pulumi.get(__response__, 'schema_content'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
