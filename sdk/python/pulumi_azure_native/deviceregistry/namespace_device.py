# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['NamespaceDeviceArgs', 'NamespaceDevice']

@pulumi.input_type
class NamespaceDeviceArgs:
    def __init__(__self__, *,
                 namespace_name: pulumi.Input[builtins.str],
                 resource_group_name: pulumi.Input[builtins.str],
                 attributes: Optional[Any] = None,
                 device_name: Optional[pulumi.Input[builtins.str]] = None,
                 discovered_device_ref: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 endpoints: Optional[pulumi.Input['MessagingEndpointsArgs']] = None,
                 extended_location: Optional[pulumi.Input['ExtendedLocationArgs']] = None,
                 external_device_id: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 manufacturer: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[builtins.str]] = None,
                 operating_system_version: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a NamespaceDevice resource.
        :param pulumi.Input[builtins.str] namespace_name: The name of the namespace.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param pulumi.Input[builtins.str] device_name: The name of the device.
        :param pulumi.Input[builtins.str] discovered_device_ref: Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.
        :param pulumi.Input[builtins.bool] enabled: Indicates if the resource is enabled or not.
        :param pulumi.Input['MessagingEndpointsArgs'] endpoints: Property bag containing the device's unassigned and assigned endpoints.
        :param pulumi.Input['ExtendedLocationArgs'] extended_location: The extended location.
        :param pulumi.Input[builtins.str] external_device_id: The Device ID provided by the customer.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] manufacturer: Device manufacturer.
        :param pulumi.Input[builtins.str] model: Device model.
        :param pulumi.Input[builtins.str] operating_system: Device operating system.
        :param pulumi.Input[builtins.str] operating_system_version: Device operating system version.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if discovered_device_ref is not None:
            pulumi.set(__self__, "discovered_device_ref", discovered_device_ref)
        if enabled is None:
            enabled = True
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if extended_location is not None:
            pulumi.set(__self__, "extended_location", extended_location)
        if external_device_id is not None:
            pulumi.set(__self__, "external_device_id", external_device_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[Any]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="discoveredDeviceRef")
    def discovered_device_ref(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.
        """
        return pulumi.get(self, "discovered_device_ref")

    @discovered_device_ref.setter
    def discovered_device_ref(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "discovered_device_ref", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates if the resource is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input['MessagingEndpointsArgs']]:
        """
        Property bag containing the device's unassigned and assigned endpoints.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input['MessagingEndpointsArgs']]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional[pulumi.Input['ExtendedLocationArgs']]:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: Optional[pulumi.Input['ExtendedLocationArgs']]):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="externalDeviceId")
    def external_device_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Device ID provided by the customer.
        """
        return pulumi.get(self, "external_device_id")

    @external_device_id.setter
    def external_device_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_device_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Device manufacturer.
        """
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Device model.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Device operating system.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Device operating system version.
        """
        return pulumi.get(self, "operating_system_version")

    @operating_system_version.setter
    def operating_system_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operating_system_version", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:deviceregistry:NamespaceDevice")
class NamespaceDevice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[Any] = None,
                 device_name: Optional[pulumi.Input[builtins.str]] = None,
                 discovered_device_ref: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 endpoints: Optional[pulumi.Input[Union['MessagingEndpointsArgs', 'MessagingEndpointsArgsDict']]] = None,
                 extended_location: Optional[pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']]] = None,
                 external_device_id: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 manufacturer: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[builtins.str]] = None,
                 operating_system_version: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Device definition.

        Uses Azure REST API version 2025-07-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param Any attributes: A set of key-value pairs that contain custom attributes set by the customer.
        :param pulumi.Input[builtins.str] device_name: The name of the device.
        :param pulumi.Input[builtins.str] discovered_device_ref: Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.
        :param pulumi.Input[builtins.bool] enabled: Indicates if the resource is enabled or not.
        :param pulumi.Input[Union['MessagingEndpointsArgs', 'MessagingEndpointsArgsDict']] endpoints: Property bag containing the device's unassigned and assigned endpoints.
        :param pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']] extended_location: The extended location.
        :param pulumi.Input[builtins.str] external_device_id: The Device ID provided by the customer.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] manufacturer: Device manufacturer.
        :param pulumi.Input[builtins.str] model: Device model.
        :param pulumi.Input[builtins.str] namespace_name: The name of the namespace.
        :param pulumi.Input[builtins.str] operating_system: Device operating system.
        :param pulumi.Input[builtins.str] operating_system_version: Device operating system version.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceDeviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Device definition.

        Uses Azure REST API version 2025-07-01-preview.

        :param str resource_name: The name of the resource.
        :param NamespaceDeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceDeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[Any] = None,
                 device_name: Optional[pulumi.Input[builtins.str]] = None,
                 discovered_device_ref: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 endpoints: Optional[pulumi.Input[Union['MessagingEndpointsArgs', 'MessagingEndpointsArgsDict']]] = None,
                 extended_location: Optional[pulumi.Input[Union['ExtendedLocationArgs', 'ExtendedLocationArgsDict']]] = None,
                 external_device_id: Optional[pulumi.Input[builtins.str]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 manufacturer: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[builtins.str]] = None,
                 operating_system_version: Optional[pulumi.Input[builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceDeviceArgs.__new__(NamespaceDeviceArgs)

            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["device_name"] = device_name
            __props__.__dict__["discovered_device_ref"] = discovered_device_ref
            if enabled is None:
                enabled = True
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["endpoints"] = endpoints
            __props__.__dict__["extended_location"] = extended_location
            __props__.__dict__["external_device_id"] = external_device_id
            __props__.__dict__["location"] = location
            __props__.__dict__["manufacturer"] = manufacturer
            __props__.__dict__["model"] = model
            if namespace_name is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_name'")
            __props__.__dict__["namespace_name"] = namespace_name
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["operating_system_version"] = operating_system_version
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["last_transition_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
            __props__.__dict__["version"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:deviceregistry/v20250701preview:NamespaceDevice")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(NamespaceDevice, __self__).__init__(
            'azure-native:deviceregistry:NamespaceDevice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NamespaceDevice':
        """
        Get an existing NamespaceDevice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NamespaceDeviceArgs.__new__(NamespaceDeviceArgs)

        __props__.__dict__["attributes"] = None
        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["discovered_device_ref"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["endpoints"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["external_device_id"] = None
        __props__.__dict__["last_transition_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["manufacturer"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["operating_system"] = None
        __props__.__dict__["operating_system_version"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["uuid"] = None
        __props__.__dict__["version"] = None
        return NamespaceDevice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[Any]]:
        """
        A set of key-value pairs that contain custom attributes set by the customer.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="discoveredDeviceRef")
    def discovered_device_ref(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.
        """
        return pulumi.get(self, "discovered_device_ref")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates if the resource is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Output[Optional['outputs.MessagingEndpointsResponse']]:
        """
        Property bag containing the device's unassigned and assigned endpoints.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[builtins.str]:
        """
        Resource Tag.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output[Optional['outputs.ExtendedLocationResponse']]:
        """
        The extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="externalDeviceId")
    def external_device_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The Device ID provided by the customer.
        """
        return pulumi.get(self, "external_device_id")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Output[builtins.str]:
        """
        A timestamp (in UTC) that is updated each time the resource is modified.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def manufacturer(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Device manufacturer.
        """
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Device model.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Device operating system.
        """
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Device operating system version.
        """
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.DeviceStatusResponse']:
        """
        Device status updates.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[builtins.str]:
        """
        A unique identifier for the device.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.float]:
        """
        An integer that is incremented each time the resource is modified.
        """
        return pulumi.get(self, "version")

