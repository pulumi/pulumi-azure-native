# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdditionalConfigurationResponse',
    'AddressDetailsResponse',
    'AddressPropertiesResponse',
    'AvailabilityInformationResponse',
    'BillingMeterDetailsResponse',
    'CategoryInformationResponse',
    'ChildConfigurationResponse',
    'ConfigurationDeviceDetailsResponse',
    'ConfigurationResponse',
    'ContactDetailsResponse',
    'CostInformationResponse',
    'DescriptionResponse',
    'DeviceDetailsResponse',
    'DevicePresenceVerificationDetailsResponse',
    'DimensionsResponse',
    'DisplayInfoResponse',
    'EncryptionPreferencesResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'FilterablePropertyResponse',
    'ForwardShippingDetailsResponse',
    'GroupedChildConfigurationsResponse',
    'HierarchyInformationResponse',
    'ImageInformationResponse',
    'LinkResponse',
    'ManagementResourcePreferencesResponse',
    'NotificationPreferenceResponse',
    'OrderItemDetailsResponse',
    'Pav2MeterDetailsResponse',
    'PreferencesResponse',
    'ProductDetailsResponse',
    'ProductFamilyResponse',
    'ProductLineResponse',
    'ProductResponse',
    'ProvisioningDetailsResponse',
    'PurchaseMeterDetailsResponse',
    'ResourceIdentityResponse',
    'ResourceProviderDetailsResponse',
    'ReverseShippingDetailsResponse',
    'ShippingAddressResponse',
    'SiteDetailsResponse',
    'SpecificationResponse',
    'StageDetailsResponse',
    'SystemDataResponse',
    'TermCommitmentInformationResponse',
    'TermCommitmentPreferencesResponse',
    'TermTypeDetailsResponse',
    'TransportPreferencesResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class AdditionalConfigurationResponse(dict):
    """
    Additional Configuration details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hierarchyInformation":
            suggest = "hierarchy_information"
        elif key == "provisioningDetails":
            suggest = "provisioning_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdditionalConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdditionalConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdditionalConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 quantity: _builtins.int,
                 provisioning_details: Optional[Sequence['outputs.ProvisioningDetailsResponse']] = None):
        """
        Additional Configuration details.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy of the product which uniquely identifies the configuration.
        :param _builtins.int quantity: Quantity of the product.
        :param Sequence['ProvisioningDetailsResponse'] provisioning_details: List Provisioning Details for Devices in Additional Config.
        """
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "quantity", quantity)
        if provisioning_details is not None:
            pulumi.set(__self__, "provisioning_details", provisioning_details)

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy of the product which uniquely identifies the configuration.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.int:
        """
        Quantity of the product.
        """
        return pulumi.get(self, "quantity")

    @_builtins.property
    @pulumi.getter(name="provisioningDetails")
    def provisioning_details(self) -> Optional[Sequence['outputs.ProvisioningDetailsResponse']]:
        """
        List Provisioning Details for Devices in Additional Config.
        """
        return pulumi.get(self, "provisioning_details")


@pulumi.output_type
class AddressDetailsResponse(dict):
    """
    Address details for an order item.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardAddress":
            suggest = "forward_address"
        elif key == "returnAddress":
            suggest = "return_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forward_address: 'outputs.AddressPropertiesResponse',
                 return_address: 'outputs.AddressPropertiesResponse'):
        """
        Address details for an order item.
        :param 'AddressPropertiesResponse' forward_address: Customer address and contact details.
        :param 'AddressPropertiesResponse' return_address: Return shipping address.
        """
        pulumi.set(__self__, "forward_address", forward_address)
        pulumi.set(__self__, "return_address", return_address)

    @_builtins.property
    @pulumi.getter(name="forwardAddress")
    def forward_address(self) -> 'outputs.AddressPropertiesResponse':
        """
        Customer address and contact details.
        """
        return pulumi.get(self, "forward_address")

    @_builtins.property
    @pulumi.getter(name="returnAddress")
    def return_address(self) -> 'outputs.AddressPropertiesResponse':
        """
        Return shipping address.
        """
        return pulumi.get(self, "return_address")


@pulumi.output_type
class AddressPropertiesResponse(dict):
    """
    Address Properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressValidationStatus":
            suggest = "address_validation_status"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "addressClassification":
            suggest = "address_classification"
        elif key == "contactDetails":
            suggest = "contact_details"
        elif key == "shippingAddress":
            suggest = "shipping_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_validation_status: _builtins.str,
                 provisioning_state: _builtins.str,
                 address_classification: Optional[_builtins.str] = None,
                 contact_details: Optional['outputs.ContactDetailsResponse'] = None,
                 shipping_address: Optional['outputs.ShippingAddressResponse'] = None):
        """
        Address Properties.
        :param _builtins.str address_validation_status: Status of address validation.
        :param _builtins.str provisioning_state: Provisioning state
        :param _builtins.str address_classification: Type of address based on its usage context.
        :param 'ContactDetailsResponse' contact_details: Contact details for the address.
        :param 'ShippingAddressResponse' shipping_address: Shipping details for the address.
        """
        pulumi.set(__self__, "address_validation_status", address_validation_status)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if address_classification is not None:
            pulumi.set(__self__, "address_classification", address_classification)
        if contact_details is not None:
            pulumi.set(__self__, "contact_details", contact_details)
        if shipping_address is not None:
            pulumi.set(__self__, "shipping_address", shipping_address)

    @_builtins.property
    @pulumi.getter(name="addressValidationStatus")
    def address_validation_status(self) -> _builtins.str:
        """
        Status of address validation.
        """
        return pulumi.get(self, "address_validation_status")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="addressClassification")
    def address_classification(self) -> Optional[_builtins.str]:
        """
        Type of address based on its usage context.
        """
        return pulumi.get(self, "address_classification")

    @_builtins.property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> Optional['outputs.ContactDetailsResponse']:
        """
        Contact details for the address.
        """
        return pulumi.get(self, "contact_details")

    @_builtins.property
    @pulumi.getter(name="shippingAddress")
    def shipping_address(self) -> Optional['outputs.ShippingAddressResponse']:
        """
        Shipping details for the address.
        """
        return pulumi.get(self, "shipping_address")


@pulumi.output_type
class AvailabilityInformationResponse(dict):
    """
    Availability information of a product system.
    """
    def __init__(__self__, *,
                 availability_stage: _builtins.str,
                 disabled_reason: _builtins.str,
                 disabled_reason_message: _builtins.str):
        """
        Availability information of a product system.
        :param _builtins.str availability_stage: Current availability stage of the product.
        :param _builtins.str disabled_reason: Reason why the product is disabled.
        :param _builtins.str disabled_reason_message: Message for why the product is disabled.
        """
        pulumi.set(__self__, "availability_stage", availability_stage)
        pulumi.set(__self__, "disabled_reason", disabled_reason)
        pulumi.set(__self__, "disabled_reason_message", disabled_reason_message)

    @_builtins.property
    @pulumi.getter(name="availabilityStage")
    def availability_stage(self) -> _builtins.str:
        """
        Current availability stage of the product.
        """
        return pulumi.get(self, "availability_stage")

    @_builtins.property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> _builtins.str:
        """
        Reason why the product is disabled.
        """
        return pulumi.get(self, "disabled_reason")

    @_builtins.property
    @pulumi.getter(name="disabledReasonMessage")
    def disabled_reason_message(self) -> _builtins.str:
        """
        Message for why the product is disabled.
        """
        return pulumi.get(self, "disabled_reason_message")


@pulumi.output_type
class BillingMeterDetailsResponse(dict):
    """
    Holds billing meter details for each type of billing.
    """
    def __init__(__self__, *,
                 frequency: _builtins.str,
                 meter_details: Any,
                 metering_type: _builtins.str,
                 name: _builtins.str,
                 term_type_details: 'outputs.TermTypeDetailsResponse'):
        """
        Holds billing meter details for each type of billing.
        :param _builtins.str frequency: Frequency of recurrence.
        :param Union['Pav2MeterDetailsResponse', 'PurchaseMeterDetailsResponse'] meter_details: Represents MeterDetails.
        :param _builtins.str metering_type: Represents Metering type (eg one-time or recurrent).
        :param _builtins.str name: Represents Billing type name.
        :param 'TermTypeDetailsResponse' term_type_details: Represent Term Type details.
        """
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "meter_details", meter_details)
        pulumi.set(__self__, "metering_type", metering_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "term_type_details", term_type_details)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> _builtins.str:
        """
        Frequency of recurrence.
        """
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter(name="meterDetails")
    def meter_details(self) -> Any:
        """
        Represents MeterDetails.
        """
        return pulumi.get(self, "meter_details")

    @_builtins.property
    @pulumi.getter(name="meteringType")
    def metering_type(self) -> _builtins.str:
        """
        Represents Metering type (eg one-time or recurrent).
        """
        return pulumi.get(self, "metering_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Represents Billing type name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="termTypeDetails")
    def term_type_details(self) -> 'outputs.TermTypeDetailsResponse':
        """
        Represent Term Type details.
        """
        return pulumi.get(self, "term_type_details")


@pulumi.output_type
class CategoryInformationResponse(dict):
    """
    Category related properties of a child configuration.
    """
    def __init__(__self__, *,
                 category_display_name: Optional[_builtins.str] = None,
                 category_name: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 links: Optional[Sequence['outputs.LinkResponse']] = None):
        """
        Category related properties of a child configuration.
        :param _builtins.str category_display_name: Category display name of the child configuration.
        :param _builtins.str category_name: Category name of the child configuration.
        :param _builtins.str description: Description text for the category.
        :param Sequence['LinkResponse'] links: Links for the category.
        """
        if category_display_name is not None:
            pulumi.set(__self__, "category_display_name", category_display_name)
        if category_name is not None:
            pulumi.set(__self__, "category_name", category_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @_builtins.property
    @pulumi.getter(name="categoryDisplayName")
    def category_display_name(self) -> Optional[_builtins.str]:
        """
        Category display name of the child configuration.
        """
        return pulumi.get(self, "category_display_name")

    @_builtins.property
    @pulumi.getter(name="categoryName")
    def category_name(self) -> Optional[_builtins.str]:
        """
        Category name of the child configuration.
        """
        return pulumi.get(self, "category_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description text for the category.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.LinkResponse']]:
        """
        Links for the category.
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class ChildConfigurationResponse(dict):
    """
    Child configuration object.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 child_configuration_type: _builtins.str,
                 child_configuration_types: Sequence[_builtins.str],
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 dimensions: 'outputs.DimensionsResponse',
                 display_name: _builtins.str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: _builtins.str,
                 grouped_child_configurations: Sequence['outputs.GroupedChildConfigurationsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 is_part_of_base_configuration: _builtins.bool,
                 maximum_quantity: _builtins.int,
                 minimum_quantity: _builtins.int,
                 provisioning_support: _builtins.str,
                 specifications: Sequence['outputs.SpecificationResponse'],
                 supported_term_commitment_durations: Sequence[_builtins.str]):
        """
        Child configuration object.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param _builtins.str child_configuration_type: Child configuration type.
        :param Sequence[_builtins.str] child_configuration_types: Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param 'DimensionsResponse' dimensions: Dimensions of the configuration.
        :param _builtins.str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param _builtins.str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param Sequence['GroupedChildConfigurationsResponse'] grouped_child_configurations: Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param _builtins.bool is_part_of_base_configuration: Flag to indicate if the child configuration is part of the base configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default.
        :param _builtins.int maximum_quantity: Maximum quantity a customer can order while choosing this configuration.
        :param _builtins.int minimum_quantity: Minimum quantity a customer can order while choosing this configuration.
        :param _builtins.str provisioning_support: Determining nature of provisioning that the configuration supports.
        :param Sequence['SpecificationResponse'] specifications: Specifications of the configuration.
        :param Sequence[_builtins.str] supported_term_commitment_durations: The Term Commitment Durations that are supported for a configuration.
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "child_configuration_type", child_configuration_type)
        pulumi.set(__self__, "child_configuration_types", child_configuration_types)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "fulfilled_by", fulfilled_by)
        pulumi.set(__self__, "grouped_child_configurations", grouped_child_configurations)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "is_part_of_base_configuration", is_part_of_base_configuration)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "provisioning_support", provisioning_support)
        pulumi.set(__self__, "specifications", specifications)
        pulumi.set(__self__, "supported_term_commitment_durations", supported_term_commitment_durations)

    @_builtins.property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @_builtins.property
    @pulumi.getter(name="childConfigurationType")
    def child_configuration_type(self) -> _builtins.str:
        """
        Child configuration type.
        """
        return pulumi.get(self, "child_configuration_type")

    @_builtins.property
    @pulumi.getter(name="childConfigurationTypes")
    def child_configuration_types(self) -> Sequence[_builtins.str]:
        """
        Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        """
        return pulumi.get(self, "child_configuration_types")

    @_builtins.property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @_builtins.property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> 'outputs.DimensionsResponse':
        """
        Dimensions of the configuration.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @_builtins.property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> _builtins.str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @_builtins.property
    @pulumi.getter(name="groupedChildConfigurations")
    def grouped_child_configurations(self) -> Sequence['outputs.GroupedChildConfigurationsResponse']:
        """
        Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        """
        return pulumi.get(self, "grouped_child_configurations")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @_builtins.property
    @pulumi.getter(name="isPartOfBaseConfiguration")
    def is_part_of_base_configuration(self) -> _builtins.bool:
        """
        Flag to indicate if the child configuration is part of the base configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default.
        """
        return pulumi.get(self, "is_part_of_base_configuration")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity a customer can order while choosing this configuration.
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity a customer can order while choosing this configuration.
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="provisioningSupport")
    def provisioning_support(self) -> _builtins.str:
        """
        Determining nature of provisioning that the configuration supports.
        """
        return pulumi.get(self, "provisioning_support")

    @_builtins.property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.SpecificationResponse']:
        """
        Specifications of the configuration.
        """
        return pulumi.get(self, "specifications")

    @_builtins.property
    @pulumi.getter(name="supportedTermCommitmentDurations")
    def supported_term_commitment_durations(self) -> Sequence[_builtins.str]:
        """
        The Term Commitment Durations that are supported for a configuration.
        """
        return pulumi.get(self, "supported_term_commitment_durations")


@pulumi.output_type
class ConfigurationDeviceDetailsResponse(dict):
    """
    Device details for configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceDetails":
            suggest = "device_details"
        elif key == "hierarchyInformation":
            suggest = "hierarchy_information"
        elif key == "identificationType":
            suggest = "identification_type"
        elif key == "termCommitmentInformation":
            suggest = "term_commitment_information"
        elif key == "displayInfo":
            suggest = "display_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationDeviceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationDeviceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationDeviceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_details: Sequence['outputs.DeviceDetailsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 identification_type: _builtins.str,
                 quantity: _builtins.int,
                 term_commitment_information: 'outputs.TermCommitmentInformationResponse',
                 display_info: Optional['outputs.DisplayInfoResponse'] = None):
        """
        Device details for configuration.
        :param Sequence['DeviceDetailsResponse'] device_details: List of device details.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy of the product which uniquely identifies the configuration.
        :param _builtins.str identification_type: Identification type of the configuration.
        :param _builtins.int quantity: Quantity of the product.
        :param 'TermCommitmentInformationResponse' term_commitment_information: Term Commitment Information of the Device.
        :param 'DisplayInfoResponse' display_info: Display details of the product.
        """
        pulumi.set(__self__, "device_details", device_details)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "identification_type", identification_type)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "term_commitment_information", term_commitment_information)
        if display_info is not None:
            pulumi.set(__self__, "display_info", display_info)

    @_builtins.property
    @pulumi.getter(name="deviceDetails")
    def device_details(self) -> Sequence['outputs.DeviceDetailsResponse']:
        """
        List of device details.
        """
        return pulumi.get(self, "device_details")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy of the product which uniquely identifies the configuration.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="identificationType")
    def identification_type(self) -> _builtins.str:
        """
        Identification type of the configuration.
        """
        return pulumi.get(self, "identification_type")

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.int:
        """
        Quantity of the product.
        """
        return pulumi.get(self, "quantity")

    @_builtins.property
    @pulumi.getter(name="termCommitmentInformation")
    def term_commitment_information(self) -> 'outputs.TermCommitmentInformationResponse':
        """
        Term Commitment Information of the Device.
        """
        return pulumi.get(self, "term_commitment_information")

    @_builtins.property
    @pulumi.getter(name="displayInfo")
    def display_info(self) -> Optional['outputs.DisplayInfoResponse']:
        """
        Display details of the product.
        """
        return pulumi.get(self, "display_info")


@pulumi.output_type
class ConfigurationResponse(dict):
    """
    Configuration object.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 child_configuration_types: Sequence[_builtins.str],
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 dimensions: 'outputs.DimensionsResponse',
                 display_name: _builtins.str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: _builtins.str,
                 grouped_child_configurations: Sequence['outputs.GroupedChildConfigurationsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 provisioning_support: _builtins.str,
                 specifications: Sequence['outputs.SpecificationResponse'],
                 supported_term_commitment_durations: Sequence[_builtins.str]):
        """
        Configuration object.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param Sequence[_builtins.str] child_configuration_types: Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param 'DimensionsResponse' dimensions: Dimensions of the configuration.
        :param _builtins.str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param _builtins.str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param Sequence['GroupedChildConfigurationsResponse'] grouped_child_configurations: Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param _builtins.str provisioning_support: Determining nature of provisioning that the configuration supports.
        :param Sequence['SpecificationResponse'] specifications: Specifications of the configuration.
        :param Sequence[_builtins.str] supported_term_commitment_durations: The Term Commitment Durations that are supported for a configuration.
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "child_configuration_types", child_configuration_types)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "fulfilled_by", fulfilled_by)
        pulumi.set(__self__, "grouped_child_configurations", grouped_child_configurations)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "provisioning_support", provisioning_support)
        pulumi.set(__self__, "specifications", specifications)
        pulumi.set(__self__, "supported_term_commitment_durations", supported_term_commitment_durations)

    @_builtins.property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @_builtins.property
    @pulumi.getter(name="childConfigurationTypes")
    def child_configuration_types(self) -> Sequence[_builtins.str]:
        """
        Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        """
        return pulumi.get(self, "child_configuration_types")

    @_builtins.property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @_builtins.property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> 'outputs.DimensionsResponse':
        """
        Dimensions of the configuration.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @_builtins.property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> _builtins.str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @_builtins.property
    @pulumi.getter(name="groupedChildConfigurations")
    def grouped_child_configurations(self) -> Sequence['outputs.GroupedChildConfigurationsResponse']:
        """
        Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        """
        return pulumi.get(self, "grouped_child_configurations")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @_builtins.property
    @pulumi.getter(name="provisioningSupport")
    def provisioning_support(self) -> _builtins.str:
        """
        Determining nature of provisioning that the configuration supports.
        """
        return pulumi.get(self, "provisioning_support")

    @_builtins.property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.SpecificationResponse']:
        """
        Specifications of the configuration.
        """
        return pulumi.get(self, "specifications")

    @_builtins.property
    @pulumi.getter(name="supportedTermCommitmentDurations")
    def supported_term_commitment_durations(self) -> Sequence[_builtins.str]:
        """
        The Term Commitment Durations that are supported for a configuration.
        """
        return pulumi.get(self, "supported_term_commitment_durations")


@pulumi.output_type
class ContactDetailsResponse(dict):
    """
    Contact Details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactName":
            suggest = "contact_name"
        elif key == "emailList":
            suggest = "email_list"
        elif key == "phoneExtension":
            suggest = "phone_extension"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_name: Optional[_builtins.str] = None,
                 email_list: Optional[Sequence[_builtins.str]] = None,
                 mobile: Optional[_builtins.str] = None,
                 phone: Optional[_builtins.str] = None,
                 phone_extension: Optional[_builtins.str] = None):
        """
        Contact Details.
        :param _builtins.str contact_name: Contact name of the person.
        :param Sequence[_builtins.str] email_list: List of Email-ids to be notified about job progress.
        :param _builtins.str mobile: Mobile number of the contact person.
        :param _builtins.str phone: Phone number of the contact person.
        :param _builtins.str phone_extension: Phone extension number of the contact person.
        """
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if email_list is not None:
            pulumi.set(__self__, "email_list", email_list)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if phone_extension is not None:
            pulumi.set(__self__, "phone_extension", phone_extension)

    @_builtins.property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[_builtins.str]:
        """
        Contact name of the person.
        """
        return pulumi.get(self, "contact_name")

    @_builtins.property
    @pulumi.getter(name="emailList")
    def email_list(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of Email-ids to be notified about job progress.
        """
        return pulumi.get(self, "email_list")

    @_builtins.property
    @pulumi.getter
    def mobile(self) -> Optional[_builtins.str]:
        """
        Mobile number of the contact person.
        """
        return pulumi.get(self, "mobile")

    @_builtins.property
    @pulumi.getter
    def phone(self) -> Optional[_builtins.str]:
        """
        Phone number of the contact person.
        """
        return pulumi.get(self, "phone")

    @_builtins.property
    @pulumi.getter(name="phoneExtension")
    def phone_extension(self) -> Optional[_builtins.str]:
        """
        Phone extension number of the contact person.
        """
        return pulumi.get(self, "phone_extension")


@pulumi.output_type
class CostInformationResponse(dict):
    """
    Cost information for the product system.
    """
    def __init__(__self__, *,
                 billing_info_url: _builtins.str,
                 billing_meter_details: Sequence['outputs.BillingMeterDetailsResponse']):
        """
        Cost information for the product system.
        :param _builtins.str billing_info_url: Default url to display billing information.
        :param Sequence['BillingMeterDetailsResponse'] billing_meter_details: Details on the various billing aspects for the product system.
        """
        pulumi.set(__self__, "billing_info_url", billing_info_url)
        pulumi.set(__self__, "billing_meter_details", billing_meter_details)

    @_builtins.property
    @pulumi.getter(name="billingInfoUrl")
    def billing_info_url(self) -> _builtins.str:
        """
        Default url to display billing information.
        """
        return pulumi.get(self, "billing_info_url")

    @_builtins.property
    @pulumi.getter(name="billingMeterDetails")
    def billing_meter_details(self) -> Sequence['outputs.BillingMeterDetailsResponse']:
        """
        Details on the various billing aspects for the product system.
        """
        return pulumi.get(self, "billing_meter_details")


@pulumi.output_type
class DescriptionResponse(dict):
    """
    Description related properties of a product system.
    """
    def __init__(__self__, *,
                 attributes: Sequence[_builtins.str],
                 description_type: _builtins.str,
                 keywords: Sequence[_builtins.str],
                 links: Sequence['outputs.LinkResponse'],
                 long_description: _builtins.str,
                 short_description: _builtins.str):
        """
        Description related properties of a product system.
        :param Sequence[_builtins.str] attributes: Attributes for the product system.
        :param _builtins.str description_type: Type of description.
        :param Sequence[_builtins.str] keywords: Keywords for the product system.
        :param Sequence['LinkResponse'] links: Links for the product system.
        :param _builtins.str long_description: Long description of the product system.
        :param _builtins.str short_description: Short description of the product system.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "description_type", description_type)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "long_description", long_description)
        pulumi.set(__self__, "short_description", short_description)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Sequence[_builtins.str]:
        """
        Attributes for the product system.
        """
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="descriptionType")
    def description_type(self) -> _builtins.str:
        """
        Type of description.
        """
        return pulumi.get(self, "description_type")

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Sequence[_builtins.str]:
        """
        Keywords for the product system.
        """
        return pulumi.get(self, "keywords")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.LinkResponse']:
        """
        Links for the product system.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> _builtins.str:
        """
        Long description of the product system.
        """
        return pulumi.get(self, "long_description")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> _builtins.str:
        """
        Short description of the product system.
        """
        return pulumi.get(self, "short_description")


@pulumi.output_type
class DeviceDetailsResponse(dict):
    """
    Device details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displaySerialNumber":
            suggest = "display_serial_number"
        elif key == "managementResourceId":
            suggest = "management_resource_id"
        elif key == "managementResourceTenantId":
            suggest = "management_resource_tenant_id"
        elif key == "provisioningDetails":
            suggest = "provisioning_details"
        elif key == "provisioningSupport":
            suggest = "provisioning_support"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_serial_number: _builtins.str,
                 management_resource_id: _builtins.str,
                 management_resource_tenant_id: _builtins.str,
                 provisioning_details: 'outputs.ProvisioningDetailsResponse',
                 provisioning_support: _builtins.str,
                 serial_number: _builtins.str):
        """
        Device details.
        :param _builtins.str display_serial_number: Device serial number to be displayed.
        :param _builtins.str management_resource_id: Management Resource Id.
        :param _builtins.str management_resource_tenant_id: Management Resource Tenant ID.
        :param 'ProvisioningDetailsResponse' provisioning_details: Provisioning Details for the device.
        :param _builtins.str provisioning_support: Determining nature of provisioning that the configuration supports.
        :param _builtins.str serial_number: Device serial number.
        """
        pulumi.set(__self__, "display_serial_number", display_serial_number)
        pulumi.set(__self__, "management_resource_id", management_resource_id)
        pulumi.set(__self__, "management_resource_tenant_id", management_resource_tenant_id)
        pulumi.set(__self__, "provisioning_details", provisioning_details)
        pulumi.set(__self__, "provisioning_support", provisioning_support)
        pulumi.set(__self__, "serial_number", serial_number)

    @_builtins.property
    @pulumi.getter(name="displaySerialNumber")
    def display_serial_number(self) -> _builtins.str:
        """
        Device serial number to be displayed.
        """
        return pulumi.get(self, "display_serial_number")

    @_builtins.property
    @pulumi.getter(name="managementResourceId")
    def management_resource_id(self) -> _builtins.str:
        """
        Management Resource Id.
        """
        return pulumi.get(self, "management_resource_id")

    @_builtins.property
    @pulumi.getter(name="managementResourceTenantId")
    def management_resource_tenant_id(self) -> _builtins.str:
        """
        Management Resource Tenant ID.
        """
        return pulumi.get(self, "management_resource_tenant_id")

    @_builtins.property
    @pulumi.getter(name="provisioningDetails")
    def provisioning_details(self) -> 'outputs.ProvisioningDetailsResponse':
        """
        Provisioning Details for the device.
        """
        return pulumi.get(self, "provisioning_details")

    @_builtins.property
    @pulumi.getter(name="provisioningSupport")
    def provisioning_support(self) -> _builtins.str:
        """
        Determining nature of provisioning that the configuration supports.
        """
        return pulumi.get(self, "provisioning_support")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        Device serial number.
        """
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class DevicePresenceVerificationDetailsResponse(dict):
    """
    Proof of possession details.
    """
    def __init__(__self__, *,
                 message: _builtins.str,
                 status: _builtins.str):
        """
        Proof of possession details.
        :param _builtins.str message: Insights on current status.
        :param _builtins.str status: Proof of possession status.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Insights on current status.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Proof of possession status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DimensionsResponse(dict):
    """
    Dimensions of a configuration.
    """
    def __init__(__self__, *,
                 depth: _builtins.float,
                 height: _builtins.float,
                 length: _builtins.float,
                 length_height_unit: _builtins.str,
                 weight: _builtins.float,
                 weight_unit: _builtins.str,
                 width: _builtins.float):
        """
        Dimensions of a configuration.
        :param _builtins.float depth: Depth of the device.
        :param _builtins.float height: Height of the device.
        :param _builtins.float length: Length of the device.
        :param _builtins.str length_height_unit: Unit for the dimensions of length, height and width.
        :param _builtins.float weight: Weight of the device.
        :param _builtins.str weight_unit: Unit for the dimensions of weight.
        :param _builtins.float width: Width of the device.
        """
        pulumi.set(__self__, "depth", depth)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "length_height_unit", length_height_unit)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_unit", weight_unit)
        pulumi.set(__self__, "width", width)

    @_builtins.property
    @pulumi.getter
    def depth(self) -> _builtins.float:
        """
        Depth of the device.
        """
        return pulumi.get(self, "depth")

    @_builtins.property
    @pulumi.getter
    def height(self) -> _builtins.float:
        """
        Height of the device.
        """
        return pulumi.get(self, "height")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.float:
        """
        Length of the device.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="lengthHeightUnit")
    def length_height_unit(self) -> _builtins.str:
        """
        Unit for the dimensions of length, height and width.
        """
        return pulumi.get(self, "length_height_unit")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.float:
        """
        Weight of the device.
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> _builtins.str:
        """
        Unit for the dimensions of weight.
        """
        return pulumi.get(self, "weight_unit")

    @_builtins.property
    @pulumi.getter
    def width(self) -> _builtins.float:
        """
        Width of the device.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class DisplayInfoResponse(dict):
    """
    Describes product display information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationDisplayName":
            suggest = "configuration_display_name"
        elif key == "productFamilyDisplayName":
            suggest = "product_family_display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisplayInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisplayInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisplayInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_display_name: _builtins.str,
                 product_family_display_name: _builtins.str):
        """
        Describes product display information.
        :param _builtins.str configuration_display_name: Configuration display name.
        :param _builtins.str product_family_display_name: Product family display name.
        """
        pulumi.set(__self__, "configuration_display_name", configuration_display_name)
        pulumi.set(__self__, "product_family_display_name", product_family_display_name)

    @_builtins.property
    @pulumi.getter(name="configurationDisplayName")
    def configuration_display_name(self) -> _builtins.str:
        """
        Configuration display name.
        """
        return pulumi.get(self, "configuration_display_name")

    @_builtins.property
    @pulumi.getter(name="productFamilyDisplayName")
    def product_family_display_name(self) -> _builtins.str:
        """
        Product family display name.
        """
        return pulumi.get(self, "product_family_display_name")


@pulumi.output_type
class EncryptionPreferencesResponse(dict):
    """
    Preferences related to the double encryption.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "doubleEncryptionStatus":
            suggest = "double_encryption_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 double_encryption_status: Optional[_builtins.str] = None):
        """
        Preferences related to the double encryption.
        :param _builtins.str double_encryption_status: Double encryption status as entered by the customer. It is compulsory to give this parameter if the 'Deny' or 'Disabled' policy is configured.
        """
        if double_encryption_status is not None:
            pulumi.set(__self__, "double_encryption_status", double_encryption_status)

    @_builtins.property
    @pulumi.getter(name="doubleEncryptionStatus")
    def double_encryption_status(self) -> Optional[_builtins.str]:
        """
        Double encryption status as entered by the customer. It is compulsory to give this parameter if the 'Deny' or 'Disabled' policy is configured.
        """
        return pulumi.get(self, "double_encryption_status")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: _builtins.str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param _builtins.str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: _builtins.str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: _builtins.str,
                 target: _builtins.str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param _builtins.str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param _builtins.str message: The error message.
        :param _builtins.str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class FilterablePropertyResponse(dict):
    """
    Different types of filters supported and its values.
    """
    def __init__(__self__, *,
                 supported_values: Sequence[_builtins.str],
                 type: _builtins.str):
        """
        Different types of filters supported and its values.
        :param Sequence[_builtins.str] supported_values: Values to be filtered.
        :param _builtins.str type: Type of product filter.
        """
        pulumi.set(__self__, "supported_values", supported_values)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="supportedValues")
    def supported_values(self) -> Sequence[_builtins.str]:
        """
        Values to be filtered.
        """
        return pulumi.get(self, "supported_values")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of product filter.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ForwardShippingDetailsResponse(dict):
    """
    Forward shipment details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "carrierDisplayName":
            suggest = "carrier_display_name"
        elif key == "carrierName":
            suggest = "carrier_name"
        elif key == "trackingId":
            suggest = "tracking_id"
        elif key == "trackingUrl":
            suggest = "tracking_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardShippingDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardShippingDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardShippingDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 carrier_display_name: _builtins.str,
                 carrier_name: _builtins.str,
                 tracking_id: _builtins.str,
                 tracking_url: _builtins.str):
        """
        Forward shipment details.
        :param _builtins.str carrier_display_name: Carrier Name for display purpose. Not to be used for any processing.
        :param _builtins.str carrier_name: Name of the carrier.
        :param _builtins.str tracking_id: TrackingId of the package.
        :param _builtins.str tracking_url: TrackingUrl of the package.
        """
        pulumi.set(__self__, "carrier_display_name", carrier_display_name)
        pulumi.set(__self__, "carrier_name", carrier_name)
        pulumi.set(__self__, "tracking_id", tracking_id)
        pulumi.set(__self__, "tracking_url", tracking_url)

    @_builtins.property
    @pulumi.getter(name="carrierDisplayName")
    def carrier_display_name(self) -> _builtins.str:
        """
        Carrier Name for display purpose. Not to be used for any processing.
        """
        return pulumi.get(self, "carrier_display_name")

    @_builtins.property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> _builtins.str:
        """
        Name of the carrier.
        """
        return pulumi.get(self, "carrier_name")

    @_builtins.property
    @pulumi.getter(name="trackingId")
    def tracking_id(self) -> _builtins.str:
        """
        TrackingId of the package.
        """
        return pulumi.get(self, "tracking_id")

    @_builtins.property
    @pulumi.getter(name="trackingUrl")
    def tracking_url(self) -> _builtins.str:
        """
        TrackingUrl of the package.
        """
        return pulumi.get(self, "tracking_url")


@pulumi.output_type
class GroupedChildConfigurationsResponse(dict):
    """
    Grouped child configuration object.
    """
    def __init__(__self__, *,
                 category_information: 'outputs.CategoryInformationResponse',
                 child_configurations: Sequence['outputs.ChildConfigurationResponse']):
        """
        Grouped child configuration object.
        :param 'CategoryInformationResponse' category_information: Category information.
        :param Sequence['ChildConfigurationResponse'] child_configurations: List of child configurations.
        """
        pulumi.set(__self__, "category_information", category_information)
        pulumi.set(__self__, "child_configurations", child_configurations)

    @_builtins.property
    @pulumi.getter(name="categoryInformation")
    def category_information(self) -> 'outputs.CategoryInformationResponse':
        """
        Category information.
        """
        return pulumi.get(self, "category_information")

    @_builtins.property
    @pulumi.getter(name="childConfigurations")
    def child_configurations(self) -> Sequence['outputs.ChildConfigurationResponse']:
        """
        List of child configurations.
        """
        return pulumi.get(self, "child_configurations")


@pulumi.output_type
class HierarchyInformationResponse(dict):
    """
    Holds details about product hierarchy information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationIdDisplayName":
            suggest = "configuration_id_display_name"
        elif key == "configurationName":
            suggest = "configuration_name"
        elif key == "productFamilyName":
            suggest = "product_family_name"
        elif key == "productLineName":
            suggest = "product_line_name"
        elif key == "productName":
            suggest = "product_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyInformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyInformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyInformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_id_display_name: Optional[_builtins.str] = None,
                 configuration_name: Optional[_builtins.str] = None,
                 product_family_name: Optional[_builtins.str] = None,
                 product_line_name: Optional[_builtins.str] = None,
                 product_name: Optional[_builtins.str] = None):
        """
        Holds details about product hierarchy information.
        :param _builtins.str configuration_id_display_name: Represents Model Display Name.
        :param _builtins.str configuration_name: Represents configuration name that uniquely identifies configuration.
        :param _builtins.str product_family_name: Represents product family name that uniquely identifies product family.
        :param _builtins.str product_line_name: Represents product line name that uniquely identifies product line.
        :param _builtins.str product_name: Represents product name that uniquely identifies product.
        """
        if configuration_id_display_name is not None:
            pulumi.set(__self__, "configuration_id_display_name", configuration_id_display_name)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if product_family_name is not None:
            pulumi.set(__self__, "product_family_name", product_family_name)
        if product_line_name is not None:
            pulumi.set(__self__, "product_line_name", product_line_name)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)

    @_builtins.property
    @pulumi.getter(name="configurationIdDisplayName")
    def configuration_id_display_name(self) -> Optional[_builtins.str]:
        """
        Represents Model Display Name.
        """
        return pulumi.get(self, "configuration_id_display_name")

    @_builtins.property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[_builtins.str]:
        """
        Represents configuration name that uniquely identifies configuration.
        """
        return pulumi.get(self, "configuration_name")

    @_builtins.property
    @pulumi.getter(name="productFamilyName")
    def product_family_name(self) -> Optional[_builtins.str]:
        """
        Represents product family name that uniquely identifies product family.
        """
        return pulumi.get(self, "product_family_name")

    @_builtins.property
    @pulumi.getter(name="productLineName")
    def product_line_name(self) -> Optional[_builtins.str]:
        """
        Represents product line name that uniquely identifies product line.
        """
        return pulumi.get(self, "product_line_name")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[_builtins.str]:
        """
        Represents product name that uniquely identifies product.
        """
        return pulumi.get(self, "product_name")


@pulumi.output_type
class ImageInformationResponse(dict):
    """
    Image for the product.
    """
    def __init__(__self__, *,
                 image_type: _builtins.str,
                 image_url: _builtins.str):
        """
        Image for the product.
        :param _builtins.str image_type: Type of the image.
        :param _builtins.str image_url: Url of the image.
        """
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "image_url", image_url)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        Type of the image.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> _builtins.str:
        """
        Url of the image.
        """
        return pulumi.get(self, "image_url")


@pulumi.output_type
class LinkResponse(dict):
    """
    Returns link related to the product.
    """
    def __init__(__self__, *,
                 link_type: _builtins.str,
                 link_url: _builtins.str):
        """
        Returns link related to the product.
        :param _builtins.str link_type: Type of link.
        :param _builtins.str link_url: Url of the link.
        """
        pulumi.set(__self__, "link_type", link_type)
        pulumi.set(__self__, "link_url", link_url)

    @_builtins.property
    @pulumi.getter(name="linkType")
    def link_type(self) -> _builtins.str:
        """
        Type of link.
        """
        return pulumi.get(self, "link_type")

    @_builtins.property
    @pulumi.getter(name="linkUrl")
    def link_url(self) -> _builtins.str:
        """
        Url of the link.
        """
        return pulumi.get(self, "link_url")


@pulumi.output_type
class ManagementResourcePreferencesResponse(dict):
    """
    Management resource preference to link device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredManagementResourceId":
            suggest = "preferred_management_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementResourcePreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementResourcePreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementResourcePreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_management_resource_id: Optional[_builtins.str] = None):
        """
        Management resource preference to link device.
        :param _builtins.str preferred_management_resource_id: Customer preferred Management resource ARM ID.
        """
        if preferred_management_resource_id is not None:
            pulumi.set(__self__, "preferred_management_resource_id", preferred_management_resource_id)

    @_builtins.property
    @pulumi.getter(name="preferredManagementResourceId")
    def preferred_management_resource_id(self) -> Optional[_builtins.str]:
        """
        Customer preferred Management resource ARM ID.
        """
        return pulumi.get(self, "preferred_management_resource_id")


@pulumi.output_type
class NotificationPreferenceResponse(dict):
    """
    Notification preference for a job stage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendNotification":
            suggest = "send_notification"
        elif key == "stageName":
            suggest = "stage_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationPreferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationPreferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationPreferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 send_notification: _builtins.bool,
                 stage_name: _builtins.str):
        """
        Notification preference for a job stage.
        :param _builtins.bool send_notification: Notification is required or not.
        :param _builtins.str stage_name: Name of the stage.
        """
        pulumi.set(__self__, "send_notification", send_notification)
        pulumi.set(__self__, "stage_name", stage_name)

    @_builtins.property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> _builtins.bool:
        """
        Notification is required or not.
        """
        return pulumi.get(self, "send_notification")

    @_builtins.property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> _builtins.str:
        """
        Name of the stage.
        """
        return pulumi.get(self, "stage_name")


@pulumi.output_type
class OrderItemDetailsResponse(dict):
    """
    Order item details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cancellationReason":
            suggest = "cancellation_reason"
        elif key == "cancellationStatus":
            suggest = "cancellation_status"
        elif key == "currentStage":
            suggest = "current_stage"
        elif key == "deletionStatus":
            suggest = "deletion_status"
        elif key == "forwardShippingDetails":
            suggest = "forward_shipping_details"
        elif key == "managementRpDetailsList":
            suggest = "management_rp_details_list"
        elif key == "orderItemStageHistory":
            suggest = "order_item_stage_history"
        elif key == "orderItemType":
            suggest = "order_item_type"
        elif key == "productDetails":
            suggest = "product_details"
        elif key == "returnReason":
            suggest = "return_reason"
        elif key == "returnStatus":
            suggest = "return_status"
        elif key == "reverseShippingDetails":
            suggest = "reverse_shipping_details"
        elif key == "notificationEmailList":
            suggest = "notification_email_list"
        elif key == "orderItemMode":
            suggest = "order_item_mode"
        elif key == "siteDetails":
            suggest = "site_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderItemDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderItemDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderItemDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cancellation_reason: _builtins.str,
                 cancellation_status: _builtins.str,
                 current_stage: 'outputs.StageDetailsResponse',
                 deletion_status: _builtins.str,
                 error: 'outputs.ErrorDetailResponse',
                 forward_shipping_details: 'outputs.ForwardShippingDetailsResponse',
                 management_rp_details_list: Sequence['outputs.ResourceProviderDetailsResponse'],
                 order_item_stage_history: Sequence['outputs.StageDetailsResponse'],
                 order_item_type: _builtins.str,
                 product_details: 'outputs.ProductDetailsResponse',
                 return_reason: _builtins.str,
                 return_status: _builtins.str,
                 reverse_shipping_details: 'outputs.ReverseShippingDetailsResponse',
                 notification_email_list: Optional[Sequence[_builtins.str]] = None,
                 order_item_mode: Optional[_builtins.str] = None,
                 preferences: Optional['outputs.PreferencesResponse'] = None,
                 site_details: Optional['outputs.SiteDetailsResponse'] = None):
        """
        Order item details.
        :param _builtins.str cancellation_reason: Cancellation reason.
        :param _builtins.str cancellation_status: Describes whether the order item is cancellable or not.
        :param 'StageDetailsResponse' current_stage: Current Order item Status.
        :param _builtins.str deletion_status: Describes whether the order item is deletable or not.
        :param 'ErrorDetailResponse' error: Top level error for the job.
        :param 'ForwardShippingDetailsResponse' forward_shipping_details: Forward Package Shipping details.
        :param Sequence['ResourceProviderDetailsResponse'] management_rp_details_list: List of parent RP details supported for configuration.
        :param Sequence['StageDetailsResponse'] order_item_stage_history: Order item status history.
        :param _builtins.str order_item_type: Order item type.
        :param 'ProductDetailsResponse' product_details: Represents product details.
        :param _builtins.str return_reason: Return reason.
        :param _builtins.str return_status: Describes whether the order item is returnable or not.
        :param 'ReverseShippingDetailsResponse' reverse_shipping_details: Reverse Package Shipping details.
        :param Sequence[_builtins.str] notification_email_list: Additional notification email list.
        :param _builtins.str order_item_mode: Defines the mode of the Order item.
        :param 'PreferencesResponse' preferences: Customer notification Preferences.
        :param 'SiteDetailsResponse' site_details: Site Related Details.
        """
        pulumi.set(__self__, "cancellation_reason", cancellation_reason)
        pulumi.set(__self__, "cancellation_status", cancellation_status)
        pulumi.set(__self__, "current_stage", current_stage)
        pulumi.set(__self__, "deletion_status", deletion_status)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "forward_shipping_details", forward_shipping_details)
        pulumi.set(__self__, "management_rp_details_list", management_rp_details_list)
        pulumi.set(__self__, "order_item_stage_history", order_item_stage_history)
        pulumi.set(__self__, "order_item_type", order_item_type)
        pulumi.set(__self__, "product_details", product_details)
        pulumi.set(__self__, "return_reason", return_reason)
        pulumi.set(__self__, "return_status", return_status)
        pulumi.set(__self__, "reverse_shipping_details", reverse_shipping_details)
        if notification_email_list is not None:
            pulumi.set(__self__, "notification_email_list", notification_email_list)
        if order_item_mode is not None:
            pulumi.set(__self__, "order_item_mode", order_item_mode)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)
        if site_details is not None:
            pulumi.set(__self__, "site_details", site_details)

    @_builtins.property
    @pulumi.getter(name="cancellationReason")
    def cancellation_reason(self) -> _builtins.str:
        """
        Cancellation reason.
        """
        return pulumi.get(self, "cancellation_reason")

    @_builtins.property
    @pulumi.getter(name="cancellationStatus")
    def cancellation_status(self) -> _builtins.str:
        """
        Describes whether the order item is cancellable or not.
        """
        return pulumi.get(self, "cancellation_status")

    @_builtins.property
    @pulumi.getter(name="currentStage")
    def current_stage(self) -> 'outputs.StageDetailsResponse':
        """
        Current Order item Status.
        """
        return pulumi.get(self, "current_stage")

    @_builtins.property
    @pulumi.getter(name="deletionStatus")
    def deletion_status(self) -> _builtins.str:
        """
        Describes whether the order item is deletable or not.
        """
        return pulumi.get(self, "deletion_status")

    @_builtins.property
    @pulumi.getter
    def error(self) -> 'outputs.ErrorDetailResponse':
        """
        Top level error for the job.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter(name="forwardShippingDetails")
    def forward_shipping_details(self) -> 'outputs.ForwardShippingDetailsResponse':
        """
        Forward Package Shipping details.
        """
        return pulumi.get(self, "forward_shipping_details")

    @_builtins.property
    @pulumi.getter(name="managementRpDetailsList")
    def management_rp_details_list(self) -> Sequence['outputs.ResourceProviderDetailsResponse']:
        """
        List of parent RP details supported for configuration.
        """
        return pulumi.get(self, "management_rp_details_list")

    @_builtins.property
    @pulumi.getter(name="orderItemStageHistory")
    def order_item_stage_history(self) -> Sequence['outputs.StageDetailsResponse']:
        """
        Order item status history.
        """
        return pulumi.get(self, "order_item_stage_history")

    @_builtins.property
    @pulumi.getter(name="orderItemType")
    def order_item_type(self) -> _builtins.str:
        """
        Order item type.
        """
        return pulumi.get(self, "order_item_type")

    @_builtins.property
    @pulumi.getter(name="productDetails")
    def product_details(self) -> 'outputs.ProductDetailsResponse':
        """
        Represents product details.
        """
        return pulumi.get(self, "product_details")

    @_builtins.property
    @pulumi.getter(name="returnReason")
    def return_reason(self) -> _builtins.str:
        """
        Return reason.
        """
        return pulumi.get(self, "return_reason")

    @_builtins.property
    @pulumi.getter(name="returnStatus")
    def return_status(self) -> _builtins.str:
        """
        Describes whether the order item is returnable or not.
        """
        return pulumi.get(self, "return_status")

    @_builtins.property
    @pulumi.getter(name="reverseShippingDetails")
    def reverse_shipping_details(self) -> 'outputs.ReverseShippingDetailsResponse':
        """
        Reverse Package Shipping details.
        """
        return pulumi.get(self, "reverse_shipping_details")

    @_builtins.property
    @pulumi.getter(name="notificationEmailList")
    def notification_email_list(self) -> Optional[Sequence[_builtins.str]]:
        """
        Additional notification email list.
        """
        return pulumi.get(self, "notification_email_list")

    @_builtins.property
    @pulumi.getter(name="orderItemMode")
    def order_item_mode(self) -> Optional[_builtins.str]:
        """
        Defines the mode of the Order item.
        """
        return pulumi.get(self, "order_item_mode")

    @_builtins.property
    @pulumi.getter
    def preferences(self) -> Optional['outputs.PreferencesResponse']:
        """
        Customer notification Preferences.
        """
        return pulumi.get(self, "preferences")

    @_builtins.property
    @pulumi.getter(name="siteDetails")
    def site_details(self) -> Optional['outputs.SiteDetailsResponse']:
        """
        Site Related Details.
        """
        return pulumi.get(self, "site_details")


@pulumi.output_type
class Pav2MeterDetailsResponse(dict):
    """
    Billing type PAV2 meter details.
    """
    def __init__(__self__, *,
                 billing_type: _builtins.str,
                 charging_type: _builtins.str,
                 meter_guid: _builtins.str,
                 multiplier: _builtins.float):
        """
        Billing type PAV2 meter details.
        :param _builtins.str billing_type: Represents billing type.
               Expected value is 'Pav2'.
        :param _builtins.str charging_type: Charging type.
        :param _builtins.str meter_guid: Validation status of requested data center and transport.
        :param _builtins.float multiplier: Billing unit applicable for Pav2 billing.
        """
        pulumi.set(__self__, "billing_type", 'Pav2')
        pulumi.set(__self__, "charging_type", charging_type)
        pulumi.set(__self__, "meter_guid", meter_guid)
        pulumi.set(__self__, "multiplier", multiplier)

    @_builtins.property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> _builtins.str:
        """
        Represents billing type.
        Expected value is 'Pav2'.
        """
        return pulumi.get(self, "billing_type")

    @_builtins.property
    @pulumi.getter(name="chargingType")
    def charging_type(self) -> _builtins.str:
        """
        Charging type.
        """
        return pulumi.get(self, "charging_type")

    @_builtins.property
    @pulumi.getter(name="meterGuid")
    def meter_guid(self) -> _builtins.str:
        """
        Validation status of requested data center and transport.
        """
        return pulumi.get(self, "meter_guid")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.float:
        """
        Billing unit applicable for Pav2 billing.
        """
        return pulumi.get(self, "multiplier")


@pulumi.output_type
class PreferencesResponse(dict):
    """
    Preferences related to the order.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionPreferences":
            suggest = "encryption_preferences"
        elif key == "managementResourcePreferences":
            suggest = "management_resource_preferences"
        elif key == "notificationPreferences":
            suggest = "notification_preferences"
        elif key == "termCommitmentPreferences":
            suggest = "term_commitment_preferences"
        elif key == "transportPreferences":
            suggest = "transport_preferences"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_preferences: Optional['outputs.EncryptionPreferencesResponse'] = None,
                 management_resource_preferences: Optional['outputs.ManagementResourcePreferencesResponse'] = None,
                 notification_preferences: Optional[Sequence['outputs.NotificationPreferenceResponse']] = None,
                 term_commitment_preferences: Optional['outputs.TermCommitmentPreferencesResponse'] = None,
                 transport_preferences: Optional['outputs.TransportPreferencesResponse'] = None):
        """
        Preferences related to the order.
        :param 'EncryptionPreferencesResponse' encryption_preferences: Preferences related to the Encryption.
        :param 'ManagementResourcePreferencesResponse' management_resource_preferences: Preferences related to the Management resource.
        :param Sequence['NotificationPreferenceResponse'] notification_preferences: Notification preferences.
        :param 'TermCommitmentPreferencesResponse' term_commitment_preferences: Preferences related to the Term commitment.
        :param 'TransportPreferencesResponse' transport_preferences: Preferences related to the shipment logistics of the order.
        """
        if encryption_preferences is not None:
            pulumi.set(__self__, "encryption_preferences", encryption_preferences)
        if management_resource_preferences is not None:
            pulumi.set(__self__, "management_resource_preferences", management_resource_preferences)
        if notification_preferences is not None:
            pulumi.set(__self__, "notification_preferences", notification_preferences)
        if term_commitment_preferences is not None:
            pulumi.set(__self__, "term_commitment_preferences", term_commitment_preferences)
        if transport_preferences is not None:
            pulumi.set(__self__, "transport_preferences", transport_preferences)

    @_builtins.property
    @pulumi.getter(name="encryptionPreferences")
    def encryption_preferences(self) -> Optional['outputs.EncryptionPreferencesResponse']:
        """
        Preferences related to the Encryption.
        """
        return pulumi.get(self, "encryption_preferences")

    @_builtins.property
    @pulumi.getter(name="managementResourcePreferences")
    def management_resource_preferences(self) -> Optional['outputs.ManagementResourcePreferencesResponse']:
        """
        Preferences related to the Management resource.
        """
        return pulumi.get(self, "management_resource_preferences")

    @_builtins.property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional[Sequence['outputs.NotificationPreferenceResponse']]:
        """
        Notification preferences.
        """
        return pulumi.get(self, "notification_preferences")

    @_builtins.property
    @pulumi.getter(name="termCommitmentPreferences")
    def term_commitment_preferences(self) -> Optional['outputs.TermCommitmentPreferencesResponse']:
        """
        Preferences related to the Term commitment.
        """
        return pulumi.get(self, "term_commitment_preferences")

    @_builtins.property
    @pulumi.getter(name="transportPreferences")
    def transport_preferences(self) -> Optional['outputs.TransportPreferencesResponse']:
        """
        Preferences related to the shipment logistics of the order.
        """
        return pulumi.get(self, "transport_preferences")


@pulumi.output_type
class ProductDetailsResponse(dict):
    """
    Represents product details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "childConfigurationDeviceDetails":
            suggest = "child_configuration_device_details"
        elif key == "hierarchyInformation":
            suggest = "hierarchy_information"
        elif key == "identificationType":
            suggest = "identification_type"
        elif key == "parentDeviceDetails":
            suggest = "parent_device_details"
        elif key == "productDoubleEncryptionStatus":
            suggest = "product_double_encryption_status"
        elif key == "termCommitmentInformation":
            suggest = "term_commitment_information"
        elif key == "displayInfo":
            suggest = "display_info"
        elif key == "optInAdditionalConfigurations":
            suggest = "opt_in_additional_configurations"
        elif key == "parentProvisioningDetails":
            suggest = "parent_provisioning_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 child_configuration_device_details: Sequence['outputs.ConfigurationDeviceDetailsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 identification_type: _builtins.str,
                 parent_device_details: 'outputs.DeviceDetailsResponse',
                 product_double_encryption_status: _builtins.str,
                 term_commitment_information: 'outputs.TermCommitmentInformationResponse',
                 display_info: Optional['outputs.DisplayInfoResponse'] = None,
                 opt_in_additional_configurations: Optional[Sequence['outputs.AdditionalConfigurationResponse']] = None,
                 parent_provisioning_details: Optional['outputs.ProvisioningDetailsResponse'] = None):
        """
        Represents product details.
        :param Sequence['ConfigurationDeviceDetailsResponse'] child_configuration_device_details: Details of all child configurations that are part of the order item.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy of the product which uniquely identifies the product.
        :param _builtins.str identification_type: Identification type of the configuration.
        :param 'DeviceDetailsResponse' parent_device_details: Device details of the parent configuration.
        :param _builtins.str product_double_encryption_status: Double encryption status of the configuration. Read-only field.
        :param 'TermCommitmentInformationResponse' term_commitment_information: Term Commitment Information of the Device.
        :param 'DisplayInfoResponse' display_info: Display details of the product.
        :param Sequence['AdditionalConfigurationResponse'] opt_in_additional_configurations: List of additional configurations customer wants in the order item apart from the ones included in the base configuration.
        :param 'ProvisioningDetailsResponse' parent_provisioning_details: Device Provisioning Details for Parent.
        """
        pulumi.set(__self__, "child_configuration_device_details", child_configuration_device_details)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "identification_type", identification_type)
        pulumi.set(__self__, "parent_device_details", parent_device_details)
        pulumi.set(__self__, "product_double_encryption_status", product_double_encryption_status)
        pulumi.set(__self__, "term_commitment_information", term_commitment_information)
        if display_info is not None:
            pulumi.set(__self__, "display_info", display_info)
        if opt_in_additional_configurations is not None:
            pulumi.set(__self__, "opt_in_additional_configurations", opt_in_additional_configurations)
        if parent_provisioning_details is not None:
            pulumi.set(__self__, "parent_provisioning_details", parent_provisioning_details)

    @_builtins.property
    @pulumi.getter(name="childConfigurationDeviceDetails")
    def child_configuration_device_details(self) -> Sequence['outputs.ConfigurationDeviceDetailsResponse']:
        """
        Details of all child configurations that are part of the order item.
        """
        return pulumi.get(self, "child_configuration_device_details")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy of the product which uniquely identifies the product.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="identificationType")
    def identification_type(self) -> _builtins.str:
        """
        Identification type of the configuration.
        """
        return pulumi.get(self, "identification_type")

    @_builtins.property
    @pulumi.getter(name="parentDeviceDetails")
    def parent_device_details(self) -> 'outputs.DeviceDetailsResponse':
        """
        Device details of the parent configuration.
        """
        return pulumi.get(self, "parent_device_details")

    @_builtins.property
    @pulumi.getter(name="productDoubleEncryptionStatus")
    def product_double_encryption_status(self) -> _builtins.str:
        """
        Double encryption status of the configuration. Read-only field.
        """
        return pulumi.get(self, "product_double_encryption_status")

    @_builtins.property
    @pulumi.getter(name="termCommitmentInformation")
    def term_commitment_information(self) -> 'outputs.TermCommitmentInformationResponse':
        """
        Term Commitment Information of the Device.
        """
        return pulumi.get(self, "term_commitment_information")

    @_builtins.property
    @pulumi.getter(name="displayInfo")
    def display_info(self) -> Optional['outputs.DisplayInfoResponse']:
        """
        Display details of the product.
        """
        return pulumi.get(self, "display_info")

    @_builtins.property
    @pulumi.getter(name="optInAdditionalConfigurations")
    def opt_in_additional_configurations(self) -> Optional[Sequence['outputs.AdditionalConfigurationResponse']]:
        """
        List of additional configurations customer wants in the order item apart from the ones included in the base configuration.
        """
        return pulumi.get(self, "opt_in_additional_configurations")

    @_builtins.property
    @pulumi.getter(name="parentProvisioningDetails")
    def parent_provisioning_details(self) -> Optional['outputs.ProvisioningDetailsResponse']:
        """
        Device Provisioning Details for Parent.
        """
        return pulumi.get(self, "parent_provisioning_details")


@pulumi.output_type
class ProductFamilyResponse(dict):
    """
    Product Family.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 display_name: _builtins.str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: _builtins.str,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 product_lines: Sequence['outputs.ProductLineResponse'],
                 resource_provider_details: Optional[Sequence['outputs.ResourceProviderDetailsResponse']] = None):
        """
        Product Family.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param _builtins.str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param _builtins.str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param Sequence['ProductLineResponse'] product_lines: List of product lines supported in the product family.
        :param Sequence['ResourceProviderDetailsResponse'] resource_provider_details: Contains details related to resource provider.
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "fulfilled_by", fulfilled_by)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "product_lines", product_lines)
        if resource_provider_details is not None:
            pulumi.set(__self__, "resource_provider_details", resource_provider_details)

    @_builtins.property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @_builtins.property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @_builtins.property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @_builtins.property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> _builtins.str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @_builtins.property
    @pulumi.getter(name="productLines")
    def product_lines(self) -> Sequence['outputs.ProductLineResponse']:
        """
        List of product lines supported in the product family.
        """
        return pulumi.get(self, "product_lines")

    @_builtins.property
    @pulumi.getter(name="resourceProviderDetails")
    def resource_provider_details(self) -> Optional[Sequence['outputs.ResourceProviderDetailsResponse']]:
        """
        Contains details related to resource provider.
        """
        return pulumi.get(self, "resource_provider_details")


@pulumi.output_type
class ProductLineResponse(dict):
    """
    Product line.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 display_name: _builtins.str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: _builtins.str,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 products: Sequence['outputs.ProductResponse']):
        """
        Product line.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param _builtins.str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param _builtins.str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param Sequence['ProductResponse'] products: List of products in the product line.
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "fulfilled_by", fulfilled_by)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @_builtins.property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @_builtins.property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @_builtins.property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> _builtins.str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @_builtins.property
    @pulumi.getter
    def products(self) -> Sequence['outputs.ProductResponse']:
        """
        List of products in the product line.
        """
        return pulumi.get(self, "products")


@pulumi.output_type
class ProductResponse(dict):
    """
    Represents a product.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 configurations: Sequence['outputs.ConfigurationResponse'],
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 display_name: _builtins.str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: _builtins.str,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse']):
        """
        Represents a product.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param Sequence['ConfigurationResponse'] configurations: List of configurations for the product.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param _builtins.str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param _builtins.str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "fulfilled_by", fulfilled_by)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)

    @_builtins.property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.ConfigurationResponse']:
        """
        List of configurations for the product.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @_builtins.property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @_builtins.property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> _builtins.str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @_builtins.property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @_builtins.property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")


@pulumi.output_type
class ProvisioningDetailsResponse(dict):
    """
    Details Related To Provision Resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqueDeviceIdentifier":
            suggest = "unique_device_identifier"
        elif key == "autoProvisioningStatus":
            suggest = "auto_provisioning_status"
        elif key == "devicePresenceVerification":
            suggest = "device_presence_verification"
        elif key == "managementResourceArmId":
            suggest = "management_resource_arm_id"
        elif key == "provisioningArmId":
            suggest = "provisioning_arm_id"
        elif key == "provisioningEndPoint":
            suggest = "provisioning_end_point"
        elif key == "readyToConnectArmId":
            suggest = "ready_to_connect_arm_id"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "vendorName":
            suggest = "vendor_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisioningDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisioningDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisioningDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unique_device_identifier: _builtins.str,
                 auto_provisioning_status: Optional[_builtins.str] = None,
                 device_presence_verification: Optional['outputs.DevicePresenceVerificationDetailsResponse'] = None,
                 management_resource_arm_id: Optional[_builtins.str] = None,
                 provisioning_arm_id: Optional[_builtins.str] = None,
                 provisioning_end_point: Optional[_builtins.str] = None,
                 quantity: Optional[_builtins.int] = None,
                 ready_to_connect_arm_id: Optional[_builtins.str] = None,
                 serial_number: Optional[_builtins.str] = None,
                 vendor_name: Optional[_builtins.str] = None):
        """
        Details Related To Provision Resource.
        :param _builtins.str unique_device_identifier: Unique Identity for a Device.
        :param _builtins.str auto_provisioning_status: Auto Provisioning Details.
        :param 'DevicePresenceVerificationDetailsResponse' device_presence_verification: Proof of possession details.
        :param _builtins.str management_resource_arm_id: Management Resource ArmId.
        :param _builtins.str provisioning_arm_id: Provisioning Resource Arm ID.
        :param _builtins.str provisioning_end_point: Provisioning End Point.
        :param _builtins.int quantity: Quantity of the devices.
        :param _builtins.str ready_to_connect_arm_id: Arc Enabled Resource Arm id.
        :param _builtins.str serial_number: Serial Number for the Device.
        :param _builtins.str vendor_name: Vendor Name for the Device , (for 1P devices - Microsoft).
        """
        pulumi.set(__self__, "unique_device_identifier", unique_device_identifier)
        if auto_provisioning_status is not None:
            pulumi.set(__self__, "auto_provisioning_status", auto_provisioning_status)
        if device_presence_verification is not None:
            pulumi.set(__self__, "device_presence_verification", device_presence_verification)
        if management_resource_arm_id is not None:
            pulumi.set(__self__, "management_resource_arm_id", management_resource_arm_id)
        if provisioning_arm_id is not None:
            pulumi.set(__self__, "provisioning_arm_id", provisioning_arm_id)
        if provisioning_end_point is not None:
            pulumi.set(__self__, "provisioning_end_point", provisioning_end_point)
        if quantity is None:
            quantity = 0
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if ready_to_connect_arm_id is not None:
            pulumi.set(__self__, "ready_to_connect_arm_id", ready_to_connect_arm_id)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @_builtins.property
    @pulumi.getter(name="uniqueDeviceIdentifier")
    def unique_device_identifier(self) -> _builtins.str:
        """
        Unique Identity for a Device.
        """
        return pulumi.get(self, "unique_device_identifier")

    @_builtins.property
    @pulumi.getter(name="autoProvisioningStatus")
    def auto_provisioning_status(self) -> Optional[_builtins.str]:
        """
        Auto Provisioning Details.
        """
        return pulumi.get(self, "auto_provisioning_status")

    @_builtins.property
    @pulumi.getter(name="devicePresenceVerification")
    def device_presence_verification(self) -> Optional['outputs.DevicePresenceVerificationDetailsResponse']:
        """
        Proof of possession details.
        """
        return pulumi.get(self, "device_presence_verification")

    @_builtins.property
    @pulumi.getter(name="managementResourceArmId")
    def management_resource_arm_id(self) -> Optional[_builtins.str]:
        """
        Management Resource ArmId.
        """
        return pulumi.get(self, "management_resource_arm_id")

    @_builtins.property
    @pulumi.getter(name="provisioningArmId")
    def provisioning_arm_id(self) -> Optional[_builtins.str]:
        """
        Provisioning Resource Arm ID.
        """
        return pulumi.get(self, "provisioning_arm_id")

    @_builtins.property
    @pulumi.getter(name="provisioningEndPoint")
    def provisioning_end_point(self) -> Optional[_builtins.str]:
        """
        Provisioning End Point.
        """
        return pulumi.get(self, "provisioning_end_point")

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> Optional[_builtins.int]:
        """
        Quantity of the devices.
        """
        return pulumi.get(self, "quantity")

    @_builtins.property
    @pulumi.getter(name="readyToConnectArmId")
    def ready_to_connect_arm_id(self) -> Optional[_builtins.str]:
        """
        Arc Enabled Resource Arm id.
        """
        return pulumi.get(self, "ready_to_connect_arm_id")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[_builtins.str]:
        """
        Serial Number for the Device.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[_builtins.str]:
        """
        Vendor Name for the Device , (for 1P devices - Microsoft).
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class PurchaseMeterDetailsResponse(dict):
    """
    Billing type Purchase meter details.
    """
    def __init__(__self__, *,
                 billing_type: _builtins.str,
                 charging_type: _builtins.str,
                 multiplier: _builtins.float,
                 product_id: _builtins.str,
                 sku_id: _builtins.str,
                 term_id: _builtins.str):
        """
        Billing type Purchase meter details.
        :param _builtins.str billing_type: Represents billing type.
               Expected value is 'Purchase'.
        :param _builtins.str charging_type: Charging type.
        :param _builtins.float multiplier: Billing unit applicable for Pav2 billing.
        :param _builtins.str product_id: Product Id.
        :param _builtins.str sku_id: Sku Id.
        :param _builtins.str term_id: Term Id.
        """
        pulumi.set(__self__, "billing_type", 'Purchase')
        pulumi.set(__self__, "charging_type", charging_type)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "sku_id", sku_id)
        pulumi.set(__self__, "term_id", term_id)

    @_builtins.property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> _builtins.str:
        """
        Represents billing type.
        Expected value is 'Purchase'.
        """
        return pulumi.get(self, "billing_type")

    @_builtins.property
    @pulumi.getter(name="chargingType")
    def charging_type(self) -> _builtins.str:
        """
        Charging type.
        """
        return pulumi.get(self, "charging_type")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.float:
        """
        Billing unit applicable for Pav2 billing.
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> _builtins.str:
        """
        Product Id.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="skuId")
    def sku_id(self) -> _builtins.str:
        """
        Sku Id.
        """
        return pulumi.get(self, "sku_id")

    @_builtins.property
    @pulumi.getter(name="termId")
    def term_id(self) -> _builtins.str:
        """
        Term Id.
        """
        return pulumi.get(self, "term_id")


@pulumi.output_type
class ResourceIdentityResponse(dict):
    """
    Msi identity details of the resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: Optional[_builtins.str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Msi identity details of the resource
        :param _builtins.str principal_id: Service Principal Id backing the Msi
        :param _builtins.str tenant_id: Home Tenant Id
        :param _builtins.str type: Identity type
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: User Assigned Identities
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is None:
            type = 'None'
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        Service Principal Id backing the Msi
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        Home Tenant Id
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Identity type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        User Assigned Identities
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ResourceProviderDetailsResponse(dict):
    """
    Management RP details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceProviderNamespace":
            suggest = "resource_provider_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_provider_namespace: _builtins.str):
        """
        Management RP details.
        :param _builtins.str resource_provider_namespace: Resource provider namespace.
        """
        pulumi.set(__self__, "resource_provider_namespace", resource_provider_namespace)

    @_builtins.property
    @pulumi.getter(name="resourceProviderNamespace")
    def resource_provider_namespace(self) -> _builtins.str:
        """
        Resource provider namespace.
        """
        return pulumi.get(self, "resource_provider_namespace")


@pulumi.output_type
class ReverseShippingDetailsResponse(dict):
    """
    Reverse shipment details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "carrierDisplayName":
            suggest = "carrier_display_name"
        elif key == "carrierName":
            suggest = "carrier_name"
        elif key == "sasKeyForLabel":
            suggest = "sas_key_for_label"
        elif key == "trackingId":
            suggest = "tracking_id"
        elif key == "trackingUrl":
            suggest = "tracking_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReverseShippingDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReverseShippingDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReverseShippingDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 carrier_display_name: _builtins.str,
                 carrier_name: _builtins.str,
                 sas_key_for_label: _builtins.str,
                 tracking_id: _builtins.str,
                 tracking_url: _builtins.str):
        """
        Reverse shipment details.
        :param _builtins.str carrier_display_name: Carrier Name for display purpose. Not to be used for any processing.
        :param _builtins.str carrier_name: Name of the carrier.
        :param _builtins.str sas_key_for_label: SAS key to download the reverse shipment label of the package.
        :param _builtins.str tracking_id: TrackingId of the package.
        :param _builtins.str tracking_url: TrackingUrl of the package.
        """
        pulumi.set(__self__, "carrier_display_name", carrier_display_name)
        pulumi.set(__self__, "carrier_name", carrier_name)
        pulumi.set(__self__, "sas_key_for_label", sas_key_for_label)
        pulumi.set(__self__, "tracking_id", tracking_id)
        pulumi.set(__self__, "tracking_url", tracking_url)

    @_builtins.property
    @pulumi.getter(name="carrierDisplayName")
    def carrier_display_name(self) -> _builtins.str:
        """
        Carrier Name for display purpose. Not to be used for any processing.
        """
        return pulumi.get(self, "carrier_display_name")

    @_builtins.property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> _builtins.str:
        """
        Name of the carrier.
        """
        return pulumi.get(self, "carrier_name")

    @_builtins.property
    @pulumi.getter(name="sasKeyForLabel")
    def sas_key_for_label(self) -> _builtins.str:
        """
        SAS key to download the reverse shipment label of the package.
        """
        return pulumi.get(self, "sas_key_for_label")

    @_builtins.property
    @pulumi.getter(name="trackingId")
    def tracking_id(self) -> _builtins.str:
        """
        TrackingId of the package.
        """
        return pulumi.get(self, "tracking_id")

    @_builtins.property
    @pulumi.getter(name="trackingUrl")
    def tracking_url(self) -> _builtins.str:
        """
        TrackingUrl of the package.
        """
        return pulumi.get(self, "tracking_url")


@pulumi.output_type
class ShippingAddressResponse(dict):
    """
    Shipping address where customer wishes to receive the device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressType":
            suggest = "address_type"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "stateOrProvince":
            suggest = "state_or_province"
        elif key == "streetAddress1":
            suggest = "street_address1"
        elif key == "streetAddress2":
            suggest = "street_address2"
        elif key == "streetAddress3":
            suggest = "street_address3"
        elif key == "zipExtendedCode":
            suggest = "zip_extended_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShippingAddressResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShippingAddressResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShippingAddressResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: _builtins.str,
                 address_type: Optional[_builtins.str] = None,
                 city: Optional[_builtins.str] = None,
                 company_name: Optional[_builtins.str] = None,
                 postal_code: Optional[_builtins.str] = None,
                 state_or_province: Optional[_builtins.str] = None,
                 street_address1: Optional[_builtins.str] = None,
                 street_address2: Optional[_builtins.str] = None,
                 street_address3: Optional[_builtins.str] = None,
                 zip_extended_code: Optional[_builtins.str] = None):
        """
        Shipping address where customer wishes to receive the device.
        :param _builtins.str country: Name of the Country.
        :param _builtins.str address_type: Type of address.
        :param _builtins.str city: Name of the City.
        :param _builtins.str company_name: Name of the company.
        :param _builtins.str postal_code: Postal code.
        :param _builtins.str state_or_province: Name of the State or Province.
        :param _builtins.str street_address1: Street Address line 1.
        :param _builtins.str street_address2: Street Address line 2.
        :param _builtins.str street_address3: Street Address line 3.
        :param _builtins.str zip_extended_code: Extended Zip Code.
        """
        pulumi.set(__self__, "country", country)
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)
        if street_address1 is not None:
            pulumi.set(__self__, "street_address1", street_address1)
        if street_address2 is not None:
            pulumi.set(__self__, "street_address2", street_address2)
        if street_address3 is not None:
            pulumi.set(__self__, "street_address3", street_address3)
        if zip_extended_code is not None:
            pulumi.set(__self__, "zip_extended_code", zip_extended_code)

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Name of the Country.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[_builtins.str]:
        """
        Type of address.
        """
        return pulumi.get(self, "address_type")

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        Name of the City.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[_builtins.str]:
        """
        Name of the company.
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[_builtins.str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[_builtins.str]:
        """
        Name of the State or Province.
        """
        return pulumi.get(self, "state_or_province")

    @_builtins.property
    @pulumi.getter(name="streetAddress1")
    def street_address1(self) -> Optional[_builtins.str]:
        """
        Street Address line 1.
        """
        return pulumi.get(self, "street_address1")

    @_builtins.property
    @pulumi.getter(name="streetAddress2")
    def street_address2(self) -> Optional[_builtins.str]:
        """
        Street Address line 2.
        """
        return pulumi.get(self, "street_address2")

    @_builtins.property
    @pulumi.getter(name="streetAddress3")
    def street_address3(self) -> Optional[_builtins.str]:
        """
        Street Address line 3.
        """
        return pulumi.get(self, "street_address3")

    @_builtins.property
    @pulumi.getter(name="zipExtendedCode")
    def zip_extended_code(self) -> Optional[_builtins.str]:
        """
        Extended Zip Code.
        """
        return pulumi.get(self, "zip_extended_code")


@pulumi.output_type
class SiteDetailsResponse(dict):
    """
    Represents Site Related Details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteId":
            suggest = "site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 site_id: _builtins.str):
        """
        Represents Site Related Details.
        :param _builtins.str site_id: Unique Id, Identifying A Site.
        """
        pulumi.set(__self__, "site_id", site_id)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Unique Id, Identifying A Site.
        """
        return pulumi.get(self, "site_id")


@pulumi.output_type
class SpecificationResponse(dict):
    """
    Specification of the configurations.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        Specification of the configurations.
        :param _builtins.str name: Name of the specification.
        :param _builtins.str value: Value of the specification.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the specification.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the specification.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StageDetailsResponse(dict):
    """
    Resource stage details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "stageName":
            suggest = "stage_name"
        elif key == "stageStatus":
            suggest = "stage_status"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StageDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StageDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StageDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: _builtins.str,
                 stage_name: _builtins.str,
                 stage_status: _builtins.str,
                 start_time: _builtins.str):
        """
        Resource stage details.
        :param _builtins.str display_name: Display name of the resource stage.
        :param _builtins.str stage_name: Stage name.
        :param _builtins.str stage_status: Stage status.
        :param _builtins.str start_time: Stage start time.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "stage_name", stage_name)
        pulumi.set(__self__, "stage_status", stage_status)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display name of the resource stage.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> _builtins.str:
        """
        Stage name.
        """
        return pulumi.get(self, "stage_name")

    @_builtins.property
    @pulumi.getter(name="stageStatus")
    def stage_status(self) -> _builtins.str:
        """
        Stage status.
        """
        return pulumi.get(self, "stage_status")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Stage start time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TermCommitmentInformationResponse(dict):
    """
    Term Commitment Information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pendingDaysForTerm":
            suggest = "pending_days_for_term"
        elif key == "termCommitmentType":
            suggest = "term_commitment_type"
        elif key == "termCommitmentTypeDuration":
            suggest = "term_commitment_type_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TermCommitmentInformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TermCommitmentInformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TermCommitmentInformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pending_days_for_term: Optional[_builtins.int] = None,
                 term_commitment_type: _builtins.str,
                 term_commitment_type_duration: _builtins.str):
        """
        Term Commitment Information.
        :param _builtins.int pending_days_for_term: Number of Days Pending for Term Commitment
        :param _builtins.str term_commitment_type: Term Commitment Type
        :param _builtins.str term_commitment_type_duration: Term Commitment Duration. Currently Supporting P365D, P1095D
        """
        if pending_days_for_term is None:
            pending_days_for_term = 0
        pulumi.set(__self__, "pending_days_for_term", pending_days_for_term)
        pulumi.set(__self__, "term_commitment_type", term_commitment_type)
        pulumi.set(__self__, "term_commitment_type_duration", term_commitment_type_duration)

    @_builtins.property
    @pulumi.getter(name="pendingDaysForTerm")
    def pending_days_for_term(self) -> _builtins.int:
        """
        Number of Days Pending for Term Commitment
        """
        return pulumi.get(self, "pending_days_for_term")

    @_builtins.property
    @pulumi.getter(name="termCommitmentType")
    def term_commitment_type(self) -> _builtins.str:
        """
        Term Commitment Type
        """
        return pulumi.get(self, "term_commitment_type")

    @_builtins.property
    @pulumi.getter(name="termCommitmentTypeDuration")
    def term_commitment_type_duration(self) -> _builtins.str:
        """
        Term Commitment Duration. Currently Supporting P365D, P1095D
        """
        return pulumi.get(self, "term_commitment_type_duration")


@pulumi.output_type
class TermCommitmentPreferencesResponse(dict):
    """
    Term Commitment preference received from customer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredTermCommitmentType":
            suggest = "preferred_term_commitment_type"
        elif key == "preferredTermCommitmentDuration":
            suggest = "preferred_term_commitment_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TermCommitmentPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TermCommitmentPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TermCommitmentPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_term_commitment_type: _builtins.str,
                 preferred_term_commitment_duration: Optional[_builtins.str] = None):
        """
        Term Commitment preference received from customer.
        :param _builtins.str preferred_term_commitment_type: Term Commitment Type
        :param _builtins.str preferred_term_commitment_duration: Customer preferred Term Duration.
        """
        pulumi.set(__self__, "preferred_term_commitment_type", preferred_term_commitment_type)
        if preferred_term_commitment_duration is not None:
            pulumi.set(__self__, "preferred_term_commitment_duration", preferred_term_commitment_duration)

    @_builtins.property
    @pulumi.getter(name="preferredTermCommitmentType")
    def preferred_term_commitment_type(self) -> _builtins.str:
        """
        Term Commitment Type
        """
        return pulumi.get(self, "preferred_term_commitment_type")

    @_builtins.property
    @pulumi.getter(name="preferredTermCommitmentDuration")
    def preferred_term_commitment_duration(self) -> Optional[_builtins.str]:
        """
        Customer preferred Term Duration.
        """
        return pulumi.get(self, "preferred_term_commitment_duration")


@pulumi.output_type
class TermTypeDetailsResponse(dict):
    """
    Holds details about term type and duration.
    """
    def __init__(__self__, *,
                 term_type: _builtins.str,
                 term_type_duration: _builtins.str):
        """
        Holds details about term type and duration.
        :param _builtins.str term_type: Term Commitment Type
        :param _builtins.str term_type_duration: Duration for the term type.
        """
        pulumi.set(__self__, "term_type", term_type)
        pulumi.set(__self__, "term_type_duration", term_type_duration)

    @_builtins.property
    @pulumi.getter(name="termType")
    def term_type(self) -> _builtins.str:
        """
        Term Commitment Type
        """
        return pulumi.get(self, "term_type")

    @_builtins.property
    @pulumi.getter(name="termTypeDuration")
    def term_type_duration(self) -> _builtins.str:
        """
        Duration for the term type.
        """
        return pulumi.get(self, "term_type_duration")


@pulumi.output_type
class TransportPreferencesResponse(dict):
    """
    Preferences related to the shipment logistics of the sku.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredShipmentType":
            suggest = "preferred_shipment_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_shipment_type: _builtins.str):
        """
        Preferences related to the shipment logistics of the sku.
        :param _builtins.str preferred_shipment_type: Indicates Shipment Logistics type that the customer preferred.
        """
        pulumi.set(__self__, "preferred_shipment_type", preferred_shipment_type)

    @_builtins.property
    @pulumi.getter(name="preferredShipmentType")
    def preferred_shipment_type(self) -> _builtins.str:
        """
        Indicates Shipment Logistics type that the customer preferred.
        """
        return pulumi.get(self, "preferred_shipment_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        User assigned identity properties
        :param _builtins.str client_id: The client ID of the assigned identity.
        :param _builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


