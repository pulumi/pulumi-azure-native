# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *

__all__ = [
    'AddressDetailsResponse',
    'AddressPropertiesResponse',
    'AvailabilityInformationResponseResult',
    'BillingMeterDetailsResponseResult',
    'ConfigurationResponseResult',
    'ContactDetailsResponse',
    'CostInformationResponseResult',
    'DescriptionResponseResult',
    'DeviceDetailsResponse',
    'EncryptionPreferencesResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'FilterablePropertyResponseResult',
    'HierarchyInformationResponse',
    'ImageInformationResponseResult',
    'LinkResponseResult',
    'ManagementResourceDetailsResponse',
    'MeterDetailsResponseResult',
    'NotificationPreferenceResponse',
    'OrderItemDetailsResponse',
    'PreferencesResponse',
    'ProductDetailsResponse',
    'ProductFamilyResponseResult',
    'ProductLineResponseResult',
    'ProductResponseResult',
    'ShippingAddressResponse',
    'ShippingDetailsResponse',
    'SpecificationResponseResult',
    'StageDetailsResponse',
    'SystemDataResponse',
    'TransportPreferencesResponse',
]

@pulumi.output_type
class AddressDetailsResponse(dict):
    """
    Address details for an order.
    """
    def __init__(__self__, *,
                 forward_address: 'outputs.AddressPropertiesResponse',
                 return_address: 'outputs.AddressPropertiesResponse'):
        """
        Address details for an order.
        :param 'AddressPropertiesResponseArgs' forward_address: Customer address and contact details. It should be address resource
        :param 'AddressPropertiesResponseArgs' return_address: Return shipping address
        """
        pulumi.set(__self__, "forward_address", forward_address)
        pulumi.set(__self__, "return_address", return_address)

    @property
    @pulumi.getter(name="forwardAddress")
    def forward_address(self) -> 'outputs.AddressPropertiesResponse':
        """
        Customer address and contact details. It should be address resource
        """
        return pulumi.get(self, "forward_address")

    @property
    @pulumi.getter(name="returnAddress")
    def return_address(self) -> 'outputs.AddressPropertiesResponse':
        """
        Return shipping address
        """
        return pulumi.get(self, "return_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressPropertiesResponse(dict):
    """
    Address Properties
    """
    def __init__(__self__, *,
                 contact_details: 'outputs.ContactDetailsResponse',
                 shipping_address: Optional['outputs.ShippingAddressResponse'] = None):
        """
        Address Properties
        :param 'ContactDetailsResponseArgs' contact_details: Contact details for the address
        :param 'ShippingAddressResponseArgs' shipping_address: Shipping details for the address
        """
        pulumi.set(__self__, "contact_details", contact_details)
        if shipping_address is not None:
            pulumi.set(__self__, "shipping_address", shipping_address)

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> 'outputs.ContactDetailsResponse':
        """
        Contact details for the address
        """
        return pulumi.get(self, "contact_details")

    @property
    @pulumi.getter(name="shippingAddress")
    def shipping_address(self) -> Optional['outputs.ShippingAddressResponse']:
        """
        Shipping details for the address
        """
        return pulumi.get(self, "shipping_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AvailabilityInformationResponseResult(dict):
    """
    Availability information of a product system.
    """
    def __init__(__self__, *,
                 availability_stage: str,
                 disabled_reason: str,
                 disabled_reason_message: str):
        """
        Availability information of a product system.
        :param str availability_stage: Current availability stage of the product. Availability stage
        :param str disabled_reason: Reason why the product is disabled.
        :param str disabled_reason_message: Message for why the product is disabled.
        """
        pulumi.set(__self__, "availability_stage", availability_stage)
        pulumi.set(__self__, "disabled_reason", disabled_reason)
        pulumi.set(__self__, "disabled_reason_message", disabled_reason_message)

    @property
    @pulumi.getter(name="availabilityStage")
    def availability_stage(self) -> str:
        """
        Current availability stage of the product. Availability stage
        """
        return pulumi.get(self, "availability_stage")

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> str:
        """
        Reason why the product is disabled.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter(name="disabledReasonMessage")
    def disabled_reason_message(self) -> str:
        """
        Message for why the product is disabled.
        """
        return pulumi.get(self, "disabled_reason_message")


@pulumi.output_type
class BillingMeterDetailsResponseResult(dict):
    """
    Holds billing meter details for each type of billing
    """
    def __init__(__self__, *,
                 frequency: str,
                 meter_details: 'outputs.MeterDetailsResponseResult',
                 metering_type: str,
                 name: str):
        """
        Holds billing meter details for each type of billing
        :param str frequency: Frequency of recurrence
        :param 'MeterDetailsResponseArgs' meter_details: Represents MeterDetails
        :param str metering_type: Represents Metering type (eg one-time or recurrent)
        :param str name: Represents Billing type name
        """
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "meter_details", meter_details)
        pulumi.set(__self__, "metering_type", metering_type)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        Frequency of recurrence
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="meterDetails")
    def meter_details(self) -> 'outputs.MeterDetailsResponseResult':
        """
        Represents MeterDetails
        """
        return pulumi.get(self, "meter_details")

    @property
    @pulumi.getter(name="meteringType")
    def metering_type(self) -> str:
        """
        Represents Metering type (eg one-time or recurrent)
        """
        return pulumi.get(self, "metering_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Represents Billing type name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConfigurationResponseResult(dict):
    """
    Configuration object.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponseResult',
                 cost_information: 'outputs.CostInformationResponseResult',
                 description: 'outputs.DescriptionResponseResult',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponseResult'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponseResult'],
                 specifications: Sequence['outputs.SpecificationResponseResult']):
        """
        Configuration object.
        :param 'AvailabilityInformationResponseArgs' availability_information: Availability information of the product system.
        :param 'CostInformationResponseArgs' cost_information: Cost information for the product system.
        :param 'DescriptionResponseArgs' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponseArgs'] filterable_properties: list of filters supported for a product
        :param 'HierarchyInformationResponseArgs' hierarchy_information: Hierarchy information of the product system.
        :param Sequence['ImageInformationResponseArgs'] image_information: Image information for the product system.
        :param Sequence['SpecificationResponseArgs'] specifications: Specifications of the configuration
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "specifications", specifications)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponseResult':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponseResult':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponseResult':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponseResult']:
        """
        list of filters supported for a product
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of the product system.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponseResult']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.SpecificationResponseResult']:
        """
        Specifications of the configuration
        """
        return pulumi.get(self, "specifications")


@pulumi.output_type
class ContactDetailsResponse(dict):
    """
    Contact Details.
    """
    def __init__(__self__, *,
                 contact_name: str,
                 email_list: Sequence[str],
                 phone: str,
                 mobile: Optional[str] = None,
                 phone_extension: Optional[str] = None):
        """
        Contact Details.
        :param str contact_name: Contact name of the person.
        :param Sequence[str] email_list: List of Email-ids to be notified about job progress.
        :param str phone: Phone number of the contact person.
        :param str mobile: Mobile number of the contact person.
        :param str phone_extension: Phone extension number of the contact person.
        """
        pulumi.set(__self__, "contact_name", contact_name)
        pulumi.set(__self__, "email_list", email_list)
        pulumi.set(__self__, "phone", phone)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if phone_extension is not None:
            pulumi.set(__self__, "phone_extension", phone_extension)

    @property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> str:
        """
        Contact name of the person.
        """
        return pulumi.get(self, "contact_name")

    @property
    @pulumi.getter(name="emailList")
    def email_list(self) -> Sequence[str]:
        """
        List of Email-ids to be notified about job progress.
        """
        return pulumi.get(self, "email_list")

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        Phone number of the contact person.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def mobile(self) -> Optional[str]:
        """
        Mobile number of the contact person.
        """
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter(name="phoneExtension")
    def phone_extension(self) -> Optional[str]:
        """
        Phone extension number of the contact person.
        """
        return pulumi.get(self, "phone_extension")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CostInformationResponseResult(dict):
    """
    Cost information for the product system
    """
    def __init__(__self__, *,
                 billing_info_url: str,
                 billing_meter_details: Sequence['outputs.BillingMeterDetailsResponseResult']):
        """
        Cost information for the product system
        :param str billing_info_url: Default url to display billing information
        :param Sequence['BillingMeterDetailsResponseArgs'] billing_meter_details: Details on the various billing aspects for the product system.
        """
        pulumi.set(__self__, "billing_info_url", billing_info_url)
        pulumi.set(__self__, "billing_meter_details", billing_meter_details)

    @property
    @pulumi.getter(name="billingInfoUrl")
    def billing_info_url(self) -> str:
        """
        Default url to display billing information
        """
        return pulumi.get(self, "billing_info_url")

    @property
    @pulumi.getter(name="billingMeterDetails")
    def billing_meter_details(self) -> Sequence['outputs.BillingMeterDetailsResponseResult']:
        """
        Details on the various billing aspects for the product system.
        """
        return pulumi.get(self, "billing_meter_details")


@pulumi.output_type
class DescriptionResponseResult(dict):
    """
    Description related properties of a product system.
    """
    def __init__(__self__, *,
                 attributes: Sequence[str],
                 description_type: str,
                 keywords: Sequence[str],
                 links: Sequence['outputs.LinkResponseResult'],
                 long_description: str,
                 short_description: str):
        """
        Description related properties of a product system.
        :param Sequence[str] attributes: Attributes for the product system.
        :param str description_type: Type of description.
        :param Sequence[str] keywords: Keywords for the product system.
        :param Sequence['LinkResponseArgs'] links: Links for the product system.
        :param str long_description: Long description of the product system.
        :param str short_description: Short description of the product system.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "description_type", description_type)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "long_description", long_description)
        pulumi.set(__self__, "short_description", short_description)

    @property
    @pulumi.getter
    def attributes(self) -> Sequence[str]:
        """
        Attributes for the product system.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="descriptionType")
    def description_type(self) -> str:
        """
        Type of description.
        """
        return pulumi.get(self, "description_type")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[str]:
        """
        Keywords for the product system.
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.LinkResponseResult']:
        """
        Links for the product system.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> str:
        """
        Long description of the product system.
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> str:
        """
        Short description of the product system.
        """
        return pulumi.get(self, "short_description")


@pulumi.output_type
class DeviceDetailsResponse(dict):
    """
    Device details.
    """
    def __init__(__self__, *,
                 device_history: Sequence[str],
                 serial_number: str):
        """
        Device details.
        :param Sequence[str] device_history: Device history
        :param str serial_number: device serial number
        """
        pulumi.set(__self__, "device_history", device_history)
        pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="deviceHistory")
    def device_history(self) -> Sequence[str]:
        """
        Device history
        """
        return pulumi.get(self, "device_history")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        device serial number
        """
        return pulumi.get(self, "serial_number")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EncryptionPreferencesResponse(dict):
    """
    Preferences related to the double encryption
    """
    def __init__(__self__, *,
                 double_encryption_status: Optional[str] = None):
        """
        Preferences related to the double encryption
        :param str double_encryption_status: Defines secondary layer of software-based encryption enablement.
        """
        if double_encryption_status is not None:
            pulumi.set(__self__, "double_encryption_status", double_encryption_status)

    @property
    @pulumi.getter(name="doubleEncryptionStatus")
    def double_encryption_status(self) -> Optional[str]:
        """
        Defines secondary layer of software-based encryption enablement.
        """
        return pulumi.get(self, "double_encryption_status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: str,
                 target: str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponseArgs'] additional_info: The error additional info.
        :param str code: The error code.
        :param Sequence['ErrorDetailResponseArgs'] details: The error details.
        :param str message: The error message.
        :param str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The error target.
        """
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FilterablePropertyResponseResult(dict):
    """
    Class defining the list of filter values on a filter type as part of configuration request.
    """
    def __init__(__self__, *,
                 supported_values: Sequence[str],
                 type: str):
        """
        Class defining the list of filter values on a filter type as part of configuration request.
        :param Sequence[str] supported_values: Values to be filtered.
        :param str type: Type of product filter.
        """
        pulumi.set(__self__, "supported_values", supported_values)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="supportedValues")
    def supported_values(self) -> Sequence[str]:
        """
        Values to be filtered.
        """
        return pulumi.get(self, "supported_values")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of product filter.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class HierarchyInformationResponse(dict):
    """
    Holds details about product hierarchy information
    """
    def __init__(__self__, *,
                 configuration_name: Optional[str] = None,
                 product_family_name: Optional[str] = None,
                 product_line_name: Optional[str] = None,
                 product_name: Optional[str] = None):
        """
        Holds details about product hierarchy information
        :param str configuration_name: Represents configuration name that uniquely identifies configuration
        :param str product_family_name: Represents product family name that uniquely identifies product family
        :param str product_line_name: Represents product line name that uniquely identifies product line
        :param str product_name: Represents product name that uniquely identifies product
        """
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if product_family_name is not None:
            pulumi.set(__self__, "product_family_name", product_family_name)
        if product_line_name is not None:
            pulumi.set(__self__, "product_line_name", product_line_name)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[str]:
        """
        Represents configuration name that uniquely identifies configuration
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="productFamilyName")
    def product_family_name(self) -> Optional[str]:
        """
        Represents product family name that uniquely identifies product family
        """
        return pulumi.get(self, "product_family_name")

    @property
    @pulumi.getter(name="productLineName")
    def product_line_name(self) -> Optional[str]:
        """
        Represents product line name that uniquely identifies product line
        """
        return pulumi.get(self, "product_line_name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        Represents product name that uniquely identifies product
        """
        return pulumi.get(self, "product_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageInformationResponseResult(dict):
    """
    Image for the product
    """
    def __init__(__self__, *,
                 image_type: str,
                 image_url: str):
        """
        Image for the product
        :param str image_type: Type of the image
        :param str image_url: Url of the image
        """
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "image_url", image_url)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        """
        Type of the image
        """
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        """
        Url of the image
        """
        return pulumi.get(self, "image_url")


@pulumi.output_type
class LinkResponseResult(dict):
    """
    Returns link related to the product
    """
    def __init__(__self__, *,
                 link_type: str,
                 link_url: str):
        """
        Returns link related to the product
        :param str link_type: Type of link
        :param str link_url: Url of the link
        """
        pulumi.set(__self__, "link_type", link_type)
        pulumi.set(__self__, "link_url", link_url)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> str:
        """
        Type of link
        """
        return pulumi.get(self, "link_type")

    @property
    @pulumi.getter(name="linkUrl")
    def link_url(self) -> str:
        """
        Url of the link
        """
        return pulumi.get(self, "link_url")


@pulumi.output_type
class ManagementResourceDetailsResponse(dict):
    """
    Management resource details to link device
    """
    def __init__(__self__, *,
                 management_resource_arm_id: str):
        """
        Management resource details to link device
        :param str management_resource_arm_id: Management resource ARM ID
        """
        pulumi.set(__self__, "management_resource_arm_id", management_resource_arm_id)

    @property
    @pulumi.getter(name="managementResourceArmId")
    def management_resource_arm_id(self) -> str:
        """
        Management resource ARM ID
        """
        return pulumi.get(self, "management_resource_arm_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MeterDetailsResponseResult(dict):
    """
    Holds details about billing type and its meter guids
    """
    def __init__(__self__, *,
                 billing_type: str,
                 charging_type: str,
                 multiplier: float):
        """
        Holds details about billing type and its meter guids
        :param str billing_type: Represents billing type.
        :param str charging_type: Charging type.
        :param float multiplier: Billing unit applicable for Pav2 billing
        """
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "charging_type", charging_type)
        pulumi.set(__self__, "multiplier", multiplier)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        Represents billing type.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="chargingType")
    def charging_type(self) -> str:
        """
        Charging type.
        """
        return pulumi.get(self, "charging_type")

    @property
    @pulumi.getter
    def multiplier(self) -> float:
        """
        Billing unit applicable for Pav2 billing
        """
        return pulumi.get(self, "multiplier")


@pulumi.output_type
class NotificationPreferenceResponse(dict):
    """
    Notification preference for a job stage.
    """
    def __init__(__self__, *,
                 send_notification: bool,
                 stage_name: str):
        """
        Notification preference for a job stage.
        :param bool send_notification: Notification is required or not.
        :param str stage_name: Name of the stage.
        """
        pulumi.set(__self__, "send_notification", send_notification)
        pulumi.set(__self__, "stage_name", stage_name)

    @property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> bool:
        """
        Notification is required or not.
        """
        return pulumi.get(self, "send_notification")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        """
        Name of the stage.
        """
        return pulumi.get(self, "stage_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OrderItemDetailsResponse(dict):
    """
    Order item details
    """
    def __init__(__self__, *,
                 cancellation_reason: str,
                 cancellation_status: str,
                 current_stage: 'outputs.StageDetailsResponse',
                 deletion_status: str,
                 error: 'outputs.ErrorDetailResponse',
                 forward_shipping_details: 'outputs.ShippingDetailsResponse',
                 management_rp_details: Any,
                 order_item_stage_history: Sequence['outputs.StageDetailsResponse'],
                 order_item_type: str,
                 product_details: 'outputs.ProductDetailsResponse',
                 return_reason: str,
                 return_status: str,
                 reverse_shipping_details: 'outputs.ShippingDetailsResponse',
                 management_resource_details: Optional['outputs.ManagementResourceDetailsResponse'] = None,
                 notification_email_list: Optional[Sequence[str]] = None,
                 preferences: Optional['outputs.PreferencesResponse'] = None):
        """
        Order item details
        :param str cancellation_reason: Cancellation reason.
        :param str cancellation_status: Describes whether the order is cancellable or not.
        :param 'StageDetailsResponseArgs' current_stage: Current Order item Status
        :param str deletion_status: Describes whether the order item is deletable or not.
        :param 'ErrorDetailResponseArgs' error: Top level error for the job.
        :param 'ShippingDetailsResponseArgs' forward_shipping_details: Forward Package Shipping details
        :param Any management_rp_details: parent RP details
        :param Sequence['StageDetailsResponseArgs'] order_item_stage_history: Order item status history
        :param str order_item_type: Order item type.
        :param 'ProductDetailsResponseArgs' product_details: Unique identifier for configuration.
        :param str return_reason: Return reason.
        :param str return_status: Describes whether the order item is returnable or not.
        :param 'ShippingDetailsResponseArgs' reverse_shipping_details: Reverse Package Shipping details
        :param 'ManagementResourceDetailsResponseArgs' management_resource_details: Management resource details
        :param Sequence[str] notification_email_list: Additional notification email list
        :param 'PreferencesResponseArgs' preferences: Customer notification Preferences
        """
        pulumi.set(__self__, "cancellation_reason", cancellation_reason)
        pulumi.set(__self__, "cancellation_status", cancellation_status)
        pulumi.set(__self__, "current_stage", current_stage)
        pulumi.set(__self__, "deletion_status", deletion_status)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "forward_shipping_details", forward_shipping_details)
        pulumi.set(__self__, "management_rp_details", management_rp_details)
        pulumi.set(__self__, "order_item_stage_history", order_item_stage_history)
        pulumi.set(__self__, "order_item_type", order_item_type)
        pulumi.set(__self__, "product_details", product_details)
        pulumi.set(__self__, "return_reason", return_reason)
        pulumi.set(__self__, "return_status", return_status)
        pulumi.set(__self__, "reverse_shipping_details", reverse_shipping_details)
        if management_resource_details is not None:
            pulumi.set(__self__, "management_resource_details", management_resource_details)
        if notification_email_list is not None:
            pulumi.set(__self__, "notification_email_list", notification_email_list)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)

    @property
    @pulumi.getter(name="cancellationReason")
    def cancellation_reason(self) -> str:
        """
        Cancellation reason.
        """
        return pulumi.get(self, "cancellation_reason")

    @property
    @pulumi.getter(name="cancellationStatus")
    def cancellation_status(self) -> str:
        """
        Describes whether the order is cancellable or not.
        """
        return pulumi.get(self, "cancellation_status")

    @property
    @pulumi.getter(name="currentStage")
    def current_stage(self) -> 'outputs.StageDetailsResponse':
        """
        Current Order item Status
        """
        return pulumi.get(self, "current_stage")

    @property
    @pulumi.getter(name="deletionStatus")
    def deletion_status(self) -> str:
        """
        Describes whether the order item is deletable or not.
        """
        return pulumi.get(self, "deletion_status")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ErrorDetailResponse':
        """
        Top level error for the job.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="forwardShippingDetails")
    def forward_shipping_details(self) -> 'outputs.ShippingDetailsResponse':
        """
        Forward Package Shipping details
        """
        return pulumi.get(self, "forward_shipping_details")

    @property
    @pulumi.getter(name="managementRpDetails")
    def management_rp_details(self) -> Any:
        """
        parent RP details
        """
        return pulumi.get(self, "management_rp_details")

    @property
    @pulumi.getter(name="orderItemStageHistory")
    def order_item_stage_history(self) -> Sequence['outputs.StageDetailsResponse']:
        """
        Order item status history
        """
        return pulumi.get(self, "order_item_stage_history")

    @property
    @pulumi.getter(name="orderItemType")
    def order_item_type(self) -> str:
        """
        Order item type.
        """
        return pulumi.get(self, "order_item_type")

    @property
    @pulumi.getter(name="productDetails")
    def product_details(self) -> 'outputs.ProductDetailsResponse':
        """
        Unique identifier for configuration.
        """
        return pulumi.get(self, "product_details")

    @property
    @pulumi.getter(name="returnReason")
    def return_reason(self) -> str:
        """
        Return reason.
        """
        return pulumi.get(self, "return_reason")

    @property
    @pulumi.getter(name="returnStatus")
    def return_status(self) -> str:
        """
        Describes whether the order item is returnable or not.
        """
        return pulumi.get(self, "return_status")

    @property
    @pulumi.getter(name="reverseShippingDetails")
    def reverse_shipping_details(self) -> 'outputs.ShippingDetailsResponse':
        """
        Reverse Package Shipping details
        """
        return pulumi.get(self, "reverse_shipping_details")

    @property
    @pulumi.getter(name="managementResourceDetails")
    def management_resource_details(self) -> Optional['outputs.ManagementResourceDetailsResponse']:
        """
        Management resource details
        """
        return pulumi.get(self, "management_resource_details")

    @property
    @pulumi.getter(name="notificationEmailList")
    def notification_email_list(self) -> Optional[Sequence[str]]:
        """
        Additional notification email list
        """
        return pulumi.get(self, "notification_email_list")

    @property
    @pulumi.getter
    def preferences(self) -> Optional['outputs.PreferencesResponse']:
        """
        Customer notification Preferences
        """
        return pulumi.get(self, "preferences")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PreferencesResponse(dict):
    """
    Preferences related to the order
    """
    def __init__(__self__, *,
                 encryption_preferences: Optional['outputs.EncryptionPreferencesResponse'] = None,
                 notification_preferences: Optional[Sequence['outputs.NotificationPreferenceResponse']] = None,
                 transport_preferences: Optional['outputs.TransportPreferencesResponse'] = None):
        """
        Preferences related to the order
        :param 'EncryptionPreferencesResponseArgs' encryption_preferences: Preferences related to the Encryption.
        :param Sequence['NotificationPreferenceResponseArgs'] notification_preferences: Notification preferences.
        :param 'TransportPreferencesResponseArgs' transport_preferences: Preferences related to the shipment logistics of the order.
        """
        if encryption_preferences is not None:
            pulumi.set(__self__, "encryption_preferences", encryption_preferences)
        if notification_preferences is not None:
            pulumi.set(__self__, "notification_preferences", notification_preferences)
        if transport_preferences is not None:
            pulumi.set(__self__, "transport_preferences", transport_preferences)

    @property
    @pulumi.getter(name="encryptionPreferences")
    def encryption_preferences(self) -> Optional['outputs.EncryptionPreferencesResponse']:
        """
        Preferences related to the Encryption.
        """
        return pulumi.get(self, "encryption_preferences")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional[Sequence['outputs.NotificationPreferenceResponse']]:
        """
        Notification preferences.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="transportPreferences")
    def transport_preferences(self) -> Optional['outputs.TransportPreferencesResponse']:
        """
        Preferences related to the shipment logistics of the order.
        """
        return pulumi.get(self, "transport_preferences")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductDetailsResponse(dict):
    """
    Represents product details
    """
    def __init__(__self__, *,
                 device_details: Sequence['outputs.DeviceDetailsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 count: Optional[int] = None):
        """
        Represents product details
        :param Sequence['DeviceDetailsResponseArgs'] device_details: list of device details
        :param 'HierarchyInformationResponseArgs' hierarchy_information:  Hierarchy of the product which uniquely identifies the product
        :param int count: Quantity of the product
        """
        pulumi.set(__self__, "device_details", device_details)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter(name="deviceDetails")
    def device_details(self) -> Sequence['outputs.DeviceDetailsResponse']:
        """
        list of device details
        """
        return pulumi.get(self, "device_details")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
         Hierarchy of the product which uniquely identifies the product
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Quantity of the product
        """
        return pulumi.get(self, "count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductFamilyResponseResult(dict):
    """
    Product Family
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponseResult',
                 cost_information: 'outputs.CostInformationResponseResult',
                 description: 'outputs.DescriptionResponseResult',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponseResult'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponseResult'],
                 product_lines: Sequence['outputs.ProductLineResponseResult']):
        """
        Product Family
        :param 'AvailabilityInformationResponseArgs' availability_information: Availability information of the product system.
        :param 'CostInformationResponseArgs' cost_information: Cost information for the product system.
        :param 'DescriptionResponseArgs' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponseArgs'] filterable_properties: list of filters supported for a product
        :param 'HierarchyInformationResponseArgs' hierarchy_information: Hierarchy information of the product system.
        :param Sequence['ImageInformationResponseArgs'] image_information: Image information for the product system.
        :param Sequence['ProductLineResponseArgs'] product_lines: List of product lines supported in the product family
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "product_lines", product_lines)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponseResult':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponseResult':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponseResult':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponseResult']:
        """
        list of filters supported for a product
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of the product system.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponseResult']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter(name="productLines")
    def product_lines(self) -> Sequence['outputs.ProductLineResponseResult']:
        """
        List of product lines supported in the product family
        """
        return pulumi.get(self, "product_lines")


@pulumi.output_type
class ProductLineResponseResult(dict):
    """
    Product line
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponseResult',
                 cost_information: 'outputs.CostInformationResponseResult',
                 description: 'outputs.DescriptionResponseResult',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponseResult'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponseResult'],
                 products: Sequence['outputs.ProductResponseResult']):
        """
        Product line
        :param 'AvailabilityInformationResponseArgs' availability_information: Availability information of the product system.
        :param 'CostInformationResponseArgs' cost_information: Cost information for the product system.
        :param 'DescriptionResponseArgs' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponseArgs'] filterable_properties: list of filters supported for a product
        :param 'HierarchyInformationResponseArgs' hierarchy_information: Hierarchy information of the product system.
        :param Sequence['ImageInformationResponseArgs'] image_information: Image information for the product system.
        :param Sequence['ProductResponseArgs'] products: List of products in the product line
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)
        pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponseResult':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponseResult':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponseResult':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponseResult']:
        """
        list of filters supported for a product
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of the product system.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponseResult']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.ProductResponseResult']:
        """
        List of products in the product line
        """
        return pulumi.get(self, "products")


@pulumi.output_type
class ProductResponseResult(dict):
    """
    List of Products
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponseResult',
                 configurations: Sequence['outputs.ConfigurationResponseResult'],
                 cost_information: 'outputs.CostInformationResponseResult',
                 description: 'outputs.DescriptionResponseResult',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponseResult'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponseResult']):
        """
        List of Products
        :param 'AvailabilityInformationResponseArgs' availability_information: Availability information of the product system.
        :param Sequence['ConfigurationResponseArgs'] configurations: List of configurations for the product
        :param 'CostInformationResponseArgs' cost_information: Cost information for the product system.
        :param 'DescriptionResponseArgs' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponseArgs'] filterable_properties: list of filters supported for a product
        :param 'HierarchyInformationResponseArgs' hierarchy_information: Hierarchy information of the product system.
        :param Sequence['ImageInformationResponseArgs'] image_information: Image information for the product system.
        """
        pulumi.set(__self__, "availability_information", availability_information)
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "cost_information", cost_information)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filterable_properties", filterable_properties)
        pulumi.set(__self__, "hierarchy_information", hierarchy_information)
        pulumi.set(__self__, "image_information", image_information)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponseResult':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.ConfigurationResponseResult']:
        """
        List of configurations for the product
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponseResult':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponseResult':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponseResult']:
        """
        list of filters supported for a product
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of the product system.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponseResult']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")


@pulumi.output_type
class ShippingAddressResponse(dict):
    """
    Shipping address where customer wishes to receive the device.
    """
    def __init__(__self__, *,
                 country: str,
                 street_address1: str,
                 address_type: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 state_or_province: Optional[str] = None,
                 street_address2: Optional[str] = None,
                 street_address3: Optional[str] = None,
                 zip_extended_code: Optional[str] = None):
        """
        Shipping address where customer wishes to receive the device.
        :param str country: Name of the Country.
        :param str street_address1: Street Address line 1.
        :param str address_type: Type of address.
        :param str city: Name of the City.
        :param str company_name: Name of the company.
        :param str postal_code: Postal code.
        :param str state_or_province: Name of the State or Province.
        :param str street_address2: Street Address line 2.
        :param str street_address3: Street Address line 3.
        :param str zip_extended_code: Extended Zip Code.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "street_address1", street_address1)
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)
        if street_address2 is not None:
            pulumi.set(__self__, "street_address2", street_address2)
        if street_address3 is not None:
            pulumi.set(__self__, "street_address3", street_address3)
        if zip_extended_code is not None:
            pulumi.set(__self__, "zip_extended_code", zip_extended_code)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Name of the Country.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="streetAddress1")
    def street_address1(self) -> str:
        """
        Street Address line 1.
        """
        return pulumi.get(self, "street_address1")

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        """
        Type of address.
        """
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        Name of the City.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        Name of the company.
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[str]:
        """
        Name of the State or Province.
        """
        return pulumi.get(self, "state_or_province")

    @property
    @pulumi.getter(name="streetAddress2")
    def street_address2(self) -> Optional[str]:
        """
        Street Address line 2.
        """
        return pulumi.get(self, "street_address2")

    @property
    @pulumi.getter(name="streetAddress3")
    def street_address3(self) -> Optional[str]:
        """
        Street Address line 3.
        """
        return pulumi.get(self, "street_address3")

    @property
    @pulumi.getter(name="zipExtendedCode")
    def zip_extended_code(self) -> Optional[str]:
        """
        Extended Zip Code.
        """
        return pulumi.get(self, "zip_extended_code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ShippingDetailsResponse(dict):
    """
    Package shipping details
    """
    def __init__(__self__, *,
                 carrier_display_name: str,
                 carrier_name: str,
                 tracking_id: str,
                 tracking_url: str):
        """
        Package shipping details
        :param str carrier_display_name: Carrier Name for display purpose. Not to be used for any processing.
        :param str carrier_name: Name of the carrier.
        :param str tracking_id: TrackingId of the package
        :param str tracking_url: TrackingUrl of the package.
        """
        pulumi.set(__self__, "carrier_display_name", carrier_display_name)
        pulumi.set(__self__, "carrier_name", carrier_name)
        pulumi.set(__self__, "tracking_id", tracking_id)
        pulumi.set(__self__, "tracking_url", tracking_url)

    @property
    @pulumi.getter(name="carrierDisplayName")
    def carrier_display_name(self) -> str:
        """
        Carrier Name for display purpose. Not to be used for any processing.
        """
        return pulumi.get(self, "carrier_display_name")

    @property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> str:
        """
        Name of the carrier.
        """
        return pulumi.get(self, "carrier_name")

    @property
    @pulumi.getter(name="trackingId")
    def tracking_id(self) -> str:
        """
        TrackingId of the package
        """
        return pulumi.get(self, "tracking_id")

    @property
    @pulumi.getter(name="trackingUrl")
    def tracking_url(self) -> str:
        """
        TrackingUrl of the package.
        """
        return pulumi.get(self, "tracking_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpecificationResponseResult(dict):
    """
    Specifications of the configurations
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        Specifications of the configurations
        :param str name: Name of the specification
        :param str value: Value of the specification
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the specification
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the specification
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StageDetailsResponse(dict):
    """
    Resource stage details
    """
    def __init__(__self__, *,
                 display_name: str,
                 stage_name: str,
                 stage_status: str,
                 start_time: str):
        """
        Resource stage details
        :param str display_name: Display name of the resource stage.
        :param str stage_name: Stage name
        :param str stage_status: Stage status
        :param str start_time: Stage start time
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "stage_name", stage_name)
        pulumi.set(__self__, "stage_status", stage_status)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the resource stage.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        """
        Stage name
        """
        return pulumi.get(self, "stage_name")

    @property
    @pulumi.getter(name="stageStatus")
    def stage_status(self) -> str:
        """
        Stage status
        """
        return pulumi.get(self, "stage_status")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Stage start time
        """
        return pulumi.get(self, "start_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TransportPreferencesResponse(dict):
    """
    Preferences related to the shipment logistics of the sku
    """
    def __init__(__self__, *,
                 preferred_shipment_type: str):
        """
        Preferences related to the shipment logistics of the sku
        :param str preferred_shipment_type: Indicates Shipment Logistics type that the customer preferred.
        """
        pulumi.set(__self__, "preferred_shipment_type", preferred_shipment_type)

    @property
    @pulumi.getter(name="preferredShipmentType")
    def preferred_shipment_type(self) -> str:
        """
        Indicates Shipment Logistics type that the customer preferred.
        """
        return pulumi.get(self, "preferred_shipment_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


