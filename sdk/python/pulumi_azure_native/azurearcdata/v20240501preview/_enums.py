# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AccountProvisioningMode',
    'ActivationState',
    'AggregationType',
    'ArcSqlManagedInstanceLicenseType',
    'ArcSqlServerAvailabilityMode',
    'ArcSqlServerFailoverMode',
    'BillingPlan',
    'ConnectionAuth',
    'DatabaseCreateMode',
    'DatabaseState',
    'EditionType',
    'ExtendedLocationTypes',
    'FailoverGroupPartnerSyncMode',
    'HostType',
    'Infrastructure',
    'InstanceFailoverGroupRole',
    'LicenseCategory',
    'PostgresInstanceSkuTier',
    'PrimaryAllowConnections',
    'RecoveryMode',
    'ScopeType',
    'SecondaryAllowConnections',
    'SeedingMode',
    'ServiceType',
    'SqlManagedInstanceSkuName',
    'SqlManagedInstanceSkuTier',
    'SqlVersion',
    'State',
    'Version',
]


class AccountProvisioningMode(str, Enum):
    """
    The service account provisioning mode for this Active Directory connector.
    """
    AUTOMATIC = "automatic"
    MANUAL = "manual"


class ActivationState(str, Enum):
    """
    The activation state of the license.
    """
    ACTIVATED = "Activated"
    DEACTIVATED = "Deactivated"


class AggregationType(str, Enum):
    """
    The aggregation type to use for the numerical columns in the dataset.
    """
    AVERAGE = "Average"
    MINIMUM = "Minimum"
    MAXIMUM = "Maximum"
    SUM = "Sum"
    COUNT = "Count"


class ArcSqlManagedInstanceLicenseType(str, Enum):
    """
    The license type to apply for this managed instance.
    """
    BASE_PRICE = "BasePrice"
    LICENSE_INCLUDED = "LicenseIncluded"
    DISASTER_RECOVERY = "DisasterRecovery"


class ArcSqlServerAvailabilityMode(str, Enum):
    """
    Property that determines whether a given availability replica can run in synchronous-commit mode
    """
    SYNCHRONOU_S_COMMIT = "SYNCHRONOUS_COMMIT"
    ASYNCHRONOU_S_COMMIT = "ASYNCHRONOUS_COMMIT"


class ArcSqlServerFailoverMode(str, Enum):
    """
    Property to set the failover mode of the availability group replica
    """
    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    EXTERNAL = "EXTERNAL"


class BillingPlan(str, Enum):
    """
    SQL Server license type.
    """
    PAYG = "PAYG"
    PAID = "Paid"


class ConnectionAuth(str, Enum):
    """
    Permitted authentication modes for the mirroring endpoint.
    """
    WINDOWS_NTLM = "Windows_NTLM"
    WINDOWS_KERBEROS = "Windows_Kerberos"
    WINDOWS_NEGOTIATE = "Windows_Negotiate"
    CERTIFICATE = "Certificate"
    WINDOWS_NTL_M_CERTIFICATE = "Windows_NTLM_Certificate"
    WINDOWS_KERBEROS_CERTIFICATE = "Windows_Kerberos_Certificate"
    WINDOWS_NEGOTIATE_CERTIFICATE = "Windows_Negotiate_Certificate"
    CERTIFICATE_WINDOWS_NTLM = "Certificate_Windows_NTLM"
    CERTIFICATE_WINDOWS_KERBEROS = "Certificate_Windows_Kerberos"
    CERTIFICATE_WINDOWS_NEGOTIATE = "Certificate_Windows_Negotiate"


class DatabaseCreateMode(str, Enum):
    """
    Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified.
    """
    DEFAULT = "Default"
    POINT_IN_TIME_RESTORE = "PointInTimeRestore"


class DatabaseState(str, Enum):
    """
    State of the database.
    """
    ONLINE = "Online"
    RESTORING = "Restoring"
    RECOVERING = "Recovering"
    RECOVERY_PENDING = "RecoveryPending"
    SUSPECT = "Suspect"
    EMERGENCY = "Emergency"
    OFFLINE = "Offline"
    COPYING = "Copying"
    OFFLINE_SECONDARY = "OfflineSecondary"


class EditionType(str, Enum):
    """
    SQL Server edition.
    """
    EVALUATION = "Evaluation"
    ENTERPRISE = "Enterprise"
    STANDARD = "Standard"
    WEB = "Web"
    DEVELOPER = "Developer"
    EXPRESS = "Express"
    BUSINESS_INTELLIGENCE = "Business Intelligence"


class ExtendedLocationTypes(str, Enum):
    """
    The type of the extended location.
    """
    CUSTOM_LOCATION = "CustomLocation"


class FailoverGroupPartnerSyncMode(str, Enum):
    """
    The partner sync mode of the SQL managed instance.
    """
    ASYNC_ = "async"
    SYNC = "sync"


class HostType(str, Enum):
    """
    Type of host for Azure Arc SQL Server
    """
    AZURE_VIRTUAL_MACHINE = "Azure Virtual Machine"
    AZURE_VM_WARE_VIRTUAL_MACHINE = "Azure VMWare Virtual Machine"
    AZURE_KUBERNETES_SERVICE = "Azure Kubernetes Service"
    AW_S_VM_WARE_VIRTUAL_MACHINE = "AWS VMWare Virtual Machine"
    AW_S_KUBERNETES_SERVICE = "AWS Kubernetes Service"
    GC_P_VM_WARE_VIRTUAL_MACHINE = "GCP VMWare Virtual Machine"
    GC_P_KUBERNETES_SERVICE = "GCP Kubernetes Service"
    CONTAINER = "Container"
    VIRTUAL_MACHINE = "Virtual Machine"
    PHYSICAL_SERVER = "Physical Server"
    AW_S_VIRTUAL_MACHINE = "AWS Virtual Machine"
    GC_P_VIRTUAL_MACHINE = "GCP Virtual Machine"
    OTHER = "Other"


class Infrastructure(str, Enum):
    """
    The infrastructure the data controller is running on.
    """
    AZURE = "azure"
    GCP = "gcp"
    AWS = "aws"
    ALIBABA = "alibaba"
    ONPREMISES = "onpremises"
    OTHER = "other"


class InstanceFailoverGroupRole(str, Enum):
    """
    The role of the SQL managed instance in this failover group.
    """
    PRIMARY = "primary"
    SECONDARY = "secondary"
    FORCE_PRIMARY_ALLOW_DATA_LOSS = "force-primary-allow-data-loss"
    FORCE_SECONDARY = "force-secondary"


class LicenseCategory(str, Enum):
    """
    This property represents the choice between SQL Server Core and ESU licenses.
    """
    CORE = "Core"


class PostgresInstanceSkuTier(str, Enum):
    """
    This field is required to be implemented by the Resource Provider if the service has more than one tier.
    """
    HYPERSCALE = "Hyperscale"


class PrimaryAllowConnections(str, Enum):
    """
    Whether the primary replica should allow all connections or only READ_WRITE connections (disallowing ReadOnly connections)
    """
    ALL = "ALL"
    REA_D_WRITE = "READ_WRITE"


class RecoveryMode(str, Enum):
    """
    Status of the database.
    """
    FULL = "Full"
    BULK_LOGGED = "Bulk-logged"
    SIMPLE = "Simple"


class ScopeType(str, Enum):
    """
    The Azure scope to which the license will apply.
    """
    TENANT = "Tenant"
    SUBSCRIPTION = "Subscription"
    RESOURCE_GROUP = "ResourceGroup"


class SecondaryAllowConnections(str, Enum):
    """
    Whether the secondary replica should allow all connections, no connections, or only ReadOnly connections.
    """
    NO = "NO"
    ALL = "ALL"
    REA_D_ONLY = "READ_ONLY"


class SeedingMode(str, Enum):
    """
    Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding. This method will seed the secondary replica over the network. This method does not require you to backup and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This method requires you to create a backup of the database on the primary replica and manually restore that backup on the secondary replica.
    """
    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"


class ServiceType(str, Enum):
    """
    Indicates if the resource represents a SQL Server engine or a SQL Server component service installed on the host.
    """
    ENGINE = "Engine"
    """
    SQL Server Database Services.
    """
    SSRS = "SSRS"
    """
    SQL Server Reporting Services.
    """
    SSAS = "SSAS"
    """
    SQL Server Analysis Services.
    """
    SSIS = "SSIS"
    """
    SQL Server Integration Services.
    """
    PBIRS = "PBIRS"
    """
    Power BI Report Server.
    """


class SqlManagedInstanceSkuName(str, Enum):
    """
    The name of the SKU.
    """
    V_CORE = "vCore"


class SqlManagedInstanceSkuTier(str, Enum):
    """
    The pricing tier for the instance.
    """
    GENERAL_PURPOSE = "GeneralPurpose"
    BUSINESS_CRITICAL = "BusinessCritical"


class SqlVersion(str, Enum):
    """
    SQL Server version.
    """
    SQ_L_SERVER_2012 = "SQL Server 2012"
    SQ_L_SERVER_2014 = "SQL Server 2014"
    SQ_L_SERVER_2016 = "SQL Server 2016"
    SQ_L_SERVER_2017 = "SQL Server 2017"
    SQ_L_SERVER_2019 = "SQL Server 2019"
    SQ_L_SERVER_2022 = "SQL Server 2022"
    UNKNOWN = "Unknown"


class State(str, Enum):
    """
    The activation state of the license.
    """
    INACTIVE = "Inactive"
    ACTIVE = "Active"
    TERMINATED = "Terminated"


class Version(str, Enum):
    """
    The SQL Server version the license covers.
    """
    SQ_L_SERVER_2012 = "SQL Server 2012"
    SQ_L_SERVER_2014 = "SQL Server 2014"
