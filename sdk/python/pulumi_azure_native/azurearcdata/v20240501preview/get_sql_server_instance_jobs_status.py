# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetSqlServerInstanceJobsStatusResult',
    'AwaitableGetSqlServerInstanceJobsStatusResult',
    'get_sql_server_instance_jobs_status',
    'get_sql_server_instance_jobs_status_output',
]

@pulumi.output_type
class GetSqlServerInstanceJobsStatusResult:
    """
    The response for the status of the jobs running on the SQL Server instance.
    """
    def __init__(__self__, jobs_status=None):
        if jobs_status and not isinstance(jobs_status, list):
            raise TypeError("Expected argument 'jobs_status' to be a list")
        pulumi.set(__self__, "jobs_status", jobs_status)

    @property
    @pulumi.getter(name="jobsStatus")
    def jobs_status(self) -> Optional[Sequence['outputs.SqlServerInstanceJobStatusResponse']]:
        """
        The list of jobs status running on the SQL Server instance.
        """
        return pulumi.get(self, "jobs_status")


class AwaitableGetSqlServerInstanceJobsStatusResult(GetSqlServerInstanceJobsStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlServerInstanceJobsStatusResult(
            jobs_status=self.jobs_status)


def get_sql_server_instance_jobs_status(feature_name: Optional[str] = None,
                                        job_type: Optional[str] = None,
                                        resource_group_name: Optional[str] = None,
                                        sql_server_instance_name: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlServerInstanceJobsStatusResult:
    """
    Gets jobs status details for sql arc resource


    :param str feature_name: The name of the feature to retrieve the job status for.
    :param str job_type: The type of the job to retrieve the status for.
    :param str resource_group_name: The name of the Azure resource group
    :param str sql_server_instance_name: Name of SQL Server Instance
    """
    __args__ = dict()
    __args__['featureName'] = feature_name
    __args__['jobType'] = job_type
    __args__['resourceGroupName'] = resource_group_name
    __args__['sqlServerInstanceName'] = sql_server_instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azurearcdata/v20240501preview:getSqlServerInstanceJobsStatus', __args__, opts=opts, typ=GetSqlServerInstanceJobsStatusResult).value

    return AwaitableGetSqlServerInstanceJobsStatusResult(
        jobs_status=pulumi.get(__ret__, 'jobs_status'))
def get_sql_server_instance_jobs_status_output(feature_name: Optional[pulumi.Input[Optional[str]]] = None,
                                               job_type: Optional[pulumi.Input[Optional[str]]] = None,
                                               resource_group_name: Optional[pulumi.Input[str]] = None,
                                               sql_server_instance_name: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSqlServerInstanceJobsStatusResult]:
    """
    Gets jobs status details for sql arc resource


    :param str feature_name: The name of the feature to retrieve the job status for.
    :param str job_type: The type of the job to retrieve the status for.
    :param str resource_group_name: The name of the Azure resource group
    :param str sql_server_instance_name: Name of SQL Server Instance
    """
    __args__ = dict()
    __args__['featureName'] = feature_name
    __args__['jobType'] = job_type
    __args__['resourceGroupName'] = resource_group_name
    __args__['sqlServerInstanceName'] = sql_server_instance_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:azurearcdata/v20240501preview:getSqlServerInstanceJobsStatus', __args__, opts=opts, typ=GetSqlServerInstanceJobsStatusResult)
    return __ret__.apply(lambda __response__: GetSqlServerInstanceJobsStatusResult(
        jobs_status=pulumi.get(__response__, 'jobs_status')))
