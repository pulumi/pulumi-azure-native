# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ActiveDirectoryConnectorDNSDetailsArgs',
    'ActiveDirectoryConnectorDomainDetailsArgs',
    'ActiveDirectoryConnectorPropertiesArgs',
    'ActiveDirectoryConnectorSpecArgs',
    'ActiveDirectoryConnectorStatusArgs',
    'ActiveDirectoryDomainControllersArgs',
    'ActiveDirectoryDomainControllerArgs',
    'BasicLoginInformationArgs',
]

@pulumi.input_type
class ActiveDirectoryConnectorDNSDetailsArgs:
    def __init__(__self__, *,
                 nameserver_ip_addresses: pulumi.Input[Sequence[pulumi.Input[str]]],
                 domain_name: Optional[pulumi.Input[str]] = None,
                 prefer_k8s_dns_for_ptr_lookups: Optional[pulumi.Input[bool]] = None,
                 replicas: Optional[pulumi.Input[float]] = None):
        """
        DNS server details
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameserver_ip_addresses: List of Active Directory DNS server IP addresses.
        :param pulumi.Input[str] domain_name: DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
        :param pulumi.Input[bool] prefer_k8s_dns_for_ptr_lookups: Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
        :param pulumi.Input[float] replicas: Replica count for DNS proxy service. Default value is 1.
        """
        pulumi.set(__self__, "nameserver_ip_addresses", nameserver_ip_addresses)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if prefer_k8s_dns_for_ptr_lookups is None:
            prefer_k8s_dns_for_ptr_lookups = True
        if prefer_k8s_dns_for_ptr_lookups is not None:
            pulumi.set(__self__, "prefer_k8s_dns_for_ptr_lookups", prefer_k8s_dns_for_ptr_lookups)
        if replicas is None:
            replicas = 1
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="nameserverIPAddresses")
    def nameserver_ip_addresses(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of Active Directory DNS server IP addresses.
        """
        return pulumi.get(self, "nameserver_ip_addresses")

    @nameserver_ip_addresses.setter
    def nameserver_ip_addresses(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "nameserver_ip_addresses", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="preferK8sDnsForPtrLookups")
    def prefer_k8s_dns_for_ptr_lookups(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
        """
        return pulumi.get(self, "prefer_k8s_dns_for_ptr_lookups")

    @prefer_k8s_dns_for_ptr_lookups.setter
    def prefer_k8s_dns_for_ptr_lookups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer_k8s_dns_for_ptr_lookups", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[float]]:
        """
        Replica count for DNS proxy service. Default value is 1.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class ActiveDirectoryConnectorDomainDetailsArgs:
    def __init__(__self__, *,
                 domain_controllers: pulumi.Input['ActiveDirectoryDomainControllersArgs'],
                 realm: pulumi.Input[str],
                 netbios_domain_name: Optional[pulumi.Input[str]] = None,
                 ou_distinguished_name: Optional[pulumi.Input[str]] = None,
                 service_account_provisioning: Optional[pulumi.Input[Union[str, 'AccountProvisioningMode']]] = None):
        """
        Active Directory domain details
        :param pulumi.Input['ActiveDirectoryDomainControllersArgs'] domain_controllers: null
        :param pulumi.Input[str] realm: Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
        :param pulumi.Input[str] netbios_domain_name: NETBIOS name of the Active Directory domain.
        :param pulumi.Input[str] ou_distinguished_name: The distinguished name of the Active Directory Organizational Unit.
        :param pulumi.Input[Union[str, 'AccountProvisioningMode']] service_account_provisioning: The service account provisioning mode for this Active Directory connector.
        """
        pulumi.set(__self__, "domain_controllers", domain_controllers)
        pulumi.set(__self__, "realm", realm)
        if netbios_domain_name is not None:
            pulumi.set(__self__, "netbios_domain_name", netbios_domain_name)
        if ou_distinguished_name is not None:
            pulumi.set(__self__, "ou_distinguished_name", ou_distinguished_name)
        if service_account_provisioning is None:
            service_account_provisioning = 'manual'
        if service_account_provisioning is not None:
            pulumi.set(__self__, "service_account_provisioning", service_account_provisioning)

    @property
    @pulumi.getter(name="domainControllers")
    def domain_controllers(self) -> pulumi.Input['ActiveDirectoryDomainControllersArgs']:
        """
        null
        """
        return pulumi.get(self, "domain_controllers")

    @domain_controllers.setter
    def domain_controllers(self, value: pulumi.Input['ActiveDirectoryDomainControllersArgs']):
        pulumi.set(self, "domain_controllers", value)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="netbiosDomainName")
    def netbios_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        NETBIOS name of the Active Directory domain.
        """
        return pulumi.get(self, "netbios_domain_name")

    @netbios_domain_name.setter
    def netbios_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netbios_domain_name", value)

    @property
    @pulumi.getter(name="ouDistinguishedName")
    def ou_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        """
        The distinguished name of the Active Directory Organizational Unit.
        """
        return pulumi.get(self, "ou_distinguished_name")

    @ou_distinguished_name.setter
    def ou_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ou_distinguished_name", value)

    @property
    @pulumi.getter(name="serviceAccountProvisioning")
    def service_account_provisioning(self) -> Optional[pulumi.Input[Union[str, 'AccountProvisioningMode']]]:
        """
        The service account provisioning mode for this Active Directory connector.
        """
        return pulumi.get(self, "service_account_provisioning")

    @service_account_provisioning.setter
    def service_account_provisioning(self, value: Optional[pulumi.Input[Union[str, 'AccountProvisioningMode']]]):
        pulumi.set(self, "service_account_provisioning", value)


@pulumi.input_type
class ActiveDirectoryConnectorPropertiesArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['ActiveDirectoryConnectorSpecArgs'],
                 domain_service_account_login_information: Optional[pulumi.Input['BasicLoginInformationArgs']] = None,
                 status: Optional[pulumi.Input['ActiveDirectoryConnectorStatusArgs']] = None):
        """
        The properties of an Active Directory connector resource
        :param pulumi.Input['ActiveDirectoryConnectorSpecArgs'] spec: null
        :param pulumi.Input['BasicLoginInformationArgs'] domain_service_account_login_information: Username and password for domain service account authentication.
        :param pulumi.Input['ActiveDirectoryConnectorStatusArgs'] status: null
        """
        pulumi.set(__self__, "spec", spec)
        if domain_service_account_login_information is not None:
            pulumi.set(__self__, "domain_service_account_login_information", domain_service_account_login_information)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ActiveDirectoryConnectorSpecArgs']:
        """
        null
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ActiveDirectoryConnectorSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="domainServiceAccountLoginInformation")
    def domain_service_account_login_information(self) -> Optional[pulumi.Input['BasicLoginInformationArgs']]:
        """
        Username and password for domain service account authentication.
        """
        return pulumi.get(self, "domain_service_account_login_information")

    @domain_service_account_login_information.setter
    def domain_service_account_login_information(self, value: Optional[pulumi.Input['BasicLoginInformationArgs']]):
        pulumi.set(self, "domain_service_account_login_information", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['ActiveDirectoryConnectorStatusArgs']]:
        """
        null
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['ActiveDirectoryConnectorStatusArgs']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ActiveDirectoryConnectorSpecArgs:
    def __init__(__self__, *,
                 active_directory: pulumi.Input['ActiveDirectoryConnectorDomainDetailsArgs'],
                 dns: pulumi.Input['ActiveDirectoryConnectorDNSDetailsArgs']):
        """
        The specifications of the AD Kubernetes resource.
        :param pulumi.Input['ActiveDirectoryConnectorDomainDetailsArgs'] active_directory: null
        :param pulumi.Input['ActiveDirectoryConnectorDNSDetailsArgs'] dns: null
        """
        pulumi.set(__self__, "active_directory", active_directory)
        pulumi.set(__self__, "dns", dns)

    @property
    @pulumi.getter(name="activeDirectory")
    def active_directory(self) -> pulumi.Input['ActiveDirectoryConnectorDomainDetailsArgs']:
        """
        null
        """
        return pulumi.get(self, "active_directory")

    @active_directory.setter
    def active_directory(self, value: pulumi.Input['ActiveDirectoryConnectorDomainDetailsArgs']):
        pulumi.set(self, "active_directory", value)

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Input['ActiveDirectoryConnectorDNSDetailsArgs']:
        """
        null
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: pulumi.Input['ActiveDirectoryConnectorDNSDetailsArgs']):
        pulumi.set(self, "dns", value)


@pulumi.input_type
class ActiveDirectoryConnectorStatusArgs:
    def __init__(__self__, *,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        The status of the Kubernetes custom resource.
        :param pulumi.Input[str] last_update_time: The time that the custom resource was last updated.
        :param pulumi.Input[float] observed_generation: The version of the replicaSet associated with the AD connector custom resource.
        :param pulumi.Input[str] state: The state of the AD connector custom resource.
        """
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time that the custom resource was last updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[float]]:
        """
        The version of the replicaSet associated with the AD connector custom resource.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the AD connector custom resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ActiveDirectoryDomainControllersArgs:
    def __init__(__self__, *,
                 primary_domain_controller: Optional[pulumi.Input['ActiveDirectoryDomainControllerArgs']] = None,
                 secondary_domain_controllers: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveDirectoryDomainControllerArgs']]]] = None):
        """
        Details about the Active Directory domain controllers associated with this AD connector instance
        :param pulumi.Input['ActiveDirectoryDomainControllerArgs'] primary_domain_controller: Information about the Primary Domain Controller (PDC) in the AD domain.
        :param pulumi.Input[Sequence[pulumi.Input['ActiveDirectoryDomainControllerArgs']]] secondary_domain_controllers: null
        """
        if primary_domain_controller is not None:
            pulumi.set(__self__, "primary_domain_controller", primary_domain_controller)
        if secondary_domain_controllers is not None:
            pulumi.set(__self__, "secondary_domain_controllers", secondary_domain_controllers)

    @property
    @pulumi.getter(name="primaryDomainController")
    def primary_domain_controller(self) -> Optional[pulumi.Input['ActiveDirectoryDomainControllerArgs']]:
        """
        Information about the Primary Domain Controller (PDC) in the AD domain.
        """
        return pulumi.get(self, "primary_domain_controller")

    @primary_domain_controller.setter
    def primary_domain_controller(self, value: Optional[pulumi.Input['ActiveDirectoryDomainControllerArgs']]):
        pulumi.set(self, "primary_domain_controller", value)

    @property
    @pulumi.getter(name="secondaryDomainControllers")
    def secondary_domain_controllers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveDirectoryDomainControllerArgs']]]]:
        """
        null
        """
        return pulumi.get(self, "secondary_domain_controllers")

    @secondary_domain_controllers.setter
    def secondary_domain_controllers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveDirectoryDomainControllerArgs']]]]):
        pulumi.set(self, "secondary_domain_controllers", value)


@pulumi.input_type
class ActiveDirectoryDomainControllerArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str]):
        """
        Information about a domain controller in the AD domain.
        :param pulumi.Input[str] hostname: Fully-qualified domain name of a domain controller in the AD domain.
        """
        pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Fully-qualified domain name of a domain controller in the AD domain.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class BasicLoginInformationArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Username and password for basic login authentication.
        :param pulumi.Input[str] password: Login password.
        :param pulumi.Input[str] username: Login username.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Login username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


