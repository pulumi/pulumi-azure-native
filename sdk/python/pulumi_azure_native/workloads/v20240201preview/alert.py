# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AlertArgs', 'Alert']

@pulumi.input_type
class AlertArgs:
    def __init__(__self__, *,
                 monitor_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 alert_name: Optional[pulumi.Input[str]] = None,
                 alert_rule_properties: Optional[pulumi.Input['AlertRulePropertiesArgs']] = None,
                 provider_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Alert resource.
        :param pulumi.Input[str] monitor_name: Name of the SAP monitor resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] alert_name: Name of the SAP monitor alert resource.
        :param pulumi.Input['AlertRulePropertiesArgs'] alert_rule_properties: Describes the properties of an alert.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] provider_names: Name of provider instances associated with the alert.
        :param pulumi.Input[str] provider_type: The provider type for alert. For example, the value can be SapHana.
        :param pulumi.Input[str] template_name: Name of the alert template from which it was created.
        """
        pulumi.set(__self__, "monitor_name", monitor_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if alert_name is not None:
            pulumi.set(__self__, "alert_name", alert_name)
        if alert_rule_properties is not None:
            pulumi.set(__self__, "alert_rule_properties", alert_rule_properties)
        if provider_names is not None:
            pulumi.set(__self__, "provider_names", provider_names)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> pulumi.Input[str]:
        """
        Name of the SAP monitor resource.
        """
        return pulumi.get(self, "monitor_name")

    @monitor_name.setter
    def monitor_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="alertName")
    def alert_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SAP monitor alert resource.
        """
        return pulumi.get(self, "alert_name")

    @alert_name.setter
    def alert_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_name", value)

    @property
    @pulumi.getter(name="alertRuleProperties")
    def alert_rule_properties(self) -> Optional[pulumi.Input['AlertRulePropertiesArgs']]:
        """
        Describes the properties of an alert.
        """
        return pulumi.get(self, "alert_rule_properties")

    @alert_rule_properties.setter
    def alert_rule_properties(self, value: Optional[pulumi.Input['AlertRulePropertiesArgs']]):
        pulumi.set(self, "alert_rule_properties", value)

    @property
    @pulumi.getter(name="providerNames")
    def provider_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of provider instances associated with the alert.
        """
        return pulumi.get(self, "provider_names")

    @provider_names.setter
    def provider_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "provider_names", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        The provider type for alert. For example, the value can be SapHana.
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the alert template from which it was created.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class Alert(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_name: Optional[pulumi.Input[str]] = None,
                 alert_rule_properties: Optional[pulumi.Input[Union['AlertRulePropertiesArgs', 'AlertRulePropertiesArgsDict']]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 provider_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A alert associated with SAP monitor.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_name: Name of the SAP monitor alert resource.
        :param pulumi.Input[Union['AlertRulePropertiesArgs', 'AlertRulePropertiesArgsDict']] alert_rule_properties: Describes the properties of an alert.
        :param pulumi.Input[str] monitor_name: Name of the SAP monitor resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] provider_names: Name of provider instances associated with the alert.
        :param pulumi.Input[str] provider_type: The provider type for alert. For example, the value can be SapHana.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] template_name: Name of the alert template from which it was created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A alert associated with SAP monitor.

        :param str resource_name: The name of the resource.
        :param AlertArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_name: Optional[pulumi.Input[str]] = None,
                 alert_rule_properties: Optional[pulumi.Input[Union['AlertRulePropertiesArgs', 'AlertRulePropertiesArgsDict']]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 provider_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertArgs.__new__(AlertArgs)

            __props__.__dict__["alert_name"] = alert_name
            __props__.__dict__["alert_rule_properties"] = alert_rule_properties
            if monitor_name is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_name'")
            __props__.__dict__["monitor_name"] = monitor_name
            __props__.__dict__["provider_names"] = provider_names
            __props__.__dict__["provider_type"] = provider_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["alert_rule_resource_id"] = None
            __props__.__dict__["errors"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:workloads:Alert")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Alert, __self__).__init__(
            'azure-native:workloads/v20240201preview:Alert',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Alert':
        """
        Get an existing Alert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AlertArgs.__new__(AlertArgs)

        __props__.__dict__["alert_rule_properties"] = None
        __props__.__dict__["alert_rule_resource_id"] = None
        __props__.__dict__["errors"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provider_names"] = None
        __props__.__dict__["provider_type"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["template_name"] = None
        __props__.__dict__["type"] = None
        return Alert(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertRuleProperties")
    def alert_rule_properties(self) -> pulumi.Output[Optional['outputs.AlertRulePropertiesResponse']]:
        """
        Describes the properties of an alert.
        """
        return pulumi.get(self, "alert_rule_properties")

    @property
    @pulumi.getter(name="alertRuleResourceId")
    def alert_rule_resource_id(self) -> pulumi.Output[str]:
        """
        ID of the alert rule resource created.
        """
        return pulumi.get(self, "alert_rule_resource_id")

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Output['outputs.ErrorDetailResponse']:
        """
        Defines the alert instance errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerNames")
    def provider_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of provider instances associated with the alert.
        """
        return pulumi.get(self, "provider_names")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[Optional[str]]:
        """
        The provider type for alert. For example, the value can be SapHana.
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        State of provisioning of the alert instance
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the alert template from which it was created.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

