# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetAlertResult',
    'AwaitableGetAlertResult',
    'get_alert',
    'get_alert_output',
]

@pulumi.output_type
class GetAlertResult:
    """
    A alert associated with SAP monitor.
    """
    def __init__(__self__, alert_rule_properties=None, alert_rule_resource_id=None, errors=None, id=None, name=None, provider_names=None, provider_type=None, provisioning_state=None, system_data=None, template_name=None, type=None):
        if alert_rule_properties and not isinstance(alert_rule_properties, dict):
            raise TypeError("Expected argument 'alert_rule_properties' to be a dict")
        pulumi.set(__self__, "alert_rule_properties", alert_rule_properties)
        if alert_rule_resource_id and not isinstance(alert_rule_resource_id, str):
            raise TypeError("Expected argument 'alert_rule_resource_id' to be a str")
        pulumi.set(__self__, "alert_rule_resource_id", alert_rule_resource_id)
        if errors and not isinstance(errors, dict):
            raise TypeError("Expected argument 'errors' to be a dict")
        pulumi.set(__self__, "errors", errors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_names and not isinstance(provider_names, list):
            raise TypeError("Expected argument 'provider_names' to be a list")
        pulumi.set(__self__, "provider_names", provider_names)
        if provider_type and not isinstance(provider_type, str):
            raise TypeError("Expected argument 'provider_type' to be a str")
        pulumi.set(__self__, "provider_type", provider_type)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        pulumi.set(__self__, "template_name", template_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="alertRuleProperties")
    def alert_rule_properties(self) -> Optional['outputs.AlertRulePropertiesResponse']:
        """
        Describes the properties of an alert.
        """
        return pulumi.get(self, "alert_rule_properties")

    @property
    @pulumi.getter(name="alertRuleResourceId")
    def alert_rule_resource_id(self) -> str:
        """
        ID of the alert rule resource created.
        """
        return pulumi.get(self, "alert_rule_resource_id")

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.ErrorDetailResponse':
        """
        Defines the alert instance errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerNames")
    def provider_names(self) -> Optional[Sequence[str]]:
        """
        Name of provider instances associated with the alert.
        """
        return pulumi.get(self, "provider_names")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[str]:
        """
        The provider type for alert. For example, the value can be SapHana.
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of provisioning of the alert instance
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[str]:
        """
        Name of the alert template from which it was created.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAlertResult(GetAlertResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertResult(
            alert_rule_properties=self.alert_rule_properties,
            alert_rule_resource_id=self.alert_rule_resource_id,
            errors=self.errors,
            id=self.id,
            name=self.name,
            provider_names=self.provider_names,
            provider_type=self.provider_type,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            template_name=self.template_name,
            type=self.type)


def get_alert(alert_name: Optional[str] = None,
              monitor_name: Optional[str] = None,
              resource_group_name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlertResult:
    """
    Gets properties of an alert for the specified subscription, resource group, SAP monitor name, and resource name.


    :param str alert_name: Name of the SAP monitor alert resource.
    :param str monitor_name: Name of the SAP monitor resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['alertName'] = alert_name
    __args__['monitorName'] = monitor_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:workloads/v20240201preview:getAlert', __args__, opts=opts, typ=GetAlertResult).value

    return AwaitableGetAlertResult(
        alert_rule_properties=pulumi.get(__ret__, 'alert_rule_properties'),
        alert_rule_resource_id=pulumi.get(__ret__, 'alert_rule_resource_id'),
        errors=pulumi.get(__ret__, 'errors'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provider_names=pulumi.get(__ret__, 'provider_names'),
        provider_type=pulumi.get(__ret__, 'provider_type'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        template_name=pulumi.get(__ret__, 'template_name'),
        type=pulumi.get(__ret__, 'type'))
def get_alert_output(alert_name: Optional[pulumi.Input[str]] = None,
                     monitor_name: Optional[pulumi.Input[str]] = None,
                     resource_group_name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlertResult]:
    """
    Gets properties of an alert for the specified subscription, resource group, SAP monitor name, and resource name.


    :param str alert_name: Name of the SAP monitor alert resource.
    :param str monitor_name: Name of the SAP monitor resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['alertName'] = alert_name
    __args__['monitorName'] = monitor_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:workloads/v20240201preview:getAlert', __args__, opts=opts, typ=GetAlertResult)
    return __ret__.apply(lambda __response__: GetAlertResult(
        alert_rule_properties=pulumi.get(__response__, 'alert_rule_properties'),
        alert_rule_resource_id=pulumi.get(__response__, 'alert_rule_resource_id'),
        errors=pulumi.get(__response__, 'errors'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provider_names=pulumi.get(__response__, 'provider_names'),
        provider_type=pulumi.get(__response__, 'provider_type'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        template_name=pulumi.get(__response__, 'template_name'),
        type=pulumi.get(__response__, 'type')))
