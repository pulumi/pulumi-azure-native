# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApplicationServerConfigurationResponse',
    'ApplicationServerFullResourceNamesResponse',
    'ApplicationServerVmDetailsResponse',
    'CentralServerConfigurationResponse',
    'CentralServerFullResourceNamesResponse',
    'CentralServerVmDetailsResponse',
    'ConnectorErrorDefinitionResponse',
    'CreateAndMountFileShareConfigurationResponse',
    'DBBackupPolicyPropertiesResponse',
    'DailyRetentionFormatResponse',
    'DailyRetentionScheduleResponse',
    'DailyScheduleResponse',
    'DatabaseConfigurationResponse',
    'DatabaseServerFullResourceNamesResponse',
    'DatabaseVmDetailsResponse',
    'DayResponse',
    'DeployerVmPackagesResponse',
    'DeploymentConfigurationResponse',
    'DeploymentWithOSConfigurationResponse',
    'DiscoveryConfigurationResponse',
    'DiskConfigurationResponse',
    'DiskDetailsResponse',
    'DiskExclusionPropertiesResponse',
    'DiskSkuResponse',
    'DiskVolumeConfigurationResponse',
    'EnqueueReplicationServerPropertiesResponse',
    'EnqueueServerPropertiesResponse',
    'ErrorDefinitionResponse',
    'ExistingRecoveryServicesVaultResponse',
    'ExternalInstallationSoftwareConfigurationResponse',
    'GatewayServerPropertiesResponse',
    'HanaBackupDataResponse',
    'HighAvailabilityConfigurationResponse',
    'HighAvailabilitySoftwareConfigurationResponse',
    'HourlyScheduleResponse',
    'ImageReferenceResponse',
    'InstantRPAdditionalDetailsResponse',
    'LinuxConfigurationResponse',
    'LoadBalancerDetailsResponse',
    'LoadBalancerResourceNamesResponse',
    'LogSchedulePolicyResponse',
    'LongTermRetentionPolicyResponse',
    'LongTermSchedulePolicyResponse',
    'ManagedRGConfigurationResponse',
    'MessageServerPropertiesResponse',
    'MonthlyRetentionScheduleResponse',
    'MountFileShareConfigurationResponse',
    'NetworkConfigurationResponse',
    'NetworkInterfaceResourceNamesResponse',
    'NewRecoveryServicesVaultResponse',
    'OSProfileResponse',
    'OsSapConfigurationResponse',
    'RetentionDurationResponse',
    'SAPAvailabilityZonePairResponse',
    'SAPDiskConfigurationResponse',
    'SAPInstallWithoutOSConfigSoftwareConfigurationResponse',
    'SAPSupportedSkuResponse',
    'SAPVirtualInstanceErrorResponse',
    'SSLConfigurationResponse',
    'ServiceInitiatedSoftwareConfigurationResponse',
    'SettingsResponse',
    'SharedStorageResourceNamesResponse',
    'SimpleRetentionPolicyResponse',
    'SimpleSchedulePolicyResponse',
    'SimpleSchedulePolicyV2Response',
    'SingleServerConfigurationResponse',
    'SingleServerFullResourceNamesResponse',
    'SkipFileShareConfigurationResponse',
    'SnapshotBackupAdditionalDetailsResponse',
    'SqlBackupDataResponse',
    'SshConfigurationResponse',
    'SshKeyPairResponse',
    'SshPublicKeyResponse',
    'StorageConfigurationResponse',
    'StorageInformationResponse',
    'SubProtectionPolicyResponse',
    'SystemDataResponse',
    'ThreeTierConfigurationResponse',
    'ThreeTierFullResourceNamesResponse',
    'TieringPolicyResponse',
    'UserAssignedIdentityPropertiesResponse',
    'UserAssignedIdentityResponse',
    'UserAssignedManagedIdentityDetailsResponse',
    'UserAssignedServiceIdentityResponse',
    'VMBackupDataResponse',
    'VMBackupPolicyPropertiesResponse',
    'VirtualMachineConfigurationResponse',
    'VirtualMachineResourceNamesResponse',
    'WeeklyRetentionFormatResponse',
    'WeeklyRetentionScheduleResponse',
    'WeeklyScheduleResponse',
    'WindowsConfigurationResponse',
    'YearlyRetentionScheduleResponse',
]

@pulumi.output_type
class ApplicationServerConfigurationResponse(dict):
    """
    Gets or sets the application server configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "virtualMachineConfiguration":
            suggest = "virtual_machine_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationServerConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationServerConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationServerConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: float,
                 subnet_id: str,
                 virtual_machine_configuration: 'outputs.VirtualMachineConfigurationResponse'):
        """
        Gets or sets the application server configuration.
        :param float instance_count: The number of app server instances.
        :param str subnet_id: The subnet id.
        :param 'VirtualMachineConfigurationResponse' virtual_machine_configuration: Gets or sets the virtual machine configuration.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "virtual_machine_configuration", virtual_machine_configuration)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> float:
        """
        The number of app server instances.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="virtualMachineConfiguration")
    def virtual_machine_configuration(self) -> 'outputs.VirtualMachineConfigurationResponse':
        """
        Gets or sets the virtual machine configuration.
        """
        return pulumi.get(self, "virtual_machine_configuration")


@pulumi.output_type
class ApplicationServerFullResourceNamesResponse(dict):
    """
    The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilitySetName":
            suggest = "availability_set_name"
        elif key == "virtualMachines":
            suggest = "virtual_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationServerFullResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationServerFullResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationServerFullResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_set_name: Optional[str] = None,
                 virtual_machines: Optional[Sequence['outputs.VirtualMachineResourceNamesResponse']] = None):
        """
        The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
        :param str availability_set_name: The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
        :param Sequence['VirtualMachineResourceNamesResponse'] virtual_machines: The list of virtual machine naming details.
        """
        if availability_set_name is not None:
            pulumi.set(__self__, "availability_set_name", availability_set_name)
        if virtual_machines is not None:
            pulumi.set(__self__, "virtual_machines", virtual_machines)

    @property
    @pulumi.getter(name="availabilitySetName")
    def availability_set_name(self) -> Optional[str]:
        """
        The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
        """
        return pulumi.get(self, "availability_set_name")

    @property
    @pulumi.getter(name="virtualMachines")
    def virtual_machines(self) -> Optional[Sequence['outputs.VirtualMachineResourceNamesResponse']]:
        """
        The list of virtual machine naming details.
        """
        return pulumi.get(self, "virtual_machines")


@pulumi.output_type
class ApplicationServerVmDetailsResponse(dict):
    """
    The Application Server VM Details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageDetails":
            suggest = "storage_details"
        elif key == "virtualMachineId":
            suggest = "virtual_machine_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationServerVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationServerVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationServerVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_details: Sequence['outputs.StorageInformationResponse'],
                 type: str,
                 virtual_machine_id: str):
        """
        The Application Server VM Details.
        :param Sequence['StorageInformationResponse'] storage_details: Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage.
        :param str type: Defines the type of application server VM.
        """
        pulumi.set(__self__, "storage_details", storage_details)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter(name="storageDetails")
    def storage_details(self) -> Sequence['outputs.StorageInformationResponse']:
        """
        Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage.
        """
        return pulumi.get(self, "storage_details")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the type of application server VM.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> str:
        return pulumi.get(self, "virtual_machine_id")


@pulumi.output_type
class CentralServerConfigurationResponse(dict):
    """
    Gets or sets the central server configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "virtualMachineConfiguration":
            suggest = "virtual_machine_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralServerConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralServerConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralServerConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: float,
                 subnet_id: str,
                 virtual_machine_configuration: 'outputs.VirtualMachineConfigurationResponse'):
        """
        Gets or sets the central server configuration.
        :param float instance_count: The number of central server VMs.
        :param str subnet_id: The subnet id.
        :param 'VirtualMachineConfigurationResponse' virtual_machine_configuration: Gets or sets the virtual machine configuration.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "virtual_machine_configuration", virtual_machine_configuration)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> float:
        """
        The number of central server VMs.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="virtualMachineConfiguration")
    def virtual_machine_configuration(self) -> 'outputs.VirtualMachineConfigurationResponse':
        """
        Gets or sets the virtual machine configuration.
        """
        return pulumi.get(self, "virtual_machine_configuration")


@pulumi.output_type
class CentralServerFullResourceNamesResponse(dict):
    """
    The full resource names object for central server layer resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilitySetName":
            suggest = "availability_set_name"
        elif key == "loadBalancer":
            suggest = "load_balancer"
        elif key == "virtualMachines":
            suggest = "virtual_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralServerFullResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralServerFullResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralServerFullResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_set_name: Optional[str] = None,
                 load_balancer: Optional['outputs.LoadBalancerResourceNamesResponse'] = None,
                 virtual_machines: Optional[Sequence['outputs.VirtualMachineResourceNamesResponse']] = None):
        """
        The full resource names object for central server layer resources.
        :param str availability_set_name: The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
        :param 'LoadBalancerResourceNamesResponse' load_balancer: The resource names object for load balancer and related resources.
        :param Sequence['VirtualMachineResourceNamesResponse'] virtual_machines: The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
        """
        if availability_set_name is not None:
            pulumi.set(__self__, "availability_set_name", availability_set_name)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if virtual_machines is not None:
            pulumi.set(__self__, "virtual_machines", virtual_machines)

    @property
    @pulumi.getter(name="availabilitySetName")
    def availability_set_name(self) -> Optional[str]:
        """
        The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
        """
        return pulumi.get(self, "availability_set_name")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional['outputs.LoadBalancerResourceNamesResponse']:
        """
        The resource names object for load balancer and related resources.
        """
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter(name="virtualMachines")
    def virtual_machines(self) -> Optional[Sequence['outputs.VirtualMachineResourceNamesResponse']]:
        """
        The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
        """
        return pulumi.get(self, "virtual_machines")


@pulumi.output_type
class CentralServerVmDetailsResponse(dict):
    """
    The SAP Central Services Instance VM details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageDetails":
            suggest = "storage_details"
        elif key == "virtualMachineId":
            suggest = "virtual_machine_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralServerVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralServerVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralServerVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_details: Sequence['outputs.StorageInformationResponse'],
                 type: str,
                 virtual_machine_id: str):
        """
        The SAP Central Services Instance VM details.
        :param Sequence['StorageInformationResponse'] storage_details: Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage.
        :param str type: Defines the type of central server VM.
        """
        pulumi.set(__self__, "storage_details", storage_details)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter(name="storageDetails")
    def storage_details(self) -> Sequence['outputs.StorageInformationResponse']:
        """
        Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage.
        """
        return pulumi.get(self, "storage_details")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the type of central server VM.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> str:
        return pulumi.get(self, "virtual_machine_id")


@pulumi.output_type
class ConnectorErrorDefinitionResponse(dict):
    """
    Error definition.
    """
    def __init__(__self__, *,
                 code: str,
                 details: Sequence['outputs.ConnectorErrorDefinitionResponse'],
                 message: str):
        """
        Error definition.
        :param str code: Service specific error code which serves as the substatus for the HTTP error code.
        :param Sequence['ConnectorErrorDefinitionResponse'] details: Internal error details.
        :param str message: Description of the error.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Service specific error code which serves as the substatus for the HTTP error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ConnectorErrorDefinitionResponse']:
        """
        Internal error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Description of the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class CreateAndMountFileShareConfigurationResponse(dict):
    """
    Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "storageAccountName":
            suggest = "storage_account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CreateAndMountFileShareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CreateAndMountFileShareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CreateAndMountFileShareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: str,
                 resource_group: Optional[str] = None,
                 storage_account_name: Optional[str] = None):
        """
        Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
        :param str configuration_type: The type of file share config.
               Expected value is 'CreateAndMount'.
        :param str resource_group: The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
        :param str storage_account_name: The name of file share storage account name . A custom name is used in case of missing input.
        """
        pulumi.set(__self__, "configuration_type", 'CreateAndMount')
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The type of file share config.
        Expected value is 'CreateAndMount'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        """
        The name of file share storage account name . A custom name is used in case of missing input.
        """
        return pulumi.get(self, "storage_account_name")


@pulumi.output_type
class DBBackupPolicyPropertiesResponse(dict):
    """
    Defines the policy properties for database backup.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupManagementType":
            suggest = "backup_management_type"
        elif key == "makePolicyConsistent":
            suggest = "make_policy_consistent"
        elif key == "protectedItemsCount":
            suggest = "protected_items_count"
        elif key == "resourceGuardOperationRequests":
            suggest = "resource_guard_operation_requests"
        elif key == "subProtectionPolicy":
            suggest = "sub_protection_policy"
        elif key == "workLoadType":
            suggest = "work_load_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DBBackupPolicyPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DBBackupPolicyPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DBBackupPolicyPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_management_type: str,
                 name: str,
                 make_policy_consistent: Optional[bool] = None,
                 protected_items_count: Optional[int] = None,
                 resource_guard_operation_requests: Optional[Sequence[str]] = None,
                 settings: Optional['outputs.SettingsResponse'] = None,
                 sub_protection_policy: Optional[Sequence['outputs.SubProtectionPolicyResponse']] = None,
                 work_load_type: Optional[str] = None):
        """
        Defines the policy properties for database backup.
        :param str backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'AzureWorkload'.
        :param str name: The name of the DB backup policy.
        :param bool make_policy_consistent: Fix the policy inconsistency
        :param int protected_items_count: Number of items associated with this policy.
        :param Sequence[str] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param 'SettingsResponse' settings: Common settings for the backup management
        :param Sequence['SubProtectionPolicyResponse'] sub_protection_policy: List of sub-protection policies which includes schedule and retention
        :param str work_load_type: Type of workload for the backup management
        """
        pulumi.set(__self__, "backup_management_type", 'AzureWorkload')
        pulumi.set(__self__, "name", name)
        if make_policy_consistent is not None:
            pulumi.set(__self__, "make_policy_consistent", make_policy_consistent)
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if sub_protection_policy is not None:
            pulumi.set(__self__, "sub_protection_policy", sub_protection_policy)
        if work_load_type is not None:
            pulumi.set(__self__, "work_load_type", work_load_type)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'AzureWorkload'.
        """
        return pulumi.get(self, "backup_management_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the DB backup policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="makePolicyConsistent")
    def make_policy_consistent(self) -> Optional[bool]:
        """
        Fix the policy inconsistency
        """
        return pulumi.get(self, "make_policy_consistent")

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[int]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[Sequence[str]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.SettingsResponse']:
        """
        Common settings for the backup management
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="subProtectionPolicy")
    def sub_protection_policy(self) -> Optional[Sequence['outputs.SubProtectionPolicyResponse']]:
        """
        List of sub-protection policies which includes schedule and retention
        """
        return pulumi.get(self, "sub_protection_policy")

    @property
    @pulumi.getter(name="workLoadType")
    def work_load_type(self) -> Optional[str]:
        """
        Type of workload for the backup management
        """
        return pulumi.get(self, "work_load_type")


@pulumi.output_type
class DailyRetentionFormatResponse(dict):
    """
    Daily retention format.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfTheMonth":
            suggest = "days_of_the_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DailyRetentionFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DailyRetentionFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DailyRetentionFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_the_month: Optional[Sequence['outputs.DayResponse']] = None):
        """
        Daily retention format.
        :param Sequence['DayResponse'] days_of_the_month: List of days of the month.
        """
        if days_of_the_month is not None:
            pulumi.set(__self__, "days_of_the_month", days_of_the_month)

    @property
    @pulumi.getter(name="daysOfTheMonth")
    def days_of_the_month(self) -> Optional[Sequence['outputs.DayResponse']]:
        """
        List of days of the month.
        """
        return pulumi.get(self, "days_of_the_month")


@pulumi.output_type
class DailyRetentionScheduleResponse(dict):
    """
    Daily retention schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionDuration":
            suggest = "retention_duration"
        elif key == "retentionTimes":
            suggest = "retention_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DailyRetentionScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DailyRetentionScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DailyRetentionScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_duration: Optional['outputs.RetentionDurationResponse'] = None,
                 retention_times: Optional[Sequence[str]] = None):
        """
        Daily retention schedule.
        :param 'RetentionDurationResponse' retention_duration: Retention duration of retention Policy.
        :param Sequence[str] retention_times: Retention times of retention policy.
        """
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional['outputs.RetentionDurationResponse']:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[Sequence[str]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")


@pulumi.output_type
class DailyScheduleResponse(dict):
    """
    Daily schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleRunTimes":
            suggest = "schedule_run_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DailyScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DailyScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DailyScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_run_times: Optional[Sequence[str]] = None):
        """
        Daily schedule.
        :param Sequence[str] schedule_run_times: List of times of day this schedule has to be run.
        """
        if schedule_run_times is not None:
            pulumi.set(__self__, "schedule_run_times", schedule_run_times)

    @property
    @pulumi.getter(name="scheduleRunTimes")
    def schedule_run_times(self) -> Optional[Sequence[str]]:
        """
        List of times of day this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_times")


@pulumi.output_type
class DatabaseConfigurationResponse(dict):
    """
    Gets or sets the database configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "virtualMachineConfiguration":
            suggest = "virtual_machine_configuration"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "diskConfiguration":
            suggest = "disk_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: float,
                 subnet_id: str,
                 virtual_machine_configuration: 'outputs.VirtualMachineConfigurationResponse',
                 database_type: Optional[str] = None,
                 disk_configuration: Optional['outputs.DiskConfigurationResponse'] = None):
        """
        Gets or sets the database configuration.
        :param float instance_count: The number of database VMs.
        :param str subnet_id: The subnet id.
        :param 'VirtualMachineConfigurationResponse' virtual_machine_configuration: Gets or sets the virtual machine configuration.
        :param str database_type: The database type.
        :param 'DiskConfigurationResponse' disk_configuration: Gets or sets the disk configuration.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "virtual_machine_configuration", virtual_machine_configuration)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if disk_configuration is not None:
            pulumi.set(__self__, "disk_configuration", disk_configuration)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> float:
        """
        The number of database VMs.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="virtualMachineConfiguration")
    def virtual_machine_configuration(self) -> 'outputs.VirtualMachineConfigurationResponse':
        """
        Gets or sets the virtual machine configuration.
        """
        return pulumi.get(self, "virtual_machine_configuration")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="diskConfiguration")
    def disk_configuration(self) -> Optional['outputs.DiskConfigurationResponse']:
        """
        Gets or sets the disk configuration.
        """
        return pulumi.get(self, "disk_configuration")


@pulumi.output_type
class DatabaseServerFullResourceNamesResponse(dict):
    """
    The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilitySetName":
            suggest = "availability_set_name"
        elif key == "loadBalancer":
            suggest = "load_balancer"
        elif key == "virtualMachines":
            suggest = "virtual_machines"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseServerFullResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseServerFullResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseServerFullResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_set_name: Optional[str] = None,
                 load_balancer: Optional['outputs.LoadBalancerResourceNamesResponse'] = None,
                 virtual_machines: Optional[Sequence['outputs.VirtualMachineResourceNamesResponse']] = None):
        """
        The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
        :param str availability_set_name: The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
        :param 'LoadBalancerResourceNamesResponse' load_balancer: The resource names object for load balancer and related resources.
        :param Sequence['VirtualMachineResourceNamesResponse'] virtual_machines: The list of virtual machine naming details.
        """
        if availability_set_name is not None:
            pulumi.set(__self__, "availability_set_name", availability_set_name)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if virtual_machines is not None:
            pulumi.set(__self__, "virtual_machines", virtual_machines)

    @property
    @pulumi.getter(name="availabilitySetName")
    def availability_set_name(self) -> Optional[str]:
        """
        The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
        """
        return pulumi.get(self, "availability_set_name")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional['outputs.LoadBalancerResourceNamesResponse']:
        """
        The resource names object for load balancer and related resources.
        """
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter(name="virtualMachines")
    def virtual_machines(self) -> Optional[Sequence['outputs.VirtualMachineResourceNamesResponse']]:
        """
        The list of virtual machine naming details.
        """
        return pulumi.get(self, "virtual_machines")


@pulumi.output_type
class DatabaseVmDetailsResponse(dict):
    """
    Database VM details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageDetails":
            suggest = "storage_details"
        elif key == "virtualMachineId":
            suggest = "virtual_machine_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 storage_details: Sequence['outputs.StorageInformationResponse'],
                 virtual_machine_id: str):
        """
        Database VM details.
        :param str status: Defines the SAP Instance status.
        :param Sequence['StorageInformationResponse'] storage_details: Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_details", storage_details)
        pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Defines the SAP Instance status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageDetails")
    def storage_details(self) -> Sequence['outputs.StorageInformationResponse']:
        """
        Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage.
        """
        return pulumi.get(self, "storage_details")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> str:
        return pulumi.get(self, "virtual_machine_id")


@pulumi.output_type
class DayResponse(dict):
    """
    Day of the week.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLast":
            suggest = "is_last"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[int] = None,
                 is_last: Optional[bool] = None):
        """
        Day of the week.
        :param int date: Date of the month
        :param bool is_last: Whether Date is last date of month
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if is_last is not None:
            pulumi.set(__self__, "is_last", is_last)

    @property
    @pulumi.getter
    def date(self) -> Optional[int]:
        """
        Date of the month
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="isLast")
    def is_last(self) -> Optional[bool]:
        """
        Whether Date is last date of month
        """
        return pulumi.get(self, "is_last")


@pulumi.output_type
class DeployerVmPackagesResponse(dict):
    """
    Defines the url and storage account ID where deployer VM packages are uploaded
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageAccountId":
            suggest = "storage_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployerVmPackagesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployerVmPackagesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployerVmPackagesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_account_id: Optional[str] = None,
                 url: Optional[str] = None):
        """
        Defines the url and storage account ID where deployer VM packages are uploaded
        :param str storage_account_id: The deployer VM packages storage account id
        :param str url: The URL to the deployer VM packages file.
        """
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[str]:
        """
        The deployer VM packages storage account id
        """
        return pulumi.get(self, "storage_account_id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL to the deployer VM packages file.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class DeploymentConfigurationResponse(dict):
    """
    Deployment Configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"
        elif key == "appLocation":
            suggest = "app_location"
        elif key == "infrastructureConfiguration":
            suggest = "infrastructure_configuration"
        elif key == "softwareConfiguration":
            suggest = "software_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: str,
                 app_location: Optional[str] = None,
                 infrastructure_configuration: Optional[Any] = None,
                 software_configuration: Optional[Any] = None):
        """
        Deployment Configuration.
        :param str configuration_type: The configuration Type.
               Expected value is 'Deployment'.
        :param str app_location: The geo-location where the SAP system is to be created.
        :param Union['SingleServerConfigurationResponse', 'ThreeTierConfigurationResponse'] infrastructure_configuration: The infrastructure configuration.
        :param Union['ExternalInstallationSoftwareConfigurationResponse', 'SAPInstallWithoutOSConfigSoftwareConfigurationResponse', 'ServiceInitiatedSoftwareConfigurationResponse'] software_configuration: The software configuration.
        """
        pulumi.set(__self__, "configuration_type", 'Deployment')
        if app_location is not None:
            pulumi.set(__self__, "app_location", app_location)
        if infrastructure_configuration is not None:
            pulumi.set(__self__, "infrastructure_configuration", infrastructure_configuration)
        if software_configuration is not None:
            pulumi.set(__self__, "software_configuration", software_configuration)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The configuration Type.
        Expected value is 'Deployment'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="appLocation")
    def app_location(self) -> Optional[str]:
        """
        The geo-location where the SAP system is to be created.
        """
        return pulumi.get(self, "app_location")

    @property
    @pulumi.getter(name="infrastructureConfiguration")
    def infrastructure_configuration(self) -> Optional[Any]:
        """
        The infrastructure configuration.
        """
        return pulumi.get(self, "infrastructure_configuration")

    @property
    @pulumi.getter(name="softwareConfiguration")
    def software_configuration(self) -> Optional[Any]:
        """
        The software configuration.
        """
        return pulumi.get(self, "software_configuration")


@pulumi.output_type
class DeploymentWithOSConfigurationResponse(dict):
    """
    Deployment along with OS Configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"
        elif key == "appLocation":
            suggest = "app_location"
        elif key == "infrastructureConfiguration":
            suggest = "infrastructure_configuration"
        elif key == "osSapConfiguration":
            suggest = "os_sap_configuration"
        elif key == "softwareConfiguration":
            suggest = "software_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentWithOSConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentWithOSConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentWithOSConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: str,
                 app_location: Optional[str] = None,
                 infrastructure_configuration: Optional[Any] = None,
                 os_sap_configuration: Optional['outputs.OsSapConfigurationResponse'] = None,
                 software_configuration: Optional[Any] = None):
        """
        Deployment along with OS Configuration.
        :param str configuration_type: The configuration Type.
               Expected value is 'DeploymentWithOSConfig'.
        :param str app_location: The geo-location where the SAP system is to be created.
        :param Union['SingleServerConfigurationResponse', 'ThreeTierConfigurationResponse'] infrastructure_configuration: The infrastructure configuration.
        :param 'OsSapConfigurationResponse' os_sap_configuration: The OS and SAP configuration.
        :param Union['ExternalInstallationSoftwareConfigurationResponse', 'SAPInstallWithoutOSConfigSoftwareConfigurationResponse', 'ServiceInitiatedSoftwareConfigurationResponse'] software_configuration: The software configuration.
        """
        pulumi.set(__self__, "configuration_type", 'DeploymentWithOSConfig')
        if app_location is not None:
            pulumi.set(__self__, "app_location", app_location)
        if infrastructure_configuration is not None:
            pulumi.set(__self__, "infrastructure_configuration", infrastructure_configuration)
        if os_sap_configuration is not None:
            pulumi.set(__self__, "os_sap_configuration", os_sap_configuration)
        if software_configuration is not None:
            pulumi.set(__self__, "software_configuration", software_configuration)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The configuration Type.
        Expected value is 'DeploymentWithOSConfig'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="appLocation")
    def app_location(self) -> Optional[str]:
        """
        The geo-location where the SAP system is to be created.
        """
        return pulumi.get(self, "app_location")

    @property
    @pulumi.getter(name="infrastructureConfiguration")
    def infrastructure_configuration(self) -> Optional[Any]:
        """
        The infrastructure configuration.
        """
        return pulumi.get(self, "infrastructure_configuration")

    @property
    @pulumi.getter(name="osSapConfiguration")
    def os_sap_configuration(self) -> Optional['outputs.OsSapConfigurationResponse']:
        """
        The OS and SAP configuration.
        """
        return pulumi.get(self, "os_sap_configuration")

    @property
    @pulumi.getter(name="softwareConfiguration")
    def software_configuration(self) -> Optional[Any]:
        """
        The software configuration.
        """
        return pulumi.get(self, "software_configuration")


@pulumi.output_type
class DiscoveryConfigurationResponse(dict):
    """
    Discovery Details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appLocation":
            suggest = "app_location"
        elif key == "configurationType":
            suggest = "configuration_type"
        elif key == "centralServerVmId":
            suggest = "central_server_vm_id"
        elif key == "managedRgStorageAccountName":
            suggest = "managed_rg_storage_account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_location: str,
                 configuration_type: str,
                 central_server_vm_id: Optional[str] = None,
                 managed_rg_storage_account_name: Optional[str] = None):
        """
        Discovery Details.
        :param str app_location: The geo-location where the SAP system exists.
        :param str configuration_type: The configuration Type.
               Expected value is 'Discovery'.
        :param str central_server_vm_id: The virtual machine ID of the Central Server.
        :param str managed_rg_storage_account_name: The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
        """
        pulumi.set(__self__, "app_location", app_location)
        pulumi.set(__self__, "configuration_type", 'Discovery')
        if central_server_vm_id is not None:
            pulumi.set(__self__, "central_server_vm_id", central_server_vm_id)
        if managed_rg_storage_account_name is not None:
            pulumi.set(__self__, "managed_rg_storage_account_name", managed_rg_storage_account_name)

    @property
    @pulumi.getter(name="appLocation")
    def app_location(self) -> str:
        """
        The geo-location where the SAP system exists.
        """
        return pulumi.get(self, "app_location")

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The configuration Type.
        Expected value is 'Discovery'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="centralServerVmId")
    def central_server_vm_id(self) -> Optional[str]:
        """
        The virtual machine ID of the Central Server.
        """
        return pulumi.get(self, "central_server_vm_id")

    @property
    @pulumi.getter(name="managedRgStorageAccountName")
    def managed_rg_storage_account_name(self) -> Optional[str]:
        """
        The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
        """
        return pulumi.get(self, "managed_rg_storage_account_name")


@pulumi.output_type
class DiskConfigurationResponse(dict):
    """
    The Disk Configuration Details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskVolumeConfigurations":
            suggest = "disk_volume_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_volume_configurations: Optional[Mapping[str, 'outputs.DiskVolumeConfigurationResponse']] = None):
        """
        The Disk Configuration Details.
        :param Mapping[str, 'DiskVolumeConfigurationResponse'] disk_volume_configurations: The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
        """
        if disk_volume_configurations is not None:
            pulumi.set(__self__, "disk_volume_configurations", disk_volume_configurations)

    @property
    @pulumi.getter(name="diskVolumeConfigurations")
    def disk_volume_configurations(self) -> Optional[Mapping[str, 'outputs.DiskVolumeConfigurationResponse']]:
        """
        The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
        """
        return pulumi.get(self, "disk_volume_configurations")


@pulumi.output_type
class DiskDetailsResponse(dict):
    """
    The supported disk size details for a disk type.
    """
    def __init__(__self__, *,
                 disk_tier: Optional[str] = None,
                 iops_read_write: Optional[float] = None,
                 maximum_supported_disk_count: Optional[float] = None,
                 mbps_read_write: Optional[float] = None,
                 minimum_supported_disk_count: Optional[float] = None,
                 size_gb: Optional[float] = None,
                 sku: Optional['outputs.DiskSkuResponse'] = None):
        """
        The supported disk size details for a disk type.
        :param str disk_tier: The disk tier, e.g. P10, E10.
        :param float iops_read_write: The disk Iops.
        :param float maximum_supported_disk_count: The maximum supported disk count.
        :param float mbps_read_write: The disk provisioned throughput in MBps.
        :param float minimum_supported_disk_count: The minimum supported disk count.
        :param float size_gb: The disk size in GB.
        :param 'DiskSkuResponse' sku: The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
        """
        if disk_tier is not None:
            pulumi.set(__self__, "disk_tier", disk_tier)
        if iops_read_write is not None:
            pulumi.set(__self__, "iops_read_write", iops_read_write)
        if maximum_supported_disk_count is not None:
            pulumi.set(__self__, "maximum_supported_disk_count", maximum_supported_disk_count)
        if mbps_read_write is not None:
            pulumi.set(__self__, "mbps_read_write", mbps_read_write)
        if minimum_supported_disk_count is not None:
            pulumi.set(__self__, "minimum_supported_disk_count", minimum_supported_disk_count)
        if size_gb is not None:
            pulumi.set(__self__, "size_gb", size_gb)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter(name="diskTier")
    def disk_tier(self) -> Optional[str]:
        """
        The disk tier, e.g. P10, E10.
        """
        return pulumi.get(self, "disk_tier")

    @property
    @pulumi.getter(name="iopsReadWrite")
    def iops_read_write(self) -> Optional[float]:
        """
        The disk Iops.
        """
        return pulumi.get(self, "iops_read_write")

    @property
    @pulumi.getter(name="maximumSupportedDiskCount")
    def maximum_supported_disk_count(self) -> Optional[float]:
        """
        The maximum supported disk count.
        """
        return pulumi.get(self, "maximum_supported_disk_count")

    @property
    @pulumi.getter(name="mbpsReadWrite")
    def mbps_read_write(self) -> Optional[float]:
        """
        The disk provisioned throughput in MBps.
        """
        return pulumi.get(self, "mbps_read_write")

    @property
    @pulumi.getter(name="minimumSupportedDiskCount")
    def minimum_supported_disk_count(self) -> Optional[float]:
        """
        The minimum supported disk count.
        """
        return pulumi.get(self, "minimum_supported_disk_count")

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> Optional[float]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.DiskSkuResponse']:
        """
        The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class DiskExclusionPropertiesResponse(dict):
    """
    Defines the disk exclusion properties for virtual machine backup.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskLunList":
            suggest = "disk_lun_list"
        elif key == "isInclusionList":
            suggest = "is_inclusion_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskExclusionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskExclusionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskExclusionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_lun_list: Sequence[int],
                 is_inclusion_list: bool):
        """
        Defines the disk exclusion properties for virtual machine backup.
        :param Sequence[int] disk_lun_list: List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
        :param bool is_inclusion_list: Flag to indicate whether DiskLunList is to be included/ excluded from backup.
        """
        pulumi.set(__self__, "disk_lun_list", disk_lun_list)
        pulumi.set(__self__, "is_inclusion_list", is_inclusion_list)

    @property
    @pulumi.getter(name="diskLunList")
    def disk_lun_list(self) -> Sequence[int]:
        """
        List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
        """
        return pulumi.get(self, "disk_lun_list")

    @property
    @pulumi.getter(name="isInclusionList")
    def is_inclusion_list(self) -> bool:
        """
        Flag to indicate whether DiskLunList is to be included/ excluded from backup.
        """
        return pulumi.get(self, "is_inclusion_list")


@pulumi.output_type
class DiskSkuResponse(dict):
    """
    The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
        :param str name: Defines the disk sku name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Defines the disk sku name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DiskVolumeConfigurationResponse(dict):
    """
    The disk configuration required for the selected volume.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeGB":
            suggest = "size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskVolumeConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskVolumeConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskVolumeConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size_gb: Optional[float] = None,
                 sku: Optional['outputs.DiskSkuResponse'] = None):
        """
        The disk configuration required for the selected volume.
        :param float count: The total number of disks required for the concerned volume.
        :param float size_gb: The disk size in GB.
        :param 'DiskSkuResponse' sku: The disk SKU details.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if size_gb is not None:
            pulumi.set(__self__, "size_gb", size_gb)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        """
        The total number of disks required for the concerned volume.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> Optional[float]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.DiskSkuResponse']:
        """
        The disk SKU details.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class EnqueueReplicationServerPropertiesResponse(dict):
    """
    Defines the SAP Enqueue Replication Server (ERS) properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ersVersion":
            suggest = "ers_version"
        elif key == "instanceNo":
            suggest = "instance_no"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "kernelPatch":
            suggest = "kernel_patch"
        elif key == "kernelVersion":
            suggest = "kernel_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnqueueReplicationServerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnqueueReplicationServerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnqueueReplicationServerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ers_version: str,
                 health: str,
                 hostname: str,
                 instance_no: str,
                 ip_address: str,
                 kernel_patch: str,
                 kernel_version: str):
        """
        Defines the SAP Enqueue Replication Server (ERS) properties.
        :param str ers_version: Defines the type of Enqueue Replication Server.
        :param str health: Defines the health of SAP Instances.
        :param str hostname: ERS SAP Hostname.
        :param str instance_no: ERS Instance Number.
        :param str ip_address: ERS SAP IP Address.
        :param str kernel_patch: ERS SAP Kernel Patch level.
        :param str kernel_version: ERS SAP Kernel Version.
        """
        pulumi.set(__self__, "ers_version", ers_version)
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "instance_no", instance_no)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "kernel_patch", kernel_patch)
        pulumi.set(__self__, "kernel_version", kernel_version)

    @property
    @pulumi.getter(name="ersVersion")
    def ers_version(self) -> str:
        """
        Defines the type of Enqueue Replication Server.
        """
        return pulumi.get(self, "ers_version")

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        Defines the health of SAP Instances.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        ERS SAP Hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="instanceNo")
    def instance_no(self) -> str:
        """
        ERS Instance Number.
        """
        return pulumi.get(self, "instance_no")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        ERS SAP IP Address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="kernelPatch")
    def kernel_patch(self) -> str:
        """
        ERS SAP Kernel Patch level.
        """
        return pulumi.get(self, "kernel_patch")

    @property
    @pulumi.getter(name="kernelVersion")
    def kernel_version(self) -> str:
        """
        ERS SAP Kernel Version.
        """
        return pulumi.get(self, "kernel_version")


@pulumi.output_type
class EnqueueServerPropertiesResponse(dict):
    """
    Defines the SAP Enqueue Server properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnqueueServerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnqueueServerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnqueueServerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health: str,
                 hostname: str,
                 ip_address: str,
                 port: float):
        """
        Defines the SAP Enqueue Server properties.
        :param str health: Defines the health of SAP Instances.
        :param str hostname: Enqueue Server SAP Hostname.
        :param str ip_address: Enqueue Server SAP IP Address.
        :param float port: Enqueue Server Port.
        """
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        Defines the health of SAP Instances.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Enqueue Server SAP Hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        Enqueue Server SAP IP Address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        Enqueue Server Port.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ErrorDefinitionResponse(dict):
    """
    Error definition.
    """
    def __init__(__self__, *,
                 code: str,
                 details: Sequence['outputs.ErrorDefinitionResponse'],
                 message: str):
        """
        Error definition.
        :param str code: Service specific error code which serves as the substatus for the HTTP error code.
        :param Sequence['ErrorDefinitionResponse'] details: Internal error details.
        :param str message: Description of the error.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Service specific error code which serves as the substatus for the HTTP error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDefinitionResponse']:
        """
        Internal error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Description of the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ExistingRecoveryServicesVaultResponse(dict):
    """
    Existing recovery services vault.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vaultType":
            suggest = "vault_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExistingRecoveryServicesVaultResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExistingRecoveryServicesVaultResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExistingRecoveryServicesVaultResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 vault_type: str):
        """
        Existing recovery services vault.
        :param str id: The resource ID of the recovery services vault that has been created.
        :param str vault_type: The vault type, whether it is existing or has to be created.
               Expected value is 'Existing'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "vault_type", 'Existing')

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The resource ID of the recovery services vault that has been created.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> str:
        """
        The vault type, whether it is existing or has to be created.
        Expected value is 'Existing'.
        """
        return pulumi.get(self, "vault_type")


@pulumi.output_type
class ExternalInstallationSoftwareConfigurationResponse(dict):
    """
    The SAP Software configuration Input when the software is installed externally outside the service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "softwareInstallationType":
            suggest = "software_installation_type"
        elif key == "centralServerVmId":
            suggest = "central_server_vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalInstallationSoftwareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalInstallationSoftwareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalInstallationSoftwareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 software_installation_type: str,
                 central_server_vm_id: Optional[str] = None):
        """
        The SAP Software configuration Input when the software is installed externally outside the service.
        :param str software_installation_type: The SAP software installation Type.
               Expected value is 'External'.
        :param str central_server_vm_id: The resource ID of the virtual machine containing the central server instance.
        """
        pulumi.set(__self__, "software_installation_type", 'External')
        if central_server_vm_id is not None:
            pulumi.set(__self__, "central_server_vm_id", central_server_vm_id)

    @property
    @pulumi.getter(name="softwareInstallationType")
    def software_installation_type(self) -> str:
        """
        The SAP software installation Type.
        Expected value is 'External'.
        """
        return pulumi.get(self, "software_installation_type")

    @property
    @pulumi.getter(name="centralServerVmId")
    def central_server_vm_id(self) -> Optional[str]:
        """
        The resource ID of the virtual machine containing the central server instance.
        """
        return pulumi.get(self, "central_server_vm_id")


@pulumi.output_type
class GatewayServerPropertiesResponse(dict):
    """
    Defines the SAP Gateway Server properties.
    """
    def __init__(__self__, *,
                 health: str,
                 port: float):
        """
        Defines the SAP Gateway Server properties.
        :param str health: Defines the health of SAP Instances.
        :param float port: Gateway Port.
        """
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        Defines the health of SAP Instances.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        Gateway Port.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class HanaBackupDataResponse(dict):
    """
    Defines the HANA Backup data for a virtual instance for SAP.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPolicy":
            suggest = "backup_policy"
        elif key == "backupType":
            suggest = "backup_type"
        elif key == "hdbuserstoreKeyName":
            suggest = "hdbuserstore_key_name"
        elif key == "recoveryServicesVault":
            suggest = "recovery_services_vault"
        elif key == "dbInstanceSnapshotBackupPolicy":
            suggest = "db_instance_snapshot_backup_policy"
        elif key == "instanceNumber":
            suggest = "instance_number"
        elif key == "sslConfiguration":
            suggest = "ssl_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HanaBackupDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HanaBackupDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HanaBackupDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_policy: 'outputs.DBBackupPolicyPropertiesResponse',
                 backup_type: str,
                 hdbuserstore_key_name: str,
                 recovery_services_vault: Any,
                 db_instance_snapshot_backup_policy: Optional['outputs.DBBackupPolicyPropertiesResponse'] = None,
                 instance_number: Optional[str] = None,
                 ssl_configuration: Optional['outputs.SSLConfigurationResponse'] = None):
        """
        Defines the HANA Backup data for a virtual instance for SAP.
        :param 'DBBackupPolicyPropertiesResponse' backup_policy: Defines the policy properties for database backup.
        :param str backup_type: The type of backup, VM, SQL or HANA.
               Expected value is 'HANA'.
        :param str hdbuserstore_key_name: Name of the HANA Database User Store Key.
        :param Union['ExistingRecoveryServicesVaultResponse', 'NewRecoveryServicesVaultResponse'] recovery_services_vault: The properties of the recovery services vault used for backup.
        :param 'DBBackupPolicyPropertiesResponse' db_instance_snapshot_backup_policy: Defines the policy properties for database backup.
        :param str instance_number: Gets or sets the database instance number.
        :param 'SSLConfigurationResponse' ssl_configuration: Path of the SSL key store.
        """
        pulumi.set(__self__, "backup_policy", backup_policy)
        pulumi.set(__self__, "backup_type", 'HANA')
        pulumi.set(__self__, "hdbuserstore_key_name", hdbuserstore_key_name)
        pulumi.set(__self__, "recovery_services_vault", recovery_services_vault)
        if db_instance_snapshot_backup_policy is not None:
            pulumi.set(__self__, "db_instance_snapshot_backup_policy", db_instance_snapshot_backup_policy)
        if instance_number is not None:
            pulumi.set(__self__, "instance_number", instance_number)
        if ssl_configuration is not None:
            pulumi.set(__self__, "ssl_configuration", ssl_configuration)

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> 'outputs.DBBackupPolicyPropertiesResponse':
        """
        Defines the policy properties for database backup.
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        The type of backup, VM, SQL or HANA.
        Expected value is 'HANA'.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="hdbuserstoreKeyName")
    def hdbuserstore_key_name(self) -> str:
        """
        Name of the HANA Database User Store Key.
        """
        return pulumi.get(self, "hdbuserstore_key_name")

    @property
    @pulumi.getter(name="recoveryServicesVault")
    def recovery_services_vault(self) -> Any:
        """
        The properties of the recovery services vault used for backup.
        """
        return pulumi.get(self, "recovery_services_vault")

    @property
    @pulumi.getter(name="dbInstanceSnapshotBackupPolicy")
    def db_instance_snapshot_backup_policy(self) -> Optional['outputs.DBBackupPolicyPropertiesResponse']:
        """
        Defines the policy properties for database backup.
        """
        return pulumi.get(self, "db_instance_snapshot_backup_policy")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> Optional[str]:
        """
        Gets or sets the database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="sslConfiguration")
    def ssl_configuration(self) -> Optional['outputs.SSLConfigurationResponse']:
        """
        Path of the SSL key store.
        """
        return pulumi.get(self, "ssl_configuration")


@pulumi.output_type
class HighAvailabilityConfigurationResponse(dict):
    """
    Gets or sets the high availability configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highAvailabilityType":
            suggest = "high_availability_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HighAvailabilityConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HighAvailabilityConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HighAvailabilityConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 high_availability_type: str):
        """
        Gets or sets the high availability configuration.
        :param str high_availability_type: The high availability type.
        """
        pulumi.set(__self__, "high_availability_type", high_availability_type)

    @property
    @pulumi.getter(name="highAvailabilityType")
    def high_availability_type(self) -> str:
        """
        The high availability type.
        """
        return pulumi.get(self, "high_availability_type")


@pulumi.output_type
class HighAvailabilitySoftwareConfigurationResponse(dict):
    """
    Gets or sets the HA software configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fencingClientId":
            suggest = "fencing_client_id"
        elif key == "fencingClientPassword":
            suggest = "fencing_client_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HighAvailabilitySoftwareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HighAvailabilitySoftwareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HighAvailabilitySoftwareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fencing_client_id: str,
                 fencing_client_password: str):
        """
        Gets or sets the HA software configuration.
        :param str fencing_client_id: The fencing client id.
        :param str fencing_client_password: The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
        """
        pulumi.set(__self__, "fencing_client_id", fencing_client_id)
        pulumi.set(__self__, "fencing_client_password", fencing_client_password)

    @property
    @pulumi.getter(name="fencingClientId")
    def fencing_client_id(self) -> str:
        """
        The fencing client id.
        """
        return pulumi.get(self, "fencing_client_id")

    @property
    @pulumi.getter(name="fencingClientPassword")
    def fencing_client_password(self) -> str:
        """
        The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
        """
        return pulumi.get(self, "fencing_client_password")


@pulumi.output_type
class HourlyScheduleResponse(dict):
    """
    Hourly schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleWindowDuration":
            suggest = "schedule_window_duration"
        elif key == "scheduleWindowStartTime":
            suggest = "schedule_window_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HourlyScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HourlyScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HourlyScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 schedule_window_duration: Optional[int] = None,
                 schedule_window_start_time: Optional[str] = None):
        """
        Hourly schedule.
        :param int interval: Interval at which backup needs to be triggered. For hourly the value
                can be 4/6/8/12
        :param int schedule_window_duration: To specify duration of the backup window
        :param str schedule_window_start_time: To specify start time of the backup window
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if schedule_window_duration is not None:
            pulumi.set(__self__, "schedule_window_duration", schedule_window_duration)
        if schedule_window_start_time is not None:
            pulumi.set(__self__, "schedule_window_start_time", schedule_window_start_time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Interval at which backup needs to be triggered. For hourly the value
         can be 4/6/8/12
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="scheduleWindowDuration")
    def schedule_window_duration(self) -> Optional[int]:
        """
        To specify duration of the backup window
        """
        return pulumi.get(self, "schedule_window_duration")

    @property
    @pulumi.getter(name="scheduleWindowStartTime")
    def schedule_window_start_time(self) -> Optional[str]:
        """
        To specify start time of the backup window
        """
        return pulumi.get(self, "schedule_window_start_time")


@pulumi.output_type
class ImageReferenceResponse(dict):
    """
    Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 offer: Optional[str] = None,
                 publisher: Optional[str] = None,
                 sku: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
        :param str id: Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
        :param str offer: Specifies the offer of the platform image or marketplace image used to create the virtual machine.
        :param str publisher: The image publisher.
        :param str sku: The image SKU.
        :param str version: Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def offer(self) -> Optional[str]:
        """
        Specifies the offer of the platform image or marketplace image used to create the virtual machine.
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        The image publisher.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        The image SKU.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class InstantRPAdditionalDetailsResponse(dict):
    """
    Instant recovery point additional details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBackupRGNamePrefix":
            suggest = "azure_backup_rg_name_prefix"
        elif key == "azureBackupRGNameSuffix":
            suggest = "azure_backup_rg_name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstantRPAdditionalDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstantRPAdditionalDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstantRPAdditionalDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_backup_rg_name_prefix: Optional[str] = None,
                 azure_backup_rg_name_suffix: Optional[str] = None):
        """
        Instant recovery point additional details.
        :param str azure_backup_rg_name_prefix: Azure backup resource group name prefix.
        :param str azure_backup_rg_name_suffix: Azure backup resource group name suffix.
        """
        if azure_backup_rg_name_prefix is not None:
            pulumi.set(__self__, "azure_backup_rg_name_prefix", azure_backup_rg_name_prefix)
        if azure_backup_rg_name_suffix is not None:
            pulumi.set(__self__, "azure_backup_rg_name_suffix", azure_backup_rg_name_suffix)

    @property
    @pulumi.getter(name="azureBackupRGNamePrefix")
    def azure_backup_rg_name_prefix(self) -> Optional[str]:
        """
        Azure backup resource group name prefix.
        """
        return pulumi.get(self, "azure_backup_rg_name_prefix")

    @property
    @pulumi.getter(name="azureBackupRGNameSuffix")
    def azure_backup_rg_name_suffix(self) -> Optional[str]:
        """
        Azure backup resource group name suffix.
        """
        return pulumi.get(self, "azure_backup_rg_name_suffix")


@pulumi.output_type
class LinuxConfigurationResponse(dict):
    """
    Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osType":
            suggest = "os_type"
        elif key == "disablePasswordAuthentication":
            suggest = "disable_password_authentication"
        elif key == "sshKeyPair":
            suggest = "ssh_key_pair"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinuxConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinuxConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinuxConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_type: str,
                 disable_password_authentication: Optional[bool] = None,
                 ssh: Optional['outputs.SshConfigurationResponse'] = None,
                 ssh_key_pair: Optional['outputs.SshKeyPairResponse'] = None):
        """
        Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
        :param str os_type: The OS Type
               Expected value is 'Linux'.
        :param bool disable_password_authentication: Specifies whether password authentication should be disabled.
        :param 'SshConfigurationResponse' ssh: Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
        :param 'SshKeyPairResponse' ssh_key_pair: The SSH Key-pair used to authenticate with the VM's.
        """
        pulumi.set(__self__, "os_type", 'Linux')
        if disable_password_authentication is not None:
            pulumi.set(__self__, "disable_password_authentication", disable_password_authentication)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssh_key_pair is not None:
            pulumi.set(__self__, "ssh_key_pair", ssh_key_pair)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The OS Type
        Expected value is 'Linux'.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="disablePasswordAuthentication")
    def disable_password_authentication(self) -> Optional[bool]:
        """
        Specifies whether password authentication should be disabled.
        """
        return pulumi.get(self, "disable_password_authentication")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.SshConfigurationResponse']:
        """
        Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
        """
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="sshKeyPair")
    def ssh_key_pair(self) -> Optional['outputs.SshKeyPairResponse']:
        """
        The SSH Key-pair used to authenticate with the VM's.
        """
        return pulumi.get(self, "ssh_key_pair")


@pulumi.output_type
class LoadBalancerDetailsResponse(dict):
    """
    The Load Balancer details such as Load Balancer ID.
    """
    def __init__(__self__, *,
                 id: str):
        """
        The Load Balancer details such as Load Balancer ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class LoadBalancerResourceNamesResponse(dict):
    """
    The resource names object for load balancer and related resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPoolNames":
            suggest = "backend_pool_names"
        elif key == "frontendIpConfigurationNames":
            suggest = "frontend_ip_configuration_names"
        elif key == "healthProbeNames":
            suggest = "health_probe_names"
        elif key == "loadBalancerName":
            suggest = "load_balancer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_pool_names: Optional[Sequence[str]] = None,
                 frontend_ip_configuration_names: Optional[Sequence[str]] = None,
                 health_probe_names: Optional[Sequence[str]] = None,
                 load_balancer_name: Optional[str] = None):
        """
        The resource names object for load balancer and related resources.
        :param Sequence[str] backend_pool_names: The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
        :param Sequence[str] frontend_ip_configuration_names: The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
        :param Sequence[str] health_probe_names: The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
        :param str load_balancer_name: The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
        """
        if backend_pool_names is not None:
            pulumi.set(__self__, "backend_pool_names", backend_pool_names)
        if frontend_ip_configuration_names is not None:
            pulumi.set(__self__, "frontend_ip_configuration_names", frontend_ip_configuration_names)
        if health_probe_names is not None:
            pulumi.set(__self__, "health_probe_names", health_probe_names)
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)

    @property
    @pulumi.getter(name="backendPoolNames")
    def backend_pool_names(self) -> Optional[Sequence[str]]:
        """
        The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
        """
        return pulumi.get(self, "backend_pool_names")

    @property
    @pulumi.getter(name="frontendIpConfigurationNames")
    def frontend_ip_configuration_names(self) -> Optional[Sequence[str]]:
        """
        The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
        """
        return pulumi.get(self, "frontend_ip_configuration_names")

    @property
    @pulumi.getter(name="healthProbeNames")
    def health_probe_names(self) -> Optional[Sequence[str]]:
        """
        The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
        """
        return pulumi.get(self, "health_probe_names")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[str]:
        """
        The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
        """
        return pulumi.get(self, "load_balancer_name")


@pulumi.output_type
class LogSchedulePolicyResponse(dict):
    """
    Log policy schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schedulePolicyType":
            suggest = "schedule_policy_type"
        elif key == "scheduleFrequencyInMins":
            suggest = "schedule_frequency_in_mins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSchedulePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSchedulePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSchedulePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_policy_type: str,
                 schedule_frequency_in_mins: Optional[int] = None):
        """
        Log policy schedule.
        :param str schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'LogSchedulePolicy'.
        :param int schedule_frequency_in_mins: Frequency of the log schedule operation of this policy in minutes.
        """
        pulumi.set(__self__, "schedule_policy_type", 'LogSchedulePolicy')
        if schedule_frequency_in_mins is not None:
            pulumi.set(__self__, "schedule_frequency_in_mins", schedule_frequency_in_mins)

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'LogSchedulePolicy'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @property
    @pulumi.getter(name="scheduleFrequencyInMins")
    def schedule_frequency_in_mins(self) -> Optional[int]:
        """
        Frequency of the log schedule operation of this policy in minutes.
        """
        return pulumi.get(self, "schedule_frequency_in_mins")


@pulumi.output_type
class LongTermRetentionPolicyResponse(dict):
    """
    Long term retention policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPolicyType":
            suggest = "retention_policy_type"
        elif key == "dailySchedule":
            suggest = "daily_schedule"
        elif key == "monthlySchedule":
            suggest = "monthly_schedule"
        elif key == "weeklySchedule":
            suggest = "weekly_schedule"
        elif key == "yearlySchedule":
            suggest = "yearly_schedule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LongTermRetentionPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LongTermRetentionPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LongTermRetentionPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_policy_type: str,
                 daily_schedule: Optional['outputs.DailyRetentionScheduleResponse'] = None,
                 monthly_schedule: Optional['outputs.MonthlyRetentionScheduleResponse'] = None,
                 weekly_schedule: Optional['outputs.WeeklyRetentionScheduleResponse'] = None,
                 yearly_schedule: Optional['outputs.YearlyRetentionScheduleResponse'] = None):
        """
        Long term retention policy.
        :param str retention_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'LongTermRetentionPolicy'.
        :param 'DailyRetentionScheduleResponse' daily_schedule: Daily retention schedule of the protection policy.
        :param 'MonthlyRetentionScheduleResponse' monthly_schedule: Monthly retention schedule of the protection policy.
        :param 'WeeklyRetentionScheduleResponse' weekly_schedule: Weekly retention schedule of the protection policy.
        :param 'YearlyRetentionScheduleResponse' yearly_schedule: Yearly retention schedule of the protection policy.
        """
        pulumi.set(__self__, "retention_policy_type", 'LongTermRetentionPolicy')
        if daily_schedule is not None:
            pulumi.set(__self__, "daily_schedule", daily_schedule)
        if monthly_schedule is not None:
            pulumi.set(__self__, "monthly_schedule", monthly_schedule)
        if weekly_schedule is not None:
            pulumi.set(__self__, "weekly_schedule", weekly_schedule)
        if yearly_schedule is not None:
            pulumi.set(__self__, "yearly_schedule", yearly_schedule)

    @property
    @pulumi.getter(name="retentionPolicyType")
    def retention_policy_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'LongTermRetentionPolicy'.
        """
        return pulumi.get(self, "retention_policy_type")

    @property
    @pulumi.getter(name="dailySchedule")
    def daily_schedule(self) -> Optional['outputs.DailyRetentionScheduleResponse']:
        """
        Daily retention schedule of the protection policy.
        """
        return pulumi.get(self, "daily_schedule")

    @property
    @pulumi.getter(name="monthlySchedule")
    def monthly_schedule(self) -> Optional['outputs.MonthlyRetentionScheduleResponse']:
        """
        Monthly retention schedule of the protection policy.
        """
        return pulumi.get(self, "monthly_schedule")

    @property
    @pulumi.getter(name="weeklySchedule")
    def weekly_schedule(self) -> Optional['outputs.WeeklyRetentionScheduleResponse']:
        """
        Weekly retention schedule of the protection policy.
        """
        return pulumi.get(self, "weekly_schedule")

    @property
    @pulumi.getter(name="yearlySchedule")
    def yearly_schedule(self) -> Optional['outputs.YearlyRetentionScheduleResponse']:
        """
        Yearly retention schedule of the protection policy.
        """
        return pulumi.get(self, "yearly_schedule")


@pulumi.output_type
class LongTermSchedulePolicyResponse(dict):
    """
    Long term policy schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schedulePolicyType":
            suggest = "schedule_policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LongTermSchedulePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LongTermSchedulePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LongTermSchedulePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_policy_type: str):
        """
        Long term policy schedule.
        :param str schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'LongTermSchedulePolicy'.
        """
        pulumi.set(__self__, "schedule_policy_type", 'LongTermSchedulePolicy')

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'LongTermSchedulePolicy'.
        """
        return pulumi.get(self, "schedule_policy_type")


@pulumi.output_type
class ManagedRGConfigurationResponse(dict):
    """
    Managed resource group configuration
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Managed resource group configuration
        :param str name: Managed resource group name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Managed resource group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MessageServerPropertiesResponse(dict):
    """
    Defines the SAP message server properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"
        elif key == "internalMsPort":
            suggest = "internal_ms_port"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "msPort":
            suggest = "ms_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageServerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageServerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageServerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health: str,
                 hostname: str,
                 http_port: float,
                 https_port: float,
                 internal_ms_port: float,
                 ip_address: str,
                 ms_port: float):
        """
        Defines the SAP message server properties.
        :param str health: Defines the health of SAP Instances.
        :param str hostname: message server SAP Hostname.
        :param float http_port: message server HTTP Port.
        :param float https_port: message server HTTPS Port.
        :param float internal_ms_port: message server internal MS port.
        :param str ip_address: message server IP Address.
        :param float ms_port: message server port.
        """
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "internal_ms_port", internal_ms_port)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ms_port", ms_port)

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        Defines the health of SAP Instances.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        message server SAP Hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> float:
        """
        message server HTTP Port.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> float:
        """
        message server HTTPS Port.
        """
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="internalMsPort")
    def internal_ms_port(self) -> float:
        """
        message server internal MS port.
        """
        return pulumi.get(self, "internal_ms_port")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        message server IP Address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="msPort")
    def ms_port(self) -> float:
        """
        message server port.
        """
        return pulumi.get(self, "ms_port")


@pulumi.output_type
class MonthlyRetentionScheduleResponse(dict):
    """
    Monthly retention schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionDuration":
            suggest = "retention_duration"
        elif key == "retentionScheduleDaily":
            suggest = "retention_schedule_daily"
        elif key == "retentionScheduleFormatType":
            suggest = "retention_schedule_format_type"
        elif key == "retentionScheduleWeekly":
            suggest = "retention_schedule_weekly"
        elif key == "retentionTimes":
            suggest = "retention_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonthlyRetentionScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonthlyRetentionScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonthlyRetentionScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_duration: Optional['outputs.RetentionDurationResponse'] = None,
                 retention_schedule_daily: Optional['outputs.DailyRetentionFormatResponse'] = None,
                 retention_schedule_format_type: Optional[str] = None,
                 retention_schedule_weekly: Optional['outputs.WeeklyRetentionFormatResponse'] = None,
                 retention_times: Optional[Sequence[str]] = None):
        """
        Monthly retention schedule.
        :param 'RetentionDurationResponse' retention_duration: Retention duration of retention Policy.
        :param 'DailyRetentionFormatResponse' retention_schedule_daily: Daily retention format for monthly retention policy.
        :param str retention_schedule_format_type: Retention schedule format type for monthly retention policy.
        :param 'WeeklyRetentionFormatResponse' retention_schedule_weekly: Weekly retention format for monthly retention policy.
        :param Sequence[str] retention_times: Retention times of retention policy.
        """
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_schedule_daily is not None:
            pulumi.set(__self__, "retention_schedule_daily", retention_schedule_daily)
        if retention_schedule_format_type is not None:
            pulumi.set(__self__, "retention_schedule_format_type", retention_schedule_format_type)
        if retention_schedule_weekly is not None:
            pulumi.set(__self__, "retention_schedule_weekly", retention_schedule_weekly)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional['outputs.RetentionDurationResponse']:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @property
    @pulumi.getter(name="retentionScheduleDaily")
    def retention_schedule_daily(self) -> Optional['outputs.DailyRetentionFormatResponse']:
        """
        Daily retention format for monthly retention policy.
        """
        return pulumi.get(self, "retention_schedule_daily")

    @property
    @pulumi.getter(name="retentionScheduleFormatType")
    def retention_schedule_format_type(self) -> Optional[str]:
        """
        Retention schedule format type for monthly retention policy.
        """
        return pulumi.get(self, "retention_schedule_format_type")

    @property
    @pulumi.getter(name="retentionScheduleWeekly")
    def retention_schedule_weekly(self) -> Optional['outputs.WeeklyRetentionFormatResponse']:
        """
        Weekly retention format for monthly retention policy.
        """
        return pulumi.get(self, "retention_schedule_weekly")

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[Sequence[str]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")


@pulumi.output_type
class MountFileShareConfigurationResponse(dict):
    """
    Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountFileShareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountFileShareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountFileShareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: str,
                 id: str,
                 private_endpoint_id: str):
        """
        Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
        :param str configuration_type: The type of file share config.
               Expected value is 'Mount'.
        :param str id: The fileshare resource ID
        :param str private_endpoint_id: The private endpoint resource ID
        """
        pulumi.set(__self__, "configuration_type", 'Mount')
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The type of file share config.
        Expected value is 'Mount'.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The fileshare resource ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        """
        The private endpoint resource ID
        """
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class NetworkConfigurationResponse(dict):
    """
    Defines the network configuration type for SAP system infrastructure that is being deployed 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSecondaryIpEnabled":
            suggest = "is_secondary_ip_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_secondary_ip_enabled: Optional[bool] = None):
        """
        Defines the network configuration type for SAP system infrastructure that is being deployed 
        :param bool is_secondary_ip_enabled: Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
        """
        if is_secondary_ip_enabled is None:
            is_secondary_ip_enabled = False
        if is_secondary_ip_enabled is not None:
            pulumi.set(__self__, "is_secondary_ip_enabled", is_secondary_ip_enabled)

    @property
    @pulumi.getter(name="isSecondaryIpEnabled")
    def is_secondary_ip_enabled(self) -> Optional[bool]:
        """
        Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
        """
        return pulumi.get(self, "is_secondary_ip_enabled")


@pulumi.output_type
class NetworkInterfaceResourceNamesResponse(dict):
    """
    The resource names object for network interface and related resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaceName":
            suggest = "network_interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interface_name: Optional[str] = None):
        """
        The resource names object for network interface and related resources.
        :param str network_interface_name: The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
        """
        if network_interface_name is not None:
            pulumi.set(__self__, "network_interface_name", network_interface_name)

    @property
    @pulumi.getter(name="networkInterfaceName")
    def network_interface_name(self) -> Optional[str]:
        """
        The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
        """
        return pulumi.get(self, "network_interface_name")


@pulumi.output_type
class NewRecoveryServicesVaultResponse(dict):
    """
    New recovery services vault.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroup":
            suggest = "resource_group"
        elif key == "vaultType":
            suggest = "vault_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NewRecoveryServicesVaultResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NewRecoveryServicesVaultResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NewRecoveryServicesVaultResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 resource_group: str,
                 vault_type: str):
        """
        New recovery services vault.
        :param str name: The name of the recovery services vault has to be created.
        :param str resource_group: The name of the resource group where the recovery services vault has to be created.
        :param str vault_type: The vault type, whether it is existing or has to be created.
               Expected value is 'New'.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "vault_type", 'New')

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the recovery services vault has to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        The name of the resource group where the recovery services vault has to be created.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> str:
        """
        The vault type, whether it is existing or has to be created.
        Expected value is 'New'.
        """
        return pulumi.get(self, "vault_type")


@pulumi.output_type
class OSProfileResponse(dict):
    """
    Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminPassword":
            suggest = "admin_password"
        elif key == "adminUsername":
            suggest = "admin_username"
        elif key == "osConfiguration":
            suggest = "os_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OSProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OSProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OSProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 os_configuration: Optional[Any] = None):
        """
        Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
        :param str admin_password: Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
        :param str admin_username: Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
        :param Union['LinuxConfigurationResponse', 'WindowsConfigurationResponse'] os_configuration: Specifies Windows operating system settings on the virtual machine.
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if os_configuration is not None:
            pulumi.set(__self__, "os_configuration", os_configuration)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        """
        Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        """
        Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter(name="osConfiguration")
    def os_configuration(self) -> Optional[Any]:
        """
        Specifies Windows operating system settings on the virtual machine.
        """
        return pulumi.get(self, "os_configuration")


@pulumi.output_type
class OsSapConfigurationResponse(dict):
    """
    Defines the OS and SAP Configurations for Deployment
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployerVmPackages":
            suggest = "deployer_vm_packages"
        elif key == "sapFqdn":
            suggest = "sap_fqdn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsSapConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsSapConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsSapConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployer_vm_packages: Optional['outputs.DeployerVmPackagesResponse'] = None,
                 sap_fqdn: Optional[str] = None):
        """
        Defines the OS and SAP Configurations for Deployment
        :param 'DeployerVmPackagesResponse' deployer_vm_packages: The url and storage account ID where deployer VM packages are uploaded
        :param str sap_fqdn: The FQDN to set for the SAP system
        """
        if deployer_vm_packages is not None:
            pulumi.set(__self__, "deployer_vm_packages", deployer_vm_packages)
        if sap_fqdn is not None:
            pulumi.set(__self__, "sap_fqdn", sap_fqdn)

    @property
    @pulumi.getter(name="deployerVmPackages")
    def deployer_vm_packages(self) -> Optional['outputs.DeployerVmPackagesResponse']:
        """
        The url and storage account ID where deployer VM packages are uploaded
        """
        return pulumi.get(self, "deployer_vm_packages")

    @property
    @pulumi.getter(name="sapFqdn")
    def sap_fqdn(self) -> Optional[str]:
        """
        The FQDN to set for the SAP system
        """
        return pulumi.get(self, "sap_fqdn")


@pulumi.output_type
class RetentionDurationResponse(dict):
    """
    Retention duration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationType":
            suggest = "duration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetentionDurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetentionDurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetentionDurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[int] = None,
                 duration_type: Optional[str] = None):
        """
        Retention duration.
        :param int count: Count of duration types. Retention duration is obtained by the counting the duration type Count times.
               For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
        :param str duration_type: Retention duration type of retention policy.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if duration_type is not None:
            pulumi.set(__self__, "duration_type", duration_type)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count of duration types. Retention duration is obtained by the counting the duration type Count times.
        For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="durationType")
    def duration_type(self) -> Optional[str]:
        """
        Retention duration type of retention policy.
        """
        return pulumi.get(self, "duration_type")


@pulumi.output_type
class SAPAvailabilityZonePairResponse(dict):
    """
    The SAP Availability Zone Pair.
    """
    def __init__(__self__, *,
                 zone_a: Optional[float] = None,
                 zone_b: Optional[float] = None):
        """
        The SAP Availability Zone Pair.
        :param float zone_a: The zone A.
        :param float zone_b: The zone B.
        """
        if zone_a is not None:
            pulumi.set(__self__, "zone_a", zone_a)
        if zone_b is not None:
            pulumi.set(__self__, "zone_b", zone_b)

    @property
    @pulumi.getter(name="zoneA")
    def zone_a(self) -> Optional[float]:
        """
        The zone A.
        """
        return pulumi.get(self, "zone_a")

    @property
    @pulumi.getter(name="zoneB")
    def zone_b(self) -> Optional[float]:
        """
        The zone B.
        """
        return pulumi.get(self, "zone_b")


@pulumi.output_type
class SAPDiskConfigurationResponse(dict):
    """
    The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
    """
    def __init__(__self__, *,
                 recommended_configuration: Optional['outputs.DiskVolumeConfigurationResponse'] = None,
                 supported_configurations: Optional[Sequence['outputs.DiskDetailsResponse']] = None):
        """
        The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
        :param 'DiskVolumeConfigurationResponse' recommended_configuration: The recommended disk details for a given VM Sku.
        :param Sequence['DiskDetailsResponse'] supported_configurations: The list of supported disks for a given VM Sku.
        """
        if recommended_configuration is not None:
            pulumi.set(__self__, "recommended_configuration", recommended_configuration)
        if supported_configurations is not None:
            pulumi.set(__self__, "supported_configurations", supported_configurations)

    @property
    @pulumi.getter(name="recommendedConfiguration")
    def recommended_configuration(self) -> Optional['outputs.DiskVolumeConfigurationResponse']:
        """
        The recommended disk details for a given VM Sku.
        """
        return pulumi.get(self, "recommended_configuration")

    @property
    @pulumi.getter(name="supportedConfigurations")
    def supported_configurations(self) -> Optional[Sequence['outputs.DiskDetailsResponse']]:
        """
        The list of supported disks for a given VM Sku.
        """
        return pulumi.get(self, "supported_configurations")


@pulumi.output_type
class SAPInstallWithoutOSConfigSoftwareConfigurationResponse(dict):
    """
    The SAP Software configuration Input when the software is to be installed by service without OS Configurations
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bomUrl":
            suggest = "bom_url"
        elif key == "sapBitsStorageAccountId":
            suggest = "sap_bits_storage_account_id"
        elif key == "softwareInstallationType":
            suggest = "software_installation_type"
        elif key == "softwareVersion":
            suggest = "software_version"
        elif key == "highAvailabilitySoftwareConfiguration":
            suggest = "high_availability_software_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SAPInstallWithoutOSConfigSoftwareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SAPInstallWithoutOSConfigSoftwareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SAPInstallWithoutOSConfigSoftwareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bom_url: str,
                 sap_bits_storage_account_id: str,
                 software_installation_type: str,
                 software_version: str,
                 high_availability_software_configuration: Optional['outputs.HighAvailabilitySoftwareConfigurationResponse'] = None):
        """
        The SAP Software configuration Input when the software is to be installed by service without OS Configurations
        :param str bom_url: The URL to the SAP Build of Materials(BOM) file.
        :param str sap_bits_storage_account_id: The SAP bits storage account id.
        :param str software_installation_type: The SAP software installation Type.
               Expected value is 'SAPInstallWithoutOSConfig'.
        :param str software_version: The software version to install.
        :param 'HighAvailabilitySoftwareConfigurationResponse' high_availability_software_configuration: Gets or sets the HA software configuration.
        """
        pulumi.set(__self__, "bom_url", bom_url)
        pulumi.set(__self__, "sap_bits_storage_account_id", sap_bits_storage_account_id)
        pulumi.set(__self__, "software_installation_type", 'SAPInstallWithoutOSConfig')
        pulumi.set(__self__, "software_version", software_version)
        if high_availability_software_configuration is not None:
            pulumi.set(__self__, "high_availability_software_configuration", high_availability_software_configuration)

    @property
    @pulumi.getter(name="bomUrl")
    def bom_url(self) -> str:
        """
        The URL to the SAP Build of Materials(BOM) file.
        """
        return pulumi.get(self, "bom_url")

    @property
    @pulumi.getter(name="sapBitsStorageAccountId")
    def sap_bits_storage_account_id(self) -> str:
        """
        The SAP bits storage account id.
        """
        return pulumi.get(self, "sap_bits_storage_account_id")

    @property
    @pulumi.getter(name="softwareInstallationType")
    def software_installation_type(self) -> str:
        """
        The SAP software installation Type.
        Expected value is 'SAPInstallWithoutOSConfig'.
        """
        return pulumi.get(self, "software_installation_type")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        """
        The software version to install.
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="highAvailabilitySoftwareConfiguration")
    def high_availability_software_configuration(self) -> Optional['outputs.HighAvailabilitySoftwareConfigurationResponse']:
        """
        Gets or sets the HA software configuration.
        """
        return pulumi.get(self, "high_availability_software_configuration")


@pulumi.output_type
class SAPSupportedSkuResponse(dict):
    """
    The SAP supported SKU.
    """
    def __init__(__self__, *,
                 is_app_server_certified: Optional[bool] = None,
                 is_database_certified: Optional[bool] = None,
                 vm_sku: Optional[str] = None):
        """
        The SAP supported SKU.
        :param bool is_app_server_certified: True if the Sku is certified for App server in the SAP system.
        :param bool is_database_certified: True if the Sku is certified for Database server in the SAP system.
        :param str vm_sku: The VM Sku.
        """
        if is_app_server_certified is not None:
            pulumi.set(__self__, "is_app_server_certified", is_app_server_certified)
        if is_database_certified is not None:
            pulumi.set(__self__, "is_database_certified", is_database_certified)
        if vm_sku is not None:
            pulumi.set(__self__, "vm_sku", vm_sku)

    @property
    @pulumi.getter(name="isAppServerCertified")
    def is_app_server_certified(self) -> Optional[bool]:
        """
        True if the Sku is certified for App server in the SAP system.
        """
        return pulumi.get(self, "is_app_server_certified")

    @property
    @pulumi.getter(name="isDatabaseCertified")
    def is_database_certified(self) -> Optional[bool]:
        """
        True if the Sku is certified for Database server in the SAP system.
        """
        return pulumi.get(self, "is_database_certified")

    @property
    @pulumi.getter(name="vmSku")
    def vm_sku(self) -> Optional[str]:
        """
        The VM Sku.
        """
        return pulumi.get(self, "vm_sku")


@pulumi.output_type
class SAPVirtualInstanceErrorResponse(dict):
    """
    An error response from the Virtual Instance for SAP Workload service.
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ErrorDefinitionResponse'] = None):
        """
        An error response from the Virtual Instance for SAP Workload service.
        :param 'ErrorDefinitionResponse' properties: The Virtual Instance for SAP error body.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ErrorDefinitionResponse']:
        """
        The Virtual Instance for SAP error body.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class SSLConfigurationResponse(dict):
    """
    Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslCryptoProvider":
            suggest = "ssl_crypto_provider"
        elif key == "sslHostNameInCertificate":
            suggest = "ssl_host_name_in_certificate"
        elif key == "sslKeyStore":
            suggest = "ssl_key_store"
        elif key == "sslTrustStore":
            suggest = "ssl_trust_store"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSLConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSLConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSLConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssl_crypto_provider: Optional[str] = None,
                 ssl_host_name_in_certificate: Optional[str] = None,
                 ssl_key_store: Optional[str] = None,
                 ssl_trust_store: Optional[str] = None):
        """
        Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
        :param str ssl_crypto_provider: Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
        :param str ssl_host_name_in_certificate: Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
        :param str ssl_key_store: Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
        :param str ssl_trust_store: Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
        """
        if ssl_crypto_provider is not None:
            pulumi.set(__self__, "ssl_crypto_provider", ssl_crypto_provider)
        if ssl_host_name_in_certificate is not None:
            pulumi.set(__self__, "ssl_host_name_in_certificate", ssl_host_name_in_certificate)
        if ssl_key_store is not None:
            pulumi.set(__self__, "ssl_key_store", ssl_key_store)
        if ssl_trust_store is not None:
            pulumi.set(__self__, "ssl_trust_store", ssl_trust_store)

    @property
    @pulumi.getter(name="sslCryptoProvider")
    def ssl_crypto_provider(self) -> Optional[str]:
        """
        Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
        """
        return pulumi.get(self, "ssl_crypto_provider")

    @property
    @pulumi.getter(name="sslHostNameInCertificate")
    def ssl_host_name_in_certificate(self) -> Optional[str]:
        """
        Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
        """
        return pulumi.get(self, "ssl_host_name_in_certificate")

    @property
    @pulumi.getter(name="sslKeyStore")
    def ssl_key_store(self) -> Optional[str]:
        """
        Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
        """
        return pulumi.get(self, "ssl_key_store")

    @property
    @pulumi.getter(name="sslTrustStore")
    def ssl_trust_store(self) -> Optional[str]:
        """
        Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
        """
        return pulumi.get(self, "ssl_trust_store")


@pulumi.output_type
class ServiceInitiatedSoftwareConfigurationResponse(dict):
    """
    The SAP Software configuration Input when the software is to be installed by service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bomUrl":
            suggest = "bom_url"
        elif key == "sapBitsStorageAccountId":
            suggest = "sap_bits_storage_account_id"
        elif key == "sapFqdn":
            suggest = "sap_fqdn"
        elif key == "softwareInstallationType":
            suggest = "software_installation_type"
        elif key == "softwareVersion":
            suggest = "software_version"
        elif key == "sshPrivateKey":
            suggest = "ssh_private_key"
        elif key == "highAvailabilitySoftwareConfiguration":
            suggest = "high_availability_software_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceInitiatedSoftwareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceInitiatedSoftwareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceInitiatedSoftwareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bom_url: str,
                 sap_bits_storage_account_id: str,
                 sap_fqdn: str,
                 software_installation_type: str,
                 software_version: str,
                 ssh_private_key: str,
                 high_availability_software_configuration: Optional['outputs.HighAvailabilitySoftwareConfigurationResponse'] = None):
        """
        The SAP Software configuration Input when the software is to be installed by service.
        :param str bom_url: The URL to the SAP Build of Materials(BOM) file.
        :param str sap_bits_storage_account_id: The SAP bits storage account id.
        :param str sap_fqdn: The FQDN to set for the SAP system during install.
        :param str software_installation_type: The SAP software installation Type.
               Expected value is 'ServiceInitiated'.
        :param str software_version: The software version to install.
        :param str ssh_private_key: The SSH private key.
        :param 'HighAvailabilitySoftwareConfigurationResponse' high_availability_software_configuration: Gets or sets the HA software configuration.
        """
        pulumi.set(__self__, "bom_url", bom_url)
        pulumi.set(__self__, "sap_bits_storage_account_id", sap_bits_storage_account_id)
        pulumi.set(__self__, "sap_fqdn", sap_fqdn)
        pulumi.set(__self__, "software_installation_type", 'ServiceInitiated')
        pulumi.set(__self__, "software_version", software_version)
        pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if high_availability_software_configuration is not None:
            pulumi.set(__self__, "high_availability_software_configuration", high_availability_software_configuration)

    @property
    @pulumi.getter(name="bomUrl")
    def bom_url(self) -> str:
        """
        The URL to the SAP Build of Materials(BOM) file.
        """
        return pulumi.get(self, "bom_url")

    @property
    @pulumi.getter(name="sapBitsStorageAccountId")
    def sap_bits_storage_account_id(self) -> str:
        """
        The SAP bits storage account id.
        """
        return pulumi.get(self, "sap_bits_storage_account_id")

    @property
    @pulumi.getter(name="sapFqdn")
    def sap_fqdn(self) -> str:
        """
        The FQDN to set for the SAP system during install.
        """
        return pulumi.get(self, "sap_fqdn")

    @property
    @pulumi.getter(name="softwareInstallationType")
    def software_installation_type(self) -> str:
        """
        The SAP software installation Type.
        Expected value is 'ServiceInitiated'.
        """
        return pulumi.get(self, "software_installation_type")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        """
        The software version to install.
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> str:
        """
        The SSH private key.
        """
        return pulumi.get(self, "ssh_private_key")

    @property
    @pulumi.getter(name="highAvailabilitySoftwareConfiguration")
    def high_availability_software_configuration(self) -> Optional['outputs.HighAvailabilitySoftwareConfigurationResponse']:
        """
        Gets or sets the HA software configuration.
        """
        return pulumi.get(self, "high_availability_software_configuration")


@pulumi.output_type
class SettingsResponse(dict):
    """
    Common settings field for backup management
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCompression":
            suggest = "is_compression"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_compression: Optional[bool] = None,
                 issqlcompression: Optional[bool] = None,
                 time_zone: Optional[str] = None):
        """
        Common settings field for backup management
        :param bool is_compression: Workload compression flag. This has been added so that 'isSqlCompression'
               will be deprecated once clients upgrade to consider this flag.
        :param bool issqlcompression: SQL compression flag
        :param str time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        if is_compression is not None:
            pulumi.set(__self__, "is_compression", is_compression)
        if issqlcompression is not None:
            pulumi.set(__self__, "issqlcompression", issqlcompression)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="isCompression")
    def is_compression(self) -> Optional[bool]:
        """
        Workload compression flag. This has been added so that 'isSqlCompression'
        will be deprecated once clients upgrade to consider this flag.
        """
        return pulumi.get(self, "is_compression")

    @property
    @pulumi.getter
    def issqlcompression(self) -> Optional[bool]:
        """
        SQL compression flag
        """
        return pulumi.get(self, "issqlcompression")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SharedStorageResourceNamesResponse(dict):
    """
    The resource names object for shared storage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sharedStorageAccountName":
            suggest = "shared_storage_account_name"
        elif key == "sharedStorageAccountPrivateEndPointName":
            suggest = "shared_storage_account_private_end_point_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SharedStorageResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SharedStorageResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SharedStorageResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shared_storage_account_name: Optional[str] = None,
                 shared_storage_account_private_end_point_name: Optional[str] = None):
        """
        The resource names object for shared storage.
        :param str shared_storage_account_name: The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
        :param str shared_storage_account_private_end_point_name: The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
        """
        if shared_storage_account_name is not None:
            pulumi.set(__self__, "shared_storage_account_name", shared_storage_account_name)
        if shared_storage_account_private_end_point_name is not None:
            pulumi.set(__self__, "shared_storage_account_private_end_point_name", shared_storage_account_private_end_point_name)

    @property
    @pulumi.getter(name="sharedStorageAccountName")
    def shared_storage_account_name(self) -> Optional[str]:
        """
        The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
        """
        return pulumi.get(self, "shared_storage_account_name")

    @property
    @pulumi.getter(name="sharedStorageAccountPrivateEndPointName")
    def shared_storage_account_private_end_point_name(self) -> Optional[str]:
        """
        The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
        """
        return pulumi.get(self, "shared_storage_account_private_end_point_name")


@pulumi.output_type
class SimpleRetentionPolicyResponse(dict):
    """
    Simple policy retention.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPolicyType":
            suggest = "retention_policy_type"
        elif key == "retentionDuration":
            suggest = "retention_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SimpleRetentionPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SimpleRetentionPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SimpleRetentionPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_policy_type: str,
                 retention_duration: Optional['outputs.RetentionDurationResponse'] = None):
        """
        Simple policy retention.
        :param str retention_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'SimpleRetentionPolicy'.
        :param 'RetentionDurationResponse' retention_duration: Retention duration of the protection policy.
        """
        pulumi.set(__self__, "retention_policy_type", 'SimpleRetentionPolicy')
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)

    @property
    @pulumi.getter(name="retentionPolicyType")
    def retention_policy_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'SimpleRetentionPolicy'.
        """
        return pulumi.get(self, "retention_policy_type")

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional['outputs.RetentionDurationResponse']:
        """
        Retention duration of the protection policy.
        """
        return pulumi.get(self, "retention_duration")


@pulumi.output_type
class SimpleSchedulePolicyResponse(dict):
    """
    Simple policy schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schedulePolicyType":
            suggest = "schedule_policy_type"
        elif key == "hourlySchedule":
            suggest = "hourly_schedule"
        elif key == "scheduleRunDays":
            suggest = "schedule_run_days"
        elif key == "scheduleRunFrequency":
            suggest = "schedule_run_frequency"
        elif key == "scheduleRunTimes":
            suggest = "schedule_run_times"
        elif key == "scheduleWeeklyFrequency":
            suggest = "schedule_weekly_frequency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SimpleSchedulePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SimpleSchedulePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SimpleSchedulePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_policy_type: str,
                 hourly_schedule: Optional['outputs.HourlyScheduleResponse'] = None,
                 schedule_run_days: Optional[Sequence[str]] = None,
                 schedule_run_frequency: Optional[str] = None,
                 schedule_run_times: Optional[Sequence[str]] = None,
                 schedule_weekly_frequency: Optional[int] = None):
        """
        Simple policy schedule.
        :param str schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'SimpleSchedulePolicy'.
        :param 'HourlyScheduleResponse' hourly_schedule: Hourly Schedule of this Policy
        :param Sequence[str] schedule_run_days: List of days of week this schedule has to be run.
        :param str schedule_run_frequency: Frequency of the schedule operation of this policy.
        :param Sequence[str] schedule_run_times: List of times of day this schedule has to be run.
        :param int schedule_weekly_frequency: At every number weeks this schedule has to be run.
        """
        pulumi.set(__self__, "schedule_policy_type", 'SimpleSchedulePolicy')
        if hourly_schedule is not None:
            pulumi.set(__self__, "hourly_schedule", hourly_schedule)
        if schedule_run_days is not None:
            pulumi.set(__self__, "schedule_run_days", schedule_run_days)
        if schedule_run_frequency is not None:
            pulumi.set(__self__, "schedule_run_frequency", schedule_run_frequency)
        if schedule_run_times is not None:
            pulumi.set(__self__, "schedule_run_times", schedule_run_times)
        if schedule_weekly_frequency is not None:
            pulumi.set(__self__, "schedule_weekly_frequency", schedule_weekly_frequency)

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'SimpleSchedulePolicy'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @property
    @pulumi.getter(name="hourlySchedule")
    def hourly_schedule(self) -> Optional['outputs.HourlyScheduleResponse']:
        """
        Hourly Schedule of this Policy
        """
        return pulumi.get(self, "hourly_schedule")

    @property
    @pulumi.getter(name="scheduleRunDays")
    def schedule_run_days(self) -> Optional[Sequence[str]]:
        """
        List of days of week this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_days")

    @property
    @pulumi.getter(name="scheduleRunFrequency")
    def schedule_run_frequency(self) -> Optional[str]:
        """
        Frequency of the schedule operation of this policy.
        """
        return pulumi.get(self, "schedule_run_frequency")

    @property
    @pulumi.getter(name="scheduleRunTimes")
    def schedule_run_times(self) -> Optional[Sequence[str]]:
        """
        List of times of day this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_times")

    @property
    @pulumi.getter(name="scheduleWeeklyFrequency")
    def schedule_weekly_frequency(self) -> Optional[int]:
        """
        At every number weeks this schedule has to be run.
        """
        return pulumi.get(self, "schedule_weekly_frequency")


@pulumi.output_type
class SimpleSchedulePolicyV2Response(dict):
    """
    The V2 policy schedule for IaaS that supports hourly backups.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schedulePolicyType":
            suggest = "schedule_policy_type"
        elif key == "dailySchedule":
            suggest = "daily_schedule"
        elif key == "hourlySchedule":
            suggest = "hourly_schedule"
        elif key == "scheduleRunFrequency":
            suggest = "schedule_run_frequency"
        elif key == "weeklySchedule":
            suggest = "weekly_schedule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SimpleSchedulePolicyV2Response. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SimpleSchedulePolicyV2Response.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SimpleSchedulePolicyV2Response.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_policy_type: str,
                 daily_schedule: Optional['outputs.DailyScheduleResponse'] = None,
                 hourly_schedule: Optional['outputs.HourlyScheduleResponse'] = None,
                 schedule_run_frequency: Optional[str] = None,
                 weekly_schedule: Optional['outputs.WeeklyScheduleResponse'] = None):
        """
        The V2 policy schedule for IaaS that supports hourly backups.
        :param str schedule_policy_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'SimpleSchedulePolicyV2'.
        :param 'DailyScheduleResponse' daily_schedule: Daily schedule of this policy
        :param 'HourlyScheduleResponse' hourly_schedule: hourly schedule of this policy
        :param str schedule_run_frequency: Frequency of the schedule operation of this policy.
        :param 'WeeklyScheduleResponse' weekly_schedule: Weekly schedule of this policy
        """
        pulumi.set(__self__, "schedule_policy_type", 'SimpleSchedulePolicyV2')
        if daily_schedule is not None:
            pulumi.set(__self__, "daily_schedule", daily_schedule)
        if hourly_schedule is not None:
            pulumi.set(__self__, "hourly_schedule", hourly_schedule)
        if schedule_run_frequency is not None:
            pulumi.set(__self__, "schedule_run_frequency", schedule_run_frequency)
        if weekly_schedule is not None:
            pulumi.set(__self__, "weekly_schedule", weekly_schedule)

    @property
    @pulumi.getter(name="schedulePolicyType")
    def schedule_policy_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'SimpleSchedulePolicyV2'.
        """
        return pulumi.get(self, "schedule_policy_type")

    @property
    @pulumi.getter(name="dailySchedule")
    def daily_schedule(self) -> Optional['outputs.DailyScheduleResponse']:
        """
        Daily schedule of this policy
        """
        return pulumi.get(self, "daily_schedule")

    @property
    @pulumi.getter(name="hourlySchedule")
    def hourly_schedule(self) -> Optional['outputs.HourlyScheduleResponse']:
        """
        hourly schedule of this policy
        """
        return pulumi.get(self, "hourly_schedule")

    @property
    @pulumi.getter(name="scheduleRunFrequency")
    def schedule_run_frequency(self) -> Optional[str]:
        """
        Frequency of the schedule operation of this policy.
        """
        return pulumi.get(self, "schedule_run_frequency")

    @property
    @pulumi.getter(name="weeklySchedule")
    def weekly_schedule(self) -> Optional['outputs.WeeklyScheduleResponse']:
        """
        Weekly schedule of this policy
        """
        return pulumi.get(self, "weekly_schedule")


@pulumi.output_type
class SingleServerConfigurationResponse(dict):
    """
    Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appResourceGroup":
            suggest = "app_resource_group"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "virtualMachineConfiguration":
            suggest = "virtual_machine_configuration"
        elif key == "customResourceNames":
            suggest = "custom_resource_names"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "dbDiskConfiguration":
            suggest = "db_disk_configuration"
        elif key == "networkConfiguration":
            suggest = "network_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SingleServerConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SingleServerConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SingleServerConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_resource_group: str,
                 deployment_type: str,
                 subnet_id: str,
                 virtual_machine_configuration: 'outputs.VirtualMachineConfigurationResponse',
                 custom_resource_names: Optional['outputs.SingleServerFullResourceNamesResponse'] = None,
                 database_type: Optional[str] = None,
                 db_disk_configuration: Optional['outputs.DiskConfigurationResponse'] = None,
                 network_configuration: Optional['outputs.NetworkConfigurationResponse'] = None):
        """
        Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
        :param str app_resource_group: The application resource group where SAP system resources will be deployed.
        :param str deployment_type: The type of SAP deployment, single server or Three tier.
               Expected value is 'SingleServer'.
        :param str subnet_id: The subnet id.
        :param 'VirtualMachineConfigurationResponse' virtual_machine_configuration: Gets or sets the virtual machine configuration.
        :param 'SingleServerFullResourceNamesResponse' custom_resource_names: The set of custom names to be used for underlying azure resources that are part of the SAP system.
        :param str database_type: The database type.
        :param 'DiskConfigurationResponse' db_disk_configuration: Gets or sets the disk configuration.
        :param 'NetworkConfigurationResponse' network_configuration: Network configuration for the server
        """
        pulumi.set(__self__, "app_resource_group", app_resource_group)
        pulumi.set(__self__, "deployment_type", 'SingleServer')
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "virtual_machine_configuration", virtual_machine_configuration)
        if custom_resource_names is not None:
            pulumi.set(__self__, "custom_resource_names", custom_resource_names)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_disk_configuration is not None:
            pulumi.set(__self__, "db_disk_configuration", db_disk_configuration)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)

    @property
    @pulumi.getter(name="appResourceGroup")
    def app_resource_group(self) -> str:
        """
        The application resource group where SAP system resources will be deployed.
        """
        return pulumi.get(self, "app_resource_group")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The type of SAP deployment, single server or Three tier.
        Expected value is 'SingleServer'.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="virtualMachineConfiguration")
    def virtual_machine_configuration(self) -> 'outputs.VirtualMachineConfigurationResponse':
        """
        Gets or sets the virtual machine configuration.
        """
        return pulumi.get(self, "virtual_machine_configuration")

    @property
    @pulumi.getter(name="customResourceNames")
    def custom_resource_names(self) -> Optional['outputs.SingleServerFullResourceNamesResponse']:
        """
        The set of custom names to be used for underlying azure resources that are part of the SAP system.
        """
        return pulumi.get(self, "custom_resource_names")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbDiskConfiguration")
    def db_disk_configuration(self) -> Optional['outputs.DiskConfigurationResponse']:
        """
        Gets or sets the disk configuration.
        """
        return pulumi.get(self, "db_disk_configuration")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional['outputs.NetworkConfigurationResponse']:
        """
        Network configuration for the server
        """
        return pulumi.get(self, "network_configuration")


@pulumi.output_type
class SingleServerFullResourceNamesResponse(dict):
    """
    The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namingPatternType":
            suggest = "naming_pattern_type"
        elif key == "virtualMachine":
            suggest = "virtual_machine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SingleServerFullResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SingleServerFullResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SingleServerFullResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 naming_pattern_type: str,
                 virtual_machine: Optional['outputs.VirtualMachineResourceNamesResponse'] = None):
        """
        The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
        :param str naming_pattern_type: The pattern type to be used for resource naming.
               Expected value is 'FullResourceName'.
        :param 'VirtualMachineResourceNamesResponse' virtual_machine: The resource names object for virtual machine and related resources.
        """
        pulumi.set(__self__, "naming_pattern_type", 'FullResourceName')
        if virtual_machine is not None:
            pulumi.set(__self__, "virtual_machine", virtual_machine)

    @property
    @pulumi.getter(name="namingPatternType")
    def naming_pattern_type(self) -> str:
        """
        The pattern type to be used for resource naming.
        Expected value is 'FullResourceName'.
        """
        return pulumi.get(self, "naming_pattern_type")

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> Optional['outputs.VirtualMachineResourceNamesResponse']:
        """
        The resource names object for virtual machine and related resources.
        """
        return pulumi.get(self, "virtual_machine")


@pulumi.output_type
class SkipFileShareConfigurationResponse(dict):
    """
    Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkipFileShareConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkipFileShareConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkipFileShareConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: str):
        """
        Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
        :param str configuration_type: The type of file share config.
               Expected value is 'Skip'.
        """
        pulumi.set(__self__, "configuration_type", 'Skip')

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        The type of file share config.
        Expected value is 'Skip'.
        """
        return pulumi.get(self, "configuration_type")


@pulumi.output_type
class SnapshotBackupAdditionalDetailsResponse(dict):
    """
    Snapshot Backup related fields for WorkloadType SAP Hana system
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instantRPDetails":
            suggest = "instant_rp_details"
        elif key == "instantRpRetentionRangeInDays":
            suggest = "instant_rp_retention_range_in_days"
        elif key == "userAssignedManagedIdentityDetails":
            suggest = "user_assigned_managed_identity_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotBackupAdditionalDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotBackupAdditionalDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotBackupAdditionalDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instant_rp_details: Optional[str] = None,
                 instant_rp_retention_range_in_days: Optional[int] = None,
                 user_assigned_managed_identity_details: Optional['outputs.UserAssignedManagedIdentityDetailsResponse'] = None):
        """
        Snapshot Backup related fields for WorkloadType SAP Hana system
        :param str instant_rp_details: Instant RP details for the snapshot.
        :param int instant_rp_retention_range_in_days: Retention range for instant Rp in days.
        :param 'UserAssignedManagedIdentityDetailsResponse' user_assigned_managed_identity_details: User Assigned managed identity details used for snapshot policy.
        """
        if instant_rp_details is not None:
            pulumi.set(__self__, "instant_rp_details", instant_rp_details)
        if instant_rp_retention_range_in_days is not None:
            pulumi.set(__self__, "instant_rp_retention_range_in_days", instant_rp_retention_range_in_days)
        if user_assigned_managed_identity_details is not None:
            pulumi.set(__self__, "user_assigned_managed_identity_details", user_assigned_managed_identity_details)

    @property
    @pulumi.getter(name="instantRPDetails")
    def instant_rp_details(self) -> Optional[str]:
        """
        Instant RP details for the snapshot.
        """
        return pulumi.get(self, "instant_rp_details")

    @property
    @pulumi.getter(name="instantRpRetentionRangeInDays")
    def instant_rp_retention_range_in_days(self) -> Optional[int]:
        """
        Retention range for instant Rp in days.
        """
        return pulumi.get(self, "instant_rp_retention_range_in_days")

    @property
    @pulumi.getter(name="userAssignedManagedIdentityDetails")
    def user_assigned_managed_identity_details(self) -> Optional['outputs.UserAssignedManagedIdentityDetailsResponse']:
        """
        User Assigned managed identity details used for snapshot policy.
        """
        return pulumi.get(self, "user_assigned_managed_identity_details")


@pulumi.output_type
class SqlBackupDataResponse(dict):
    """
    Defines the SQL Backup data for a virtual instance for SAP.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPolicy":
            suggest = "backup_policy"
        elif key == "backupType":
            suggest = "backup_type"
        elif key == "recoveryServicesVault":
            suggest = "recovery_services_vault"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlBackupDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlBackupDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlBackupDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_policy: 'outputs.DBBackupPolicyPropertiesResponse',
                 backup_type: str,
                 recovery_services_vault: Any):
        """
        Defines the SQL Backup data for a virtual instance for SAP.
        :param 'DBBackupPolicyPropertiesResponse' backup_policy: Defines the policy properties for database backup.
        :param str backup_type: The type of backup, VM, SQL or HANA.
               Expected value is 'SQL'.
        :param Union['ExistingRecoveryServicesVaultResponse', 'NewRecoveryServicesVaultResponse'] recovery_services_vault: The properties of the recovery services vault used for backup.
        """
        pulumi.set(__self__, "backup_policy", backup_policy)
        pulumi.set(__self__, "backup_type", 'SQL')
        pulumi.set(__self__, "recovery_services_vault", recovery_services_vault)

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> 'outputs.DBBackupPolicyPropertiesResponse':
        """
        Defines the policy properties for database backup.
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        The type of backup, VM, SQL or HANA.
        Expected value is 'SQL'.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="recoveryServicesVault")
    def recovery_services_vault(self) -> Any:
        """
        The properties of the recovery services vault used for backup.
        """
        return pulumi.get(self, "recovery_services_vault")


@pulumi.output_type
class SshConfigurationResponse(dict):
    """
    SSH configuration for Linux based VMs running on Azure
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_keys: Optional[Sequence['outputs.SshPublicKeyResponse']] = None):
        """
        SSH configuration for Linux based VMs running on Azure
        :param Sequence['SshPublicKeyResponse'] public_keys: The list of SSH public keys used to authenticate with linux based VMs.
        """
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.SshPublicKeyResponse']]:
        """
        The list of SSH public keys used to authenticate with linux based VMs.
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class SshKeyPairResponse(dict):
    """
    The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "publicKey":
            suggest = "public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshKeyPairResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshKeyPairResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshKeyPairResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_key: Optional[str] = None,
                 public_key: Optional[str] = None):
        """
        The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        :param str private_key: SSH private key.
        :param str public_key: SSH public key
        """
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        SSH private key.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        """
        SSH public key
        """
        return pulumi.get(self, "public_key")


@pulumi.output_type
class SshPublicKeyResponse(dict):
    """
    Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyData":
            suggest = "key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshPublicKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshPublicKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_data: Optional[str] = None):
        """
        Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
        :param str key_data: SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        """
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        """
        return pulumi.get(self, "key_data")


@pulumi.output_type
class StorageConfigurationResponse(dict):
    """
    Gets or sets the storage configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "transportFileShareConfiguration":
            suggest = "transport_file_share_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 transport_file_share_configuration: Optional[Any] = None):
        """
        Gets or sets the storage configuration.
        :param Union['CreateAndMountFileShareConfigurationResponse', 'MountFileShareConfigurationResponse', 'SkipFileShareConfigurationResponse'] transport_file_share_configuration: The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
        """
        if transport_file_share_configuration is not None:
            pulumi.set(__self__, "transport_file_share_configuration", transport_file_share_configuration)

    @property
    @pulumi.getter(name="transportFileShareConfiguration")
    def transport_file_share_configuration(self) -> Optional[Any]:
        """
        The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
        """
        return pulumi.get(self, "transport_file_share_configuration")


@pulumi.output_type
class StorageInformationResponse(dict):
    """
    Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage. 
    """
    def __init__(__self__, *,
                 id: str):
        """
        Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage. 
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class SubProtectionPolicyResponse(dict):
    """
    Sub-protection policy which includes schedule and retention
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"
        elif key == "retentionPolicy":
            suggest = "retention_policy"
        elif key == "schedulePolicy":
            suggest = "schedule_policy"
        elif key == "snapshotBackupAdditionalDetails":
            suggest = "snapshot_backup_additional_details"
        elif key == "tieringPolicy":
            suggest = "tiering_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubProtectionPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubProtectionPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubProtectionPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: Optional[str] = None,
                 retention_policy: Optional[Any] = None,
                 schedule_policy: Optional[Any] = None,
                 snapshot_backup_additional_details: Optional['outputs.SnapshotBackupAdditionalDetailsResponse'] = None,
                 tiering_policy: Optional[Mapping[str, 'outputs.TieringPolicyResponse']] = None):
        """
        Sub-protection policy which includes schedule and retention
        :param str policy_type: Type of backup policy type
        :param Union['LongTermRetentionPolicyResponse', 'SimpleRetentionPolicyResponse'] retention_policy: Retention policy with the details on backup copy retention ranges.
        :param Union['LogSchedulePolicyResponse', 'LongTermSchedulePolicyResponse', 'SimpleSchedulePolicyResponse', 'SimpleSchedulePolicyV2Response'] schedule_policy: Backup schedule specified as part of backup policy.
        :param 'SnapshotBackupAdditionalDetailsResponse' snapshot_backup_additional_details: Hana DB instance snapshot backup additional details.
        :param Mapping[str, 'TieringPolicyResponse'] tiering_policy: Tiering policy to automatically move RPs to another tier.
               Key is Target Tier, defined in RecoveryPointTierType enum.
               Tiering policy specifies the criteria to move RP to the target tier.
        """
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule_policy is not None:
            pulumi.set(__self__, "schedule_policy", schedule_policy)
        if snapshot_backup_additional_details is not None:
            pulumi.set(__self__, "snapshot_backup_additional_details", snapshot_backup_additional_details)
        if tiering_policy is not None:
            pulumi.set(__self__, "tiering_policy", tiering_policy)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        """
        Type of backup policy type
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[Any]:
        """
        Retention policy with the details on backup copy retention ranges.
        """
        return pulumi.get(self, "retention_policy")

    @property
    @pulumi.getter(name="schedulePolicy")
    def schedule_policy(self) -> Optional[Any]:
        """
        Backup schedule specified as part of backup policy.
        """
        return pulumi.get(self, "schedule_policy")

    @property
    @pulumi.getter(name="snapshotBackupAdditionalDetails")
    def snapshot_backup_additional_details(self) -> Optional['outputs.SnapshotBackupAdditionalDetailsResponse']:
        """
        Hana DB instance snapshot backup additional details.
        """
        return pulumi.get(self, "snapshot_backup_additional_details")

    @property
    @pulumi.getter(name="tieringPolicy")
    def tiering_policy(self) -> Optional[Mapping[str, 'outputs.TieringPolicyResponse']]:
        """
        Tiering policy to automatically move RPs to another tier.
        Key is Target Tier, defined in RecoveryPointTierType enum.
        Tiering policy specifies the criteria to move RP to the target tier.
        """
        return pulumi.get(self, "tiering_policy")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ThreeTierConfigurationResponse(dict):
    """
    Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appResourceGroup":
            suggest = "app_resource_group"
        elif key == "applicationServer":
            suggest = "application_server"
        elif key == "centralServer":
            suggest = "central_server"
        elif key == "databaseServer":
            suggest = "database_server"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "customResourceNames":
            suggest = "custom_resource_names"
        elif key == "highAvailabilityConfig":
            suggest = "high_availability_config"
        elif key == "networkConfiguration":
            suggest = "network_configuration"
        elif key == "storageConfiguration":
            suggest = "storage_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThreeTierConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThreeTierConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThreeTierConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_resource_group: str,
                 application_server: 'outputs.ApplicationServerConfigurationResponse',
                 central_server: 'outputs.CentralServerConfigurationResponse',
                 database_server: 'outputs.DatabaseConfigurationResponse',
                 deployment_type: str,
                 custom_resource_names: Optional['outputs.ThreeTierFullResourceNamesResponse'] = None,
                 high_availability_config: Optional['outputs.HighAvailabilityConfigurationResponse'] = None,
                 network_configuration: Optional['outputs.NetworkConfigurationResponse'] = None,
                 storage_configuration: Optional['outputs.StorageConfigurationResponse'] = None):
        """
        Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
        :param str app_resource_group: The application resource group where SAP system resources will be deployed.
        :param 'ApplicationServerConfigurationResponse' application_server: The application server configuration.
        :param 'CentralServerConfigurationResponse' central_server: The central server configuration.
        :param 'DatabaseConfigurationResponse' database_server: The database configuration.
        :param str deployment_type: The type of SAP deployment, single server or Three tier.
               Expected value is 'ThreeTier'.
        :param 'ThreeTierFullResourceNamesResponse' custom_resource_names: The set of custom names to be used for underlying azure resources that are part of the SAP system.
        :param 'HighAvailabilityConfigurationResponse' high_availability_config: The high availability configuration.
        :param 'NetworkConfigurationResponse' network_configuration: Network configuration common to all servers
        :param 'StorageConfigurationResponse' storage_configuration: The storage configuration.
        """
        pulumi.set(__self__, "app_resource_group", app_resource_group)
        pulumi.set(__self__, "application_server", application_server)
        pulumi.set(__self__, "central_server", central_server)
        pulumi.set(__self__, "database_server", database_server)
        pulumi.set(__self__, "deployment_type", 'ThreeTier')
        if custom_resource_names is not None:
            pulumi.set(__self__, "custom_resource_names", custom_resource_names)
        if high_availability_config is not None:
            pulumi.set(__self__, "high_availability_config", high_availability_config)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)

    @property
    @pulumi.getter(name="appResourceGroup")
    def app_resource_group(self) -> str:
        """
        The application resource group where SAP system resources will be deployed.
        """
        return pulumi.get(self, "app_resource_group")

    @property
    @pulumi.getter(name="applicationServer")
    def application_server(self) -> 'outputs.ApplicationServerConfigurationResponse':
        """
        The application server configuration.
        """
        return pulumi.get(self, "application_server")

    @property
    @pulumi.getter(name="centralServer")
    def central_server(self) -> 'outputs.CentralServerConfigurationResponse':
        """
        The central server configuration.
        """
        return pulumi.get(self, "central_server")

    @property
    @pulumi.getter(name="databaseServer")
    def database_server(self) -> 'outputs.DatabaseConfigurationResponse':
        """
        The database configuration.
        """
        return pulumi.get(self, "database_server")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The type of SAP deployment, single server or Three tier.
        Expected value is 'ThreeTier'.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="customResourceNames")
    def custom_resource_names(self) -> Optional['outputs.ThreeTierFullResourceNamesResponse']:
        """
        The set of custom names to be used for underlying azure resources that are part of the SAP system.
        """
        return pulumi.get(self, "custom_resource_names")

    @property
    @pulumi.getter(name="highAvailabilityConfig")
    def high_availability_config(self) -> Optional['outputs.HighAvailabilityConfigurationResponse']:
        """
        The high availability configuration.
        """
        return pulumi.get(self, "high_availability_config")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional['outputs.NetworkConfigurationResponse']:
        """
        Network configuration common to all servers
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional['outputs.StorageConfigurationResponse']:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")


@pulumi.output_type
class ThreeTierFullResourceNamesResponse(dict):
    """
    The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namingPatternType":
            suggest = "naming_pattern_type"
        elif key == "applicationServer":
            suggest = "application_server"
        elif key == "centralServer":
            suggest = "central_server"
        elif key == "databaseServer":
            suggest = "database_server"
        elif key == "sharedStorage":
            suggest = "shared_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThreeTierFullResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThreeTierFullResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThreeTierFullResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 naming_pattern_type: str,
                 application_server: Optional['outputs.ApplicationServerFullResourceNamesResponse'] = None,
                 central_server: Optional['outputs.CentralServerFullResourceNamesResponse'] = None,
                 database_server: Optional['outputs.DatabaseServerFullResourceNamesResponse'] = None,
                 shared_storage: Optional['outputs.SharedStorageResourceNamesResponse'] = None):
        """
        The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
        :param str naming_pattern_type: The pattern type to be used for resource naming.
               Expected value is 'FullResourceName'.
        :param 'ApplicationServerFullResourceNamesResponse' application_server: The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
        :param 'CentralServerFullResourceNamesResponse' central_server: The full resource names object for central server layer resources.
        :param 'DatabaseServerFullResourceNamesResponse' database_server: The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
        :param 'SharedStorageResourceNamesResponse' shared_storage: The resource names object for shared storage.
        """
        pulumi.set(__self__, "naming_pattern_type", 'FullResourceName')
        if application_server is not None:
            pulumi.set(__self__, "application_server", application_server)
        if central_server is not None:
            pulumi.set(__self__, "central_server", central_server)
        if database_server is not None:
            pulumi.set(__self__, "database_server", database_server)
        if shared_storage is not None:
            pulumi.set(__self__, "shared_storage", shared_storage)

    @property
    @pulumi.getter(name="namingPatternType")
    def naming_pattern_type(self) -> str:
        """
        The pattern type to be used for resource naming.
        Expected value is 'FullResourceName'.
        """
        return pulumi.get(self, "naming_pattern_type")

    @property
    @pulumi.getter(name="applicationServer")
    def application_server(self) -> Optional['outputs.ApplicationServerFullResourceNamesResponse']:
        """
        The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
        """
        return pulumi.get(self, "application_server")

    @property
    @pulumi.getter(name="centralServer")
    def central_server(self) -> Optional['outputs.CentralServerFullResourceNamesResponse']:
        """
        The full resource names object for central server layer resources.
        """
        return pulumi.get(self, "central_server")

    @property
    @pulumi.getter(name="databaseServer")
    def database_server(self) -> Optional['outputs.DatabaseServerFullResourceNamesResponse']:
        """
        The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
        """
        return pulumi.get(self, "database_server")

    @property
    @pulumi.getter(name="sharedStorage")
    def shared_storage(self) -> Optional['outputs.SharedStorageResourceNamesResponse']:
        """
        The resource names object for shared storage.
        """
        return pulumi.get(self, "shared_storage")


@pulumi.output_type
class TieringPolicyResponse(dict):
    """
    Tiering Policy for a target tier.
    If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationType":
            suggest = "duration_type"
        elif key == "tieringMode":
            suggest = "tiering_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TieringPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TieringPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TieringPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[int] = None,
                 duration_type: Optional[str] = None,
                 tiering_mode: Optional[str] = None):
        """
        Tiering Policy for a target tier.
        If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
        :param int duration: Number of days/weeks/months/years to retain backups in current tier before tiering.
               Used only if TieringMode is set to TierAfter
        :param str duration_type: Retention duration type: days/weeks/months/years
               Used only if TieringMode is set to TierAfter
        :param str tiering_mode: Tiering Mode to control automatic tiering of recovery points. Supported values are:
               1. TierRecommended: Tier all recovery points recommended to be tiered
               2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
               3. DoNotTier: Do not tier any recovery points
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if duration_type is not None:
            pulumi.set(__self__, "duration_type", duration_type)
        if tiering_mode is not None:
            pulumi.set(__self__, "tiering_mode", tiering_mode)

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        Number of days/weeks/months/years to retain backups in current tier before tiering.
        Used only if TieringMode is set to TierAfter
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="durationType")
    def duration_type(self) -> Optional[str]:
        """
        Retention duration type: days/weeks/months/years
        Used only if TieringMode is set to TierAfter
        """
        return pulumi.get(self, "duration_type")

    @property
    @pulumi.getter(name="tieringMode")
    def tiering_mode(self) -> Optional[str]:
        """
        Tiering Mode to control automatic tiering of recovery points. Supported values are:
        1. TierRecommended: Tier all recovery points recommended to be tiered
        2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
        3. DoNotTier: Do not tier any recovery points
        """
        return pulumi.get(self, "tiering_mode")


@pulumi.output_type
class UserAssignedIdentityPropertiesResponse(dict):
    """
    User assigned managed identity properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 principal_id: Optional[str] = None):
        """
        User assigned managed identity properties.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserAssignedManagedIdentityDetailsResponse(dict):
    """
    User assigned managed identity details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityArmId":
            suggest = "identity_arm_id"
        elif key == "identityName":
            suggest = "identity_name"
        elif key == "userAssignedIdentityProperties":
            suggest = "user_assigned_identity_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedManagedIdentityDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedManagedIdentityDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedManagedIdentityDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_arm_id: Optional[str] = None,
                 identity_name: Optional[str] = None,
                 user_assigned_identity_properties: Optional['outputs.UserAssignedIdentityPropertiesResponse'] = None):
        """
        User assigned managed identity details.
        :param 'UserAssignedIdentityPropertiesResponse' user_assigned_identity_properties: User assigned managed identity properties.
        """
        if identity_arm_id is not None:
            pulumi.set(__self__, "identity_arm_id", identity_arm_id)
        if identity_name is not None:
            pulumi.set(__self__, "identity_name", identity_name)
        if user_assigned_identity_properties is not None:
            pulumi.set(__self__, "user_assigned_identity_properties", user_assigned_identity_properties)

    @property
    @pulumi.getter(name="identityArmId")
    def identity_arm_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_arm_id")

    @property
    @pulumi.getter(name="identityName")
    def identity_name(self) -> Optional[str]:
        return pulumi.get(self, "identity_name")

    @property
    @pulumi.getter(name="userAssignedIdentityProperties")
    def user_assigned_identity_properties(self) -> Optional['outputs.UserAssignedIdentityPropertiesResponse']:
        """
        User assigned managed identity properties.
        """
        return pulumi.get(self, "user_assigned_identity_properties")


@pulumi.output_type
class UserAssignedServiceIdentityResponse(dict):
    """
    Managed service identity (user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (user assigned identities)
        :param str type: Type of manage identity
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: User assigned identities dictionary
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of manage identity
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        User assigned identities dictionary
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class VMBackupDataResponse(dict):
    """
    Defines the VM Backup data for a virtual instance for SAP.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPolicy":
            suggest = "backup_policy"
        elif key == "backupType":
            suggest = "backup_type"
        elif key == "recoveryServicesVault":
            suggest = "recovery_services_vault"
        elif key == "diskExclusionProperties":
            suggest = "disk_exclusion_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMBackupDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMBackupDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMBackupDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_policy: 'outputs.VMBackupPolicyPropertiesResponse',
                 backup_type: str,
                 recovery_services_vault: Any,
                 disk_exclusion_properties: Optional['outputs.DiskExclusionPropertiesResponse'] = None):
        """
        Defines the VM Backup data for a virtual instance for SAP.
        :param 'VMBackupPolicyPropertiesResponse' backup_policy: Defines the policy properties for virtual machine backup.
        :param str backup_type: The type of backup, VM, SQL or HANA.
               Expected value is 'VM'.
        :param Union['ExistingRecoveryServicesVaultResponse', 'NewRecoveryServicesVaultResponse'] recovery_services_vault: The properties of the recovery services vault used for backup.
        :param 'DiskExclusionPropertiesResponse' disk_exclusion_properties: Defines the disk exclusion properties for virtual machine backup.
        """
        pulumi.set(__self__, "backup_policy", backup_policy)
        pulumi.set(__self__, "backup_type", 'VM')
        pulumi.set(__self__, "recovery_services_vault", recovery_services_vault)
        if disk_exclusion_properties is not None:
            pulumi.set(__self__, "disk_exclusion_properties", disk_exclusion_properties)

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> 'outputs.VMBackupPolicyPropertiesResponse':
        """
        Defines the policy properties for virtual machine backup.
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        The type of backup, VM, SQL or HANA.
        Expected value is 'VM'.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="recoveryServicesVault")
    def recovery_services_vault(self) -> Any:
        """
        The properties of the recovery services vault used for backup.
        """
        return pulumi.get(self, "recovery_services_vault")

    @property
    @pulumi.getter(name="diskExclusionProperties")
    def disk_exclusion_properties(self) -> Optional['outputs.DiskExclusionPropertiesResponse']:
        """
        Defines the disk exclusion properties for virtual machine backup.
        """
        return pulumi.get(self, "disk_exclusion_properties")


@pulumi.output_type
class VMBackupPolicyPropertiesResponse(dict):
    """
    Defines the policy properties for virtual machine backup.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupManagementType":
            suggest = "backup_management_type"
        elif key == "instantRPDetails":
            suggest = "instant_rp_details"
        elif key == "instantRpRetentionRangeInDays":
            suggest = "instant_rp_retention_range_in_days"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "protectedItemsCount":
            suggest = "protected_items_count"
        elif key == "resourceGuardOperationRequests":
            suggest = "resource_guard_operation_requests"
        elif key == "retentionPolicy":
            suggest = "retention_policy"
        elif key == "schedulePolicy":
            suggest = "schedule_policy"
        elif key == "tieringPolicy":
            suggest = "tiering_policy"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VMBackupPolicyPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VMBackupPolicyPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VMBackupPolicyPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_management_type: str,
                 name: str,
                 instant_rp_details: Optional['outputs.InstantRPAdditionalDetailsResponse'] = None,
                 instant_rp_retention_range_in_days: Optional[int] = None,
                 policy_type: Optional[str] = None,
                 protected_items_count: Optional[int] = None,
                 resource_guard_operation_requests: Optional[Sequence[str]] = None,
                 retention_policy: Optional[Any] = None,
                 schedule_policy: Optional[Any] = None,
                 tiering_policy: Optional[Mapping[str, 'outputs.TieringPolicyResponse']] = None,
                 time_zone: Optional[str] = None):
        """
        Defines the policy properties for virtual machine backup.
        :param str backup_management_type: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
               Expected value is 'AzureIaasVM'.
        :param str name: The name of the VM Backup policy.
        :param 'InstantRPAdditionalDetailsResponse' instant_rp_details: Instant recovery point additional details.
        :param int instant_rp_retention_range_in_days: Instant RP retention policy range in days
        :param str policy_type: The policy type.
        :param int protected_items_count: Number of items associated with this policy.
        :param Sequence[str] resource_guard_operation_requests: ResourceGuard Operation Requests
        :param Union['LongTermRetentionPolicyResponse', 'SimpleRetentionPolicyResponse'] retention_policy: Retention policy with the details on backup copy retention ranges.
        :param Union['LogSchedulePolicyResponse', 'LongTermSchedulePolicyResponse', 'SimpleSchedulePolicyResponse', 'SimpleSchedulePolicyV2Response'] schedule_policy: Backup schedule specified as part of backup policy.
        :param Mapping[str, 'TieringPolicyResponse'] tiering_policy: Tiering policy to automatically move RPs to another tier
               Key is Target Tier, defined in RecoveryPointTierType enum.
               Tiering policy specifies the criteria to move RP to the target tier.
        :param str time_zone: Time zone optional input as string. For example: "Pacific Standard Time".
        """
        pulumi.set(__self__, "backup_management_type", 'AzureIaasVM')
        pulumi.set(__self__, "name", name)
        if instant_rp_details is not None:
            pulumi.set(__self__, "instant_rp_details", instant_rp_details)
        if instant_rp_retention_range_in_days is not None:
            pulumi.set(__self__, "instant_rp_retention_range_in_days", instant_rp_retention_range_in_days)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if protected_items_count is not None:
            pulumi.set(__self__, "protected_items_count", protected_items_count)
        if resource_guard_operation_requests is not None:
            pulumi.set(__self__, "resource_guard_operation_requests", resource_guard_operation_requests)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule_policy is not None:
            pulumi.set(__self__, "schedule_policy", schedule_policy)
        if tiering_policy is not None:
            pulumi.set(__self__, "tiering_policy", tiering_policy)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="backupManagementType")
    def backup_management_type(self) -> str:
        """
        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
        Expected value is 'AzureIaasVM'.
        """
        return pulumi.get(self, "backup_management_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the VM Backup policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="instantRPDetails")
    def instant_rp_details(self) -> Optional['outputs.InstantRPAdditionalDetailsResponse']:
        """
        Instant recovery point additional details.
        """
        return pulumi.get(self, "instant_rp_details")

    @property
    @pulumi.getter(name="instantRpRetentionRangeInDays")
    def instant_rp_retention_range_in_days(self) -> Optional[int]:
        """
        Instant RP retention policy range in days
        """
        return pulumi.get(self, "instant_rp_retention_range_in_days")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        """
        The policy type.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="protectedItemsCount")
    def protected_items_count(self) -> Optional[int]:
        """
        Number of items associated with this policy.
        """
        return pulumi.get(self, "protected_items_count")

    @property
    @pulumi.getter(name="resourceGuardOperationRequests")
    def resource_guard_operation_requests(self) -> Optional[Sequence[str]]:
        """
        ResourceGuard Operation Requests
        """
        return pulumi.get(self, "resource_guard_operation_requests")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[Any]:
        """
        Retention policy with the details on backup copy retention ranges.
        """
        return pulumi.get(self, "retention_policy")

    @property
    @pulumi.getter(name="schedulePolicy")
    def schedule_policy(self) -> Optional[Any]:
        """
        Backup schedule specified as part of backup policy.
        """
        return pulumi.get(self, "schedule_policy")

    @property
    @pulumi.getter(name="tieringPolicy")
    def tiering_policy(self) -> Optional[Mapping[str, 'outputs.TieringPolicyResponse']]:
        """
        Tiering policy to automatically move RPs to another tier
        Key is Target Tier, defined in RecoveryPointTierType enum.
        Tiering policy specifies the criteria to move RP to the target tier.
        """
        return pulumi.get(self, "tiering_policy")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        Time zone optional input as string. For example: "Pacific Standard Time".
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class VirtualMachineConfigurationResponse(dict):
    """
    Defines the virtual machine configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageReference":
            suggest = "image_reference"
        elif key == "osProfile":
            suggest = "os_profile"
        elif key == "vmSize":
            suggest = "vm_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_reference: 'outputs.ImageReferenceResponse',
                 os_profile: 'outputs.OSProfileResponse',
                 vm_size: str):
        """
        Defines the virtual machine configuration.
        :param 'ImageReferenceResponse' image_reference: The image reference.
        :param 'OSProfileResponse' os_profile: The OS profile.
        :param str vm_size: The virtual machine size.
        """
        pulumi.set(__self__, "image_reference", image_reference)
        pulumi.set(__self__, "os_profile", os_profile)
        pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> 'outputs.ImageReferenceResponse':
        """
        The image reference.
        """
        return pulumi.get(self, "image_reference")

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> 'outputs.OSProfileResponse':
        """
        The OS profile.
        """
        return pulumi.get(self, "os_profile")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> str:
        """
        The virtual machine size.
        """
        return pulumi.get(self, "vm_size")


@pulumi.output_type
class VirtualMachineResourceNamesResponse(dict):
    """
    The resource names object for virtual machine and related resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDiskNames":
            suggest = "data_disk_names"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "osDiskName":
            suggest = "os_disk_name"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachineResourceNamesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachineResourceNamesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachineResourceNamesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disk_names: Optional[Mapping[str, Sequence[str]]] = None,
                 host_name: Optional[str] = None,
                 network_interfaces: Optional[Sequence['outputs.NetworkInterfaceResourceNamesResponse']] = None,
                 os_disk_name: Optional[str] = None,
                 vm_name: Optional[str] = None):
        """
        The resource names object for virtual machine and related resources.
        :param Mapping[str, Sequence[str]] data_disk_names: The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
        :param str host_name: The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
        :param Sequence['NetworkInterfaceResourceNamesResponse'] network_interfaces: The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
        :param str os_disk_name: The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
        :param str vm_name: The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
        """
        if data_disk_names is not None:
            pulumi.set(__self__, "data_disk_names", data_disk_names)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if os_disk_name is not None:
            pulumi.set(__self__, "os_disk_name", os_disk_name)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="dataDiskNames")
    def data_disk_names(self) -> Optional[Mapping[str, Sequence[str]]]:
        """
        The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
        """
        return pulumi.get(self, "data_disk_names")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        """
        The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.NetworkInterfaceResourceNamesResponse']]:
        """
        The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="osDiskName")
    def os_disk_name(self) -> Optional[str]:
        """
        The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
        """
        return pulumi.get(self, "os_disk_name")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[str]:
        """
        The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
        """
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class WeeklyRetentionFormatResponse(dict):
    """
    Weekly retention format.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfTheWeek":
            suggest = "days_of_the_week"
        elif key == "weeksOfTheMonth":
            suggest = "weeks_of_the_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WeeklyRetentionFormatResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WeeklyRetentionFormatResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WeeklyRetentionFormatResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_the_week: Optional[Sequence[str]] = None,
                 weeks_of_the_month: Optional[Sequence[str]] = None):
        """
        Weekly retention format.
        :param Sequence[str] days_of_the_week: List of days of the week.
        :param Sequence[str] weeks_of_the_month: List of weeks of month.
        """
        if days_of_the_week is not None:
            pulumi.set(__self__, "days_of_the_week", days_of_the_week)
        if weeks_of_the_month is not None:
            pulumi.set(__self__, "weeks_of_the_month", weeks_of_the_month)

    @property
    @pulumi.getter(name="daysOfTheWeek")
    def days_of_the_week(self) -> Optional[Sequence[str]]:
        """
        List of days of the week.
        """
        return pulumi.get(self, "days_of_the_week")

    @property
    @pulumi.getter(name="weeksOfTheMonth")
    def weeks_of_the_month(self) -> Optional[Sequence[str]]:
        """
        List of weeks of month.
        """
        return pulumi.get(self, "weeks_of_the_month")


@pulumi.output_type
class WeeklyRetentionScheduleResponse(dict):
    """
    Weekly retention schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfTheWeek":
            suggest = "days_of_the_week"
        elif key == "retentionDuration":
            suggest = "retention_duration"
        elif key == "retentionTimes":
            suggest = "retention_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WeeklyRetentionScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WeeklyRetentionScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WeeklyRetentionScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_the_week: Optional[Sequence[str]] = None,
                 retention_duration: Optional['outputs.RetentionDurationResponse'] = None,
                 retention_times: Optional[Sequence[str]] = None):
        """
        Weekly retention schedule.
        :param Sequence[str] days_of_the_week: List of days of week for weekly retention policy.
        :param 'RetentionDurationResponse' retention_duration: Retention duration of retention Policy.
        :param Sequence[str] retention_times: Retention times of retention policy.
        """
        if days_of_the_week is not None:
            pulumi.set(__self__, "days_of_the_week", days_of_the_week)
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="daysOfTheWeek")
    def days_of_the_week(self) -> Optional[Sequence[str]]:
        """
        List of days of week for weekly retention policy.
        """
        return pulumi.get(self, "days_of_the_week")

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional['outputs.RetentionDurationResponse']:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[Sequence[str]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")


@pulumi.output_type
class WeeklyScheduleResponse(dict):
    """
    Weekly schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleRunDays":
            suggest = "schedule_run_days"
        elif key == "scheduleRunTimes":
            suggest = "schedule_run_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WeeklyScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WeeklyScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WeeklyScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_run_days: Optional[Sequence[str]] = None,
                 schedule_run_times: Optional[Sequence[str]] = None):
        """
        Weekly schedule.
        :param Sequence[str] schedule_run_days: Schedule run days.
        :param Sequence[str] schedule_run_times: List of times of day this schedule has to be run.
        """
        if schedule_run_days is not None:
            pulumi.set(__self__, "schedule_run_days", schedule_run_days)
        if schedule_run_times is not None:
            pulumi.set(__self__, "schedule_run_times", schedule_run_times)

    @property
    @pulumi.getter(name="scheduleRunDays")
    def schedule_run_days(self) -> Optional[Sequence[str]]:
        """
        Schedule run days.
        """
        return pulumi.get(self, "schedule_run_days")

    @property
    @pulumi.getter(name="scheduleRunTimes")
    def schedule_run_times(self) -> Optional[Sequence[str]]:
        """
        List of times of day this schedule has to be run.
        """
        return pulumi.get(self, "schedule_run_times")


@pulumi.output_type
class WindowsConfigurationResponse(dict):
    """
    Specifies Windows operating system settings on the virtual machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WindowsConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WindowsConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WindowsConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_type: str):
        """
        Specifies Windows operating system settings on the virtual machine.
        :param str os_type: The OS Type
               Expected value is 'Windows'.
        """
        pulumi.set(__self__, "os_type", 'Windows')

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The OS Type
        Expected value is 'Windows'.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class YearlyRetentionScheduleResponse(dict):
    """
    Yearly retention schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monthsOfYear":
            suggest = "months_of_year"
        elif key == "retentionDuration":
            suggest = "retention_duration"
        elif key == "retentionScheduleDaily":
            suggest = "retention_schedule_daily"
        elif key == "retentionScheduleFormatType":
            suggest = "retention_schedule_format_type"
        elif key == "retentionScheduleWeekly":
            suggest = "retention_schedule_weekly"
        elif key == "retentionTimes":
            suggest = "retention_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YearlyRetentionScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YearlyRetentionScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YearlyRetentionScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 months_of_year: Optional[Sequence[str]] = None,
                 retention_duration: Optional['outputs.RetentionDurationResponse'] = None,
                 retention_schedule_daily: Optional['outputs.DailyRetentionFormatResponse'] = None,
                 retention_schedule_format_type: Optional[str] = None,
                 retention_schedule_weekly: Optional['outputs.WeeklyRetentionFormatResponse'] = None,
                 retention_times: Optional[Sequence[str]] = None):
        """
        Yearly retention schedule.
        :param Sequence[str] months_of_year: List of months of year of yearly retention policy.
        :param 'RetentionDurationResponse' retention_duration: Retention duration of retention Policy.
        :param 'DailyRetentionFormatResponse' retention_schedule_daily: Daily retention format for yearly retention policy.
        :param str retention_schedule_format_type: Retention schedule format for yearly retention policy.
        :param 'WeeklyRetentionFormatResponse' retention_schedule_weekly: Weekly retention format for yearly retention policy.
        :param Sequence[str] retention_times: Retention times of retention policy.
        """
        if months_of_year is not None:
            pulumi.set(__self__, "months_of_year", months_of_year)
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if retention_schedule_daily is not None:
            pulumi.set(__self__, "retention_schedule_daily", retention_schedule_daily)
        if retention_schedule_format_type is not None:
            pulumi.set(__self__, "retention_schedule_format_type", retention_schedule_format_type)
        if retention_schedule_weekly is not None:
            pulumi.set(__self__, "retention_schedule_weekly", retention_schedule_weekly)
        if retention_times is not None:
            pulumi.set(__self__, "retention_times", retention_times)

    @property
    @pulumi.getter(name="monthsOfYear")
    def months_of_year(self) -> Optional[Sequence[str]]:
        """
        List of months of year of yearly retention policy.
        """
        return pulumi.get(self, "months_of_year")

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional['outputs.RetentionDurationResponse']:
        """
        Retention duration of retention Policy.
        """
        return pulumi.get(self, "retention_duration")

    @property
    @pulumi.getter(name="retentionScheduleDaily")
    def retention_schedule_daily(self) -> Optional['outputs.DailyRetentionFormatResponse']:
        """
        Daily retention format for yearly retention policy.
        """
        return pulumi.get(self, "retention_schedule_daily")

    @property
    @pulumi.getter(name="retentionScheduleFormatType")
    def retention_schedule_format_type(self) -> Optional[str]:
        """
        Retention schedule format for yearly retention policy.
        """
        return pulumi.get(self, "retention_schedule_format_type")

    @property
    @pulumi.getter(name="retentionScheduleWeekly")
    def retention_schedule_weekly(self) -> Optional['outputs.WeeklyRetentionFormatResponse']:
        """
        Weekly retention format for yearly retention policy.
        """
        return pulumi.get(self, "retention_schedule_weekly")

    @property
    @pulumi.getter(name="retentionTimes")
    def retention_times(self) -> Optional[Sequence[str]]:
        """
        Retention times of retention policy.
        """
        return pulumi.get(self, "retention_times")


