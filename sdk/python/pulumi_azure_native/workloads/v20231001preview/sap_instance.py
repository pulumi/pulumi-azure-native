# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = ['SapInstanceArgs', 'SapInstance']

@pulumi.input_type
class SapInstanceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 sap_discovery_site_name: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 sap_instance_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SapInstance resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] sap_discovery_site_name: The name of the discovery site resource for SAP Migration.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] sap_instance_name: The name of SAP Instance resource for SAP Migration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "sap_discovery_site_name", sap_discovery_site_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if sap_instance_name is not None:
            pulumi.set(__self__, "sap_instance_name", sap_instance_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="sapDiscoverySiteName")
    def sap_discovery_site_name(self) -> pulumi.Input[str]:
        """
        The name of the discovery site resource for SAP Migration.
        """
        return pulumi.get(self, "sap_discovery_site_name")

    @sap_discovery_site_name.setter
    def sap_discovery_site_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sap_discovery_site_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="sapInstanceName")
    def sap_instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of SAP Instance resource for SAP Migration.
        """
        return pulumi.get(self, "sap_instance_name")

    @sap_instance_name.setter
    def sap_instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sap_instance_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class SapInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sap_discovery_site_name: Optional[pulumi.Input[str]] = None,
                 sap_instance_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Define the SAP Instance resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] sap_discovery_site_name: The name of the discovery site resource for SAP Migration.
        :param pulumi.Input[str] sap_instance_name: The name of SAP Instance resource for SAP Migration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SapInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Define the SAP Instance resource.

        :param str resource_name: The name of the resource.
        :param SapInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SapInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sap_discovery_site_name: Optional[pulumi.Input[str]] = None,
                 sap_instance_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SapInstanceArgs.__new__(SapInstanceArgs)

            __props__.__dict__["location"] = location
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if sap_discovery_site_name is None and not opts.urn:
                raise TypeError("Missing required property 'sap_discovery_site_name'")
            __props__.__dict__["sap_discovery_site_name"] = sap_discovery_site_name
            __props__.__dict__["sap_instance_name"] = sap_instance_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["application"] = None
            __props__.__dict__["environment"] = None
            __props__.__dict__["errors"] = None
            __props__.__dict__["landscape_sid"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["system_sid"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:workloads:SapInstance")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SapInstance, __self__).__init__(
            'azure-native:workloads/v20231001preview:SapInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SapInstance':
        """
        Get an existing SapInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SapInstanceArgs.__new__(SapInstanceArgs)

        __props__.__dict__["application"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["errors"] = None
        __props__.__dict__["landscape_sid"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["system_sid"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return SapInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def application(self) -> pulumi.Output[str]:
        """
        Enter a business function/department identifier to group multiple SIDs.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[str]:
        """
        The Environment; PRD, QA, DEV, etc to which SAP system belongs to. Select from the list of available dropdown values.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Output['outputs.SAPMigrateErrorResponse']:
        """
        Defines the errors related to SAP Instance resource.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="landscapeSid")
    def landscape_sid(self) -> pulumi.Output[str]:
        """
        This is the SID of the production system in a landscape.  An SAP system could itself be a production SID or a part of a landscape with a different Production SID. This field can be used to relate non-prod SIDs, other components, SID (WEBDISP) to the prod SID. Enter the value of Production SID.
        """
        return pulumi.get(self, "landscape_sid")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Defines the provisioning states.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="systemSid")
    def system_sid(self) -> pulumi.Output[str]:
        """
        This is the SID of SAP System. Keeping this not equal to ID as different landscapes can have repeated System SID IDs.
        """
        return pulumi.get(self, "system_sid")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

