# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSapInstanceResult',
    'AwaitableGetSapInstanceResult',
    'get_sap_instance',
    'get_sap_instance_output',
]

@pulumi.output_type
class GetSapInstanceResult:
    """
    Define the SAP Instance resource.
    """
    def __init__(__self__, application=None, environment=None, errors=None, id=None, landscape_sid=None, location=None, name=None, provisioning_state=None, system_data=None, system_sid=None, tags=None, type=None):
        if application and not isinstance(application, str):
            raise TypeError("Expected argument 'application' to be a str")
        pulumi.set(__self__, "application", application)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if errors and not isinstance(errors, dict):
            raise TypeError("Expected argument 'errors' to be a dict")
        pulumi.set(__self__, "errors", errors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if landscape_sid and not isinstance(landscape_sid, str):
            raise TypeError("Expected argument 'landscape_sid' to be a str")
        pulumi.set(__self__, "landscape_sid", landscape_sid)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if system_sid and not isinstance(system_sid, str):
            raise TypeError("Expected argument 'system_sid' to be a str")
        pulumi.set(__self__, "system_sid", system_sid)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def application(self) -> str:
        """
        Enter a business function/department identifier to group multiple SIDs.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def environment(self) -> str:
        """
        The Environment; PRD, QA, DEV, etc to which SAP system belongs to. Select from the list of available dropdown values.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.SAPMigrateErrorResponse':
        """
        Defines the errors related to SAP Instance resource.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="landscapeSid")
    def landscape_sid(self) -> str:
        """
        This is the SID of the production system in a landscape.  An SAP system could itself be a production SID or a part of a landscape with a different Production SID. This field can be used to relate non-prod SIDs, other components, SID (WEBDISP) to the prod SID. Enter the value of Production SID.
        """
        return pulumi.get(self, "landscape_sid")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Defines the provisioning states.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="systemSid")
    def system_sid(self) -> str:
        """
        This is the SID of SAP System. Keeping this not equal to ID as different landscapes can have repeated System SID IDs.
        """
        return pulumi.get(self, "system_sid")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetSapInstanceResult(GetSapInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSapInstanceResult(
            application=self.application,
            environment=self.environment,
            errors=self.errors,
            id=self.id,
            landscape_sid=self.landscape_sid,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            system_sid=self.system_sid,
            tags=self.tags,
            type=self.type)


def get_sap_instance(resource_group_name: Optional[str] = None,
                     sap_discovery_site_name: Optional[str] = None,
                     sap_instance_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSapInstanceResult:
    """
    Gets the SAP Instance resource.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str sap_discovery_site_name: The name of the discovery site resource for SAP Migration.
    :param str sap_instance_name: The name of SAP Instance resource for SAP Migration.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['sapDiscoverySiteName'] = sap_discovery_site_name
    __args__['sapInstanceName'] = sap_instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:workloads/v20231001preview:getSapInstance', __args__, opts=opts, typ=GetSapInstanceResult).value

    return AwaitableGetSapInstanceResult(
        application=pulumi.get(__ret__, 'application'),
        environment=pulumi.get(__ret__, 'environment'),
        errors=pulumi.get(__ret__, 'errors'),
        id=pulumi.get(__ret__, 'id'),
        landscape_sid=pulumi.get(__ret__, 'landscape_sid'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        system_sid=pulumi.get(__ret__, 'system_sid'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_sap_instance)
def get_sap_instance_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                            sap_discovery_site_name: Optional[pulumi.Input[str]] = None,
                            sap_instance_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSapInstanceResult]:
    """
    Gets the SAP Instance resource.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str sap_discovery_site_name: The name of the discovery site resource for SAP Migration.
    :param str sap_instance_name: The name of SAP Instance resource for SAP Migration.
    """
    ...
