# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DiskDetailsResponse',
    'DiskSkuResponse',
    'DiskVolumeConfigurationResponse',
    'SAPAvailabilityZonePairResponse',
    'SAPDiskConfigurationResponse',
    'SAPSupportedSkuResponse',
]

@pulumi.output_type
class DiskDetailsResponse(dict):
    """
    The supported disk size details for a disk type.
    """
    def __init__(__self__, *,
                 disk_tier: Optional[str] = None,
                 iops_read_write: Optional[float] = None,
                 maximum_supported_disk_count: Optional[float] = None,
                 mbps_read_write: Optional[float] = None,
                 minimum_supported_disk_count: Optional[float] = None,
                 size_gb: Optional[float] = None,
                 sku: Optional['outputs.DiskSkuResponse'] = None):
        """
        The supported disk size details for a disk type.
        :param str disk_tier: The disk tier, e.g. P10, E10.
        :param float iops_read_write: The disk Iops.
        :param float maximum_supported_disk_count: The maximum supported disk count.
        :param float mbps_read_write: The disk provisioned throughput in MBps.
        :param float minimum_supported_disk_count: The minimum supported disk count.
        :param float size_gb: The disk size in GB.
        :param 'DiskSkuResponse' sku: The disk sku.
        """
        DiskDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_tier=disk_tier,
            iops_read_write=iops_read_write,
            maximum_supported_disk_count=maximum_supported_disk_count,
            mbps_read_write=mbps_read_write,
            minimum_supported_disk_count=minimum_supported_disk_count,
            size_gb=size_gb,
            sku=sku,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_tier: Optional[str] = None,
             iops_read_write: Optional[float] = None,
             maximum_supported_disk_count: Optional[float] = None,
             mbps_read_write: Optional[float] = None,
             minimum_supported_disk_count: Optional[float] = None,
             size_gb: Optional[float] = None,
             sku: Optional['outputs.DiskSkuResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_tier is not None:
            _setter("disk_tier", disk_tier)
        if iops_read_write is not None:
            _setter("iops_read_write", iops_read_write)
        if maximum_supported_disk_count is not None:
            _setter("maximum_supported_disk_count", maximum_supported_disk_count)
        if mbps_read_write is not None:
            _setter("mbps_read_write", mbps_read_write)
        if minimum_supported_disk_count is not None:
            _setter("minimum_supported_disk_count", minimum_supported_disk_count)
        if size_gb is not None:
            _setter("size_gb", size_gb)
        if sku is not None:
            _setter("sku", sku)

    @property
    @pulumi.getter(name="diskTier")
    def disk_tier(self) -> Optional[str]:
        """
        The disk tier, e.g. P10, E10.
        """
        return pulumi.get(self, "disk_tier")

    @property
    @pulumi.getter(name="iopsReadWrite")
    def iops_read_write(self) -> Optional[float]:
        """
        The disk Iops.
        """
        return pulumi.get(self, "iops_read_write")

    @property
    @pulumi.getter(name="maximumSupportedDiskCount")
    def maximum_supported_disk_count(self) -> Optional[float]:
        """
        The maximum supported disk count.
        """
        return pulumi.get(self, "maximum_supported_disk_count")

    @property
    @pulumi.getter(name="mbpsReadWrite")
    def mbps_read_write(self) -> Optional[float]:
        """
        The disk provisioned throughput in MBps.
        """
        return pulumi.get(self, "mbps_read_write")

    @property
    @pulumi.getter(name="minimumSupportedDiskCount")
    def minimum_supported_disk_count(self) -> Optional[float]:
        """
        The minimum supported disk count.
        """
        return pulumi.get(self, "minimum_supported_disk_count")

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> Optional[float]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.DiskSkuResponse']:
        """
        The disk sku.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class DiskSkuResponse(dict):
    """
    The disk sku.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        The disk sku.
        :param str name: Defines the disk sku name.
        """
        DiskSkuResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Defines the disk sku name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DiskVolumeConfigurationResponse(dict):
    """
    The disk configuration required for the selected volume.
    """
    def __init__(__self__, *,
                 count: Optional[float] = None,
                 size_gb: Optional[float] = None,
                 sku: Optional['outputs.DiskSkuResponse'] = None):
        """
        The disk configuration required for the selected volume.
        :param float count: The total number of disks required for the concerned volume.
        :param float size_gb: The disk size in GB.
        :param 'DiskSkuResponse' sku: The disk SKU details.
        """
        DiskVolumeConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            size_gb=size_gb,
            sku=sku,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[float] = None,
             size_gb: Optional[float] = None,
             sku: Optional['outputs.DiskSkuResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if count is not None:
            _setter("count", count)
        if size_gb is not None:
            _setter("size_gb", size_gb)
        if sku is not None:
            _setter("sku", sku)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        """
        The total number of disks required for the concerned volume.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> Optional[float]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.DiskSkuResponse']:
        """
        The disk SKU details.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class SAPAvailabilityZonePairResponse(dict):
    """
    The SAP Availability Zone Pair.
    """
    def __init__(__self__, *,
                 zone_a: Optional[float] = None,
                 zone_b: Optional[float] = None):
        """
        The SAP Availability Zone Pair.
        :param float zone_a: The zone A.
        :param float zone_b: The zone B.
        """
        SAPAvailabilityZonePairResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            zone_a=zone_a,
            zone_b=zone_b,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             zone_a: Optional[float] = None,
             zone_b: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if zone_a is not None:
            _setter("zone_a", zone_a)
        if zone_b is not None:
            _setter("zone_b", zone_b)

    @property
    @pulumi.getter(name="zoneA")
    def zone_a(self) -> Optional[float]:
        """
        The zone A.
        """
        return pulumi.get(self, "zone_a")

    @property
    @pulumi.getter(name="zoneB")
    def zone_b(self) -> Optional[float]:
        """
        The zone B.
        """
        return pulumi.get(self, "zone_b")


@pulumi.output_type
class SAPDiskConfigurationResponse(dict):
    """
    The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
    """
    def __init__(__self__, *,
                 recommended_configuration: Optional['outputs.DiskVolumeConfigurationResponse'] = None,
                 supported_configurations: Optional[Sequence['outputs.DiskDetailsResponse']] = None):
        """
        The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
        :param 'DiskVolumeConfigurationResponse' recommended_configuration: The recommended disk details for a given VM Sku.
        :param Sequence['DiskDetailsResponse'] supported_configurations: The list of supported disks for a given VM Sku.
        """
        SAPDiskConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            recommended_configuration=recommended_configuration,
            supported_configurations=supported_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             recommended_configuration: Optional['outputs.DiskVolumeConfigurationResponse'] = None,
             supported_configurations: Optional[Sequence['outputs.DiskDetailsResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if recommended_configuration is not None:
            _setter("recommended_configuration", recommended_configuration)
        if supported_configurations is not None:
            _setter("supported_configurations", supported_configurations)

    @property
    @pulumi.getter(name="recommendedConfiguration")
    def recommended_configuration(self) -> Optional['outputs.DiskVolumeConfigurationResponse']:
        """
        The recommended disk details for a given VM Sku.
        """
        return pulumi.get(self, "recommended_configuration")

    @property
    @pulumi.getter(name="supportedConfigurations")
    def supported_configurations(self) -> Optional[Sequence['outputs.DiskDetailsResponse']]:
        """
        The list of supported disks for a given VM Sku.
        """
        return pulumi.get(self, "supported_configurations")


@pulumi.output_type
class SAPSupportedSkuResponse(dict):
    """
    The SAP supported SKU.
    """
    def __init__(__self__, *,
                 is_app_server_certified: Optional[bool] = None,
                 is_database_certified: Optional[bool] = None,
                 vm_sku: Optional[str] = None):
        """
        The SAP supported SKU.
        :param bool is_app_server_certified: True if the Sku is certified for App server in the SAP system.
        :param bool is_database_certified: True if the Sku is certified for Database server in the SAP system.
        :param str vm_sku: The VM Sku.
        """
        SAPSupportedSkuResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_app_server_certified=is_app_server_certified,
            is_database_certified=is_database_certified,
            vm_sku=vm_sku,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_app_server_certified: Optional[bool] = None,
             is_database_certified: Optional[bool] = None,
             vm_sku: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if is_app_server_certified is not None:
            _setter("is_app_server_certified", is_app_server_certified)
        if is_database_certified is not None:
            _setter("is_database_certified", is_database_certified)
        if vm_sku is not None:
            _setter("vm_sku", vm_sku)

    @property
    @pulumi.getter(name="isAppServerCertified")
    def is_app_server_certified(self) -> Optional[bool]:
        """
        True if the Sku is certified for App server in the SAP system.
        """
        return pulumi.get(self, "is_app_server_certified")

    @property
    @pulumi.getter(name="isDatabaseCertified")
    def is_database_certified(self) -> Optional[bool]:
        """
        True if the Sku is certified for Database server in the SAP system.
        """
        return pulumi.get(self, "is_database_certified")

    @property
    @pulumi.getter(name="vmSku")
    def vm_sku(self) -> Optional[str]:
        """
        The VM Sku.
        """
        return pulumi.get(self, "vm_sku")


