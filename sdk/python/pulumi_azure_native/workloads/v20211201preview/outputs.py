# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BackupProfileResponse',
    'CacheProfileResponse',
    'DatabaseProfileResponse',
    'DiskInfoResponse',
    'ErrorDefinitionResponse',
    'FileshareProfileResponse',
    'ManagedRGConfigurationResponse',
    'NetworkProfileResponse',
    'NodeProfileResponse',
    'OsImageProfileResponse',
    'PhpProfileResponse',
    'PhpWorkloadResourceResponseIdentity',
    'SAPAvailabilityZonePairResponse',
    'SAPDiskConfigurationResponse',
    'SAPSupportedSkuResponse',
    'SAPVirtualInstanceErrorResponse',
    'SearchProfileResponse',
    'SiteProfileResponse',
    'SkuResponse',
    'StorageInformationResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'UserProfileResponse',
    'VmssNodesProfileResponse',
]

@pulumi.output_type
class BackupProfileResponse(dict):
    """
    Backup profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupEnabled":
            suggest = "backup_enabled"
        elif key == "vaultResourceId":
            suggest = "vault_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_enabled: str,
                 vault_resource_id: str):
        """
        Backup profile
        :param str backup_enabled: Whether to enable Azure backup for the workload
        :param str vault_resource_id: Backup vault resource Id
        """
        pulumi.set(__self__, "backup_enabled", backup_enabled)
        pulumi.set(__self__, "vault_resource_id", vault_resource_id)

    @property
    @pulumi.getter(name="backupEnabled")
    def backup_enabled(self) -> str:
        """
        Whether to enable Azure backup for the workload
        """
        return pulumi.get(self, "backup_enabled")

    @property
    @pulumi.getter(name="vaultResourceId")
    def vault_resource_id(self) -> str:
        """
        Backup vault resource Id
        """
        return pulumi.get(self, "vault_resource_id")


@pulumi.output_type
class CacheProfileResponse(dict):
    """
    Cache profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheResourceId":
            suggest = "cache_resource_id"
        elif key == "skuName":
            suggest = "sku_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CacheProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CacheProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CacheProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_resource_id: str,
                 capacity: float,
                 family: str,
                 sku_name: str,
                 name: Optional[str] = None):
        """
        Cache profile
        :param str cache_resource_id: Cache resource Id
        :param float capacity: Cache capacity
        :param str family: Cache family
        :param str sku_name: Cache SKU name
        :param str name: Cache name
        """
        pulumi.set(__self__, "cache_resource_id", cache_resource_id)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "sku_name", sku_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cacheResourceId")
    def cache_resource_id(self) -> str:
        """
        Cache resource Id
        """
        return pulumi.get(self, "cache_resource_id")

    @property
    @pulumi.getter
    def capacity(self) -> float:
        """
        Cache capacity
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        Cache family
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> str:
        """
        Cache SKU name
        """
        return pulumi.get(self, "sku_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Cache name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatabaseProfileResponse(dict):
    """
    Workload database profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverResourceId":
            suggest = "server_resource_id"
        elif key == "backupRetentionDays":
            suggest = "backup_retention_days"
        elif key == "haEnabled":
            suggest = "ha_enabled"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "sslEnforcementEnabled":
            suggest = "ssl_enforcement_enabled"
        elif key == "storageInGB":
            suggest = "storage_in_gb"
        elif key == "storageIops":
            suggest = "storage_iops"
        elif key == "storageSku":
            suggest = "storage_sku"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_resource_id: str,
                 sku: str,
                 tier: str,
                 type: str,
                 backup_retention_days: Optional[int] = None,
                 ha_enabled: Optional[str] = None,
                 server_name: Optional[str] = None,
                 ssl_enforcement_enabled: Optional[str] = None,
                 storage_in_gb: Optional[float] = None,
                 storage_iops: Optional[float] = None,
                 storage_sku: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Workload database profile
        :param str server_resource_id: Azure Database Server resource Id
        :param str sku: The name of the server SKU, e.g. Standard_D32s_v4
        :param str tier: Tier of the server SKU
        :param str type: Database type
        :param int backup_retention_days: Backup retention days for the server
        :param str ha_enabled: Whether to enable HA for the server
        :param str server_name: Database server name
        :param str ssl_enforcement_enabled: Whether to enable SSL enforcement on the database
        :param float storage_in_gb: Database storage size in GB
        :param float storage_iops: Storage IOPS for the server
        :param str storage_sku: SKU name for database storage
        :param str version: Database version
        """
        pulumi.set(__self__, "server_resource_id", server_resource_id)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "tier", tier)
        pulumi.set(__self__, "type", type)
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if ssl_enforcement_enabled is not None:
            pulumi.set(__self__, "ssl_enforcement_enabled", ssl_enforcement_enabled)
        if storage_in_gb is not None:
            pulumi.set(__self__, "storage_in_gb", storage_in_gb)
        if storage_iops is not None:
            pulumi.set(__self__, "storage_iops", storage_iops)
        if storage_sku is not None:
            pulumi.set(__self__, "storage_sku", storage_sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="serverResourceId")
    def server_resource_id(self) -> str:
        """
        Azure Database Server resource Id
        """
        return pulumi.get(self, "server_resource_id")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        The name of the server SKU, e.g. Standard_D32s_v4
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        Tier of the server SKU
        """
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Database type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[int]:
        """
        Backup retention days for the server
        """
        return pulumi.get(self, "backup_retention_days")

    @property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[str]:
        """
        Whether to enable HA for the server
        """
        return pulumi.get(self, "ha_enabled")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        Database server name
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslEnforcementEnabled")
    def ssl_enforcement_enabled(self) -> Optional[str]:
        """
        Whether to enable SSL enforcement on the database
        """
        return pulumi.get(self, "ssl_enforcement_enabled")

    @property
    @pulumi.getter(name="storageInGB")
    def storage_in_gb(self) -> Optional[float]:
        """
        Database storage size in GB
        """
        return pulumi.get(self, "storage_in_gb")

    @property
    @pulumi.getter(name="storageIops")
    def storage_iops(self) -> Optional[float]:
        """
        Storage IOPS for the server
        """
        return pulumi.get(self, "storage_iops")

    @property
    @pulumi.getter(name="storageSku")
    def storage_sku(self) -> Optional[str]:
        """
        SKU name for database storage
        """
        return pulumi.get(self, "storage_sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Database version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DiskInfoResponse(dict):
    """
    Disk resource creation details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageType":
            suggest = "storage_type"
        elif key == "sizeInGB":
            suggest = "size_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_type: str,
                 size_in_gb: Optional[float] = None):
        """
        Disk resource creation details
        :param str storage_type: Storage type
        :param float size_in_gb: Disk size in GB
        """
        pulumi.set(__self__, "storage_type", storage_type)
        if size_in_gb is not None:
            pulumi.set(__self__, "size_in_gb", size_in_gb)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        Storage type
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="sizeInGB")
    def size_in_gb(self) -> Optional[float]:
        """
        Disk size in GB
        """
        return pulumi.get(self, "size_in_gb")


@pulumi.output_type
class ErrorDefinitionResponse(dict):
    """
    Error definition.
    """
    def __init__(__self__, *,
                 code: str,
                 details: Sequence['outputs.ErrorDefinitionResponse'],
                 message: str):
        """
        Error definition.
        :param str code: Service specific error code which serves as the substatus for the HTTP error code.
        :param Sequence['ErrorDefinitionResponse'] details: Internal error details.
        :param str message: Description of the error.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Service specific error code which serves as the substatus for the HTTP error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDefinitionResponse']:
        """
        Internal error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Description of the error.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class FileshareProfileResponse(dict):
    """
    File share profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareName":
            suggest = "share_name"
        elif key == "shareType":
            suggest = "share_type"
        elif key == "storageResourceId":
            suggest = "storage_resource_id"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "shareSizeInGB":
            suggest = "share_size_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileshareProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileshareProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileshareProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_name: str,
                 share_type: str,
                 storage_resource_id: str,
                 storage_type: str,
                 share_size_in_gb: Optional[float] = None):
        """
        File share profile
        :param str share_name: File share name
        :param str share_type: Share type
        :param str storage_resource_id: File share storage resource id
        :param str storage_type: File share backing storage type
        :param float share_size_in_gb: File share size in GB
        """
        pulumi.set(__self__, "share_name", share_name)
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "storage_resource_id", storage_resource_id)
        pulumi.set(__self__, "storage_type", storage_type)
        if share_size_in_gb is not None:
            pulumi.set(__self__, "share_size_in_gb", share_size_in_gb)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        """
        File share name
        """
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> str:
        """
        Share type
        """
        return pulumi.get(self, "share_type")

    @property
    @pulumi.getter(name="storageResourceId")
    def storage_resource_id(self) -> str:
        """
        File share storage resource id
        """
        return pulumi.get(self, "storage_resource_id")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        File share backing storage type
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="shareSizeInGB")
    def share_size_in_gb(self) -> Optional[float]:
        """
        File share size in GB
        """
        return pulumi.get(self, "share_size_in_gb")


@pulumi.output_type
class ManagedRGConfigurationResponse(dict):
    """
    Managed resource group configuration
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Managed resource group configuration
        :param str name: Managed resource group name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Managed resource group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NetworkProfileResponse(dict):
    """
    Network profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureFrontDoorResourceId":
            suggest = "azure_front_door_resource_id"
        elif key == "frontEndPublicIpResourceId":
            suggest = "front_end_public_ip_resource_id"
        elif key == "loadBalancerResourceId":
            suggest = "load_balancer_resource_id"
        elif key == "loadBalancerType":
            suggest = "load_balancer_type"
        elif key == "outboundPublicIpResourceIds":
            suggest = "outbound_public_ip_resource_ids"
        elif key == "vNetResourceId":
            suggest = "v_net_resource_id"
        elif key == "azureFrontDoorEnabled":
            suggest = "azure_front_door_enabled"
        elif key == "loadBalancerSku":
            suggest = "load_balancer_sku"
        elif key == "loadBalancerTier":
            suggest = "load_balancer_tier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_front_door_resource_id: str,
                 front_end_public_ip_resource_id: str,
                 load_balancer_resource_id: str,
                 load_balancer_type: str,
                 outbound_public_ip_resource_ids: Sequence[str],
                 v_net_resource_id: str,
                 azure_front_door_enabled: Optional[str] = None,
                 capacity: Optional[int] = None,
                 load_balancer_sku: Optional[str] = None,
                 load_balancer_tier: Optional[str] = None):
        """
        Network profile
        :param str azure_front_door_resource_id: Azure front door resource id
        :param str front_end_public_ip_resource_id: Loadbalancer front-end IP address resource Id
        :param str load_balancer_resource_id: Azure Loadbalancer or ApplicationGateway resource Id
        :param str load_balancer_type: Load balancer type
        :param Sequence[str] outbound_public_ip_resource_ids: List of outbound public IP resource IDs
        :param str v_net_resource_id: Virtual network resource Id
        :param str azure_front_door_enabled: Whether to enable Azure front door
        :param int capacity: Capacity, applicable only for Application Gateway
        :param str load_balancer_sku: Load balancer SKU
        :param str load_balancer_tier: Load balancer tier
        """
        pulumi.set(__self__, "azure_front_door_resource_id", azure_front_door_resource_id)
        pulumi.set(__self__, "front_end_public_ip_resource_id", front_end_public_ip_resource_id)
        pulumi.set(__self__, "load_balancer_resource_id", load_balancer_resource_id)
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "outbound_public_ip_resource_ids", outbound_public_ip_resource_ids)
        pulumi.set(__self__, "v_net_resource_id", v_net_resource_id)
        if azure_front_door_enabled is not None:
            pulumi.set(__self__, "azure_front_door_enabled", azure_front_door_enabled)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if load_balancer_sku is not None:
            pulumi.set(__self__, "load_balancer_sku", load_balancer_sku)
        if load_balancer_tier is not None:
            pulumi.set(__self__, "load_balancer_tier", load_balancer_tier)

    @property
    @pulumi.getter(name="azureFrontDoorResourceId")
    def azure_front_door_resource_id(self) -> str:
        """
        Azure front door resource id
        """
        return pulumi.get(self, "azure_front_door_resource_id")

    @property
    @pulumi.getter(name="frontEndPublicIpResourceId")
    def front_end_public_ip_resource_id(self) -> str:
        """
        Loadbalancer front-end IP address resource Id
        """
        return pulumi.get(self, "front_end_public_ip_resource_id")

    @property
    @pulumi.getter(name="loadBalancerResourceId")
    def load_balancer_resource_id(self) -> str:
        """
        Azure Loadbalancer or ApplicationGateway resource Id
        """
        return pulumi.get(self, "load_balancer_resource_id")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> str:
        """
        Load balancer type
        """
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="outboundPublicIpResourceIds")
    def outbound_public_ip_resource_ids(self) -> Sequence[str]:
        """
        List of outbound public IP resource IDs
        """
        return pulumi.get(self, "outbound_public_ip_resource_ids")

    @property
    @pulumi.getter(name="vNetResourceId")
    def v_net_resource_id(self) -> str:
        """
        Virtual network resource Id
        """
        return pulumi.get(self, "v_net_resource_id")

    @property
    @pulumi.getter(name="azureFrontDoorEnabled")
    def azure_front_door_enabled(self) -> Optional[str]:
        """
        Whether to enable Azure front door
        """
        return pulumi.get(self, "azure_front_door_enabled")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Capacity, applicable only for Application Gateway
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="loadBalancerSku")
    def load_balancer_sku(self) -> Optional[str]:
        """
        Load balancer SKU
        """
        return pulumi.get(self, "load_balancer_sku")

    @property
    @pulumi.getter(name="loadBalancerTier")
    def load_balancer_tier(self) -> Optional[str]:
        """
        Load balancer tier
        """
        return pulumi.get(self, "load_balancer_tier")


@pulumi.output_type
class NodeProfileResponse(dict):
    """
    VM or VMSS node profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeResourceIds":
            suggest = "node_resource_ids"
        elif key == "nodeSku":
            suggest = "node_sku"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "osImage":
            suggest = "os_image"
        elif key == "dataDisks":
            suggest = "data_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_resource_ids: Sequence[str],
                 node_sku: str,
                 os_disk: 'outputs.DiskInfoResponse',
                 os_image: 'outputs.OsImageProfileResponse',
                 data_disks: Optional[Sequence['outputs.DiskInfoResponse']] = None,
                 name: Optional[str] = None):
        """
        VM or VMSS node profile
        :param Sequence[str] node_resource_ids: VM/VMSS resource ARM Ids
        :param str node_sku: VM SKU for node(s)
        :param 'DiskInfoResponse' os_disk: OS disk details
        :param 'OsImageProfileResponse' os_image: OS image used for creating the nodes
        :param Sequence['DiskInfoResponse'] data_disks: Data disks details. This property is not in use right now
        :param str name: VM or VMSS name
        """
        pulumi.set(__self__, "node_resource_ids", node_resource_ids)
        pulumi.set(__self__, "node_sku", node_sku)
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "os_image", os_image)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nodeResourceIds")
    def node_resource_ids(self) -> Sequence[str]:
        """
        VM/VMSS resource ARM Ids
        """
        return pulumi.get(self, "node_resource_ids")

    @property
    @pulumi.getter(name="nodeSku")
    def node_sku(self) -> str:
        """
        VM SKU for node(s)
        """
        return pulumi.get(self, "node_sku")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> 'outputs.DiskInfoResponse':
        """
        OS disk details
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="osImage")
    def os_image(self) -> 'outputs.OsImageProfileResponse':
        """
        OS image used for creating the nodes
        """
        return pulumi.get(self, "os_image")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.DiskInfoResponse']]:
        """
        Data disks details. This property is not in use right now
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VM or VMSS name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OsImageProfileResponse(dict):
    """
    OS image profile
    """
    def __init__(__self__, *,
                 offer: Optional[str] = None,
                 publisher: Optional[str] = None,
                 sku: Optional[str] = None,
                 version: Optional[str] = None):
        """
        OS image profile
        :param str offer: OS image offer
        :param str publisher: OS image publisher
        :param str sku: OS image sku
        :param str version: OS image version
        """
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def offer(self) -> Optional[str]:
        """
        OS image offer
        """
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        OS image publisher
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        OS image sku
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        OS image version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class PhpProfileResponse(dict):
    """
    PHP profile
    """
    def __init__(__self__, *,
                 version: str):
        """
        PHP profile
        :param str version: PHP version
        """
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        PHP version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class PhpWorkloadResourceResponseIdentity(dict):
    """
    Identity for the resource. Currently not supported
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PhpWorkloadResourceResponseIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PhpWorkloadResourceResponseIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PhpWorkloadResourceResponseIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Identity for the resource. Currently not supported
        :param str type: Type of manage identity
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: User assigned identities dictionary
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of manage identity
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        User assigned identities dictionary
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class SAPAvailabilityZonePairResponse(dict):
    """
    The SAP Availability Zone Pair.
    """
    def __init__(__self__, *,
                 zone_a: Optional[float] = None,
                 zone_b: Optional[float] = None):
        """
        The SAP Availability Zone Pair.
        :param float zone_a: The zone A.
        :param float zone_b: The zone B.
        """
        if zone_a is not None:
            pulumi.set(__self__, "zone_a", zone_a)
        if zone_b is not None:
            pulumi.set(__self__, "zone_b", zone_b)

    @property
    @pulumi.getter(name="zoneA")
    def zone_a(self) -> Optional[float]:
        """
        The zone A.
        """
        return pulumi.get(self, "zone_a")

    @property
    @pulumi.getter(name="zoneB")
    def zone_b(self) -> Optional[float]:
        """
        The zone B.
        """
        return pulumi.get(self, "zone_b")


@pulumi.output_type
class SAPDiskConfigurationResponse(dict):
    """
    The SAP Disk Configuration.
    """
    def __init__(__self__, *,
                 disk_count: Optional[float] = None,
                 disk_iops_read_write: Optional[float] = None,
                 disk_m_bps_read_write: Optional[float] = None,
                 disk_size_gb: Optional[float] = None,
                 disk_storage_type: Optional[str] = None,
                 disk_type: Optional[str] = None,
                 volume: Optional[str] = None):
        """
        The SAP Disk Configuration.
        :param float disk_count: The disk count.
        :param float disk_iops_read_write: The disk Iops.
        :param float disk_m_bps_read_write: The disk provisioned throughput in MBps.
        :param float disk_size_gb: The disk size in GB.
        :param str disk_storage_type: The disk storage type
        :param str disk_type: The disk type.
        :param str volume: The volume name.
        """
        if disk_count is not None:
            pulumi.set(__self__, "disk_count", disk_count)
        if disk_iops_read_write is not None:
            pulumi.set(__self__, "disk_iops_read_write", disk_iops_read_write)
        if disk_m_bps_read_write is not None:
            pulumi.set(__self__, "disk_m_bps_read_write", disk_m_bps_read_write)
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if disk_storage_type is not None:
            pulumi.set(__self__, "disk_storage_type", disk_storage_type)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[float]:
        """
        The disk count.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskIopsReadWrite")
    def disk_iops_read_write(self) -> Optional[float]:
        """
        The disk Iops.
        """
        return pulumi.get(self, "disk_iops_read_write")

    @property
    @pulumi.getter(name="diskMBpsReadWrite")
    def disk_m_bps_read_write(self) -> Optional[float]:
        """
        The disk provisioned throughput in MBps.
        """
        return pulumi.get(self, "disk_m_bps_read_write")

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[float]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="diskStorageType")
    def disk_storage_type(self) -> Optional[str]:
        """
        The disk storage type
        """
        return pulumi.get(self, "disk_storage_type")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def volume(self) -> Optional[str]:
        """
        The volume name.
        """
        return pulumi.get(self, "volume")


@pulumi.output_type
class SAPSupportedSkuResponse(dict):
    """
    The SAP supported SKU.
    """
    def __init__(__self__, *,
                 is_app_server_certified: Optional[bool] = None,
                 is_database_certified: Optional[bool] = None,
                 vm_sku: Optional[str] = None):
        """
        The SAP supported SKU.
        :param bool is_app_server_certified: True if the Sku is certified for App server in the SAP system.
        :param bool is_database_certified: True if the Sku is certified for Database server in the SAP system.
        :param str vm_sku: The VM Sku.
        """
        if is_app_server_certified is not None:
            pulumi.set(__self__, "is_app_server_certified", is_app_server_certified)
        if is_database_certified is not None:
            pulumi.set(__self__, "is_database_certified", is_database_certified)
        if vm_sku is not None:
            pulumi.set(__self__, "vm_sku", vm_sku)

    @property
    @pulumi.getter(name="isAppServerCertified")
    def is_app_server_certified(self) -> Optional[bool]:
        """
        True if the Sku is certified for App server in the SAP system.
        """
        return pulumi.get(self, "is_app_server_certified")

    @property
    @pulumi.getter(name="isDatabaseCertified")
    def is_database_certified(self) -> Optional[bool]:
        """
        True if the Sku is certified for Database server in the SAP system.
        """
        return pulumi.get(self, "is_database_certified")

    @property
    @pulumi.getter(name="vmSku")
    def vm_sku(self) -> Optional[str]:
        """
        The VM Sku.
        """
        return pulumi.get(self, "vm_sku")


@pulumi.output_type
class SAPVirtualInstanceErrorResponse(dict):
    """
    An error response from the Virtual Instance for SAP Workload service.
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ErrorDefinitionResponse'] = None):
        """
        An error response from the Virtual Instance for SAP Workload service.
        :param 'ErrorDefinitionResponse' properties: The Virtual Instance for SAP error body.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ErrorDefinitionResponse']:
        """
        The Virtual Instance for SAP error body.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class SearchProfileResponse(dict):
    """
    Search profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeResourceIds":
            suggest = "node_resource_ids"
        elif key == "nodeSku":
            suggest = "node_sku"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "osImage":
            suggest = "os_image"
        elif key == "searchType":
            suggest = "search_type"
        elif key == "dataDisks":
            suggest = "data_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SearchProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SearchProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SearchProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_resource_ids: Sequence[str],
                 node_sku: str,
                 os_disk: 'outputs.DiskInfoResponse',
                 os_image: 'outputs.OsImageProfileResponse',
                 search_type: str,
                 data_disks: Optional[Sequence['outputs.DiskInfoResponse']] = None,
                 name: Optional[str] = None):
        """
        Search profile
        :param Sequence[str] node_resource_ids: VM/VMSS resource ARM Ids
        :param str node_sku: VM SKU for node(s)
        :param 'DiskInfoResponse' os_disk: OS disk details
        :param 'OsImageProfileResponse' os_image: OS image used for creating the nodes
        :param str search_type: Search type
        :param Sequence['DiskInfoResponse'] data_disks: Data disks details. This property is not in use right now
        :param str name: VM or VMSS name
        """
        pulumi.set(__self__, "node_resource_ids", node_resource_ids)
        pulumi.set(__self__, "node_sku", node_sku)
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "os_image", os_image)
        pulumi.set(__self__, "search_type", search_type)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nodeResourceIds")
    def node_resource_ids(self) -> Sequence[str]:
        """
        VM/VMSS resource ARM Ids
        """
        return pulumi.get(self, "node_resource_ids")

    @property
    @pulumi.getter(name="nodeSku")
    def node_sku(self) -> str:
        """
        VM SKU for node(s)
        """
        return pulumi.get(self, "node_sku")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> 'outputs.DiskInfoResponse':
        """
        OS disk details
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="osImage")
    def os_image(self) -> 'outputs.OsImageProfileResponse':
        """
        OS image used for creating the nodes
        """
        return pulumi.get(self, "os_image")

    @property
    @pulumi.getter(name="searchType")
    def search_type(self) -> str:
        """
        Search type
        """
        return pulumi.get(self, "search_type")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.DiskInfoResponse']]:
        """
        Data disks details. This property is not in use right now
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VM or VMSS name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SiteProfileResponse(dict):
    """
    Workload website profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None):
        """
        Workload website profile
        :param str domain_name: Domain name for the application site URL
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        Domain name for the application site URL
        """
        return pulumi.get(self, "domain_name")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class StorageInformationResponse(dict):
    """
    Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage. 
    """
    def __init__(__self__, *,
                 id: str):
        """
        Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage. 
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserProfileResponse(dict):
    """
    User profile to configure on a compute resources such as VM, VMSS
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshPublicKey":
            suggest = "ssh_public_key"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_public_key: str,
                 user_name: str):
        """
        User profile to configure on a compute resources such as VM, VMSS
        :param str ssh_public_key: SSH public key data
        :param str user_name: User name
        """
        pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> str:
        """
        SSH public key data
        """
        return pulumi.get(self, "ssh_public_key")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class VmssNodesProfileResponse(dict):
    """
    VMSS profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeResourceIds":
            suggest = "node_resource_ids"
        elif key == "nodeSku":
            suggest = "node_sku"
        elif key == "osDisk":
            suggest = "os_disk"
        elif key == "osImage":
            suggest = "os_image"
        elif key == "autoScaleMaxCount":
            suggest = "auto_scale_max_count"
        elif key == "autoScaleMinCount":
            suggest = "auto_scale_min_count"
        elif key == "dataDisks":
            suggest = "data_disks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmssNodesProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmssNodesProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmssNodesProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_resource_ids: Sequence[str],
                 node_sku: str,
                 os_disk: 'outputs.DiskInfoResponse',
                 os_image: 'outputs.OsImageProfileResponse',
                 auto_scale_max_count: Optional[int] = None,
                 auto_scale_min_count: Optional[int] = None,
                 data_disks: Optional[Sequence['outputs.DiskInfoResponse']] = None,
                 name: Optional[str] = None):
        """
        VMSS profile
        :param Sequence[str] node_resource_ids: VM/VMSS resource ARM Ids
        :param str node_sku: VM SKU for node(s)
        :param 'DiskInfoResponse' os_disk: OS disk details
        :param 'OsImageProfileResponse' os_image: OS image used for creating the nodes
        :param int auto_scale_max_count: Maximum number of nodes for autoscale
        :param int auto_scale_min_count: Minimum number of nodes for autoscale
        :param Sequence['DiskInfoResponse'] data_disks: Data disks details. This property is not in use right now
        :param str name: VM or VMSS name
        """
        pulumi.set(__self__, "node_resource_ids", node_resource_ids)
        pulumi.set(__self__, "node_sku", node_sku)
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "os_image", os_image)
        if auto_scale_max_count is not None:
            pulumi.set(__self__, "auto_scale_max_count", auto_scale_max_count)
        if auto_scale_min_count is not None:
            pulumi.set(__self__, "auto_scale_min_count", auto_scale_min_count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nodeResourceIds")
    def node_resource_ids(self) -> Sequence[str]:
        """
        VM/VMSS resource ARM Ids
        """
        return pulumi.get(self, "node_resource_ids")

    @property
    @pulumi.getter(name="nodeSku")
    def node_sku(self) -> str:
        """
        VM SKU for node(s)
        """
        return pulumi.get(self, "node_sku")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> 'outputs.DiskInfoResponse':
        """
        OS disk details
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="osImage")
    def os_image(self) -> 'outputs.OsImageProfileResponse':
        """
        OS image used for creating the nodes
        """
        return pulumi.get(self, "os_image")

    @property
    @pulumi.getter(name="autoScaleMaxCount")
    def auto_scale_max_count(self) -> Optional[int]:
        """
        Maximum number of nodes for autoscale
        """
        return pulumi.get(self, "auto_scale_max_count")

    @property
    @pulumi.getter(name="autoScaleMinCount")
    def auto_scale_min_count(self) -> Optional[int]:
        """
        Minimum number of nodes for autoscale
        """
        return pulumi.get(self, "auto_scale_min_count")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.DiskInfoResponse']]:
        """
        Data disks details. This property is not in use right now
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VM or VMSS name
        """
        return pulumi.get(self, "name")


