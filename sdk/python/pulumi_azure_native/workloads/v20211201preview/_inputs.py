# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'BackupProfileArgs',
    'BackupProfileArgsDict',
    'CacheProfileArgs',
    'CacheProfileArgsDict',
    'DatabaseProfileArgs',
    'DatabaseProfileArgsDict',
    'DiskInfoArgs',
    'DiskInfoArgsDict',
    'FileshareProfileArgs',
    'FileshareProfileArgsDict',
    'ManagedRGConfigurationArgs',
    'ManagedRGConfigurationArgsDict',
    'NetworkProfileArgs',
    'NetworkProfileArgsDict',
    'NodeProfileArgs',
    'NodeProfileArgsDict',
    'OsImageProfileArgs',
    'OsImageProfileArgsDict',
    'PhpProfileArgs',
    'PhpProfileArgsDict',
    'PhpWorkloadResourceIdentityArgs',
    'PhpWorkloadResourceIdentityArgsDict',
    'SearchProfileArgs',
    'SearchProfileArgsDict',
    'SiteProfileArgs',
    'SiteProfileArgsDict',
    'SkuArgs',
    'SkuArgsDict',
    'UserProfileArgs',
    'UserProfileArgsDict',
    'VmssNodesProfileArgs',
    'VmssNodesProfileArgsDict',
]

MYPY = False

if not MYPY:
    class BackupProfileArgsDict(TypedDict):
        """
        Backup profile
        """
        backup_enabled: pulumi.Input[Union[str, 'EnableBackup']]
        """
        Whether to enable Azure backup for the workload
        """
elif False:
    BackupProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupProfileArgs:
    def __init__(__self__, *,
                 backup_enabled: pulumi.Input[Union[str, 'EnableBackup']]):
        """
        Backup profile
        :param pulumi.Input[Union[str, 'EnableBackup']] backup_enabled: Whether to enable Azure backup for the workload
        """
        pulumi.set(__self__, "backup_enabled", backup_enabled)

    @property
    @pulumi.getter(name="backupEnabled")
    def backup_enabled(self) -> pulumi.Input[Union[str, 'EnableBackup']]:
        """
        Whether to enable Azure backup for the workload
        """
        return pulumi.get(self, "backup_enabled")

    @backup_enabled.setter
    def backup_enabled(self, value: pulumi.Input[Union[str, 'EnableBackup']]):
        pulumi.set(self, "backup_enabled", value)


if not MYPY:
    class CacheProfileArgsDict(TypedDict):
        """
        Cache profile
        """
        capacity: pulumi.Input[float]
        """
        Cache capacity
        """
        family: pulumi.Input[Union[str, 'RedisCacheFamily']]
        """
        Cache family
        """
        sku_name: pulumi.Input[str]
        """
        Cache SKU name
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Cache name
        """
elif False:
    CacheProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CacheProfileArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[float],
                 family: pulumi.Input[Union[str, 'RedisCacheFamily']],
                 sku_name: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        Cache profile
        :param pulumi.Input[float] capacity: Cache capacity
        :param pulumi.Input[Union[str, 'RedisCacheFamily']] family: Cache family
        :param pulumi.Input[str] sku_name: Cache SKU name
        :param pulumi.Input[str] name: Cache name
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "sku_name", sku_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[float]:
        """
        Cache capacity
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> pulumi.Input[Union[str, 'RedisCacheFamily']]:
        """
        Cache family
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: pulumi.Input[Union[str, 'RedisCacheFamily']]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Input[str]:
        """
        Cache SKU name
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cache name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DatabaseProfileArgsDict(TypedDict):
        """
        Workload database profile
        """
        sku: pulumi.Input[str]
        """
        The name of the server SKU, e.g. Standard_D32s_v4
        """
        tier: pulumi.Input['DatabaseTier']
        """
        Tier of the server SKU
        """
        type: pulumi.Input[Union[str, 'DatabaseType']]
        """
        Database type
        """
        backup_retention_days: NotRequired[pulumi.Input[int]]
        """
        Backup retention days for the server
        """
        ha_enabled: NotRequired[pulumi.Input[Union[str, 'HAEnabled']]]
        """
        Whether to enable HA for the server
        """
        server_name: NotRequired[pulumi.Input[str]]
        """
        Database server name
        """
        ssl_enforcement_enabled: NotRequired[pulumi.Input[Union[str, 'EnableSslEnforcement']]]
        """
        Whether to enable SSL enforcement on the database
        """
        storage_in_gb: NotRequired[pulumi.Input[float]]
        """
        Database storage size in GB
        """
        storage_iops: NotRequired[pulumi.Input[float]]
        """
        Storage IOPS for the server
        """
        storage_sku: NotRequired[pulumi.Input[str]]
        """
        SKU name for database storage
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Database version
        """
elif False:
    DatabaseProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseProfileArgs:
    def __init__(__self__, *,
                 sku: pulumi.Input[str],
                 tier: pulumi.Input['DatabaseTier'],
                 type: pulumi.Input[Union[str, 'DatabaseType']],
                 backup_retention_days: Optional[pulumi.Input[int]] = None,
                 ha_enabled: Optional[pulumi.Input[Union[str, 'HAEnabled']]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl_enforcement_enabled: Optional[pulumi.Input[Union[str, 'EnableSslEnforcement']]] = None,
                 storage_in_gb: Optional[pulumi.Input[float]] = None,
                 storage_iops: Optional[pulumi.Input[float]] = None,
                 storage_sku: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Workload database profile
        :param pulumi.Input[str] sku: The name of the server SKU, e.g. Standard_D32s_v4
        :param pulumi.Input['DatabaseTier'] tier: Tier of the server SKU
        :param pulumi.Input[Union[str, 'DatabaseType']] type: Database type
        :param pulumi.Input[int] backup_retention_days: Backup retention days for the server
        :param pulumi.Input[Union[str, 'HAEnabled']] ha_enabled: Whether to enable HA for the server
        :param pulumi.Input[str] server_name: Database server name
        :param pulumi.Input[Union[str, 'EnableSslEnforcement']] ssl_enforcement_enabled: Whether to enable SSL enforcement on the database
        :param pulumi.Input[float] storage_in_gb: Database storage size in GB
        :param pulumi.Input[float] storage_iops: Storage IOPS for the server
        :param pulumi.Input[str] storage_sku: SKU name for database storage
        :param pulumi.Input[str] version: Database version
        """
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "tier", tier)
        pulumi.set(__self__, "type", type)
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if ssl_enforcement_enabled is not None:
            pulumi.set(__self__, "ssl_enforcement_enabled", ssl_enforcement_enabled)
        if storage_in_gb is not None:
            pulumi.set(__self__, "storage_in_gb", storage_in_gb)
        if storage_iops is not None:
            pulumi.set(__self__, "storage_iops", storage_iops)
        if storage_sku is not None:
            pulumi.set(__self__, "storage_sku", storage_sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[str]:
        """
        The name of the server SKU, e.g. Standard_D32s_v4
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def tier(self) -> pulumi.Input['DatabaseTier']:
        """
        Tier of the server SKU
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: pulumi.Input['DatabaseTier']):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'DatabaseType']]:
        """
        Database type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'DatabaseType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        Backup retention days for the server
        """
        return pulumi.get(self, "backup_retention_days")

    @backup_retention_days.setter
    def backup_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_days", value)

    @property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[Union[str, 'HAEnabled']]]:
        """
        Whether to enable HA for the server
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[Union[str, 'HAEnabled']]]):
        pulumi.set(self, "ha_enabled", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database server name
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sslEnforcementEnabled")
    def ssl_enforcement_enabled(self) -> Optional[pulumi.Input[Union[str, 'EnableSslEnforcement']]]:
        """
        Whether to enable SSL enforcement on the database
        """
        return pulumi.get(self, "ssl_enforcement_enabled")

    @ssl_enforcement_enabled.setter
    def ssl_enforcement_enabled(self, value: Optional[pulumi.Input[Union[str, 'EnableSslEnforcement']]]):
        pulumi.set(self, "ssl_enforcement_enabled", value)

    @property
    @pulumi.getter(name="storageInGB")
    def storage_in_gb(self) -> Optional[pulumi.Input[float]]:
        """
        Database storage size in GB
        """
        return pulumi.get(self, "storage_in_gb")

    @storage_in_gb.setter
    def storage_in_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storage_in_gb", value)

    @property
    @pulumi.getter(name="storageIops")
    def storage_iops(self) -> Optional[pulumi.Input[float]]:
        """
        Storage IOPS for the server
        """
        return pulumi.get(self, "storage_iops")

    @storage_iops.setter
    def storage_iops(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storage_iops", value)

    @property
    @pulumi.getter(name="storageSku")
    def storage_sku(self) -> Optional[pulumi.Input[str]]:
        """
        SKU name for database storage
        """
        return pulumi.get(self, "storage_sku")

    @storage_sku.setter
    def storage_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_sku", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Database version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class DiskInfoArgsDict(TypedDict):
        """
        Disk resource creation details
        """
        storage_type: pulumi.Input['DiskStorageType']
        """
        Storage type
        """
        size_in_gb: NotRequired[pulumi.Input[float]]
        """
        Disk size in GB
        """
elif False:
    DiskInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DiskInfoArgs:
    def __init__(__self__, *,
                 storage_type: pulumi.Input['DiskStorageType'],
                 size_in_gb: Optional[pulumi.Input[float]] = None):
        """
        Disk resource creation details
        :param pulumi.Input['DiskStorageType'] storage_type: Storage type
        :param pulumi.Input[float] size_in_gb: Disk size in GB
        """
        pulumi.set(__self__, "storage_type", storage_type)
        if size_in_gb is not None:
            pulumi.set(__self__, "size_in_gb", size_in_gb)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input['DiskStorageType']:
        """
        Storage type
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input['DiskStorageType']):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="sizeInGB")
    def size_in_gb(self) -> Optional[pulumi.Input[float]]:
        """
        Disk size in GB
        """
        return pulumi.get(self, "size_in_gb")

    @size_in_gb.setter
    def size_in_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size_in_gb", value)


if not MYPY:
    class FileshareProfileArgsDict(TypedDict):
        """
        File share profile
        """
        share_type: pulumi.Input[Union[str, 'FileShareType']]
        """
        Share type
        """
        storage_type: pulumi.Input[Union[str, 'FileShareStorageType']]
        """
        File share backing storage type
        """
        share_size_in_gb: NotRequired[pulumi.Input[float]]
        """
        File share size in GB
        """
elif False:
    FileshareProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileshareProfileArgs:
    def __init__(__self__, *,
                 share_type: pulumi.Input[Union[str, 'FileShareType']],
                 storage_type: pulumi.Input[Union[str, 'FileShareStorageType']],
                 share_size_in_gb: Optional[pulumi.Input[float]] = None):
        """
        File share profile
        :param pulumi.Input[Union[str, 'FileShareType']] share_type: Share type
        :param pulumi.Input[Union[str, 'FileShareStorageType']] storage_type: File share backing storage type
        :param pulumi.Input[float] share_size_in_gb: File share size in GB
        """
        pulumi.set(__self__, "share_type", share_type)
        pulumi.set(__self__, "storage_type", storage_type)
        if share_size_in_gb is not None:
            pulumi.set(__self__, "share_size_in_gb", share_size_in_gb)

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> pulumi.Input[Union[str, 'FileShareType']]:
        """
        Share type
        """
        return pulumi.get(self, "share_type")

    @share_type.setter
    def share_type(self, value: pulumi.Input[Union[str, 'FileShareType']]):
        pulumi.set(self, "share_type", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[Union[str, 'FileShareStorageType']]:
        """
        File share backing storage type
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[Union[str, 'FileShareStorageType']]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="shareSizeInGB")
    def share_size_in_gb(self) -> Optional[pulumi.Input[float]]:
        """
        File share size in GB
        """
        return pulumi.get(self, "share_size_in_gb")

    @share_size_in_gb.setter
    def share_size_in_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "share_size_in_gb", value)


if not MYPY:
    class ManagedRGConfigurationArgsDict(TypedDict):
        """
        Managed resource group configuration
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Managed resource group name
        """
elif False:
    ManagedRGConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedRGConfigurationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Managed resource group configuration
        :param pulumi.Input[str] name: Managed resource group name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed resource group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class NetworkProfileArgsDict(TypedDict):
        """
        Network profile
        """
        load_balancer_type: pulumi.Input[Union[str, 'LoadBalancerType']]
        """
        Load balancer type
        """
        azure_front_door_enabled: NotRequired[pulumi.Input[Union[str, 'AzureFrontDoorEnabled']]]
        """
        Whether to enable Azure front door
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        Capacity, applicable only for Application Gateway
        """
        load_balancer_sku: NotRequired[pulumi.Input[str]]
        """
        Load balancer SKU
        """
        load_balancer_tier: NotRequired[pulumi.Input[str]]
        """
        Load balancer tier
        """
elif False:
    NetworkProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkProfileArgs:
    def __init__(__self__, *,
                 load_balancer_type: pulumi.Input[Union[str, 'LoadBalancerType']],
                 azure_front_door_enabled: Optional[pulumi.Input[Union[str, 'AzureFrontDoorEnabled']]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 load_balancer_sku: Optional[pulumi.Input[str]] = None,
                 load_balancer_tier: Optional[pulumi.Input[str]] = None):
        """
        Network profile
        :param pulumi.Input[Union[str, 'LoadBalancerType']] load_balancer_type: Load balancer type
        :param pulumi.Input[Union[str, 'AzureFrontDoorEnabled']] azure_front_door_enabled: Whether to enable Azure front door
        :param pulumi.Input[int] capacity: Capacity, applicable only for Application Gateway
        :param pulumi.Input[str] load_balancer_sku: Load balancer SKU
        :param pulumi.Input[str] load_balancer_tier: Load balancer tier
        """
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if azure_front_door_enabled is not None:
            pulumi.set(__self__, "azure_front_door_enabled", azure_front_door_enabled)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if load_balancer_sku is not None:
            pulumi.set(__self__, "load_balancer_sku", load_balancer_sku)
        if load_balancer_tier is not None:
            pulumi.set(__self__, "load_balancer_tier", load_balancer_tier)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> pulumi.Input[Union[str, 'LoadBalancerType']]:
        """
        Load balancer type
        """
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: pulumi.Input[Union[str, 'LoadBalancerType']]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter(name="azureFrontDoorEnabled")
    def azure_front_door_enabled(self) -> Optional[pulumi.Input[Union[str, 'AzureFrontDoorEnabled']]]:
        """
        Whether to enable Azure front door
        """
        return pulumi.get(self, "azure_front_door_enabled")

    @azure_front_door_enabled.setter
    def azure_front_door_enabled(self, value: Optional[pulumi.Input[Union[str, 'AzureFrontDoorEnabled']]]):
        pulumi.set(self, "azure_front_door_enabled", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity, applicable only for Application Gateway
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="loadBalancerSku")
    def load_balancer_sku(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancer SKU
        """
        return pulumi.get(self, "load_balancer_sku")

    @load_balancer_sku.setter
    def load_balancer_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_sku", value)

    @property
    @pulumi.getter(name="loadBalancerTier")
    def load_balancer_tier(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancer tier
        """
        return pulumi.get(self, "load_balancer_tier")

    @load_balancer_tier.setter
    def load_balancer_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_tier", value)


if not MYPY:
    class NodeProfileArgsDict(TypedDict):
        """
        VM or VMSS node profile
        """
        node_sku: pulumi.Input[str]
        """
        VM SKU for node(s)
        """
        os_disk: pulumi.Input['DiskInfoArgsDict']
        """
        OS disk details
        """
        os_image: pulumi.Input['OsImageProfileArgsDict']
        """
        OS image used for creating the nodes
        """
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgsDict']]]]
        """
        Data disks details. This property is not in use right now
        """
        name: NotRequired[pulumi.Input[str]]
        """
        VM or VMSS name
        """
elif False:
    NodeProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeProfileArgs:
    def __init__(__self__, *,
                 node_sku: pulumi.Input[str],
                 os_disk: pulumi.Input['DiskInfoArgs'],
                 os_image: pulumi.Input['OsImageProfileArgs'],
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        VM or VMSS node profile
        :param pulumi.Input[str] node_sku: VM SKU for node(s)
        :param pulumi.Input['DiskInfoArgs'] os_disk: OS disk details
        :param pulumi.Input['OsImageProfileArgs'] os_image: OS image used for creating the nodes
        :param pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]] data_disks: Data disks details. This property is not in use right now
        :param pulumi.Input[str] name: VM or VMSS name
        """
        pulumi.set(__self__, "node_sku", node_sku)
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "os_image", os_image)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nodeSku")
    def node_sku(self) -> pulumi.Input[str]:
        """
        VM SKU for node(s)
        """
        return pulumi.get(self, "node_sku")

    @node_sku.setter
    def node_sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_sku", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Input['DiskInfoArgs']:
        """
        OS disk details
        """
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: pulumi.Input['DiskInfoArgs']):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="osImage")
    def os_image(self) -> pulumi.Input['OsImageProfileArgs']:
        """
        OS image used for creating the nodes
        """
        return pulumi.get(self, "os_image")

    @os_image.setter
    def os_image(self, value: pulumi.Input['OsImageProfileArgs']):
        pulumi.set(self, "os_image", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]]:
        """
        Data disks details. This property is not in use right now
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VM or VMSS name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OsImageProfileArgsDict(TypedDict):
        """
        OS image profile
        """
        offer: NotRequired[pulumi.Input[Union[str, 'OSImageOffer']]]
        """
        OS image offer
        """
        publisher: NotRequired[pulumi.Input[Union[str, 'OSImagePublisher']]]
        """
        OS image publisher
        """
        sku: NotRequired[pulumi.Input[Union[str, 'OSImageSku']]]
        """
        OS image sku
        """
        version: NotRequired[pulumi.Input[Union[str, 'OSImageVersion']]]
        """
        OS image version
        """
elif False:
    OsImageProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OsImageProfileArgs:
    def __init__(__self__, *,
                 offer: Optional[pulumi.Input[Union[str, 'OSImageOffer']]] = None,
                 publisher: Optional[pulumi.Input[Union[str, 'OSImagePublisher']]] = None,
                 sku: Optional[pulumi.Input[Union[str, 'OSImageSku']]] = None,
                 version: Optional[pulumi.Input[Union[str, 'OSImageVersion']]] = None):
        """
        OS image profile
        :param pulumi.Input[Union[str, 'OSImageOffer']] offer: OS image offer
        :param pulumi.Input[Union[str, 'OSImagePublisher']] publisher: OS image publisher
        :param pulumi.Input[Union[str, 'OSImageSku']] sku: OS image sku
        :param pulumi.Input[Union[str, 'OSImageVersion']] version: OS image version
        """
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def offer(self) -> Optional[pulumi.Input[Union[str, 'OSImageOffer']]]:
        """
        OS image offer
        """
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: Optional[pulumi.Input[Union[str, 'OSImageOffer']]]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input[Union[str, 'OSImagePublisher']]]:
        """
        OS image publisher
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input[Union[str, 'OSImagePublisher']]]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[Union[str, 'OSImageSku']]]:
        """
        OS image sku
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[Union[str, 'OSImageSku']]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[Union[str, 'OSImageVersion']]]:
        """
        OS image version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[Union[str, 'OSImageVersion']]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class PhpProfileArgsDict(TypedDict):
        """
        PHP profile
        """
        version: pulumi.Input[Union[str, 'PHPVersion']]
        """
        PHP version
        """
elif False:
    PhpProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PhpProfileArgs:
    def __init__(__self__, *,
                 version: pulumi.Input[Union[str, 'PHPVersion']]):
        """
        PHP profile
        :param pulumi.Input[Union[str, 'PHPVersion']] version: PHP version
        """
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[Union[str, 'PHPVersion']]:
        """
        PHP version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[Union[str, 'PHPVersion']]):
        pulumi.set(self, "version", value)


if not MYPY:
    class PhpWorkloadResourceIdentityArgsDict(TypedDict):
        """
        Identity for the resource. Currently not supported
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of manage identity
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        User assigned identities dictionary
        """
elif False:
    PhpWorkloadResourceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PhpWorkloadResourceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Identity for the resource. Currently not supported
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of manage identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: User assigned identities dictionary
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of manage identity
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User assigned identities dictionary
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class SearchProfileArgsDict(TypedDict):
        """
        Search profile
        """
        node_sku: pulumi.Input[str]
        """
        VM SKU for node(s)
        """
        os_disk: pulumi.Input['DiskInfoArgsDict']
        """
        OS disk details
        """
        os_image: pulumi.Input['OsImageProfileArgsDict']
        """
        OS image used for creating the nodes
        """
        search_type: pulumi.Input[Union[str, 'SearchType']]
        """
        Search type
        """
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgsDict']]]]
        """
        Data disks details. This property is not in use right now
        """
        name: NotRequired[pulumi.Input[str]]
        """
        VM or VMSS name
        """
elif False:
    SearchProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SearchProfileArgs:
    def __init__(__self__, *,
                 node_sku: pulumi.Input[str],
                 os_disk: pulumi.Input['DiskInfoArgs'],
                 os_image: pulumi.Input['OsImageProfileArgs'],
                 search_type: pulumi.Input[Union[str, 'SearchType']],
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Search profile
        :param pulumi.Input[str] node_sku: VM SKU for node(s)
        :param pulumi.Input['DiskInfoArgs'] os_disk: OS disk details
        :param pulumi.Input['OsImageProfileArgs'] os_image: OS image used for creating the nodes
        :param pulumi.Input[Union[str, 'SearchType']] search_type: Search type
        :param pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]] data_disks: Data disks details. This property is not in use right now
        :param pulumi.Input[str] name: VM or VMSS name
        """
        pulumi.set(__self__, "node_sku", node_sku)
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "os_image", os_image)
        pulumi.set(__self__, "search_type", search_type)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nodeSku")
    def node_sku(self) -> pulumi.Input[str]:
        """
        VM SKU for node(s)
        """
        return pulumi.get(self, "node_sku")

    @node_sku.setter
    def node_sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_sku", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Input['DiskInfoArgs']:
        """
        OS disk details
        """
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: pulumi.Input['DiskInfoArgs']):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="osImage")
    def os_image(self) -> pulumi.Input['OsImageProfileArgs']:
        """
        OS image used for creating the nodes
        """
        return pulumi.get(self, "os_image")

    @os_image.setter
    def os_image(self, value: pulumi.Input['OsImageProfileArgs']):
        pulumi.set(self, "os_image", value)

    @property
    @pulumi.getter(name="searchType")
    def search_type(self) -> pulumi.Input[Union[str, 'SearchType']]:
        """
        Search type
        """
        return pulumi.get(self, "search_type")

    @search_type.setter
    def search_type(self, value: pulumi.Input[Union[str, 'SearchType']]):
        pulumi.set(self, "search_type", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]]:
        """
        Data disks details. This property is not in use right now
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VM or VMSS name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SiteProfileArgsDict(TypedDict):
        """
        Workload website profile
        """
        domain_name: NotRequired[pulumi.Input[str]]
        """
        Domain name for the application site URL
        """
elif False:
    SiteProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SiteProfileArgs:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[str]] = None):
        """
        Workload website profile
        :param pulumi.Input[str] domain_name: Domain name for the application site URL
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name for the application site URL
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        The resource model definition representing SKU
        """
        name: pulumi.Input[str]
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        The resource model definition representing SKU
        :param pulumi.Input[str] name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param pulumi.Input[int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class UserProfileArgsDict(TypedDict):
        """
        User profile to configure on a compute resources such as VM, VMSS
        """
        ssh_public_key: pulumi.Input[str]
        """
        SSH public key data
        """
        user_name: pulumi.Input[str]
        """
        User name
        """
elif False:
    UserProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserProfileArgs:
    def __init__(__self__, *,
                 ssh_public_key: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        User profile to configure on a compute resources such as VM, VMSS
        :param pulumi.Input[str] ssh_public_key: SSH public key data
        :param pulumi.Input[str] user_name: User name
        """
        pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Input[str]:
        """
        SSH public key data
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class VmssNodesProfileArgsDict(TypedDict):
        """
        VMSS profile
        """
        node_sku: pulumi.Input[str]
        """
        VM SKU for node(s)
        """
        os_disk: pulumi.Input['DiskInfoArgsDict']
        """
        OS disk details
        """
        os_image: pulumi.Input['OsImageProfileArgsDict']
        """
        OS image used for creating the nodes
        """
        auto_scale_max_count: NotRequired[pulumi.Input[int]]
        """
        Maximum number of nodes for autoscale
        """
        auto_scale_min_count: NotRequired[pulumi.Input[int]]
        """
        Minimum number of nodes for autoscale
        """
        data_disks: NotRequired[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgsDict']]]]
        """
        Data disks details. This property is not in use right now
        """
        name: NotRequired[pulumi.Input[str]]
        """
        VM or VMSS name
        """
elif False:
    VmssNodesProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VmssNodesProfileArgs:
    def __init__(__self__, *,
                 node_sku: pulumi.Input[str],
                 os_disk: pulumi.Input['DiskInfoArgs'],
                 os_image: pulumi.Input['OsImageProfileArgs'],
                 auto_scale_max_count: Optional[pulumi.Input[int]] = None,
                 auto_scale_min_count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        VMSS profile
        :param pulumi.Input[str] node_sku: VM SKU for node(s)
        :param pulumi.Input['DiskInfoArgs'] os_disk: OS disk details
        :param pulumi.Input['OsImageProfileArgs'] os_image: OS image used for creating the nodes
        :param pulumi.Input[int] auto_scale_max_count: Maximum number of nodes for autoscale
        :param pulumi.Input[int] auto_scale_min_count: Minimum number of nodes for autoscale
        :param pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]] data_disks: Data disks details. This property is not in use right now
        :param pulumi.Input[str] name: VM or VMSS name
        """
        pulumi.set(__self__, "node_sku", node_sku)
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "os_image", os_image)
        if auto_scale_max_count is not None:
            pulumi.set(__self__, "auto_scale_max_count", auto_scale_max_count)
        if auto_scale_min_count is not None:
            pulumi.set(__self__, "auto_scale_min_count", auto_scale_min_count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="nodeSku")
    def node_sku(self) -> pulumi.Input[str]:
        """
        VM SKU for node(s)
        """
        return pulumi.get(self, "node_sku")

    @node_sku.setter
    def node_sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_sku", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Input['DiskInfoArgs']:
        """
        OS disk details
        """
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: pulumi.Input['DiskInfoArgs']):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="osImage")
    def os_image(self) -> pulumi.Input['OsImageProfileArgs']:
        """
        OS image used for creating the nodes
        """
        return pulumi.get(self, "os_image")

    @os_image.setter
    def os_image(self, value: pulumi.Input['OsImageProfileArgs']):
        pulumi.set(self, "os_image", value)

    @property
    @pulumi.getter(name="autoScaleMaxCount")
    def auto_scale_max_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of nodes for autoscale
        """
        return pulumi.get(self, "auto_scale_max_count")

    @auto_scale_max_count.setter
    def auto_scale_max_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_scale_max_count", value)

    @property
    @pulumi.getter(name="autoScaleMinCount")
    def auto_scale_min_count(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of nodes for autoscale
        """
        return pulumi.get(self, "auto_scale_min_count")

    @auto_scale_min_count.setter
    def auto_scale_min_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_scale_min_count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]]:
        """
        Data disks details. This property is not in use right now
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DiskInfoArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VM or VMSS name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


