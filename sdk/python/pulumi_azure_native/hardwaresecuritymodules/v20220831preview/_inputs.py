# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'CloudHsmClusterSecurityDomainPropertiesArgs',
    'CloudHsmClusterSkuArgs',
    'CloudHsmPropertiesArgs',
    'PrivateEndpointConnectionArgs',
    'PrivateLinkServiceConnectionStateArgs',
]

@pulumi.input_type
class CloudHsmClusterSecurityDomainPropertiesArgs:
    def __init__(__self__, *,
                 activation_status: Optional[pulumi.Input[str]] = None,
                 fips_state: Optional[pulumi.Input[int]] = None):
        """
        Security domain properties information for Cloud HSM cluster
        :param pulumi.Input[str] activation_status: status of security domain activation
        :param pulumi.Input[int] fips_state: FIPS state information for security domain
        """
        if activation_status is not None:
            pulumi.set(__self__, "activation_status", activation_status)
        if fips_state is not None:
            pulumi.set(__self__, "fips_state", fips_state)

    @property
    @pulumi.getter(name="activationStatus")
    def activation_status(self) -> Optional[pulumi.Input[str]]:
        """
        status of security domain activation
        """
        return pulumi.get(self, "activation_status")

    @activation_status.setter
    def activation_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activation_status", value)

    @property
    @pulumi.getter(name="fipsState")
    def fips_state(self) -> Optional[pulumi.Input[int]]:
        """
        FIPS state information for security domain
        """
        return pulumi.get(self, "fips_state")

    @fips_state.setter
    def fips_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fips_state", value)


@pulumi.input_type
class CloudHsmClusterSkuArgs:
    def __init__(__self__, *,
                 family: pulumi.Input[Union[str, 'CloudHsmClusterSkuFamily']],
                 name: pulumi.Input['CloudHsmClusterSkuName'],
                 capacity: Optional[pulumi.Input[int]] = None):
        """
        Cloud Hsm Cluster SKU information
        :param pulumi.Input[Union[str, 'CloudHsmClusterSkuFamily']] family: Sku family of the Cloud HSM Cluster
        :param pulumi.Input['CloudHsmClusterSkuName'] name: Sku name of the Cloud HSM Cluster
        :param pulumi.Input[int] capacity: Sku capacity
        """
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def family(self) -> pulumi.Input[Union[str, 'CloudHsmClusterSkuFamily']]:
        """
        Sku family of the Cloud HSM Cluster
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: pulumi.Input[Union[str, 'CloudHsmClusterSkuFamily']]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input['CloudHsmClusterSkuName']:
        """
        Sku name of the Cloud HSM Cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input['CloudHsmClusterSkuName']):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Sku capacity
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)


@pulumi.input_type
class CloudHsmPropertiesArgs:
    def __init__(__self__, *,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_message: Optional[pulumi.Input[str]] = None):
        """
        The Cloud HSM Properties
        :param pulumi.Input[str] fqdn: FQDN of the Cloud HSM
        :param pulumi.Input[str] state: The Cloud HSM State
        :param pulumi.Input[str] state_message: The Cloud HSM State message
        """
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of the Cloud HSM
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud HSM State
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud HSM State message
        """
        return pulumi.get(self, "state_message")

    @state_message.setter
    def state_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_message", value)


@pulumi.input_type
class PrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 private_link_service_connection_state: pulumi.Input['PrivateLinkServiceConnectionStateArgs'],
                 etag: Optional[pulumi.Input[str]] = None):
        """
        The private endpoint connection resource.
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param pulumi.Input[str] etag: Modified whenever there is a change in the state of private endpoint connection.
        """
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> pulumi.Input['PrivateLinkServiceConnectionStateArgs']:
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: pulumi.Input['PrivateLinkServiceConnectionStateArgs']):
        pulumi.set(self, "private_link_service_connection_state", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Modified whenever there is a change in the state of private endpoint connection.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param pulumi.Input[str] actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param pulumi.Input[str] description: The reason for approval/rejection of the connection.
        :param pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']] status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]):
        pulumi.set(self, "status", value)


