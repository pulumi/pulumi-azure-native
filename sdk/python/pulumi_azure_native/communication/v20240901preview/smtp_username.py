# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = ['SmtpUsernameArgs', 'SmtpUsername']

@pulumi.input_type
class SmtpUsernameArgs:
    def __init__(__self__, *,
                 communication_service_name: pulumi.Input[str],
                 entra_application_id: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 username: pulumi.Input[str],
                 smtp_username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SmtpUsername resource.
        :param pulumi.Input[str] communication_service_name: The name of the CommunicationService resource.
        :param pulumi.Input[str] entra_application_id: The application Id for the linked Entra Application.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] tenant_id: The tenant of the linked Entra Application.
        :param pulumi.Input[str] username: The SMTP username. Could be free form or in the email address format.
        :param pulumi.Input[str] smtp_username: The name of the SmtpUsernameResource.
        """
        pulumi.set(__self__, "communication_service_name", communication_service_name)
        pulumi.set(__self__, "entra_application_id", entra_application_id)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "username", username)
        if smtp_username is not None:
            pulumi.set(__self__, "smtp_username", smtp_username)

    @property
    @pulumi.getter(name="communicationServiceName")
    def communication_service_name(self) -> pulumi.Input[str]:
        """
        The name of the CommunicationService resource.
        """
        return pulumi.get(self, "communication_service_name")

    @communication_service_name.setter
    def communication_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_service_name", value)

    @property
    @pulumi.getter(name="entraApplicationId")
    def entra_application_id(self) -> pulumi.Input[str]:
        """
        The application Id for the linked Entra Application.
        """
        return pulumi.get(self, "entra_application_id")

    @entra_application_id.setter
    def entra_application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entra_application_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant of the linked Entra Application.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The SMTP username. Could be free form or in the email address format.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="smtpUsername")
    def smtp_username(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SmtpUsernameResource.
        """
        return pulumi.get(self, "smtp_username")

    @smtp_username.setter
    def smtp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtp_username", value)


class SmtpUsername(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 communication_service_name: Optional[pulumi.Input[str]] = None,
                 entra_application_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 smtp_username: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The object describing the smtp username resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] communication_service_name: The name of the CommunicationService resource.
        :param pulumi.Input[str] entra_application_id: The application Id for the linked Entra Application.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] smtp_username: The name of the SmtpUsernameResource.
        :param pulumi.Input[str] tenant_id: The tenant of the linked Entra Application.
        :param pulumi.Input[str] username: The SMTP username. Could be free form or in the email address format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmtpUsernameArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The object describing the smtp username resource.

        :param str resource_name: The name of the resource.
        :param SmtpUsernameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmtpUsernameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 communication_service_name: Optional[pulumi.Input[str]] = None,
                 entra_application_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 smtp_username: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmtpUsernameArgs.__new__(SmtpUsernameArgs)

            if communication_service_name is None and not opts.urn:
                raise TypeError("Missing required property 'communication_service_name'")
            __props__.__dict__["communication_service_name"] = communication_service_name
            if entra_application_id is None and not opts.urn:
                raise TypeError("Missing required property 'entra_application_id'")
            __props__.__dict__["entra_application_id"] = entra_application_id
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["smtp_username"] = smtp_username
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        super(SmtpUsername, __self__).__init__(
            'azure-native:communication/v20240901preview:SmtpUsername',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SmtpUsername':
        """
        Get an existing SmtpUsername resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SmtpUsernameArgs.__new__(SmtpUsernameArgs)

        __props__.__dict__["entra_application_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tenant_id"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["username"] = None
        return SmtpUsername(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="entraApplicationId")
    def entra_application_id(self) -> pulumi.Output[str]:
        """
        The application Id for the linked Entra Application.
        """
        return pulumi.get(self, "entra_application_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The tenant of the linked Entra Application.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The SMTP username. Could be free form or in the email address format.
        """
        return pulumi.get(self, "username")

