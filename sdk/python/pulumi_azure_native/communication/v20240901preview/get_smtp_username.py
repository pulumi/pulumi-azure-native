# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetSmtpUsernameResult',
    'AwaitableGetSmtpUsernameResult',
    'get_smtp_username',
    'get_smtp_username_output',
]

@pulumi.output_type
class GetSmtpUsernameResult:
    """
    The object describing the smtp username resource.
    """
    def __init__(__self__, entra_application_id=None, id=None, name=None, system_data=None, tenant_id=None, type=None, username=None):
        if entra_application_id and not isinstance(entra_application_id, str):
            raise TypeError("Expected argument 'entra_application_id' to be a str")
        pulumi.set(__self__, "entra_application_id", entra_application_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="entraApplicationId")
    def entra_application_id(self) -> str:
        """
        The application Id for the linked Entra Application.
        """
        return pulumi.get(self, "entra_application_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant of the linked Entra Application.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The SMTP username. Could be free form or in the email address format.
        """
        return pulumi.get(self, "username")


class AwaitableGetSmtpUsernameResult(GetSmtpUsernameResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmtpUsernameResult(
            entra_application_id=self.entra_application_id,
            id=self.id,
            name=self.name,
            system_data=self.system_data,
            tenant_id=self.tenant_id,
            type=self.type,
            username=self.username)


def get_smtp_username(communication_service_name: Optional[str] = None,
                      resource_group_name: Optional[str] = None,
                      smtp_username: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmtpUsernameResult:
    """
    Get a SmtpUsernameResource.


    :param str communication_service_name: The name of the CommunicationService resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str smtp_username: The name of the SmtpUsernameResource.
    """
    __args__ = dict()
    __args__['communicationServiceName'] = communication_service_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['smtpUsername'] = smtp_username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:communication/v20240901preview:getSmtpUsername', __args__, opts=opts, typ=GetSmtpUsernameResult).value

    return AwaitableGetSmtpUsernameResult(
        entra_application_id=pulumi.get(__ret__, 'entra_application_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'),
        username=pulumi.get(__ret__, 'username'))
def get_smtp_username_output(communication_service_name: Optional[pulumi.Input[str]] = None,
                             resource_group_name: Optional[pulumi.Input[str]] = None,
                             smtp_username: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmtpUsernameResult]:
    """
    Get a SmtpUsernameResource.


    :param str communication_service_name: The name of the CommunicationService resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str smtp_username: The name of the SmtpUsernameResource.
    """
    __args__ = dict()
    __args__['communicationServiceName'] = communication_service_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['smtpUsername'] = smtp_username
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:communication/v20240901preview:getSmtpUsername', __args__, opts=opts, typ=GetSmtpUsernameResult)
    return __ret__.apply(lambda __response__: GetSmtpUsernameResult(
        entra_application_id=pulumi.get(__response__, 'entra_application_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        system_data=pulumi.get(__response__, 'system_data'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type'),
        username=pulumi.get(__response__, 'username')))
