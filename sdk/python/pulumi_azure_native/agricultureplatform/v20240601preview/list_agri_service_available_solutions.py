# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ListAgriServiceAvailableSolutionsResult',
    'AwaitableListAgriServiceAvailableSolutionsResult',
    'list_agri_service_available_solutions',
    'list_agri_service_available_solutions_output',
]

@pulumi.output_type
class ListAgriServiceAvailableSolutionsResult:
    """
    The list of available agri solutions.
    """
    def __init__(__self__, solutions=None):
        if solutions and not isinstance(solutions, list):
            raise TypeError("Expected argument 'solutions' to be a list")
        pulumi.set(__self__, "solutions", solutions)

    @property
    @pulumi.getter
    def solutions(self) -> Sequence['outputs.DataManagerForAgricultureSolutionResponse']:
        """
        Agri solutions list.
        """
        return pulumi.get(self, "solutions")


class AwaitableListAgriServiceAvailableSolutionsResult(ListAgriServiceAvailableSolutionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListAgriServiceAvailableSolutionsResult(
            solutions=self.solutions)


def list_agri_service_available_solutions(agri_service_resource_name: Optional[str] = None,
                                          resource_group_name: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListAgriServiceAvailableSolutionsResult:
    """
    Returns the list of available agri solutions.


    :param str agri_service_resource_name: The name of the AgriService resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['agriServiceResourceName'] = agri_service_resource_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:agricultureplatform/v20240601preview:listAgriServiceAvailableSolutions', __args__, opts=opts, typ=ListAgriServiceAvailableSolutionsResult).value

    return AwaitableListAgriServiceAvailableSolutionsResult(
        solutions=pulumi.get(__ret__, 'solutions'))
def list_agri_service_available_solutions_output(agri_service_resource_name: Optional[pulumi.Input[str]] = None,
                                                 resource_group_name: Optional[pulumi.Input[str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListAgriServiceAvailableSolutionsResult]:
    """
    Returns the list of available agri solutions.


    :param str agri_service_resource_name: The name of the AgriService resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['agriServiceResourceName'] = agri_service_resource_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:agricultureplatform/v20240601preview:listAgriServiceAvailableSolutions', __args__, opts=opts, typ=ListAgriServiceAvailableSolutionsResult)
    return __ret__.apply(lambda __response__: ListAgriServiceAvailableSolutionsResult(
        solutions=pulumi.get(__response__, 'solutions')))
