# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AgriServiceResourcePropertiesArgs',
    'AgriServiceResourcePropertiesArgsDict',
    'DataConnectorCredentialMapArgs',
    'DataConnectorCredentialMapArgsDict',
    'DataConnectorCredentialsArgs',
    'DataConnectorCredentialsArgsDict',
    'InstalledSolutionMapArgs',
    'InstalledSolutionMapArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'SkuArgs',
    'SkuArgsDict',
    'SolutionArgs',
    'SolutionArgsDict',
]

MYPY = False

if not MYPY:
    class AgriServiceResourcePropertiesArgsDict(TypedDict):
        """
        Details of the Agriculture AgriDataManager.
        """
        data_connector_credentials: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataConnectorCredentialMapArgsDict']]]]
        """
        Data connector credentials of AgriService instance.
        """
        installed_solutions: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstalledSolutionMapArgsDict']]]]
        """
        AgriService installed solutions.
        """
elif False:
    AgriServiceResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgriServiceResourcePropertiesArgs:
    def __init__(__self__, *,
                 data_connector_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['DataConnectorCredentialMapArgs']]]] = None,
                 installed_solutions: Optional[pulumi.Input[Sequence[pulumi.Input['InstalledSolutionMapArgs']]]] = None):
        """
        Details of the Agriculture AgriDataManager.
        :param pulumi.Input[Sequence[pulumi.Input['DataConnectorCredentialMapArgs']]] data_connector_credentials: Data connector credentials of AgriService instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstalledSolutionMapArgs']]] installed_solutions: AgriService installed solutions.
        """
        if data_connector_credentials is not None:
            pulumi.set(__self__, "data_connector_credentials", data_connector_credentials)
        if installed_solutions is not None:
            pulumi.set(__self__, "installed_solutions", installed_solutions)

    @property
    @pulumi.getter(name="dataConnectorCredentials")
    def data_connector_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataConnectorCredentialMapArgs']]]]:
        """
        Data connector credentials of AgriService instance.
        """
        return pulumi.get(self, "data_connector_credentials")

    @data_connector_credentials.setter
    def data_connector_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataConnectorCredentialMapArgs']]]]):
        pulumi.set(self, "data_connector_credentials", value)

    @property
    @pulumi.getter(name="installedSolutions")
    def installed_solutions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstalledSolutionMapArgs']]]]:
        """
        AgriService installed solutions.
        """
        return pulumi.get(self, "installed_solutions")

    @installed_solutions.setter
    def installed_solutions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstalledSolutionMapArgs']]]]):
        pulumi.set(self, "installed_solutions", value)


if not MYPY:
    class DataConnectorCredentialMapArgsDict(TypedDict):
        """
        Mapping of data connector credentials.
        """
        key: pulumi.Input[str]
        """
        The key representing the credential.
        """
        value: pulumi.Input['DataConnectorCredentialsArgsDict']
        """
        The data connector credential value.
        """
elif False:
    DataConnectorCredentialMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataConnectorCredentialMapArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input['DataConnectorCredentialsArgs']):
        """
        Mapping of data connector credentials.
        :param pulumi.Input[str] key: The key representing the credential.
        :param pulumi.Input['DataConnectorCredentialsArgs'] value: The data connector credential value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key representing the credential.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['DataConnectorCredentialsArgs']:
        """
        The data connector credential value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['DataConnectorCredentialsArgs']):
        pulumi.set(self, "value", value)


if not MYPY:
    class DataConnectorCredentialsArgsDict(TypedDict):
        """
        The properties related to an AgriService data connector.
        """
        client_id: NotRequired[pulumi.Input[str]]
        """
        Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
        """
        key_name: NotRequired[pulumi.Input[str]]
        """
        Name of the key vault key.
        """
        key_vault_uri: NotRequired[pulumi.Input[str]]
        """
        Uri of the key vault
        """
        key_version: NotRequired[pulumi.Input[str]]
        """
        Version of the key vault key.
        """
        kind: NotRequired[pulumi.Input[Union[str, 'AuthCredentialsKind']]]
        """
        Type of credential.
        """
elif False:
    DataConnectorCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataConnectorCredentialsArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 key_vault_uri: Optional[pulumi.Input[str]] = None,
                 key_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[Union[str, 'AuthCredentialsKind']]] = None):
        """
        The properties related to an AgriService data connector.
        :param pulumi.Input[str] client_id: Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
        :param pulumi.Input[str] key_name: Name of the key vault key.
        :param pulumi.Input[str] key_vault_uri: Uri of the key vault
        :param pulumi.Input[str] key_version: Version of the key vault key.
        :param pulumi.Input[Union[str, 'AuthCredentialsKind']] kind: Type of credential.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_vault_uri is not None:
            pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the key vault key.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Uri of the key vault
        """
        return pulumi.get(self, "key_vault_uri")

    @key_vault_uri.setter
    def key_vault_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_uri", value)

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the key vault key.
        """
        return pulumi.get(self, "key_version")

    @key_version.setter
    def key_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[Union[str, 'AuthCredentialsKind']]]:
        """
        Type of credential.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[Union[str, 'AuthCredentialsKind']]]):
        pulumi.set(self, "kind", value)


if not MYPY:
    class InstalledSolutionMapArgsDict(TypedDict):
        """
        Mapping of installed solutions.
        """
        key: pulumi.Input[str]
        """
        The key representing the installed solution.
        """
        value: pulumi.Input['SolutionArgsDict']
        """
        The installed solution value.
        """
elif False:
    InstalledSolutionMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstalledSolutionMapArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input['SolutionArgs']):
        """
        Mapping of installed solutions.
        :param pulumi.Input[str] key: The key representing the installed solution.
        :param pulumi.Input['SolutionArgs'] value: The installed solution value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key representing the installed solution.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['SolutionArgs']:
        """
        The installed solution value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['SolutionArgs']):
        pulumi.set(self, "value", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        The resource model definition representing SKU
        """
        name: pulumi.Input[str]
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        The resource model definition representing SKU
        :param pulumi.Input[str] name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param pulumi.Input[int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class SolutionArgsDict(TypedDict):
        """
        Installed data manager for Agriculture solution detail.
        """
        application_name: NotRequired[pulumi.Input[str]]
        """
        Application name of the solution.
        """
        market_place_publisher_id: NotRequired[pulumi.Input[str]]
        """
        Marketplace publisher Id.
        """
        partner_id: NotRequired[pulumi.Input[str]]
        """
        Partner Id.
        """
        plan_id: NotRequired[pulumi.Input[str]]
        """
        Plan Id.
        """
        saas_subscription_id: NotRequired[pulumi.Input[str]]
        """
        Saas subscription Id.
        """
        saas_subscription_name: NotRequired[pulumi.Input[str]]
        """
        Saas subscription name.
        """
elif False:
    SolutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SolutionArgs:
    def __init__(__self__, *,
                 application_name: Optional[pulumi.Input[str]] = None,
                 market_place_publisher_id: Optional[pulumi.Input[str]] = None,
                 partner_id: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 saas_subscription_id: Optional[pulumi.Input[str]] = None,
                 saas_subscription_name: Optional[pulumi.Input[str]] = None):
        """
        Installed data manager for Agriculture solution detail.
        :param pulumi.Input[str] application_name: Application name of the solution.
        :param pulumi.Input[str] market_place_publisher_id: Marketplace publisher Id.
        :param pulumi.Input[str] partner_id: Partner Id.
        :param pulumi.Input[str] plan_id: Plan Id.
        :param pulumi.Input[str] saas_subscription_id: Saas subscription Id.
        :param pulumi.Input[str] saas_subscription_name: Saas subscription name.
        """
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if market_place_publisher_id is not None:
            pulumi.set(__self__, "market_place_publisher_id", market_place_publisher_id)
        if partner_id is not None:
            pulumi.set(__self__, "partner_id", partner_id)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if saas_subscription_id is not None:
            pulumi.set(__self__, "saas_subscription_id", saas_subscription_id)
        if saas_subscription_name is not None:
            pulumi.set(__self__, "saas_subscription_name", saas_subscription_name)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Application name of the solution.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="marketPlacePublisherId")
    def market_place_publisher_id(self) -> Optional[pulumi.Input[str]]:
        """
        Marketplace publisher Id.
        """
        return pulumi.get(self, "market_place_publisher_id")

    @market_place_publisher_id.setter
    def market_place_publisher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "market_place_publisher_id", value)

    @property
    @pulumi.getter(name="partnerId")
    def partner_id(self) -> Optional[pulumi.Input[str]]:
        """
        Partner Id.
        """
        return pulumi.get(self, "partner_id")

    @partner_id.setter
    def partner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partner_id", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        Plan Id.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="saasSubscriptionId")
    def saas_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Saas subscription Id.
        """
        return pulumi.get(self, "saas_subscription_id")

    @saas_subscription_id.setter
    def saas_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saas_subscription_id", value)

    @property
    @pulumi.getter(name="saasSubscriptionName")
    def saas_subscription_name(self) -> Optional[pulumi.Input[str]]:
        """
        Saas subscription name.
        """
        return pulumi.get(self, "saas_subscription_name")

    @saas_subscription_name.setter
    def saas_subscription_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saas_subscription_name", value)


