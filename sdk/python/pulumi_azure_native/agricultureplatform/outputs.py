# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AgriServiceConfigResponse',
    'AgriServiceResourcePropertiesResponse',
    'DataConnectorCredentialMapResponse',
    'DataConnectorCredentialsResponse',
    'DataManagerForAgricultureSolutionResponse',
    'InstalledSolutionMapResponse',
    'ManagedOnBehalfOfConfigurationResponse',
    'ManagedServiceIdentityResponse',
    'MarketPlaceOfferDetailsResponse',
    'MoboBrokerResourceResponse',
    'SkuResponse',
    'SolutionResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class AgriServiceConfigResponse(dict):
    """
    Config of the AgriService resource instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appServiceResourceId":
            suggest = "app_service_resource_id"
        elif key == "cosmosDbResourceId":
            suggest = "cosmos_db_resource_id"
        elif key == "instanceUri":
            suggest = "instance_uri"
        elif key == "keyVaultResourceId":
            suggest = "key_vault_resource_id"
        elif key == "redisCacheResourceId":
            suggest = "redis_cache_resource_id"
        elif key == "storageAccountResourceId":
            suggest = "storage_account_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgriServiceConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgriServiceConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgriServiceConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_service_resource_id: builtins.str,
                 cosmos_db_resource_id: builtins.str,
                 instance_uri: builtins.str,
                 key_vault_resource_id: builtins.str,
                 redis_cache_resource_id: builtins.str,
                 storage_account_resource_id: builtins.str,
                 version: builtins.str):
        """
        Config of the AgriService resource instance.
        :param builtins.str app_service_resource_id: App service resource Id.
        :param builtins.str cosmos_db_resource_id: Cosmos Db resource Id.
        :param builtins.str instance_uri: Instance URI of the AgriService instance.
        :param builtins.str key_vault_resource_id: Key vault resource Id.
        :param builtins.str redis_cache_resource_id: Redis cache resource Id.
        :param builtins.str storage_account_resource_id: Storage account resource Id.
        :param builtins.str version: Version of AgriService instance.
        """
        pulumi.set(__self__, "app_service_resource_id", app_service_resource_id)
        pulumi.set(__self__, "cosmos_db_resource_id", cosmos_db_resource_id)
        pulumi.set(__self__, "instance_uri", instance_uri)
        pulumi.set(__self__, "key_vault_resource_id", key_vault_resource_id)
        pulumi.set(__self__, "redis_cache_resource_id", redis_cache_resource_id)
        pulumi.set(__self__, "storage_account_resource_id", storage_account_resource_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="appServiceResourceId")
    def app_service_resource_id(self) -> builtins.str:
        """
        App service resource Id.
        """
        return pulumi.get(self, "app_service_resource_id")

    @property
    @pulumi.getter(name="cosmosDbResourceId")
    def cosmos_db_resource_id(self) -> builtins.str:
        """
        Cosmos Db resource Id.
        """
        return pulumi.get(self, "cosmos_db_resource_id")

    @property
    @pulumi.getter(name="instanceUri")
    def instance_uri(self) -> builtins.str:
        """
        Instance URI of the AgriService instance.
        """
        return pulumi.get(self, "instance_uri")

    @property
    @pulumi.getter(name="keyVaultResourceId")
    def key_vault_resource_id(self) -> builtins.str:
        """
        Key vault resource Id.
        """
        return pulumi.get(self, "key_vault_resource_id")

    @property
    @pulumi.getter(name="redisCacheResourceId")
    def redis_cache_resource_id(self) -> builtins.str:
        """
        Redis cache resource Id.
        """
        return pulumi.get(self, "redis_cache_resource_id")

    @property
    @pulumi.getter(name="storageAccountResourceId")
    def storage_account_resource_id(self) -> builtins.str:
        """
        Storage account resource Id.
        """
        return pulumi.get(self, "storage_account_resource_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Version of AgriService instance.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class AgriServiceResourcePropertiesResponse(dict):
    """
    Details of the Agriculture AgriDataManager.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedOnBehalfOfConfiguration":
            suggest = "managed_on_behalf_of_configuration"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "dataConnectorCredentials":
            suggest = "data_connector_credentials"
        elif key == "installedSolutions":
            suggest = "installed_solutions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgriServiceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgriServiceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgriServiceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_on_behalf_of_configuration: 'outputs.ManagedOnBehalfOfConfigurationResponse',
                 provisioning_state: builtins.str,
                 config: Optional['outputs.AgriServiceConfigResponse'] = None,
                 data_connector_credentials: Optional[Sequence['outputs.DataConnectorCredentialMapResponse']] = None,
                 installed_solutions: Optional[Sequence['outputs.InstalledSolutionMapResponse']] = None):
        """
        Details of the Agriculture AgriDataManager.
        :param 'ManagedOnBehalfOfConfigurationResponse' managed_on_behalf_of_configuration: Managed On Behalf Of Configuration.
        :param builtins.str provisioning_state: The status of the last operation.
        :param 'AgriServiceConfigResponse' config: Config of the AgriService instance.
        :param Sequence['DataConnectorCredentialMapResponse'] data_connector_credentials: Data connector credentials of AgriService instance.
        :param Sequence['InstalledSolutionMapResponse'] installed_solutions: AgriService installed solutions.
        """
        pulumi.set(__self__, "managed_on_behalf_of_configuration", managed_on_behalf_of_configuration)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_connector_credentials is not None:
            pulumi.set(__self__, "data_connector_credentials", data_connector_credentials)
        if installed_solutions is not None:
            pulumi.set(__self__, "installed_solutions", installed_solutions)

    @property
    @pulumi.getter(name="managedOnBehalfOfConfiguration")
    def managed_on_behalf_of_configuration(self) -> 'outputs.ManagedOnBehalfOfConfigurationResponse':
        """
        Managed On Behalf Of Configuration.
        """
        return pulumi.get(self, "managed_on_behalf_of_configuration")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.AgriServiceConfigResponse']:
        """
        Config of the AgriService instance.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dataConnectorCredentials")
    def data_connector_credentials(self) -> Optional[Sequence['outputs.DataConnectorCredentialMapResponse']]:
        """
        Data connector credentials of AgriService instance.
        """
        return pulumi.get(self, "data_connector_credentials")

    @property
    @pulumi.getter(name="installedSolutions")
    def installed_solutions(self) -> Optional[Sequence['outputs.InstalledSolutionMapResponse']]:
        """
        AgriService installed solutions.
        """
        return pulumi.get(self, "installed_solutions")


@pulumi.output_type
class DataConnectorCredentialMapResponse(dict):
    """
    Mapping of data connector credentials.
    """
    def __init__(__self__, *,
                 key: builtins.str,
                 value: 'outputs.DataConnectorCredentialsResponse'):
        """
        Mapping of data connector credentials.
        :param builtins.str key: The key representing the credential.
        :param 'DataConnectorCredentialsResponse' value: The data connector credential value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key representing the credential.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.DataConnectorCredentialsResponse':
        """
        The data connector credential value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DataConnectorCredentialsResponse(dict):
    """
    The properties related to an AgriService data connector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "keyVaultUri":
            suggest = "key_vault_uri"
        elif key == "keyVersion":
            suggest = "key_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataConnectorCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataConnectorCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataConnectorCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[builtins.str] = None,
                 key_name: Optional[builtins.str] = None,
                 key_vault_uri: Optional[builtins.str] = None,
                 key_version: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None):
        """
        The properties related to an AgriService data connector.
        :param builtins.str client_id: Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
        :param builtins.str key_name: Name of the key vault key.
        :param builtins.str key_vault_uri: Uri of the key vault
        :param builtins.str key_version: Version of the key vault key.
        :param builtins.str kind: Type of credential.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_vault_uri is not None:
            pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[builtins.str]:
        """
        Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[builtins.str]:
        """
        Name of the key vault key.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[builtins.str]:
        """
        Uri of the key vault
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[builtins.str]:
        """
        Version of the key vault key.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Type of credential.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class DataManagerForAgricultureSolutionResponse(dict):
    """
    Data Manager for Agriculture solution.
    """
    def __init__(__self__, *,
                 access_azure_data_manager_for_agriculture_application_id: builtins.str,
                 access_azure_data_manager_for_agriculture_application_name: builtins.str,
                 data_access_scopes: Sequence[builtins.str],
                 is_validate_input: builtins.bool,
                 market_place_offer_details: 'outputs.MarketPlaceOfferDetailsResponse',
                 partner_id: builtins.str,
                 partner_tenant_id: builtins.str,
                 saas_application_id: builtins.str,
                 solution_id: builtins.str):
        """
        Data Manager for Agriculture solution.
        :param builtins.str access_azure_data_manager_for_agriculture_application_id: Entra application Id used to access azure data manager for agriculture instance.
        :param builtins.str access_azure_data_manager_for_agriculture_application_name: Entra application name used to access azure data manager for agriculture instance.
        :param Sequence[builtins.str] data_access_scopes: Data access scopes.
        :param builtins.bool is_validate_input: Whether solution inference will validate input.
        :param 'MarketPlaceOfferDetailsResponse' market_place_offer_details: Marketplace offer details.
        :param builtins.str partner_id: Partner Id.
        :param builtins.str partner_tenant_id: Partner tenant Id.
        :param builtins.str saas_application_id: Saas application Id.
        :param builtins.str solution_id: Solution Id.
        """
        pulumi.set(__self__, "access_azure_data_manager_for_agriculture_application_id", access_azure_data_manager_for_agriculture_application_id)
        pulumi.set(__self__, "access_azure_data_manager_for_agriculture_application_name", access_azure_data_manager_for_agriculture_application_name)
        pulumi.set(__self__, "data_access_scopes", data_access_scopes)
        pulumi.set(__self__, "is_validate_input", is_validate_input)
        pulumi.set(__self__, "market_place_offer_details", market_place_offer_details)
        pulumi.set(__self__, "partner_id", partner_id)
        pulumi.set(__self__, "partner_tenant_id", partner_tenant_id)
        pulumi.set(__self__, "saas_application_id", saas_application_id)
        pulumi.set(__self__, "solution_id", solution_id)

    @property
    @pulumi.getter(name="accessAzureDataManagerForAgricultureApplicationId")
    def access_azure_data_manager_for_agriculture_application_id(self) -> builtins.str:
        """
        Entra application Id used to access azure data manager for agriculture instance.
        """
        return pulumi.get(self, "access_azure_data_manager_for_agriculture_application_id")

    @property
    @pulumi.getter(name="accessAzureDataManagerForAgricultureApplicationName")
    def access_azure_data_manager_for_agriculture_application_name(self) -> builtins.str:
        """
        Entra application name used to access azure data manager for agriculture instance.
        """
        return pulumi.get(self, "access_azure_data_manager_for_agriculture_application_name")

    @property
    @pulumi.getter(name="dataAccessScopes")
    def data_access_scopes(self) -> Sequence[builtins.str]:
        """
        Data access scopes.
        """
        return pulumi.get(self, "data_access_scopes")

    @property
    @pulumi.getter(name="isValidateInput")
    def is_validate_input(self) -> builtins.bool:
        """
        Whether solution inference will validate input.
        """
        return pulumi.get(self, "is_validate_input")

    @property
    @pulumi.getter(name="marketPlaceOfferDetails")
    def market_place_offer_details(self) -> 'outputs.MarketPlaceOfferDetailsResponse':
        """
        Marketplace offer details.
        """
        return pulumi.get(self, "market_place_offer_details")

    @property
    @pulumi.getter(name="partnerId")
    def partner_id(self) -> builtins.str:
        """
        Partner Id.
        """
        return pulumi.get(self, "partner_id")

    @property
    @pulumi.getter(name="partnerTenantId")
    def partner_tenant_id(self) -> builtins.str:
        """
        Partner tenant Id.
        """
        return pulumi.get(self, "partner_tenant_id")

    @property
    @pulumi.getter(name="saasApplicationId")
    def saas_application_id(self) -> builtins.str:
        """
        Saas application Id.
        """
        return pulumi.get(self, "saas_application_id")

    @property
    @pulumi.getter(name="solutionId")
    def solution_id(self) -> builtins.str:
        """
        Solution Id.
        """
        return pulumi.get(self, "solution_id")


@pulumi.output_type
class InstalledSolutionMapResponse(dict):
    """
    Mapping of installed solutions.
    """
    def __init__(__self__, *,
                 key: builtins.str,
                 value: 'outputs.SolutionResponse'):
        """
        Mapping of installed solutions.
        :param builtins.str key: The key representing the installed solution.
        :param 'SolutionResponse' value: The installed solution value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key representing the installed solution.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SolutionResponse':
        """
        The installed solution value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ManagedOnBehalfOfConfigurationResponse(dict):
    """
    Configuration of the managed on behalf of resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moboBrokerResources":
            suggest = "mobo_broker_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedOnBehalfOfConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedOnBehalfOfConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedOnBehalfOfConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mobo_broker_resources: Sequence['outputs.MoboBrokerResourceResponse']):
        """
        Configuration of the managed on behalf of resource.
        :param Sequence['MoboBrokerResourceResponse'] mobo_broker_resources: Associated MoboBrokerResources.
        """
        pulumi.set(__self__, "mobo_broker_resources", mobo_broker_resources)

    @property
    @pulumi.getter(name="moboBrokerResources")
    def mobo_broker_resources(self) -> Sequence['outputs.MoboBrokerResourceResponse']:
        """
        Associated MoboBrokerResources.
        """
        return pulumi.get(self, "mobo_broker_resources")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: builtins.str,
                 tenant_id: builtins.str,
                 type: builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class MarketPlaceOfferDetailsResponse(dict):
    """
    Marketplace offer details of Agri solution.
    """
    def __init__(__self__, *,
                 publisher_id: builtins.str,
                 saas_offer_id: builtins.str):
        """
        Marketplace offer details of Agri solution.
        :param builtins.str publisher_id: Publisher Id.
        :param builtins.str saas_offer_id: Saas offer Id.
        """
        pulumi.set(__self__, "publisher_id", publisher_id)
        pulumi.set(__self__, "saas_offer_id", saas_offer_id)

    @property
    @pulumi.getter(name="publisherId")
    def publisher_id(self) -> builtins.str:
        """
        Publisher Id.
        """
        return pulumi.get(self, "publisher_id")

    @property
    @pulumi.getter(name="saasOfferId")
    def saas_offer_id(self) -> builtins.str:
        """
        Saas offer Id.
        """
        return pulumi.get(self, "saas_offer_id")


@pulumi.output_type
class MoboBrokerResourceResponse(dict):
    """
    MoboBroker resource.
    """
    def __init__(__self__, *,
                 id: builtins.str):
        """
        MoboBroker resource.
        :param builtins.str id: The fully qualified resource ID of the MoboBroker resource.
               Example: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}`
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The fully qualified resource ID of the MoboBroker resource.
        Example: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}`
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: builtins.str,
                 capacity: Optional[builtins.int] = None,
                 family: Optional[builtins.str] = None,
                 size: Optional[builtins.str] = None,
                 tier: Optional[builtins.str] = None):
        """
        The resource model definition representing SKU
        :param builtins.str name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param builtins.int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param builtins.str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param builtins.str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param builtins.str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[builtins.int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[builtins.str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[builtins.str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SolutionResponse(dict):
    """
    Installed data manager for Agriculture solution detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationName":
            suggest = "application_name"
        elif key == "marketPlacePublisherId":
            suggest = "market_place_publisher_id"
        elif key == "partnerId":
            suggest = "partner_id"
        elif key == "planId":
            suggest = "plan_id"
        elif key == "saasSubscriptionId":
            suggest = "saas_subscription_id"
        elif key == "saasSubscriptionName":
            suggest = "saas_subscription_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SolutionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SolutionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SolutionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_name: Optional[builtins.str] = None,
                 market_place_publisher_id: Optional[builtins.str] = None,
                 partner_id: Optional[builtins.str] = None,
                 plan_id: Optional[builtins.str] = None,
                 saas_subscription_id: Optional[builtins.str] = None,
                 saas_subscription_name: Optional[builtins.str] = None):
        """
        Installed data manager for Agriculture solution detail.
        :param builtins.str application_name: Application name of the solution.
        :param builtins.str market_place_publisher_id: Marketplace publisher Id.
        :param builtins.str partner_id: Partner Id.
        :param builtins.str plan_id: Plan Id.
        :param builtins.str saas_subscription_id: Saas subscription Id.
        :param builtins.str saas_subscription_name: Saas subscription name.
        """
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if market_place_publisher_id is not None:
            pulumi.set(__self__, "market_place_publisher_id", market_place_publisher_id)
        if partner_id is not None:
            pulumi.set(__self__, "partner_id", partner_id)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if saas_subscription_id is not None:
            pulumi.set(__self__, "saas_subscription_id", saas_subscription_id)
        if saas_subscription_name is not None:
            pulumi.set(__self__, "saas_subscription_name", saas_subscription_name)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[builtins.str]:
        """
        Application name of the solution.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="marketPlacePublisherId")
    def market_place_publisher_id(self) -> Optional[builtins.str]:
        """
        Marketplace publisher Id.
        """
        return pulumi.get(self, "market_place_publisher_id")

    @property
    @pulumi.getter(name="partnerId")
    def partner_id(self) -> Optional[builtins.str]:
        """
        Partner Id.
        """
        return pulumi.get(self, "partner_id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[builtins.str]:
        """
        Plan Id.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="saasSubscriptionId")
    def saas_subscription_id(self) -> Optional[builtins.str]:
        """
        Saas subscription Id.
        """
        return pulumi.get(self, "saas_subscription_id")

    @property
    @pulumi.getter(name="saasSubscriptionName")
    def saas_subscription_name(self) -> Optional[builtins.str]:
        """
        Saas subscription name.
        """
        return pulumi.get(self, "saas_subscription_name")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: builtins.str,
                 principal_id: builtins.str):
        """
        User assigned identity properties
        :param builtins.str client_id: The client ID of the assigned identity.
        :param builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


