# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AdditionalCacheNodePropertiesArgs',
    'AdditionalCacheNodePropertiesArgsDict',
    'AdditionalCustomerPropertiesArgs',
    'AdditionalCustomerPropertiesArgsDict',
    'BgpConfigurationArgs',
    'BgpConfigurationArgsDict',
    'CacheNodeDriveConfigurationArgs',
    'CacheNodeDriveConfigurationArgsDict',
    'CacheNodeEntityArgs',
    'CacheNodeEntityArgsDict',
    'CacheNodeOldResponseArgs',
    'CacheNodeOldResponseArgsDict',
    'CacheNodePropertyArgs',
    'CacheNodePropertyArgsDict',
    'CustomerEntityArgs',
    'CustomerEntityArgsDict',
    'CustomerPropertyArgs',
    'CustomerPropertyArgsDict',
    'ProxyUrlConfigurationArgs',
    'ProxyUrlConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class AdditionalCacheNodePropertiesArgsDict(TypedDict):
        """
        Model representing cache node for connected cache resource
        """
        auto_update_version: NotRequired[pulumi.Input[str]]
        """
        Auto update or fast update version
        """
        bgp_configuration: NotRequired[pulumi.Input['BgpConfigurationArgsDict']]
        """
        Cache node resource Bgp configuration.
        """
        cache_node_properties_details_issues_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        issues list to return the issues as part of the additional cache node properties
        """
        drive_configuration: NotRequired[pulumi.Input[Sequence[pulumi.Input['CacheNodeDriveConfigurationArgsDict']]]]
        """
        Cache node resource drive configurations.
        """
        is_proxy_required: NotRequired[pulumi.Input[Union[str, 'ProxyRequired']]]
        """
        Cache node resource requires a proxy
        """
        optional_property1: NotRequired[pulumi.Input[str]]
        """
        Optional property #1 of Mcc response object
        """
        optional_property2: NotRequired[pulumi.Input[str]]
        """
        Optional property #2 of Mcc response object
        """
        optional_property3: NotRequired[pulumi.Input[str]]
        """
        Optional property #3 of Mcc response object
        """
        optional_property4: NotRequired[pulumi.Input[str]]
        """
        Optional property #4 of Mcc response object
        """
        optional_property5: NotRequired[pulumi.Input[str]]
        """
        Optional property #5 of Mcc response object
        """
        os_type: NotRequired[pulumi.Input[Union[str, 'OsType']]]
        """
        Operating system of the cache node
        """
        proxy_url: NotRequired[pulumi.Input[str]]
        """
        Cache node resource Mcc proxy Url
        """
        proxy_url_configuration: NotRequired[pulumi.Input['ProxyUrlConfigurationArgsDict']]
        """
        proxyUrl configuration of the cache node
        """
        update_cycle_type: NotRequired[pulumi.Input[Union[str, 'CycleType']]]
        """
        Update Cycle Type
        """
        update_info_details: NotRequired[pulumi.Input[str]]
        """
        Update related information details
        """
        update_requested_date_time: NotRequired[pulumi.Input[str]]
        """
        customer requested date time for mcc install of update cycle
        """
elif False:
    AdditionalCacheNodePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AdditionalCacheNodePropertiesArgs:
    def __init__(__self__, *,
                 auto_update_version: Optional[pulumi.Input[str]] = None,
                 bgp_configuration: Optional[pulumi.Input['BgpConfigurationArgs']] = None,
                 cache_node_properties_details_issues_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drive_configuration: Optional[pulumi.Input[Sequence[pulumi.Input['CacheNodeDriveConfigurationArgs']]]] = None,
                 is_proxy_required: Optional[pulumi.Input[Union[str, 'ProxyRequired']]] = None,
                 optional_property1: Optional[pulumi.Input[str]] = None,
                 optional_property2: Optional[pulumi.Input[str]] = None,
                 optional_property3: Optional[pulumi.Input[str]] = None,
                 optional_property4: Optional[pulumi.Input[str]] = None,
                 optional_property5: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OsType']]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 proxy_url_configuration: Optional[pulumi.Input['ProxyUrlConfigurationArgs']] = None,
                 update_cycle_type: Optional[pulumi.Input[Union[str, 'CycleType']]] = None,
                 update_info_details: Optional[pulumi.Input[str]] = None,
                 update_requested_date_time: Optional[pulumi.Input[str]] = None):
        """
        Model representing cache node for connected cache resource
        :param pulumi.Input[str] auto_update_version: Auto update or fast update version
        :param pulumi.Input['BgpConfigurationArgs'] bgp_configuration: Cache node resource Bgp configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cache_node_properties_details_issues_list: issues list to return the issues as part of the additional cache node properties
        :param pulumi.Input[Sequence[pulumi.Input['CacheNodeDriveConfigurationArgs']]] drive_configuration: Cache node resource drive configurations.
        :param pulumi.Input[Union[str, 'ProxyRequired']] is_proxy_required: Cache node resource requires a proxy
        :param pulumi.Input[str] optional_property1: Optional property #1 of Mcc response object
        :param pulumi.Input[str] optional_property2: Optional property #2 of Mcc response object
        :param pulumi.Input[str] optional_property3: Optional property #3 of Mcc response object
        :param pulumi.Input[str] optional_property4: Optional property #4 of Mcc response object
        :param pulumi.Input[str] optional_property5: Optional property #5 of Mcc response object
        :param pulumi.Input[Union[str, 'OsType']] os_type: Operating system of the cache node
        :param pulumi.Input[str] proxy_url: Cache node resource Mcc proxy Url
        :param pulumi.Input['ProxyUrlConfigurationArgs'] proxy_url_configuration: proxyUrl configuration of the cache node
        :param pulumi.Input[Union[str, 'CycleType']] update_cycle_type: Update Cycle Type
        :param pulumi.Input[str] update_info_details: Update related information details
        :param pulumi.Input[str] update_requested_date_time: customer requested date time for mcc install of update cycle
        """
        if auto_update_version is not None:
            pulumi.set(__self__, "auto_update_version", auto_update_version)
        if bgp_configuration is not None:
            pulumi.set(__self__, "bgp_configuration", bgp_configuration)
        if cache_node_properties_details_issues_list is not None:
            pulumi.set(__self__, "cache_node_properties_details_issues_list", cache_node_properties_details_issues_list)
        if drive_configuration is not None:
            pulumi.set(__self__, "drive_configuration", drive_configuration)
        if is_proxy_required is not None:
            pulumi.set(__self__, "is_proxy_required", is_proxy_required)
        if optional_property1 is not None:
            pulumi.set(__self__, "optional_property1", optional_property1)
        if optional_property2 is not None:
            pulumi.set(__self__, "optional_property2", optional_property2)
        if optional_property3 is not None:
            pulumi.set(__self__, "optional_property3", optional_property3)
        if optional_property4 is not None:
            pulumi.set(__self__, "optional_property4", optional_property4)
        if optional_property5 is not None:
            pulumi.set(__self__, "optional_property5", optional_property5)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if proxy_url_configuration is not None:
            pulumi.set(__self__, "proxy_url_configuration", proxy_url_configuration)
        if update_cycle_type is not None:
            pulumi.set(__self__, "update_cycle_type", update_cycle_type)
        if update_info_details is not None:
            pulumi.set(__self__, "update_info_details", update_info_details)
        if update_requested_date_time is not None:
            pulumi.set(__self__, "update_requested_date_time", update_requested_date_time)

    @property
    @pulumi.getter(name="autoUpdateVersion")
    def auto_update_version(self) -> Optional[pulumi.Input[str]]:
        """
        Auto update or fast update version
        """
        return pulumi.get(self, "auto_update_version")

    @auto_update_version.setter
    def auto_update_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_update_version", value)

    @property
    @pulumi.getter(name="bgpConfiguration")
    def bgp_configuration(self) -> Optional[pulumi.Input['BgpConfigurationArgs']]:
        """
        Cache node resource Bgp configuration.
        """
        return pulumi.get(self, "bgp_configuration")

    @bgp_configuration.setter
    def bgp_configuration(self, value: Optional[pulumi.Input['BgpConfigurationArgs']]):
        pulumi.set(self, "bgp_configuration", value)

    @property
    @pulumi.getter(name="cacheNodePropertiesDetailsIssuesList")
    def cache_node_properties_details_issues_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        issues list to return the issues as part of the additional cache node properties
        """
        return pulumi.get(self, "cache_node_properties_details_issues_list")

    @cache_node_properties_details_issues_list.setter
    def cache_node_properties_details_issues_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cache_node_properties_details_issues_list", value)

    @property
    @pulumi.getter(name="driveConfiguration")
    def drive_configuration(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CacheNodeDriveConfigurationArgs']]]]:
        """
        Cache node resource drive configurations.
        """
        return pulumi.get(self, "drive_configuration")

    @drive_configuration.setter
    def drive_configuration(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CacheNodeDriveConfigurationArgs']]]]):
        pulumi.set(self, "drive_configuration", value)

    @property
    @pulumi.getter(name="isProxyRequired")
    def is_proxy_required(self) -> Optional[pulumi.Input[Union[str, 'ProxyRequired']]]:
        """
        Cache node resource requires a proxy
        """
        return pulumi.get(self, "is_proxy_required")

    @is_proxy_required.setter
    def is_proxy_required(self, value: Optional[pulumi.Input[Union[str, 'ProxyRequired']]]):
        pulumi.set(self, "is_proxy_required", value)

    @property
    @pulumi.getter(name="optionalProperty1")
    def optional_property1(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #1 of Mcc response object
        """
        return pulumi.get(self, "optional_property1")

    @optional_property1.setter
    def optional_property1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property1", value)

    @property
    @pulumi.getter(name="optionalProperty2")
    def optional_property2(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #2 of Mcc response object
        """
        return pulumi.get(self, "optional_property2")

    @optional_property2.setter
    def optional_property2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property2", value)

    @property
    @pulumi.getter(name="optionalProperty3")
    def optional_property3(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #3 of Mcc response object
        """
        return pulumi.get(self, "optional_property3")

    @optional_property3.setter
    def optional_property3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property3", value)

    @property
    @pulumi.getter(name="optionalProperty4")
    def optional_property4(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #4 of Mcc response object
        """
        return pulumi.get(self, "optional_property4")

    @optional_property4.setter
    def optional_property4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property4", value)

    @property
    @pulumi.getter(name="optionalProperty5")
    def optional_property5(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #5 of Mcc response object
        """
        return pulumi.get(self, "optional_property5")

    @optional_property5.setter
    def optional_property5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property5", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[Union[str, 'OsType']]]:
        """
        Operating system of the cache node
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[Union[str, 'OsType']]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource Mcc proxy Url
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter(name="proxyUrlConfiguration")
    def proxy_url_configuration(self) -> Optional[pulumi.Input['ProxyUrlConfigurationArgs']]:
        """
        proxyUrl configuration of the cache node
        """
        return pulumi.get(self, "proxy_url_configuration")

    @proxy_url_configuration.setter
    def proxy_url_configuration(self, value: Optional[pulumi.Input['ProxyUrlConfigurationArgs']]):
        pulumi.set(self, "proxy_url_configuration", value)

    @property
    @pulumi.getter(name="updateCycleType")
    def update_cycle_type(self) -> Optional[pulumi.Input[Union[str, 'CycleType']]]:
        """
        Update Cycle Type
        """
        return pulumi.get(self, "update_cycle_type")

    @update_cycle_type.setter
    def update_cycle_type(self, value: Optional[pulumi.Input[Union[str, 'CycleType']]]):
        pulumi.set(self, "update_cycle_type", value)

    @property
    @pulumi.getter(name="updateInfoDetails")
    def update_info_details(self) -> Optional[pulumi.Input[str]]:
        """
        Update related information details
        """
        return pulumi.get(self, "update_info_details")

    @update_info_details.setter
    def update_info_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_info_details", value)

    @property
    @pulumi.getter(name="updateRequestedDateTime")
    def update_requested_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        customer requested date time for mcc install of update cycle
        """
        return pulumi.get(self, "update_requested_date_time")

    @update_requested_date_time.setter
    def update_requested_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_requested_date_time", value)


if not MYPY:
    class AdditionalCustomerPropertiesArgsDict(TypedDict):
        """
        Model representing customer for connected cache resource
        """
        customer_asn: NotRequired[pulumi.Input[str]]
        """
        Customer resource Asn (autonomous system number).
        """
        customer_email: NotRequired[pulumi.Input[str]]
        """
        Customer resource contact email.
        """
        customer_entitlement_expiration: NotRequired[pulumi.Input[str]]
        """
        Customer resource entitlement expiration date string.
        """
        customer_entitlement_sku_guid: NotRequired[pulumi.Input[str]]
        """
        Customer resource entitlement Sku Guid.
        """
        customer_entitlement_sku_id: NotRequired[pulumi.Input[str]]
        """
        Customer resource entitlement Sku Id.
        """
        customer_entitlement_sku_name: NotRequired[pulumi.Input[str]]
        """
        Customer resource entitlement Sku name.
        """
        customer_transit_asn: NotRequired[pulumi.Input[str]]
        """
        Customer resource transit Asn (autonomous system number).
        """
        customer_transit_state: NotRequired[pulumi.Input[Union[str, 'CustomerTransitState']]]
        """
        Customer resource transit state.
        """
        optional_property1: NotRequired[pulumi.Input[str]]
        """
        Optional property #1 of Mcc response object.
        """
        optional_property2: NotRequired[pulumi.Input[str]]
        """
        Optional property #2 of Mcc response object.
        """
        optional_property3: NotRequired[pulumi.Input[str]]
        """
        Optional property #3 of Mcc response object.
        """
        optional_property4: NotRequired[pulumi.Input[str]]
        """
        Optional property #4 of Mcc response object.
        """
        optional_property5: NotRequired[pulumi.Input[str]]
        """
        Optional property #5 of Mcc response object.
        """
elif False:
    AdditionalCustomerPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AdditionalCustomerPropertiesArgs:
    def __init__(__self__, *,
                 customer_asn: Optional[pulumi.Input[str]] = None,
                 customer_email: Optional[pulumi.Input[str]] = None,
                 customer_entitlement_expiration: Optional[pulumi.Input[str]] = None,
                 customer_entitlement_sku_guid: Optional[pulumi.Input[str]] = None,
                 customer_entitlement_sku_id: Optional[pulumi.Input[str]] = None,
                 customer_entitlement_sku_name: Optional[pulumi.Input[str]] = None,
                 customer_transit_asn: Optional[pulumi.Input[str]] = None,
                 customer_transit_state: Optional[pulumi.Input[Union[str, 'CustomerTransitState']]] = None,
                 optional_property1: Optional[pulumi.Input[str]] = None,
                 optional_property2: Optional[pulumi.Input[str]] = None,
                 optional_property3: Optional[pulumi.Input[str]] = None,
                 optional_property4: Optional[pulumi.Input[str]] = None,
                 optional_property5: Optional[pulumi.Input[str]] = None):
        """
        Model representing customer for connected cache resource
        :param pulumi.Input[str] customer_asn: Customer resource Asn (autonomous system number).
        :param pulumi.Input[str] customer_email: Customer resource contact email.
        :param pulumi.Input[str] customer_entitlement_expiration: Customer resource entitlement expiration date string.
        :param pulumi.Input[str] customer_entitlement_sku_guid: Customer resource entitlement Sku Guid.
        :param pulumi.Input[str] customer_entitlement_sku_id: Customer resource entitlement Sku Id.
        :param pulumi.Input[str] customer_entitlement_sku_name: Customer resource entitlement Sku name.
        :param pulumi.Input[str] customer_transit_asn: Customer resource transit Asn (autonomous system number).
        :param pulumi.Input[Union[str, 'CustomerTransitState']] customer_transit_state: Customer resource transit state.
        :param pulumi.Input[str] optional_property1: Optional property #1 of Mcc response object.
        :param pulumi.Input[str] optional_property2: Optional property #2 of Mcc response object.
        :param pulumi.Input[str] optional_property3: Optional property #3 of Mcc response object.
        :param pulumi.Input[str] optional_property4: Optional property #4 of Mcc response object.
        :param pulumi.Input[str] optional_property5: Optional property #5 of Mcc response object.
        """
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if customer_entitlement_expiration is not None:
            pulumi.set(__self__, "customer_entitlement_expiration", customer_entitlement_expiration)
        if customer_entitlement_sku_guid is not None:
            pulumi.set(__self__, "customer_entitlement_sku_guid", customer_entitlement_sku_guid)
        if customer_entitlement_sku_id is not None:
            pulumi.set(__self__, "customer_entitlement_sku_id", customer_entitlement_sku_id)
        if customer_entitlement_sku_name is not None:
            pulumi.set(__self__, "customer_entitlement_sku_name", customer_entitlement_sku_name)
        if customer_transit_asn is not None:
            pulumi.set(__self__, "customer_transit_asn", customer_transit_asn)
        if customer_transit_state is not None:
            pulumi.set(__self__, "customer_transit_state", customer_transit_state)
        if optional_property1 is not None:
            pulumi.set(__self__, "optional_property1", optional_property1)
        if optional_property2 is not None:
            pulumi.set(__self__, "optional_property2", optional_property2)
        if optional_property3 is not None:
            pulumi.set(__self__, "optional_property3", optional_property3)
        if optional_property4 is not None:
            pulumi.set(__self__, "optional_property4", optional_property4)
        if optional_property5 is not None:
            pulumi.set(__self__, "optional_property5", optional_property5)

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource Asn (autonomous system number).
        """
        return pulumi.get(self, "customer_asn")

    @customer_asn.setter
    def customer_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_asn", value)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource contact email.
        """
        return pulumi.get(self, "customer_email")

    @customer_email.setter
    def customer_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_email", value)

    @property
    @pulumi.getter(name="customerEntitlementExpiration")
    def customer_entitlement_expiration(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource entitlement expiration date string.
        """
        return pulumi.get(self, "customer_entitlement_expiration")

    @customer_entitlement_expiration.setter
    def customer_entitlement_expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_entitlement_expiration", value)

    @property
    @pulumi.getter(name="customerEntitlementSkuGuid")
    def customer_entitlement_sku_guid(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource entitlement Sku Guid.
        """
        return pulumi.get(self, "customer_entitlement_sku_guid")

    @customer_entitlement_sku_guid.setter
    def customer_entitlement_sku_guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_entitlement_sku_guid", value)

    @property
    @pulumi.getter(name="customerEntitlementSkuId")
    def customer_entitlement_sku_id(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource entitlement Sku Id.
        """
        return pulumi.get(self, "customer_entitlement_sku_id")

    @customer_entitlement_sku_id.setter
    def customer_entitlement_sku_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_entitlement_sku_id", value)

    @property
    @pulumi.getter(name="customerEntitlementSkuName")
    def customer_entitlement_sku_name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource entitlement Sku name.
        """
        return pulumi.get(self, "customer_entitlement_sku_name")

    @customer_entitlement_sku_name.setter
    def customer_entitlement_sku_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_entitlement_sku_name", value)

    @property
    @pulumi.getter(name="customerTransitAsn")
    def customer_transit_asn(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource transit Asn (autonomous system number).
        """
        return pulumi.get(self, "customer_transit_asn")

    @customer_transit_asn.setter
    def customer_transit_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_transit_asn", value)

    @property
    @pulumi.getter(name="customerTransitState")
    def customer_transit_state(self) -> Optional[pulumi.Input[Union[str, 'CustomerTransitState']]]:
        """
        Customer resource transit state.
        """
        return pulumi.get(self, "customer_transit_state")

    @customer_transit_state.setter
    def customer_transit_state(self, value: Optional[pulumi.Input[Union[str, 'CustomerTransitState']]]):
        pulumi.set(self, "customer_transit_state", value)

    @property
    @pulumi.getter(name="optionalProperty1")
    def optional_property1(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #1 of Mcc response object.
        """
        return pulumi.get(self, "optional_property1")

    @optional_property1.setter
    def optional_property1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property1", value)

    @property
    @pulumi.getter(name="optionalProperty2")
    def optional_property2(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #2 of Mcc response object.
        """
        return pulumi.get(self, "optional_property2")

    @optional_property2.setter
    def optional_property2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property2", value)

    @property
    @pulumi.getter(name="optionalProperty3")
    def optional_property3(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #3 of Mcc response object.
        """
        return pulumi.get(self, "optional_property3")

    @optional_property3.setter
    def optional_property3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property3", value)

    @property
    @pulumi.getter(name="optionalProperty4")
    def optional_property4(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #4 of Mcc response object.
        """
        return pulumi.get(self, "optional_property4")

    @optional_property4.setter
    def optional_property4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property4", value)

    @property
    @pulumi.getter(name="optionalProperty5")
    def optional_property5(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property #5 of Mcc response object.
        """
        return pulumi.get(self, "optional_property5")

    @optional_property5.setter
    def optional_property5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_property5", value)


if not MYPY:
    class BgpConfigurationArgsDict(TypedDict):
        """
        Bgp configuration of cache node
        """
        asn_to_ip_address_mapping: NotRequired[pulumi.Input[str]]
        """
        Asn to ip address mapping
        """
elif False:
    BgpConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BgpConfigurationArgs:
    def __init__(__self__, *,
                 asn_to_ip_address_mapping: Optional[pulumi.Input[str]] = None):
        """
        Bgp configuration of cache node
        :param pulumi.Input[str] asn_to_ip_address_mapping: Asn to ip address mapping
        """
        if asn_to_ip_address_mapping is not None:
            pulumi.set(__self__, "asn_to_ip_address_mapping", asn_to_ip_address_mapping)

    @property
    @pulumi.getter(name="asnToIpAddressMapping")
    def asn_to_ip_address_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Asn to ip address mapping
        """
        return pulumi.get(self, "asn_to_ip_address_mapping")

    @asn_to_ip_address_mapping.setter
    def asn_to_ip_address_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asn_to_ip_address_mapping", value)


if not MYPY:
    class CacheNodeDriveConfigurationArgsDict(TypedDict):
        """
        Drive configuration for cache node
        """
        cache_number: NotRequired[pulumi.Input[int]]
        """
        corresponding nginx cache number. Valid cache numbers are 1 - 20
        """
        nginx_mapping: NotRequired[pulumi.Input[str]]
        """
        full binding for corresponding nginx cache drive
        """
        physical_path: NotRequired[pulumi.Input[str]]
        """
        physical path location of the folder used for caching content
        """
        size_in_gb: NotRequired[pulumi.Input[int]]
        """
        physical size of the drive used for caching content
        """
elif False:
    CacheNodeDriveConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CacheNodeDriveConfigurationArgs:
    def __init__(__self__, *,
                 cache_number: Optional[pulumi.Input[int]] = None,
                 nginx_mapping: Optional[pulumi.Input[str]] = None,
                 physical_path: Optional[pulumi.Input[str]] = None,
                 size_in_gb: Optional[pulumi.Input[int]] = None):
        """
        Drive configuration for cache node
        :param pulumi.Input[int] cache_number: corresponding nginx cache number. Valid cache numbers are 1 - 20
        :param pulumi.Input[str] nginx_mapping: full binding for corresponding nginx cache drive
        :param pulumi.Input[str] physical_path: physical path location of the folder used for caching content
        :param pulumi.Input[int] size_in_gb: physical size of the drive used for caching content
        """
        if cache_number is not None:
            pulumi.set(__self__, "cache_number", cache_number)
        if nginx_mapping is not None:
            pulumi.set(__self__, "nginx_mapping", nginx_mapping)
        if physical_path is not None:
            pulumi.set(__self__, "physical_path", physical_path)
        if size_in_gb is not None:
            pulumi.set(__self__, "size_in_gb", size_in_gb)

    @property
    @pulumi.getter(name="cacheNumber")
    def cache_number(self) -> Optional[pulumi.Input[int]]:
        """
        corresponding nginx cache number. Valid cache numbers are 1 - 20
        """
        return pulumi.get(self, "cache_number")

    @cache_number.setter
    def cache_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_number", value)

    @property
    @pulumi.getter(name="nginxMapping")
    def nginx_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        full binding for corresponding nginx cache drive
        """
        return pulumi.get(self, "nginx_mapping")

    @nginx_mapping.setter
    def nginx_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nginx_mapping", value)

    @property
    @pulumi.getter(name="physicalPath")
    def physical_path(self) -> Optional[pulumi.Input[str]]:
        """
        physical path location of the folder used for caching content
        """
        return pulumi.get(self, "physical_path")

    @physical_path.setter
    def physical_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "physical_path", value)

    @property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> Optional[pulumi.Input[int]]:
        """
        physical size of the drive used for caching content
        """
        return pulumi.get(self, "size_in_gb")

    @size_in_gb.setter
    def size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_in_gb", value)


if not MYPY:
    class CacheNodeEntityArgsDict(TypedDict):
        """
        Model representing Cache Node for ConnectedCache resource
        """
        auto_update_requested_day: NotRequired[pulumi.Input[int]]
        """
        Customer requested day of week for mcc install of auto update cycle
        """
        auto_update_requested_time: NotRequired[pulumi.Input[str]]
        """
        Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
        """
        auto_update_requested_week: NotRequired[pulumi.Input[int]]
        """
        Customer requested week of month for mcc install of auto update cycle
        """
        auto_update_ring_type: NotRequired[pulumi.Input[Union[str, 'AutoUpdateRingType']]]
        """
        Auto Update Ring Type which is slow or fast etc.
        """
        cache_node_id: NotRequired[pulumi.Input[str]]
        """
        Cache node resource identifier of the cache node
        """
        cache_node_name: NotRequired[pulumi.Input[str]]
        """
        Cache node resource name.
        """
        cidr_csv: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Cache node resource comma separated values of Cidrs.
        """
        cidr_selection_type: NotRequired[pulumi.Input[int]]
        """
        Cache node resource current Cidr range precedence selection type.
        """
        customer_asn: NotRequired[pulumi.Input[int]]
        """
        Cache node resource customer resource Asn (autonomous system number)
        """
        customer_index: NotRequired[pulumi.Input[str]]
        """
        Cache node resource customer index as string.
        """
        customer_name: NotRequired[pulumi.Input[str]]
        """
        Cache node resource customer resource name.
        """
        fully_qualified_domain_name: NotRequired[pulumi.Input[str]]
        """
        FQDN(fully qualified domain name) value of the mcc cache node
        """
        fully_qualified_resource_id: NotRequired[pulumi.Input[str]]
        """
        Cache node resource Azure fully qualified resource Id.
        """
        ip_address: NotRequired[pulumi.Input[str]]
        """
        Cache node resource Ip address.
        """
        is_enabled: NotRequired[pulumi.Input[bool]]
        """
        Cache node resource flag for indicating if cache node is enabled.
        """
        is_enterprise_managed: NotRequired[pulumi.Input[bool]]
        """
        Cache node resource flag for determining if managed by enterprise as boolean.
        """
        max_allowable_egress_in_mbps: NotRequired[pulumi.Input[int]]
        """
        Cache node resource maximum allowed egress in Mbps.
        """
        should_migrate: NotRequired[pulumi.Input[bool]]
        """
        Cache node resource flag for determining if customer will be migrated.
        """
elif False:
    CacheNodeEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CacheNodeEntityArgs:
    def __init__(__self__, *,
                 auto_update_requested_day: Optional[pulumi.Input[int]] = None,
                 auto_update_requested_time: Optional[pulumi.Input[str]] = None,
                 auto_update_requested_week: Optional[pulumi.Input[int]] = None,
                 auto_update_ring_type: Optional[pulumi.Input[Union[str, 'AutoUpdateRingType']]] = None,
                 cache_node_id: Optional[pulumi.Input[str]] = None,
                 cache_node_name: Optional[pulumi.Input[str]] = None,
                 cidr_csv: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_selection_type: Optional[pulumi.Input[int]] = None,
                 customer_asn: Optional[pulumi.Input[int]] = None,
                 customer_index: Optional[pulumi.Input[str]] = None,
                 customer_name: Optional[pulumi.Input[str]] = None,
                 fully_qualified_domain_name: Optional[pulumi.Input[str]] = None,
                 fully_qualified_resource_id: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_enterprise_managed: Optional[pulumi.Input[bool]] = None,
                 max_allowable_egress_in_mbps: Optional[pulumi.Input[int]] = None,
                 should_migrate: Optional[pulumi.Input[bool]] = None):
        """
        Model representing Cache Node for ConnectedCache resource
        :param pulumi.Input[int] auto_update_requested_day: Customer requested day of week for mcc install of auto update cycle
        :param pulumi.Input[str] auto_update_requested_time: Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
        :param pulumi.Input[int] auto_update_requested_week: Customer requested week of month for mcc install of auto update cycle
        :param pulumi.Input[Union[str, 'AutoUpdateRingType']] auto_update_ring_type: Auto Update Ring Type which is slow or fast etc.
        :param pulumi.Input[str] cache_node_id: Cache node resource identifier of the cache node
        :param pulumi.Input[str] cache_node_name: Cache node resource name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_csv: Cache node resource comma separated values of Cidrs.
        :param pulumi.Input[int] cidr_selection_type: Cache node resource current Cidr range precedence selection type.
        :param pulumi.Input[int] customer_asn: Cache node resource customer resource Asn (autonomous system number)
        :param pulumi.Input[str] customer_index: Cache node resource customer index as string.
        :param pulumi.Input[str] customer_name: Cache node resource customer resource name.
        :param pulumi.Input[str] fully_qualified_domain_name: FQDN(fully qualified domain name) value of the mcc cache node
        :param pulumi.Input[str] fully_qualified_resource_id: Cache node resource Azure fully qualified resource Id.
        :param pulumi.Input[str] ip_address: Cache node resource Ip address.
        :param pulumi.Input[bool] is_enabled: Cache node resource flag for indicating if cache node is enabled.
        :param pulumi.Input[bool] is_enterprise_managed: Cache node resource flag for determining if managed by enterprise as boolean.
        :param pulumi.Input[int] max_allowable_egress_in_mbps: Cache node resource maximum allowed egress in Mbps.
        :param pulumi.Input[bool] should_migrate: Cache node resource flag for determining if customer will be migrated.
        """
        if auto_update_requested_day is not None:
            pulumi.set(__self__, "auto_update_requested_day", auto_update_requested_day)
        if auto_update_requested_time is not None:
            pulumi.set(__self__, "auto_update_requested_time", auto_update_requested_time)
        if auto_update_requested_week is not None:
            pulumi.set(__self__, "auto_update_requested_week", auto_update_requested_week)
        if auto_update_ring_type is not None:
            pulumi.set(__self__, "auto_update_ring_type", auto_update_ring_type)
        if cache_node_id is not None:
            pulumi.set(__self__, "cache_node_id", cache_node_id)
        if cache_node_name is not None:
            pulumi.set(__self__, "cache_node_name", cache_node_name)
        if cidr_csv is not None:
            pulumi.set(__self__, "cidr_csv", cidr_csv)
        if cidr_selection_type is not None:
            pulumi.set(__self__, "cidr_selection_type", cidr_selection_type)
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_index is not None:
            pulumi.set(__self__, "customer_index", customer_index)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if fully_qualified_domain_name is not None:
            pulumi.set(__self__, "fully_qualified_domain_name", fully_qualified_domain_name)
        if fully_qualified_resource_id is not None:
            pulumi.set(__self__, "fully_qualified_resource_id", fully_qualified_resource_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_enterprise_managed is not None:
            pulumi.set(__self__, "is_enterprise_managed", is_enterprise_managed)
        if max_allowable_egress_in_mbps is not None:
            pulumi.set(__self__, "max_allowable_egress_in_mbps", max_allowable_egress_in_mbps)
        if should_migrate is not None:
            pulumi.set(__self__, "should_migrate", should_migrate)

    @property
    @pulumi.getter(name="autoUpdateRequestedDay")
    def auto_update_requested_day(self) -> Optional[pulumi.Input[int]]:
        """
        Customer requested day of week for mcc install of auto update cycle
        """
        return pulumi.get(self, "auto_update_requested_day")

    @auto_update_requested_day.setter
    def auto_update_requested_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_update_requested_day", value)

    @property
    @pulumi.getter(name="autoUpdateRequestedTime")
    def auto_update_requested_time(self) -> Optional[pulumi.Input[str]]:
        """
        Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
        """
        return pulumi.get(self, "auto_update_requested_time")

    @auto_update_requested_time.setter
    def auto_update_requested_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_update_requested_time", value)

    @property
    @pulumi.getter(name="autoUpdateRequestedWeek")
    def auto_update_requested_week(self) -> Optional[pulumi.Input[int]]:
        """
        Customer requested week of month for mcc install of auto update cycle
        """
        return pulumi.get(self, "auto_update_requested_week")

    @auto_update_requested_week.setter
    def auto_update_requested_week(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_update_requested_week", value)

    @property
    @pulumi.getter(name="autoUpdateRingType")
    def auto_update_ring_type(self) -> Optional[pulumi.Input[Union[str, 'AutoUpdateRingType']]]:
        """
        Auto Update Ring Type which is slow or fast etc.
        """
        return pulumi.get(self, "auto_update_ring_type")

    @auto_update_ring_type.setter
    def auto_update_ring_type(self, value: Optional[pulumi.Input[Union[str, 'AutoUpdateRingType']]]):
        pulumi.set(self, "auto_update_ring_type", value)

    @property
    @pulumi.getter(name="cacheNodeId")
    def cache_node_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource identifier of the cache node
        """
        return pulumi.get(self, "cache_node_id")

    @cache_node_id.setter
    def cache_node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_node_id", value)

    @property
    @pulumi.getter(name="cacheNodeName")
    def cache_node_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource name.
        """
        return pulumi.get(self, "cache_node_name")

    @cache_node_name.setter
    def cache_node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_node_name", value)

    @property
    @pulumi.getter(name="cidrCsv")
    def cidr_csv(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cache node resource comma separated values of Cidrs.
        """
        return pulumi.get(self, "cidr_csv")

    @cidr_csv.setter
    def cidr_csv(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidr_csv", value)

    @property
    @pulumi.getter(name="cidrSelectionType")
    def cidr_selection_type(self) -> Optional[pulumi.Input[int]]:
        """
        Cache node resource current Cidr range precedence selection type.
        """
        return pulumi.get(self, "cidr_selection_type")

    @cidr_selection_type.setter
    def cidr_selection_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cidr_selection_type", value)

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[pulumi.Input[int]]:
        """
        Cache node resource customer resource Asn (autonomous system number)
        """
        return pulumi.get(self, "customer_asn")

    @customer_asn.setter
    def customer_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "customer_asn", value)

    @property
    @pulumi.getter(name="customerIndex")
    def customer_index(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource customer index as string.
        """
        return pulumi.get(self, "customer_index")

    @customer_index.setter
    def customer_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_index", value)

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource customer resource name.
        """
        return pulumi.get(self, "customer_name")

    @customer_name.setter
    def customer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_name", value)

    @property
    @pulumi.getter(name="fullyQualifiedDomainName")
    def fully_qualified_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN(fully qualified domain name) value of the mcc cache node
        """
        return pulumi.get(self, "fully_qualified_domain_name")

    @fully_qualified_domain_name.setter
    def fully_qualified_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fully_qualified_domain_name", value)

    @property
    @pulumi.getter(name="fullyQualifiedResourceId")
    def fully_qualified_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource Azure fully qualified resource Id.
        """
        return pulumi.get(self, "fully_qualified_resource_id")

    @fully_qualified_resource_id.setter
    def fully_qualified_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fully_qualified_resource_id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Cache node resource Ip address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache node resource flag for indicating if cache node is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isEnterpriseManaged")
    def is_enterprise_managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache node resource flag for determining if managed by enterprise as boolean.
        """
        return pulumi.get(self, "is_enterprise_managed")

    @is_enterprise_managed.setter
    def is_enterprise_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enterprise_managed", value)

    @property
    @pulumi.getter(name="maxAllowableEgressInMbps")
    def max_allowable_egress_in_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        Cache node resource maximum allowed egress in Mbps.
        """
        return pulumi.get(self, "max_allowable_egress_in_mbps")

    @max_allowable_egress_in_mbps.setter
    def max_allowable_egress_in_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allowable_egress_in_mbps", value)

    @property
    @pulumi.getter(name="shouldMigrate")
    def should_migrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache node resource flag for determining if customer will be migrated.
        """
        return pulumi.get(self, "should_migrate")

    @should_migrate.setter
    def should_migrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_migrate", value)


if not MYPY:
    class CacheNodeOldResponseArgsDict(TypedDict):
        """
        Model representing Cache Node for ConnectedCache resource
        """
        status_code: NotRequired[pulumi.Input[str]]
        """
        statusCode used to get code details of Mcc response object
        """
        status_details: NotRequired[pulumi.Input[str]]
        """
        statusDetails used to get inner details of Mcc response object
        """
        status_text: NotRequired[pulumi.Input[str]]
        """
        statusText used to get status details in string format of Mcc response object
        """
elif False:
    CacheNodeOldResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CacheNodeOldResponseArgs:
    def __init__(__self__, *,
                 status_code: Optional[pulumi.Input[str]] = None,
                 status_details: Optional[pulumi.Input[str]] = None,
                 status_text: Optional[pulumi.Input[str]] = None):
        """
        Model representing Cache Node for ConnectedCache resource
        :param pulumi.Input[str] status_code: statusCode used to get code details of Mcc response object
        :param pulumi.Input[str] status_details: statusDetails used to get inner details of Mcc response object
        :param pulumi.Input[str] status_text: statusText used to get status details in string format of Mcc response object
        """
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[str]]:
        """
        statusCode used to get code details of Mcc response object
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[str]]:
        """
        statusDetails used to get inner details of Mcc response object
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_details", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        statusText used to get status details in string format of Mcc response object
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)


if not MYPY:
    class CacheNodePropertyArgsDict(TypedDict):
        """
        Model representing an Mcc cache node connectedCache resource
        """
        additional_cache_node_properties: NotRequired[pulumi.Input['AdditionalCacheNodePropertiesArgsDict']]
        """
        Mcc cache node resource additional properties.
        """
        cache_node: NotRequired[pulumi.Input['CacheNodeEntityArgsDict']]
        """
        Mcc cache node resource (cache node entity).
        """
        status_code: NotRequired[pulumi.Input[str]]
        """
        Mcc response status code.
        """
        status_details: NotRequired[pulumi.Input[str]]
        """
        Mcc response status details for retrieving response inner details.
        """
        status_text: NotRequired[pulumi.Input[str]]
        """
        Mcc response status text as string for retrieving status details.
        """
elif False:
    CacheNodePropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CacheNodePropertyArgs:
    def __init__(__self__, *,
                 additional_cache_node_properties: Optional[pulumi.Input['AdditionalCacheNodePropertiesArgs']] = None,
                 cache_node: Optional[pulumi.Input['CacheNodeEntityArgs']] = None,
                 status_code: Optional[pulumi.Input[str]] = None,
                 status_details: Optional[pulumi.Input[str]] = None,
                 status_text: Optional[pulumi.Input[str]] = None):
        """
        Model representing an Mcc cache node connectedCache resource
        :param pulumi.Input['AdditionalCacheNodePropertiesArgs'] additional_cache_node_properties: Mcc cache node resource additional properties.
        :param pulumi.Input['CacheNodeEntityArgs'] cache_node: Mcc cache node resource (cache node entity).
        :param pulumi.Input[str] status_code: Mcc response status code.
        :param pulumi.Input[str] status_details: Mcc response status details for retrieving response inner details.
        :param pulumi.Input[str] status_text: Mcc response status text as string for retrieving status details.
        """
        if additional_cache_node_properties is not None:
            pulumi.set(__self__, "additional_cache_node_properties", additional_cache_node_properties)
        if cache_node is not None:
            pulumi.set(__self__, "cache_node", cache_node)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @property
    @pulumi.getter(name="additionalCacheNodeProperties")
    def additional_cache_node_properties(self) -> Optional[pulumi.Input['AdditionalCacheNodePropertiesArgs']]:
        """
        Mcc cache node resource additional properties.
        """
        return pulumi.get(self, "additional_cache_node_properties")

    @additional_cache_node_properties.setter
    def additional_cache_node_properties(self, value: Optional[pulumi.Input['AdditionalCacheNodePropertiesArgs']]):
        pulumi.set(self, "additional_cache_node_properties", value)

    @property
    @pulumi.getter(name="cacheNode")
    def cache_node(self) -> Optional[pulumi.Input['CacheNodeEntityArgs']]:
        """
        Mcc cache node resource (cache node entity).
        """
        return pulumi.get(self, "cache_node")

    @cache_node.setter
    def cache_node(self, value: Optional[pulumi.Input['CacheNodeEntityArgs']]):
        pulumi.set(self, "cache_node", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[str]]:
        """
        Mcc response status code.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[str]]:
        """
        Mcc response status details for retrieving response inner details.
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_details", value)

    @property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[str]]:
        """
        Mcc response status text as string for retrieving status details.
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_text", value)


if not MYPY:
    class CustomerEntityArgsDict(TypedDict):
        """
        Model representing Customer resource for ConnectedCache resource
        """
        client_tenant_id: NotRequired[pulumi.Input[str]]
        """
        Customer resource client tenant Id of subscription.
        """
        contact_email: NotRequired[pulumi.Input[str]]
        """
        Customer resource contact email.
        """
        contact_name: NotRequired[pulumi.Input[str]]
        """
        Customer resource contact full name.
        """
        contact_phone: NotRequired[pulumi.Input[str]]
        """
        Customer resource contact phone.
        """
        customer_name: NotRequired[pulumi.Input[str]]
        """
        Customer resource name.
        """
        fully_qualified_resource_id: NotRequired[pulumi.Input[str]]
        """
        Customer resource Azure fully qualified resource Id.
        """
        is_enterprise_managed: NotRequired[pulumi.Input[bool]]
        """
        Customer resource flag for enterprise management as boolean.
        """
        is_entitled: NotRequired[pulumi.Input[bool]]
        """
        Customer resource entitlement flag as boolean.
        """
        release_version: NotRequired[pulumi.Input[int]]
        """
        Customer resource Mcc release version.
        """
        resend_signup_code: NotRequired[pulumi.Input[bool]]
        """
        Customer resource flag for resending signup code as boolean.
        """
        should_migrate: NotRequired[pulumi.Input[bool]]
        """
        Customer resource flag for migration.
        """
        verify_signup_code: NotRequired[pulumi.Input[bool]]
        """
        Customer resource flag for requiring verification of signup code as boolean.
        """
        verify_signup_phrase: NotRequired[pulumi.Input[str]]
        """
        Customer resource phrase for verifying signup.
        """
elif False:
    CustomerEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomerEntityArgs:
    def __init__(__self__, *,
                 client_tenant_id: Optional[pulumi.Input[str]] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 contact_name: Optional[pulumi.Input[str]] = None,
                 contact_phone: Optional[pulumi.Input[str]] = None,
                 customer_name: Optional[pulumi.Input[str]] = None,
                 fully_qualified_resource_id: Optional[pulumi.Input[str]] = None,
                 is_enterprise_managed: Optional[pulumi.Input[bool]] = None,
                 is_entitled: Optional[pulumi.Input[bool]] = None,
                 release_version: Optional[pulumi.Input[int]] = None,
                 resend_signup_code: Optional[pulumi.Input[bool]] = None,
                 should_migrate: Optional[pulumi.Input[bool]] = None,
                 verify_signup_code: Optional[pulumi.Input[bool]] = None,
                 verify_signup_phrase: Optional[pulumi.Input[str]] = None):
        """
        Model representing Customer resource for ConnectedCache resource
        :param pulumi.Input[str] client_tenant_id: Customer resource client tenant Id of subscription.
        :param pulumi.Input[str] contact_email: Customer resource contact email.
        :param pulumi.Input[str] contact_name: Customer resource contact full name.
        :param pulumi.Input[str] contact_phone: Customer resource contact phone.
        :param pulumi.Input[str] customer_name: Customer resource name.
        :param pulumi.Input[str] fully_qualified_resource_id: Customer resource Azure fully qualified resource Id.
        :param pulumi.Input[bool] is_enterprise_managed: Customer resource flag for enterprise management as boolean.
        :param pulumi.Input[bool] is_entitled: Customer resource entitlement flag as boolean.
        :param pulumi.Input[int] release_version: Customer resource Mcc release version.
        :param pulumi.Input[bool] resend_signup_code: Customer resource flag for resending signup code as boolean.
        :param pulumi.Input[bool] should_migrate: Customer resource flag for migration.
        :param pulumi.Input[bool] verify_signup_code: Customer resource flag for requiring verification of signup code as boolean.
        :param pulumi.Input[str] verify_signup_phrase: Customer resource phrase for verifying signup.
        """
        if client_tenant_id is not None:
            pulumi.set(__self__, "client_tenant_id", client_tenant_id)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if contact_phone is not None:
            pulumi.set(__self__, "contact_phone", contact_phone)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if fully_qualified_resource_id is not None:
            pulumi.set(__self__, "fully_qualified_resource_id", fully_qualified_resource_id)
        if is_enterprise_managed is not None:
            pulumi.set(__self__, "is_enterprise_managed", is_enterprise_managed)
        if is_entitled is not None:
            pulumi.set(__self__, "is_entitled", is_entitled)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)
        if resend_signup_code is not None:
            pulumi.set(__self__, "resend_signup_code", resend_signup_code)
        if should_migrate is not None:
            pulumi.set(__self__, "should_migrate", should_migrate)
        if verify_signup_code is not None:
            pulumi.set(__self__, "verify_signup_code", verify_signup_code)
        if verify_signup_phrase is not None:
            pulumi.set(__self__, "verify_signup_phrase", verify_signup_phrase)

    @property
    @pulumi.getter(name="clientTenantId")
    def client_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource client tenant Id of subscription.
        """
        return pulumi.get(self, "client_tenant_id")

    @client_tenant_id.setter
    def client_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_tenant_id", value)

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource contact email.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_email", value)

    @property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource contact full name.
        """
        return pulumi.get(self, "contact_name")

    @contact_name.setter
    def contact_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_name", value)

    @property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource contact phone.
        """
        return pulumi.get(self, "contact_phone")

    @contact_phone.setter
    def contact_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_phone", value)

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource name.
        """
        return pulumi.get(self, "customer_name")

    @customer_name.setter
    def customer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_name", value)

    @property
    @pulumi.getter(name="fullyQualifiedResourceId")
    def fully_qualified_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource Azure fully qualified resource Id.
        """
        return pulumi.get(self, "fully_qualified_resource_id")

    @fully_qualified_resource_id.setter
    def fully_qualified_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fully_qualified_resource_id", value)

    @property
    @pulumi.getter(name="isEnterpriseManaged")
    def is_enterprise_managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Customer resource flag for enterprise management as boolean.
        """
        return pulumi.get(self, "is_enterprise_managed")

    @is_enterprise_managed.setter
    def is_enterprise_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enterprise_managed", value)

    @property
    @pulumi.getter(name="isEntitled")
    def is_entitled(self) -> Optional[pulumi.Input[bool]]:
        """
        Customer resource entitlement flag as boolean.
        """
        return pulumi.get(self, "is_entitled")

    @is_entitled.setter
    def is_entitled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_entitled", value)

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[pulumi.Input[int]]:
        """
        Customer resource Mcc release version.
        """
        return pulumi.get(self, "release_version")

    @release_version.setter
    def release_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_version", value)

    @property
    @pulumi.getter(name="resendSignupCode")
    def resend_signup_code(self) -> Optional[pulumi.Input[bool]]:
        """
        Customer resource flag for resending signup code as boolean.
        """
        return pulumi.get(self, "resend_signup_code")

    @resend_signup_code.setter
    def resend_signup_code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resend_signup_code", value)

    @property
    @pulumi.getter(name="shouldMigrate")
    def should_migrate(self) -> Optional[pulumi.Input[bool]]:
        """
        Customer resource flag for migration.
        """
        return pulumi.get(self, "should_migrate")

    @should_migrate.setter
    def should_migrate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_migrate", value)

    @property
    @pulumi.getter(name="verifySignupCode")
    def verify_signup_code(self) -> Optional[pulumi.Input[bool]]:
        """
        Customer resource flag for requiring verification of signup code as boolean.
        """
        return pulumi.get(self, "verify_signup_code")

    @verify_signup_code.setter
    def verify_signup_code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_signup_code", value)

    @property
    @pulumi.getter(name="verifySignupPhrase")
    def verify_signup_phrase(self) -> Optional[pulumi.Input[str]]:
        """
        Customer resource phrase for verifying signup.
        """
        return pulumi.get(self, "verify_signup_phrase")

    @verify_signup_phrase.setter
    def verify_signup_phrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_signup_phrase", value)


if not MYPY:
    class CustomerPropertyArgsDict(TypedDict):
        """
        Model representing customer for connectedCache resource
        """
        additional_customer_properties: NotRequired[pulumi.Input['AdditionalCustomerPropertiesArgsDict']]
        """
        Mcc customer resource additional properties.
        """
        customer: NotRequired[pulumi.Input['CustomerEntityArgsDict']]
        """
        Mcc customer resource (customer entity).
        """
elif False:
    CustomerPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomerPropertyArgs:
    def __init__(__self__, *,
                 additional_customer_properties: Optional[pulumi.Input['AdditionalCustomerPropertiesArgs']] = None,
                 customer: Optional[pulumi.Input['CustomerEntityArgs']] = None):
        """
        Model representing customer for connectedCache resource
        :param pulumi.Input['AdditionalCustomerPropertiesArgs'] additional_customer_properties: Mcc customer resource additional properties.
        :param pulumi.Input['CustomerEntityArgs'] customer: Mcc customer resource (customer entity).
        """
        if additional_customer_properties is not None:
            pulumi.set(__self__, "additional_customer_properties", additional_customer_properties)
        if customer is not None:
            pulumi.set(__self__, "customer", customer)

    @property
    @pulumi.getter(name="additionalCustomerProperties")
    def additional_customer_properties(self) -> Optional[pulumi.Input['AdditionalCustomerPropertiesArgs']]:
        """
        Mcc customer resource additional properties.
        """
        return pulumi.get(self, "additional_customer_properties")

    @additional_customer_properties.setter
    def additional_customer_properties(self, value: Optional[pulumi.Input['AdditionalCustomerPropertiesArgs']]):
        pulumi.set(self, "additional_customer_properties", value)

    @property
    @pulumi.getter
    def customer(self) -> Optional[pulumi.Input['CustomerEntityArgs']]:
        """
        Mcc customer resource (customer entity).
        """
        return pulumi.get(self, "customer")

    @customer.setter
    def customer(self, value: Optional[pulumi.Input['CustomerEntityArgs']]):
        pulumi.set(self, "customer", value)


if not MYPY:
    class ProxyUrlConfigurationArgsDict(TypedDict):
        """
        ProxyUrl configuration of cache node
        """
        proxy_url: NotRequired[pulumi.Input[str]]
        """
        Host Proxy Address configuration along with port number. This can be a proxy or ip address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80
        """
elif False:
    ProxyUrlConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProxyUrlConfigurationArgs:
    def __init__(__self__, *,
                 proxy_url: Optional[pulumi.Input[str]] = None):
        """
        ProxyUrl configuration of cache node
        :param pulumi.Input[str] proxy_url: Host Proxy Address configuration along with port number. This can be a proxy or ip address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80
        """
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Host Proxy Address configuration along with port number. This can be a proxy or ip address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)


