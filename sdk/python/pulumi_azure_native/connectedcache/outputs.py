# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdditionalCacheNodePropertiesResponse',
    'AdditionalCustomerPropertiesResponse',
    'BgpCidrsConfigurationResponse',
    'BgpConfigurationResponse',
    'CacheNodeDriveConfigurationResponse',
    'CacheNodeEntityResponse',
    'CacheNodeInstallPropertiesResponse',
    'CacheNodeOldResponseResponse',
    'CacheNodePropertyResponse',
    'CustomerEntityResponse',
    'CustomerPropertyResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'MccCacheNodeAutoUpdateHistoryPropertiesResponse',
    'MccCacheNodeAutoUpdateInfoResponse',
    'MccCacheNodeIssueHistoryPropertiesResponse',
    'MccCacheNodeTlsCertificatePropertiesResponse',
    'MccCacheNodeTlsCertificateResponse',
    'MccIssueResponse',
    'ProxyUrlConfigurationResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AdditionalCacheNodePropertiesResponse(dict):
    """
    Model representing cache node for connected cache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatedStatusCode":
            suggest = "aggregated_status_code"
        elif key == "aggregatedStatusDetails":
            suggest = "aggregated_status_details"
        elif key == "aggregatedStatusText":
            suggest = "aggregated_status_text"
        elif key == "autoUpdateAppliedVersion":
            suggest = "auto_update_applied_version"
        elif key == "autoUpdateLastAppliedDateTime":
            suggest = "auto_update_last_applied_date_time"
        elif key == "autoUpdateLastAppliedDetails":
            suggest = "auto_update_last_applied_details"
        elif key == "autoUpdateLastAppliedState":
            suggest = "auto_update_last_applied_state"
        elif key == "autoUpdateLastTriggeredDateTime":
            suggest = "auto_update_last_triggered_date_time"
        elif key == "autoUpdateNextAvailableDateTime":
            suggest = "auto_update_next_available_date_time"
        elif key == "autoUpdateNextAvailableVersion":
            suggest = "auto_update_next_available_version"
        elif key == "cacheNodeState":
            suggest = "cache_node_state"
        elif key == "cacheNodeStateDetailedText":
            suggest = "cache_node_state_detailed_text"
        elif key == "cacheNodeStateShortText":
            suggest = "cache_node_state_short_text"
        elif key == "isProvisioned":
            suggest = "is_provisioned"
        elif key == "productVersion":
            suggest = "product_version"
        elif key == "autoUpdateVersion":
            suggest = "auto_update_version"
        elif key == "bgpConfiguration":
            suggest = "bgp_configuration"
        elif key == "cacheNodePropertiesDetailsIssuesList":
            suggest = "cache_node_properties_details_issues_list"
        elif key == "driveConfiguration":
            suggest = "drive_configuration"
        elif key == "isProxyRequired":
            suggest = "is_proxy_required"
        elif key == "optionalProperty1":
            suggest = "optional_property1"
        elif key == "optionalProperty2":
            suggest = "optional_property2"
        elif key == "optionalProperty3":
            suggest = "optional_property3"
        elif key == "optionalProperty4":
            suggest = "optional_property4"
        elif key == "optionalProperty5":
            suggest = "optional_property5"
        elif key == "osType":
            suggest = "os_type"
        elif key == "proxyUrl":
            suggest = "proxy_url"
        elif key == "proxyUrlConfiguration":
            suggest = "proxy_url_configuration"
        elif key == "updateCycleType":
            suggest = "update_cycle_type"
        elif key == "updateInfoDetails":
            suggest = "update_info_details"
        elif key == "updateRequestedDateTime":
            suggest = "update_requested_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdditionalCacheNodePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdditionalCacheNodePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdditionalCacheNodePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregated_status_code: _builtins.int,
                 aggregated_status_details: _builtins.str,
                 aggregated_status_text: _builtins.str,
                 auto_update_applied_version: _builtins.str,
                 auto_update_last_applied_date_time: _builtins.str,
                 auto_update_last_applied_details: _builtins.str,
                 auto_update_last_applied_state: _builtins.str,
                 auto_update_last_triggered_date_time: _builtins.str,
                 auto_update_next_available_date_time: _builtins.str,
                 auto_update_next_available_version: _builtins.str,
                 cache_node_state: _builtins.int,
                 cache_node_state_detailed_text: _builtins.str,
                 cache_node_state_short_text: _builtins.str,
                 is_provisioned: _builtins.bool,
                 product_version: _builtins.str,
                 auto_update_version: Optional[_builtins.str] = None,
                 bgp_configuration: Optional['outputs.BgpConfigurationResponse'] = None,
                 cache_node_properties_details_issues_list: Optional[Sequence[_builtins.str]] = None,
                 drive_configuration: Optional[Sequence['outputs.CacheNodeDriveConfigurationResponse']] = None,
                 is_proxy_required: Optional[_builtins.str] = None,
                 optional_property1: Optional[_builtins.str] = None,
                 optional_property2: Optional[_builtins.str] = None,
                 optional_property3: Optional[_builtins.str] = None,
                 optional_property4: Optional[_builtins.str] = None,
                 optional_property5: Optional[_builtins.str] = None,
                 os_type: Optional[_builtins.str] = None,
                 proxy_url: Optional[_builtins.str] = None,
                 proxy_url_configuration: Optional['outputs.ProxyUrlConfigurationResponse'] = None,
                 update_cycle_type: Optional[_builtins.str] = None,
                 update_info_details: Optional[_builtins.str] = None,
                 update_requested_date_time: Optional[_builtins.str] = None):
        """
        Model representing cache node for connected cache resource
        :param _builtins.int aggregated_status_code: Cache node resource aggregated status code.
        :param _builtins.str aggregated_status_details: Cache node resource aggregated status details.
        :param _builtins.str aggregated_status_text: Cache node resource aggregated status text.
        :param _builtins.str auto_update_applied_version: Auto update version that is the applied to update on mcc cache node
        :param _builtins.str auto_update_last_applied_date_time: Auto update last applied date time of mcc install
        :param _builtins.str auto_update_last_applied_details: Auto Update status details from the backend after applying the new version details
        :param _builtins.str auto_update_last_applied_state: Last applied auto update state for mcc install of auto update cycle
        :param _builtins.str auto_update_last_triggered_date_time: Auto update last triggered date time of mcc install
        :param _builtins.str auto_update_next_available_date_time: Auto update last applied date time of mcc install
        :param _builtins.str auto_update_next_available_version: Auto update version that is the Next available version to update on mcc cache node
        :param _builtins.int cache_node_state: Cache node resource state as integer.
        :param _builtins.str cache_node_state_detailed_text: Cache node resource detailed state text.
        :param _builtins.str cache_node_state_short_text: Cache node resource short state text.
        :param _builtins.bool is_provisioned: Cache node resource flag indicating if cache node has been physically installed or provisioned on their physical lab.
        :param _builtins.str product_version: Cache node resource Mcc product version.
        :param _builtins.str auto_update_version: Auto update or fast update version
        :param 'BgpConfigurationResponse' bgp_configuration: Cache node resource Bgp configuration.
        :param Sequence[_builtins.str] cache_node_properties_details_issues_list: issues list to return the issues as part of the additional cache node properties
        :param Sequence['CacheNodeDriveConfigurationResponse'] drive_configuration: Cache node resource drive configurations.
        :param _builtins.str is_proxy_required: Cache node resource requires a proxy
        :param _builtins.str optional_property1: Optional property #1 of Mcc response object
        :param _builtins.str optional_property2: Optional property #2 of Mcc response object
        :param _builtins.str optional_property3: Optional property #3 of Mcc response object
        :param _builtins.str optional_property4: Optional property #4 of Mcc response object
        :param _builtins.str optional_property5: Optional property #5 of Mcc response object
        :param _builtins.str os_type: Operating system of the cache node
        :param _builtins.str proxy_url: Cache node resource Mcc proxy Url
        :param 'ProxyUrlConfigurationResponse' proxy_url_configuration: proxyUrl configuration of the cache node
        :param _builtins.str update_cycle_type: Update Cycle Type
        :param _builtins.str update_info_details: Update related information details
        :param _builtins.str update_requested_date_time: customer requested date time for mcc install of update cycle
        """
        pulumi.set(__self__, "aggregated_status_code", aggregated_status_code)
        pulumi.set(__self__, "aggregated_status_details", aggregated_status_details)
        pulumi.set(__self__, "aggregated_status_text", aggregated_status_text)
        pulumi.set(__self__, "auto_update_applied_version", auto_update_applied_version)
        pulumi.set(__self__, "auto_update_last_applied_date_time", auto_update_last_applied_date_time)
        pulumi.set(__self__, "auto_update_last_applied_details", auto_update_last_applied_details)
        pulumi.set(__self__, "auto_update_last_applied_state", auto_update_last_applied_state)
        pulumi.set(__self__, "auto_update_last_triggered_date_time", auto_update_last_triggered_date_time)
        pulumi.set(__self__, "auto_update_next_available_date_time", auto_update_next_available_date_time)
        pulumi.set(__self__, "auto_update_next_available_version", auto_update_next_available_version)
        pulumi.set(__self__, "cache_node_state", cache_node_state)
        pulumi.set(__self__, "cache_node_state_detailed_text", cache_node_state_detailed_text)
        pulumi.set(__self__, "cache_node_state_short_text", cache_node_state_short_text)
        pulumi.set(__self__, "is_provisioned", is_provisioned)
        pulumi.set(__self__, "product_version", product_version)
        if auto_update_version is not None:
            pulumi.set(__self__, "auto_update_version", auto_update_version)
        if bgp_configuration is not None:
            pulumi.set(__self__, "bgp_configuration", bgp_configuration)
        if cache_node_properties_details_issues_list is not None:
            pulumi.set(__self__, "cache_node_properties_details_issues_list", cache_node_properties_details_issues_list)
        if drive_configuration is not None:
            pulumi.set(__self__, "drive_configuration", drive_configuration)
        if is_proxy_required is not None:
            pulumi.set(__self__, "is_proxy_required", is_proxy_required)
        if optional_property1 is not None:
            pulumi.set(__self__, "optional_property1", optional_property1)
        if optional_property2 is not None:
            pulumi.set(__self__, "optional_property2", optional_property2)
        if optional_property3 is not None:
            pulumi.set(__self__, "optional_property3", optional_property3)
        if optional_property4 is not None:
            pulumi.set(__self__, "optional_property4", optional_property4)
        if optional_property5 is not None:
            pulumi.set(__self__, "optional_property5", optional_property5)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if proxy_url_configuration is not None:
            pulumi.set(__self__, "proxy_url_configuration", proxy_url_configuration)
        if update_cycle_type is not None:
            pulumi.set(__self__, "update_cycle_type", update_cycle_type)
        if update_info_details is not None:
            pulumi.set(__self__, "update_info_details", update_info_details)
        if update_requested_date_time is not None:
            pulumi.set(__self__, "update_requested_date_time", update_requested_date_time)

    @_builtins.property
    @pulumi.getter(name="aggregatedStatusCode")
    def aggregated_status_code(self) -> _builtins.int:
        """
        Cache node resource aggregated status code.
        """
        return pulumi.get(self, "aggregated_status_code")

    @_builtins.property
    @pulumi.getter(name="aggregatedStatusDetails")
    def aggregated_status_details(self) -> _builtins.str:
        """
        Cache node resource aggregated status details.
        """
        return pulumi.get(self, "aggregated_status_details")

    @_builtins.property
    @pulumi.getter(name="aggregatedStatusText")
    def aggregated_status_text(self) -> _builtins.str:
        """
        Cache node resource aggregated status text.
        """
        return pulumi.get(self, "aggregated_status_text")

    @_builtins.property
    @pulumi.getter(name="autoUpdateAppliedVersion")
    def auto_update_applied_version(self) -> _builtins.str:
        """
        Auto update version that is the applied to update on mcc cache node
        """
        return pulumi.get(self, "auto_update_applied_version")

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastAppliedDateTime")
    def auto_update_last_applied_date_time(self) -> _builtins.str:
        """
        Auto update last applied date time of mcc install
        """
        return pulumi.get(self, "auto_update_last_applied_date_time")

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastAppliedDetails")
    def auto_update_last_applied_details(self) -> _builtins.str:
        """
        Auto Update status details from the backend after applying the new version details
        """
        return pulumi.get(self, "auto_update_last_applied_details")

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastAppliedState")
    def auto_update_last_applied_state(self) -> _builtins.str:
        """
        Last applied auto update state for mcc install of auto update cycle
        """
        return pulumi.get(self, "auto_update_last_applied_state")

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastTriggeredDateTime")
    def auto_update_last_triggered_date_time(self) -> _builtins.str:
        """
        Auto update last triggered date time of mcc install
        """
        return pulumi.get(self, "auto_update_last_triggered_date_time")

    @_builtins.property
    @pulumi.getter(name="autoUpdateNextAvailableDateTime")
    def auto_update_next_available_date_time(self) -> _builtins.str:
        """
        Auto update last applied date time of mcc install
        """
        return pulumi.get(self, "auto_update_next_available_date_time")

    @_builtins.property
    @pulumi.getter(name="autoUpdateNextAvailableVersion")
    def auto_update_next_available_version(self) -> _builtins.str:
        """
        Auto update version that is the Next available version to update on mcc cache node
        """
        return pulumi.get(self, "auto_update_next_available_version")

    @_builtins.property
    @pulumi.getter(name="cacheNodeState")
    def cache_node_state(self) -> _builtins.int:
        """
        Cache node resource state as integer.
        """
        return pulumi.get(self, "cache_node_state")

    @_builtins.property
    @pulumi.getter(name="cacheNodeStateDetailedText")
    def cache_node_state_detailed_text(self) -> _builtins.str:
        """
        Cache node resource detailed state text.
        """
        return pulumi.get(self, "cache_node_state_detailed_text")

    @_builtins.property
    @pulumi.getter(name="cacheNodeStateShortText")
    def cache_node_state_short_text(self) -> _builtins.str:
        """
        Cache node resource short state text.
        """
        return pulumi.get(self, "cache_node_state_short_text")

    @_builtins.property
    @pulumi.getter(name="isProvisioned")
    def is_provisioned(self) -> _builtins.bool:
        """
        Cache node resource flag indicating if cache node has been physically installed or provisioned on their physical lab.
        """
        return pulumi.get(self, "is_provisioned")

    @_builtins.property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> _builtins.str:
        """
        Cache node resource Mcc product version.
        """
        return pulumi.get(self, "product_version")

    @_builtins.property
    @pulumi.getter(name="autoUpdateVersion")
    def auto_update_version(self) -> Optional[_builtins.str]:
        """
        Auto update or fast update version
        """
        return pulumi.get(self, "auto_update_version")

    @_builtins.property
    @pulumi.getter(name="bgpConfiguration")
    def bgp_configuration(self) -> Optional['outputs.BgpConfigurationResponse']:
        """
        Cache node resource Bgp configuration.
        """
        return pulumi.get(self, "bgp_configuration")

    @_builtins.property
    @pulumi.getter(name="cacheNodePropertiesDetailsIssuesList")
    def cache_node_properties_details_issues_list(self) -> Optional[Sequence[_builtins.str]]:
        """
        issues list to return the issues as part of the additional cache node properties
        """
        return pulumi.get(self, "cache_node_properties_details_issues_list")

    @_builtins.property
    @pulumi.getter(name="driveConfiguration")
    def drive_configuration(self) -> Optional[Sequence['outputs.CacheNodeDriveConfigurationResponse']]:
        """
        Cache node resource drive configurations.
        """
        return pulumi.get(self, "drive_configuration")

    @_builtins.property
    @pulumi.getter(name="isProxyRequired")
    def is_proxy_required(self) -> Optional[_builtins.str]:
        """
        Cache node resource requires a proxy
        """
        return pulumi.get(self, "is_proxy_required")

    @_builtins.property
    @pulumi.getter(name="optionalProperty1")
    def optional_property1(self) -> Optional[_builtins.str]:
        """
        Optional property #1 of Mcc response object
        """
        return pulumi.get(self, "optional_property1")

    @_builtins.property
    @pulumi.getter(name="optionalProperty2")
    def optional_property2(self) -> Optional[_builtins.str]:
        """
        Optional property #2 of Mcc response object
        """
        return pulumi.get(self, "optional_property2")

    @_builtins.property
    @pulumi.getter(name="optionalProperty3")
    def optional_property3(self) -> Optional[_builtins.str]:
        """
        Optional property #3 of Mcc response object
        """
        return pulumi.get(self, "optional_property3")

    @_builtins.property
    @pulumi.getter(name="optionalProperty4")
    def optional_property4(self) -> Optional[_builtins.str]:
        """
        Optional property #4 of Mcc response object
        """
        return pulumi.get(self, "optional_property4")

    @_builtins.property
    @pulumi.getter(name="optionalProperty5")
    def optional_property5(self) -> Optional[_builtins.str]:
        """
        Optional property #5 of Mcc response object
        """
        return pulumi.get(self, "optional_property5")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[_builtins.str]:
        """
        Operating system of the cache node
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[_builtins.str]:
        """
        Cache node resource Mcc proxy Url
        """
        return pulumi.get(self, "proxy_url")

    @_builtins.property
    @pulumi.getter(name="proxyUrlConfiguration")
    def proxy_url_configuration(self) -> Optional['outputs.ProxyUrlConfigurationResponse']:
        """
        proxyUrl configuration of the cache node
        """
        return pulumi.get(self, "proxy_url_configuration")

    @_builtins.property
    @pulumi.getter(name="updateCycleType")
    def update_cycle_type(self) -> Optional[_builtins.str]:
        """
        Update Cycle Type
        """
        return pulumi.get(self, "update_cycle_type")

    @_builtins.property
    @pulumi.getter(name="updateInfoDetails")
    def update_info_details(self) -> Optional[_builtins.str]:
        """
        Update related information details
        """
        return pulumi.get(self, "update_info_details")

    @_builtins.property
    @pulumi.getter(name="updateRequestedDateTime")
    def update_requested_date_time(self) -> Optional[_builtins.str]:
        """
        customer requested date time for mcc install of update cycle
        """
        return pulumi.get(self, "update_requested_date_time")


@pulumi.output_type
class AdditionalCustomerPropertiesResponse(dict):
    """
    Model representing customer for connected cache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerAsnEstimatedEgressPeekGbps":
            suggest = "customer_asn_estimated_egress_peek_gbps"
        elif key == "customerOrgName":
            suggest = "customer_org_name"
        elif key == "customerPropertiesOverviewAverageEgressMbps":
            suggest = "customer_properties_overview_average_egress_mbps"
        elif key == "customerPropertiesOverviewAverageMissMbps":
            suggest = "customer_properties_overview_average_miss_mbps"
        elif key == "customerPropertiesOverviewCacheEfficiency":
            suggest = "customer_properties_overview_cache_efficiency"
        elif key == "customerPropertiesOverviewCacheNodesHealthyCount":
            suggest = "customer_properties_overview_cache_nodes_healthy_count"
        elif key == "customerPropertiesOverviewCacheNodesUnhealthyCount":
            suggest = "customer_properties_overview_cache_nodes_unhealthy_count"
        elif key == "customerPropertiesOverviewEgressMbpsMax":
            suggest = "customer_properties_overview_egress_mbps_max"
        elif key == "customerPropertiesOverviewEgressMbpsMaxDateTime":
            suggest = "customer_properties_overview_egress_mbps_max_date_time"
        elif key == "customerPropertiesOverviewMissMbpsMax":
            suggest = "customer_properties_overview_miss_mbps_max"
        elif key == "customerPropertiesOverviewMissMbpsMaxDateTime":
            suggest = "customer_properties_overview_miss_mbps_max_date_time"
        elif key == "peeringDbLastUpdateDate":
            suggest = "peering_db_last_update_date"
        elif key == "peeringDbLastUpdateTime":
            suggest = "peering_db_last_update_time"
        elif key == "signupPhaseStatusCode":
            suggest = "signup_phase_status_code"
        elif key == "signupPhaseStatusText":
            suggest = "signup_phase_status_text"
        elif key == "signupStatus":
            suggest = "signup_status"
        elif key == "signupStatusCode":
            suggest = "signup_status_code"
        elif key == "signupStatusText":
            suggest = "signup_status_text"
        elif key == "customerAsn":
            suggest = "customer_asn"
        elif key == "customerEmail":
            suggest = "customer_email"
        elif key == "customerEntitlementExpiration":
            suggest = "customer_entitlement_expiration"
        elif key == "customerEntitlementSkuGuid":
            suggest = "customer_entitlement_sku_guid"
        elif key == "customerEntitlementSkuId":
            suggest = "customer_entitlement_sku_id"
        elif key == "customerEntitlementSkuName":
            suggest = "customer_entitlement_sku_name"
        elif key == "customerTransitAsn":
            suggest = "customer_transit_asn"
        elif key == "customerTransitState":
            suggest = "customer_transit_state"
        elif key == "optionalProperty1":
            suggest = "optional_property1"
        elif key == "optionalProperty2":
            suggest = "optional_property2"
        elif key == "optionalProperty3":
            suggest = "optional_property3"
        elif key == "optionalProperty4":
            suggest = "optional_property4"
        elif key == "optionalProperty5":
            suggest = "optional_property5"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdditionalCustomerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdditionalCustomerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdditionalCustomerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_asn_estimated_egress_peek_gbps: _builtins.float,
                 customer_org_name: _builtins.str,
                 customer_properties_overview_average_egress_mbps: _builtins.float,
                 customer_properties_overview_average_miss_mbps: _builtins.float,
                 customer_properties_overview_cache_efficiency: _builtins.float,
                 customer_properties_overview_cache_nodes_healthy_count: _builtins.int,
                 customer_properties_overview_cache_nodes_unhealthy_count: _builtins.int,
                 customer_properties_overview_egress_mbps_max: _builtins.float,
                 customer_properties_overview_egress_mbps_max_date_time: _builtins.str,
                 customer_properties_overview_miss_mbps_max: _builtins.float,
                 customer_properties_overview_miss_mbps_max_date_time: _builtins.str,
                 peering_db_last_update_date: _builtins.str,
                 peering_db_last_update_time: _builtins.str,
                 signup_phase_status_code: _builtins.int,
                 signup_phase_status_text: _builtins.str,
                 signup_status: _builtins.bool,
                 signup_status_code: _builtins.int,
                 signup_status_text: _builtins.str,
                 customer_asn: Optional[_builtins.str] = None,
                 customer_email: Optional[_builtins.str] = None,
                 customer_entitlement_expiration: Optional[_builtins.str] = None,
                 customer_entitlement_sku_guid: Optional[_builtins.str] = None,
                 customer_entitlement_sku_id: Optional[_builtins.str] = None,
                 customer_entitlement_sku_name: Optional[_builtins.str] = None,
                 customer_transit_asn: Optional[_builtins.str] = None,
                 customer_transit_state: Optional[_builtins.str] = None,
                 optional_property1: Optional[_builtins.str] = None,
                 optional_property2: Optional[_builtins.str] = None,
                 optional_property3: Optional[_builtins.str] = None,
                 optional_property4: Optional[_builtins.str] = None,
                 optional_property5: Optional[_builtins.str] = None):
        """
        Model representing customer for connected cache resource
        :param _builtins.float customer_asn_estimated_egress_peek_gbps: Customer resource estimated Asn peering peak in Gbps.
        :param _builtins.str customer_org_name: Customer resource owner organization name.
        :param _builtins.float customer_properties_overview_average_egress_mbps: Customer resource average egress in Mbps.
        :param _builtins.float customer_properties_overview_average_miss_mbps: Customer resource average cache miss throughput in Mbps.
        :param _builtins.float customer_properties_overview_cache_efficiency: Customer resource cache efficiency.
        :param _builtins.int customer_properties_overview_cache_nodes_healthy_count: Customer resource total healthy cache nodes.
        :param _builtins.int customer_properties_overview_cache_nodes_unhealthy_count: Customer resource total unhealthy cache nodes.
        :param _builtins.float customer_properties_overview_egress_mbps_max: Customer resource maximum egress in Mbps.
        :param _builtins.str customer_properties_overview_egress_mbps_max_date_time: Customer resource peak egress timestamp.
        :param _builtins.float customer_properties_overview_miss_mbps_max: Customer resource maximum cache miss throughput in Mbps.
        :param _builtins.str customer_properties_overview_miss_mbps_max_date_time: Customer resource peak cache miss throughput timestamp.
        :param _builtins.str peering_db_last_update_date: Customer resource last PeeringDB update timestamp.
        :param _builtins.str peering_db_last_update_time: Customer resource last PeeringDB update timestamp.
        :param _builtins.int signup_phase_status_code: Customer resource signup phase status code as integer.
        :param _builtins.str signup_phase_status_text: Customer resource signup phase status as string text.
        :param _builtins.bool signup_status: Customer resource signup status as boolean.
        :param _builtins.int signup_status_code: Customer resource signup status as integer code.
        :param _builtins.str signup_status_text: Customer resource signup status as string text.
        :param _builtins.str customer_asn: Customer resource Asn (autonomous system number).
        :param _builtins.str customer_email: Customer resource contact email.
        :param _builtins.str customer_entitlement_expiration: Customer resource entitlement expiration date string.
        :param _builtins.str customer_entitlement_sku_guid: Customer resource entitlement Sku Guid.
        :param _builtins.str customer_entitlement_sku_id: Customer resource entitlement Sku Id.
        :param _builtins.str customer_entitlement_sku_name: Customer resource entitlement Sku name.
        :param _builtins.str customer_transit_asn: Customer resource transit Asn (autonomous system number).
        :param _builtins.str customer_transit_state: Customer resource transit state.
        :param _builtins.str optional_property1: Optional property #1 of Mcc response object.
        :param _builtins.str optional_property2: Optional property #2 of Mcc response object.
        :param _builtins.str optional_property3: Optional property #3 of Mcc response object.
        :param _builtins.str optional_property4: Optional property #4 of Mcc response object.
        :param _builtins.str optional_property5: Optional property #5 of Mcc response object.
        """
        pulumi.set(__self__, "customer_asn_estimated_egress_peek_gbps", customer_asn_estimated_egress_peek_gbps)
        pulumi.set(__self__, "customer_org_name", customer_org_name)
        pulumi.set(__self__, "customer_properties_overview_average_egress_mbps", customer_properties_overview_average_egress_mbps)
        pulumi.set(__self__, "customer_properties_overview_average_miss_mbps", customer_properties_overview_average_miss_mbps)
        pulumi.set(__self__, "customer_properties_overview_cache_efficiency", customer_properties_overview_cache_efficiency)
        pulumi.set(__self__, "customer_properties_overview_cache_nodes_healthy_count", customer_properties_overview_cache_nodes_healthy_count)
        pulumi.set(__self__, "customer_properties_overview_cache_nodes_unhealthy_count", customer_properties_overview_cache_nodes_unhealthy_count)
        pulumi.set(__self__, "customer_properties_overview_egress_mbps_max", customer_properties_overview_egress_mbps_max)
        pulumi.set(__self__, "customer_properties_overview_egress_mbps_max_date_time", customer_properties_overview_egress_mbps_max_date_time)
        pulumi.set(__self__, "customer_properties_overview_miss_mbps_max", customer_properties_overview_miss_mbps_max)
        pulumi.set(__self__, "customer_properties_overview_miss_mbps_max_date_time", customer_properties_overview_miss_mbps_max_date_time)
        pulumi.set(__self__, "peering_db_last_update_date", peering_db_last_update_date)
        pulumi.set(__self__, "peering_db_last_update_time", peering_db_last_update_time)
        pulumi.set(__self__, "signup_phase_status_code", signup_phase_status_code)
        pulumi.set(__self__, "signup_phase_status_text", signup_phase_status_text)
        pulumi.set(__self__, "signup_status", signup_status)
        pulumi.set(__self__, "signup_status_code", signup_status_code)
        pulumi.set(__self__, "signup_status_text", signup_status_text)
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if customer_entitlement_expiration is not None:
            pulumi.set(__self__, "customer_entitlement_expiration", customer_entitlement_expiration)
        if customer_entitlement_sku_guid is not None:
            pulumi.set(__self__, "customer_entitlement_sku_guid", customer_entitlement_sku_guid)
        if customer_entitlement_sku_id is not None:
            pulumi.set(__self__, "customer_entitlement_sku_id", customer_entitlement_sku_id)
        if customer_entitlement_sku_name is not None:
            pulumi.set(__self__, "customer_entitlement_sku_name", customer_entitlement_sku_name)
        if customer_transit_asn is not None:
            pulumi.set(__self__, "customer_transit_asn", customer_transit_asn)
        if customer_transit_state is not None:
            pulumi.set(__self__, "customer_transit_state", customer_transit_state)
        if optional_property1 is not None:
            pulumi.set(__self__, "optional_property1", optional_property1)
        if optional_property2 is not None:
            pulumi.set(__self__, "optional_property2", optional_property2)
        if optional_property3 is not None:
            pulumi.set(__self__, "optional_property3", optional_property3)
        if optional_property4 is not None:
            pulumi.set(__self__, "optional_property4", optional_property4)
        if optional_property5 is not None:
            pulumi.set(__self__, "optional_property5", optional_property5)

    @_builtins.property
    @pulumi.getter(name="customerAsnEstimatedEgressPeekGbps")
    def customer_asn_estimated_egress_peek_gbps(self) -> _builtins.float:
        """
        Customer resource estimated Asn peering peak in Gbps.
        """
        return pulumi.get(self, "customer_asn_estimated_egress_peek_gbps")

    @_builtins.property
    @pulumi.getter(name="customerOrgName")
    def customer_org_name(self) -> _builtins.str:
        """
        Customer resource owner organization name.
        """
        return pulumi.get(self, "customer_org_name")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewAverageEgressMbps")
    def customer_properties_overview_average_egress_mbps(self) -> _builtins.float:
        """
        Customer resource average egress in Mbps.
        """
        return pulumi.get(self, "customer_properties_overview_average_egress_mbps")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewAverageMissMbps")
    def customer_properties_overview_average_miss_mbps(self) -> _builtins.float:
        """
        Customer resource average cache miss throughput in Mbps.
        """
        return pulumi.get(self, "customer_properties_overview_average_miss_mbps")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewCacheEfficiency")
    def customer_properties_overview_cache_efficiency(self) -> _builtins.float:
        """
        Customer resource cache efficiency.
        """
        return pulumi.get(self, "customer_properties_overview_cache_efficiency")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewCacheNodesHealthyCount")
    def customer_properties_overview_cache_nodes_healthy_count(self) -> _builtins.int:
        """
        Customer resource total healthy cache nodes.
        """
        return pulumi.get(self, "customer_properties_overview_cache_nodes_healthy_count")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewCacheNodesUnhealthyCount")
    def customer_properties_overview_cache_nodes_unhealthy_count(self) -> _builtins.int:
        """
        Customer resource total unhealthy cache nodes.
        """
        return pulumi.get(self, "customer_properties_overview_cache_nodes_unhealthy_count")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewEgressMbpsMax")
    def customer_properties_overview_egress_mbps_max(self) -> _builtins.float:
        """
        Customer resource maximum egress in Mbps.
        """
        return pulumi.get(self, "customer_properties_overview_egress_mbps_max")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewEgressMbpsMaxDateTime")
    def customer_properties_overview_egress_mbps_max_date_time(self) -> _builtins.str:
        """
        Customer resource peak egress timestamp.
        """
        return pulumi.get(self, "customer_properties_overview_egress_mbps_max_date_time")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewMissMbpsMax")
    def customer_properties_overview_miss_mbps_max(self) -> _builtins.float:
        """
        Customer resource maximum cache miss throughput in Mbps.
        """
        return pulumi.get(self, "customer_properties_overview_miss_mbps_max")

    @_builtins.property
    @pulumi.getter(name="customerPropertiesOverviewMissMbpsMaxDateTime")
    def customer_properties_overview_miss_mbps_max_date_time(self) -> _builtins.str:
        """
        Customer resource peak cache miss throughput timestamp.
        """
        return pulumi.get(self, "customer_properties_overview_miss_mbps_max_date_time")

    @_builtins.property
    @pulumi.getter(name="peeringDbLastUpdateDate")
    def peering_db_last_update_date(self) -> _builtins.str:
        """
        Customer resource last PeeringDB update timestamp.
        """
        return pulumi.get(self, "peering_db_last_update_date")

    @_builtins.property
    @pulumi.getter(name="peeringDbLastUpdateTime")
    def peering_db_last_update_time(self) -> _builtins.str:
        """
        Customer resource last PeeringDB update timestamp.
        """
        return pulumi.get(self, "peering_db_last_update_time")

    @_builtins.property
    @pulumi.getter(name="signupPhaseStatusCode")
    def signup_phase_status_code(self) -> _builtins.int:
        """
        Customer resource signup phase status code as integer.
        """
        return pulumi.get(self, "signup_phase_status_code")

    @_builtins.property
    @pulumi.getter(name="signupPhaseStatusText")
    def signup_phase_status_text(self) -> _builtins.str:
        """
        Customer resource signup phase status as string text.
        """
        return pulumi.get(self, "signup_phase_status_text")

    @_builtins.property
    @pulumi.getter(name="signupStatus")
    def signup_status(self) -> _builtins.bool:
        """
        Customer resource signup status as boolean.
        """
        return pulumi.get(self, "signup_status")

    @_builtins.property
    @pulumi.getter(name="signupStatusCode")
    def signup_status_code(self) -> _builtins.int:
        """
        Customer resource signup status as integer code.
        """
        return pulumi.get(self, "signup_status_code")

    @_builtins.property
    @pulumi.getter(name="signupStatusText")
    def signup_status_text(self) -> _builtins.str:
        """
        Customer resource signup status as string text.
        """
        return pulumi.get(self, "signup_status_text")

    @_builtins.property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[_builtins.str]:
        """
        Customer resource Asn (autonomous system number).
        """
        return pulumi.get(self, "customer_asn")

    @_builtins.property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[_builtins.str]:
        """
        Customer resource contact email.
        """
        return pulumi.get(self, "customer_email")

    @_builtins.property
    @pulumi.getter(name="customerEntitlementExpiration")
    def customer_entitlement_expiration(self) -> Optional[_builtins.str]:
        """
        Customer resource entitlement expiration date string.
        """
        return pulumi.get(self, "customer_entitlement_expiration")

    @_builtins.property
    @pulumi.getter(name="customerEntitlementSkuGuid")
    def customer_entitlement_sku_guid(self) -> Optional[_builtins.str]:
        """
        Customer resource entitlement Sku Guid.
        """
        return pulumi.get(self, "customer_entitlement_sku_guid")

    @_builtins.property
    @pulumi.getter(name="customerEntitlementSkuId")
    def customer_entitlement_sku_id(self) -> Optional[_builtins.str]:
        """
        Customer resource entitlement Sku Id.
        """
        return pulumi.get(self, "customer_entitlement_sku_id")

    @_builtins.property
    @pulumi.getter(name="customerEntitlementSkuName")
    def customer_entitlement_sku_name(self) -> Optional[_builtins.str]:
        """
        Customer resource entitlement Sku name.
        """
        return pulumi.get(self, "customer_entitlement_sku_name")

    @_builtins.property
    @pulumi.getter(name="customerTransitAsn")
    def customer_transit_asn(self) -> Optional[_builtins.str]:
        """
        Customer resource transit Asn (autonomous system number).
        """
        return pulumi.get(self, "customer_transit_asn")

    @_builtins.property
    @pulumi.getter(name="customerTransitState")
    def customer_transit_state(self) -> Optional[_builtins.str]:
        """
        Customer resource transit state.
        """
        return pulumi.get(self, "customer_transit_state")

    @_builtins.property
    @pulumi.getter(name="optionalProperty1")
    def optional_property1(self) -> Optional[_builtins.str]:
        """
        Optional property #1 of Mcc response object.
        """
        return pulumi.get(self, "optional_property1")

    @_builtins.property
    @pulumi.getter(name="optionalProperty2")
    def optional_property2(self) -> Optional[_builtins.str]:
        """
        Optional property #2 of Mcc response object.
        """
        return pulumi.get(self, "optional_property2")

    @_builtins.property
    @pulumi.getter(name="optionalProperty3")
    def optional_property3(self) -> Optional[_builtins.str]:
        """
        Optional property #3 of Mcc response object.
        """
        return pulumi.get(self, "optional_property3")

    @_builtins.property
    @pulumi.getter(name="optionalProperty4")
    def optional_property4(self) -> Optional[_builtins.str]:
        """
        Optional property #4 of Mcc response object.
        """
        return pulumi.get(self, "optional_property4")

    @_builtins.property
    @pulumi.getter(name="optionalProperty5")
    def optional_property5(self) -> Optional[_builtins.str]:
        """
        Optional property #5 of Mcc response object.
        """
        return pulumi.get(self, "optional_property5")


@pulumi.output_type
class BgpCidrsConfigurationResponse(dict):
    """
    Mcc cache node Bgp Cidr details.
    """
    def __init__(__self__, *,
                 bgp_cidrs: Sequence[_builtins.str]):
        """
        Mcc cache node Bgp Cidr details.
        :param Sequence[_builtins.str] bgp_cidrs: Mcc cache node Bgp Cidr details.
        """
        pulumi.set(__self__, "bgp_cidrs", bgp_cidrs)

    @_builtins.property
    @pulumi.getter(name="bgpCidrs")
    def bgp_cidrs(self) -> Sequence[_builtins.str]:
        """
        Mcc cache node Bgp Cidr details.
        """
        return pulumi.get(self, "bgp_cidrs")


@pulumi.output_type
class BgpConfigurationResponse(dict):
    """
    Bgp configuration of cache node
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asnToIpAddressMapping":
            suggest = "asn_to_ip_address_mapping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asn_to_ip_address_mapping: Optional[_builtins.str] = None):
        """
        Bgp configuration of cache node
        :param _builtins.str asn_to_ip_address_mapping: Asn to ip address mapping
        """
        if asn_to_ip_address_mapping is not None:
            pulumi.set(__self__, "asn_to_ip_address_mapping", asn_to_ip_address_mapping)

    @_builtins.property
    @pulumi.getter(name="asnToIpAddressMapping")
    def asn_to_ip_address_mapping(self) -> Optional[_builtins.str]:
        """
        Asn to ip address mapping
        """
        return pulumi.get(self, "asn_to_ip_address_mapping")


@pulumi.output_type
class CacheNodeDriveConfigurationResponse(dict):
    """
    Drive configuration for cache node
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheNumber":
            suggest = "cache_number"
        elif key == "nginxMapping":
            suggest = "nginx_mapping"
        elif key == "physicalPath":
            suggest = "physical_path"
        elif key == "sizeInGb":
            suggest = "size_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CacheNodeDriveConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CacheNodeDriveConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CacheNodeDriveConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_number: Optional[_builtins.int] = None,
                 nginx_mapping: Optional[_builtins.str] = None,
                 physical_path: Optional[_builtins.str] = None,
                 size_in_gb: Optional[_builtins.int] = None):
        """
        Drive configuration for cache node
        :param _builtins.int cache_number: corresponding nginx cache number. Valid cache numbers are 1 - 20
        :param _builtins.str nginx_mapping: full binding for corresponding nginx cache drive
        :param _builtins.str physical_path: physical path location of the folder used for caching content
        :param _builtins.int size_in_gb: physical size of the drive used for caching content
        """
        if cache_number is not None:
            pulumi.set(__self__, "cache_number", cache_number)
        if nginx_mapping is not None:
            pulumi.set(__self__, "nginx_mapping", nginx_mapping)
        if physical_path is not None:
            pulumi.set(__self__, "physical_path", physical_path)
        if size_in_gb is not None:
            pulumi.set(__self__, "size_in_gb", size_in_gb)

    @_builtins.property
    @pulumi.getter(name="cacheNumber")
    def cache_number(self) -> Optional[_builtins.int]:
        """
        corresponding nginx cache number. Valid cache numbers are 1 - 20
        """
        return pulumi.get(self, "cache_number")

    @_builtins.property
    @pulumi.getter(name="nginxMapping")
    def nginx_mapping(self) -> Optional[_builtins.str]:
        """
        full binding for corresponding nginx cache drive
        """
        return pulumi.get(self, "nginx_mapping")

    @_builtins.property
    @pulumi.getter(name="physicalPath")
    def physical_path(self) -> Optional[_builtins.str]:
        """
        physical path location of the folder used for caching content
        """
        return pulumi.get(self, "physical_path")

    @_builtins.property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> Optional[_builtins.int]:
        """
        physical size of the drive used for caching content
        """
        return pulumi.get(self, "size_in_gb")


@pulumi.output_type
class CacheNodeEntityResponse(dict):
    """
    Model representing Cache Node for ConnectedCache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressSpace":
            suggest = "address_space"
        elif key == "bgpAddressSpace":
            suggest = "bgp_address_space"
        elif key == "bgpCidrBlocksCount":
            suggest = "bgp_cidr_blocks_count"
        elif key == "bgpCidrCsvLastUpdateTime":
            suggest = "bgp_cidr_csv_last_update_time"
        elif key == "bgpFileBytesTruncated":
            suggest = "bgp_file_bytes_truncated"
        elif key == "bgpLastReportedTime":
            suggest = "bgp_last_reported_time"
        elif key == "bgpNumberOfRecords":
            suggest = "bgp_number_of_records"
        elif key == "bgpNumberOfTimesUpdated":
            suggest = "bgp_number_of_times_updated"
        elif key == "bgpReviewFeedback":
            suggest = "bgp_review_feedback"
        elif key == "bgpReviewState":
            suggest = "bgp_review_state"
        elif key == "bgpReviewStateText":
            suggest = "bgp_review_state_text"
        elif key == "cidrCsvLastUpdateTime":
            suggest = "cidr_csv_last_update_time"
        elif key == "clientTenantId":
            suggest = "client_tenant_id"
        elif key == "configurationState":
            suggest = "configuration_state"
        elif key == "configurationStateText":
            suggest = "configuration_state_text"
        elif key == "containerConfigurations":
            suggest = "container_configurations"
        elif key == "containerResyncTrigger":
            suggest = "container_resync_trigger"
        elif key == "createAsyncOperationId":
            suggest = "create_async_operation_id"
        elif key == "customerId":
            suggest = "customer_id"
        elif key == "deleteAsyncOperationId":
            suggest = "delete_async_operation_id"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "isFrozen":
            suggest = "is_frozen"
        elif key == "lastSyncWithAzureTimestamp":
            suggest = "last_sync_with_azure_timestamp"
        elif key == "lastUpdatedTimestamp":
            suggest = "last_updated_timestamp"
        elif key == "maxAllowableProbability":
            suggest = "max_allowable_probability"
        elif key == "releaseVersion":
            suggest = "release_version"
        elif key == "reviewFeedback":
            suggest = "review_feedback"
        elif key == "reviewState":
            suggest = "review_state"
        elif key == "reviewStateText":
            suggest = "review_state_text"
        elif key == "synchWithAzureAttemptsCount":
            suggest = "synch_with_azure_attempts_count"
        elif key == "workerConnections":
            suggest = "worker_connections"
        elif key == "workerConnectionsLastUpdatedDateTime":
            suggest = "worker_connections_last_updated_date_time"
        elif key == "xCid":
            suggest = "x_cid"
        elif key == "autoUpdateRequestedDay":
            suggest = "auto_update_requested_day"
        elif key == "autoUpdateRequestedTime":
            suggest = "auto_update_requested_time"
        elif key == "autoUpdateRequestedWeek":
            suggest = "auto_update_requested_week"
        elif key == "autoUpdateRingType":
            suggest = "auto_update_ring_type"
        elif key == "cacheNodeId":
            suggest = "cache_node_id"
        elif key == "cacheNodeName":
            suggest = "cache_node_name"
        elif key == "cidrCsv":
            suggest = "cidr_csv"
        elif key == "cidrSelectionType":
            suggest = "cidr_selection_type"
        elif key == "customerAsn":
            suggest = "customer_asn"
        elif key == "customerIndex":
            suggest = "customer_index"
        elif key == "customerName":
            suggest = "customer_name"
        elif key == "fullyQualifiedDomainName":
            suggest = "fully_qualified_domain_name"
        elif key == "fullyQualifiedResourceId":
            suggest = "fully_qualified_resource_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isEnterpriseManaged":
            suggest = "is_enterprise_managed"
        elif key == "maxAllowableEgressInMbps":
            suggest = "max_allowable_egress_in_mbps"
        elif key == "shouldMigrate":
            suggest = "should_migrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CacheNodeEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CacheNodeEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CacheNodeEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_space: _builtins.int,
                 bgp_address_space: _builtins.int,
                 bgp_cidr_blocks_count: _builtins.int,
                 bgp_cidr_csv_last_update_time: _builtins.str,
                 bgp_file_bytes_truncated: _builtins.int,
                 bgp_last_reported_time: _builtins.str,
                 bgp_number_of_records: _builtins.int,
                 bgp_number_of_times_updated: _builtins.int,
                 bgp_review_feedback: _builtins.str,
                 bgp_review_state: _builtins.str,
                 bgp_review_state_text: _builtins.str,
                 category: _builtins.str,
                 cidr_csv_last_update_time: _builtins.str,
                 client_tenant_id: _builtins.str,
                 configuration_state: _builtins.str,
                 configuration_state_text: _builtins.str,
                 container_configurations: _builtins.str,
                 container_resync_trigger: _builtins.int,
                 create_async_operation_id: _builtins.str,
                 customer_id: _builtins.str,
                 delete_async_operation_id: _builtins.str,
                 image_uri: _builtins.str,
                 is_frozen: _builtins.bool,
                 last_sync_with_azure_timestamp: _builtins.str,
                 last_updated_timestamp: _builtins.str,
                 max_allowable_probability: _builtins.float,
                 release_version: _builtins.int,
                 review_feedback: _builtins.str,
                 review_state: _builtins.int,
                 review_state_text: _builtins.str,
                 synch_with_azure_attempts_count: _builtins.int,
                 worker_connections: _builtins.int,
                 worker_connections_last_updated_date_time: _builtins.str,
                 x_cid: _builtins.str,
                 auto_update_requested_day: Optional[_builtins.int] = None,
                 auto_update_requested_time: Optional[_builtins.str] = None,
                 auto_update_requested_week: Optional[_builtins.int] = None,
                 auto_update_ring_type: Optional[_builtins.str] = None,
                 cache_node_id: Optional[_builtins.str] = None,
                 cache_node_name: Optional[_builtins.str] = None,
                 cidr_csv: Optional[Sequence[_builtins.str]] = None,
                 cidr_selection_type: Optional[_builtins.int] = None,
                 customer_asn: Optional[_builtins.int] = None,
                 customer_index: Optional[_builtins.str] = None,
                 customer_name: Optional[_builtins.str] = None,
                 fully_qualified_domain_name: Optional[_builtins.str] = None,
                 fully_qualified_resource_id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 is_enabled: Optional[_builtins.bool] = None,
                 is_enterprise_managed: Optional[_builtins.bool] = None,
                 max_allowable_egress_in_mbps: Optional[_builtins.int] = None,
                 should_migrate: Optional[_builtins.bool] = None):
        """
        Model representing Cache Node for ConnectedCache resource
        :param _builtins.int address_space: Cache node resource total addressable space defined by the Cidr Csv block.
        :param _builtins.int bgp_address_space: Cache node resource total addressable space defined by Bgp and Cidr Csv blocks.
        :param _builtins.int bgp_cidr_blocks_count: Cache node resource Bgp block count.
        :param _builtins.str bgp_cidr_csv_last_update_time: Cache node resource last Bgp Cidr Csv update timestamp
        :param _builtins.int bgp_file_bytes_truncated: Cache node resource bytes truncated from Bgp output file.
        :param _builtins.str bgp_last_reported_time: Cache node resource last Bgp report timestamp.
        :param _builtins.int bgp_number_of_records: Cache node resource Bgp record count.
        :param _builtins.int bgp_number_of_times_updated: Cache node resource Bgp update count.
        :param _builtins.str bgp_review_feedback: Cache node resource Bgp review feedback text.
        :param _builtins.str bgp_review_state: Cache node resource Bgp review state string text.
        :param _builtins.str bgp_review_state_text: Cache node resource Bgp review state string text in detail.
        :param _builtins.str category: Cache node resource category.
        :param _builtins.str cidr_csv_last_update_time: Cache node resource last Cidr Csv update timestamp
        :param _builtins.str client_tenant_id: Cache node resource customer resource client tenant Id of subscription.
        :param _builtins.str configuration_state: Cache node resource configuration state.
        :param _builtins.str configuration_state_text: Cache node resource configuration state text.
        :param _builtins.str container_configurations: Cache node resource container configuration details.
        :param _builtins.int container_resync_trigger: Cache node resource Mcc container configuration details re-sync trigger.
        :param _builtins.str create_async_operation_id: Cache node resource create async operation Id.
        :param _builtins.str customer_id: Cache node resource customer resource GUID Id.
        :param _builtins.str delete_async_operation_id: Cache node resource deletion async operation Id.
        :param _builtins.str image_uri: Cache node resource Mcc Container Id Uri.
        :param _builtins.bool is_frozen: Cache node resource flag for indicating the cache node resource is frozen (not selectable, not editable in UI).
        :param _builtins.str last_sync_with_azure_timestamp: Cache node resource last sync timestamp.
        :param _builtins.str last_updated_timestamp: Cache node resource last backend updated timestamp.
        :param _builtins.float max_allowable_probability: Cache node resource maximum allowed probability of egress.
        :param _builtins.int release_version: Cache node resource release version.
        :param _builtins.str review_feedback: Cache node resource review feedback text.
        :param _builtins.int review_state: Cache node resource review process state as integer
        :param _builtins.str review_state_text: Cache node resource review state text.
        :param _builtins.int synch_with_azure_attempts_count: Cache node resource attempts to sync with Azure.
        :param _builtins.int worker_connections: Cache node resource Mcc container deployment worker connection count.
        :param _builtins.str worker_connections_last_updated_date_time: Cache node resource last updated Mcc container deployment worker connection count timestamp.
        :param _builtins.str x_cid: Cache node resource Azure XCid.
        :param _builtins.int auto_update_requested_day: Customer requested day of week for mcc install of auto update cycle. 0 is default no selection. 1-7 are days of week, 1 is Sunday, 2 is Monday, etc.
        :param _builtins.str auto_update_requested_time: Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
        :param _builtins.int auto_update_requested_week: Customer requested week of month for mcc install of auto update cycle. 0 is default no selection. 1-5 are valid weeks of month, 1 is first week, 2 is second week, etc.
        :param _builtins.str auto_update_ring_type: Auto Update Ring Type which is slow or fast etc.
        :param _builtins.str cache_node_id: Cache node resource identifier of the cache node
        :param _builtins.str cache_node_name: Cache node resource name.
        :param Sequence[_builtins.str] cidr_csv: Cache node resource comma separated values of Cidrs.
        :param _builtins.int cidr_selection_type: Cache node resource current Cidr range precedence selection type.
        :param _builtins.int customer_asn: Cache node resource customer resource Asn (autonomous system number)
        :param _builtins.str customer_index: Cache node resource customer index as string.
        :param _builtins.str customer_name: Cache node resource customer resource name.
        :param _builtins.str fully_qualified_domain_name: FQDN(fully qualified domain name) value of the mcc cache node
        :param _builtins.str fully_qualified_resource_id: Cache node resource Azure fully qualified resource Id.
        :param _builtins.str ip_address: Cache node resource Ip address.
        :param _builtins.bool is_enabled: Cache node resource flag for indicating if cache node is enabled.
        :param _builtins.bool is_enterprise_managed: Cache node resource flag for determining if managed by enterprise as boolean.
        :param _builtins.int max_allowable_egress_in_mbps: Cache node resource maximum allowed egress in Mbps.
        :param _builtins.bool should_migrate: Cache node resource flag for determining if customer will be migrated.
        """
        pulumi.set(__self__, "address_space", address_space)
        pulumi.set(__self__, "bgp_address_space", bgp_address_space)
        pulumi.set(__self__, "bgp_cidr_blocks_count", bgp_cidr_blocks_count)
        pulumi.set(__self__, "bgp_cidr_csv_last_update_time", bgp_cidr_csv_last_update_time)
        pulumi.set(__self__, "bgp_file_bytes_truncated", bgp_file_bytes_truncated)
        pulumi.set(__self__, "bgp_last_reported_time", bgp_last_reported_time)
        pulumi.set(__self__, "bgp_number_of_records", bgp_number_of_records)
        pulumi.set(__self__, "bgp_number_of_times_updated", bgp_number_of_times_updated)
        pulumi.set(__self__, "bgp_review_feedback", bgp_review_feedback)
        pulumi.set(__self__, "bgp_review_state", bgp_review_state)
        pulumi.set(__self__, "bgp_review_state_text", bgp_review_state_text)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cidr_csv_last_update_time", cidr_csv_last_update_time)
        pulumi.set(__self__, "client_tenant_id", client_tenant_id)
        pulumi.set(__self__, "configuration_state", configuration_state)
        pulumi.set(__self__, "configuration_state_text", configuration_state_text)
        pulumi.set(__self__, "container_configurations", container_configurations)
        pulumi.set(__self__, "container_resync_trigger", container_resync_trigger)
        pulumi.set(__self__, "create_async_operation_id", create_async_operation_id)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "delete_async_operation_id", delete_async_operation_id)
        pulumi.set(__self__, "image_uri", image_uri)
        pulumi.set(__self__, "is_frozen", is_frozen)
        pulumi.set(__self__, "last_sync_with_azure_timestamp", last_sync_with_azure_timestamp)
        pulumi.set(__self__, "last_updated_timestamp", last_updated_timestamp)
        pulumi.set(__self__, "max_allowable_probability", max_allowable_probability)
        pulumi.set(__self__, "release_version", release_version)
        pulumi.set(__self__, "review_feedback", review_feedback)
        pulumi.set(__self__, "review_state", review_state)
        pulumi.set(__self__, "review_state_text", review_state_text)
        pulumi.set(__self__, "synch_with_azure_attempts_count", synch_with_azure_attempts_count)
        pulumi.set(__self__, "worker_connections", worker_connections)
        pulumi.set(__self__, "worker_connections_last_updated_date_time", worker_connections_last_updated_date_time)
        pulumi.set(__self__, "x_cid", x_cid)
        if auto_update_requested_day is not None:
            pulumi.set(__self__, "auto_update_requested_day", auto_update_requested_day)
        if auto_update_requested_time is not None:
            pulumi.set(__self__, "auto_update_requested_time", auto_update_requested_time)
        if auto_update_requested_week is not None:
            pulumi.set(__self__, "auto_update_requested_week", auto_update_requested_week)
        if auto_update_ring_type is not None:
            pulumi.set(__self__, "auto_update_ring_type", auto_update_ring_type)
        if cache_node_id is not None:
            pulumi.set(__self__, "cache_node_id", cache_node_id)
        if cache_node_name is not None:
            pulumi.set(__self__, "cache_node_name", cache_node_name)
        if cidr_csv is not None:
            pulumi.set(__self__, "cidr_csv", cidr_csv)
        if cidr_selection_type is not None:
            pulumi.set(__self__, "cidr_selection_type", cidr_selection_type)
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_index is not None:
            pulumi.set(__self__, "customer_index", customer_index)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if fully_qualified_domain_name is not None:
            pulumi.set(__self__, "fully_qualified_domain_name", fully_qualified_domain_name)
        if fully_qualified_resource_id is not None:
            pulumi.set(__self__, "fully_qualified_resource_id", fully_qualified_resource_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_enterprise_managed is not None:
            pulumi.set(__self__, "is_enterprise_managed", is_enterprise_managed)
        if max_allowable_egress_in_mbps is not None:
            pulumi.set(__self__, "max_allowable_egress_in_mbps", max_allowable_egress_in_mbps)
        if should_migrate is not None:
            pulumi.set(__self__, "should_migrate", should_migrate)

    @_builtins.property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> _builtins.int:
        """
        Cache node resource total addressable space defined by the Cidr Csv block.
        """
        return pulumi.get(self, "address_space")

    @_builtins.property
    @pulumi.getter(name="bgpAddressSpace")
    def bgp_address_space(self) -> _builtins.int:
        """
        Cache node resource total addressable space defined by Bgp and Cidr Csv blocks.
        """
        return pulumi.get(self, "bgp_address_space")

    @_builtins.property
    @pulumi.getter(name="bgpCidrBlocksCount")
    def bgp_cidr_blocks_count(self) -> _builtins.int:
        """
        Cache node resource Bgp block count.
        """
        return pulumi.get(self, "bgp_cidr_blocks_count")

    @_builtins.property
    @pulumi.getter(name="bgpCidrCsvLastUpdateTime")
    def bgp_cidr_csv_last_update_time(self) -> _builtins.str:
        """
        Cache node resource last Bgp Cidr Csv update timestamp
        """
        return pulumi.get(self, "bgp_cidr_csv_last_update_time")

    @_builtins.property
    @pulumi.getter(name="bgpFileBytesTruncated")
    def bgp_file_bytes_truncated(self) -> _builtins.int:
        """
        Cache node resource bytes truncated from Bgp output file.
        """
        return pulumi.get(self, "bgp_file_bytes_truncated")

    @_builtins.property
    @pulumi.getter(name="bgpLastReportedTime")
    def bgp_last_reported_time(self) -> _builtins.str:
        """
        Cache node resource last Bgp report timestamp.
        """
        return pulumi.get(self, "bgp_last_reported_time")

    @_builtins.property
    @pulumi.getter(name="bgpNumberOfRecords")
    def bgp_number_of_records(self) -> _builtins.int:
        """
        Cache node resource Bgp record count.
        """
        return pulumi.get(self, "bgp_number_of_records")

    @_builtins.property
    @pulumi.getter(name="bgpNumberOfTimesUpdated")
    def bgp_number_of_times_updated(self) -> _builtins.int:
        """
        Cache node resource Bgp update count.
        """
        return pulumi.get(self, "bgp_number_of_times_updated")

    @_builtins.property
    @pulumi.getter(name="bgpReviewFeedback")
    def bgp_review_feedback(self) -> _builtins.str:
        """
        Cache node resource Bgp review feedback text.
        """
        return pulumi.get(self, "bgp_review_feedback")

    @_builtins.property
    @pulumi.getter(name="bgpReviewState")
    def bgp_review_state(self) -> _builtins.str:
        """
        Cache node resource Bgp review state string text.
        """
        return pulumi.get(self, "bgp_review_state")

    @_builtins.property
    @pulumi.getter(name="bgpReviewStateText")
    def bgp_review_state_text(self) -> _builtins.str:
        """
        Cache node resource Bgp review state string text in detail.
        """
        return pulumi.get(self, "bgp_review_state_text")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Cache node resource category.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="cidrCsvLastUpdateTime")
    def cidr_csv_last_update_time(self) -> _builtins.str:
        """
        Cache node resource last Cidr Csv update timestamp
        """
        return pulumi.get(self, "cidr_csv_last_update_time")

    @_builtins.property
    @pulumi.getter(name="clientTenantId")
    def client_tenant_id(self) -> _builtins.str:
        """
        Cache node resource customer resource client tenant Id of subscription.
        """
        return pulumi.get(self, "client_tenant_id")

    @_builtins.property
    @pulumi.getter(name="configurationState")
    def configuration_state(self) -> _builtins.str:
        """
        Cache node resource configuration state.
        """
        return pulumi.get(self, "configuration_state")

    @_builtins.property
    @pulumi.getter(name="configurationStateText")
    def configuration_state_text(self) -> _builtins.str:
        """
        Cache node resource configuration state text.
        """
        return pulumi.get(self, "configuration_state_text")

    @_builtins.property
    @pulumi.getter(name="containerConfigurations")
    def container_configurations(self) -> _builtins.str:
        """
        Cache node resource container configuration details.
        """
        return pulumi.get(self, "container_configurations")

    @_builtins.property
    @pulumi.getter(name="containerResyncTrigger")
    def container_resync_trigger(self) -> _builtins.int:
        """
        Cache node resource Mcc container configuration details re-sync trigger.
        """
        return pulumi.get(self, "container_resync_trigger")

    @_builtins.property
    @pulumi.getter(name="createAsyncOperationId")
    def create_async_operation_id(self) -> _builtins.str:
        """
        Cache node resource create async operation Id.
        """
        return pulumi.get(self, "create_async_operation_id")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        Cache node resource customer resource GUID Id.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter(name="deleteAsyncOperationId")
    def delete_async_operation_id(self) -> _builtins.str:
        """
        Cache node resource deletion async operation Id.
        """
        return pulumi.get(self, "delete_async_operation_id")

    @_builtins.property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> _builtins.str:
        """
        Cache node resource Mcc Container Id Uri.
        """
        return pulumi.get(self, "image_uri")

    @_builtins.property
    @pulumi.getter(name="isFrozen")
    def is_frozen(self) -> _builtins.bool:
        """
        Cache node resource flag for indicating the cache node resource is frozen (not selectable, not editable in UI).
        """
        return pulumi.get(self, "is_frozen")

    @_builtins.property
    @pulumi.getter(name="lastSyncWithAzureTimestamp")
    def last_sync_with_azure_timestamp(self) -> _builtins.str:
        """
        Cache node resource last sync timestamp.
        """
        return pulumi.get(self, "last_sync_with_azure_timestamp")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimestamp")
    def last_updated_timestamp(self) -> _builtins.str:
        """
        Cache node resource last backend updated timestamp.
        """
        return pulumi.get(self, "last_updated_timestamp")

    @_builtins.property
    @pulumi.getter(name="maxAllowableProbability")
    def max_allowable_probability(self) -> _builtins.float:
        """
        Cache node resource maximum allowed probability of egress.
        """
        return pulumi.get(self, "max_allowable_probability")

    @_builtins.property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> _builtins.int:
        """
        Cache node resource release version.
        """
        return pulumi.get(self, "release_version")

    @_builtins.property
    @pulumi.getter(name="reviewFeedback")
    def review_feedback(self) -> _builtins.str:
        """
        Cache node resource review feedback text.
        """
        return pulumi.get(self, "review_feedback")

    @_builtins.property
    @pulumi.getter(name="reviewState")
    def review_state(self) -> _builtins.int:
        """
        Cache node resource review process state as integer
        """
        return pulumi.get(self, "review_state")

    @_builtins.property
    @pulumi.getter(name="reviewStateText")
    def review_state_text(self) -> _builtins.str:
        """
        Cache node resource review state text.
        """
        return pulumi.get(self, "review_state_text")

    @_builtins.property
    @pulumi.getter(name="synchWithAzureAttemptsCount")
    def synch_with_azure_attempts_count(self) -> _builtins.int:
        """
        Cache node resource attempts to sync with Azure.
        """
        return pulumi.get(self, "synch_with_azure_attempts_count")

    @_builtins.property
    @pulumi.getter(name="workerConnections")
    def worker_connections(self) -> _builtins.int:
        """
        Cache node resource Mcc container deployment worker connection count.
        """
        return pulumi.get(self, "worker_connections")

    @_builtins.property
    @pulumi.getter(name="workerConnectionsLastUpdatedDateTime")
    def worker_connections_last_updated_date_time(self) -> _builtins.str:
        """
        Cache node resource last updated Mcc container deployment worker connection count timestamp.
        """
        return pulumi.get(self, "worker_connections_last_updated_date_time")

    @_builtins.property
    @pulumi.getter(name="xCid")
    def x_cid(self) -> _builtins.str:
        """
        Cache node resource Azure XCid.
        """
        return pulumi.get(self, "x_cid")

    @_builtins.property
    @pulumi.getter(name="autoUpdateRequestedDay")
    def auto_update_requested_day(self) -> Optional[_builtins.int]:
        """
        Customer requested day of week for mcc install of auto update cycle. 0 is default no selection. 1-7 are days of week, 1 is Sunday, 2 is Monday, etc.
        """
        return pulumi.get(self, "auto_update_requested_day")

    @_builtins.property
    @pulumi.getter(name="autoUpdateRequestedTime")
    def auto_update_requested_time(self) -> Optional[_builtins.str]:
        """
        Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
        """
        return pulumi.get(self, "auto_update_requested_time")

    @_builtins.property
    @pulumi.getter(name="autoUpdateRequestedWeek")
    def auto_update_requested_week(self) -> Optional[_builtins.int]:
        """
        Customer requested week of month for mcc install of auto update cycle. 0 is default no selection. 1-5 are valid weeks of month, 1 is first week, 2 is second week, etc.
        """
        return pulumi.get(self, "auto_update_requested_week")

    @_builtins.property
    @pulumi.getter(name="autoUpdateRingType")
    def auto_update_ring_type(self) -> Optional[_builtins.str]:
        """
        Auto Update Ring Type which is slow or fast etc.
        """
        return pulumi.get(self, "auto_update_ring_type")

    @_builtins.property
    @pulumi.getter(name="cacheNodeId")
    def cache_node_id(self) -> Optional[_builtins.str]:
        """
        Cache node resource identifier of the cache node
        """
        return pulumi.get(self, "cache_node_id")

    @_builtins.property
    @pulumi.getter(name="cacheNodeName")
    def cache_node_name(self) -> Optional[_builtins.str]:
        """
        Cache node resource name.
        """
        return pulumi.get(self, "cache_node_name")

    @_builtins.property
    @pulumi.getter(name="cidrCsv")
    def cidr_csv(self) -> Optional[Sequence[_builtins.str]]:
        """
        Cache node resource comma separated values of Cidrs.
        """
        return pulumi.get(self, "cidr_csv")

    @_builtins.property
    @pulumi.getter(name="cidrSelectionType")
    def cidr_selection_type(self) -> Optional[_builtins.int]:
        """
        Cache node resource current Cidr range precedence selection type.
        """
        return pulumi.get(self, "cidr_selection_type")

    @_builtins.property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[_builtins.int]:
        """
        Cache node resource customer resource Asn (autonomous system number)
        """
        return pulumi.get(self, "customer_asn")

    @_builtins.property
    @pulumi.getter(name="customerIndex")
    def customer_index(self) -> Optional[_builtins.str]:
        """
        Cache node resource customer index as string.
        """
        return pulumi.get(self, "customer_index")

    @_builtins.property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[_builtins.str]:
        """
        Cache node resource customer resource name.
        """
        return pulumi.get(self, "customer_name")

    @_builtins.property
    @pulumi.getter(name="fullyQualifiedDomainName")
    def fully_qualified_domain_name(self) -> Optional[_builtins.str]:
        """
        FQDN(fully qualified domain name) value of the mcc cache node
        """
        return pulumi.get(self, "fully_qualified_domain_name")

    @_builtins.property
    @pulumi.getter(name="fullyQualifiedResourceId")
    def fully_qualified_resource_id(self) -> Optional[_builtins.str]:
        """
        Cache node resource Azure fully qualified resource Id.
        """
        return pulumi.get(self, "fully_qualified_resource_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Cache node resource Ip address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[_builtins.bool]:
        """
        Cache node resource flag for indicating if cache node is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="isEnterpriseManaged")
    def is_enterprise_managed(self) -> Optional[_builtins.bool]:
        """
        Cache node resource flag for determining if managed by enterprise as boolean.
        """
        return pulumi.get(self, "is_enterprise_managed")

    @_builtins.property
    @pulumi.getter(name="maxAllowableEgressInMbps")
    def max_allowable_egress_in_mbps(self) -> Optional[_builtins.int]:
        """
        Cache node resource maximum allowed egress in Mbps.
        """
        return pulumi.get(self, "max_allowable_egress_in_mbps")

    @_builtins.property
    @pulumi.getter(name="shouldMigrate")
    def should_migrate(self) -> Optional[_builtins.bool]:
        """
        Cache node resource flag for determining if customer will be migrated.
        """
        return pulumi.get(self, "should_migrate")


@pulumi.output_type
class CacheNodeInstallPropertiesResponse(dict):
    """
    Mcc cache node resource install script properties.
    """
    def __init__(__self__, *,
                 primary_account_key: _builtins.str,
                 registration_key: _builtins.str,
                 secondary_account_key: _builtins.str,
                 cache_node_id: Optional[_builtins.str] = None,
                 customer_id: Optional[_builtins.str] = None):
        """
        Mcc cache node resource install script properties.
        :param _builtins.str primary_account_key: Mcc primary account key. Internal to Mcc.
        :param _builtins.str registration_key: Mcc Iot Central temporary device registration key, used once.
        :param _builtins.str secondary_account_key: Mcc secondary account key. Internal to Mcc.
        :param _builtins.str cache_node_id: Mcc cache node resource Id.
        :param _builtins.str customer_id: Mcc customer resource Id.
        """
        pulumi.set(__self__, "primary_account_key", primary_account_key)
        pulumi.set(__self__, "registration_key", registration_key)
        pulumi.set(__self__, "secondary_account_key", secondary_account_key)
        if cache_node_id is not None:
            pulumi.set(__self__, "cache_node_id", cache_node_id)
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)

    @_builtins.property
    @pulumi.getter(name="primaryAccountKey")
    def primary_account_key(self) -> _builtins.str:
        """
        Mcc primary account key. Internal to Mcc.
        """
        return pulumi.get(self, "primary_account_key")

    @_builtins.property
    @pulumi.getter(name="registrationKey")
    def registration_key(self) -> _builtins.str:
        """
        Mcc Iot Central temporary device registration key, used once.
        """
        return pulumi.get(self, "registration_key")

    @_builtins.property
    @pulumi.getter(name="secondaryAccountKey")
    def secondary_account_key(self) -> _builtins.str:
        """
        Mcc secondary account key. Internal to Mcc.
        """
        return pulumi.get(self, "secondary_account_key")

    @_builtins.property
    @pulumi.getter(name="cacheNodeId")
    def cache_node_id(self) -> Optional[_builtins.str]:
        """
        Mcc cache node resource Id.
        """
        return pulumi.get(self, "cache_node_id")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> Optional[_builtins.str]:
        """
        Mcc customer resource Id.
        """
        return pulumi.get(self, "customer_id")


@pulumi.output_type
class CacheNodeOldResponseResponse(dict):
    """
    Model representing Cache Node for ConnectedCache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "statusCode":
            suggest = "status_code"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "statusText":
            suggest = "status_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CacheNodeOldResponseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CacheNodeOldResponseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CacheNodeOldResponseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 status: _builtins.str,
                 error: Optional['outputs.ErrorDetailResponse'] = None,
                 status_code: Optional[_builtins.str] = None,
                 status_details: Optional[_builtins.str] = None,
                 status_text: Optional[_builtins.str] = None):
        """
        Model representing Cache Node for ConnectedCache resource
        :param _builtins.str provisioning_state: The provisioned state of the resource
        :param _builtins.str status: status of the HTTP error code
        :param 'ErrorDetailResponse' error: The error details
        :param _builtins.str status_code: statusCode used to get code details of Mcc response object
        :param _builtins.str status_details: statusDetails used to get inner details of Mcc response object
        :param _builtins.str status_text: statusText used to get status details in string format of Mcc response object
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioned state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        status of the HTTP error code
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def error(self) -> Optional['outputs.ErrorDetailResponse']:
        """
        The error details
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[_builtins.str]:
        """
        statusCode used to get code details of Mcc response object
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[_builtins.str]:
        """
        statusDetails used to get inner details of Mcc response object
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[_builtins.str]:
        """
        statusText used to get status details in string format of Mcc response object
        """
        return pulumi.get(self, "status_text")


@pulumi.output_type
class CacheNodePropertyResponse(dict):
    """
    Model representing an Mcc cache node connectedCache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "additionalCacheNodeProperties":
            suggest = "additional_cache_node_properties"
        elif key == "cacheNode":
            suggest = "cache_node"
        elif key == "statusCode":
            suggest = "status_code"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "statusText":
            suggest = "status_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CacheNodePropertyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CacheNodePropertyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CacheNodePropertyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 status: _builtins.str,
                 additional_cache_node_properties: Optional['outputs.AdditionalCacheNodePropertiesResponse'] = None,
                 cache_node: Optional['outputs.CacheNodeEntityResponse'] = None,
                 error: Optional['outputs.ErrorDetailResponse'] = None,
                 status_code: Optional[_builtins.str] = None,
                 status_details: Optional[_builtins.str] = None,
                 status_text: Optional[_builtins.str] = None):
        """
        Model representing an Mcc cache node connectedCache resource
        :param _builtins.str provisioning_state: The provisioned state of the resource
        :param _builtins.str status: HTTP error status code.
        :param 'AdditionalCacheNodePropertiesResponse' additional_cache_node_properties: Mcc cache node resource additional properties.
        :param 'CacheNodeEntityResponse' cache_node: Mcc cache node resource (cache node entity).
        :param 'ErrorDetailResponse' error: Mcc response error details.
        :param _builtins.str status_code: Mcc response status code.
        :param _builtins.str status_details: Mcc response status details for retrieving response inner details.
        :param _builtins.str status_text: Mcc response status text as string for retrieving status details.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        if additional_cache_node_properties is not None:
            pulumi.set(__self__, "additional_cache_node_properties", additional_cache_node_properties)
        if cache_node is not None:
            pulumi.set(__self__, "cache_node", cache_node)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioned state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        HTTP error status code.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="additionalCacheNodeProperties")
    def additional_cache_node_properties(self) -> Optional['outputs.AdditionalCacheNodePropertiesResponse']:
        """
        Mcc cache node resource additional properties.
        """
        return pulumi.get(self, "additional_cache_node_properties")

    @_builtins.property
    @pulumi.getter(name="cacheNode")
    def cache_node(self) -> Optional['outputs.CacheNodeEntityResponse']:
        """
        Mcc cache node resource (cache node entity).
        """
        return pulumi.get(self, "cache_node")

    @_builtins.property
    @pulumi.getter
    def error(self) -> Optional['outputs.ErrorDetailResponse']:
        """
        Mcc response error details.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[_builtins.str]:
        """
        Mcc response status code.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[_builtins.str]:
        """
        Mcc response status details for retrieving response inner details.
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[_builtins.str]:
        """
        Mcc response status text as string for retrieving status details.
        """
        return pulumi.get(self, "status_text")


@pulumi.output_type
class CustomerEntityResponse(dict):
    """
    Model representing Customer resource for ConnectedCache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createAsyncOperationId":
            suggest = "create_async_operation_id"
        elif key == "customerId":
            suggest = "customer_id"
        elif key == "deleteAsyncOperationId":
            suggest = "delete_async_operation_id"
        elif key == "lastSyncWithAzureTimestamp":
            suggest = "last_sync_with_azure_timestamp"
        elif key == "synchWithAzureAttemptsCount":
            suggest = "synch_with_azure_attempts_count"
        elif key == "clientTenantId":
            suggest = "client_tenant_id"
        elif key == "contactEmail":
            suggest = "contact_email"
        elif key == "contactName":
            suggest = "contact_name"
        elif key == "contactPhone":
            suggest = "contact_phone"
        elif key == "customerName":
            suggest = "customer_name"
        elif key == "fullyQualifiedResourceId":
            suggest = "fully_qualified_resource_id"
        elif key == "isEnterpriseManaged":
            suggest = "is_enterprise_managed"
        elif key == "isEntitled":
            suggest = "is_entitled"
        elif key == "releaseVersion":
            suggest = "release_version"
        elif key == "resendSignupCode":
            suggest = "resend_signup_code"
        elif key == "shouldMigrate":
            suggest = "should_migrate"
        elif key == "verifySignupCode":
            suggest = "verify_signup_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_async_operation_id: _builtins.str,
                 customer_id: _builtins.str,
                 delete_async_operation_id: _builtins.str,
                 last_sync_with_azure_timestamp: _builtins.str,
                 synch_with_azure_attempts_count: _builtins.int,
                 client_tenant_id: Optional[_builtins.str] = None,
                 contact_email: Optional[_builtins.str] = None,
                 contact_name: Optional[_builtins.str] = None,
                 contact_phone: Optional[_builtins.str] = None,
                 customer_name: Optional[_builtins.str] = None,
                 fully_qualified_resource_id: Optional[_builtins.str] = None,
                 is_enterprise_managed: Optional[_builtins.bool] = None,
                 is_entitled: Optional[_builtins.bool] = None,
                 release_version: Optional[_builtins.int] = None,
                 resend_signup_code: Optional[_builtins.bool] = None,
                 should_migrate: Optional[_builtins.bool] = None,
                 verify_signup_code: Optional[_builtins.bool] = None):
        """
        Model representing Customer resource for ConnectedCache resource
        :param _builtins.str create_async_operation_id: Customer resource create async operation Id.
        :param _builtins.str customer_id: Customer resource Guid Id.
        :param _builtins.str delete_async_operation_id: Customer resource deletion async operation Id.
        :param _builtins.str last_sync_with_azure_timestamp: Customer resource last Azure sync timestamp.
        :param _builtins.int synch_with_azure_attempts_count: Customer resource sync attempts.
        :param _builtins.str client_tenant_id: Customer resource client tenant Id of subscription.
        :param _builtins.str contact_email: Customer resource contact email.
        :param _builtins.str contact_name: Customer resource contact full name.
        :param _builtins.str contact_phone: Customer resource contact phone.
        :param _builtins.str customer_name: Customer resource name.
        :param _builtins.str fully_qualified_resource_id: Customer resource Azure fully qualified resource Id.
        :param _builtins.bool is_enterprise_managed: Customer resource flag for enterprise management as boolean.
        :param _builtins.bool is_entitled: Customer resource entitlement flag as boolean.
        :param _builtins.int release_version: Customer resource Mcc release version.
        :param _builtins.bool resend_signup_code: Customer resource flag for resending signup code as boolean.
        :param _builtins.bool should_migrate: Customer resource flag for migration.
        :param _builtins.bool verify_signup_code: Customer resource flag for requiring verification of signup code as boolean.
        """
        pulumi.set(__self__, "create_async_operation_id", create_async_operation_id)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "delete_async_operation_id", delete_async_operation_id)
        pulumi.set(__self__, "last_sync_with_azure_timestamp", last_sync_with_azure_timestamp)
        pulumi.set(__self__, "synch_with_azure_attempts_count", synch_with_azure_attempts_count)
        if client_tenant_id is not None:
            pulumi.set(__self__, "client_tenant_id", client_tenant_id)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if contact_phone is not None:
            pulumi.set(__self__, "contact_phone", contact_phone)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if fully_qualified_resource_id is not None:
            pulumi.set(__self__, "fully_qualified_resource_id", fully_qualified_resource_id)
        if is_enterprise_managed is not None:
            pulumi.set(__self__, "is_enterprise_managed", is_enterprise_managed)
        if is_entitled is not None:
            pulumi.set(__self__, "is_entitled", is_entitled)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)
        if resend_signup_code is not None:
            pulumi.set(__self__, "resend_signup_code", resend_signup_code)
        if should_migrate is not None:
            pulumi.set(__self__, "should_migrate", should_migrate)
        if verify_signup_code is not None:
            pulumi.set(__self__, "verify_signup_code", verify_signup_code)

    @_builtins.property
    @pulumi.getter(name="createAsyncOperationId")
    def create_async_operation_id(self) -> _builtins.str:
        """
        Customer resource create async operation Id.
        """
        return pulumi.get(self, "create_async_operation_id")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        Customer resource Guid Id.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter(name="deleteAsyncOperationId")
    def delete_async_operation_id(self) -> _builtins.str:
        """
        Customer resource deletion async operation Id.
        """
        return pulumi.get(self, "delete_async_operation_id")

    @_builtins.property
    @pulumi.getter(name="lastSyncWithAzureTimestamp")
    def last_sync_with_azure_timestamp(self) -> _builtins.str:
        """
        Customer resource last Azure sync timestamp.
        """
        return pulumi.get(self, "last_sync_with_azure_timestamp")

    @_builtins.property
    @pulumi.getter(name="synchWithAzureAttemptsCount")
    def synch_with_azure_attempts_count(self) -> _builtins.int:
        """
        Customer resource sync attempts.
        """
        return pulumi.get(self, "synch_with_azure_attempts_count")

    @_builtins.property
    @pulumi.getter(name="clientTenantId")
    def client_tenant_id(self) -> Optional[_builtins.str]:
        """
        Customer resource client tenant Id of subscription.
        """
        return pulumi.get(self, "client_tenant_id")

    @_builtins.property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[_builtins.str]:
        """
        Customer resource contact email.
        """
        return pulumi.get(self, "contact_email")

    @_builtins.property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[_builtins.str]:
        """
        Customer resource contact full name.
        """
        return pulumi.get(self, "contact_name")

    @_builtins.property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> Optional[_builtins.str]:
        """
        Customer resource contact phone.
        """
        return pulumi.get(self, "contact_phone")

    @_builtins.property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[_builtins.str]:
        """
        Customer resource name.
        """
        return pulumi.get(self, "customer_name")

    @_builtins.property
    @pulumi.getter(name="fullyQualifiedResourceId")
    def fully_qualified_resource_id(self) -> Optional[_builtins.str]:
        """
        Customer resource Azure fully qualified resource Id.
        """
        return pulumi.get(self, "fully_qualified_resource_id")

    @_builtins.property
    @pulumi.getter(name="isEnterpriseManaged")
    def is_enterprise_managed(self) -> Optional[_builtins.bool]:
        """
        Customer resource flag for enterprise management as boolean.
        """
        return pulumi.get(self, "is_enterprise_managed")

    @_builtins.property
    @pulumi.getter(name="isEntitled")
    def is_entitled(self) -> Optional[_builtins.bool]:
        """
        Customer resource entitlement flag as boolean.
        """
        return pulumi.get(self, "is_entitled")

    @_builtins.property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[_builtins.int]:
        """
        Customer resource Mcc release version.
        """
        return pulumi.get(self, "release_version")

    @_builtins.property
    @pulumi.getter(name="resendSignupCode")
    def resend_signup_code(self) -> Optional[_builtins.bool]:
        """
        Customer resource flag for resending signup code as boolean.
        """
        return pulumi.get(self, "resend_signup_code")

    @_builtins.property
    @pulumi.getter(name="shouldMigrate")
    def should_migrate(self) -> Optional[_builtins.bool]:
        """
        Customer resource flag for migration.
        """
        return pulumi.get(self, "should_migrate")

    @_builtins.property
    @pulumi.getter(name="verifySignupCode")
    def verify_signup_code(self) -> Optional[_builtins.bool]:
        """
        Customer resource flag for requiring verification of signup code as boolean.
        """
        return pulumi.get(self, "verify_signup_code")


@pulumi.output_type
class CustomerPropertyResponse(dict):
    """
    Model representing customer for connectedCache resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "statusCode":
            suggest = "status_code"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "statusText":
            suggest = "status_text"
        elif key == "additionalCustomerProperties":
            suggest = "additional_customer_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerPropertyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerPropertyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerPropertyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: 'outputs.ErrorDetailResponse',
                 provisioning_state: _builtins.str,
                 status: _builtins.str,
                 status_code: _builtins.str,
                 status_details: _builtins.str,
                 status_text: _builtins.str,
                 additional_customer_properties: Optional['outputs.AdditionalCustomerPropertiesResponse'] = None,
                 customer: Optional['outputs.CustomerEntityResponse'] = None):
        """
        Model representing customer for connectedCache resource
        :param 'ErrorDetailResponse' error: Mcc response error details.
        :param _builtins.str provisioning_state: The provisioned state of the resource
        :param _builtins.str status: HTTP error status code.
        :param _builtins.str status_code: Mcc response status code.
        :param _builtins.str status_details: Mcc response status details for retrieving response inner details.
        :param _builtins.str status_text: Mcc response status text as string for retrieving status details.
        :param 'AdditionalCustomerPropertiesResponse' additional_customer_properties: Mcc customer resource additional properties.
        :param 'CustomerEntityResponse' customer: Mcc customer resource (customer entity).
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "status_details", status_details)
        pulumi.set(__self__, "status_text", status_text)
        if additional_customer_properties is not None:
            pulumi.set(__self__, "additional_customer_properties", additional_customer_properties)
        if customer is not None:
            pulumi.set(__self__, "customer", customer)

    @_builtins.property
    @pulumi.getter
    def error(self) -> 'outputs.ErrorDetailResponse':
        """
        Mcc response error details.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioned state of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        HTTP error status code.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        Mcc response status code.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> _builtins.str:
        """
        Mcc response status details for retrieving response inner details.
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="statusText")
    def status_text(self) -> _builtins.str:
        """
        Mcc response status text as string for retrieving status details.
        """
        return pulumi.get(self, "status_text")

    @_builtins.property
    @pulumi.getter(name="additionalCustomerProperties")
    def additional_customer_properties(self) -> Optional['outputs.AdditionalCustomerPropertiesResponse']:
        """
        Mcc customer resource additional properties.
        """
        return pulumi.get(self, "additional_customer_properties")

    @_builtins.property
    @pulumi.getter
    def customer(self) -> Optional['outputs.CustomerEntityResponse']:
        """
        Mcc customer resource (customer entity).
        """
        return pulumi.get(self, "customer")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: _builtins.str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param _builtins.str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: _builtins.str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: _builtins.str,
                 target: _builtins.str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param _builtins.str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param _builtins.str message: The error message.
        :param _builtins.str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class MccCacheNodeAutoUpdateHistoryPropertiesResponse(dict):
    """
    Mcc cache node resource auto update history properties.
    """
    def __init__(__self__, *,
                 cache_node_id: _builtins.str,
                 customer_id: _builtins.str,
                 auto_update_history: Optional[Sequence['outputs.MccCacheNodeAutoUpdateInfoResponse']] = None):
        """
        Mcc cache node resource auto update history properties.
        :param _builtins.str cache_node_id: Mcc cache node resource Id.
        :param _builtins.str customer_id: Mcc customer resource Id.
        :param Sequence['MccCacheNodeAutoUpdateInfoResponse'] auto_update_history: Cache node resource auto update history information.
        """
        pulumi.set(__self__, "cache_node_id", cache_node_id)
        pulumi.set(__self__, "customer_id", customer_id)
        if auto_update_history is not None:
            pulumi.set(__self__, "auto_update_history", auto_update_history)

    @_builtins.property
    @pulumi.getter(name="cacheNodeId")
    def cache_node_id(self) -> _builtins.str:
        """
        Mcc cache node resource Id.
        """
        return pulumi.get(self, "cache_node_id")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        Mcc customer resource Id.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter(name="autoUpdateHistory")
    def auto_update_history(self) -> Optional[Sequence['outputs.MccCacheNodeAutoUpdateInfoResponse']]:
        """
        Cache node resource auto update history information.
        """
        return pulumi.get(self, "auto_update_history")


@pulumi.output_type
class MccCacheNodeAutoUpdateInfoResponse(dict):
    """
    Mcc cache node resource auto update properties.
    """
    def __init__(__self__, *,
                 auto_update_last_applied_status: _builtins.int,
                 auto_update_last_applied_status_detailed_text: _builtins.str,
                 auto_update_last_applied_status_text: _builtins.str,
                 auto_update_ring_type: _builtins.int,
                 created_date_time_utc: _builtins.str,
                 image_uri_before_update: _builtins.str,
                 image_uri_targeted: _builtins.str,
                 image_uri_terminal: _builtins.str,
                 moved_to_terminal_state_date_time: _builtins.str,
                 plan_change_log_text: _builtins.str,
                 plan_id: _builtins.float,
                 rule_requested_day: _builtins.int,
                 rule_requested_hour: _builtins.str,
                 rule_requested_minute: _builtins.str,
                 rule_requested_week: _builtins.int,
                 time_to_go_live_date_time: _builtins.str,
                 updated_registry_date_time_utc: _builtins.str):
        """
        Mcc cache node resource auto update properties.
        :param _builtins.int auto_update_last_applied_status: Auto update last applied status.
        :param _builtins.str auto_update_last_applied_status_detailed_text: Auto update last applied detailed status text.
        :param _builtins.str auto_update_last_applied_status_text: Auto update last applied status text.
        :param _builtins.int auto_update_ring_type: Auto update Ring Type.
        :param _builtins.str created_date_time_utc: Auto update entity created datetime.
        :param _builtins.str image_uri_before_update: Auto update image uri before update.
        :param _builtins.str image_uri_targeted: Auto update image uri targetted to update.
        :param _builtins.str image_uri_terminal: Auto update image uri at Terminal.
        :param _builtins.str moved_to_terminal_state_date_time: Auto update image uri after update.
        :param _builtins.str plan_change_log_text: This text describing the purpose of the plan of auto update.
        :param _builtins.float plan_id: Auto update planId.
        :param _builtins.int rule_requested_day: Auto update image uri after update.
        :param _builtins.str rule_requested_hour: Auto update rule requested hour.
        :param _builtins.str rule_requested_minute: Auto update rule requested minute.
        :param _builtins.int rule_requested_week: Auto update image uri before update.
        :param _builtins.str time_to_go_live_date_time: Auto update time to go live date time.
        :param _builtins.str updated_registry_date_time_utc: Auto update entity last updated datetime.
        """
        pulumi.set(__self__, "auto_update_last_applied_status", auto_update_last_applied_status)
        pulumi.set(__self__, "auto_update_last_applied_status_detailed_text", auto_update_last_applied_status_detailed_text)
        pulumi.set(__self__, "auto_update_last_applied_status_text", auto_update_last_applied_status_text)
        pulumi.set(__self__, "auto_update_ring_type", auto_update_ring_type)
        pulumi.set(__self__, "created_date_time_utc", created_date_time_utc)
        pulumi.set(__self__, "image_uri_before_update", image_uri_before_update)
        pulumi.set(__self__, "image_uri_targeted", image_uri_targeted)
        pulumi.set(__self__, "image_uri_terminal", image_uri_terminal)
        pulumi.set(__self__, "moved_to_terminal_state_date_time", moved_to_terminal_state_date_time)
        pulumi.set(__self__, "plan_change_log_text", plan_change_log_text)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "rule_requested_day", rule_requested_day)
        pulumi.set(__self__, "rule_requested_hour", rule_requested_hour)
        pulumi.set(__self__, "rule_requested_minute", rule_requested_minute)
        pulumi.set(__self__, "rule_requested_week", rule_requested_week)
        pulumi.set(__self__, "time_to_go_live_date_time", time_to_go_live_date_time)
        pulumi.set(__self__, "updated_registry_date_time_utc", updated_registry_date_time_utc)

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastAppliedStatus")
    def auto_update_last_applied_status(self) -> _builtins.int:
        """
        Auto update last applied status.
        """
        return pulumi.get(self, "auto_update_last_applied_status")

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastAppliedStatusDetailedText")
    def auto_update_last_applied_status_detailed_text(self) -> _builtins.str:
        """
        Auto update last applied detailed status text.
        """
        return pulumi.get(self, "auto_update_last_applied_status_detailed_text")

    @_builtins.property
    @pulumi.getter(name="autoUpdateLastAppliedStatusText")
    def auto_update_last_applied_status_text(self) -> _builtins.str:
        """
        Auto update last applied status text.
        """
        return pulumi.get(self, "auto_update_last_applied_status_text")

    @_builtins.property
    @pulumi.getter(name="autoUpdateRingType")
    def auto_update_ring_type(self) -> _builtins.int:
        """
        Auto update Ring Type.
        """
        return pulumi.get(self, "auto_update_ring_type")

    @_builtins.property
    @pulumi.getter(name="createdDateTimeUtc")
    def created_date_time_utc(self) -> _builtins.str:
        """
        Auto update entity created datetime.
        """
        return pulumi.get(self, "created_date_time_utc")

    @_builtins.property
    @pulumi.getter(name="imageUriBeforeUpdate")
    def image_uri_before_update(self) -> _builtins.str:
        """
        Auto update image uri before update.
        """
        return pulumi.get(self, "image_uri_before_update")

    @_builtins.property
    @pulumi.getter(name="imageUriTargeted")
    def image_uri_targeted(self) -> _builtins.str:
        """
        Auto update image uri targetted to update.
        """
        return pulumi.get(self, "image_uri_targeted")

    @_builtins.property
    @pulumi.getter(name="imageUriTerminal")
    def image_uri_terminal(self) -> _builtins.str:
        """
        Auto update image uri at Terminal.
        """
        return pulumi.get(self, "image_uri_terminal")

    @_builtins.property
    @pulumi.getter(name="movedToTerminalStateDateTime")
    def moved_to_terminal_state_date_time(self) -> _builtins.str:
        """
        Auto update image uri after update.
        """
        return pulumi.get(self, "moved_to_terminal_state_date_time")

    @_builtins.property
    @pulumi.getter(name="planChangeLogText")
    def plan_change_log_text(self) -> _builtins.str:
        """
        This text describing the purpose of the plan of auto update.
        """
        return pulumi.get(self, "plan_change_log_text")

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> _builtins.float:
        """
        Auto update planId.
        """
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter(name="ruleRequestedDay")
    def rule_requested_day(self) -> _builtins.int:
        """
        Auto update image uri after update.
        """
        return pulumi.get(self, "rule_requested_day")

    @_builtins.property
    @pulumi.getter(name="ruleRequestedHour")
    def rule_requested_hour(self) -> _builtins.str:
        """
        Auto update rule requested hour.
        """
        return pulumi.get(self, "rule_requested_hour")

    @_builtins.property
    @pulumi.getter(name="ruleRequestedMinute")
    def rule_requested_minute(self) -> _builtins.str:
        """
        Auto update rule requested minute.
        """
        return pulumi.get(self, "rule_requested_minute")

    @_builtins.property
    @pulumi.getter(name="ruleRequestedWeek")
    def rule_requested_week(self) -> _builtins.int:
        """
        Auto update image uri before update.
        """
        return pulumi.get(self, "rule_requested_week")

    @_builtins.property
    @pulumi.getter(name="timeToGoLiveDateTime")
    def time_to_go_live_date_time(self) -> _builtins.str:
        """
        Auto update time to go live date time.
        """
        return pulumi.get(self, "time_to_go_live_date_time")

    @_builtins.property
    @pulumi.getter(name="updatedRegistryDateTimeUtc")
    def updated_registry_date_time_utc(self) -> _builtins.str:
        """
        Auto update entity last updated datetime.
        """
        return pulumi.get(self, "updated_registry_date_time_utc")


@pulumi.output_type
class MccCacheNodeIssueHistoryPropertiesResponse(dict):
    """
    Mcc cache node resource issue history properties.
    """
    def __init__(__self__, *,
                 cache_node_id: _builtins.str,
                 customer_id: _builtins.str,
                 mcc_issue_history: Optional[Sequence['outputs.MccIssueResponse']] = None):
        """
        Mcc cache node resource issue history properties.
        :param _builtins.str cache_node_id: Mcc cache node resource Id.
        :param _builtins.str customer_id: Mcc customer resource Id.
        :param Sequence['MccIssueResponse'] mcc_issue_history: Cache node resource issue details history.
        """
        pulumi.set(__self__, "cache_node_id", cache_node_id)
        pulumi.set(__self__, "customer_id", customer_id)
        if mcc_issue_history is not None:
            pulumi.set(__self__, "mcc_issue_history", mcc_issue_history)

    @_builtins.property
    @pulumi.getter(name="cacheNodeId")
    def cache_node_id(self) -> _builtins.str:
        """
        Mcc cache node resource Id.
        """
        return pulumi.get(self, "cache_node_id")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        Mcc customer resource Id.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter(name="mccIssueHistory")
    def mcc_issue_history(self) -> Optional[Sequence['outputs.MccIssueResponse']]:
        """
        Cache node resource issue details history.
        """
        return pulumi.get(self, "mcc_issue_history")


@pulumi.output_type
class MccCacheNodeTlsCertificatePropertiesResponse(dict):
    """
    Mcc cache node resource auto update properties.
    """
    def __init__(__self__, *,
                 cache_node_id: _builtins.str,
                 customer_id: _builtins.str,
                 tls_certificate_history: Optional[Sequence['outputs.MccCacheNodeTlsCertificateResponse']] = None):
        """
        Mcc cache node resource auto update properties.
        :param _builtins.str cache_node_id: Mcc cache node resource Id.
        :param _builtins.str customer_id: Mcc customer resource Id.
        :param Sequence['MccCacheNodeTlsCertificateResponse'] tls_certificate_history: Cache node resource tls certificate history details.
        """
        pulumi.set(__self__, "cache_node_id", cache_node_id)
        pulumi.set(__self__, "customer_id", customer_id)
        if tls_certificate_history is not None:
            pulumi.set(__self__, "tls_certificate_history", tls_certificate_history)

    @_builtins.property
    @pulumi.getter(name="cacheNodeId")
    def cache_node_id(self) -> _builtins.str:
        """
        Mcc cache node resource Id.
        """
        return pulumi.get(self, "cache_node_id")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        Mcc customer resource Id.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter(name="tlsCertificateHistory")
    def tls_certificate_history(self) -> Optional[Sequence['outputs.MccCacheNodeTlsCertificateResponse']]:
        """
        Cache node resource tls certificate history details.
        """
        return pulumi.get(self, "tls_certificate_history")


@pulumi.output_type
class MccCacheNodeTlsCertificateResponse(dict):
    """
    Mcc cache node resource Tls certificate details.
    """
    def __init__(__self__, *,
                 action_required: _builtins.str,
                 certificate_file_name: _builtins.str,
                 expiry_date: _builtins.str,
                 not_before_date: _builtins.str,
                 subject: _builtins.str,
                 subject_alt_name: _builtins.str,
                 thumbprint: _builtins.str):
        """
        Mcc cache node resource Tls certificate details.
        :param _builtins.str action_required: Mcc cache node Tls certificate status.
        :param _builtins.str certificate_file_name: Mcc cache node Tls certificate file name.
        :param _builtins.str expiry_date: Mcc cache node Tls certificate expiry date.
        :param _builtins.str not_before_date: Mcc cache node Tls certificate not before date.
        :param _builtins.str subject: Mcc cache node Tls certificate subject name.
        :param _builtins.str subject_alt_name: Mcc cache node Tls certificate subject alternate name.
        :param _builtins.str thumbprint: Mcc cache node Tls certificate thumbprint.
        """
        pulumi.set(__self__, "action_required", action_required)
        pulumi.set(__self__, "certificate_file_name", certificate_file_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "not_before_date", not_before_date)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "subject_alt_name", subject_alt_name)
        pulumi.set(__self__, "thumbprint", thumbprint)

    @_builtins.property
    @pulumi.getter(name="actionRequired")
    def action_required(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate status.
        """
        return pulumi.get(self, "action_required")

    @_builtins.property
    @pulumi.getter(name="certificateFileName")
    def certificate_file_name(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate file name.
        """
        return pulumi.get(self, "certificate_file_name")

    @_builtins.property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate expiry date.
        """
        return pulumi.get(self, "expiry_date")

    @_builtins.property
    @pulumi.getter(name="notBeforeDate")
    def not_before_date(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate not before date.
        """
        return pulumi.get(self, "not_before_date")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate subject name.
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="subjectAltName")
    def subject_alt_name(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate subject alternate name.
        """
        return pulumi.get(self, "subject_alt_name")

    @_builtins.property
    @pulumi.getter
    def thumbprint(self) -> _builtins.str:
        """
        Mcc cache node Tls certificate thumbprint.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class MccIssueResponse(dict):
    """
    Mcc cache node resource issue properties.
    """
    def __init__(__self__, *,
                 detail_string: _builtins.str,
                 help_link: _builtins.str,
                 issue_end_date: _builtins.str,
                 issue_start_date: _builtins.str,
                 mcc_issue_type: _builtins.str,
                 toast_string: _builtins.str):
        """
        Mcc cache node resource issue properties.
        :param _builtins.str detail_string: Mcc cache node issue detail string.
        :param _builtins.str help_link: Mcc cache node issue related help link.
        :param _builtins.str issue_end_date: Mcc cache node issue end date.
        :param _builtins.str issue_start_date: Mcc cache node issue start date.
        :param _builtins.str mcc_issue_type: Mcc cache node issue type.
        :param _builtins.str toast_string: Mcc cache node issues toastString.
        """
        pulumi.set(__self__, "detail_string", detail_string)
        pulumi.set(__self__, "help_link", help_link)
        pulumi.set(__self__, "issue_end_date", issue_end_date)
        pulumi.set(__self__, "issue_start_date", issue_start_date)
        pulumi.set(__self__, "mcc_issue_type", mcc_issue_type)
        pulumi.set(__self__, "toast_string", toast_string)

    @_builtins.property
    @pulumi.getter(name="detailString")
    def detail_string(self) -> _builtins.str:
        """
        Mcc cache node issue detail string.
        """
        return pulumi.get(self, "detail_string")

    @_builtins.property
    @pulumi.getter(name="helpLink")
    def help_link(self) -> _builtins.str:
        """
        Mcc cache node issue related help link.
        """
        return pulumi.get(self, "help_link")

    @_builtins.property
    @pulumi.getter(name="issueEndDate")
    def issue_end_date(self) -> _builtins.str:
        """
        Mcc cache node issue end date.
        """
        return pulumi.get(self, "issue_end_date")

    @_builtins.property
    @pulumi.getter(name="issueStartDate")
    def issue_start_date(self) -> _builtins.str:
        """
        Mcc cache node issue start date.
        """
        return pulumi.get(self, "issue_start_date")

    @_builtins.property
    @pulumi.getter(name="mccIssueType")
    def mcc_issue_type(self) -> _builtins.str:
        """
        Mcc cache node issue type.
        """
        return pulumi.get(self, "mcc_issue_type")

    @_builtins.property
    @pulumi.getter(name="toastString")
    def toast_string(self) -> _builtins.str:
        """
        Mcc cache node issues toastString.
        """
        return pulumi.get(self, "toast_string")


@pulumi.output_type
class ProxyUrlConfigurationResponse(dict):
    """
    ProxyUrl configuration of cache node
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proxyUrl":
            suggest = "proxy_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxyUrlConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxyUrlConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxyUrlConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proxy_url: Optional[_builtins.str] = None):
        """
        ProxyUrl configuration of cache node
        :param _builtins.str proxy_url: Host Proxy Address configuration along with port number. This can be a proxy or ip address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80
        """
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)

    @_builtins.property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[_builtins.str]:
        """
        Host Proxy Address configuration along with port number. This can be a proxy or ip address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80
        """
        return pulumi.get(self, "proxy_url")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


