# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CertSyncRecordResponse',
    'ControlSyncRecordResponse',
    'OverviewStatusResponse',
    'ReportComplianceStatusResponse',
    'ResourceMetadataResponse',
    'ScopingAnswerResponse',
    'ScopingQuestionResponse',
    'StatusItemResponse',
    'StorageInfoResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class CertSyncRecordResponse(dict):
    """
    A class represent the certification record synchronized from app compliance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificationStatus":
            suggest = "certification_status"
        elif key == "ingestionStatus":
            suggest = "ingestion_status"
        elif key == "offerGuid":
            suggest = "offer_guid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertSyncRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertSyncRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertSyncRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certification_status: Optional[str] = None,
                 controls: Optional[Sequence['outputs.ControlSyncRecordResponse']] = None,
                 ingestion_status: Optional[str] = None,
                 offer_guid: Optional[str] = None):
        """
        A class represent the certification record synchronized from app compliance.
        :param str certification_status: Indicates the status of certification process.
        :param Sequence['ControlSyncRecordResponse'] controls: The control records list to be synchronized.
        :param str ingestion_status: Indicates the status of compliance process.
        :param str offer_guid: The offerGuid which mapping to the reports.
        """
        if certification_status is not None:
            pulumi.set(__self__, "certification_status", certification_status)
        if controls is not None:
            pulumi.set(__self__, "controls", controls)
        if ingestion_status is not None:
            pulumi.set(__self__, "ingestion_status", ingestion_status)
        if offer_guid is not None:
            pulumi.set(__self__, "offer_guid", offer_guid)

    @property
    @pulumi.getter(name="certificationStatus")
    def certification_status(self) -> Optional[str]:
        """
        Indicates the status of certification process.
        """
        return pulumi.get(self, "certification_status")

    @property
    @pulumi.getter
    def controls(self) -> Optional[Sequence['outputs.ControlSyncRecordResponse']]:
        """
        The control records list to be synchronized.
        """
        return pulumi.get(self, "controls")

    @property
    @pulumi.getter(name="ingestionStatus")
    def ingestion_status(self) -> Optional[str]:
        """
        Indicates the status of compliance process.
        """
        return pulumi.get(self, "ingestion_status")

    @property
    @pulumi.getter(name="offerGuid")
    def offer_guid(self) -> Optional[str]:
        """
        The offerGuid which mapping to the reports.
        """
        return pulumi.get(self, "offer_guid")


@pulumi.output_type
class ControlSyncRecordResponse(dict):
    """
    A class represent the control record synchronized from app compliance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlId":
            suggest = "control_id"
        elif key == "controlStatus":
            suggest = "control_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ControlSyncRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ControlSyncRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ControlSyncRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_id: Optional[str] = None,
                 control_status: Optional[str] = None):
        """
        A class represent the control record synchronized from app compliance.
        :param str control_id: The Id of the control. e.g. "Operational_Security_10"
        :param str control_status: Control status synchronized from app compliance.
        """
        if control_id is not None:
            pulumi.set(__self__, "control_id", control_id)
        if control_status is not None:
            pulumi.set(__self__, "control_status", control_status)

    @property
    @pulumi.getter(name="controlId")
    def control_id(self) -> Optional[str]:
        """
        The Id of the control. e.g. "Operational_Security_10"
        """
        return pulumi.get(self, "control_id")

    @property
    @pulumi.getter(name="controlStatus")
    def control_status(self) -> Optional[str]:
        """
        Control status synchronized from app compliance.
        """
        return pulumi.get(self, "control_status")


@pulumi.output_type
class OverviewStatusResponse(dict):
    """
    The overview of the compliance result for one report.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedCount":
            suggest = "failed_count"
        elif key == "manualCount":
            suggest = "manual_count"
        elif key == "notApplicableCount":
            suggest = "not_applicable_count"
        elif key == "passedCount":
            suggest = "passed_count"
        elif key == "pendingCount":
            suggest = "pending_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OverviewStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OverviewStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OverviewStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failed_count: int,
                 manual_count: int,
                 not_applicable_count: int,
                 passed_count: int,
                 pending_count: int):
        """
        The overview of the compliance result for one report.
        :param int failed_count: The count of all failed control.
        :param int manual_count: The count of all manual control.
        :param int not_applicable_count: The count of all not applicable control.
        :param int passed_count: The count of all passed control.
        :param int pending_count: The count of all pending for approval control.
        """
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "manual_count", manual_count)
        pulumi.set(__self__, "not_applicable_count", not_applicable_count)
        pulumi.set(__self__, "passed_count", passed_count)
        pulumi.set(__self__, "pending_count", pending_count)

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        The count of all failed control.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="manualCount")
    def manual_count(self) -> int:
        """
        The count of all manual control.
        """
        return pulumi.get(self, "manual_count")

    @property
    @pulumi.getter(name="notApplicableCount")
    def not_applicable_count(self) -> int:
        """
        The count of all not applicable control.
        """
        return pulumi.get(self, "not_applicable_count")

    @property
    @pulumi.getter(name="passedCount")
    def passed_count(self) -> int:
        """
        The count of all passed control.
        """
        return pulumi.get(self, "passed_count")

    @property
    @pulumi.getter(name="pendingCount")
    def pending_count(self) -> int:
        """
        The count of all pending for approval control.
        """
        return pulumi.get(self, "pending_count")


@pulumi.output_type
class ReportComplianceStatusResponse(dict):
    """
    A list which includes all the compliance result for one report.
    """
    def __init__(__self__, *,
                 m365: 'outputs.OverviewStatusResponse'):
        """
        A list which includes all the compliance result for one report.
        :param 'OverviewStatusResponse' m365: The Microsoft 365 certification name.
        """
        pulumi.set(__self__, "m365", m365)

    @property
    @pulumi.getter
    def m365(self) -> 'outputs.OverviewStatusResponse':
        """
        The Microsoft 365 certification name.
        """
        return pulumi.get(self, "m365")


@pulumi.output_type
class ResourceMetadataResponse(dict):
    """
    Single resource Id's metadata.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "resourceKind":
            suggest = "resource_kind"
        elif key == "resourceOrigin":
            suggest = "resource_origin"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 account_id: Optional[str] = None,
                 resource_kind: Optional[str] = None,
                 resource_origin: Optional[str] = None,
                 resource_type: Optional[str] = None):
        """
        Single resource Id's metadata.
        :param str resource_id: Resource Id - e.g. "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
        :param str account_id: Account Id. For example - the AWS account id.
        :param str resource_kind: Resource kind.
        :param str resource_origin: Resource Origin.
        :param str resource_type: Resource type. e.g. "Microsoft.Compute/virtualMachines"
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if resource_kind is not None:
            pulumi.set(__self__, "resource_kind", resource_kind)
        if resource_origin is not None:
            pulumi.set(__self__, "resource_origin", resource_origin)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        Resource Id - e.g. "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        Account Id. For example - the AWS account id.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="resourceKind")
    def resource_kind(self) -> Optional[str]:
        """
        Resource kind.
        """
        return pulumi.get(self, "resource_kind")

    @property
    @pulumi.getter(name="resourceOrigin")
    def resource_origin(self) -> Optional[str]:
        """
        Resource Origin.
        """
        return pulumi.get(self, "resource_origin")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Resource type. e.g. "Microsoft.Compute/virtualMachines"
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class ScopingAnswerResponse(dict):
    """
    Scoping answer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "questionId":
            suggest = "question_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScopingAnswerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScopingAnswerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScopingAnswerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answers: Sequence[str],
                 question_id: str):
        """
        Scoping answer.
        :param Sequence[str] answers: Question answer value list.
        :param str question_id: Question id.
        """
        pulumi.set(__self__, "answers", answers)
        pulumi.set(__self__, "question_id", question_id)

    @property
    @pulumi.getter
    def answers(self) -> Sequence[str]:
        """
        Question answer value list.
        """
        return pulumi.get(self, "answers")

    @property
    @pulumi.getter(name="questionId")
    def question_id(self) -> str:
        """
        Question id.
        """
        return pulumi.get(self, "question_id")


@pulumi.output_type
class ScopingQuestionResponse(dict):
    """
    The definition of a scoping question.
    """
    def __init__(__self__, *,
                 input_type: str,
                 option_ids: Sequence[str],
                 question_id: str,
                 rules: Sequence[str],
                 show_sub_questions_value: str,
                 superior_question_id: str):
        """
        The definition of a scoping question.
        :param str input_type: Input type of the question answer.
        :param Sequence[str] option_ids: Option id list.
        :param str question_id: Question id.
        :param Sequence[str] rules: The rule of the question.
        :param str show_sub_questions_value: The answer value to show the sub questions.
        :param str superior_question_id: Superior question id.
        """
        pulumi.set(__self__, "input_type", input_type)
        pulumi.set(__self__, "option_ids", option_ids)
        pulumi.set(__self__, "question_id", question_id)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "show_sub_questions_value", show_sub_questions_value)
        pulumi.set(__self__, "superior_question_id", superior_question_id)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> str:
        """
        Input type of the question answer.
        """
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter(name="optionIds")
    def option_ids(self) -> Sequence[str]:
        """
        Option id list.
        """
        return pulumi.get(self, "option_ids")

    @property
    @pulumi.getter(name="questionId")
    def question_id(self) -> str:
        """
        Question id.
        """
        return pulumi.get(self, "question_id")

    @property
    @pulumi.getter
    def rules(self) -> Sequence[str]:
        """
        The rule of the question.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="showSubQuestionsValue")
    def show_sub_questions_value(self) -> str:
        """
        The answer value to show the sub questions.
        """
        return pulumi.get(self, "show_sub_questions_value")

    @property
    @pulumi.getter(name="superiorQuestionId")
    def superior_question_id(self) -> str:
        """
        Superior question id.
        """
        return pulumi.get(self, "superior_question_id")


@pulumi.output_type
class StatusItemResponse(dict):
    """
    Single status.
    """
    def __init__(__self__, *,
                 status_name: Optional[str] = None,
                 status_value: Optional[str] = None):
        """
        Single status.
        :param str status_name: Status name - e.g. "Active", "Failed".
        :param str status_value: Status value. e.g. "100", or "100%".
        """
        if status_name is not None:
            pulumi.set(__self__, "status_name", status_name)
        if status_value is not None:
            pulumi.set(__self__, "status_value", status_value)

    @property
    @pulumi.getter(name="statusName")
    def status_name(self) -> Optional[str]:
        """
        Status name - e.g. "Active", "Failed".
        """
        return pulumi.get(self, "status_name")

    @property
    @pulumi.getter(name="statusValue")
    def status_value(self) -> Optional[str]:
        """
        Status value. e.g. "100", or "100%".
        """
        return pulumi.get(self, "status_value")


@pulumi.output_type
class StorageInfoResponse(dict):
    """
    The information of 'bring your own storage' account binding to the report
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 subscription_id: Optional[str] = None):
        """
        The information of 'bring your own storage' account binding to the report
        :param str account_name: 'bring your own storage' account name
        :param str location: The region of 'bring your own storage' account
        :param str resource_group: The resourceGroup which 'bring your own storage' account belongs to
        :param str subscription_id: The subscription id which 'bring your own storage' account belongs to
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        'bring your own storage' account name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The region of 'bring your own storage' account
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        The resourceGroup which 'bring your own storage' account belongs to
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        The subscription id which 'bring your own storage' account belongs to
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


