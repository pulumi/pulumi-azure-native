# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEvidenceResult',
    'AwaitableGetEvidenceResult',
    'get_evidence',
    'get_evidence_output',
]

@pulumi.output_type
class GetEvidenceResult:
    """
    A class represent an AppComplianceAutomation evidence resource.
    """
    def __init__(__self__, control_id=None, evidence_type=None, extra_data=None, file_path=None, id=None, name=None, provisioning_state=None, responsibility_id=None, system_data=None, type=None):
        if control_id and not isinstance(control_id, str):
            raise TypeError("Expected argument 'control_id' to be a str")
        pulumi.set(__self__, "control_id", control_id)
        if evidence_type and not isinstance(evidence_type, str):
            raise TypeError("Expected argument 'evidence_type' to be a str")
        pulumi.set(__self__, "evidence_type", evidence_type)
        if extra_data and not isinstance(extra_data, str):
            raise TypeError("Expected argument 'extra_data' to be a str")
        pulumi.set(__self__, "extra_data", extra_data)
        if file_path and not isinstance(file_path, str):
            raise TypeError("Expected argument 'file_path' to be a str")
        pulumi.set(__self__, "file_path", file_path)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if responsibility_id and not isinstance(responsibility_id, str):
            raise TypeError("Expected argument 'responsibility_id' to be a str")
        pulumi.set(__self__, "responsibility_id", responsibility_id)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="controlId")
    def control_id(self) -> Optional[str]:
        """
        Control id.
        """
        return pulumi.get(self, "control_id")

    @property
    @pulumi.getter(name="evidenceType")
    def evidence_type(self) -> Optional[str]:
        """
        Evidence type.
        """
        return pulumi.get(self, "evidence_type")

    @property
    @pulumi.getter(name="extraData")
    def extra_data(self) -> Optional[str]:
        """
        Extra data considered as evidence.
        """
        return pulumi.get(self, "extra_data")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> str:
        """
        The path of the file in storage.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Azure lifecycle management
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="responsibilityId")
    def responsibility_id(self) -> Optional[str]:
        """
        Responsibility id.
        """
        return pulumi.get(self, "responsibility_id")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetEvidenceResult(GetEvidenceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEvidenceResult(
            control_id=self.control_id,
            evidence_type=self.evidence_type,
            extra_data=self.extra_data,
            file_path=self.file_path,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            responsibility_id=self.responsibility_id,
            system_data=self.system_data,
            type=self.type)


def get_evidence(evidence_name: Optional[str] = None,
                 report_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEvidenceResult:
    """
    Get the evidence metadata
    Azure REST API version: 2024-06-27.


    :param str evidence_name: The evidence name.
    :param str report_name: Report Name.
    """
    __args__ = dict()
    __args__['evidenceName'] = evidence_name
    __args__['reportName'] = report_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:appcomplianceautomation:getEvidence', __args__, opts=opts, typ=GetEvidenceResult).value

    return AwaitableGetEvidenceResult(
        control_id=pulumi.get(__ret__, 'control_id'),
        evidence_type=pulumi.get(__ret__, 'evidence_type'),
        extra_data=pulumi.get(__ret__, 'extra_data'),
        file_path=pulumi.get(__ret__, 'file_path'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        responsibility_id=pulumi.get(__ret__, 'responsibility_id'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_evidence)
def get_evidence_output(evidence_name: Optional[pulumi.Input[str]] = None,
                        report_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEvidenceResult]:
    """
    Get the evidence metadata
    Azure REST API version: 2024-06-27.


    :param str evidence_name: The evidence name.
    :param str report_name: Report Name.
    """
    ...
