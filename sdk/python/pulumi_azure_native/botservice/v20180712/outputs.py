# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'EnterpriseChannelNodeResponse',
    'EnterpriseChannelPropertiesResponse',
    'ServiceProviderParameterResponse',
    'ServiceProviderPropertiesResponse',
    'ServiceProviderResponse',
    'SkuResponse',
]

@pulumi.output_type
class EnterpriseChannelNodeResponse(dict):
    """
    The properties specific to an Enterprise Channel Node.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureLocation":
            suggest = "azure_location"
        elif key == "azureSku":
            suggest = "azure_sku"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseChannelNodeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseChannelNodeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseChannelNodeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_location: str,
                 azure_sku: str,
                 id: str,
                 name: str,
                 state: Optional[str] = None):
        """
        The properties specific to an Enterprise Channel Node.
        :param str azure_location: The location of the Enterprise Channel Node.
        :param str azure_sku: The sku of the Enterprise Channel Node.
        :param str id: Id of Enterprise Channel Node. This is generated by the Bot Framework.
        :param str name: The name of the Enterprise Channel Node.
        :param str state: The current state of the Enterprise Channel Node.
        """
        EnterpriseChannelNodeResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_location=azure_location,
            azure_sku=azure_sku,
            id=id,
            name=name,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_location: str,
             azure_sku: str,
             id: str,
             name: str,
             state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("azure_location", azure_location)
        _setter("azure_sku", azure_sku)
        _setter("id", id)
        _setter("name", name)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> str:
        """
        The location of the Enterprise Channel Node.
        """
        return pulumi.get(self, "azure_location")

    @property
    @pulumi.getter(name="azureSku")
    def azure_sku(self) -> str:
        """
        The sku of the Enterprise Channel Node.
        """
        return pulumi.get(self, "azure_sku")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of Enterprise Channel Node. This is generated by the Bot Framework.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Enterprise Channel Node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the Enterprise Channel Node.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class EnterpriseChannelPropertiesResponse(dict):
    """
    The parameters to provide for the Enterprise Channel.
    """
    def __init__(__self__, *,
                 nodes: Sequence['outputs.EnterpriseChannelNodeResponse'],
                 state: Optional[str] = None):
        """
        The parameters to provide for the Enterprise Channel.
        :param Sequence['EnterpriseChannelNodeResponse'] nodes: The nodes associated with the Enterprise Channel.
        :param str state: The current state of the Enterprise Channel.
        """
        EnterpriseChannelPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nodes=nodes,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nodes: Sequence['outputs.EnterpriseChannelNodeResponse'],
             state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("nodes", nodes)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.EnterpriseChannelNodeResponse']:
        """
        The nodes associated with the Enterprise Channel.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the Enterprise Channel.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ServiceProviderParameterResponse(dict):
    """
    Extra Parameters specific to each Service Provider
    """
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 display_name: str,
                 help_url: str,
                 name: str,
                 type: str):
        """
        Extra Parameters specific to each Service Provider
        :param str default: Default Name for the Service Provider
        :param str description: Description of the Service Provider
        :param str display_name: Display Name of the Service Provider
        :param str help_url: Help Url for the  Service Provider
        :param str name: Name of the Service Provider
        :param str type: Type of the Service Provider
        """
        ServiceProviderParameterResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            display_name=display_name,
            help_url=help_url,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: str,
             description: str,
             display_name: str,
             help_url: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default", default)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("help_url", help_url)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Default Name for the Service Provider
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Service Provider
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> str:
        """
        Help Url for the  Service Provider
        """
        return pulumi.get(self, "help_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Service Provider
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Service Provider
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceProviderPropertiesResponse(dict):
    """
    The Object used to describe a Service Provider supported by Bot Service
    """
    def __init__(__self__, *,
                 dev_portal_url: str,
                 display_name: str,
                 icon_url: str,
                 id: str,
                 service_provider_name: str,
                 parameters: Optional[Sequence['outputs.ServiceProviderParameterResponse']] = None):
        """
        The Object used to describe a Service Provider supported by Bot Service
        :param str dev_portal_url: Display Name of the Service Provider
        :param str display_name: Display Name of the Service Provider
        :param str icon_url: Display Name of the Service Provider
        :param str id: Id for Service Provider
        :param str service_provider_name: Display Name of the Service Provider
        :param Sequence['ServiceProviderParameterResponse'] parameters: The list of parameters for the Service Provider
        """
        ServiceProviderPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dev_portal_url=dev_portal_url,
            display_name=display_name,
            icon_url=icon_url,
            id=id,
            service_provider_name=service_provider_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dev_portal_url: str,
             display_name: str,
             icon_url: str,
             id: str,
             service_provider_name: str,
             parameters: Optional[Sequence['outputs.ServiceProviderParameterResponse']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dev_portal_url", dev_portal_url)
        _setter("display_name", display_name)
        _setter("icon_url", icon_url)
        _setter("id", id)
        _setter("service_provider_name", service_provider_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="devPortalUrl")
    def dev_portal_url(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "dev_portal_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id for Service Provider
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ServiceProviderParameterResponse']]:
        """
        The list of parameters for the Service Provider
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ServiceProviderResponse(dict):
    """
    Service Provider Definition
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ServiceProviderPropertiesResponse'] = None):
        """
        Service Provider Definition
        :param 'ServiceProviderPropertiesResponse' properties: The Properties of a Service Provider Object
        """
        ServiceProviderResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             properties: Optional['outputs.ServiceProviderPropertiesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if properties is not None:
            _setter("properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ServiceProviderPropertiesResponse']:
        """
        The Properties of a Service Provider Object
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class SkuResponse(dict):
    """
    The SKU of the cognitive services account.
    """
    def __init__(__self__, *,
                 name: str,
                 tier: str):
        """
        The SKU of the cognitive services account.
        :param str name: The sku name
        :param str tier: Gets the sku tier. This is based on the SKU name.
        """
        SkuResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            tier=tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             tier: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The sku name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        Gets the sku tier. This is based on the SKU name.
        """
        return pulumi.get(self, "tier")


