# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ServiceProviderParameterResponse',
    'ServiceProviderParameterResponseConstraints',
    'ServiceProviderParameterResponseMetadata',
    'ServiceProviderPropertiesResponse',
    'ServiceProviderResponse',
]

@pulumi.output_type
class ServiceProviderParameterResponse(dict):
    """
    Extra Parameters specific to each Service Provider
    """
    def __init__(__self__, *,
                 default: str,
                 description: str,
                 display_name: str,
                 help_url: str,
                 metadata: 'outputs.ServiceProviderParameterResponseMetadata',
                 name: str,
                 type: str):
        """
        Extra Parameters specific to each Service Provider
        :param str default: Default Name for the Service Provider
        :param str description: Description of the Service Provider
        :param str display_name: Display Name of the Service Provider
        :param str help_url: Help Url for the  Service Provider
        :param 'ServiceProviderParameterResponseMetadata' metadata: Meta data for the Service Provider
        :param str name: Name of the Service Provider
        :param str type: Type of the Service Provider
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "help_url", help_url)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Default Name for the Service Provider
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Service Provider
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> str:
        """
        Help Url for the  Service Provider
        """
        return pulumi.get(self, "help_url")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.ServiceProviderParameterResponseMetadata':
        """
        Meta data for the Service Provider
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Service Provider
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Service Provider
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceProviderParameterResponseConstraints(dict):
    """
    the constraints of the bot meta data.
    """
    def __init__(__self__, *,
                 required: Optional[bool] = None):
        """
        the constraints of the bot meta data.
        :param bool required: Whether required the constraints of the bot meta data.
        """
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether required the constraints of the bot meta data.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class ServiceProviderParameterResponseMetadata(dict):
    """
    Meta data for the Service Provider
    """
    def __init__(__self__, *,
                 constraints: Optional['outputs.ServiceProviderParameterResponseConstraints'] = None):
        """
        Meta data for the Service Provider
        :param 'ServiceProviderParameterResponseConstraints' constraints: the constraints of the bot meta data.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ServiceProviderParameterResponseConstraints']:
        """
        the constraints of the bot meta data.
        """
        return pulumi.get(self, "constraints")


@pulumi.output_type
class ServiceProviderPropertiesResponse(dict):
    """
    The Object used to describe a Service Provider supported by Bot Service
    """
    def __init__(__self__, *,
                 dev_portal_url: str,
                 display_name: str,
                 id: str,
                 service_provider_name: str,
                 icon_url: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ServiceProviderParameterResponse']] = None):
        """
        The Object used to describe a Service Provider supported by Bot Service
        :param str dev_portal_url: URL of Dev Portal
        :param str display_name: Display Name of the Service Provider
        :param str id: Id for Service Provider
        :param str service_provider_name: Name of the Service Provider
        :param str icon_url: The URL of icon
        :param Sequence['ServiceProviderParameterResponse'] parameters: The list of parameters for the Service Provider
        """
        pulumi.set(__self__, "dev_portal_url", dev_portal_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        if icon_url is None:
            icon_url = ''
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="devPortalUrl")
    def dev_portal_url(self) -> str:
        """
        URL of Dev Portal
        """
        return pulumi.get(self, "dev_portal_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Service Provider
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id for Service Provider
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        Name of the Service Provider
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[str]:
        """
        The URL of icon
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ServiceProviderParameterResponse']]:
        """
        The list of parameters for the Service Provider
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ServiceProviderResponse(dict):
    """
    Service Provider Definition
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ServiceProviderPropertiesResponse'] = None):
        """
        Service Provider Definition
        :param 'ServiceProviderPropertiesResponse' properties: The Properties of a Service Provider Object
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ServiceProviderPropertiesResponse']:
        """
        The Properties of a Service Provider Object
        """
        return pulumi.get(self, "properties")


