# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ElseConditionArgs',
    'IfConditionArgs',
    'ManagedServiceIdentityArgs',
    'StorageTaskActionArgs',
    'StorageTaskOperationArgs',
]

@pulumi.input_type
class ElseConditionArgs:
    def __init__(__self__, *,
                 operations: pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]]):
        """
        The else block of storage task operation
        :param pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]] operations: List of operations to execute in the else block
        """
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]]:
        """
        List of operations to execute in the else block
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]]):
        pulumi.set(self, "operations", value)


@pulumi.input_type
class IfConditionArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 operations: pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]]):
        """
        The if block of storage task operation
        :param pulumi.Input[str] condition: The condition predicate which is composed of object properties, eg: blob and container properties.
        :param pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]] operations: List of operations to execute when the condition predicate satisfies.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        """
        The condition predicate which is composed of object properties, eg: blob and container properties.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]]:
        """
        List of operations to execute when the condition predicate satisfies.
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: pulumi.Input[Sequence[pulumi.Input['StorageTaskOperationArgs']]]):
        pulumi.set(self, "operations", value)


@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class StorageTaskActionArgs:
    def __init__(__self__, *,
                 if_: pulumi.Input['IfConditionArgs'],
                 else_: Optional[pulumi.Input['ElseConditionArgs']] = None):
        """
        The storage task action represents conditional statements and operations to be performed on target objects.
        :param pulumi.Input['IfConditionArgs'] if_: The if block of storage task operation
        :param pulumi.Input['ElseConditionArgs'] else_: The else block of storage task operation
        """
        pulumi.set(__self__, "if_", if_)
        if else_ is not None:
            pulumi.set(__self__, "else_", else_)

    @property
    @pulumi.getter(name="if")
    def if_(self) -> pulumi.Input['IfConditionArgs']:
        """
        The if block of storage task operation
        """
        return pulumi.get(self, "if_")

    @if_.setter
    def if_(self, value: pulumi.Input['IfConditionArgs']):
        pulumi.set(self, "if_", value)

    @property
    @pulumi.getter(name="else")
    def else_(self) -> Optional[pulumi.Input['ElseConditionArgs']]:
        """
        The else block of storage task operation
        """
        return pulumi.get(self, "else_")

    @else_.setter
    def else_(self, value: Optional[pulumi.Input['ElseConditionArgs']]):
        pulumi.set(self, "else_", value)


@pulumi.input_type
class StorageTaskOperationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Union[str, 'StorageTaskOperationName']],
                 on_failure: Optional[pulumi.Input['OnFailure']] = None,
                 on_success: Optional[pulumi.Input['OnSuccess']] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Represents an operation to be performed on the object
        :param pulumi.Input[Union[str, 'StorageTaskOperationName']] name: The operation to be performed on the object.
        :param pulumi.Input['OnFailure'] on_failure: Action to be taken when the operation fails for a object.
        :param pulumi.Input['OnSuccess'] on_success: Action to be taken when the operation is successful for a object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: Key-value parameters for the operation.
        """
        pulumi.set(__self__, "name", name)
        if on_failure is not None:
            pulumi.set(__self__, "on_failure", on_failure)
        if on_success is not None:
            pulumi.set(__self__, "on_success", on_success)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'StorageTaskOperationName']]:
        """
        The operation to be performed on the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'StorageTaskOperationName']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onFailure")
    def on_failure(self) -> Optional[pulumi.Input['OnFailure']]:
        """
        Action to be taken when the operation fails for a object.
        """
        return pulumi.get(self, "on_failure")

    @on_failure.setter
    def on_failure(self, value: Optional[pulumi.Input['OnFailure']]):
        pulumi.set(self, "on_failure", value)

    @property
    @pulumi.getter(name="onSuccess")
    def on_success(self) -> Optional[pulumi.Input['OnSuccess']]:
        """
        Action to be taken when the operation is successful for a object.
        """
        return pulumi.get(self, "on_success")

    @on_success.setter
    def on_success(self, value: Optional[pulumi.Input['OnSuccess']]):
        pulumi.set(self, "on_success", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value parameters for the operation.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


