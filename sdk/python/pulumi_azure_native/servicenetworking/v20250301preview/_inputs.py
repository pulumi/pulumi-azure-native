# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AssociationSubnetArgs',
    'AssociationSubnetArgsDict',
    'IpAccessRulesPolicyArgs',
    'IpAccessRulesPolicyArgsDict',
    'IpAccessRulesSecurityPolicyArgs',
    'IpAccessRulesSecurityPolicyArgsDict',
    'IpAccessRuleArgs',
    'IpAccessRuleArgsDict',
    'SecurityPolicyConfigurationsArgs',
    'SecurityPolicyConfigurationsArgsDict',
    'WafPolicyArgs',
    'WafPolicyArgsDict',
    'WafSecurityPolicyArgs',
    'WafSecurityPolicyArgsDict',
]

MYPY = False

if not MYPY:
    class AssociationSubnetArgsDict(TypedDict):
        """
        Association Subnet.
        """
        id: pulumi.Input[str]
        """
        Association ID.
        """
elif False:
    AssociationSubnetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssociationSubnetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Association Subnet.
        :param pulumi.Input[str] id: Association ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Association ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class IpAccessRulesPolicyArgsDict(TypedDict):
        """
        Ip Access Policy
        """
        rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['IpAccessRuleArgsDict']]]]
        """
        Ip Access Policy Rules List
        """
elif False:
    IpAccessRulesPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpAccessRulesPolicyArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['IpAccessRuleArgs']]]] = None):
        """
        Ip Access Policy
        :param pulumi.Input[Sequence[pulumi.Input['IpAccessRuleArgs']]] rules: Ip Access Policy Rules List
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpAccessRuleArgs']]]]:
        """
        Ip Access Policy Rules List
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpAccessRuleArgs']]]]):
        pulumi.set(self, "rules", value)


if not MYPY:
    class IpAccessRulesSecurityPolicyArgsDict(TypedDict):
        """
        IpAccessRules Security Policy
        """
        id: pulumi.Input[str]
        """
        Resource ID of the Ip Access Rules Security Policy
        """
elif False:
    IpAccessRulesSecurityPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpAccessRulesSecurityPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        IpAccessRules Security Policy
        :param pulumi.Input[str] id: Resource ID of the Ip Access Rules Security Policy
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Resource ID of the Ip Access Rules Security Policy
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class IpAccessRuleArgsDict(TypedDict):
        """
        Ip Access Policy Rules
        """
        action: pulumi.Input[Union[str, 'IpAccessRuleAction']]
        """
        Action of the Rule
        """
        name: pulumi.Input[str]
        """
        Name of the Ip Access Rule
        """
        priority: pulumi.Input[int]
        """
        The priority of the rule. The value can be between 1 and 500. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
        """
        source_address_prefixes: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Source Address Prefixed Applied by the Rule. Asterisk '*' can also be used to match all source IPs.
        """
elif False:
    IpAccessRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpAccessRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[Union[str, 'IpAccessRuleAction']],
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 source_address_prefixes: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Ip Access Policy Rules
        :param pulumi.Input[Union[str, 'IpAccessRuleAction']] action: Action of the Rule
        :param pulumi.Input[str] name: Name of the Ip Access Rule
        :param pulumi.Input[int] priority: The priority of the rule. The value can be between 1 and 500. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_address_prefixes: Source Address Prefixed Applied by the Rule. Asterisk '*' can also be used to match all source IPs.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "source_address_prefixes", source_address_prefixes)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[Union[str, 'IpAccessRuleAction']]:
        """
        Action of the Rule
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[Union[str, 'IpAccessRuleAction']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Ip Access Rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        The priority of the rule. The value can be between 1 and 500. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="sourceAddressPrefixes")
    def source_address_prefixes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Source Address Prefixed Applied by the Rule. Asterisk '*' can also be used to match all source IPs.
        """
        return pulumi.get(self, "source_address_prefixes")

    @source_address_prefixes.setter
    def source_address_prefixes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_address_prefixes", value)


if not MYPY:
    class SecurityPolicyConfigurationsArgsDict(TypedDict):
        """
        SecurityPolicyConfigurations Subresource of Traffic Controller.
        """
        ip_access_rules_security_policy: NotRequired[pulumi.Input['IpAccessRulesSecurityPolicyArgsDict']]
        """
        Contains reference to a IpAccessRules-type security policy.
        """
        waf_security_policy: NotRequired[pulumi.Input['WafSecurityPolicyArgsDict']]
        """
        Contains reference to a WAF-type security policy.
        """
elif False:
    SecurityPolicyConfigurationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityPolicyConfigurationsArgs:
    def __init__(__self__, *,
                 ip_access_rules_security_policy: Optional[pulumi.Input['IpAccessRulesSecurityPolicyArgs']] = None,
                 waf_security_policy: Optional[pulumi.Input['WafSecurityPolicyArgs']] = None):
        """
        SecurityPolicyConfigurations Subresource of Traffic Controller.
        :param pulumi.Input['IpAccessRulesSecurityPolicyArgs'] ip_access_rules_security_policy: Contains reference to a IpAccessRules-type security policy.
        :param pulumi.Input['WafSecurityPolicyArgs'] waf_security_policy: Contains reference to a WAF-type security policy.
        """
        if ip_access_rules_security_policy is not None:
            pulumi.set(__self__, "ip_access_rules_security_policy", ip_access_rules_security_policy)
        if waf_security_policy is not None:
            pulumi.set(__self__, "waf_security_policy", waf_security_policy)

    @property
    @pulumi.getter(name="ipAccessRulesSecurityPolicy")
    def ip_access_rules_security_policy(self) -> Optional[pulumi.Input['IpAccessRulesSecurityPolicyArgs']]:
        """
        Contains reference to a IpAccessRules-type security policy.
        """
        return pulumi.get(self, "ip_access_rules_security_policy")

    @ip_access_rules_security_policy.setter
    def ip_access_rules_security_policy(self, value: Optional[pulumi.Input['IpAccessRulesSecurityPolicyArgs']]):
        pulumi.set(self, "ip_access_rules_security_policy", value)

    @property
    @pulumi.getter(name="wafSecurityPolicy")
    def waf_security_policy(self) -> Optional[pulumi.Input['WafSecurityPolicyArgs']]:
        """
        Contains reference to a WAF-type security policy.
        """
        return pulumi.get(self, "waf_security_policy")

    @waf_security_policy.setter
    def waf_security_policy(self, value: Optional[pulumi.Input['WafSecurityPolicyArgs']]):
        pulumi.set(self, "waf_security_policy", value)


if not MYPY:
    class WafPolicyArgsDict(TypedDict):
        """
        Web Application Firewall Policy
        """
        id: pulumi.Input[str]
        """
        Resource ID of the WAF
        """
elif False:
    WafPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WafPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Web Application Firewall Policy
        :param pulumi.Input[str] id: Resource ID of the WAF
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Resource ID of the WAF
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class WafSecurityPolicyArgsDict(TypedDict):
        """
        Web Application Firewall Security Policy
        """
        id: pulumi.Input[str]
        """
        Resource ID of the Waf Security Policy
        """
elif False:
    WafSecurityPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WafSecurityPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Web Application Firewall Security Policy
        :param pulumi.Input[str] id: Resource ID of the Waf Security Policy
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Resource ID of the Waf Security Policy
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


