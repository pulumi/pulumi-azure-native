# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ActionStatusResponse',
    'BranchResponse',
    'BranchStatusResponse',
    'CapabilityPropertiesResponse',
    'ContinuousActionResponse',
    'CustomerDataStoragePropertiesResponse',
    'DelayActionResponse',
    'DiscreteActionResponse',
    'ExperimentExecutionActionTargetDetailsErrorResponse',
    'ExperimentExecutionActionTargetDetailsPropertiesResponse',
    'ExperimentExecutionDetailsPropertiesResponseRunInformation',
    'ExperimentIdentityResponse',
    'ExperimentPropertiesResponse',
    'KeyValuePairResponse',
    'ListSelectorResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'QuerySelectorResponse',
    'SimpleFilterParametersResponse',
    'SimpleFilterResponse',
    'StepResponse',
    'StepStatusResponse',
    'SystemDataResponse',
    'TargetReferenceResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class ActionStatusResponse(dict):
    """
    Model that represents the an action and its status.
    """
    def __init__(__self__, *,
                 action_id: builtins.str,
                 action_name: builtins.str,
                 end_time: builtins.str,
                 start_time: builtins.str,
                 status: builtins.str,
                 targets: Sequence['outputs.ExperimentExecutionActionTargetDetailsPropertiesResponse']):
        """
        Model that represents the an action and its status.
        :param builtins.str action_id: The id of the action status.
        :param builtins.str action_name: The name of the action status.
        :param builtins.str end_time: String that represents the end time of the action.
        :param builtins.str start_time: String that represents the start time of the action.
        :param builtins.str status: The status of the action.
        :param Sequence['ExperimentExecutionActionTargetDetailsPropertiesResponse'] targets: The array of targets.
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> builtins.str:
        """
        The id of the action status.
        """
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> builtins.str:
        """
        The name of the action status.
        """
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> builtins.str:
        """
        String that represents the end time of the action.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.str:
        """
        String that represents the start time of the action.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the action.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.ExperimentExecutionActionTargetDetailsPropertiesResponse']:
        """
        The array of targets.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class BranchResponse(dict):
    """
    Model that represents a branch in the step. 9 total per experiment.
    """
    def __init__(__self__, *,
                 actions: Sequence[Any],
                 name: builtins.str):
        """
        Model that represents a branch in the step. 9 total per experiment.
        :param Sequence[Union['ContinuousActionResponse', 'DelayActionResponse', 'DiscreteActionResponse']] actions: List of actions.
        :param builtins.str name: String of the branch name.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[Any]:
        """
        List of actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        String of the branch name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BranchStatusResponse(dict):
    """
    Model that represents the a list of actions and action statuses.
    """
    def __init__(__self__, *,
                 actions: Sequence['outputs.ActionStatusResponse'],
                 branch_id: builtins.str,
                 branch_name: builtins.str,
                 status: builtins.str):
        """
        Model that represents the a list of actions and action statuses.
        :param Sequence['ActionStatusResponse'] actions: The array of actions.
        :param builtins.str branch_id: The id of the branch status.
        :param builtins.str branch_name: The name of the branch status.
        :param builtins.str status: The status of the branch.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "branch_id", branch_id)
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.ActionStatusResponse']:
        """
        The array of actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> builtins.str:
        """
        The id of the branch status.
        """
        return pulumi.get(self, "branch_id")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> builtins.str:
        """
        The name of the branch status.
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the branch.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class CapabilityPropertiesResponse(dict):
    """
    Model that represents the Capability properties model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parametersSchema":
            suggest = "parameters_schema"
        elif key == "targetType":
            suggest = "target_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CapabilityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CapabilityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CapabilityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: builtins.str,
                 parameters_schema: builtins.str,
                 publisher: builtins.str,
                 target_type: builtins.str,
                 urn: builtins.str):
        """
        Model that represents the Capability properties model.
        :param builtins.str description: Localized string of the description.
        :param builtins.str parameters_schema: URL to retrieve JSON schema of the Capability parameters.
        :param builtins.str publisher: String of the Publisher that this Capability extends.
        :param builtins.str target_type: String of the Target Type that this Capability extends.
        :param builtins.str urn: String of the URN for this Capability Type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "parameters_schema", parameters_schema)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "target_type", target_type)
        pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Localized string of the description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="parametersSchema")
    def parameters_schema(self) -> builtins.str:
        """
        URL to retrieve JSON schema of the Capability parameters.
        """
        return pulumi.get(self, "parameters_schema")

    @property
    @pulumi.getter
    def publisher(self) -> builtins.str:
        """
        String of the Publisher that this Capability extends.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> builtins.str:
        """
        String of the Target Type that this Capability extends.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter
    def urn(self) -> builtins.str:
        """
        String of the URN for this Capability Type.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class ContinuousActionResponse(dict):
    """
    Model that represents a continuous action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorId":
            suggest = "selector_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContinuousActionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContinuousActionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContinuousActionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: builtins.str,
                 name: builtins.str,
                 parameters: Sequence['outputs.KeyValuePairResponse'],
                 selector_id: builtins.str,
                 type: builtins.str):
        """
        Model that represents a continuous action.
        :param builtins.str duration: ISO8601 formatted string that represents a duration.
        :param builtins.str name: String that represents a Capability URN.
        :param Sequence['KeyValuePairResponse'] parameters: List of key value pairs.
        :param builtins.str selector_id: String that represents a selector.
        :param builtins.str type: Enum that discriminates between action models.
               Expected value is 'continuous'.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "selector_id", selector_id)
        pulumi.set(__self__, "type", 'continuous')

    @property
    @pulumi.getter
    def duration(self) -> builtins.str:
        """
        ISO8601 formatted string that represents a duration.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        String that represents a Capability URN.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.KeyValuePairResponse']:
        """
        List of key value pairs.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="selectorId")
    def selector_id(self) -> builtins.str:
        """
        String that represents a selector.
        """
        return pulumi.get(self, "selector_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum that discriminates between action models.
        Expected value is 'continuous'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CustomerDataStoragePropertiesResponse(dict):
    """
    Model that represents the Customer Managed Storage for an Experiment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobContainerName":
            suggest = "blob_container_name"
        elif key == "storageAccountResourceId":
            suggest = "storage_account_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerDataStoragePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerDataStoragePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerDataStoragePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_container_name: Optional[builtins.str] = None,
                 storage_account_resource_id: Optional[builtins.str] = None):
        """
        Model that represents the Customer Managed Storage for an Experiment.
        :param builtins.str blob_container_name: Name of the Azure Blob Storage container to use or create.
        :param builtins.str storage_account_resource_id: ARM Resource ID of the Storage account to use for Customer Data storage.
        """
        if blob_container_name is not None:
            pulumi.set(__self__, "blob_container_name", blob_container_name)
        if storage_account_resource_id is not None:
            pulumi.set(__self__, "storage_account_resource_id", storage_account_resource_id)

    @property
    @pulumi.getter(name="blobContainerName")
    def blob_container_name(self) -> Optional[builtins.str]:
        """
        Name of the Azure Blob Storage container to use or create.
        """
        return pulumi.get(self, "blob_container_name")

    @property
    @pulumi.getter(name="storageAccountResourceId")
    def storage_account_resource_id(self) -> Optional[builtins.str]:
        """
        ARM Resource ID of the Storage account to use for Customer Data storage.
        """
        return pulumi.get(self, "storage_account_resource_id")


@pulumi.output_type
class DelayActionResponse(dict):
    """
    Model that represents a delay action.
    """
    def __init__(__self__, *,
                 duration: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        Model that represents a delay action.
        :param builtins.str duration: ISO8601 formatted string that represents a duration.
        :param builtins.str name: String that represents a Capability URN.
        :param builtins.str type: Enum that discriminates between action models.
               Expected value is 'delay'.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", 'delay')

    @property
    @pulumi.getter
    def duration(self) -> builtins.str:
        """
        ISO8601 formatted string that represents a duration.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        String that represents a Capability URN.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum that discriminates between action models.
        Expected value is 'delay'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DiscreteActionResponse(dict):
    """
    Model that represents a discrete action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorId":
            suggest = "selector_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscreteActionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscreteActionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscreteActionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 parameters: Sequence['outputs.KeyValuePairResponse'],
                 selector_id: builtins.str,
                 type: builtins.str):
        """
        Model that represents a discrete action.
        :param builtins.str name: String that represents a Capability URN.
        :param Sequence['KeyValuePairResponse'] parameters: List of key value pairs.
        :param builtins.str selector_id: String that represents a selector.
        :param builtins.str type: Enum that discriminates between action models.
               Expected value is 'discrete'.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "selector_id", selector_id)
        pulumi.set(__self__, "type", 'discrete')

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        String that represents a Capability URN.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.KeyValuePairResponse']:
        """
        List of key value pairs.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="selectorId")
    def selector_id(self) -> builtins.str:
        """
        String that represents a selector.
        """
        return pulumi.get(self, "selector_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum that discriminates between action models.
        Expected value is 'discrete'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExperimentExecutionActionTargetDetailsErrorResponse(dict):
    """
    Model that represents the Experiment action target details error model.
    """
    def __init__(__self__, *,
                 code: builtins.str,
                 message: builtins.str):
        """
        Model that represents the Experiment action target details error model.
        :param builtins.str code: The error code.
        :param builtins.str message: The error message
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        The error message
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ExperimentExecutionActionTargetDetailsPropertiesResponse(dict):
    """
    Model that represents the Experiment action target details properties model.
    """
    def __init__(__self__, *,
                 error: 'outputs.ExperimentExecutionActionTargetDetailsErrorResponse',
                 status: builtins.str,
                 target: builtins.str,
                 target_completed_time: builtins.str,
                 target_failed_time: builtins.str):
        """
        Model that represents the Experiment action target details properties model.
        :param 'ExperimentExecutionActionTargetDetailsErrorResponse' error: The error of the action.
        :param builtins.str status: The status of the execution.
        :param builtins.str target: The target for the action.
        :param builtins.str target_completed_time: String that represents the completed date time.
        :param builtins.str target_failed_time: String that represents the failed date time.
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_completed_time", target_completed_time)
        pulumi.set(__self__, "target_failed_time", target_failed_time)

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ExperimentExecutionActionTargetDetailsErrorResponse':
        """
        The error of the action.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> builtins.str:
        """
        The target for the action.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetCompletedTime")
    def target_completed_time(self) -> builtins.str:
        """
        String that represents the completed date time.
        """
        return pulumi.get(self, "target_completed_time")

    @property
    @pulumi.getter(name="targetFailedTime")
    def target_failed_time(self) -> builtins.str:
        """
        String that represents the failed date time.
        """
        return pulumi.get(self, "target_failed_time")


@pulumi.output_type
class ExperimentExecutionDetailsPropertiesResponseRunInformation(dict):
    """
    The information of the experiment run.
    """
    def __init__(__self__, *,
                 steps: Sequence['outputs.StepStatusResponse']):
        """
        The information of the experiment run.
        :param Sequence['StepStatusResponse'] steps: The steps of the experiment run.
        """
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.StepStatusResponse']:
        """
        The steps of the experiment run.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class ExperimentIdentityResponse(dict):
    """
    The identity of the experiment resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExperimentIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExperimentIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExperimentIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: builtins.str,
                 tenant_id: builtins.str,
                 type: builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        The identity of the experiment resource.
        :param builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ExperimentPropertiesResponse(dict):
    """
    Model that represents the Experiment properties model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "customerDataStorage":
            suggest = "customer_data_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExperimentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExperimentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExperimentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 selectors: Sequence[Any],
                 steps: Sequence['outputs.StepResponse'],
                 customer_data_storage: Optional['outputs.CustomerDataStoragePropertiesResponse'] = None):
        """
        Model that represents the Experiment properties model.
        :param builtins.str provisioning_state: Most recent provisioning state for the given experiment resource.
        :param Sequence[Union['ListSelectorResponse', 'QuerySelectorResponse']] selectors: List of selectors.
        :param Sequence['StepResponse'] steps: List of steps.
        :param 'CustomerDataStoragePropertiesResponse' customer_data_storage: Optional customer-managed Storage account where Experiment schema will be stored.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "selectors", selectors)
        pulumi.set(__self__, "steps", steps)
        if customer_data_storage is not None:
            pulumi.set(__self__, "customer_data_storage", customer_data_storage)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Most recent provisioning state for the given experiment resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence[Any]:
        """
        List of selectors.
        """
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.StepResponse']:
        """
        List of steps.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="customerDataStorage")
    def customer_data_storage(self) -> Optional['outputs.CustomerDataStoragePropertiesResponse']:
        """
        Optional customer-managed Storage account where Experiment schema will be stored.
        """
        return pulumi.get(self, "customer_data_storage")


@pulumi.output_type
class KeyValuePairResponse(dict):
    """
    A map to describe the settings of an action.
    """
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        A map to describe the settings of an action.
        :param builtins.str key: The name of the setting for the action.
        :param builtins.str value: The value of the setting for the action.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The name of the setting for the action.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the setting for the action.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ListSelectorResponse(dict):
    """
    Model that represents a list selector.
    """
    def __init__(__self__, *,
                 id: builtins.str,
                 targets: Sequence['outputs.TargetReferenceResponse'],
                 type: builtins.str,
                 filter: Optional['outputs.SimpleFilterResponse'] = None):
        """
        Model that represents a list selector.
        :param builtins.str id: String of the selector ID.
        :param Sequence['TargetReferenceResponse'] targets: List of Target references.
        :param builtins.str type: Enum of the selector type.
               Expected value is 'List'.
        :param 'SimpleFilterResponse' filter: Model that represents available filter types that can be applied to a targets list.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "type", 'List')
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        String of the selector ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.TargetReferenceResponse']:
        """
        List of Target references.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum of the selector type.
        Expected value is 'List'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.SimpleFilterResponse']:
        """
        Model that represents available filter types that can be applied to a targets list.
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    The private endpoint connection resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemData":
            suggest = "system_data"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Sequence[builtins.str],
                 id: builtins.str,
                 name: builtins.str,
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
                 provisioning_state: builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: builtins.str,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None):
        """
        The private endpoint connection resource.
        :param Sequence[builtins.str] group_ids: The group ids for the private endpoint resource.
        :param builtins.str id: Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        :param builtins.str name: The name of the resource
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param builtins.str provisioning_state: The provisioning state of the private endpoint connection resource.
        :param 'SystemDataResponse' system_data: Azure Resource Manager metadata containing createdBy and modifiedBy information.
        :param builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param 'PrivateEndpointResponse' private_endpoint: The private endpoint resource.
        """
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[builtins.str]:
        """
        The group ids for the private endpoint resource.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStateResponse':
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The provisioning state of the private endpoint connection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The private endpoint resource.
        """
        return pulumi.get(self, "private_endpoint")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The private endpoint resource.
    """
    def __init__(__self__, *,
                 id: builtins.str):
        """
        The private endpoint resource.
        :param builtins.str id: The ARM identifier for private endpoint.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ARM identifier for private endpoint.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    A collection of information about the state of the connection between service consumer and provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param builtins.str actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param builtins.str description: The reason for approval/rejection of the connection.
        :param builtins.str status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[builtins.str]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class QuerySelectorResponse(dict):
    """
    Model that represents a query selector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryString":
            suggest = "query_string"
        elif key == "subscriptionIds":
            suggest = "subscription_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuerySelectorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuerySelectorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuerySelectorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 query_string: builtins.str,
                 subscription_ids: Sequence[builtins.str],
                 type: builtins.str,
                 filter: Optional['outputs.SimpleFilterResponse'] = None):
        """
        Model that represents a query selector.
        :param builtins.str id: String of the selector ID.
        :param builtins.str query_string: Azure Resource Graph (ARG) Query Language query for target resources.
        :param Sequence[builtins.str] subscription_ids: Subscription id list to scope resource query.
        :param builtins.str type: Enum of the selector type.
               Expected value is 'Query'.
        :param 'SimpleFilterResponse' filter: Model that represents available filter types that can be applied to a targets list.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "subscription_ids", subscription_ids)
        pulumi.set(__self__, "type", 'Query')
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        String of the selector ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> builtins.str:
        """
        Azure Resource Graph (ARG) Query Language query for target resources.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="subscriptionIds")
    def subscription_ids(self) -> Sequence[builtins.str]:
        """
        Subscription id list to scope resource query.
        """
        return pulumi.get(self, "subscription_ids")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum of the selector type.
        Expected value is 'Query'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.SimpleFilterResponse']:
        """
        Model that represents available filter types that can be applied to a targets list.
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class SimpleFilterParametersResponse(dict):
    """
    Model that represents the Simple filter parameters.
    """
    def __init__(__self__, *,
                 zones: Optional[Sequence[builtins.str]] = None):
        """
        Model that represents the Simple filter parameters.
        :param Sequence[builtins.str] zones: List of Azure availability zones to filter targets by.
        """
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[builtins.str]]:
        """
        List of Azure availability zones to filter targets by.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class SimpleFilterResponse(dict):
    """
    Model that represents a simple target filter.
    """
    def __init__(__self__, *,
                 type: builtins.str,
                 parameters: Optional['outputs.SimpleFilterParametersResponse'] = None):
        """
        Model that represents a simple target filter.
        :param builtins.str type: Enum that discriminates between filter types. Currently only `Simple` type is supported.
               Expected value is 'Simple'.
        :param 'SimpleFilterParametersResponse' parameters: Model that represents the Simple filter parameters.
        """
        pulumi.set(__self__, "type", 'Simple')
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum that discriminates between filter types. Currently only `Simple` type is supported.
        Expected value is 'Simple'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def parameters(self) -> Optional['outputs.SimpleFilterParametersResponse']:
        """
        Model that represents the Simple filter parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class StepResponse(dict):
    """
    Model that represents a step in the Experiment resource.
    """
    def __init__(__self__, *,
                 branches: Sequence['outputs.BranchResponse'],
                 name: builtins.str):
        """
        Model that represents a step in the Experiment resource.
        :param Sequence['BranchResponse'] branches: List of branches.
        :param builtins.str name: String of the step name.
        """
        pulumi.set(__self__, "branches", branches)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def branches(self) -> Sequence['outputs.BranchResponse']:
        """
        List of branches.
        """
        return pulumi.get(self, "branches")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        String of the step name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StepStatusResponse(dict):
    """
    Model that represents the a list of branches and branch statuses.
    """
    def __init__(__self__, *,
                 branches: Sequence['outputs.BranchStatusResponse'],
                 status: builtins.str,
                 step_id: builtins.str,
                 step_name: builtins.str):
        """
        Model that represents the a list of branches and branch statuses.
        :param Sequence['BranchStatusResponse'] branches: The array of branches.
        :param builtins.str status: The value of the status of the step.
        :param builtins.str step_id: The id of the step.
        :param builtins.str step_name: The name of the step.
        """
        pulumi.set(__self__, "branches", branches)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_id", step_id)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter
    def branches(self) -> Sequence['outputs.BranchStatusResponse']:
        """
        The array of branches.
        """
        return pulumi.get(self, "branches")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The value of the status of the step.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> builtins.str:
        """
        The id of the step.
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TargetReferenceResponse(dict):
    """
    Model that represents a reference to a Target in the selector.
    """
    def __init__(__self__, *,
                 id: builtins.str,
                 type: builtins.str):
        """
        Model that represents a reference to a Target in the selector.
        :param builtins.str id: String of the resource ID of a Target resource.
        :param builtins.str type: Enum of the Target reference type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        String of the resource ID of a Target resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Enum of the Target reference type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: builtins.str,
                 principal_id: builtins.str):
        """
        User assigned identity properties
        :param builtins.str client_id: The client ID of the assigned identity.
        :param builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


