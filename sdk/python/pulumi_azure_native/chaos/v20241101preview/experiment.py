# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ExperimentArgs', 'Experiment']

@pulumi.input_type
class ExperimentArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 selectors: pulumi.Input[Sequence[pulumi.Input[Union['ChaosTargetListSelectorArgs', 'ChaosTargetQuerySelectorArgs']]]],
                 steps: pulumi.Input[Sequence[pulumi.Input['ChaosExperimentStepArgs']]],
                 customer_data_storage: Optional[pulumi.Input['CustomerDataStoragePropertiesArgs']] = None,
                 experiment_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedServiceIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Experiment resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChaosTargetListSelectorArgs', 'ChaosTargetQuerySelectorArgs']]]] selectors: List of selectors.
        :param pulumi.Input[Sequence[pulumi.Input['ChaosExperimentStepArgs']]] steps: List of steps.
        :param pulumi.Input['CustomerDataStoragePropertiesArgs'] customer_data_storage: Optional customer-managed Storage account where Experiment schema will be stored.
        :param pulumi.Input[str] experiment_name: String that represents a Experiment resource name.
        :param pulumi.Input['ManagedServiceIdentityArgs'] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "selectors", selectors)
        pulumi.set(__self__, "steps", steps)
        if customer_data_storage is not None:
            pulumi.set(__self__, "customer_data_storage", customer_data_storage)
        if experiment_name is not None:
            pulumi.set(__self__, "experiment_name", experiment_name)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def selectors(self) -> pulumi.Input[Sequence[pulumi.Input[Union['ChaosTargetListSelectorArgs', 'ChaosTargetQuerySelectorArgs']]]]:
        """
        List of selectors.
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: pulumi.Input[Sequence[pulumi.Input[Union['ChaosTargetListSelectorArgs', 'ChaosTargetQuerySelectorArgs']]]]):
        pulumi.set(self, "selectors", value)

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Input[Sequence[pulumi.Input['ChaosExperimentStepArgs']]]:
        """
        List of steps.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: pulumi.Input[Sequence[pulumi.Input['ChaosExperimentStepArgs']]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter(name="customerDataStorage")
    def customer_data_storage(self) -> Optional[pulumi.Input['CustomerDataStoragePropertiesArgs']]:
        """
        Optional customer-managed Storage account where Experiment schema will be stored.
        """
        return pulumi.get(self, "customer_data_storage")

    @customer_data_storage.setter
    def customer_data_storage(self, value: Optional[pulumi.Input['CustomerDataStoragePropertiesArgs']]):
        pulumi.set(self, "customer_data_storage", value)

    @property
    @pulumi.getter(name="experimentName")
    def experiment_name(self) -> Optional[pulumi.Input[str]]:
        """
        String that represents a Experiment resource name.
        """
        return pulumi.get(self, "experiment_name")

    @experiment_name.setter
    def experiment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "experiment_name", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedServiceIdentityArgs']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedServiceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Experiment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_data_storage: Optional[pulumi.Input[Union['CustomerDataStoragePropertiesArgs', 'CustomerDataStoragePropertiesArgsDict']]] = None,
                 experiment_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['ChaosTargetListSelectorArgs', 'ChaosTargetListSelectorArgsDict'], Union['ChaosTargetQuerySelectorArgs', 'ChaosTargetQuerySelectorArgsDict']]]]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChaosExperimentStepArgs', 'ChaosExperimentStepArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Model that represents a Experiment resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CustomerDataStoragePropertiesArgs', 'CustomerDataStoragePropertiesArgsDict']] customer_data_storage: Optional customer-managed Storage account where Experiment schema will be stored.
        :param pulumi.Input[str] experiment_name: String that represents a Experiment resource name.
        :param pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input[Union[Union['ChaosTargetListSelectorArgs', 'ChaosTargetListSelectorArgsDict'], Union['ChaosTargetQuerySelectorArgs', 'ChaosTargetQuerySelectorArgsDict']]]]] selectors: List of selectors.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChaosExperimentStepArgs', 'ChaosExperimentStepArgsDict']]]] steps: List of steps.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExperimentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Model that represents a Experiment resource.

        :param str resource_name: The name of the resource.
        :param ExperimentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExperimentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_data_storage: Optional[pulumi.Input[Union['CustomerDataStoragePropertiesArgs', 'CustomerDataStoragePropertiesArgsDict']]] = None,
                 experiment_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[Union['ManagedServiceIdentityArgs', 'ManagedServiceIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input[Union[Union['ChaosTargetListSelectorArgs', 'ChaosTargetListSelectorArgsDict'], Union['ChaosTargetQuerySelectorArgs', 'ChaosTargetQuerySelectorArgsDict']]]]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChaosExperimentStepArgs', 'ChaosExperimentStepArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExperimentArgs.__new__(ExperimentArgs)

            __props__.__dict__["customer_data_storage"] = customer_data_storage
            __props__.__dict__["experiment_name"] = experiment_name
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if selectors is None and not opts.urn:
                raise TypeError("Missing required property 'selectors'")
            __props__.__dict__["selectors"] = selectors
            if steps is None and not opts.urn:
                raise TypeError("Missing required property 'steps'")
            __props__.__dict__["steps"] = steps
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:chaos/v20210915preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20220701preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20221001preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20230401preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20230415preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20230901preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20231027preview:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20231101:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20240101:Experiment"), pulumi.Alias(type_="azure-native:chaos/v20240322preview:Experiment"), pulumi.Alias(type_="azure-native:chaos:Experiment")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Experiment, __self__).__init__(
            'azure-native:chaos/v20241101preview:Experiment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Experiment':
        """
        Get an existing Experiment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ExperimentArgs.__new__(ExperimentArgs)

        __props__.__dict__["customer_data_storage"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["selectors"] = None
        __props__.__dict__["steps"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return Experiment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customerDataStorage")
    def customer_data_storage(self) -> pulumi.Output[Optional['outputs.CustomerDataStoragePropertiesResponse']]:
        """
        Optional customer-managed Storage account where Experiment schema will be stored.
        """
        return pulumi.get(self, "customer_data_storage")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ManagedServiceIdentityResponse']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Most recent provisioning state for the given experiment resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def selectors(self) -> pulumi.Output[Sequence[Any]]:
        """
        List of selectors.
        """
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Sequence['outputs.ChaosExperimentStepResponse']]:
        """
        List of steps.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

