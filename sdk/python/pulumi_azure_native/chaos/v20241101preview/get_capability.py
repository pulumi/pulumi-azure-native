# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetCapabilityResult',
    'AwaitableGetCapabilityResult',
    'get_capability',
    'get_capability_output',
]

@pulumi.output_type
class GetCapabilityResult:
    """
    Model that represents a Capability resource.
    """
    def __init__(__self__, description=None, id=None, name=None, parameters_schema=None, provisioning_state=None, publisher=None, system_data=None, target_type=None, type=None, urn=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters_schema and not isinstance(parameters_schema, str):
            raise TypeError("Expected argument 'parameters_schema' to be a str")
        pulumi.set(__self__, "parameters_schema", parameters_schema)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if publisher and not isinstance(publisher, str):
            raise TypeError("Expected argument 'publisher' to be a str")
        pulumi.set(__self__, "publisher", publisher)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if target_type and not isinstance(target_type, str):
            raise TypeError("Expected argument 'target_type' to be a str")
        pulumi.set(__self__, "target_type", target_type)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if urn and not isinstance(urn, str):
            raise TypeError("Expected argument 'urn' to be a str")
        pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Localized string of the description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parametersSchema")
    def parameters_schema(self) -> str:
        """
        URL to retrieve JSON schema of the Capability parameters.
        """
        return pulumi.get(self, "parameters_schema")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Resource provisioning state. Not currently in use because resource is created synchronously.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        """
        String of the Publisher that this Capability extends.
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        """
        String of the Target Type that this Capability extends.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def urn(self) -> str:
        """
        String of the URN for this Capability Type.
        """
        return pulumi.get(self, "urn")


class AwaitableGetCapabilityResult(GetCapabilityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCapabilityResult(
            description=self.description,
            id=self.id,
            name=self.name,
            parameters_schema=self.parameters_schema,
            provisioning_state=self.provisioning_state,
            publisher=self.publisher,
            system_data=self.system_data,
            target_type=self.target_type,
            type=self.type,
            urn=self.urn)


def get_capability(capability_name: Optional[str] = None,
                   parent_provider_namespace: Optional[str] = None,
                   parent_resource_name: Optional[str] = None,
                   parent_resource_type: Optional[str] = None,
                   resource_group_name: Optional[str] = None,
                   target_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCapabilityResult:
    """
    Get a Capability resource that extends a Target resource.


    :param str capability_name: String that represents a Capability resource name.
    :param str parent_provider_namespace: The parent resource provider namespace.
    :param str parent_resource_name: The parent resource name.
    :param str parent_resource_type: The parent resource type.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str target_name: String that represents a Target resource name.
    """
    __args__ = dict()
    __args__['capabilityName'] = capability_name
    __args__['parentProviderNamespace'] = parent_provider_namespace
    __args__['parentResourceName'] = parent_resource_name
    __args__['parentResourceType'] = parent_resource_type
    __args__['resourceGroupName'] = resource_group_name
    __args__['targetName'] = target_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:chaos/v20241101preview:getCapability', __args__, opts=opts, typ=GetCapabilityResult).value

    return AwaitableGetCapabilityResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        parameters_schema=pulumi.get(__ret__, 'parameters_schema'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        publisher=pulumi.get(__ret__, 'publisher'),
        system_data=pulumi.get(__ret__, 'system_data'),
        target_type=pulumi.get(__ret__, 'target_type'),
        type=pulumi.get(__ret__, 'type'),
        urn=pulumi.get(__ret__, 'urn'))
def get_capability_output(capability_name: Optional[pulumi.Input[str]] = None,
                          parent_provider_namespace: Optional[pulumi.Input[str]] = None,
                          parent_resource_name: Optional[pulumi.Input[str]] = None,
                          parent_resource_type: Optional[pulumi.Input[str]] = None,
                          resource_group_name: Optional[pulumi.Input[str]] = None,
                          target_name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCapabilityResult]:
    """
    Get a Capability resource that extends a Target resource.


    :param str capability_name: String that represents a Capability resource name.
    :param str parent_provider_namespace: The parent resource provider namespace.
    :param str parent_resource_name: The parent resource name.
    :param str parent_resource_type: The parent resource type.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str target_name: String that represents a Target resource name.
    """
    __args__ = dict()
    __args__['capabilityName'] = capability_name
    __args__['parentProviderNamespace'] = parent_provider_namespace
    __args__['parentResourceName'] = parent_resource_name
    __args__['parentResourceType'] = parent_resource_type
    __args__['resourceGroupName'] = resource_group_name
    __args__['targetName'] = target_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:chaos/v20241101preview:getCapability', __args__, opts=opts, typ=GetCapabilityResult)
    return __ret__.apply(lambda __response__: GetCapabilityResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        parameters_schema=pulumi.get(__response__, 'parameters_schema'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        publisher=pulumi.get(__response__, 'publisher'),
        system_data=pulumi.get(__response__, 'system_data'),
        target_type=pulumi.get(__response__, 'target_type'),
        type=pulumi.get(__response__, 'type'),
        urn=pulumi.get(__response__, 'urn')))
