# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ActionStatusResponse',
    'BranchStatusResponse',
    'ExperimentExecutionActionTargetDetailsErrorResponse',
    'ExperimentExecutionActionTargetDetailsPropertiesResponse',
    'ExperimentExecutionDetailsPropertiesResponseRunInformation',
    'StepStatusResponse',
]

@pulumi.output_type
class ActionStatusResponse(dict):
    """
    Model that represents the an action and its status.
    """
    def __init__(__self__, *,
                 action_id: str,
                 action_name: str,
                 end_time: str,
                 start_time: str,
                 status: str,
                 targets: Sequence['outputs.ExperimentExecutionActionTargetDetailsPropertiesResponse']):
        """
        Model that represents the an action and its status.
        :param str action_id: The id of the action status.
        :param str action_name: The name of the action status.
        :param str end_time: String that represents the end time of the action.
        :param str start_time: String that represents the start time of the action.
        :param str status: The status of the action.
        :param Sequence['ExperimentExecutionActionTargetDetailsPropertiesResponse'] targets: The array of targets.
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        """
        The id of the action status.
        """
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        """
        The name of the action status.
        """
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        String that represents the end time of the action.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        String that represents the start time of the action.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the action.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.ExperimentExecutionActionTargetDetailsPropertiesResponse']:
        """
        The array of targets.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class BranchStatusResponse(dict):
    """
    Model that represents the a list of actions and action statuses.
    """
    def __init__(__self__, *,
                 actions: Sequence['outputs.ActionStatusResponse'],
                 branch_id: str,
                 branch_name: str,
                 status: str):
        """
        Model that represents the a list of actions and action statuses.
        :param Sequence['ActionStatusResponse'] actions: The array of actions.
        :param str branch_id: The id of the branch status.
        :param str branch_name: The name of the branch status.
        :param str status: The status of the branch.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "branch_id", branch_id)
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.ActionStatusResponse']:
        """
        The array of actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> str:
        """
        The id of the branch status.
        """
        return pulumi.get(self, "branch_id")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> str:
        """
        The name of the branch status.
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the branch.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ExperimentExecutionActionTargetDetailsErrorResponse(dict):
    """
    Model that represents the Experiment action target details error model.
    """
    def __init__(__self__, *,
                 code: str,
                 message: str):
        """
        Model that represents the Experiment action target details error model.
        :param str code: The error code.
        :param str message: The error message
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ExperimentExecutionActionTargetDetailsPropertiesResponse(dict):
    """
    Model that represents the Experiment action target details properties model.
    """
    def __init__(__self__, *,
                 error: 'outputs.ExperimentExecutionActionTargetDetailsErrorResponse',
                 status: str,
                 target: str,
                 target_completed_time: str,
                 target_failed_time: str):
        """
        Model that represents the Experiment action target details properties model.
        :param 'ExperimentExecutionActionTargetDetailsErrorResponse' error: The error of the action.
        :param str status: The status of the execution.
        :param str target: The target for the action.
        :param str target_completed_time: String that represents the completed date time.
        :param str target_failed_time: String that represents the failed date time.
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_completed_time", target_completed_time)
        pulumi.set(__self__, "target_failed_time", target_failed_time)

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ExperimentExecutionActionTargetDetailsErrorResponse':
        """
        The error of the action.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The target for the action.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetCompletedTime")
    def target_completed_time(self) -> str:
        """
        String that represents the completed date time.
        """
        return pulumi.get(self, "target_completed_time")

    @property
    @pulumi.getter(name="targetFailedTime")
    def target_failed_time(self) -> str:
        """
        String that represents the failed date time.
        """
        return pulumi.get(self, "target_failed_time")


@pulumi.output_type
class ExperimentExecutionDetailsPropertiesResponseRunInformation(dict):
    """
    The information of the experiment run.
    """
    def __init__(__self__, *,
                 steps: Sequence['outputs.StepStatusResponse']):
        """
        The information of the experiment run.
        :param Sequence['StepStatusResponse'] steps: The steps of the experiment run.
        """
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.StepStatusResponse']:
        """
        The steps of the experiment run.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class StepStatusResponse(dict):
    """
    Model that represents the a list of branches and branch statuses.
    """
    def __init__(__self__, *,
                 branches: Sequence['outputs.BranchStatusResponse'],
                 status: str,
                 step_id: str,
                 step_name: str):
        """
        Model that represents the a list of branches and branch statuses.
        :param Sequence['BranchStatusResponse'] branches: The array of branches.
        :param str status: The value of the status of the step.
        :param str step_id: The id of the step.
        :param str step_name: The name of the step.
        """
        pulumi.set(__self__, "branches", branches)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_id", step_id)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter
    def branches(self) -> Sequence['outputs.BranchStatusResponse']:
        """
        The array of branches.
        """
        return pulumi.get(self, "branches")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The value of the status of the step.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> str:
        """
        The id of the step.
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


