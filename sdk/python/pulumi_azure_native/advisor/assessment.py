# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = ['AssessmentArgs', 'Assessment']

@pulumi.input_type
class AssessmentArgs:
    def __init__(__self__, *,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[str]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Assessment resource.
        :param pulumi.Input[str] assessment_name: Advisor assessment name.
        :param pulumi.Input[str] locale: Assessment Type Locale.
        :param pulumi.Input[str] type_id: Assessment Type Id.
        :param pulumi.Input[str] workload_id: Workload Id.
        """
        if assessment_name is not None:
            pulumi.set(__self__, "assessment_name", assessment_name)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if type_id is not None:
            pulumi.set(__self__, "type_id", type_id)
        if workload_id is not None:
            pulumi.set(__self__, "workload_id", workload_id)

    @property
    @pulumi.getter(name="assessmentName")
    def assessment_name(self) -> Optional[pulumi.Input[str]]:
        """
        Advisor assessment name.
        """
        return pulumi.get(self, "assessment_name")

    @assessment_name.setter
    def assessment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assessment_name", value)

    @property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[str]]:
        """
        Assessment Type Locale.
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale", value)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> Optional[pulumi.Input[str]]:
        """
        Assessment Type Id.
        """
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workload Id.
        """
        return pulumi.get(self, "workload_id")

    @workload_id.setter
    def workload_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_id", value)


class Assessment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[str]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The Advisor assessment result data structure.

        Uses Azure REST API version 2023-09-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assessment_name: Advisor assessment name.
        :param pulumi.Input[str] locale: Assessment Type Locale.
        :param pulumi.Input[str] type_id: Assessment Type Id.
        :param pulumi.Input[str] workload_id: Workload Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AssessmentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The Advisor assessment result data structure.

        Uses Azure REST API version 2023-09-01-preview.

        :param str resource_name: The name of the resource.
        :param AssessmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssessmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessment_name: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[str]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssessmentArgs.__new__(AssessmentArgs)

            __props__.__dict__["assessment_name"] = assessment_name
            __props__.__dict__["locale"] = locale
            __props__.__dict__["type_id"] = type_id
            __props__.__dict__["workload_id"] = workload_id
            __props__.__dict__["assessment_id"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["score"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["type_version"] = None
            __props__.__dict__["workload_name"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:advisor/v20230901preview:Assessment")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Assessment, __self__).__init__(
            'azure-native:advisor:Assessment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Assessment':
        """
        Get an existing Assessment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AssessmentArgs.__new__(AssessmentArgs)

        __props__.__dict__["assessment_id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["locale"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["score"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["type_id"] = None
        __props__.__dict__["type_version"] = None
        __props__.__dict__["workload_id"] = None
        __props__.__dict__["workload_name"] = None
        return Assessment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> pulumi.Output[str]:
        """
        Assessment Id.
        """
        return pulumi.get(self, "assessment_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Assessment Type Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locale(self) -> pulumi.Output[Optional[str]]:
        """
        Assessment Type Locale.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Assessment Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def score(self) -> pulumi.Output[int]:
        """
        Assessment Score.
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Assessment State.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Output[Optional[str]]:
        """
        Assessment Type Id.
        """
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter(name="typeVersion")
    def type_version(self) -> pulumi.Output[str]:
        """
        Assessment Type Version.
        """
        return pulumi.get(self, "type_version")

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> pulumi.Output[Optional[str]]:
        """
        Workload Id.
        """
        return pulumi.get(self, "workload_id")

    @property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> pulumi.Output[str]:
        """
        Workload Name.
        """
        return pulumi.get(self, "workload_name")

