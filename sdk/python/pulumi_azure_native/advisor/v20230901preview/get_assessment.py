# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetAssessmentResult',
    'AwaitableGetAssessmentResult',
    'get_assessment',
    'get_assessment_output',
]

@pulumi.output_type
class GetAssessmentResult:
    """
    The Advisor assessment result data structure.
    """
    def __init__(__self__, assessment_id=None, description=None, id=None, locale=None, name=None, score=None, state=None, system_data=None, type=None, type_id=None, type_version=None, workload_id=None, workload_name=None):
        if assessment_id and not isinstance(assessment_id, str):
            raise TypeError("Expected argument 'assessment_id' to be a str")
        pulumi.set(__self__, "assessment_id", assessment_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locale and not isinstance(locale, str):
            raise TypeError("Expected argument 'locale' to be a str")
        pulumi.set(__self__, "locale", locale)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if score and not isinstance(score, int):
            raise TypeError("Expected argument 'score' to be a int")
        pulumi.set(__self__, "score", score)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if type_id and not isinstance(type_id, str):
            raise TypeError("Expected argument 'type_id' to be a str")
        pulumi.set(__self__, "type_id", type_id)
        if type_version and not isinstance(type_version, str):
            raise TypeError("Expected argument 'type_version' to be a str")
        pulumi.set(__self__, "type_version", type_version)
        if workload_id and not isinstance(workload_id, str):
            raise TypeError("Expected argument 'workload_id' to be a str")
        pulumi.set(__self__, "workload_id", workload_id)
        if workload_name and not isinstance(workload_name, str):
            raise TypeError("Expected argument 'workload_name' to be a str")
        pulumi.set(__self__, "workload_name", workload_name)

    @property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> str:
        """
        Assessment Id.
        """
        return pulumi.get(self, "assessment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Assessment Type Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Assessment Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        """
        Assessment Type Locale.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Assessment Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Assessment Score.
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Assessment State.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> Optional[str]:
        """
        Assessment Type Id.
        """
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter(name="typeVersion")
    def type_version(self) -> str:
        """
        Assessment Type Version.
        """
        return pulumi.get(self, "type_version")

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> Optional[str]:
        """
        Workload Id.
        """
        return pulumi.get(self, "workload_id")

    @property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> str:
        """
        Workload Name.
        """
        return pulumi.get(self, "workload_name")


class AwaitableGetAssessmentResult(GetAssessmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssessmentResult(
            assessment_id=self.assessment_id,
            description=self.description,
            id=self.id,
            locale=self.locale,
            name=self.name,
            score=self.score,
            state=self.state,
            system_data=self.system_data,
            type=self.type,
            type_id=self.type_id,
            type_version=self.type_version,
            workload_id=self.workload_id,
            workload_name=self.workload_name)


def get_assessment(assessment_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssessmentResult:
    """
    Get a existing Azure Advisor assessment.


    :param str assessment_name: Advisor assessment name.
    """
    __args__ = dict()
    __args__['assessmentName'] = assessment_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:advisor/v20230901preview:getAssessment', __args__, opts=opts, typ=GetAssessmentResult).value

    return AwaitableGetAssessmentResult(
        assessment_id=pulumi.get(__ret__, 'assessment_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        locale=pulumi.get(__ret__, 'locale'),
        name=pulumi.get(__ret__, 'name'),
        score=pulumi.get(__ret__, 'score'),
        state=pulumi.get(__ret__, 'state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        type_id=pulumi.get(__ret__, 'type_id'),
        type_version=pulumi.get(__ret__, 'type_version'),
        workload_id=pulumi.get(__ret__, 'workload_id'),
        workload_name=pulumi.get(__ret__, 'workload_name'))
def get_assessment_output(assessment_name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssessmentResult]:
    """
    Get a existing Azure Advisor assessment.


    :param str assessment_name: Advisor assessment name.
    """
    __args__ = dict()
    __args__['assessmentName'] = assessment_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:advisor/v20230901preview:getAssessment', __args__, opts=opts, typ=GetAssessmentResult)
    return __ret__.apply(lambda __response__: GetAssessmentResult(
        assessment_id=pulumi.get(__response__, 'assessment_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        locale=pulumi.get(__response__, 'locale'),
        name=pulumi.get(__response__, 'name'),
        score=pulumi.get(__response__, 'score'),
        state=pulumi.get(__response__, 'state'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type'),
        type_id=pulumi.get(__response__, 'type_id'),
        type_version=pulumi.get(__response__, 'type_version'),
        workload_id=pulumi.get(__response__, 'workload_id'),
        workload_name=pulumi.get(__response__, 'workload_name')))
