# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DistributedAvailabilityGroupArgs', 'DistributedAvailabilityGroup']

@pulumi.input_type
class DistributedAvailabilityGroupArgs:
    def __init__(__self__, *,
                 managed_instance_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['DistributedAvailabilityGroupDatabaseArgs']]]] = None,
                 distributed_availability_group_name: Optional[pulumi.Input[str]] = None,
                 failover_mode: Optional[pulumi.Input[Union[str, 'FailoverModeType']]] = None,
                 instance_availability_group_name: Optional[pulumi.Input[str]] = None,
                 instance_link_role: Optional[pulumi.Input[Union[str, 'LinkRole']]] = None,
                 partner_availability_group_name: Optional[pulumi.Input[str]] = None,
                 partner_endpoint: Optional[pulumi.Input[str]] = None,
                 replication_mode: Optional[pulumi.Input[Union[str, 'ReplicationModeType']]] = None,
                 seeding_mode: Optional[pulumi.Input[Union[str, 'SeedingModeType']]] = None):
        """
        The set of arguments for constructing a DistributedAvailabilityGroup resource.
        :param pulumi.Input[str] managed_instance_name: The name of the managed instance.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        :param pulumi.Input[Sequence[pulumi.Input['DistributedAvailabilityGroupDatabaseArgs']]] databases: Databases in the distributed availability group
        :param pulumi.Input[str] distributed_availability_group_name: The distributed availability group name.
        :param pulumi.Input[Union[str, 'FailoverModeType']] failover_mode: The link failover mode - can be Manual if intended to be used for two-way failover with a supported SQL Server, or None for one-way failover to Azure.
        :param pulumi.Input[str] instance_availability_group_name: Managed instance side availability group name
        :param pulumi.Input[Union[str, 'LinkRole']] instance_link_role: Managed instance side link role
        :param pulumi.Input[str] partner_availability_group_name: SQL server side availability group name
        :param pulumi.Input[str] partner_endpoint: SQL server side endpoint - IP or DNS resolvable name
        :param pulumi.Input[Union[str, 'ReplicationModeType']] replication_mode: Replication mode of the link
        :param pulumi.Input[Union[str, 'SeedingModeType']] seeding_mode: Database seeding mode – can be Automatic (default), or Manual for supported scenarios.
        """
        pulumi.set(__self__, "managed_instance_name", managed_instance_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if distributed_availability_group_name is not None:
            pulumi.set(__self__, "distributed_availability_group_name", distributed_availability_group_name)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if instance_availability_group_name is not None:
            pulumi.set(__self__, "instance_availability_group_name", instance_availability_group_name)
        if instance_link_role is not None:
            pulumi.set(__self__, "instance_link_role", instance_link_role)
        if partner_availability_group_name is not None:
            pulumi.set(__self__, "partner_availability_group_name", partner_availability_group_name)
        if partner_endpoint is not None:
            pulumi.set(__self__, "partner_endpoint", partner_endpoint)
        if replication_mode is not None:
            pulumi.set(__self__, "replication_mode", replication_mode)
        if seeding_mode is not None:
            pulumi.set(__self__, "seeding_mode", seeding_mode)

    @property
    @pulumi.getter(name="managedInstanceName")
    def managed_instance_name(self) -> pulumi.Input[str]:
        """
        The name of the managed instance.
        """
        return pulumi.get(self, "managed_instance_name")

    @managed_instance_name.setter
    def managed_instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "managed_instance_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DistributedAvailabilityGroupDatabaseArgs']]]]:
        """
        Databases in the distributed availability group
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DistributedAvailabilityGroupDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="distributedAvailabilityGroupName")
    def distributed_availability_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The distributed availability group name.
        """
        return pulumi.get(self, "distributed_availability_group_name")

    @distributed_availability_group_name.setter
    def distributed_availability_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distributed_availability_group_name", value)

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[pulumi.Input[Union[str, 'FailoverModeType']]]:
        """
        The link failover mode - can be Manual if intended to be used for two-way failover with a supported SQL Server, or None for one-way failover to Azure.
        """
        return pulumi.get(self, "failover_mode")

    @failover_mode.setter
    def failover_mode(self, value: Optional[pulumi.Input[Union[str, 'FailoverModeType']]]):
        pulumi.set(self, "failover_mode", value)

    @property
    @pulumi.getter(name="instanceAvailabilityGroupName")
    def instance_availability_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed instance side availability group name
        """
        return pulumi.get(self, "instance_availability_group_name")

    @instance_availability_group_name.setter
    def instance_availability_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_availability_group_name", value)

    @property
    @pulumi.getter(name="instanceLinkRole")
    def instance_link_role(self) -> Optional[pulumi.Input[Union[str, 'LinkRole']]]:
        """
        Managed instance side link role
        """
        return pulumi.get(self, "instance_link_role")

    @instance_link_role.setter
    def instance_link_role(self, value: Optional[pulumi.Input[Union[str, 'LinkRole']]]):
        pulumi.set(self, "instance_link_role", value)

    @property
    @pulumi.getter(name="partnerAvailabilityGroupName")
    def partner_availability_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        SQL server side availability group name
        """
        return pulumi.get(self, "partner_availability_group_name")

    @partner_availability_group_name.setter
    def partner_availability_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partner_availability_group_name", value)

    @property
    @pulumi.getter(name="partnerEndpoint")
    def partner_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        SQL server side endpoint - IP or DNS resolvable name
        """
        return pulumi.get(self, "partner_endpoint")

    @partner_endpoint.setter
    def partner_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partner_endpoint", value)

    @property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> Optional[pulumi.Input[Union[str, 'ReplicationModeType']]]:
        """
        Replication mode of the link
        """
        return pulumi.get(self, "replication_mode")

    @replication_mode.setter
    def replication_mode(self, value: Optional[pulumi.Input[Union[str, 'ReplicationModeType']]]):
        pulumi.set(self, "replication_mode", value)

    @property
    @pulumi.getter(name="seedingMode")
    def seeding_mode(self) -> Optional[pulumi.Input[Union[str, 'SeedingModeType']]]:
        """
        Database seeding mode – can be Automatic (default), or Manual for supported scenarios.
        """
        return pulumi.get(self, "seeding_mode")

    @seeding_mode.setter
    def seeding_mode(self, value: Optional[pulumi.Input[Union[str, 'SeedingModeType']]]):
        pulumi.set(self, "seeding_mode", value)


class DistributedAvailabilityGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DistributedAvailabilityGroupDatabaseArgs']]]]] = None,
                 distributed_availability_group_name: Optional[pulumi.Input[str]] = None,
                 failover_mode: Optional[pulumi.Input[Union[str, 'FailoverModeType']]] = None,
                 instance_availability_group_name: Optional[pulumi.Input[str]] = None,
                 instance_link_role: Optional[pulumi.Input[Union[str, 'LinkRole']]] = None,
                 managed_instance_name: Optional[pulumi.Input[str]] = None,
                 partner_availability_group_name: Optional[pulumi.Input[str]] = None,
                 partner_endpoint: Optional[pulumi.Input[str]] = None,
                 replication_mode: Optional[pulumi.Input[Union[str, 'ReplicationModeType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 seeding_mode: Optional[pulumi.Input[Union[str, 'SeedingModeType']]] = None,
                 __props__=None):
        """
        Distributed availability group between box and Sql Managed Instance.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DistributedAvailabilityGroupDatabaseArgs']]]] databases: Databases in the distributed availability group
        :param pulumi.Input[str] distributed_availability_group_name: The distributed availability group name.
        :param pulumi.Input[Union[str, 'FailoverModeType']] failover_mode: The link failover mode - can be Manual if intended to be used for two-way failover with a supported SQL Server, or None for one-way failover to Azure.
        :param pulumi.Input[str] instance_availability_group_name: Managed instance side availability group name
        :param pulumi.Input[Union[str, 'LinkRole']] instance_link_role: Managed instance side link role
        :param pulumi.Input[str] managed_instance_name: The name of the managed instance.
        :param pulumi.Input[str] partner_availability_group_name: SQL server side availability group name
        :param pulumi.Input[str] partner_endpoint: SQL server side endpoint - IP or DNS resolvable name
        :param pulumi.Input[Union[str, 'ReplicationModeType']] replication_mode: Replication mode of the link
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        :param pulumi.Input[Union[str, 'SeedingModeType']] seeding_mode: Database seeding mode – can be Automatic (default), or Manual for supported scenarios.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DistributedAvailabilityGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Distributed availability group between box and Sql Managed Instance.

        :param str resource_name: The name of the resource.
        :param DistributedAvailabilityGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DistributedAvailabilityGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DistributedAvailabilityGroupDatabaseArgs']]]]] = None,
                 distributed_availability_group_name: Optional[pulumi.Input[str]] = None,
                 failover_mode: Optional[pulumi.Input[Union[str, 'FailoverModeType']]] = None,
                 instance_availability_group_name: Optional[pulumi.Input[str]] = None,
                 instance_link_role: Optional[pulumi.Input[Union[str, 'LinkRole']]] = None,
                 managed_instance_name: Optional[pulumi.Input[str]] = None,
                 partner_availability_group_name: Optional[pulumi.Input[str]] = None,
                 partner_endpoint: Optional[pulumi.Input[str]] = None,
                 replication_mode: Optional[pulumi.Input[Union[str, 'ReplicationModeType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 seeding_mode: Optional[pulumi.Input[Union[str, 'SeedingModeType']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DistributedAvailabilityGroupArgs.__new__(DistributedAvailabilityGroupArgs)

            __props__.__dict__["databases"] = databases
            __props__.__dict__["distributed_availability_group_name"] = distributed_availability_group_name
            __props__.__dict__["failover_mode"] = failover_mode
            __props__.__dict__["instance_availability_group_name"] = instance_availability_group_name
            __props__.__dict__["instance_link_role"] = instance_link_role
            if managed_instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'managed_instance_name'")
            __props__.__dict__["managed_instance_name"] = managed_instance_name
            __props__.__dict__["partner_availability_group_name"] = partner_availability_group_name
            __props__.__dict__["partner_endpoint"] = partner_endpoint
            __props__.__dict__["replication_mode"] = replication_mode
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["seeding_mode"] = seeding_mode
            __props__.__dict__["distributed_availability_group_id"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["partner_link_role"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:sql:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20210501preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20210801preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20211101:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20211101preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20220201preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20220501preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20220801preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20221101preview:DistributedAvailabilityGroup"), pulumi.Alias(type_="azure-native:sql/v20230201preview:DistributedAvailabilityGroup")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DistributedAvailabilityGroup, __self__).__init__(
            'azure-native:sql/v20230501preview:DistributedAvailabilityGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DistributedAvailabilityGroup':
        """
        Get an existing DistributedAvailabilityGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DistributedAvailabilityGroupArgs.__new__(DistributedAvailabilityGroupArgs)

        __props__.__dict__["databases"] = None
        __props__.__dict__["distributed_availability_group_id"] = None
        __props__.__dict__["distributed_availability_group_name"] = None
        __props__.__dict__["failover_mode"] = None
        __props__.__dict__["instance_availability_group_name"] = None
        __props__.__dict__["instance_link_role"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["partner_availability_group_name"] = None
        __props__.__dict__["partner_endpoint"] = None
        __props__.__dict__["partner_link_role"] = None
        __props__.__dict__["replication_mode"] = None
        __props__.__dict__["seeding_mode"] = None
        __props__.__dict__["type"] = None
        return DistributedAvailabilityGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Optional[Sequence['outputs.DistributedAvailabilityGroupDatabaseResponse']]]:
        """
        Databases in the distributed availability group
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="distributedAvailabilityGroupId")
    def distributed_availability_group_id(self) -> pulumi.Output[str]:
        """
        ID of the distributed availability group
        """
        return pulumi.get(self, "distributed_availability_group_id")

    @property
    @pulumi.getter(name="distributedAvailabilityGroupName")
    def distributed_availability_group_name(self) -> pulumi.Output[str]:
        """
        Name of the distributed availability group
        """
        return pulumi.get(self, "distributed_availability_group_name")

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The link failover mode - can be Manual if intended to be used for two-way failover with a supported SQL Server, or None for one-way failover to Azure.
        """
        return pulumi.get(self, "failover_mode")

    @property
    @pulumi.getter(name="instanceAvailabilityGroupName")
    def instance_availability_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Managed instance side availability group name
        """
        return pulumi.get(self, "instance_availability_group_name")

    @property
    @pulumi.getter(name="instanceLinkRole")
    def instance_link_role(self) -> pulumi.Output[Optional[str]]:
        """
        Managed instance side link role
        """
        return pulumi.get(self, "instance_link_role")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnerAvailabilityGroupName")
    def partner_availability_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        SQL server side availability group name
        """
        return pulumi.get(self, "partner_availability_group_name")

    @property
    @pulumi.getter(name="partnerEndpoint")
    def partner_endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        SQL server side endpoint - IP or DNS resolvable name
        """
        return pulumi.get(self, "partner_endpoint")

    @property
    @pulumi.getter(name="partnerLinkRole")
    def partner_link_role(self) -> pulumi.Output[str]:
        """
        SQL server side link role
        """
        return pulumi.get(self, "partner_link_role")

    @property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Replication mode of the link
        """
        return pulumi.get(self, "replication_mode")

    @property
    @pulumi.getter(name="seedingMode")
    def seeding_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Database seeding mode – can be Automatic (default), or Manual for supported scenarios.
        """
        return pulumi.get(self, "seeding_mode")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

