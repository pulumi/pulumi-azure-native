# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'JobStepActionArgs',
    'JobStepActionArgsDict',
    'JobStepExecutionOptionsArgs',
    'JobStepExecutionOptionsArgsDict',
    'JobStepOutputArgs',
    'JobStepOutputArgsDict',
    'ResourceIdentityArgs',
    'ResourceIdentityArgsDict',
    'ServerExternalAdministratorArgs',
    'ServerExternalAdministratorArgsDict',
]

MYPY = False

if not MYPY:
    class JobStepActionArgsDict(TypedDict):
        """
        The action to be executed by a job step.
        """
        value: pulumi.Input[str]
        """
        The action value, for example the text of the T-SQL script to execute.
        """
        source: NotRequired[pulumi.Input[Union[str, 'JobStepActionSource']]]
        """
        The source of the action to execute.
        """
        type: NotRequired[pulumi.Input[Union[str, 'JobStepActionType']]]
        """
        Type of action being executed by the job step.
        """
elif False:
    JobStepActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobStepActionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 source: Optional[pulumi.Input[Union[str, 'JobStepActionSource']]] = None,
                 type: Optional[pulumi.Input[Union[str, 'JobStepActionType']]] = None):
        """
        The action to be executed by a job step.
        :param pulumi.Input[str] value: The action value, for example the text of the T-SQL script to execute.
        :param pulumi.Input[Union[str, 'JobStepActionSource']] source: The source of the action to execute.
        :param pulumi.Input[Union[str, 'JobStepActionType']] type: Type of action being executed by the job step.
        """
        pulumi.set(__self__, "value", value)
        if source is None:
            source = 'Inline'
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is None:
            type = 'TSql'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The action value, for example the text of the T-SQL script to execute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[Union[str, 'JobStepActionSource']]]:
        """
        The source of the action to execute.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[Union[str, 'JobStepActionSource']]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'JobStepActionType']]]:
        """
        Type of action being executed by the job step.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'JobStepActionType']]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class JobStepExecutionOptionsArgsDict(TypedDict):
        """
        The execution options of a job step.
        """
        initial_retry_interval_seconds: NotRequired[pulumi.Input[int]]
        """
        Initial delay between retries for job step execution.
        """
        maximum_retry_interval_seconds: NotRequired[pulumi.Input[int]]
        """
        The maximum amount of time to wait between retries for job step execution.
        """
        retry_attempts: NotRequired[pulumi.Input[int]]
        """
        Maximum number of times the job step will be reattempted if the first attempt fails.
        """
        retry_interval_backoff_multiplier: NotRequired[pulumi.Input[float]]
        """
        The backoff multiplier for the time between retries.
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Execution timeout for the job step.
        """
elif False:
    JobStepExecutionOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobStepExecutionOptionsArgs:
    def __init__(__self__, *,
                 initial_retry_interval_seconds: Optional[pulumi.Input[int]] = None,
                 maximum_retry_interval_seconds: Optional[pulumi.Input[int]] = None,
                 retry_attempts: Optional[pulumi.Input[int]] = None,
                 retry_interval_backoff_multiplier: Optional[pulumi.Input[float]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        The execution options of a job step.
        :param pulumi.Input[int] initial_retry_interval_seconds: Initial delay between retries for job step execution.
        :param pulumi.Input[int] maximum_retry_interval_seconds: The maximum amount of time to wait between retries for job step execution.
        :param pulumi.Input[int] retry_attempts: Maximum number of times the job step will be reattempted if the first attempt fails.
        :param pulumi.Input[float] retry_interval_backoff_multiplier: The backoff multiplier for the time between retries.
        :param pulumi.Input[int] timeout_seconds: Execution timeout for the job step.
        """
        if initial_retry_interval_seconds is None:
            initial_retry_interval_seconds = 1
        if initial_retry_interval_seconds is not None:
            pulumi.set(__self__, "initial_retry_interval_seconds", initial_retry_interval_seconds)
        if maximum_retry_interval_seconds is None:
            maximum_retry_interval_seconds = 120
        if maximum_retry_interval_seconds is not None:
            pulumi.set(__self__, "maximum_retry_interval_seconds", maximum_retry_interval_seconds)
        if retry_attempts is None:
            retry_attempts = 10
        if retry_attempts is not None:
            pulumi.set(__self__, "retry_attempts", retry_attempts)
        if retry_interval_backoff_multiplier is None:
            retry_interval_backoff_multiplier = 2
        if retry_interval_backoff_multiplier is not None:
            pulumi.set(__self__, "retry_interval_backoff_multiplier", retry_interval_backoff_multiplier)
        if timeout_seconds is None:
            timeout_seconds = 43200
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="initialRetryIntervalSeconds")
    def initial_retry_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Initial delay between retries for job step execution.
        """
        return pulumi.get(self, "initial_retry_interval_seconds")

    @initial_retry_interval_seconds.setter
    def initial_retry_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_retry_interval_seconds", value)

    @property
    @pulumi.getter(name="maximumRetryIntervalSeconds")
    def maximum_retry_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum amount of time to wait between retries for job step execution.
        """
        return pulumi.get(self, "maximum_retry_interval_seconds")

    @maximum_retry_interval_seconds.setter
    def maximum_retry_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_retry_interval_seconds", value)

    @property
    @pulumi.getter(name="retryAttempts")
    def retry_attempts(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of times the job step will be reattempted if the first attempt fails.
        """
        return pulumi.get(self, "retry_attempts")

    @retry_attempts.setter
    def retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_attempts", value)

    @property
    @pulumi.getter(name="retryIntervalBackoffMultiplier")
    def retry_interval_backoff_multiplier(self) -> Optional[pulumi.Input[float]]:
        """
        The backoff multiplier for the time between retries.
        """
        return pulumi.get(self, "retry_interval_backoff_multiplier")

    @retry_interval_backoff_multiplier.setter
    def retry_interval_backoff_multiplier(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "retry_interval_backoff_multiplier", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Execution timeout for the job step.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class JobStepOutputArgsDict(TypedDict):
        """
        The output configuration of a job step.
        """
        credential: pulumi.Input[str]
        """
        The resource ID of the credential to use to connect to the output destination.
        """
        database_name: pulumi.Input[str]
        """
        The output destination database.
        """
        server_name: pulumi.Input[str]
        """
        The output destination server name.
        """
        table_name: pulumi.Input[str]
        """
        The output destination table.
        """
        resource_group_name: NotRequired[pulumi.Input[str]]
        """
        The output destination resource group.
        """
        schema_name: NotRequired[pulumi.Input[str]]
        """
        The output destination schema.
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        The output destination subscription id.
        """
        type: NotRequired[pulumi.Input[Union[str, 'JobStepOutputType']]]
        """
        The output destination type.
        """
elif False:
    JobStepOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobStepOutputArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 server_name: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'JobStepOutputType']]] = None):
        """
        The output configuration of a job step.
        :param pulumi.Input[str] credential: The resource ID of the credential to use to connect to the output destination.
        :param pulumi.Input[str] database_name: The output destination database.
        :param pulumi.Input[str] server_name: The output destination server name.
        :param pulumi.Input[str] table_name: The output destination table.
        :param pulumi.Input[str] resource_group_name: The output destination resource group.
        :param pulumi.Input[str] schema_name: The output destination schema.
        :param pulumi.Input[str] subscription_id: The output destination subscription id.
        :param pulumi.Input[Union[str, 'JobStepOutputType']] type: The output destination type.
        """
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "table_name", table_name)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if schema_name is None:
            schema_name = 'dbo'
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if type is None:
            type = 'SqlDatabase'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input[str]:
        """
        The resource ID of the credential to use to connect to the output destination.
        """
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The output destination database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Input[str]:
        """
        The output destination server name.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The output destination table.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The output destination resource group.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The output destination schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The output destination subscription id.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'JobStepOutputType']]]:
        """
        The output destination type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'JobStepOutputType']]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ResourceIdentityArgsDict(TypedDict):
        """
        Azure Active Directory identity configuration for a resource.
        """
        type: NotRequired[pulumi.Input[Union[str, 'IdentityType']]]
        """
        The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The resource ids of the user assigned identities to use
        """
elif False:
    ResourceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'IdentityType']]] = None,
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Azure Active Directory identity configuration for a resource.
        :param pulumi.Input[Union[str, 'IdentityType']] type: The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The resource ids of the user assigned identities to use
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'IdentityType']]]:
        """
        The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'IdentityType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resource ids of the user assigned identities to use
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class ServerExternalAdministratorArgsDict(TypedDict):
        """
        Properties of a active directory administrator.
        """
        administrator_type: NotRequired[pulumi.Input[Union[str, 'AdministratorType']]]
        """
        Type of the sever administrator.
        """
        azure_ad_only_authentication: NotRequired[pulumi.Input[bool]]
        """
        Azure Active Directory only Authentication enabled.
        """
        login: NotRequired[pulumi.Input[str]]
        """
        Login name of the server administrator.
        """
        principal_type: NotRequired[pulumi.Input[Union[str, 'PrincipalType']]]
        """
        Principal Type of the sever administrator.
        """
        sid: NotRequired[pulumi.Input[str]]
        """
        SID (object ID) of the server administrator.
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        Tenant ID of the administrator.
        """
elif False:
    ServerExternalAdministratorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerExternalAdministratorArgs:
    def __init__(__self__, *,
                 administrator_type: Optional[pulumi.Input[Union[str, 'AdministratorType']]] = None,
                 azure_ad_only_authentication: Optional[pulumi.Input[bool]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[Union[str, 'PrincipalType']]] = None,
                 sid: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Properties of a active directory administrator.
        :param pulumi.Input[Union[str, 'AdministratorType']] administrator_type: Type of the sever administrator.
        :param pulumi.Input[bool] azure_ad_only_authentication: Azure Active Directory only Authentication enabled.
        :param pulumi.Input[str] login: Login name of the server administrator.
        :param pulumi.Input[Union[str, 'PrincipalType']] principal_type: Principal Type of the sever administrator.
        :param pulumi.Input[str] sid: SID (object ID) of the server administrator.
        :param pulumi.Input[str] tenant_id: Tenant ID of the administrator.
        """
        if administrator_type is not None:
            pulumi.set(__self__, "administrator_type", administrator_type)
        if azure_ad_only_authentication is not None:
            pulumi.set(__self__, "azure_ad_only_authentication", azure_ad_only_authentication)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if principal_type is not None:
            pulumi.set(__self__, "principal_type", principal_type)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="administratorType")
    def administrator_type(self) -> Optional[pulumi.Input[Union[str, 'AdministratorType']]]:
        """
        Type of the sever administrator.
        """
        return pulumi.get(self, "administrator_type")

    @administrator_type.setter
    def administrator_type(self, value: Optional[pulumi.Input[Union[str, 'AdministratorType']]]):
        pulumi.set(self, "administrator_type", value)

    @property
    @pulumi.getter(name="azureADOnlyAuthentication")
    def azure_ad_only_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        Azure Active Directory only Authentication enabled.
        """
        return pulumi.get(self, "azure_ad_only_authentication")

    @azure_ad_only_authentication.setter
    def azure_ad_only_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_ad_only_authentication", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        """
        Login name of the server administrator.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> Optional[pulumi.Input[Union[str, 'PrincipalType']]]:
        """
        Principal Type of the sever administrator.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: Optional[pulumi.Input[Union[str, 'PrincipalType']]]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter
    def sid(self) -> Optional[pulumi.Input[str]]:
        """
        SID (object ID) of the server administrator.
        """
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sid", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant ID of the administrator.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


