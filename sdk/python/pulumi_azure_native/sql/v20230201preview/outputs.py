# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CertificateInfoResponse',
    'DistributedAvailabilityGroupDatabaseResponse',
    'JobStepActionResponse',
    'JobStepExecutionOptionsResponse',
    'JobStepOutputResponse',
    'PrivateEndpointConnectionPropertiesResponse',
    'PrivateEndpointPropertyResponse',
    'PrivateLinkServiceConnectionStatePropertyResponse',
    'ResourceIdentityResponse',
    'ServerExternalAdministratorResponse',
    'ServerPrivateEndpointConnectionResponse',
    'UserIdentityResponse',
]

@pulumi.output_type
class CertificateInfoResponse(dict):
    """
    Certificate information
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateName":
            suggest = "certificate_name"
        elif key == "expiryDate":
            suggest = "expiry_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: str,
                 certificate_name: str,
                 expiry_date: str):
        """
        Certificate information
        :param str certificate_id: The certificate ID
        :param str certificate_name: The certificate name
        :param str expiry_date: The certificate expiry date
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "expiry_date", expiry_date)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The certificate ID
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        The certificate name
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        """
        The certificate expiry date
        """
        return pulumi.get(self, "expiry_date")


@pulumi.output_type
class DistributedAvailabilityGroupDatabaseResponse(dict):
    """
    Database specific information
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectedState":
            suggest = "connected_state"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "instanceRedoReplicationLagSeconds":
            suggest = "instance_redo_replication_lag_seconds"
        elif key == "instanceReplicaId":
            suggest = "instance_replica_id"
        elif key == "instanceSendReplicationLagSeconds":
            suggest = "instance_send_replication_lag_seconds"
        elif key == "lastBackupLsn":
            suggest = "last_backup_lsn"
        elif key == "lastBackupTime":
            suggest = "last_backup_time"
        elif key == "lastCommitLsn":
            suggest = "last_commit_lsn"
        elif key == "lastCommitTime":
            suggest = "last_commit_time"
        elif key == "lastHardenedLsn":
            suggest = "last_hardened_lsn"
        elif key == "lastHardenedTime":
            suggest = "last_hardened_time"
        elif key == "lastReceivedLsn":
            suggest = "last_received_lsn"
        elif key == "lastReceivedTime":
            suggest = "last_received_time"
        elif key == "lastSentLsn":
            suggest = "last_sent_lsn"
        elif key == "lastSentTime":
            suggest = "last_sent_time"
        elif key == "mostRecentLinkError":
            suggest = "most_recent_link_error"
        elif key == "partnerAuthCertValidity":
            suggest = "partner_auth_cert_validity"
        elif key == "partnerReplicaId":
            suggest = "partner_replica_id"
        elif key == "replicaState":
            suggest = "replica_state"
        elif key == "synchronizationHealth":
            suggest = "synchronization_health"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributedAvailabilityGroupDatabaseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributedAvailabilityGroupDatabaseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributedAvailabilityGroupDatabaseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connected_state: str,
                 database_name: str,
                 instance_redo_replication_lag_seconds: int,
                 instance_replica_id: str,
                 instance_send_replication_lag_seconds: int,
                 last_backup_lsn: str,
                 last_backup_time: str,
                 last_commit_lsn: str,
                 last_commit_time: str,
                 last_hardened_lsn: str,
                 last_hardened_time: str,
                 last_received_lsn: str,
                 last_received_time: str,
                 last_sent_lsn: str,
                 last_sent_time: str,
                 most_recent_link_error: str,
                 partner_auth_cert_validity: 'outputs.CertificateInfoResponse',
                 partner_replica_id: str,
                 replica_state: str,
                 synchronization_health: str):
        """
        Database specific information
        :param str connected_state: Link connected state
        :param str database_name: The name of the database in link
        :param int instance_redo_replication_lag_seconds: Redo lag when Managed Instance link side is primary
        :param str instance_replica_id: Managed instance replica id
        :param int instance_send_replication_lag_seconds: Replication lag when Managed Instance link side is primary
        :param str last_backup_lsn: Last backup LSN
        :param str last_backup_time: Last backup LSN time
        :param str last_commit_lsn: Last commit LSN
        :param str last_commit_time: Last commit LSN time
        :param str last_hardened_lsn: Last hardened LSN
        :param str last_hardened_time: Last hardened LSN time
        :param str last_received_lsn: Last received LSN
        :param str last_received_time: Last received LSN time
        :param str last_sent_lsn: Last sent LSN
        :param str last_sent_time: Last sent LSN time
        :param str most_recent_link_error: The most recent link connection error description
        :param 'CertificateInfoResponse' partner_auth_cert_validity: SQL server certificate validity
        :param str partner_replica_id: SQL server replica id
        :param str replica_state: Current link state
        :param str synchronization_health: Link health state
        """
        pulumi.set(__self__, "connected_state", connected_state)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "instance_redo_replication_lag_seconds", instance_redo_replication_lag_seconds)
        pulumi.set(__self__, "instance_replica_id", instance_replica_id)
        pulumi.set(__self__, "instance_send_replication_lag_seconds", instance_send_replication_lag_seconds)
        pulumi.set(__self__, "last_backup_lsn", last_backup_lsn)
        pulumi.set(__self__, "last_backup_time", last_backup_time)
        pulumi.set(__self__, "last_commit_lsn", last_commit_lsn)
        pulumi.set(__self__, "last_commit_time", last_commit_time)
        pulumi.set(__self__, "last_hardened_lsn", last_hardened_lsn)
        pulumi.set(__self__, "last_hardened_time", last_hardened_time)
        pulumi.set(__self__, "last_received_lsn", last_received_lsn)
        pulumi.set(__self__, "last_received_time", last_received_time)
        pulumi.set(__self__, "last_sent_lsn", last_sent_lsn)
        pulumi.set(__self__, "last_sent_time", last_sent_time)
        pulumi.set(__self__, "most_recent_link_error", most_recent_link_error)
        pulumi.set(__self__, "partner_auth_cert_validity", partner_auth_cert_validity)
        pulumi.set(__self__, "partner_replica_id", partner_replica_id)
        pulumi.set(__self__, "replica_state", replica_state)
        pulumi.set(__self__, "synchronization_health", synchronization_health)

    @property
    @pulumi.getter(name="connectedState")
    def connected_state(self) -> str:
        """
        Link connected state
        """
        return pulumi.get(self, "connected_state")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database in link
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="instanceRedoReplicationLagSeconds")
    def instance_redo_replication_lag_seconds(self) -> int:
        """
        Redo lag when Managed Instance link side is primary
        """
        return pulumi.get(self, "instance_redo_replication_lag_seconds")

    @property
    @pulumi.getter(name="instanceReplicaId")
    def instance_replica_id(self) -> str:
        """
        Managed instance replica id
        """
        return pulumi.get(self, "instance_replica_id")

    @property
    @pulumi.getter(name="instanceSendReplicationLagSeconds")
    def instance_send_replication_lag_seconds(self) -> int:
        """
        Replication lag when Managed Instance link side is primary
        """
        return pulumi.get(self, "instance_send_replication_lag_seconds")

    @property
    @pulumi.getter(name="lastBackupLsn")
    def last_backup_lsn(self) -> str:
        """
        Last backup LSN
        """
        return pulumi.get(self, "last_backup_lsn")

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> str:
        """
        Last backup LSN time
        """
        return pulumi.get(self, "last_backup_time")

    @property
    @pulumi.getter(name="lastCommitLsn")
    def last_commit_lsn(self) -> str:
        """
        Last commit LSN
        """
        return pulumi.get(self, "last_commit_lsn")

    @property
    @pulumi.getter(name="lastCommitTime")
    def last_commit_time(self) -> str:
        """
        Last commit LSN time
        """
        return pulumi.get(self, "last_commit_time")

    @property
    @pulumi.getter(name="lastHardenedLsn")
    def last_hardened_lsn(self) -> str:
        """
        Last hardened LSN
        """
        return pulumi.get(self, "last_hardened_lsn")

    @property
    @pulumi.getter(name="lastHardenedTime")
    def last_hardened_time(self) -> str:
        """
        Last hardened LSN time
        """
        return pulumi.get(self, "last_hardened_time")

    @property
    @pulumi.getter(name="lastReceivedLsn")
    def last_received_lsn(self) -> str:
        """
        Last received LSN
        """
        return pulumi.get(self, "last_received_lsn")

    @property
    @pulumi.getter(name="lastReceivedTime")
    def last_received_time(self) -> str:
        """
        Last received LSN time
        """
        return pulumi.get(self, "last_received_time")

    @property
    @pulumi.getter(name="lastSentLsn")
    def last_sent_lsn(self) -> str:
        """
        Last sent LSN
        """
        return pulumi.get(self, "last_sent_lsn")

    @property
    @pulumi.getter(name="lastSentTime")
    def last_sent_time(self) -> str:
        """
        Last sent LSN time
        """
        return pulumi.get(self, "last_sent_time")

    @property
    @pulumi.getter(name="mostRecentLinkError")
    def most_recent_link_error(self) -> str:
        """
        The most recent link connection error description
        """
        return pulumi.get(self, "most_recent_link_error")

    @property
    @pulumi.getter(name="partnerAuthCertValidity")
    def partner_auth_cert_validity(self) -> 'outputs.CertificateInfoResponse':
        """
        SQL server certificate validity
        """
        return pulumi.get(self, "partner_auth_cert_validity")

    @property
    @pulumi.getter(name="partnerReplicaId")
    def partner_replica_id(self) -> str:
        """
        SQL server replica id
        """
        return pulumi.get(self, "partner_replica_id")

    @property
    @pulumi.getter(name="replicaState")
    def replica_state(self) -> str:
        """
        Current link state
        """
        return pulumi.get(self, "replica_state")

    @property
    @pulumi.getter(name="synchronizationHealth")
    def synchronization_health(self) -> str:
        """
        Link health state
        """
        return pulumi.get(self, "synchronization_health")


@pulumi.output_type
class JobStepActionResponse(dict):
    """
    The action to be executed by a job step.
    """
    def __init__(__self__, *,
                 value: str,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The action to be executed by a job step.
        :param str value: The action value, for example the text of the T-SQL script to execute.
        :param str source: The source of the action to execute.
        :param str type: Type of action being executed by the job step.
        """
        pulumi.set(__self__, "value", value)
        if source is None:
            source = 'Inline'
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is None:
            type = 'TSql'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The action value, for example the text of the T-SQL script to execute.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the action to execute.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of action being executed by the job step.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class JobStepExecutionOptionsResponse(dict):
    """
    The execution options of a job step.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialRetryIntervalSeconds":
            suggest = "initial_retry_interval_seconds"
        elif key == "maximumRetryIntervalSeconds":
            suggest = "maximum_retry_interval_seconds"
        elif key == "retryAttempts":
            suggest = "retry_attempts"
        elif key == "retryIntervalBackoffMultiplier":
            suggest = "retry_interval_backoff_multiplier"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobStepExecutionOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobStepExecutionOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobStepExecutionOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initial_retry_interval_seconds: Optional[int] = None,
                 maximum_retry_interval_seconds: Optional[int] = None,
                 retry_attempts: Optional[int] = None,
                 retry_interval_backoff_multiplier: Optional[float] = None,
                 timeout_seconds: Optional[int] = None):
        """
        The execution options of a job step.
        :param int initial_retry_interval_seconds: Initial delay between retries for job step execution.
        :param int maximum_retry_interval_seconds: The maximum amount of time to wait between retries for job step execution.
        :param int retry_attempts: Maximum number of times the job step will be reattempted if the first attempt fails.
        :param float retry_interval_backoff_multiplier: The backoff multiplier for the time between retries.
        :param int timeout_seconds: Execution timeout for the job step.
        """
        if initial_retry_interval_seconds is None:
            initial_retry_interval_seconds = 1
        if initial_retry_interval_seconds is not None:
            pulumi.set(__self__, "initial_retry_interval_seconds", initial_retry_interval_seconds)
        if maximum_retry_interval_seconds is None:
            maximum_retry_interval_seconds = 120
        if maximum_retry_interval_seconds is not None:
            pulumi.set(__self__, "maximum_retry_interval_seconds", maximum_retry_interval_seconds)
        if retry_attempts is None:
            retry_attempts = 10
        if retry_attempts is not None:
            pulumi.set(__self__, "retry_attempts", retry_attempts)
        if retry_interval_backoff_multiplier is None:
            retry_interval_backoff_multiplier = 2
        if retry_interval_backoff_multiplier is not None:
            pulumi.set(__self__, "retry_interval_backoff_multiplier", retry_interval_backoff_multiplier)
        if timeout_seconds is None:
            timeout_seconds = 43200
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="initialRetryIntervalSeconds")
    def initial_retry_interval_seconds(self) -> Optional[int]:
        """
        Initial delay between retries for job step execution.
        """
        return pulumi.get(self, "initial_retry_interval_seconds")

    @property
    @pulumi.getter(name="maximumRetryIntervalSeconds")
    def maximum_retry_interval_seconds(self) -> Optional[int]:
        """
        The maximum amount of time to wait between retries for job step execution.
        """
        return pulumi.get(self, "maximum_retry_interval_seconds")

    @property
    @pulumi.getter(name="retryAttempts")
    def retry_attempts(self) -> Optional[int]:
        """
        Maximum number of times the job step will be reattempted if the first attempt fails.
        """
        return pulumi.get(self, "retry_attempts")

    @property
    @pulumi.getter(name="retryIntervalBackoffMultiplier")
    def retry_interval_backoff_multiplier(self) -> Optional[float]:
        """
        The backoff multiplier for the time between retries.
        """
        return pulumi.get(self, "retry_interval_backoff_multiplier")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Execution timeout for the job step.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class JobStepOutputResponse(dict):
    """
    The output configuration of a job step.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobStepOutputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobStepOutputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobStepOutputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: str,
                 database_name: str,
                 server_name: str,
                 table_name: str,
                 resource_group_name: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The output configuration of a job step.
        :param str credential: The resource ID of the credential to use to connect to the output destination.
        :param str database_name: The output destination database.
        :param str server_name: The output destination server name.
        :param str table_name: The output destination table.
        :param str resource_group_name: The output destination resource group.
        :param str schema_name: The output destination schema.
        :param str subscription_id: The output destination subscription id.
        :param str type: The output destination type.
        """
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "table_name", table_name)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if schema_name is None:
            schema_name = 'dbo'
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if type is None:
            type = 'SqlDatabase'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def credential(self) -> str:
        """
        The resource ID of the credential to use to connect to the output destination.
        """
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The output destination database.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        The output destination server name.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        The output destination table.
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        """
        The output destination resource group.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        The output destination schema.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        The output destination subscription id.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The output destination type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PrivateEndpointConnectionPropertiesResponse(dict):
    """
    Properties of a private endpoint connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Sequence[str],
                 provisioning_state: str,
                 private_endpoint: Optional['outputs.PrivateEndpointPropertyResponse'] = None,
                 private_link_service_connection_state: Optional['outputs.PrivateLinkServiceConnectionStatePropertyResponse'] = None):
        """
        Properties of a private endpoint connection.
        :param Sequence[str] group_ids: Group IDs.
        :param str provisioning_state: State of the private endpoint connection.
        :param 'PrivateEndpointPropertyResponse' private_endpoint: Private endpoint which the connection belongs to.
        :param 'PrivateLinkServiceConnectionStatePropertyResponse' private_link_service_connection_state: Connection state of the private endpoint connection.
        """
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[str]:
        """
        Group IDs.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of the private endpoint connection.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointPropertyResponse']:
        """
        Private endpoint which the connection belongs to.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional['outputs.PrivateLinkServiceConnectionStatePropertyResponse']:
        """
        Connection state of the private endpoint connection.
        """
        return pulumi.get(self, "private_link_service_connection_state")


@pulumi.output_type
class PrivateEndpointPropertyResponse(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Resource id of the private endpoint.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource id of the private endpoint.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStatePropertyResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStatePropertyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStatePropertyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStatePropertyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: str,
                 description: str,
                 status: str):
        """
        :param str actions_required: The actions required for private link service connection.
        :param str description: The private link service connection description.
        :param str status: The private link service connection status.
        """
        pulumi.set(__self__, "actions_required", actions_required)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> str:
        """
        The actions required for private link service connection.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The private link service connection description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The private link service connection status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ResourceIdentityResponse(dict):
    """
    Azure Active Directory identity configuration for a resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserIdentityResponse']] = None):
        """
        Azure Active Directory identity configuration for a resource.
        :param str principal_id: The Azure Active Directory principal id.
        :param str tenant_id: The Azure Active Directory tenant id.
        :param str type: The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        :param Mapping[str, 'UserIdentityResponse'] user_assigned_identities: The resource ids of the user assigned identities to use
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The Azure Active Directory principal id.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Azure Active Directory tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserIdentityResponse']]:
        """
        The resource ids of the user assigned identities to use
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ServerExternalAdministratorResponse(dict):
    """
    Properties of a active directory administrator.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "administratorType":
            suggest = "administrator_type"
        elif key == "azureADOnlyAuthentication":
            suggest = "azure_ad_only_authentication"
        elif key == "principalType":
            suggest = "principal_type"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerExternalAdministratorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerExternalAdministratorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerExternalAdministratorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 administrator_type: Optional[str] = None,
                 azure_ad_only_authentication: Optional[bool] = None,
                 login: Optional[str] = None,
                 principal_type: Optional[str] = None,
                 sid: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        Properties of a active directory administrator.
        :param str administrator_type: Type of the sever administrator.
        :param bool azure_ad_only_authentication: Azure Active Directory only Authentication enabled.
        :param str login: Login name of the server administrator.
        :param str principal_type: Principal Type of the sever administrator.
        :param str sid: SID (object ID) of the server administrator.
        :param str tenant_id: Tenant ID of the administrator.
        """
        if administrator_type is not None:
            pulumi.set(__self__, "administrator_type", administrator_type)
        if azure_ad_only_authentication is not None:
            pulumi.set(__self__, "azure_ad_only_authentication", azure_ad_only_authentication)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if principal_type is not None:
            pulumi.set(__self__, "principal_type", principal_type)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="administratorType")
    def administrator_type(self) -> Optional[str]:
        """
        Type of the sever administrator.
        """
        return pulumi.get(self, "administrator_type")

    @property
    @pulumi.getter(name="azureADOnlyAuthentication")
    def azure_ad_only_authentication(self) -> Optional[bool]:
        """
        Azure Active Directory only Authentication enabled.
        """
        return pulumi.get(self, "azure_ad_only_authentication")

    @property
    @pulumi.getter
    def login(self) -> Optional[str]:
        """
        Login name of the server administrator.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> Optional[str]:
        """
        Principal Type of the sever administrator.
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter
    def sid(self) -> Optional[str]:
        """
        SID (object ID) of the server administrator.
        """
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        Tenant ID of the administrator.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ServerPrivateEndpointConnectionResponse(dict):
    """
    A private endpoint connection under a server
    """
    def __init__(__self__, *,
                 id: str,
                 properties: 'outputs.PrivateEndpointConnectionPropertiesResponse'):
        """
        A private endpoint connection under a server
        :param str id: Resource ID.
        :param 'PrivateEndpointConnectionPropertiesResponse' properties: Private endpoint connection properties
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.PrivateEndpointConnectionPropertiesResponse':
        """
        Private endpoint connection properties
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class UserIdentityResponse(dict):
    """
    Azure Active Directory identity configuration for a resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        Azure Active Directory identity configuration for a resource.
        :param str client_id: The Azure Active Directory client id.
        :param str principal_id: The Azure Active Directory principal id.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The Azure Active Directory client id.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The Azure Active Directory principal id.
        """
        return pulumi.get(self, "principal_id")


