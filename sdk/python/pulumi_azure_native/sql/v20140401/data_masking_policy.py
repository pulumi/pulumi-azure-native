# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from ._enums import *

__all__ = ['DataMaskingPolicy']


class DataMaskingPolicy(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_masking_policy_name: Optional[pulumi.Input[str]] = None,
                 data_masking_state: Optional[pulumi.Input['DataMaskingState']] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 exempt_principals: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Represents a database data masking policy.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_masking_policy_name: The name of the database for which the data masking rule applies.
        :param pulumi.Input['DataMaskingState'] data_masking_state: The state of the data masking policy.
        :param pulumi.Input[str] database_name: The name of the database.
        :param pulumi.Input[str] exempt_principals: The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        :param pulumi.Input[str] server_name: The name of the server.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['data_masking_policy_name'] = data_masking_policy_name
            if data_masking_state is None and not opts.urn:
                raise TypeError("Missing required property 'data_masking_state'")
            __props__['data_masking_state'] = data_masking_state
            if database_name is None and not opts.urn:
                raise TypeError("Missing required property 'database_name'")
            __props__['database_name'] = database_name
            __props__['exempt_principals'] = exempt_principals
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if server_name is None and not opts.urn:
                raise TypeError("Missing required property 'server_name'")
            __props__['server_name'] = server_name
            __props__['application_principals'] = None
            __props__['kind'] = None
            __props__['location'] = None
            __props__['masking_level'] = None
            __props__['name'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:sql/v20140401:DataMaskingPolicy"), pulumi.Alias(type_="azure-native:sql:DataMaskingPolicy"), pulumi.Alias(type_="azure-nextgen:sql:DataMaskingPolicy")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DataMaskingPolicy, __self__).__init__(
            'azure-native:sql/v20140401:DataMaskingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DataMaskingPolicy':
        """
        Get an existing DataMaskingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["application_principals"] = None
        __props__["data_masking_state"] = None
        __props__["exempt_principals"] = None
        __props__["kind"] = None
        __props__["location"] = None
        __props__["masking_level"] = None
        __props__["name"] = None
        __props__["type"] = None
        return DataMaskingPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationPrincipals")
    def application_principals(self) -> pulumi.Output[str]:
        """
        The list of the application principals. This is a legacy parameter and is no longer used.
        """
        return pulumi.get(self, "application_principals")

    @property
    @pulumi.getter(name="dataMaskingState")
    def data_masking_state(self) -> pulumi.Output[str]:
        """
        The state of the data masking policy.
        """
        return pulumi.get(self, "data_masking_state")

    @property
    @pulumi.getter(name="exemptPrincipals")
    def exempt_principals(self) -> pulumi.Output[Optional[str]]:
        """
        The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
        """
        return pulumi.get(self, "exempt_principals")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        The kind of data masking policy. Metadata, used for Azure portal.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of the data masking policy.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maskingLevel")
    def masking_level(self) -> pulumi.Output[str]:
        """
        The masking level. This is a legacy parameter and is no longer used.
        """
        return pulumi.get(self, "masking_level")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

