# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = ['ReplicationLinkArgs', 'ReplicationLink']

@pulumi.input_type
class ReplicationLinkArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 server_name: pulumi.Input[str],
                 link_id: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[Union[str, 'ReplicationLinkType']]] = None):
        """
        The set of arguments for constructing a ReplicationLink resource.
        :param pulumi.Input[str] database_name: The name of the database.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        :param pulumi.Input[str] server_name: The name of the server.
        :param pulumi.Input[Union[str, 'ReplicationLinkType']] link_type: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "server_name", server_name)
        if link_id is not None:
            pulumi.set(__self__, "link_id", link_id)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The name of the database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Input[str]:
        """
        The name of the server.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="linkId")
    def link_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_id")

    @link_id.setter
    def link_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_id", value)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[pulumi.Input[Union[str, 'ReplicationLinkType']]]:
        """
        Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
        """
        return pulumi.get(self, "link_type")

    @link_type.setter
    def link_type(self, value: Optional[pulumi.Input[Union[str, 'ReplicationLinkType']]]):
        pulumi.set(self, "link_type", value)


class ReplicationLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 link_id: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[Union[str, 'ReplicationLinkType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A replication link.
        Azure REST API version: 2023-05-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_name: The name of the database.
        :param pulumi.Input[Union[str, 'ReplicationLinkType']] link_type: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        :param pulumi.Input[str] server_name: The name of the server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReplicationLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A replication link.
        Azure REST API version: 2023-05-01-preview.

        :param str resource_name: The name of the resource.
        :param ReplicationLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReplicationLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 link_id: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[Union[str, 'ReplicationLinkType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReplicationLinkArgs.__new__(ReplicationLinkArgs)

            if database_name is None and not opts.urn:
                raise TypeError("Missing required property 'database_name'")
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["link_id"] = link_id
            __props__.__dict__["link_type"] = link_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if server_name is None and not opts.urn:
                raise TypeError("Missing required property 'server_name'")
            __props__.__dict__["server_name"] = server_name
            __props__.__dict__["is_termination_allowed"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["partner_database"] = None
            __props__.__dict__["partner_database_id"] = None
            __props__.__dict__["partner_location"] = None
            __props__.__dict__["partner_role"] = None
            __props__.__dict__["partner_server"] = None
            __props__.__dict__["percent_complete"] = None
            __props__.__dict__["replication_mode"] = None
            __props__.__dict__["replication_state"] = None
            __props__.__dict__["role"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:sql/v20230501preview:ReplicationLink")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ReplicationLink, __self__).__init__(
            'azure-native:sql:ReplicationLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ReplicationLink':
        """
        Get an existing ReplicationLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ReplicationLinkArgs.__new__(ReplicationLinkArgs)

        __props__.__dict__["is_termination_allowed"] = None
        __props__.__dict__["link_type"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["partner_database"] = None
        __props__.__dict__["partner_database_id"] = None
        __props__.__dict__["partner_location"] = None
        __props__.__dict__["partner_role"] = None
        __props__.__dict__["partner_server"] = None
        __props__.__dict__["percent_complete"] = None
        __props__.__dict__["replication_mode"] = None
        __props__.__dict__["replication_state"] = None
        __props__.__dict__["role"] = None
        __props__.__dict__["start_time"] = None
        __props__.__dict__["type"] = None
        return ReplicationLink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="isTerminationAllowed")
    def is_termination_allowed(self) -> pulumi.Output[bool]:
        """
        Whether the user is currently allowed to terminate the link.
        """
        return pulumi.get(self, "is_termination_allowed")

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> pulumi.Output[Optional[str]]:
        """
        Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
        """
        return pulumi.get(self, "link_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnerDatabase")
    def partner_database(self) -> pulumi.Output[str]:
        """
        Resource partner database.
        """
        return pulumi.get(self, "partner_database")

    @property
    @pulumi.getter(name="partnerDatabaseId")
    def partner_database_id(self) -> pulumi.Output[str]:
        """
        Resource partner database Id.
        """
        return pulumi.get(self, "partner_database_id")

    @property
    @pulumi.getter(name="partnerLocation")
    def partner_location(self) -> pulumi.Output[str]:
        """
        Resource partner location.
        """
        return pulumi.get(self, "partner_location")

    @property
    @pulumi.getter(name="partnerRole")
    def partner_role(self) -> pulumi.Output[str]:
        """
        Partner replication role.
        """
        return pulumi.get(self, "partner_role")

    @property
    @pulumi.getter(name="partnerServer")
    def partner_server(self) -> pulumi.Output[str]:
        """
        Resource partner server.
        """
        return pulumi.get(self, "partner_server")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> pulumi.Output[int]:
        """
        Seeding completion percentage for the link.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter(name="replicationMode")
    def replication_mode(self) -> pulumi.Output[str]:
        """
        Replication mode.
        """
        return pulumi.get(self, "replication_mode")

    @property
    @pulumi.getter(name="replicationState")
    def replication_state(self) -> pulumi.Output[str]:
        """
        Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
        """
        return pulumi.get(self, "replication_state")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        Local replication role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Time at which the link was created.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

