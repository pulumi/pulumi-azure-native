# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSqlVulnerabilityAssessmentsSettingResult',
    'AwaitableGetSqlVulnerabilityAssessmentsSettingResult',
    'get_sql_vulnerability_assessments_setting',
    'get_sql_vulnerability_assessments_setting_output',
]

@pulumi.output_type
class GetSqlVulnerabilityAssessmentsSettingResult:
    """
    A SQL Vulnerability Assessment.
    """
    def __init__(__self__, id=None, name=None, state=None, system_data=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or disabled or a state has not been applied yet on the specific database or server.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        SystemData of SqlVulnerabilityAssessmentResource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetSqlVulnerabilityAssessmentsSettingResult(GetSqlVulnerabilityAssessmentsSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlVulnerabilityAssessmentsSettingResult(
            id=self.id,
            name=self.name,
            state=self.state,
            system_data=self.system_data,
            type=self.type)


def get_sql_vulnerability_assessments_setting(resource_group_name: Optional[str] = None,
                                              server_name: Optional[str] = None,
                                              vulnerability_assessment_name: Optional[str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlVulnerabilityAssessmentsSettingResult:
    """
    A SQL Vulnerability Assessment.


    :param str resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    :param str server_name: The name of the server.
    :param str vulnerability_assessment_name: The name of the SQL Vulnerability Assessment.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['serverName'] = server_name
    __args__['vulnerabilityAssessmentName'] = vulnerability_assessment_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:sql/v20220201preview:getSqlVulnerabilityAssessmentsSetting', __args__, opts=opts, typ=GetSqlVulnerabilityAssessmentsSettingResult).value

    return AwaitableGetSqlVulnerabilityAssessmentsSettingResult(
        id=__ret__.id,
        name=__ret__.name,
        state=__ret__.state,
        system_data=__ret__.system_data,
        type=__ret__.type)


@_utilities.lift_output_func(get_sql_vulnerability_assessments_setting)
def get_sql_vulnerability_assessments_setting_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                                                     server_name: Optional[pulumi.Input[str]] = None,
                                                     vulnerability_assessment_name: Optional[pulumi.Input[str]] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSqlVulnerabilityAssessmentsSettingResult]:
    """
    A SQL Vulnerability Assessment.


    :param str resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    :param str server_name: The name of the server.
    :param str vulnerability_assessment_name: The name of the SQL Vulnerability Assessment.
    """
    ...
