# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ClientIncidentDetailsArgs',
    'ClientIncidentDetailsArgsDict',
    'ConnectivityArgs',
    'ConnectivityArgsDict',
    'ConnectorPropertiesArgs',
    'ConnectorPropertiesArgsDict',
    'ContentArgs',
    'ContentArgsDict',
    'ErrorDetailPropertiesArgs',
    'ErrorDetailPropertiesArgsDict',
    'ExpectedValueRangeArgs',
    'ExpectedValueRangeArgsDict',
    'ImpactDetailsArgs',
    'ImpactDetailsArgsDict',
    'InsightPropertiesArgs',
    'InsightPropertiesArgsDict',
    'PerformanceArgs',
    'PerformanceArgsDict',
    'SourceOrTargetArgs',
    'SourceOrTargetArgsDict',
    'WorkloadImpactPropertiesArgs',
    'WorkloadImpactPropertiesArgsDict',
    'WorkloadArgs',
    'WorkloadArgsDict',
]

MYPY = False

if not MYPY:
    class ClientIncidentDetailsArgsDict(TypedDict):
        """
        Client incident details ex: incidentId , incident source
        """
        client_incident_id: NotRequired[pulumi.Input[str]]
        """
        Client incident id. ex : id of the incident created to investigate and address the impact if any.
        """
        client_incident_source: NotRequired[pulumi.Input[Union[str, 'IncidentSource']]]
        """
        Client incident source. ex : source system name where the incident is created
        """
elif False:
    ClientIncidentDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientIncidentDetailsArgs:
    def __init__(__self__, *,
                 client_incident_id: Optional[pulumi.Input[str]] = None,
                 client_incident_source: Optional[pulumi.Input[Union[str, 'IncidentSource']]] = None):
        """
        Client incident details ex: incidentId , incident source
        :param pulumi.Input[str] client_incident_id: Client incident id. ex : id of the incident created to investigate and address the impact if any.
        :param pulumi.Input[Union[str, 'IncidentSource']] client_incident_source: Client incident source. ex : source system name where the incident is created
        """
        if client_incident_id is not None:
            pulumi.set(__self__, "client_incident_id", client_incident_id)
        if client_incident_source is not None:
            pulumi.set(__self__, "client_incident_source", client_incident_source)

    @property
    @pulumi.getter(name="clientIncidentId")
    def client_incident_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client incident id. ex : id of the incident created to investigate and address the impact if any.
        """
        return pulumi.get(self, "client_incident_id")

    @client_incident_id.setter
    def client_incident_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_incident_id", value)

    @property
    @pulumi.getter(name="clientIncidentSource")
    def client_incident_source(self) -> Optional[pulumi.Input[Union[str, 'IncidentSource']]]:
        """
        Client incident source. ex : source system name where the incident is created
        """
        return pulumi.get(self, "client_incident_source")

    @client_incident_source.setter
    def client_incident_source(self, value: Optional[pulumi.Input[Union[str, 'IncidentSource']]]):
        pulumi.set(self, "client_incident_source", value)


if not MYPY:
    class ConnectivityArgsDict(TypedDict):
        """
        Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource could be VM or the network. In such cases, the connectivity field will have the details about both VM and network.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port number for the connection
        """
        protocol: NotRequired[pulumi.Input[Union[str, 'Protocol']]]
        """
        Protocol used for the connection
        """
        source: NotRequired[pulumi.Input['SourceOrTargetArgsDict']]
        """
        Source from which the connection was attempted
        """
        target: NotRequired[pulumi.Input['SourceOrTargetArgsDict']]
        """
        target which connection was attempted
        """
elif False:
    ConnectivityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectivityArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[Union[str, 'Protocol']]] = None,
                 source: Optional[pulumi.Input['SourceOrTargetArgs']] = None,
                 target: Optional[pulumi.Input['SourceOrTargetArgs']] = None):
        """
        Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource could be VM or the network. In such cases, the connectivity field will have the details about both VM and network.
        :param pulumi.Input[int] port: Port number for the connection
        :param pulumi.Input[Union[str, 'Protocol']] protocol: Protocol used for the connection
        :param pulumi.Input['SourceOrTargetArgs'] source: Source from which the connection was attempted
        :param pulumi.Input['SourceOrTargetArgs'] target: target which connection was attempted
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number for the connection
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[Union[str, 'Protocol']]]:
        """
        Protocol used for the connection
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[Union[str, 'Protocol']]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['SourceOrTargetArgs']]:
        """
        Source from which the connection was attempted
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['SourceOrTargetArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['SourceOrTargetArgs']]:
        """
        target which connection was attempted
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['SourceOrTargetArgs']]):
        pulumi.set(self, "target", value)


if not MYPY:
    class ConnectorPropertiesArgsDict(TypedDict):
        """
        Details of the Connector.
        """
        connector_type: pulumi.Input[Union[str, 'Platform']]
        """
        connector type
        """
elif False:
    ConnectorPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectorPropertiesArgs:
    def __init__(__self__, *,
                 connector_type: pulumi.Input[Union[str, 'Platform']]):
        """
        Details of the Connector.
        :param pulumi.Input[Union[str, 'Platform']] connector_type: connector type
        """
        pulumi.set(__self__, "connector_type", connector_type)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input[Union[str, 'Platform']]:
        """
        connector type
        """
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input[Union[str, 'Platform']]):
        pulumi.set(self, "connector_type", value)


if not MYPY:
    class ContentArgsDict(TypedDict):
        """
        Article details of the insight like title, description etc
        """
        description: pulumi.Input[str]
        """
        Description of the insight
        """
        title: pulumi.Input[str]
        """
        Title of the insight
        """
elif False:
    ContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContentArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 title: pulumi.Input[str]):
        """
        Article details of the insight like title, description etc
        :param pulumi.Input[str] description: Description of the insight
        :param pulumi.Input[str] title: Title of the insight
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Description of the insight
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title of the insight
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class ErrorDetailPropertiesArgsDict(TypedDict):
        """
        ARM error code and error message associated with the impact
        """
        error_code: NotRequired[pulumi.Input[str]]
        """
        ARM Error code associated with the impact.
        """
        error_message: NotRequired[pulumi.Input[str]]
        """
        ARM Error Message associated with the impact
        """
elif False:
    ErrorDetailPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ErrorDetailPropertiesArgs:
    def __init__(__self__, *,
                 error_code: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None):
        """
        ARM error code and error message associated with the impact
        :param pulumi.Input[str] error_code: ARM Error code associated with the impact.
        :param pulumi.Input[str] error_message: ARM Error Message associated with the impact
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[str]]:
        """
        ARM Error code associated with the impact.
        """
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        ARM Error Message associated with the impact
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)


if not MYPY:
    class ExpectedValueRangeArgsDict(TypedDict):
        """
        Max and Min Threshold values for the metric
        """
        max: pulumi.Input[float]
        """
        Max threshold value for the metric
        """
        min: pulumi.Input[float]
        """
        Min threshold value for the metric
        """
elif False:
    ExpectedValueRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExpectedValueRangeArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[float],
                 min: pulumi.Input[float]):
        """
        Max and Min Threshold values for the metric
        :param pulumi.Input[float] max: Max threshold value for the metric
        :param pulumi.Input[float] min: Min threshold value for the metric
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[float]:
        """
        Max threshold value for the metric
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[float]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[float]:
        """
        Min threshold value for the metric
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[float]):
        pulumi.set(self, "min", value)


if not MYPY:
    class ImpactDetailsArgsDict(TypedDict):
        """
        details of of the impact for which insight has been generated.
        """
        impact_id: pulumi.Input[str]
        """
        Azure Id of the impact.
        """
        impacted_resource_id: pulumi.Input[str]
        """
        List of impacted Azure resources.
        """
        start_time: pulumi.Input[str]
        """
        Time at which impact was started according to reported impact.
        """
        end_time: NotRequired[pulumi.Input[str]]
        """
        Time at which impact was ended according to reported impact.
        """
elif False:
    ImpactDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImpactDetailsArgs:
    def __init__(__self__, *,
                 impact_id: pulumi.Input[str],
                 impacted_resource_id: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 end_time: Optional[pulumi.Input[str]] = None):
        """
        details of of the impact for which insight has been generated.
        :param pulumi.Input[str] impact_id: Azure Id of the impact.
        :param pulumi.Input[str] impacted_resource_id: List of impacted Azure resources.
        :param pulumi.Input[str] start_time: Time at which impact was started according to reported impact.
        :param pulumi.Input[str] end_time: Time at which impact was ended according to reported impact.
        """
        pulumi.set(__self__, "impact_id", impact_id)
        pulumi.set(__self__, "impacted_resource_id", impacted_resource_id)
        pulumi.set(__self__, "start_time", start_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)

    @property
    @pulumi.getter(name="impactId")
    def impact_id(self) -> pulumi.Input[str]:
        """
        Azure Id of the impact.
        """
        return pulumi.get(self, "impact_id")

    @impact_id.setter
    def impact_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "impact_id", value)

    @property
    @pulumi.getter(name="impactedResourceId")
    def impacted_resource_id(self) -> pulumi.Input[str]:
        """
        List of impacted Azure resources.
        """
        return pulumi.get(self, "impacted_resource_id")

    @impacted_resource_id.setter
    def impacted_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "impacted_resource_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Time at which impact was started according to reported impact.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which impact was ended according to reported impact.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)


if not MYPY:
    class InsightPropertiesArgsDict(TypedDict):
        """
        Impact category properties.
        """
        category: pulumi.Input[str]
        """
        category of the insight.
        """
        content: pulumi.Input['ContentArgsDict']
        """
        Contains title & description for the insight
        """
        impact: pulumi.Input['ImpactDetailsArgsDict']
        """
        details of of the impact for which insight has been generated.
        """
        insight_unique_id: pulumi.Input[str]
        """
        unique id of the insight.
        """
        additional_details: NotRequired[Any]
        """
        additional details of the insight.
        """
        event_id: NotRequired[pulumi.Input[str]]
        """
        Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event.
        """
        event_time: NotRequired[pulumi.Input[str]]
        """
        Time of the event, which has been correlated the impact.
        """
        group_id: NotRequired[pulumi.Input[str]]
        """
        Identifier that can be used to group similar insights.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        status of the insight. example resolved, repaired, other.
        """
elif False:
    InsightPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InsightPropertiesArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 content: pulumi.Input['ContentArgs'],
                 impact: pulumi.Input['ImpactDetailsArgs'],
                 insight_unique_id: pulumi.Input[str],
                 additional_details: Optional[Any] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 event_time: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Impact category properties.
        :param pulumi.Input[str] category: category of the insight.
        :param pulumi.Input['ContentArgs'] content: Contains title & description for the insight
        :param pulumi.Input['ImpactDetailsArgs'] impact: details of of the impact for which insight has been generated.
        :param pulumi.Input[str] insight_unique_id: unique id of the insight.
        :param Any additional_details: additional details of the insight.
        :param pulumi.Input[str] event_id: Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event.
        :param pulumi.Input[str] event_time: Time of the event, which has been correlated the impact.
        :param pulumi.Input[str] group_id: Identifier that can be used to group similar insights.
        :param pulumi.Input[str] status: status of the insight. example resolved, repaired, other.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "impact", impact)
        pulumi.set(__self__, "insight_unique_id", insight_unique_id)
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if event_time is not None:
            pulumi.set(__self__, "event_time", event_time)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        category of the insight.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['ContentArgs']:
        """
        Contains title & description for the insight
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['ContentArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def impact(self) -> pulumi.Input['ImpactDetailsArgs']:
        """
        details of of the impact for which insight has been generated.
        """
        return pulumi.get(self, "impact")

    @impact.setter
    def impact(self, value: pulumi.Input['ImpactDetailsArgs']):
        pulumi.set(self, "impact", value)

    @property
    @pulumi.getter(name="insightUniqueId")
    def insight_unique_id(self) -> pulumi.Input[str]:
        """
        unique id of the insight.
        """
        return pulumi.get(self, "insight_unique_id")

    @insight_unique_id.setter
    def insight_unique_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "insight_unique_id", value)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Any]:
        """
        additional details of the insight.
        """
        return pulumi.get(self, "additional_details")

    @additional_details.setter
    def additional_details(self, value: Optional[Any]):
        pulumi.set(self, "additional_details", value)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event.
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter(name="eventTime")
    def event_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the event, which has been correlated the impact.
        """
        return pulumi.get(self, "event_time")

    @event_time.setter
    def event_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_time", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier that can be used to group similar insights.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of the insight. example resolved, repaired, other.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class PerformanceArgsDict(TypedDict):
        """
        Details about impacted performance metrics. Applicable for performance related impact
        """
        actual: NotRequired[pulumi.Input[float]]
        """
        Observed value for the metric
        """
        expected: NotRequired[pulumi.Input[float]]
        """
        Threshold value for the metric
        """
        expected_value_range: NotRequired[pulumi.Input['ExpectedValueRangeArgsDict']]
        """
        Max and Min Threshold values for the metric
        """
        metric_name: NotRequired[pulumi.Input[str]]
        """
        Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API
        """
        unit: NotRequired[pulumi.Input[Union[str, 'MetricUnit']]]
        """
        Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
        """
elif False:
    PerformanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PerformanceArgs:
    def __init__(__self__, *,
                 actual: Optional[pulumi.Input[float]] = None,
                 expected: Optional[pulumi.Input[float]] = None,
                 expected_value_range: Optional[pulumi.Input['ExpectedValueRangeArgs']] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[Union[str, 'MetricUnit']]] = None):
        """
        Details about impacted performance metrics. Applicable for performance related impact
        :param pulumi.Input[float] actual: Observed value for the metric
        :param pulumi.Input[float] expected: Threshold value for the metric
        :param pulumi.Input['ExpectedValueRangeArgs'] expected_value_range: Max and Min Threshold values for the metric
        :param pulumi.Input[str] metric_name: Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API
        :param pulumi.Input[Union[str, 'MetricUnit']] unit: Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
        """
        if actual is not None:
            pulumi.set(__self__, "actual", actual)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if expected_value_range is not None:
            pulumi.set(__self__, "expected_value_range", expected_value_range)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def actual(self) -> Optional[pulumi.Input[float]]:
        """
        Observed value for the metric
        """
        return pulumi.get(self, "actual")

    @actual.setter
    def actual(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "actual", value)

    @property
    @pulumi.getter
    def expected(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold value for the metric
        """
        return pulumi.get(self, "expected")

    @expected.setter
    def expected(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expected", value)

    @property
    @pulumi.getter(name="expectedValueRange")
    def expected_value_range(self) -> Optional[pulumi.Input['ExpectedValueRangeArgs']]:
        """
        Max and Min Threshold values for the metric
        """
        return pulumi.get(self, "expected_value_range")

    @expected_value_range.setter
    def expected_value_range(self, value: Optional[pulumi.Input['ExpectedValueRangeArgs']]):
        pulumi.set(self, "expected_value_range", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[Union[str, 'MetricUnit']]]:
        """
        Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[Union[str, 'MetricUnit']]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class SourceOrTargetArgsDict(TypedDict):
        """
        Resource details
        """
        azure_resource_id: NotRequired[pulumi.Input[str]]
        """
        Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}
        """
elif False:
    SourceOrTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SourceOrTargetArgs:
    def __init__(__self__, *,
                 azure_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Resource details
        :param pulumi.Input[str] azure_resource_id: Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}
        """
        if azure_resource_id is not None:
            pulumi.set(__self__, "azure_resource_id", azure_resource_id)

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}
        """
        return pulumi.get(self, "azure_resource_id")

    @azure_resource_id.setter
    def azure_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_id", value)


if not MYPY:
    class WorkloadImpactPropertiesArgsDict(TypedDict):
        """
        Workload impact properties
        """
        impact_category: pulumi.Input[str]
        """
        Category of the impact,  details can found from /impactCategories API
        """
        impacted_resource_id: pulumi.Input[str]
        """
        Azure resource id of the impacted resource
        """
        start_date_time: pulumi.Input[str]
        """
        Time at which impact was observed 
        """
        additional_properties: NotRequired[Any]
        """
        Additional fields related to impact, applicable fields per resource type are list under /impactCategories API
        """
        arm_correlation_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The ARM correlation ids, this is important field for control plane related impacts
        """
        client_incident_details: NotRequired[pulumi.Input['ClientIncidentDetailsArgsDict']]
        """
        Client incident details ex: incidentId , incident source
        """
        confidence_level: NotRequired[pulumi.Input[Union[str, 'ConfidenceLevel']]]
        """
        Degree of confidence on the impact being a platform issue
        """
        connectivity: NotRequired[pulumi.Input['ConnectivityArgsDict']]
        """
        Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue
        """
        end_date_time: NotRequired[pulumi.Input[str]]
        """
        Time at which impact has ended 
        """
        error_details: NotRequired[pulumi.Input['ErrorDetailPropertiesArgsDict']]
        """
        ARM error code and error message associated with the impact
        """
        impact_description: NotRequired[pulumi.Input[str]]
        """
        A detailed description of the impact
        """
        impact_group_id: NotRequired[pulumi.Input[str]]
        """
        Use this field to group impacts
        """
        performance: NotRequired[pulumi.Input[Sequence[pulumi.Input['PerformanceArgsDict']]]]
        """
        Details about performance issue. Applicable for performance impacts.
        """
        workload: NotRequired[pulumi.Input['WorkloadArgsDict']]
        """
        Information about the impacted workload
        """
elif False:
    WorkloadImpactPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadImpactPropertiesArgs:
    def __init__(__self__, *,
                 impact_category: pulumi.Input[str],
                 impacted_resource_id: pulumi.Input[str],
                 start_date_time: pulumi.Input[str],
                 additional_properties: Optional[Any] = None,
                 arm_correlation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_incident_details: Optional[pulumi.Input['ClientIncidentDetailsArgs']] = None,
                 confidence_level: Optional[pulumi.Input[Union[str, 'ConfidenceLevel']]] = None,
                 connectivity: Optional[pulumi.Input['ConnectivityArgs']] = None,
                 end_date_time: Optional[pulumi.Input[str]] = None,
                 error_details: Optional[pulumi.Input['ErrorDetailPropertiesArgs']] = None,
                 impact_description: Optional[pulumi.Input[str]] = None,
                 impact_group_id: Optional[pulumi.Input[str]] = None,
                 performance: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceArgs']]]] = None,
                 workload: Optional[pulumi.Input['WorkloadArgs']] = None):
        """
        Workload impact properties
        :param pulumi.Input[str] impact_category: Category of the impact,  details can found from /impactCategories API
        :param pulumi.Input[str] impacted_resource_id: Azure resource id of the impacted resource
        :param pulumi.Input[str] start_date_time: Time at which impact was observed 
        :param Any additional_properties: Additional fields related to impact, applicable fields per resource type are list under /impactCategories API
        :param pulumi.Input[Sequence[pulumi.Input[str]]] arm_correlation_ids: The ARM correlation ids, this is important field for control plane related impacts
        :param pulumi.Input['ClientIncidentDetailsArgs'] client_incident_details: Client incident details ex: incidentId , incident source
        :param pulumi.Input[Union[str, 'ConfidenceLevel']] confidence_level: Degree of confidence on the impact being a platform issue
        :param pulumi.Input['ConnectivityArgs'] connectivity: Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue
        :param pulumi.Input[str] end_date_time: Time at which impact has ended 
        :param pulumi.Input['ErrorDetailPropertiesArgs'] error_details: ARM error code and error message associated with the impact
        :param pulumi.Input[str] impact_description: A detailed description of the impact
        :param pulumi.Input[str] impact_group_id: Use this field to group impacts
        :param pulumi.Input[Sequence[pulumi.Input['PerformanceArgs']]] performance: Details about performance issue. Applicable for performance impacts.
        :param pulumi.Input['WorkloadArgs'] workload: Information about the impacted workload
        """
        pulumi.set(__self__, "impact_category", impact_category)
        pulumi.set(__self__, "impacted_resource_id", impacted_resource_id)
        pulumi.set(__self__, "start_date_time", start_date_time)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if arm_correlation_ids is not None:
            pulumi.set(__self__, "arm_correlation_ids", arm_correlation_ids)
        if client_incident_details is not None:
            pulumi.set(__self__, "client_incident_details", client_incident_details)
        if confidence_level is not None:
            pulumi.set(__self__, "confidence_level", confidence_level)
        if connectivity is not None:
            pulumi.set(__self__, "connectivity", connectivity)
        if end_date_time is not None:
            pulumi.set(__self__, "end_date_time", end_date_time)
        if error_details is not None:
            pulumi.set(__self__, "error_details", error_details)
        if impact_description is not None:
            pulumi.set(__self__, "impact_description", impact_description)
        if impact_group_id is not None:
            pulumi.set(__self__, "impact_group_id", impact_group_id)
        if performance is not None:
            pulumi.set(__self__, "performance", performance)
        if workload is not None:
            pulumi.set(__self__, "workload", workload)

    @property
    @pulumi.getter(name="impactCategory")
    def impact_category(self) -> pulumi.Input[str]:
        """
        Category of the impact,  details can found from /impactCategories API
        """
        return pulumi.get(self, "impact_category")

    @impact_category.setter
    def impact_category(self, value: pulumi.Input[str]):
        pulumi.set(self, "impact_category", value)

    @property
    @pulumi.getter(name="impactedResourceId")
    def impacted_resource_id(self) -> pulumi.Input[str]:
        """
        Azure resource id of the impacted resource
        """
        return pulumi.get(self, "impacted_resource_id")

    @impacted_resource_id.setter
    def impacted_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "impacted_resource_id", value)

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> pulumi.Input[str]:
        """
        Time at which impact was observed 
        """
        return pulumi.get(self, "start_date_time")

    @start_date_time.setter
    def start_date_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date_time", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[Any]:
        """
        Additional fields related to impact, applicable fields per resource type are list under /impactCategories API
        """
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[Any]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="armCorrelationIds")
    def arm_correlation_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ARM correlation ids, this is important field for control plane related impacts
        """
        return pulumi.get(self, "arm_correlation_ids")

    @arm_correlation_ids.setter
    def arm_correlation_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "arm_correlation_ids", value)

    @property
    @pulumi.getter(name="clientIncidentDetails")
    def client_incident_details(self) -> Optional[pulumi.Input['ClientIncidentDetailsArgs']]:
        """
        Client incident details ex: incidentId , incident source
        """
        return pulumi.get(self, "client_incident_details")

    @client_incident_details.setter
    def client_incident_details(self, value: Optional[pulumi.Input['ClientIncidentDetailsArgs']]):
        pulumi.set(self, "client_incident_details", value)

    @property
    @pulumi.getter(name="confidenceLevel")
    def confidence_level(self) -> Optional[pulumi.Input[Union[str, 'ConfidenceLevel']]]:
        """
        Degree of confidence on the impact being a platform issue
        """
        return pulumi.get(self, "confidence_level")

    @confidence_level.setter
    def confidence_level(self, value: Optional[pulumi.Input[Union[str, 'ConfidenceLevel']]]):
        pulumi.set(self, "confidence_level", value)

    @property
    @pulumi.getter
    def connectivity(self) -> Optional[pulumi.Input['ConnectivityArgs']]:
        """
        Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue
        """
        return pulumi.get(self, "connectivity")

    @connectivity.setter
    def connectivity(self, value: Optional[pulumi.Input['ConnectivityArgs']]):
        pulumi.set(self, "connectivity", value)

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which impact has ended 
        """
        return pulumi.get(self, "end_date_time")

    @end_date_time.setter
    def end_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date_time", value)

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Optional[pulumi.Input['ErrorDetailPropertiesArgs']]:
        """
        ARM error code and error message associated with the impact
        """
        return pulumi.get(self, "error_details")

    @error_details.setter
    def error_details(self, value: Optional[pulumi.Input['ErrorDetailPropertiesArgs']]):
        pulumi.set(self, "error_details", value)

    @property
    @pulumi.getter(name="impactDescription")
    def impact_description(self) -> Optional[pulumi.Input[str]]:
        """
        A detailed description of the impact
        """
        return pulumi.get(self, "impact_description")

    @impact_description.setter
    def impact_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "impact_description", value)

    @property
    @pulumi.getter(name="impactGroupId")
    def impact_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Use this field to group impacts
        """
        return pulumi.get(self, "impact_group_id")

    @impact_group_id.setter
    def impact_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "impact_group_id", value)

    @property
    @pulumi.getter
    def performance(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceArgs']]]]:
        """
        Details about performance issue. Applicable for performance impacts.
        """
        return pulumi.get(self, "performance")

    @performance.setter
    def performance(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PerformanceArgs']]]]):
        pulumi.set(self, "performance", value)

    @property
    @pulumi.getter
    def workload(self) -> Optional[pulumi.Input['WorkloadArgs']]:
        """
        Information about the impacted workload
        """
        return pulumi.get(self, "workload")

    @workload.setter
    def workload(self, value: Optional[pulumi.Input['WorkloadArgs']]):
        pulumi.set(self, "workload", value)


if not MYPY:
    class WorkloadArgsDict(TypedDict):
        """
        Information about the impacted workload
        """
        context: NotRequired[pulumi.Input[str]]
        """
        the scenario for the workload
        """
        toolset: NotRequired[pulumi.Input[Union[str, 'Toolset']]]
        """
        Tool used to interact with Azure. SDK, AzPortal, etc.., Other
        """
elif False:
    WorkloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 toolset: Optional[pulumi.Input[Union[str, 'Toolset']]] = None):
        """
        Information about the impacted workload
        :param pulumi.Input[str] context: the scenario for the workload
        :param pulumi.Input[Union[str, 'Toolset']] toolset: Tool used to interact with Azure. SDK, AzPortal, etc.., Other
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if toolset is not None:
            pulumi.set(__self__, "toolset", toolset)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        the scenario for the workload
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def toolset(self) -> Optional[pulumi.Input[Union[str, 'Toolset']]]:
        """
        Tool used to interact with Azure. SDK, AzPortal, etc.., Other
        """
        return pulumi.get(self, "toolset")

    @toolset.setter
    def toolset(self, value: Optional[pulumi.Input[Union[str, 'Toolset']]]):
        pulumi.set(self, "toolset", value)


