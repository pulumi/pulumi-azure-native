# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ClientIncidentDetailsResponse',
    'ConnectivityResponse',
    'ConnectorPropertiesResponse',
    'ContentResponse',
    'ErrorDetailPropertiesResponse',
    'ExpectedValueRangeResponse',
    'ImpactDetailsResponse',
    'InsightPropertiesResponse',
    'PerformanceResponse',
    'SourceOrTargetResponse',
    'SystemDataResponse',
    'WorkloadImpactPropertiesResponse',
    'WorkloadResponse',
]

@pulumi.output_type
class ClientIncidentDetailsResponse(dict):
    """
    Client incident details ex: incidentId , incident source
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIncidentId":
            suggest = "client_incident_id"
        elif key == "clientIncidentSource":
            suggest = "client_incident_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientIncidentDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientIncidentDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientIncidentDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_incident_id: Optional[str] = None,
                 client_incident_source: Optional[str] = None):
        """
        Client incident details ex: incidentId , incident source
        :param str client_incident_id: Client incident id. ex : id of the incident created to investigate and address the impact if any.
        :param str client_incident_source: Client incident source. ex : source system name where the incident is created
        """
        if client_incident_id is not None:
            pulumi.set(__self__, "client_incident_id", client_incident_id)
        if client_incident_source is not None:
            pulumi.set(__self__, "client_incident_source", client_incident_source)

    @property
    @pulumi.getter(name="clientIncidentId")
    def client_incident_id(self) -> Optional[str]:
        """
        Client incident id. ex : id of the incident created to investigate and address the impact if any.
        """
        return pulumi.get(self, "client_incident_id")

    @property
    @pulumi.getter(name="clientIncidentSource")
    def client_incident_source(self) -> Optional[str]:
        """
        Client incident source. ex : source system name where the incident is created
        """
        return pulumi.get(self, "client_incident_source")


@pulumi.output_type
class ConnectivityResponse(dict):
    """
    Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource could be VM or the network. In such cases, the connectivity field will have the details about both VM and network.
    """
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 source: Optional['outputs.SourceOrTargetResponse'] = None,
                 target: Optional['outputs.SourceOrTargetResponse'] = None):
        """
        Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource could be VM or the network. In such cases, the connectivity field will have the details about both VM and network.
        :param int port: Port number for the connection
        :param str protocol: Protocol used for the connection
        :param 'SourceOrTargetResponse' source: Source from which the connection was attempted
        :param 'SourceOrTargetResponse' target: target which connection was attempted
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number for the connection
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used for the connection
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.SourceOrTargetResponse']:
        """
        Source from which the connection was attempted
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.SourceOrTargetResponse']:
        """
        target which connection was attempted
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ConnectorPropertiesResponse(dict):
    """
    Details of the Connector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorId":
            suggest = "connector_id"
        elif key == "connectorType":
            suggest = "connector_type"
        elif key == "lastRunTimeStamp":
            suggest = "last_run_time_stamp"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_id: str,
                 connector_type: str,
                 last_run_time_stamp: str,
                 provisioning_state: str,
                 tenant_id: str):
        """
        Details of the Connector.
        :param str connector_id: unique id of the connector.
        :param str connector_type: connector type
        :param str last_run_time_stamp: last run time stamp of this connector in UTC time zone
        :param str provisioning_state: Resource provisioning state.
        :param str tenant_id: tenant id of this connector
        """
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "last_run_time_stamp", last_run_time_stamp)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> str:
        """
        unique id of the connector.
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> str:
        """
        connector type
        """
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="lastRunTimeStamp")
    def last_run_time_stamp(self) -> str:
        """
        last run time stamp of this connector in UTC time zone
        """
        return pulumi.get(self, "last_run_time_stamp")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Resource provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        tenant id of this connector
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ContentResponse(dict):
    """
    Article details of the insight like title, description etc
    """
    def __init__(__self__, *,
                 description: str,
                 title: str):
        """
        Article details of the insight like title, description etc
        :param str description: Description of the insight
        :param str title: Title of the insight
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the insight
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title of the insight
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class ErrorDetailPropertiesResponse(dict):
    """
    ARM error code and error message associated with the impact
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None):
        """
        ARM error code and error message associated with the impact
        :param str error_code: ARM Error code associated with the impact.
        :param str error_message: ARM Error Message associated with the impact
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        ARM Error code associated with the impact.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        ARM Error Message associated with the impact
        """
        return pulumi.get(self, "error_message")


@pulumi.output_type
class ExpectedValueRangeResponse(dict):
    """
    Max and Min Threshold values for the metric
    """
    def __init__(__self__, *,
                 max: float,
                 min: float):
        """
        Max and Min Threshold values for the metric
        :param float max: Max threshold value for the metric
        :param float min: Min threshold value for the metric
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> float:
        """
        Max threshold value for the metric
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        """
        Min threshold value for the metric
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class ImpactDetailsResponse(dict):
    """
    details of of the impact for which insight has been generated.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impactId":
            suggest = "impact_id"
        elif key == "impactedResourceId":
            suggest = "impacted_resource_id"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "endTime":
            suggest = "end_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImpactDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImpactDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImpactDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impact_id: str,
                 impacted_resource_id: str,
                 start_time: str,
                 end_time: Optional[str] = None):
        """
        details of of the impact for which insight has been generated.
        :param str impact_id: Azure Id of the impact.
        :param str impacted_resource_id: List of impacted Azure resources.
        :param str start_time: Time at which impact was started according to reported impact.
        :param str end_time: Time at which impact was ended according to reported impact.
        """
        pulumi.set(__self__, "impact_id", impact_id)
        pulumi.set(__self__, "impacted_resource_id", impacted_resource_id)
        pulumi.set(__self__, "start_time", start_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)

    @property
    @pulumi.getter(name="impactId")
    def impact_id(self) -> str:
        """
        Azure Id of the impact.
        """
        return pulumi.get(self, "impact_id")

    @property
    @pulumi.getter(name="impactedResourceId")
    def impacted_resource_id(self) -> str:
        """
        List of impacted Azure resources.
        """
        return pulumi.get(self, "impacted_resource_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Time at which impact was started according to reported impact.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Time at which impact was ended according to reported impact.
        """
        return pulumi.get(self, "end_time")


@pulumi.output_type
class InsightPropertiesResponse(dict):
    """
    Impact category properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightUniqueId":
            suggest = "insight_unique_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "additionalDetails":
            suggest = "additional_details"
        elif key == "eventId":
            suggest = "event_id"
        elif key == "eventTime":
            suggest = "event_time"
        elif key == "groupId":
            suggest = "group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 content: 'outputs.ContentResponse',
                 impact: 'outputs.ImpactDetailsResponse',
                 insight_unique_id: str,
                 provisioning_state: str,
                 additional_details: Optional[Any] = None,
                 event_id: Optional[str] = None,
                 event_time: Optional[str] = None,
                 group_id: Optional[str] = None,
                 status: Optional[str] = None):
        """
        Impact category properties.
        :param str category: category of the insight.
        :param 'ContentResponse' content: Contains title & description for the insight
        :param 'ImpactDetailsResponse' impact: details of of the impact for which insight has been generated.
        :param str insight_unique_id: unique id of the insight.
        :param str provisioning_state: Resource provisioning state.
        :param Any additional_details: additional details of the insight.
        :param str event_id: Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event.
        :param str event_time: Time of the event, which has been correlated the impact.
        :param str group_id: Identifier that can be used to group similar insights.
        :param str status: status of the insight. example resolved, repaired, other.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "impact", impact)
        pulumi.set(__self__, "insight_unique_id", insight_unique_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if event_time is not None:
            pulumi.set(__self__, "event_time", event_time)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        category of the insight.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def content(self) -> 'outputs.ContentResponse':
        """
        Contains title & description for the insight
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def impact(self) -> 'outputs.ImpactDetailsResponse':
        """
        details of of the impact for which insight has been generated.
        """
        return pulumi.get(self, "impact")

    @property
    @pulumi.getter(name="insightUniqueId")
    def insight_unique_id(self) -> str:
        """
        unique id of the insight.
        """
        return pulumi.get(self, "insight_unique_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Resource provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Any]:
        """
        additional details of the insight.
        """
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[str]:
        """
        Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventTime")
    def event_time(self) -> Optional[str]:
        """
        Time of the event, which has been correlated the impact.
        """
        return pulumi.get(self, "event_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        Identifier that can be used to group similar insights.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status of the insight. example resolved, repaired, other.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PerformanceResponse(dict):
    """
    Details about impacted performance metrics. Applicable for performance related impact
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedValueRange":
            suggest = "expected_value_range"
        elif key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerformanceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerformanceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerformanceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actual: Optional[float] = None,
                 expected: Optional[float] = None,
                 expected_value_range: Optional['outputs.ExpectedValueRangeResponse'] = None,
                 metric_name: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        Details about impacted performance metrics. Applicable for performance related impact
        :param float actual: Observed value for the metric
        :param float expected: Threshold value for the metric
        :param 'ExpectedValueRangeResponse' expected_value_range: Max and Min Threshold values for the metric
        :param str metric_name: Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API
        :param str unit: Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
        """
        if actual is not None:
            pulumi.set(__self__, "actual", actual)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if expected_value_range is not None:
            pulumi.set(__self__, "expected_value_range", expected_value_range)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def actual(self) -> Optional[float]:
        """
        Observed value for the metric
        """
        return pulumi.get(self, "actual")

    @property
    @pulumi.getter
    def expected(self) -> Optional[float]:
        """
        Threshold value for the metric
        """
        return pulumi.get(self, "expected")

    @property
    @pulumi.getter(name="expectedValueRange")
    def expected_value_range(self) -> Optional['outputs.ExpectedValueRangeResponse']:
        """
        Max and Min Threshold values for the metric
        """
        return pulumi.get(self, "expected_value_range")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class SourceOrTargetResponse(dict):
    """
    Resource details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureResourceId":
            suggest = "azure_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceOrTargetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceOrTargetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceOrTargetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_resource_id: Optional[str] = None):
        """
        Resource details
        :param str azure_resource_id: Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}
        """
        if azure_resource_id is not None:
            pulumi.set(__self__, "azure_resource_id", azure_resource_id)

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> Optional[str]:
        """
        Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}
        """
        return pulumi.get(self, "azure_resource_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class WorkloadImpactPropertiesResponse(dict):
    """
    Workload impact properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impactCategory":
            suggest = "impact_category"
        elif key == "impactUniqueId":
            suggest = "impact_unique_id"
        elif key == "impactedResourceId":
            suggest = "impacted_resource_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "reportedTimeUtc":
            suggest = "reported_time_utc"
        elif key == "startDateTime":
            suggest = "start_date_time"
        elif key == "additionalProperties":
            suggest = "additional_properties"
        elif key == "armCorrelationIds":
            suggest = "arm_correlation_ids"
        elif key == "clientIncidentDetails":
            suggest = "client_incident_details"
        elif key == "confidenceLevel":
            suggest = "confidence_level"
        elif key == "endDateTime":
            suggest = "end_date_time"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "impactDescription":
            suggest = "impact_description"
        elif key == "impactGroupId":
            suggest = "impact_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadImpactPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadImpactPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadImpactPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impact_category: str,
                 impact_unique_id: str,
                 impacted_resource_id: str,
                 provisioning_state: str,
                 reported_time_utc: str,
                 start_date_time: str,
                 additional_properties: Optional[Any] = None,
                 arm_correlation_ids: Optional[Sequence[str]] = None,
                 client_incident_details: Optional['outputs.ClientIncidentDetailsResponse'] = None,
                 confidence_level: Optional[str] = None,
                 connectivity: Optional['outputs.ConnectivityResponse'] = None,
                 end_date_time: Optional[str] = None,
                 error_details: Optional['outputs.ErrorDetailPropertiesResponse'] = None,
                 impact_description: Optional[str] = None,
                 impact_group_id: Optional[str] = None,
                 performance: Optional[Sequence['outputs.PerformanceResponse']] = None,
                 workload: Optional['outputs.WorkloadResponse'] = None):
        """
        Workload impact properties
        :param str impact_category: Category of the impact,  details can found from /impactCategories API
        :param str impact_unique_id: Unique ID of the impact (UUID)
        :param str impacted_resource_id: Azure resource id of the impacted resource
        :param str provisioning_state: Resource provisioning state.
        :param str reported_time_utc: Time at which impact is reported
        :param str start_date_time: Time at which impact was observed 
        :param Any additional_properties: Additional fields related to impact, applicable fields per resource type are list under /impactCategories API
        :param Sequence[str] arm_correlation_ids: The ARM correlation ids, this is important field for control plane related impacts
        :param 'ClientIncidentDetailsResponse' client_incident_details: Client incident details ex: incidentId , incident source
        :param str confidence_level: Degree of confidence on the impact being a platform issue
        :param 'ConnectivityResponse' connectivity: Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue
        :param str end_date_time: Time at which impact has ended 
        :param 'ErrorDetailPropertiesResponse' error_details: ARM error code and error message associated with the impact
        :param str impact_description: A detailed description of the impact
        :param str impact_group_id: Use this field to group impacts
        :param Sequence['PerformanceResponse'] performance: Details about performance issue. Applicable for performance impacts.
        :param 'WorkloadResponse' workload: Information about the impacted workload
        """
        pulumi.set(__self__, "impact_category", impact_category)
        pulumi.set(__self__, "impact_unique_id", impact_unique_id)
        pulumi.set(__self__, "impacted_resource_id", impacted_resource_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "reported_time_utc", reported_time_utc)
        pulumi.set(__self__, "start_date_time", start_date_time)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if arm_correlation_ids is not None:
            pulumi.set(__self__, "arm_correlation_ids", arm_correlation_ids)
        if client_incident_details is not None:
            pulumi.set(__self__, "client_incident_details", client_incident_details)
        if confidence_level is not None:
            pulumi.set(__self__, "confidence_level", confidence_level)
        if connectivity is not None:
            pulumi.set(__self__, "connectivity", connectivity)
        if end_date_time is not None:
            pulumi.set(__self__, "end_date_time", end_date_time)
        if error_details is not None:
            pulumi.set(__self__, "error_details", error_details)
        if impact_description is not None:
            pulumi.set(__self__, "impact_description", impact_description)
        if impact_group_id is not None:
            pulumi.set(__self__, "impact_group_id", impact_group_id)
        if performance is not None:
            pulumi.set(__self__, "performance", performance)
        if workload is not None:
            pulumi.set(__self__, "workload", workload)

    @property
    @pulumi.getter(name="impactCategory")
    def impact_category(self) -> str:
        """
        Category of the impact,  details can found from /impactCategories API
        """
        return pulumi.get(self, "impact_category")

    @property
    @pulumi.getter(name="impactUniqueId")
    def impact_unique_id(self) -> str:
        """
        Unique ID of the impact (UUID)
        """
        return pulumi.get(self, "impact_unique_id")

    @property
    @pulumi.getter(name="impactedResourceId")
    def impacted_resource_id(self) -> str:
        """
        Azure resource id of the impacted resource
        """
        return pulumi.get(self, "impacted_resource_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Resource provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="reportedTimeUtc")
    def reported_time_utc(self) -> str:
        """
        Time at which impact is reported
        """
        return pulumi.get(self, "reported_time_utc")

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> str:
        """
        Time at which impact was observed 
        """
        return pulumi.get(self, "start_date_time")

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[Any]:
        """
        Additional fields related to impact, applicable fields per resource type are list under /impactCategories API
        """
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="armCorrelationIds")
    def arm_correlation_ids(self) -> Optional[Sequence[str]]:
        """
        The ARM correlation ids, this is important field for control plane related impacts
        """
        return pulumi.get(self, "arm_correlation_ids")

    @property
    @pulumi.getter(name="clientIncidentDetails")
    def client_incident_details(self) -> Optional['outputs.ClientIncidentDetailsResponse']:
        """
        Client incident details ex: incidentId , incident source
        """
        return pulumi.get(self, "client_incident_details")

    @property
    @pulumi.getter(name="confidenceLevel")
    def confidence_level(self) -> Optional[str]:
        """
        Degree of confidence on the impact being a platform issue
        """
        return pulumi.get(self, "confidence_level")

    @property
    @pulumi.getter
    def connectivity(self) -> Optional['outputs.ConnectivityResponse']:
        """
        Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue
        """
        return pulumi.get(self, "connectivity")

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> Optional[str]:
        """
        Time at which impact has ended 
        """
        return pulumi.get(self, "end_date_time")

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Optional['outputs.ErrorDetailPropertiesResponse']:
        """
        ARM error code and error message associated with the impact
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter(name="impactDescription")
    def impact_description(self) -> Optional[str]:
        """
        A detailed description of the impact
        """
        return pulumi.get(self, "impact_description")

    @property
    @pulumi.getter(name="impactGroupId")
    def impact_group_id(self) -> Optional[str]:
        """
        Use this field to group impacts
        """
        return pulumi.get(self, "impact_group_id")

    @property
    @pulumi.getter
    def performance(self) -> Optional[Sequence['outputs.PerformanceResponse']]:
        """
        Details about performance issue. Applicable for performance impacts.
        """
        return pulumi.get(self, "performance")

    @property
    @pulumi.getter
    def workload(self) -> Optional['outputs.WorkloadResponse']:
        """
        Information about the impacted workload
        """
        return pulumi.get(self, "workload")


@pulumi.output_type
class WorkloadResponse(dict):
    """
    Information about the impacted workload
    """
    def __init__(__self__, *,
                 context: Optional[str] = None,
                 toolset: Optional[str] = None):
        """
        Information about the impacted workload
        :param str context: the scenario for the workload
        :param str toolset: Tool used to interact with Azure. SDK, AzPortal, etc.., Other
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if toolset is not None:
            pulumi.set(__self__, "toolset", toolset)

    @property
    @pulumi.getter
    def context(self) -> Optional[str]:
        """
        the scenario for the workload
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter
    def toolset(self) -> Optional[str]:
        """
        Tool used to interact with Azure. SDK, AzPortal, etc.., Other
        """
        return pulumi.get(self, "toolset")


