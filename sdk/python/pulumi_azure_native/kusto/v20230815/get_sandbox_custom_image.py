# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetSandboxCustomImageResult',
    'AwaitableGetSandboxCustomImageResult',
    'get_sandbox_custom_image',
    'get_sandbox_custom_image_output',
]

@pulumi.output_type
class GetSandboxCustomImageResult:
    """
    Class representing a Kusto sandbox custom image.
    """
    def __init__(__self__, id=None, language=None, language_version=None, name=None, provisioning_state=None, requirements_file_content=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        pulumi.set(__self__, "language", language)
        if language_version and not isinstance(language_version, str):
            raise TypeError("Expected argument 'language_version' to be a str")
        pulumi.set(__self__, "language_version", language_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if requirements_file_content and not isinstance(requirements_file_content, str):
            raise TypeError("Expected argument 'requirements_file_content' to be a str")
        pulumi.set(__self__, "requirements_file_content", requirements_file_content)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def language(self) -> str:
        """
        The language name, for example Python.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> str:
        """
        The version of the language.
        """
        return pulumi.get(self, "language_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioned state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="requirementsFileContent")
    def requirements_file_content(self) -> Optional[str]:
        """
        The requirements file content.
        """
        return pulumi.get(self, "requirements_file_content")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetSandboxCustomImageResult(GetSandboxCustomImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSandboxCustomImageResult(
            id=self.id,
            language=self.language,
            language_version=self.language_version,
            name=self.name,
            provisioning_state=self.provisioning_state,
            requirements_file_content=self.requirements_file_content,
            type=self.type)


def get_sandbox_custom_image(cluster_name: Optional[str] = None,
                             resource_group_name: Optional[str] = None,
                             sandbox_custom_image_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSandboxCustomImageResult:
    """
    Returns a sandbox custom image


    :param str cluster_name: The name of the Kusto cluster.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str sandbox_custom_image_name: The name of the sandbox custom image.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['sandboxCustomImageName'] = sandbox_custom_image_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:kusto/v20230815:getSandboxCustomImage', __args__, opts=opts, typ=GetSandboxCustomImageResult).value

    return AwaitableGetSandboxCustomImageResult(
        id=pulumi.get(__ret__, 'id'),
        language=pulumi.get(__ret__, 'language'),
        language_version=pulumi.get(__ret__, 'language_version'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        requirements_file_content=pulumi.get(__ret__, 'requirements_file_content'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_sandbox_custom_image)
def get_sandbox_custom_image_output(cluster_name: Optional[pulumi.Input[str]] = None,
                                    resource_group_name: Optional[pulumi.Input[str]] = None,
                                    sandbox_custom_image_name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSandboxCustomImageResult]:
    """
    Returns a sandbox custom image


    :param str cluster_name: The name of the Kusto cluster.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str sandbox_custom_image_name: The name of the sandbox custom image.
    """
    ...
