# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AcceptedAudiencesResponse',
    'AzureSkuResponse',
    'CalloutPolicyResponse',
    'DatabasePrincipalResponse',
    'DatabaseStatisticsResponse',
    'FollowerDatabaseDefinitionResponse',
    'IdentityResponse',
    'IdentityResponseUserAssignedIdentities',
    'KeyVaultPropertiesResponse',
    'LanguageExtensionResponse',
    'LanguageExtensionsListResponse',
    'MigrationClusterPropertiesResponse',
    'OptimizedAutoscaleResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointPropertyResponse',
    'PrivateLinkServiceConnectionStatePropertyResponse',
    'SuspensionDetailsResponse',
    'SystemDataResponse',
    'TableLevelSharingPropertiesResponse',
    'TrustedExternalTenantResponse',
    'VirtualNetworkConfigurationResponse',
]

@pulumi.output_type
class AcceptedAudiencesResponse(dict):
    """
    Represents an accepted audience trusted by the cluster.
    """
    def __init__(__self__, *,
                 value: Optional[_builtins.str] = None):
        """
        Represents an accepted audience trusted by the cluster.
        :param _builtins.str value: GUID or valid URL representing an accepted audience.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        GUID or valid URL representing an accepted audience.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AzureSkuResponse(dict):
    """
    Azure SKU definition.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 tier: _builtins.str,
                 capacity: Optional[_builtins.int] = None):
        """
        Azure SKU definition.
        :param _builtins.str name: SKU name.
        :param _builtins.str tier: SKU tier.
        :param _builtins.int capacity: The number of instances of the cluster.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tier", tier)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        SKU name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tier(self) -> _builtins.str:
        """
        SKU tier.
        """
        return pulumi.get(self, "tier")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[_builtins.int]:
        """
        The number of instances of the cluster.
        """
        return pulumi.get(self, "capacity")


@pulumi.output_type
class CalloutPolicyResponse(dict):
    """
    Configuration for external callout policies, including URI patterns, access types, and service types.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calloutId":
            suggest = "callout_id"
        elif key == "calloutType":
            suggest = "callout_type"
        elif key == "calloutUriRegex":
            suggest = "callout_uri_regex"
        elif key == "outboundAccess":
            suggest = "outbound_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CalloutPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CalloutPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CalloutPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callout_id: _builtins.str,
                 callout_type: Optional[_builtins.str] = None,
                 callout_uri_regex: Optional[_builtins.str] = None,
                 outbound_access: Optional[_builtins.str] = None):
        """
        Configuration for external callout policies, including URI patterns, access types, and service types.
        :param _builtins.str callout_id: Unique identifier for the callout configuration.
        :param _builtins.str callout_type: Type of the callout service, specifying the kind of external resource or service being accessed.
        :param _builtins.str callout_uri_regex: Regular expression or FQDN pattern for the callout URI.
        :param _builtins.str outbound_access: Indicates whether outbound access is permitted for the specified URI pattern.
        """
        pulumi.set(__self__, "callout_id", callout_id)
        if callout_type is not None:
            pulumi.set(__self__, "callout_type", callout_type)
        if callout_uri_regex is not None:
            pulumi.set(__self__, "callout_uri_regex", callout_uri_regex)
        if outbound_access is not None:
            pulumi.set(__self__, "outbound_access", outbound_access)

    @_builtins.property
    @pulumi.getter(name="calloutId")
    def callout_id(self) -> _builtins.str:
        """
        Unique identifier for the callout configuration.
        """
        return pulumi.get(self, "callout_id")

    @_builtins.property
    @pulumi.getter(name="calloutType")
    def callout_type(self) -> Optional[_builtins.str]:
        """
        Type of the callout service, specifying the kind of external resource or service being accessed.
        """
        return pulumi.get(self, "callout_type")

    @_builtins.property
    @pulumi.getter(name="calloutUriRegex")
    def callout_uri_regex(self) -> Optional[_builtins.str]:
        """
        Regular expression or FQDN pattern for the callout URI.
        """
        return pulumi.get(self, "callout_uri_regex")

    @_builtins.property
    @pulumi.getter(name="outboundAccess")
    def outbound_access(self) -> Optional[_builtins.str]:
        """
        Indicates whether outbound access is permitted for the specified URI pattern.
        """
        return pulumi.get(self, "outbound_access")


@pulumi.output_type
class DatabasePrincipalResponse(dict):
    """
    A class representing database principal entity.
    """
    def __init__(__self__, *,
                 name: _builtins.str,
                 role: _builtins.str,
                 tenant_name: _builtins.str,
                 type: _builtins.str,
                 app_id: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 fqn: Optional[_builtins.str] = None):
        """
        A class representing database principal entity.
        :param _builtins.str name: Database principal name.
        :param _builtins.str role: Database principal role.
        :param _builtins.str tenant_name: The tenant name of the principal
        :param _builtins.str type: Database principal type.
        :param _builtins.str app_id: Application id - relevant only for application principal type.
        :param _builtins.str email: Database principal email if exists.
        :param _builtins.str fqn: Database principal fully qualified name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "tenant_name", tenant_name)
        pulumi.set(__self__, "type", type)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if fqn is not None:
            pulumi.set(__self__, "fqn", fqn)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Database principal name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Database principal role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> _builtins.str:
        """
        The tenant name of the principal
        """
        return pulumi.get(self, "tenant_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Database principal type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[_builtins.str]:
        """
        Application id - relevant only for application principal type.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        Database principal email if exists.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def fqn(self) -> Optional[_builtins.str]:
        """
        Database principal fully qualified name.
        """
        return pulumi.get(self, "fqn")


@pulumi.output_type
class DatabaseStatisticsResponse(dict):
    """
    A class that contains database statistics information.
    """
    def __init__(__self__, *,
                 size: Optional[_builtins.float] = None):
        """
        A class that contains database statistics information.
        :param _builtins.float size: The database size - the total size of compressed data and index in bytes.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.float]:
        """
        The database size - the total size of compressed data and index in bytes.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class FollowerDatabaseDefinitionResponse(dict):
    """
    A class representing follower database request.
    """
    def __init__(__self__, *,
                 attached_database_configuration_name: _builtins.str,
                 cluster_resource_id: _builtins.str,
                 database_name: _builtins.str,
                 database_share_origin: _builtins.str,
                 table_level_sharing_properties: 'outputs.TableLevelSharingPropertiesResponse'):
        """
        A class representing follower database request.
        :param _builtins.str attached_database_configuration_name: Resource name of the attached database configuration in the follower cluster.
        :param _builtins.str cluster_resource_id: Resource id of the cluster that follows a database owned by this cluster.
        :param _builtins.str database_name: The database name owned by this cluster that was followed. * in case following all databases.
        :param _builtins.str database_share_origin: The origin of the following setup.
        :param 'TableLevelSharingPropertiesResponse' table_level_sharing_properties: Table level sharing specifications
        """
        pulumi.set(__self__, "attached_database_configuration_name", attached_database_configuration_name)
        pulumi.set(__self__, "cluster_resource_id", cluster_resource_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_share_origin", database_share_origin)
        pulumi.set(__self__, "table_level_sharing_properties", table_level_sharing_properties)

    @_builtins.property
    @pulumi.getter(name="attachedDatabaseConfigurationName")
    def attached_database_configuration_name(self) -> _builtins.str:
        """
        Resource name of the attached database configuration in the follower cluster.
        """
        return pulumi.get(self, "attached_database_configuration_name")

    @_builtins.property
    @pulumi.getter(name="clusterResourceId")
    def cluster_resource_id(self) -> _builtins.str:
        """
        Resource id of the cluster that follows a database owned by this cluster.
        """
        return pulumi.get(self, "cluster_resource_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        The database name owned by this cluster that was followed. * in case following all databases.
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="databaseShareOrigin")
    def database_share_origin(self) -> _builtins.str:
        """
        The origin of the following setup.
        """
        return pulumi.get(self, "database_share_origin")

    @_builtins.property
    @pulumi.getter(name="tableLevelSharingProperties")
    def table_level_sharing_properties(self) -> 'outputs.TableLevelSharingPropertiesResponse':
        """
        Table level sharing specifications
        """
        return pulumi.get(self, "table_level_sharing_properties")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.IdentityResponseUserAssignedIdentities']] = None):
        """
        Identity for the resource.
        :param _builtins.str principal_id: The principal ID of resource identity.
        :param _builtins.str tenant_id: The tenant ID of resource.
        :param _builtins.str type: The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove all identities.
        :param Mapping[str, 'IdentityResponseUserAssignedIdentities'] user_assigned_identities: The list of user identities associated with the Kusto cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove all identities.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.IdentityResponseUserAssignedIdentities']]:
        """
        The list of user identities associated with the Kusto cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class IdentityResponseUserAssignedIdentities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponseUserAssignedIdentities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponseUserAssignedIdentities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponseUserAssignedIdentities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        :param _builtins.str client_id: The client id of user assigned identity.
        :param _builtins.str principal_id: The principal id of user assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client id of user assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal id of user assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class KeyVaultPropertiesResponse(dict):
    """
    Properties of the key vault.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"
        elif key == "keyVaultUri":
            suggest = "key_vault_uri"
        elif key == "keyVersion":
            suggest = "key_version"
        elif key == "userIdentity":
            suggest = "user_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVaultPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVaultPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVaultPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: Optional[_builtins.str] = None,
                 key_vault_uri: Optional[_builtins.str] = None,
                 key_version: Optional[_builtins.str] = None,
                 user_identity: Optional[_builtins.str] = None):
        """
        Properties of the key vault.
        :param _builtins.str key_name: The name of the key vault key.
        :param _builtins.str key_vault_uri: The Uri of the key vault.
        :param _builtins.str key_version: The version of the key vault key.
        :param _builtins.str user_identity: The user assigned identity (ARM resource id) that has access to the key.
        """
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_vault_uri is not None:
            pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)
        if user_identity is not None:
            pulumi.set(__self__, "user_identity", user_identity)

    @_builtins.property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[_builtins.str]:
        """
        The name of the key vault key.
        """
        return pulumi.get(self, "key_name")

    @_builtins.property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[_builtins.str]:
        """
        The Uri of the key vault.
        """
        return pulumi.get(self, "key_vault_uri")

    @_builtins.property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[_builtins.str]:
        """
        The version of the key vault key.
        """
        return pulumi.get(self, "key_version")

    @_builtins.property
    @pulumi.getter(name="userIdentity")
    def user_identity(self) -> Optional[_builtins.str]:
        """
        The user assigned identity (ARM resource id) that has access to the key.
        """
        return pulumi.get(self, "user_identity")


@pulumi.output_type
class LanguageExtensionResponse(dict):
    """
    The language extension object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageExtensionCustomImageName":
            suggest = "language_extension_custom_image_name"
        elif key == "languageExtensionImageName":
            suggest = "language_extension_image_name"
        elif key == "languageExtensionName":
            suggest = "language_extension_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LanguageExtensionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LanguageExtensionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LanguageExtensionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_extension_custom_image_name: Optional[_builtins.str] = None,
                 language_extension_image_name: Optional[_builtins.str] = None,
                 language_extension_name: Optional[_builtins.str] = None):
        """
        The language extension object.
        :param _builtins.str language_extension_custom_image_name: The language extension custom image name.
        :param _builtins.str language_extension_image_name: The language extension image name.
        :param _builtins.str language_extension_name: The language extension name.
        """
        if language_extension_custom_image_name is not None:
            pulumi.set(__self__, "language_extension_custom_image_name", language_extension_custom_image_name)
        if language_extension_image_name is not None:
            pulumi.set(__self__, "language_extension_image_name", language_extension_image_name)
        if language_extension_name is not None:
            pulumi.set(__self__, "language_extension_name", language_extension_name)

    @_builtins.property
    @pulumi.getter(name="languageExtensionCustomImageName")
    def language_extension_custom_image_name(self) -> Optional[_builtins.str]:
        """
        The language extension custom image name.
        """
        return pulumi.get(self, "language_extension_custom_image_name")

    @_builtins.property
    @pulumi.getter(name="languageExtensionImageName")
    def language_extension_image_name(self) -> Optional[_builtins.str]:
        """
        The language extension image name.
        """
        return pulumi.get(self, "language_extension_image_name")

    @_builtins.property
    @pulumi.getter(name="languageExtensionName")
    def language_extension_name(self) -> Optional[_builtins.str]:
        """
        The language extension name.
        """
        return pulumi.get(self, "language_extension_name")


@pulumi.output_type
class LanguageExtensionsListResponse(dict):
    """
    The list of language extension objects.
    """
    def __init__(__self__, *,
                 value: Optional[Sequence['outputs.LanguageExtensionResponse']] = None):
        """
        The list of language extension objects.
        :param Sequence['LanguageExtensionResponse'] value: The list of language extensions.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[Sequence['outputs.LanguageExtensionResponse']]:
        """
        The list of language extensions.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MigrationClusterPropertiesResponse(dict):
    """
    Represents a properties of a cluster that is part of a migration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataIngestionUri":
            suggest = "data_ingestion_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationClusterPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationClusterPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationClusterPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_ingestion_uri: _builtins.str,
                 id: _builtins.str,
                 role: _builtins.str,
                 uri: _builtins.str):
        """
        Represents a properties of a cluster that is part of a migration.
        :param _builtins.str data_ingestion_uri: The public data ingestion URL of the cluster.
        :param _builtins.str id: The resource ID of the cluster.
        :param _builtins.str role: The role of the cluster in the migration process.
        :param _builtins.str uri: The public URL of the cluster.
        """
        pulumi.set(__self__, "data_ingestion_uri", data_ingestion_uri)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter(name="dataIngestionUri")
    def data_ingestion_uri(self) -> _builtins.str:
        """
        The public data ingestion URL of the cluster.
        """
        return pulumi.get(self, "data_ingestion_uri")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID of the cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        The role of the cluster in the migration process.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        The public URL of the cluster.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class OptimizedAutoscaleResponse(dict):
    """
    A class that contains the optimized auto scale definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OptimizedAutoscaleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OptimizedAutoscaleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OptimizedAutoscaleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: _builtins.bool,
                 maximum: _builtins.int,
                 minimum: _builtins.int,
                 version: _builtins.int):
        """
        A class that contains the optimized auto scale definition.
        :param _builtins.bool is_enabled: A boolean value that indicate if the optimized autoscale feature is enabled or not.
        :param _builtins.int maximum: Maximum allowed instances count.
        :param _builtins.int minimum: Minimum allowed instances count.
        :param _builtins.int version: The version of the template defined, for instance 1.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "minimum", minimum)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        A boolean value that indicate if the optimized autoscale feature is enabled or not.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter
    def maximum(self) -> _builtins.int:
        """
        Maximum allowed instances count.
        """
        return pulumi.get(self, "maximum")

    @_builtins.property
    @pulumi.getter
    def minimum(self) -> _builtins.int:
        """
        Minimum allowed instances count.
        """
        return pulumi.get(self, "minimum")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the template defined, for instance 1.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    A private endpoint connection
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemData":
            suggest = "system_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_endpoint: 'outputs.PrivateEndpointPropertyResponse',
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStatePropertyResponse',
                 provisioning_state: _builtins.str,
                 system_data: 'outputs.SystemDataResponse',
                 type: _builtins.str):
        """
        A private endpoint connection
        :param _builtins.str group_id: Group id of the private endpoint.
        :param _builtins.str id: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        :param _builtins.str name: The name of the resource
        :param 'PrivateEndpointPropertyResponse' private_endpoint: Private endpoint which the connection belongs to.
        :param 'PrivateLinkServiceConnectionStatePropertyResponse' private_link_service_connection_state: Connection State of the Private Endpoint Connection.
        :param _builtins.str provisioning_state: Provisioning state of the private endpoint.
        :param 'SystemDataResponse' system_data: Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_endpoint", private_endpoint)
        pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "system_data", system_data)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        Group id of the private endpoint.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> 'outputs.PrivateEndpointPropertyResponse':
        """
        Private endpoint which the connection belongs to.
        """
        return pulumi.get(self, "private_endpoint")

    @_builtins.property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStatePropertyResponse':
        """
        Connection State of the Private Endpoint Connection.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning state of the private endpoint.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PrivateEndpointPropertyResponse(dict):
    """
    Private endpoint which the connection belongs to.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        Private endpoint which the connection belongs to.
        :param _builtins.str id: Resource id of the private endpoint.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource id of the private endpoint.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStatePropertyResponse(dict):
    """
    Connection State of the Private Endpoint Connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStatePropertyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStatePropertyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStatePropertyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        Connection State of the Private Endpoint Connection.
        :param _builtins.str actions_required: Any action that is required beyond basic workflow (approve/ reject/ disconnect)
        :param _builtins.str description: The private link service connection description.
        :param _builtins.str status: The private link service connection status.
        """
        pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> _builtins.str:
        """
        Any action that is required beyond basic workflow (approve/ reject/ disconnect)
        """
        return pulumi.get(self, "actions_required")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The private link service connection description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The private link service connection status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SuspensionDetailsResponse(dict):
    """
    The database suspension details. If the database is suspended, this object contains information related to the database's suspension state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "suspensionStartDate":
            suggest = "suspension_start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SuspensionDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SuspensionDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SuspensionDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 suspension_start_date: Optional[_builtins.str] = None):
        """
        The database suspension details. If the database is suspended, this object contains information related to the database's suspension state.
        :param _builtins.str suspension_start_date: The starting date and time of the suspension state.
        """
        if suspension_start_date is not None:
            pulumi.set(__self__, "suspension_start_date", suspension_start_date)

    @_builtins.property
    @pulumi.getter(name="suspensionStartDate")
    def suspension_start_date(self) -> Optional[_builtins.str]:
        """
        The starting date and time of the suspension state.
        """
        return pulumi.get(self, "suspension_start_date")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TableLevelSharingPropertiesResponse(dict):
    """
    Tables that will be included and excluded in the follower database
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalTablesToExclude":
            suggest = "external_tables_to_exclude"
        elif key == "externalTablesToInclude":
            suggest = "external_tables_to_include"
        elif key == "functionsToExclude":
            suggest = "functions_to_exclude"
        elif key == "functionsToInclude":
            suggest = "functions_to_include"
        elif key == "materializedViewsToExclude":
            suggest = "materialized_views_to_exclude"
        elif key == "materializedViewsToInclude":
            suggest = "materialized_views_to_include"
        elif key == "tablesToExclude":
            suggest = "tables_to_exclude"
        elif key == "tablesToInclude":
            suggest = "tables_to_include"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableLevelSharingPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableLevelSharingPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableLevelSharingPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_tables_to_exclude: Optional[Sequence[_builtins.str]] = None,
                 external_tables_to_include: Optional[Sequence[_builtins.str]] = None,
                 functions_to_exclude: Optional[Sequence[_builtins.str]] = None,
                 functions_to_include: Optional[Sequence[_builtins.str]] = None,
                 materialized_views_to_exclude: Optional[Sequence[_builtins.str]] = None,
                 materialized_views_to_include: Optional[Sequence[_builtins.str]] = None,
                 tables_to_exclude: Optional[Sequence[_builtins.str]] = None,
                 tables_to_include: Optional[Sequence[_builtins.str]] = None):
        """
        Tables that will be included and excluded in the follower database
        :param Sequence[_builtins.str] external_tables_to_exclude: List of external tables to exclude from the follower database
        :param Sequence[_builtins.str] external_tables_to_include: List of external tables to include in the follower database
        :param Sequence[_builtins.str] functions_to_exclude: List of functions to exclude from the follower database
        :param Sequence[_builtins.str] functions_to_include: List of functions to include in the follower database
        :param Sequence[_builtins.str] materialized_views_to_exclude: List of materialized views to exclude from the follower database
        :param Sequence[_builtins.str] materialized_views_to_include: List of materialized views to include in the follower database
        :param Sequence[_builtins.str] tables_to_exclude: List of tables to exclude from the follower database
        :param Sequence[_builtins.str] tables_to_include: List of tables to include in the follower database
        """
        if external_tables_to_exclude is not None:
            pulumi.set(__self__, "external_tables_to_exclude", external_tables_to_exclude)
        if external_tables_to_include is not None:
            pulumi.set(__self__, "external_tables_to_include", external_tables_to_include)
        if functions_to_exclude is not None:
            pulumi.set(__self__, "functions_to_exclude", functions_to_exclude)
        if functions_to_include is not None:
            pulumi.set(__self__, "functions_to_include", functions_to_include)
        if materialized_views_to_exclude is not None:
            pulumi.set(__self__, "materialized_views_to_exclude", materialized_views_to_exclude)
        if materialized_views_to_include is not None:
            pulumi.set(__self__, "materialized_views_to_include", materialized_views_to_include)
        if tables_to_exclude is not None:
            pulumi.set(__self__, "tables_to_exclude", tables_to_exclude)
        if tables_to_include is not None:
            pulumi.set(__self__, "tables_to_include", tables_to_include)

    @_builtins.property
    @pulumi.getter(name="externalTablesToExclude")
    def external_tables_to_exclude(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of external tables to exclude from the follower database
        """
        return pulumi.get(self, "external_tables_to_exclude")

    @_builtins.property
    @pulumi.getter(name="externalTablesToInclude")
    def external_tables_to_include(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of external tables to include in the follower database
        """
        return pulumi.get(self, "external_tables_to_include")

    @_builtins.property
    @pulumi.getter(name="functionsToExclude")
    def functions_to_exclude(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of functions to exclude from the follower database
        """
        return pulumi.get(self, "functions_to_exclude")

    @_builtins.property
    @pulumi.getter(name="functionsToInclude")
    def functions_to_include(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of functions to include in the follower database
        """
        return pulumi.get(self, "functions_to_include")

    @_builtins.property
    @pulumi.getter(name="materializedViewsToExclude")
    def materialized_views_to_exclude(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of materialized views to exclude from the follower database
        """
        return pulumi.get(self, "materialized_views_to_exclude")

    @_builtins.property
    @pulumi.getter(name="materializedViewsToInclude")
    def materialized_views_to_include(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of materialized views to include in the follower database
        """
        return pulumi.get(self, "materialized_views_to_include")

    @_builtins.property
    @pulumi.getter(name="tablesToExclude")
    def tables_to_exclude(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of tables to exclude from the follower database
        """
        return pulumi.get(self, "tables_to_exclude")

    @_builtins.property
    @pulumi.getter(name="tablesToInclude")
    def tables_to_include(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of tables to include in the follower database
        """
        return pulumi.get(self, "tables_to_include")


@pulumi.output_type
class TrustedExternalTenantResponse(dict):
    """
    Represents a tenant ID that is trusted by the cluster.
    """
    def __init__(__self__, *,
                 value: Optional[_builtins.str] = None):
        """
        Represents a tenant ID that is trusted by the cluster.
        :param _builtins.str value: GUID representing an external tenant.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        GUID representing an external tenant.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualNetworkConfigurationResponse(dict):
    """
    A class that contains virtual network definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataManagementPublicIpId":
            suggest = "data_management_public_ip_id"
        elif key == "enginePublicIpId":
            suggest = "engine_public_ip_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_management_public_ip_id: _builtins.str,
                 engine_public_ip_id: _builtins.str,
                 subnet_id: _builtins.str,
                 state: Optional[_builtins.str] = None):
        """
        A class that contains virtual network definition.
        :param _builtins.str data_management_public_ip_id: Data management's service public IP address resource id.
        :param _builtins.str engine_public_ip_id: Engine service's public IP address resource id.
        :param _builtins.str subnet_id: The subnet resource id.
        :param _builtins.str state: When enabled, the cluster is deployed into the configured subnet, when disabled it will be removed from the subnet.
        """
        pulumi.set(__self__, "data_management_public_ip_id", data_management_public_ip_id)
        pulumi.set(__self__, "engine_public_ip_id", engine_public_ip_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if state is None:
            state = 'Enabled'
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="dataManagementPublicIpId")
    def data_management_public_ip_id(self) -> _builtins.str:
        """
        Data management's service public IP address resource id.
        """
        return pulumi.get(self, "data_management_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="enginePublicIpId")
    def engine_public_ip_id(self) -> _builtins.str:
        """
        Engine service's public IP address resource id.
        """
        return pulumi.get(self, "engine_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The subnet resource id.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        When enabled, the cluster is deployed into the configured subnet, when disabled it will be removed from the subnet.
        """
        return pulumi.get(self, "state")


