# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPacketCoreDataPlaneResult',
    'AwaitableGetPacketCoreDataPlaneResult',
    'get_packet_core_data_plane',
    'get_packet_core_data_plane_output',
]

@pulumi.output_type
class GetPacketCoreDataPlaneResult:
    """
    Packet core data plane resource. Must be created in the same location as its parent packet core control plane.
    """
    def __init__(__self__, id=None, location=None, name=None, provisioning_state=None, system_data=None, tags=None, type=None, user_plane_access_interface=None, user_plane_access_virtual_ipv4_addresses=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_plane_access_interface and not isinstance(user_plane_access_interface, dict):
            raise TypeError("Expected argument 'user_plane_access_interface' to be a dict")
        pulumi.set(__self__, "user_plane_access_interface", user_plane_access_interface)
        if user_plane_access_virtual_ipv4_addresses and not isinstance(user_plane_access_virtual_ipv4_addresses, list):
            raise TypeError("Expected argument 'user_plane_access_virtual_ipv4_addresses' to be a list")
        pulumi.set(__self__, "user_plane_access_virtual_ipv4_addresses", user_plane_access_virtual_ipv4_addresses)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the packet core data plane resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userPlaneAccessInterface")
    def user_plane_access_interface(self) -> 'outputs.InterfacePropertiesResponse':
        """
        The user plane interface on the access network. For 5G networks, this is the N3 interface. For 4G networks, this is the S1-U interface.
        """
        return pulumi.get(self, "user_plane_access_interface")

    @property
    @pulumi.getter(name="userPlaneAccessVirtualIpv4Addresses")
    def user_plane_access_virtual_ipv4_addresses(self) -> Optional[Sequence[str]]:
        """
        The virtual IP address(es) for the user plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to forward traffic for this address to the control plane access interface on the active or standby node. In non-HA system this list should be omitted or empty.
        """
        return pulumi.get(self, "user_plane_access_virtual_ipv4_addresses")


class AwaitableGetPacketCoreDataPlaneResult(GetPacketCoreDataPlaneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPacketCoreDataPlaneResult(
            id=self.id,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            user_plane_access_interface=self.user_plane_access_interface,
            user_plane_access_virtual_ipv4_addresses=self.user_plane_access_virtual_ipv4_addresses)


def get_packet_core_data_plane(packet_core_control_plane_name: Optional[str] = None,
                               packet_core_data_plane_name: Optional[str] = None,
                               resource_group_name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPacketCoreDataPlaneResult:
    """
    Gets information about the specified packet core data plane.


    :param str packet_core_control_plane_name: The name of the packet core control plane.
    :param str packet_core_data_plane_name: The name of the packet core data plane.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['packetCoreControlPlaneName'] = packet_core_control_plane_name
    __args__['packetCoreDataPlaneName'] = packet_core_data_plane_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:mobilenetwork/v20230901:getPacketCoreDataPlane', __args__, opts=opts, typ=GetPacketCoreDataPlaneResult).value

    return AwaitableGetPacketCoreDataPlaneResult(
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        user_plane_access_interface=pulumi.get(__ret__, 'user_plane_access_interface'),
        user_plane_access_virtual_ipv4_addresses=pulumi.get(__ret__, 'user_plane_access_virtual_ipv4_addresses'))


@_utilities.lift_output_func(get_packet_core_data_plane)
def get_packet_core_data_plane_output(packet_core_control_plane_name: Optional[pulumi.Input[str]] = None,
                                      packet_core_data_plane_name: Optional[pulumi.Input[str]] = None,
                                      resource_group_name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPacketCoreDataPlaneResult]:
    """
    Gets information about the specified packet core data plane.


    :param str packet_core_control_plane_name: The name of the packet core control plane.
    :param str packet_core_data_plane_name: The name of the packet core data plane.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
