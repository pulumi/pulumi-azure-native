# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AsyncOperationIdResponse',
    'AzureStackEdgeDeviceResourceIdResponse',
    'AzureStackHCIClusterResourceIdResponse',
    'CertificateProvisioningResponse',
    'ConnectedClusterResourceIdResponse',
    'CustomLocationResourceIdResponse',
    'HttpsServerCertificateResponse',
    'InstallationResponse',
    'InterfacePropertiesResponse',
    'LocalDiagnosticsAccessConfigurationResponse',
    'ManagedServiceIdentityResponse',
    'PlatformConfigurationResponse',
    'SiteResourceIdResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class AsyncOperationIdResponse(dict):
    """
    Reference to an Azure Async Operation ID.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Async Operation ID.
        :param str id: Azure Async Operation ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Async Operation ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AzureStackEdgeDeviceResourceIdResponse(dict):
    """
    Reference to an Azure Stack Edge device resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Stack Edge device resource.
        :param str id: Azure Stack Edge device resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Stack Edge device resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AzureStackHCIClusterResourceIdResponse(dict):
    """
    Reference to an Azure Stack HCI cluster resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Stack HCI cluster resource.
        :param str id: Azure Stack HCI cluster resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Stack HCI cluster resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class CertificateProvisioningResponse(dict):
    """
    Certificate provisioning state
    """
    def __init__(__self__, *,
                 reason: str,
                 state: str):
        """
        Certificate provisioning state
        :param str reason: Reason for certificate provisioning failure.
        :param str state: The certificate's provisioning state
        """
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for certificate provisioning failure.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The certificate's provisioning state
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ConnectedClusterResourceIdResponse(dict):
    """
    Reference to an Azure Arc custom location resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Arc custom location resource.
        :param str id: Azure Arc connected cluster resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Arc connected cluster resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class CustomLocationResourceIdResponse(dict):
    """
    Reference to an Azure Arc custom location resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Arc custom location resource.
        :param str id: Azure Arc custom location resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Arc custom location resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class HttpsServerCertificateResponse(dict):
    """
    HTTPS server certificate configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateUrl":
            suggest = "certificate_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpsServerCertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpsServerCertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpsServerCertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_url: str,
                 provisioning: 'outputs.CertificateProvisioningResponse'):
        """
        HTTPS server certificate configuration.
        :param str certificate_url: The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        :param 'CertificateProvisioningResponse' provisioning: The provisioning state of the certificate.
        """
        pulumi.set(__self__, "certificate_url", certificate_url)
        pulumi.set(__self__, "provisioning", provisioning)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> str:
        """
        The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        """
        return pulumi.get(self, "certificate_url")

    @property
    @pulumi.getter
    def provisioning(self) -> 'outputs.CertificateProvisioningResponse':
        """
        The provisioning state of the certificate.
        """
        return pulumi.get(self, "provisioning")


@pulumi.output_type
class InstallationResponse(dict):
    """
    The installation state of the packet core.
    """
    def __init__(__self__, *,
                 operation: Optional['outputs.AsyncOperationIdResponse'] = None,
                 state: Optional[str] = None):
        """
        The installation state of the packet core.
        :param 'AsyncOperationIdResponse' operation: A reference to an in-progress installation operation
        :param str state: Installation state
        """
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def operation(self) -> Optional['outputs.AsyncOperationIdResponse']:
        """
        A reference to an in-progress installation operation
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Installation state
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class InterfacePropertiesResponse(dict):
    """
    Interface properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4Gateway":
            suggest = "ipv4_gateway"
        elif key == "ipv4Subnet":
            suggest = "ipv4_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfacePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfacePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfacePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None,
                 ipv4_gateway: Optional[str] = None,
                 ipv4_subnet: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Interface properties
        :param str ipv4_address: The IPv4 address.
        :param str ipv4_gateway: The default IPv4 gateway (router).
        :param str ipv4_subnet: The IPv4 subnet.
        :param str name: The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_gateway is not None:
            pulumi.set(__self__, "ipv4_gateway", ipv4_gateway)
        if ipv4_subnet is not None:
            pulumi.set(__self__, "ipv4_subnet", ipv4_subnet)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        The IPv4 address.
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="ipv4Gateway")
    def ipv4_gateway(self) -> Optional[str]:
        """
        The default IPv4 gateway (router).
        """
        return pulumi.get(self, "ipv4_gateway")

    @property
    @pulumi.getter(name="ipv4Subnet")
    def ipv4_subnet(self) -> Optional[str]:
        """
        The IPv4 subnet.
        """
        return pulumi.get(self, "ipv4_subnet")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LocalDiagnosticsAccessConfigurationResponse(dict):
    """
    The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "httpsServerCertificate":
            suggest = "https_server_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalDiagnosticsAccessConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalDiagnosticsAccessConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalDiagnosticsAccessConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: str,
                 https_server_certificate: Optional['outputs.HttpsServerCertificateResponse'] = None):
        """
        The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        :param str authentication_type: How to authenticate users who access local diagnostics APIs.
        :param 'HttpsServerCertificateResponse' https_server_certificate: The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        if https_server_certificate is not None:
            pulumi.set(__self__, "https_server_certificate", https_server_certificate)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        How to authenticate users who access local diagnostics APIs.
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="httpsServerCertificate")
    def https_server_certificate(self) -> Optional['outputs.HttpsServerCertificateResponse']:
        """
        The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
        return pulumi.get(self, "https_server_certificate")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class PlatformConfigurationResponse(dict):
    """
    The platform where the packet core is deployed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureStackEdgeDevices":
            suggest = "azure_stack_edge_devices"
        elif key == "azureStackEdgeDevice":
            suggest = "azure_stack_edge_device"
        elif key == "azureStackHciCluster":
            suggest = "azure_stack_hci_cluster"
        elif key == "connectedCluster":
            suggest = "connected_cluster"
        elif key == "customLocation":
            suggest = "custom_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_stack_edge_devices: Sequence['outputs.AzureStackEdgeDeviceResourceIdResponse'],
                 type: str,
                 azure_stack_edge_device: Optional['outputs.AzureStackEdgeDeviceResourceIdResponse'] = None,
                 azure_stack_hci_cluster: Optional['outputs.AzureStackHCIClusterResourceIdResponse'] = None,
                 connected_cluster: Optional['outputs.ConnectedClusterResourceIdResponse'] = None,
                 custom_location: Optional['outputs.CustomLocationResourceIdResponse'] = None):
        """
        The platform where the packet core is deployed.
        :param Sequence['AzureStackEdgeDeviceResourceIdResponse'] azure_stack_edge_devices: The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.
        :param str type: The platform type where packet core is deployed.
        :param 'AzureStackEdgeDeviceResourceIdResponse' azure_stack_edge_device: The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        :param 'AzureStackHCIClusterResourceIdResponse' azure_stack_hci_cluster: The Azure Stack HCI cluster where the packet core is deployed.
        :param 'ConnectedClusterResourceIdResponse' connected_cluster: Azure Arc connected cluster where the packet core is deployed.
        :param 'CustomLocationResourceIdResponse' custom_location: Azure Arc custom location where the packet core is deployed.
        """
        pulumi.set(__self__, "azure_stack_edge_devices", azure_stack_edge_devices)
        pulumi.set(__self__, "type", type)
        if azure_stack_edge_device is not None:
            pulumi.set(__self__, "azure_stack_edge_device", azure_stack_edge_device)
        if azure_stack_hci_cluster is not None:
            pulumi.set(__self__, "azure_stack_hci_cluster", azure_stack_hci_cluster)
        if connected_cluster is not None:
            pulumi.set(__self__, "connected_cluster", connected_cluster)
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @property
    @pulumi.getter(name="azureStackEdgeDevices")
    def azure_stack_edge_devices(self) -> Sequence['outputs.AzureStackEdgeDeviceResourceIdResponse']:
        """
        The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.
        """
        return pulumi.get(self, "azure_stack_edge_devices")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The platform type where packet core is deployed.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="azureStackEdgeDevice")
    def azure_stack_edge_device(self) -> Optional['outputs.AzureStackEdgeDeviceResourceIdResponse']:
        """
        The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        """
        return pulumi.get(self, "azure_stack_edge_device")

    @property
    @pulumi.getter(name="azureStackHciCluster")
    def azure_stack_hci_cluster(self) -> Optional['outputs.AzureStackHCIClusterResourceIdResponse']:
        """
        The Azure Stack HCI cluster where the packet core is deployed.
        """
        return pulumi.get(self, "azure_stack_hci_cluster")

    @property
    @pulumi.getter(name="connectedCluster")
    def connected_cluster(self) -> Optional['outputs.ConnectedClusterResourceIdResponse']:
        """
        Azure Arc connected cluster where the packet core is deployed.
        """
        return pulumi.get(self, "connected_cluster")

    @property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional['outputs.CustomLocationResourceIdResponse']:
        """
        Azure Arc custom location where the packet core is deployed.
        """
        return pulumi.get(self, "custom_location")


@pulumi.output_type
class SiteResourceIdResponse(dict):
    """
    Reference to a site resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a site resource.
        :param str id: Site resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Site resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


