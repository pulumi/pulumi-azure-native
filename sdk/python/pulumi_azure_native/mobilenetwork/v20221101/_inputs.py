# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AzureStackEdgeDeviceResourceIdArgs',
    'AzureStackEdgeDeviceResourceIdArgsDict',
    'AzureStackHCIClusterResourceIdArgs',
    'AzureStackHCIClusterResourceIdArgsDict',
    'ConnectedClusterResourceIdArgs',
    'ConnectedClusterResourceIdArgsDict',
    'CustomLocationResourceIdArgs',
    'CustomLocationResourceIdArgsDict',
    'HttpsServerCertificateArgs',
    'HttpsServerCertificateArgsDict',
    'InterfacePropertiesArgs',
    'InterfacePropertiesArgsDict',
    'LocalDiagnosticsAccessConfigurationArgs',
    'LocalDiagnosticsAccessConfigurationArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'PlatformConfigurationArgs',
    'PlatformConfigurationArgsDict',
    'SiteResourceIdArgs',
    'SiteResourceIdArgsDict',
]

MYPY = False

if not MYPY:
    class AzureStackEdgeDeviceResourceIdArgsDict(TypedDict):
        """
        Reference to an Azure Stack Edge device resource.
        """
        id: pulumi.Input[str]
        """
        Azure Stack Edge device resource ID.
        """
elif False:
    AzureStackEdgeDeviceResourceIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureStackEdgeDeviceResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Reference to an Azure Stack Edge device resource.
        :param pulumi.Input[str] id: Azure Stack Edge device resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Azure Stack Edge device resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class AzureStackHCIClusterResourceIdArgsDict(TypedDict):
        """
        Reference to an Azure Stack HCI cluster resource.
        """
        id: pulumi.Input[str]
        """
        Azure Stack HCI cluster resource ID.
        """
elif False:
    AzureStackHCIClusterResourceIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureStackHCIClusterResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Reference to an Azure Stack HCI cluster resource.
        :param pulumi.Input[str] id: Azure Stack HCI cluster resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Azure Stack HCI cluster resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ConnectedClusterResourceIdArgsDict(TypedDict):
        """
        Reference to an Azure Arc custom location resource.
        """
        id: pulumi.Input[str]
        """
        Azure Arc connected cluster resource ID.
        """
elif False:
    ConnectedClusterResourceIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectedClusterResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Reference to an Azure Arc custom location resource.
        :param pulumi.Input[str] id: Azure Arc connected cluster resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Azure Arc connected cluster resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class CustomLocationResourceIdArgsDict(TypedDict):
        """
        Reference to an Azure Arc custom location resource.
        """
        id: pulumi.Input[str]
        """
        Azure Arc custom location resource ID.
        """
elif False:
    CustomLocationResourceIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomLocationResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Reference to an Azure Arc custom location resource.
        :param pulumi.Input[str] id: Azure Arc custom location resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Azure Arc custom location resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class HttpsServerCertificateArgsDict(TypedDict):
        """
        HTTPS server certificate configuration.
        """
        certificate_url: pulumi.Input[str]
        """
        The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        """
elif False:
    HttpsServerCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HttpsServerCertificateArgs:
    def __init__(__self__, *,
                 certificate_url: pulumi.Input[str]):
        """
        HTTPS server certificate configuration.
        :param pulumi.Input[str] certificate_url: The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        """
        pulumi.set(__self__, "certificate_url", certificate_url)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> pulumi.Input[str]:
        """
        The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        """
        return pulumi.get(self, "certificate_url")

    @certificate_url.setter
    def certificate_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_url", value)


if not MYPY:
    class InterfacePropertiesArgsDict(TypedDict):
        """
        Interface properties
        """
        ipv4_address: NotRequired[pulumi.Input[str]]
        """
        The IPv4 address.
        """
        ipv4_gateway: NotRequired[pulumi.Input[str]]
        """
        The default IPv4 gateway (router).
        """
        ipv4_subnet: NotRequired[pulumi.Input[str]]
        """
        The IPv4 subnet.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
elif False:
    InterfacePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InterfacePropertiesArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv4_gateway: Optional[pulumi.Input[str]] = None,
                 ipv4_subnet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Interface properties
        :param pulumi.Input[str] ipv4_address: The IPv4 address.
        :param pulumi.Input[str] ipv4_gateway: The default IPv4 gateway (router).
        :param pulumi.Input[str] ipv4_subnet: The IPv4 subnet.
        :param pulumi.Input[str] name: The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_gateway is not None:
            pulumi.set(__self__, "ipv4_gateway", ipv4_gateway)
        if ipv4_subnet is not None:
            pulumi.set(__self__, "ipv4_subnet", ipv4_subnet)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv4 address.
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="ipv4Gateway")
    def ipv4_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The default IPv4 gateway (router).
        """
        return pulumi.get(self, "ipv4_gateway")

    @ipv4_gateway.setter
    def ipv4_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_gateway", value)

    @property
    @pulumi.getter(name="ipv4Subnet")
    def ipv4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv4 subnet.
        """
        return pulumi.get(self, "ipv4_subnet")

    @ipv4_subnet.setter
    def ipv4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_subnet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class LocalDiagnosticsAccessConfigurationArgsDict(TypedDict):
        """
        The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        """
        authentication_type: pulumi.Input[Union[str, 'AuthenticationType']]
        """
        How to authenticate users who access local diagnostics APIs.
        """
        https_server_certificate: NotRequired[pulumi.Input['HttpsServerCertificateArgsDict']]
        """
        The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
elif False:
    LocalDiagnosticsAccessConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LocalDiagnosticsAccessConfigurationArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input[Union[str, 'AuthenticationType']],
                 https_server_certificate: Optional[pulumi.Input['HttpsServerCertificateArgs']] = None):
        """
        The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: How to authenticate users who access local diagnostics APIs.
        :param pulumi.Input['HttpsServerCertificateArgs'] https_server_certificate: The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        if https_server_certificate is not None:
            pulumi.set(__self__, "https_server_certificate", https_server_certificate)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input[Union[str, 'AuthenticationType']]:
        """
        How to authenticate users who access local diagnostics APIs.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input[Union[str, 'AuthenticationType']]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="httpsServerCertificate")
    def https_server_certificate(self) -> Optional[pulumi.Input['HttpsServerCertificateArgs']]:
        """
        The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
        return pulumi.get(self, "https_server_certificate")

    @https_server_certificate.setter
    def https_server_certificate(self, value: Optional[pulumi.Input['HttpsServerCertificateArgs']]):
        pulumi.set(self, "https_server_certificate", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class PlatformConfigurationArgsDict(TypedDict):
        """
        The platform where the packet core is deployed.
        """
        type: pulumi.Input[Union[str, 'PlatformType']]
        """
        The platform type where packet core is deployed.
        """
        azure_stack_edge_device: NotRequired[pulumi.Input['AzureStackEdgeDeviceResourceIdArgsDict']]
        """
        The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        """
        azure_stack_hci_cluster: NotRequired[pulumi.Input['AzureStackHCIClusterResourceIdArgsDict']]
        """
        The Azure Stack HCI cluster where the packet core is deployed.
        """
        connected_cluster: NotRequired[pulumi.Input['ConnectedClusterResourceIdArgsDict']]
        """
        Azure Arc connected cluster where the packet core is deployed.
        """
        custom_location: NotRequired[pulumi.Input['CustomLocationResourceIdArgsDict']]
        """
        Azure Arc custom location where the packet core is deployed.
        """
elif False:
    PlatformConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlatformConfigurationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'PlatformType']],
                 azure_stack_edge_device: Optional[pulumi.Input['AzureStackEdgeDeviceResourceIdArgs']] = None,
                 azure_stack_hci_cluster: Optional[pulumi.Input['AzureStackHCIClusterResourceIdArgs']] = None,
                 connected_cluster: Optional[pulumi.Input['ConnectedClusterResourceIdArgs']] = None,
                 custom_location: Optional[pulumi.Input['CustomLocationResourceIdArgs']] = None):
        """
        The platform where the packet core is deployed.
        :param pulumi.Input[Union[str, 'PlatformType']] type: The platform type where packet core is deployed.
        :param pulumi.Input['AzureStackEdgeDeviceResourceIdArgs'] azure_stack_edge_device: The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        :param pulumi.Input['AzureStackHCIClusterResourceIdArgs'] azure_stack_hci_cluster: The Azure Stack HCI cluster where the packet core is deployed.
        :param pulumi.Input['ConnectedClusterResourceIdArgs'] connected_cluster: Azure Arc connected cluster where the packet core is deployed.
        :param pulumi.Input['CustomLocationResourceIdArgs'] custom_location: Azure Arc custom location where the packet core is deployed.
        """
        pulumi.set(__self__, "type", type)
        if azure_stack_edge_device is not None:
            pulumi.set(__self__, "azure_stack_edge_device", azure_stack_edge_device)
        if azure_stack_hci_cluster is not None:
            pulumi.set(__self__, "azure_stack_hci_cluster", azure_stack_hci_cluster)
        if connected_cluster is not None:
            pulumi.set(__self__, "connected_cluster", connected_cluster)
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'PlatformType']]:
        """
        The platform type where packet core is deployed.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'PlatformType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="azureStackEdgeDevice")
    def azure_stack_edge_device(self) -> Optional[pulumi.Input['AzureStackEdgeDeviceResourceIdArgs']]:
        """
        The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        """
        return pulumi.get(self, "azure_stack_edge_device")

    @azure_stack_edge_device.setter
    def azure_stack_edge_device(self, value: Optional[pulumi.Input['AzureStackEdgeDeviceResourceIdArgs']]):
        pulumi.set(self, "azure_stack_edge_device", value)

    @property
    @pulumi.getter(name="azureStackHciCluster")
    def azure_stack_hci_cluster(self) -> Optional[pulumi.Input['AzureStackHCIClusterResourceIdArgs']]:
        """
        The Azure Stack HCI cluster where the packet core is deployed.
        """
        return pulumi.get(self, "azure_stack_hci_cluster")

    @azure_stack_hci_cluster.setter
    def azure_stack_hci_cluster(self, value: Optional[pulumi.Input['AzureStackHCIClusterResourceIdArgs']]):
        pulumi.set(self, "azure_stack_hci_cluster", value)

    @property
    @pulumi.getter(name="connectedCluster")
    def connected_cluster(self) -> Optional[pulumi.Input['ConnectedClusterResourceIdArgs']]:
        """
        Azure Arc connected cluster where the packet core is deployed.
        """
        return pulumi.get(self, "connected_cluster")

    @connected_cluster.setter
    def connected_cluster(self, value: Optional[pulumi.Input['ConnectedClusterResourceIdArgs']]):
        pulumi.set(self, "connected_cluster", value)

    @property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional[pulumi.Input['CustomLocationResourceIdArgs']]:
        """
        Azure Arc custom location where the packet core is deployed.
        """
        return pulumi.get(self, "custom_location")

    @custom_location.setter
    def custom_location(self, value: Optional[pulumi.Input['CustomLocationResourceIdArgs']]):
        pulumi.set(self, "custom_location", value)


if not MYPY:
    class SiteResourceIdArgsDict(TypedDict):
        """
        Reference to a site resource.
        """
        id: pulumi.Input[str]
        """
        Site resource ID.
        """
elif False:
    SiteResourceIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SiteResourceIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        Reference to a site resource.
        :param pulumi.Input[str] id: Site resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Site resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


