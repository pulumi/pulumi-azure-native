# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AmbrResponse',
    'AsyncOperationIdResponse',
    'AttachedDataNetworkResourceIdResponse',
    'AzureStackEdgeDeviceResourceIdResponse',
    'AzureStackHCIClusterResourceIdResponse',
    'CertificateProvisioningResponse',
    'ConnectedClusterResourceIdResponse',
    'CustomLocationResourceIdResponse',
    'DataNetworkConfigurationResponse',
    'DataNetworkResourceIdResponse',
    'DiagnosticsUploadConfigurationResponse',
    'HttpsServerCertificateResponse',
    'InstallationResponse',
    'InterfacePropertiesResponse',
    'KeyVaultKeyResponse',
    'LocalDiagnosticsAccessConfigurationResponse',
    'ManagedServiceIdentityResponse',
    'MobileNetworkResourceIdResponse',
    'NaptConfigurationResponse',
    'PccRuleConfigurationResponse',
    'PccRuleQosPolicyResponse',
    'PinholeTimeoutsResponse',
    'PlatformConfigurationResponse',
    'PlmnIdResponse',
    'PortRangeResponse',
    'PortReuseHoldTimesResponse',
    'QosPolicyResponse',
    'ServiceDataFlowTemplateResponse',
    'ServiceResourceIdResponse',
    'SimPolicyResourceIdResponse',
    'SimStaticIpPropertiesResponse',
    'SimStaticIpPropertiesResponseStaticIp',
    'SiteResourceIdResponse',
    'SliceConfigurationResponse',
    'SliceResourceIdResponse',
    'SnssaiResponse',
    'SubResourceResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class AmbrResponse(dict):
    """
    Aggregate maximum bit rate.
    """
    def __init__(__self__, *,
                 downlink: str,
                 uplink: str):
        """
        Aggregate maximum bit rate.
        :param str downlink: Downlink bit rate.
        :param str uplink: Uplink bit rate.
        """
        pulumi.set(__self__, "downlink", downlink)
        pulumi.set(__self__, "uplink", uplink)

    @property
    @pulumi.getter
    def downlink(self) -> str:
        """
        Downlink bit rate.
        """
        return pulumi.get(self, "downlink")

    @property
    @pulumi.getter
    def uplink(self) -> str:
        """
        Uplink bit rate.
        """
        return pulumi.get(self, "uplink")


@pulumi.output_type
class AsyncOperationIdResponse(dict):
    """
    Reference to an Azure Async Operation ID.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Async Operation ID.
        :param str id: Azure Async Operation ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Async Operation ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AttachedDataNetworkResourceIdResponse(dict):
    """
    Reference to an attached data network resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an attached data network resource.
        :param str id: Attached data network resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Attached data network resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AzureStackEdgeDeviceResourceIdResponse(dict):
    """
    Reference to an Azure Stack Edge device resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Stack Edge device resource.
        :param str id: Azure Stack Edge device resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Stack Edge device resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AzureStackHCIClusterResourceIdResponse(dict):
    """
    Reference to an Azure Stack HCI cluster resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Stack HCI cluster resource.
        :param str id: Azure Stack HCI cluster resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Stack HCI cluster resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class CertificateProvisioningResponse(dict):
    """
    Certificate provisioning state
    """
    def __init__(__self__, *,
                 reason: str,
                 state: str):
        """
        Certificate provisioning state
        :param str reason: Reason for certificate provisioning failure.
        :param str state: The certificate's provisioning state
        """
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for certificate provisioning failure.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The certificate's provisioning state
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ConnectedClusterResourceIdResponse(dict):
    """
    Reference to an Azure Arc custom location resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Arc custom location resource.
        :param str id: Azure Arc connected cluster resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Arc connected cluster resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class CustomLocationResourceIdResponse(dict):
    """
    Reference to an Azure Arc custom location resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to an Azure Arc custom location resource.
        :param str id: Azure Arc custom location resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Azure Arc custom location resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DataNetworkConfigurationResponse(dict):
    """
    Settings controlling data network use
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedServices":
            suggest = "allowed_services"
        elif key == "dataNetwork":
            suggest = "data_network"
        elif key == "sessionAmbr":
            suggest = "session_ambr"
        elif key == "additionalAllowedSessionTypes":
            suggest = "additional_allowed_session_types"
        elif key == "allocationAndRetentionPriorityLevel":
            suggest = "allocation_and_retention_priority_level"
        elif key == "defaultSessionType":
            suggest = "default_session_type"
        elif key == "fiveQi":
            suggest = "five_qi"
        elif key == "maximumNumberOfBufferedPackets":
            suggest = "maximum_number_of_buffered_packets"
        elif key == "preemptionCapability":
            suggest = "preemption_capability"
        elif key == "preemptionVulnerability":
            suggest = "preemption_vulnerability"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataNetworkConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataNetworkConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataNetworkConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_services: Sequence['outputs.ServiceResourceIdResponse'],
                 data_network: 'outputs.DataNetworkResourceIdResponse',
                 session_ambr: 'outputs.AmbrResponse',
                 additional_allowed_session_types: Optional[Sequence[str]] = None,
                 allocation_and_retention_priority_level: Optional[int] = None,
                 default_session_type: Optional[str] = None,
                 five_qi: Optional[int] = None,
                 maximum_number_of_buffered_packets: Optional[int] = None,
                 preemption_capability: Optional[str] = None,
                 preemption_vulnerability: Optional[str] = None):
        """
        Settings controlling data network use
        :param Sequence['ServiceResourceIdResponse'] allowed_services: List of services that can be used as part of this SIM policy. The list must not contain duplicate items and must contain at least one item. The services must be in the same location as the SIM policy.
        :param 'DataNetworkResourceIdResponse' data_network: A reference to the data network that these settings apply to. The data network must be in the same location as the SIM policy.
        :param 'AmbrResponse' session_ambr: Aggregate maximum bit rate across all non-GBR QoS flows of a given PDU session. See 3GPP TS23.501 section 5.7.2.6 for a full description of the Session-AMBR.
        :param Sequence[str] additional_allowed_session_types: Allowed session types in addition to the default session type. Must not duplicate the default session type.
        :param int allocation_and_retention_priority_level: Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        :param str default_session_type: The default PDU session type, which is used if the UE does not request a specific session type.
        :param int five_qi: Default 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values.
        :param int maximum_number_of_buffered_packets: The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering. See 3GPP TS29.272 v15.10.0 section 7.3.188 for a full description. This maximum is not guaranteed because there is a internal limit on buffered packets across all PDU sessions.
        :param str preemption_capability: Default QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        :param str preemption_vulnerability: Default QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        pulumi.set(__self__, "allowed_services", allowed_services)
        pulumi.set(__self__, "data_network", data_network)
        pulumi.set(__self__, "session_ambr", session_ambr)
        if additional_allowed_session_types is not None:
            pulumi.set(__self__, "additional_allowed_session_types", additional_allowed_session_types)
        if allocation_and_retention_priority_level is None:
            allocation_and_retention_priority_level = 9
        if allocation_and_retention_priority_level is not None:
            pulumi.set(__self__, "allocation_and_retention_priority_level", allocation_and_retention_priority_level)
        if default_session_type is None:
            default_session_type = 'IPv4'
        if default_session_type is not None:
            pulumi.set(__self__, "default_session_type", default_session_type)
        if five_qi is None:
            five_qi = 9
        if five_qi is not None:
            pulumi.set(__self__, "five_qi", five_qi)
        if maximum_number_of_buffered_packets is None:
            maximum_number_of_buffered_packets = 10
        if maximum_number_of_buffered_packets is not None:
            pulumi.set(__self__, "maximum_number_of_buffered_packets", maximum_number_of_buffered_packets)
        if preemption_capability is None:
            preemption_capability = 'NotPreempt'
        if preemption_capability is not None:
            pulumi.set(__self__, "preemption_capability", preemption_capability)
        if preemption_vulnerability is None:
            preemption_vulnerability = 'Preemptable'
        if preemption_vulnerability is not None:
            pulumi.set(__self__, "preemption_vulnerability", preemption_vulnerability)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Sequence['outputs.ServiceResourceIdResponse']:
        """
        List of services that can be used as part of this SIM policy. The list must not contain duplicate items and must contain at least one item. The services must be in the same location as the SIM policy.
        """
        return pulumi.get(self, "allowed_services")

    @property
    @pulumi.getter(name="dataNetwork")
    def data_network(self) -> 'outputs.DataNetworkResourceIdResponse':
        """
        A reference to the data network that these settings apply to. The data network must be in the same location as the SIM policy.
        """
        return pulumi.get(self, "data_network")

    @property
    @pulumi.getter(name="sessionAmbr")
    def session_ambr(self) -> 'outputs.AmbrResponse':
        """
        Aggregate maximum bit rate across all non-GBR QoS flows of a given PDU session. See 3GPP TS23.501 section 5.7.2.6 for a full description of the Session-AMBR.
        """
        return pulumi.get(self, "session_ambr")

    @property
    @pulumi.getter(name="additionalAllowedSessionTypes")
    def additional_allowed_session_types(self) -> Optional[Sequence[str]]:
        """
        Allowed session types in addition to the default session type. Must not duplicate the default session type.
        """
        return pulumi.get(self, "additional_allowed_session_types")

    @property
    @pulumi.getter(name="allocationAndRetentionPriorityLevel")
    def allocation_and_retention_priority_level(self) -> Optional[int]:
        """
        Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "allocation_and_retention_priority_level")

    @property
    @pulumi.getter(name="defaultSessionType")
    def default_session_type(self) -> Optional[str]:
        """
        The default PDU session type, which is used if the UE does not request a specific session type.
        """
        return pulumi.get(self, "default_session_type")

    @property
    @pulumi.getter(name="fiveQi")
    def five_qi(self) -> Optional[int]:
        """
        Default 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values.
        """
        return pulumi.get(self, "five_qi")

    @property
    @pulumi.getter(name="maximumNumberOfBufferedPackets")
    def maximum_number_of_buffered_packets(self) -> Optional[int]:
        """
        The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering. See 3GPP TS29.272 v15.10.0 section 7.3.188 for a full description. This maximum is not guaranteed because there is a internal limit on buffered packets across all PDU sessions.
        """
        return pulumi.get(self, "maximum_number_of_buffered_packets")

    @property
    @pulumi.getter(name="preemptionCapability")
    def preemption_capability(self) -> Optional[str]:
        """
        Default QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "preemption_capability")

    @property
    @pulumi.getter(name="preemptionVulnerability")
    def preemption_vulnerability(self) -> Optional[str]:
        """
        Default QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "preemption_vulnerability")


@pulumi.output_type
class DataNetworkResourceIdResponse(dict):
    """
    Reference to a data network resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a data network resource.
        :param str id: Data network resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Data network resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DiagnosticsUploadConfigurationResponse(dict):
    """
    Configuration for uploading packet core diagnostics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageAccountContainerUrl":
            suggest = "storage_account_container_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiagnosticsUploadConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiagnosticsUploadConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiagnosticsUploadConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_account_container_url: str):
        """
        Configuration for uploading packet core diagnostics.
        :param str storage_account_container_url: The Storage Account Container URL to upload diagnostics to.
        """
        pulumi.set(__self__, "storage_account_container_url", storage_account_container_url)

    @property
    @pulumi.getter(name="storageAccountContainerUrl")
    def storage_account_container_url(self) -> str:
        """
        The Storage Account Container URL to upload diagnostics to.
        """
        return pulumi.get(self, "storage_account_container_url")


@pulumi.output_type
class HttpsServerCertificateResponse(dict):
    """
    HTTPS server certificate configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateUrl":
            suggest = "certificate_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpsServerCertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpsServerCertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpsServerCertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_url: str,
                 provisioning: 'outputs.CertificateProvisioningResponse'):
        """
        HTTPS server certificate configuration.
        :param str certificate_url: The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        :param 'CertificateProvisioningResponse' provisioning: The provisioning state of the certificate.
        """
        pulumi.set(__self__, "certificate_url", certificate_url)
        pulumi.set(__self__, "provisioning", provisioning)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> str:
        """
        The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        """
        return pulumi.get(self, "certificate_url")

    @property
    @pulumi.getter
    def provisioning(self) -> 'outputs.CertificateProvisioningResponse':
        """
        The provisioning state of the certificate.
        """
        return pulumi.get(self, "provisioning")


@pulumi.output_type
class InstallationResponse(dict):
    """
    The installation state of the packet core.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reinstallRequired":
            suggest = "reinstall_required"
        elif key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstallationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstallationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstallationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation: 'outputs.AsyncOperationIdResponse',
                 reasons: Sequence[str],
                 reinstall_required: str,
                 state: str,
                 desired_state: Optional[str] = None):
        """
        The installation state of the packet core.
        :param 'AsyncOperationIdResponse' operation: A reference to an in-progress installation operation
        :param Sequence[str] reasons: Reason(s) for the current installation state of the packet core.
        :param str reinstall_required: Whether a reinstall of the packet core is required to pick up the latest configuration changes.
        :param str state: Installation state
        :param str desired_state: The desired installation state
        """
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "reasons", reasons)
        pulumi.set(__self__, "reinstall_required", reinstall_required)
        pulumi.set(__self__, "state", state)
        if desired_state is None:
            desired_state = 'Installed'
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)

    @property
    @pulumi.getter
    def operation(self) -> 'outputs.AsyncOperationIdResponse':
        """
        A reference to an in-progress installation operation
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reasons(self) -> Sequence[str]:
        """
        Reason(s) for the current installation state of the packet core.
        """
        return pulumi.get(self, "reasons")

    @property
    @pulumi.getter(name="reinstallRequired")
    def reinstall_required(self) -> str:
        """
        Whether a reinstall of the packet core is required to pick up the latest configuration changes.
        """
        return pulumi.get(self, "reinstall_required")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Installation state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        """
        The desired installation state
        """
        return pulumi.get(self, "desired_state")


@pulumi.output_type
class InterfacePropertiesResponse(dict):
    """
    Interface properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4Gateway":
            suggest = "ipv4_gateway"
        elif key == "ipv4Subnet":
            suggest = "ipv4_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfacePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfacePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfacePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None,
                 ipv4_gateway: Optional[str] = None,
                 ipv4_subnet: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Interface properties
        :param str ipv4_address: The IPv4 address.
        :param str ipv4_gateway: The default IPv4 gateway (router).
        :param str ipv4_subnet: The IPv4 subnet.
        :param str name: The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_gateway is not None:
            pulumi.set(__self__, "ipv4_gateway", ipv4_gateway)
        if ipv4_subnet is not None:
            pulumi.set(__self__, "ipv4_subnet", ipv4_subnet)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        The IPv4 address.
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="ipv4Gateway")
    def ipv4_gateway(self) -> Optional[str]:
        """
        The default IPv4 gateway (router).
        """
        return pulumi.get(self, "ipv4_gateway")

    @property
    @pulumi.getter(name="ipv4Subnet")
    def ipv4_subnet(self) -> Optional[str]:
        """
        The IPv4 subnet.
        """
        return pulumi.get(self, "ipv4_subnet")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class KeyVaultKeyResponse(dict):
    """
    An Azure key vault key.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyUrl":
            suggest = "key_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVaultKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVaultKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVaultKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_url: Optional[str] = None):
        """
        An Azure key vault key.
        :param str key_url: The key URL, unversioned. For example: https://contosovault.vault.azure.net/keys/azureKey.
        """
        if key_url is not None:
            pulumi.set(__self__, "key_url", key_url)

    @property
    @pulumi.getter(name="keyUrl")
    def key_url(self) -> Optional[str]:
        """
        The key URL, unversioned. For example: https://contosovault.vault.azure.net/keys/azureKey.
        """
        return pulumi.get(self, "key_url")


@pulumi.output_type
class LocalDiagnosticsAccessConfigurationResponse(dict):
    """
    The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "httpsServerCertificate":
            suggest = "https_server_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalDiagnosticsAccessConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalDiagnosticsAccessConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalDiagnosticsAccessConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: str,
                 https_server_certificate: Optional['outputs.HttpsServerCertificateResponse'] = None):
        """
        The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        :param str authentication_type: How to authenticate users who access local diagnostics APIs.
        :param 'HttpsServerCertificateResponse' https_server_certificate: The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        if https_server_certificate is not None:
            pulumi.set(__self__, "https_server_certificate", https_server_certificate)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        How to authenticate users who access local diagnostics APIs.
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="httpsServerCertificate")
    def https_server_certificate(self) -> Optional['outputs.HttpsServerCertificateResponse']:
        """
        The HTTPS server TLS certificate used to secure local access to diagnostics.
        """
        return pulumi.get(self, "https_server_certificate")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (User assigned identity)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (User assigned identity)
        :param str type: Type of managed service identity (currently only UserAssigned allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (currently only UserAssigned allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class MobileNetworkResourceIdResponse(dict):
    """
    Reference to a mobile network resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a mobile network resource.
        :param str id: Mobile network resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Mobile network resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class NaptConfigurationResponse(dict):
    """
    The network address and port translation settings to use for the attached data network.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pinholeLimits":
            suggest = "pinhole_limits"
        elif key == "pinholeTimeouts":
            suggest = "pinhole_timeouts"
        elif key == "portRange":
            suggest = "port_range"
        elif key == "portReuseHoldTime":
            suggest = "port_reuse_hold_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NaptConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NaptConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NaptConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 pinhole_limits: Optional[int] = None,
                 pinhole_timeouts: Optional['outputs.PinholeTimeoutsResponse'] = None,
                 port_range: Optional['outputs.PortRangeResponse'] = None,
                 port_reuse_hold_time: Optional['outputs.PortReuseHoldTimesResponse'] = None):
        """
        The network address and port translation settings to use for the attached data network.
        :param str enabled: Whether NAPT is enabled for connections to this attached data network.
        :param int pinhole_limits: Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface.
        :param 'PinholeTimeoutsResponse' pinhole_timeouts: Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        :param 'PortRangeResponse' port_range: Range of port numbers to use as translated ports on each translated address.
               If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
               (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
        :param 'PortReuseHoldTimesResponse' port_reuse_hold_time: The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be at least 1 second.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if pinhole_limits is None:
            pinhole_limits = 65536
        if pinhole_limits is not None:
            pulumi.set(__self__, "pinhole_limits", pinhole_limits)
        if pinhole_timeouts is not None:
            pulumi.set(__self__, "pinhole_timeouts", pinhole_timeouts)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if port_reuse_hold_time is not None:
            pulumi.set(__self__, "port_reuse_hold_time", port_reuse_hold_time)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        """
        Whether NAPT is enabled for connections to this attached data network.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="pinholeLimits")
    def pinhole_limits(self) -> Optional[int]:
        """
        Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface.
        """
        return pulumi.get(self, "pinhole_limits")

    @property
    @pulumi.getter(name="pinholeTimeouts")
    def pinhole_timeouts(self) -> Optional['outputs.PinholeTimeoutsResponse']:
        """
        Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        """
        return pulumi.get(self, "pinhole_timeouts")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional['outputs.PortRangeResponse']:
        """
        Range of port numbers to use as translated ports on each translated address.
        If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
        (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="portReuseHoldTime")
    def port_reuse_hold_time(self) -> Optional['outputs.PortReuseHoldTimesResponse']:
        """
        The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be at least 1 second.
        """
        return pulumi.get(self, "port_reuse_hold_time")


@pulumi.output_type
class PccRuleConfigurationResponse(dict):
    """
    Data flow policy rule configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "rulePrecedence":
            suggest = "rule_precedence"
        elif key == "serviceDataFlowTemplates":
            suggest = "service_data_flow_templates"
        elif key == "ruleQosPolicy":
            suggest = "rule_qos_policy"
        elif key == "trafficControl":
            suggest = "traffic_control"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PccRuleConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PccRuleConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PccRuleConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: str,
                 rule_precedence: int,
                 service_data_flow_templates: Sequence['outputs.ServiceDataFlowTemplateResponse'],
                 rule_qos_policy: Optional['outputs.PccRuleQosPolicyResponse'] = None,
                 traffic_control: Optional[str] = None):
        """
        Data flow policy rule configuration
        :param str rule_name: The name of the rule. This must be unique within the parent service. You must not use any of the following reserved strings - `default`, `requested` or `service`.
        :param int rule_precedence: A precedence value that is used to decide between data flow policy rules when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all data flow policy rules configured in the mobile network.
        :param Sequence['ServiceDataFlowTemplateResponse'] service_data_flow_templates: The set of data flow templates to use for this data flow policy rule.
        :param 'PccRuleQosPolicyResponse' rule_qos_policy: The QoS policy to use for packets matching this rule. If this field is null then the parent service will define the QoS settings.
        :param str traffic_control: Determines whether flows that match this data flow policy rule are permitted.
        """
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_precedence", rule_precedence)
        pulumi.set(__self__, "service_data_flow_templates", service_data_flow_templates)
        if rule_qos_policy is not None:
            pulumi.set(__self__, "rule_qos_policy", rule_qos_policy)
        if traffic_control is None:
            traffic_control = 'Enabled'
        if traffic_control is not None:
            pulumi.set(__self__, "traffic_control", traffic_control)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        The name of the rule. This must be unique within the parent service. You must not use any of the following reserved strings - `default`, `requested` or `service`.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="rulePrecedence")
    def rule_precedence(self) -> int:
        """
        A precedence value that is used to decide between data flow policy rules when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all data flow policy rules configured in the mobile network.
        """
        return pulumi.get(self, "rule_precedence")

    @property
    @pulumi.getter(name="serviceDataFlowTemplates")
    def service_data_flow_templates(self) -> Sequence['outputs.ServiceDataFlowTemplateResponse']:
        """
        The set of data flow templates to use for this data flow policy rule.
        """
        return pulumi.get(self, "service_data_flow_templates")

    @property
    @pulumi.getter(name="ruleQosPolicy")
    def rule_qos_policy(self) -> Optional['outputs.PccRuleQosPolicyResponse']:
        """
        The QoS policy to use for packets matching this rule. If this field is null then the parent service will define the QoS settings.
        """
        return pulumi.get(self, "rule_qos_policy")

    @property
    @pulumi.getter(name="trafficControl")
    def traffic_control(self) -> Optional[str]:
        """
        Determines whether flows that match this data flow policy rule are permitted.
        """
        return pulumi.get(self, "traffic_control")


@pulumi.output_type
class PccRuleQosPolicyResponse(dict):
    """
    Data flow policy rule QoS policy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumBitRate":
            suggest = "maximum_bit_rate"
        elif key == "allocationAndRetentionPriorityLevel":
            suggest = "allocation_and_retention_priority_level"
        elif key == "fiveQi":
            suggest = "five_qi"
        elif key == "guaranteedBitRate":
            suggest = "guaranteed_bit_rate"
        elif key == "preemptionCapability":
            suggest = "preemption_capability"
        elif key == "preemptionVulnerability":
            suggest = "preemption_vulnerability"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PccRuleQosPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PccRuleQosPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PccRuleQosPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_bit_rate: 'outputs.AmbrResponse',
                 allocation_and_retention_priority_level: Optional[int] = None,
                 five_qi: Optional[int] = None,
                 guaranteed_bit_rate: Optional['outputs.AmbrResponse'] = None,
                 preemption_capability: Optional[str] = None,
                 preemption_vulnerability: Optional[str] = None):
        """
        Data flow policy rule QoS policy
        :param 'AmbrResponse' maximum_bit_rate: The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service.
        :param int allocation_and_retention_priority_level: QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        :param int five_qi: 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values.
        :param 'AmbrResponse' guaranteed_bit_rate: The guaranteed bit rate (GBR) for all service data flows that use this data flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the data flow policy rule that uses this QoS definition.
        :param str preemption_capability: QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        :param str preemption_vulnerability: QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        pulumi.set(__self__, "maximum_bit_rate", maximum_bit_rate)
        if allocation_and_retention_priority_level is None:
            allocation_and_retention_priority_level = 9
        if allocation_and_retention_priority_level is not None:
            pulumi.set(__self__, "allocation_and_retention_priority_level", allocation_and_retention_priority_level)
        if five_qi is None:
            five_qi = 9
        if five_qi is not None:
            pulumi.set(__self__, "five_qi", five_qi)
        if guaranteed_bit_rate is not None:
            pulumi.set(__self__, "guaranteed_bit_rate", guaranteed_bit_rate)
        if preemption_capability is None:
            preemption_capability = 'NotPreempt'
        if preemption_capability is not None:
            pulumi.set(__self__, "preemption_capability", preemption_capability)
        if preemption_vulnerability is None:
            preemption_vulnerability = 'Preemptable'
        if preemption_vulnerability is not None:
            pulumi.set(__self__, "preemption_vulnerability", preemption_vulnerability)

    @property
    @pulumi.getter(name="maximumBitRate")
    def maximum_bit_rate(self) -> 'outputs.AmbrResponse':
        """
        The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service.
        """
        return pulumi.get(self, "maximum_bit_rate")

    @property
    @pulumi.getter(name="allocationAndRetentionPriorityLevel")
    def allocation_and_retention_priority_level(self) -> Optional[int]:
        """
        QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "allocation_and_retention_priority_level")

    @property
    @pulumi.getter(name="fiveQi")
    def five_qi(self) -> Optional[int]:
        """
        5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values.
        """
        return pulumi.get(self, "five_qi")

    @property
    @pulumi.getter(name="guaranteedBitRate")
    def guaranteed_bit_rate(self) -> Optional['outputs.AmbrResponse']:
        """
        The guaranteed bit rate (GBR) for all service data flows that use this data flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the data flow policy rule that uses this QoS definition.
        """
        return pulumi.get(self, "guaranteed_bit_rate")

    @property
    @pulumi.getter(name="preemptionCapability")
    def preemption_capability(self) -> Optional[str]:
        """
        QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "preemption_capability")

    @property
    @pulumi.getter(name="preemptionVulnerability")
    def preemption_vulnerability(self) -> Optional[str]:
        """
        QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "preemption_vulnerability")


@pulumi.output_type
class PinholeTimeoutsResponse(dict):
    """
    Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
    """
    def __init__(__self__, *,
                 icmp: Optional[int] = None,
                 tcp: Optional[int] = None,
                 udp: Optional[int] = None):
        """
        Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        :param int icmp: Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        :param int tcp: Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.
        :param int udp: Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.
        """
        if icmp is None:
            icmp = 30
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if tcp is None:
            tcp = 180
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is None:
            udp = 30
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def icmp(self) -> Optional[int]:
        """
        Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        """
        return pulumi.get(self, "icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional[int]:
        """
        Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.
        """
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional[int]:
        """
        Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.
        """
        return pulumi.get(self, "udp")


@pulumi.output_type
class PlatformConfigurationResponse(dict):
    """
    The platform where the packet core is deployed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureStackEdgeDevices":
            suggest = "azure_stack_edge_devices"
        elif key == "azureStackEdgeDevice":
            suggest = "azure_stack_edge_device"
        elif key == "azureStackHciCluster":
            suggest = "azure_stack_hci_cluster"
        elif key == "connectedCluster":
            suggest = "connected_cluster"
        elif key == "customLocation":
            suggest = "custom_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_stack_edge_devices: Sequence['outputs.AzureStackEdgeDeviceResourceIdResponse'],
                 type: str,
                 azure_stack_edge_device: Optional['outputs.AzureStackEdgeDeviceResourceIdResponse'] = None,
                 azure_stack_hci_cluster: Optional['outputs.AzureStackHCIClusterResourceIdResponse'] = None,
                 connected_cluster: Optional['outputs.ConnectedClusterResourceIdResponse'] = None,
                 custom_location: Optional['outputs.CustomLocationResourceIdResponse'] = None):
        """
        The platform where the packet core is deployed.
        :param Sequence['AzureStackEdgeDeviceResourceIdResponse'] azure_stack_edge_devices: The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.
        :param str type: The platform type where packet core is deployed.
        :param 'AzureStackEdgeDeviceResourceIdResponse' azure_stack_edge_device: The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        :param 'AzureStackHCIClusterResourceIdResponse' azure_stack_hci_cluster: The Azure Stack HCI cluster where the packet core is deployed.
        :param 'ConnectedClusterResourceIdResponse' connected_cluster: Azure Arc connected cluster where the packet core is deployed.
        :param 'CustomLocationResourceIdResponse' custom_location: Azure Arc custom location where the packet core is deployed.
        """
        pulumi.set(__self__, "azure_stack_edge_devices", azure_stack_edge_devices)
        pulumi.set(__self__, "type", type)
        if azure_stack_edge_device is not None:
            pulumi.set(__self__, "azure_stack_edge_device", azure_stack_edge_device)
        if azure_stack_hci_cluster is not None:
            pulumi.set(__self__, "azure_stack_hci_cluster", azure_stack_hci_cluster)
        if connected_cluster is not None:
            pulumi.set(__self__, "connected_cluster", connected_cluster)
        if custom_location is not None:
            pulumi.set(__self__, "custom_location", custom_location)

    @property
    @pulumi.getter(name="azureStackEdgeDevices")
    def azure_stack_edge_devices(self) -> Sequence['outputs.AzureStackEdgeDeviceResourceIdResponse']:
        """
        The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.
        """
        return pulumi.get(self, "azure_stack_edge_devices")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The platform type where packet core is deployed.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="azureStackEdgeDevice")
    def azure_stack_edge_device(self) -> Optional['outputs.AzureStackEdgeDeviceResourceIdResponse']:
        """
        The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.
        """
        return pulumi.get(self, "azure_stack_edge_device")

    @property
    @pulumi.getter(name="azureStackHciCluster")
    def azure_stack_hci_cluster(self) -> Optional['outputs.AzureStackHCIClusterResourceIdResponse']:
        """
        The Azure Stack HCI cluster where the packet core is deployed.
        """
        return pulumi.get(self, "azure_stack_hci_cluster")

    @property
    @pulumi.getter(name="connectedCluster")
    def connected_cluster(self) -> Optional['outputs.ConnectedClusterResourceIdResponse']:
        """
        Azure Arc connected cluster where the packet core is deployed.
        """
        return pulumi.get(self, "connected_cluster")

    @property
    @pulumi.getter(name="customLocation")
    def custom_location(self) -> Optional['outputs.CustomLocationResourceIdResponse']:
        """
        Azure Arc custom location where the packet core is deployed.
        """
        return pulumi.get(self, "custom_location")


@pulumi.output_type
class PlmnIdResponse(dict):
    """
    Public land mobile network (PLMN) ID.
    """
    def __init__(__self__, *,
                 mcc: str,
                 mnc: str):
        """
        Public land mobile network (PLMN) ID.
        :param str mcc: Mobile country code (MCC).
        :param str mnc: Mobile network code (MNC).
        """
        pulumi.set(__self__, "mcc", mcc)
        pulumi.set(__self__, "mnc", mnc)

    @property
    @pulumi.getter
    def mcc(self) -> str:
        """
        Mobile country code (MCC).
        """
        return pulumi.get(self, "mcc")

    @property
    @pulumi.getter
    def mnc(self) -> str:
        """
        Mobile network code (MNC).
        """
        return pulumi.get(self, "mnc")


@pulumi.output_type
class PortRangeResponse(dict):
    """
    Range of port numbers to use as translated ports on each translated address.
    If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
    (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPort":
            suggest = "max_port"
        elif key == "minPort":
            suggest = "min_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortRangeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortRangeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortRangeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_port: Optional[int] = None,
                 min_port: Optional[int] = None):
        """
        Range of port numbers to use as translated ports on each translated address.
        If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
        (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
        :param int max_port: The maximum port number
        :param int min_port: The minimum port number
        """
        if max_port is None:
            max_port = 49999
        if max_port is not None:
            pulumi.set(__self__, "max_port", max_port)
        if min_port is None:
            min_port = 1024
        if min_port is not None:
            pulumi.set(__self__, "min_port", min_port)

    @property
    @pulumi.getter(name="maxPort")
    def max_port(self) -> Optional[int]:
        """
        The maximum port number
        """
        return pulumi.get(self, "max_port")

    @property
    @pulumi.getter(name="minPort")
    def min_port(self) -> Optional[int]:
        """
        The minimum port number
        """
        return pulumi.get(self, "min_port")


@pulumi.output_type
class PortReuseHoldTimesResponse(dict):
    """
    The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second.
    """
    def __init__(__self__, *,
                 tcp: Optional[int] = None,
                 udp: Optional[int] = None):
        """
        The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second.
        :param int tcp: Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes.
        :param int udp: Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute.
        """
        if tcp is None:
            tcp = 120
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is None:
            udp = 60
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[int]:
        """
        Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes.
        """
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional[int]:
        """
        Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute.
        """
        return pulumi.get(self, "udp")


@pulumi.output_type
class QosPolicyResponse(dict):
    """
    QoS policy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumBitRate":
            suggest = "maximum_bit_rate"
        elif key == "allocationAndRetentionPriorityLevel":
            suggest = "allocation_and_retention_priority_level"
        elif key == "fiveQi":
            suggest = "five_qi"
        elif key == "preemptionCapability":
            suggest = "preemption_capability"
        elif key == "preemptionVulnerability":
            suggest = "preemption_vulnerability"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QosPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QosPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QosPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_bit_rate: 'outputs.AmbrResponse',
                 allocation_and_retention_priority_level: Optional[int] = None,
                 five_qi: Optional[int] = None,
                 preemption_capability: Optional[str] = None,
                 preemption_vulnerability: Optional[str] = None):
        """
        QoS policy
        :param 'AmbrResponse' maximum_bit_rate: The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service.
        :param int allocation_and_retention_priority_level: QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        :param int five_qi: 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values.
        :param str preemption_capability: QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        :param str preemption_vulnerability: QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        pulumi.set(__self__, "maximum_bit_rate", maximum_bit_rate)
        if allocation_and_retention_priority_level is None:
            allocation_and_retention_priority_level = 9
        if allocation_and_retention_priority_level is not None:
            pulumi.set(__self__, "allocation_and_retention_priority_level", allocation_and_retention_priority_level)
        if five_qi is None:
            five_qi = 9
        if five_qi is not None:
            pulumi.set(__self__, "five_qi", five_qi)
        if preemption_capability is None:
            preemption_capability = 'NotPreempt'
        if preemption_capability is not None:
            pulumi.set(__self__, "preemption_capability", preemption_capability)
        if preemption_vulnerability is None:
            preemption_vulnerability = 'Preemptable'
        if preemption_vulnerability is not None:
            pulumi.set(__self__, "preemption_vulnerability", preemption_vulnerability)

    @property
    @pulumi.getter(name="maximumBitRate")
    def maximum_bit_rate(self) -> 'outputs.AmbrResponse':
        """
        The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service.
        """
        return pulumi.get(self, "maximum_bit_rate")

    @property
    @pulumi.getter(name="allocationAndRetentionPriorityLevel")
    def allocation_and_retention_priority_level(self) -> Optional[int]:
        """
        QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "allocation_and_retention_priority_level")

    @property
    @pulumi.getter(name="fiveQi")
    def five_qi(self) -> Optional[int]:
        """
        5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values.
        """
        return pulumi.get(self, "five_qi")

    @property
    @pulumi.getter(name="preemptionCapability")
    def preemption_capability(self) -> Optional[str]:
        """
        QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "preemption_capability")

    @property
    @pulumi.getter(name="preemptionVulnerability")
    def preemption_vulnerability(self) -> Optional[str]:
        """
        QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        """
        return pulumi.get(self, "preemption_vulnerability")


@pulumi.output_type
class ServiceDataFlowTemplateResponse(dict):
    """
    Data flow template
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteIpList":
            suggest = "remote_ip_list"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDataFlowTemplateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDataFlowTemplateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDataFlowTemplateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: str,
                 protocol: Sequence[str],
                 remote_ip_list: Sequence[str],
                 template_name: str,
                 ports: Optional[Sequence[str]] = None):
        """
        Data flow template
        :param str direction: The direction of this flow.
        :param Sequence[str] protocol: A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
        :param Sequence[str] remote_ip_list: The remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, 192.0.2.54/24).
        :param str template_name: The name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
        :param Sequence[str] ports: The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. This is an optional setting. If you do not specify it then connections will be allowed on all ports. Port ranges must be specified as <FirstPort>-<LastPort>. For example: [`8080`, `8082-8085`].
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_ip_list", remote_ip_list)
        pulumi.set(__self__, "template_name", template_name)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The direction of this flow.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def protocol(self) -> Sequence[str]:
        """
        A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="remoteIpList")
    def remote_ip_list(self) -> Sequence[str]:
        """
        The remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, 192.0.2.54/24).
        """
        return pulumi.get(self, "remote_ip_list")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        """
        The name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        """
        The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. This is an optional setting. If you do not specify it then connections will be allowed on all ports. Port ranges must be specified as <FirstPort>-<LastPort>. For example: [`8080`, `8082-8085`].
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class ServiceResourceIdResponse(dict):
    """
    Reference to a service resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a service resource.
        :param str id: Service resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Service resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SimPolicyResourceIdResponse(dict):
    """
    Reference to a SIM policy resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a SIM policy resource.
        :param str id: SIM policy resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        SIM policy resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SimStaticIpPropertiesResponse(dict):
    """
    Static IP configuration for a SIM, scoped to a particular attached data network and slice.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedDataNetwork":
            suggest = "attached_data_network"
        elif key == "staticIp":
            suggest = "static_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SimStaticIpPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SimStaticIpPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SimStaticIpPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_data_network: Optional['outputs.AttachedDataNetworkResourceIdResponse'] = None,
                 slice: Optional['outputs.SliceResourceIdResponse'] = None,
                 static_ip: Optional['outputs.SimStaticIpPropertiesResponseStaticIp'] = None):
        """
        Static IP configuration for a SIM, scoped to a particular attached data network and slice.
        :param 'AttachedDataNetworkResourceIdResponse' attached_data_network: The attached data network on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The attached data network must be in the same location as the SIM.
        :param 'SliceResourceIdResponse' slice: The network slice on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The slice must be in the same location as the SIM.
        :param 'SimStaticIpPropertiesResponseStaticIp' static_ip: The static IP configuration for the SIM to use at the defined network scope.
        """
        if attached_data_network is not None:
            pulumi.set(__self__, "attached_data_network", attached_data_network)
        if slice is not None:
            pulumi.set(__self__, "slice", slice)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)

    @property
    @pulumi.getter(name="attachedDataNetwork")
    def attached_data_network(self) -> Optional['outputs.AttachedDataNetworkResourceIdResponse']:
        """
        The attached data network on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The attached data network must be in the same location as the SIM.
        """
        return pulumi.get(self, "attached_data_network")

    @property
    @pulumi.getter
    def slice(self) -> Optional['outputs.SliceResourceIdResponse']:
        """
        The network slice on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The slice must be in the same location as the SIM.
        """
        return pulumi.get(self, "slice")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional['outputs.SimStaticIpPropertiesResponseStaticIp']:
        """
        The static IP configuration for the SIM to use at the defined network scope.
        """
        return pulumi.get(self, "static_ip")


@pulumi.output_type
class SimStaticIpPropertiesResponseStaticIp(dict):
    """
    The static IP configuration for the SIM to use at the defined network scope.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SimStaticIpPropertiesResponseStaticIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SimStaticIpPropertiesResponseStaticIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SimStaticIpPropertiesResponseStaticIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[str] = None):
        """
        The static IP configuration for the SIM to use at the defined network scope.
        :param str ipv4_address: The IPv4 address assigned to the SIM at this network scope. This address must be in the userEquipmentStaticAddressPoolPrefix defined in the attached data network.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        """
        The IPv4 address assigned to the SIM at this network scope. This address must be in the userEquipmentStaticAddressPoolPrefix defined in the attached data network.
        """
        return pulumi.get(self, "ipv4_address")


@pulumi.output_type
class SiteResourceIdResponse(dict):
    """
    Reference to a site resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a site resource.
        :param str id: Site resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Site resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SliceConfigurationResponse(dict):
    """
    Per-slice settings
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataNetworkConfigurations":
            suggest = "data_network_configurations"
        elif key == "defaultDataNetwork":
            suggest = "default_data_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SliceConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SliceConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SliceConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_network_configurations: Sequence['outputs.DataNetworkConfigurationResponse'],
                 default_data_network: 'outputs.DataNetworkResourceIdResponse',
                 slice: 'outputs.SliceResourceIdResponse'):
        """
        Per-slice settings
        :param Sequence['DataNetworkConfigurationResponse'] data_network_configurations: The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
        :param 'DataNetworkResourceIdResponse' default_data_network: The default data network to use if the UE does not explicitly specify it. Configuration for this object must exist in the `dataNetworkConfigurations` map. The data network must be in the same location as the SIM policy.
        :param 'SliceResourceIdResponse' slice: A reference to the slice that these settings apply to. The slice must be in the same location as the SIM policy.
        """
        pulumi.set(__self__, "data_network_configurations", data_network_configurations)
        pulumi.set(__self__, "default_data_network", default_data_network)
        pulumi.set(__self__, "slice", slice)

    @property
    @pulumi.getter(name="dataNetworkConfigurations")
    def data_network_configurations(self) -> Sequence['outputs.DataNetworkConfigurationResponse']:
        """
        The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
        """
        return pulumi.get(self, "data_network_configurations")

    @property
    @pulumi.getter(name="defaultDataNetwork")
    def default_data_network(self) -> 'outputs.DataNetworkResourceIdResponse':
        """
        The default data network to use if the UE does not explicitly specify it. Configuration for this object must exist in the `dataNetworkConfigurations` map. The data network must be in the same location as the SIM policy.
        """
        return pulumi.get(self, "default_data_network")

    @property
    @pulumi.getter
    def slice(self) -> 'outputs.SliceResourceIdResponse':
        """
        A reference to the slice that these settings apply to. The slice must be in the same location as the SIM policy.
        """
        return pulumi.get(self, "slice")


@pulumi.output_type
class SliceResourceIdResponse(dict):
    """
    Reference to a slice resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to a slice resource.
        :param str id: Slice resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Slice resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SnssaiResponse(dict):
    """
    Single-network slice selection assistance information (S-NSSAI).
    """
    def __init__(__self__, *,
                 sst: int,
                 sd: Optional[str] = None):
        """
        Single-network slice selection assistance information (S-NSSAI).
        :param int sst: Slice/service type (SST).
        :param str sd: Slice differentiator (SD).
        """
        pulumi.set(__self__, "sst", sst)
        if sd is not None:
            pulumi.set(__self__, "sd", sd)

    @property
    @pulumi.getter
    def sst(self) -> int:
        """
        Slice/service type (SST).
        """
        return pulumi.get(self, "sst")

    @property
    @pulumi.getter
    def sd(self) -> Optional[str]:
        """
        Slice differentiator (SD).
        """
        return pulumi.get(self, "sd")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    Reference to another sub resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        Reference to another sub resource.
        :param str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


