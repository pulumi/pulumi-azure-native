# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSummaryLogResult',
    'AwaitableGetSummaryLogResult',
    'get_summary_log',
    'get_summary_log_output',
]

@pulumi.output_type
class GetSummaryLogResult:
    """
    Workspace data summary rules definition.
    """
    def __init__(__self__, azure_api_version=None, description=None, display_name=None, id=None, is_active=None, name=None, provisioning_state=None, rule_definition=None, rule_type=None, status_code=None, system_data=None, type=None):
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if rule_definition and not isinstance(rule_definition, dict):
            raise TypeError("Expected argument 'rule_definition' to be a dict")
        pulumi.set(__self__, "rule_definition", rule_definition)
        if rule_type and not isinstance(rule_type, str):
            raise TypeError("Expected argument 'rule_type' to be a str")
        pulumi.set(__self__, "rule_type", rule_type)
        if status_code and not isinstance(status_code, str):
            raise TypeError("Expected argument 'status_code' to be a str")
        pulumi.set(__self__, "status_code", status_code)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> builtins.str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the Summary rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        The display name of the Summary rule.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> builtins.bool:
        """
        Indicates if Summary rule is active. If not, Summary rule execution stops.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        Summary rule is in provisioning state. If set to 'updating' or 'deleting', indicates a resource lock due to an ongoing operation, preventing any update to the Summary rule until the operation is complete.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="ruleDefinition")
    def rule_definition(self) -> Optional['outputs.RuleDefinitionResponse']:
        """
        Rule definition parameters.
        """
        return pulumi.get(self, "rule_definition")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[builtins.str]:
        """
        SummaryRules rule type: User.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.str:
        """
        Indicates the reason for rule deactivation.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetSummaryLogResult(GetSummaryLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSummaryLogResult(
            azure_api_version=self.azure_api_version,
            description=self.description,
            display_name=self.display_name,
            id=self.id,
            is_active=self.is_active,
            name=self.name,
            provisioning_state=self.provisioning_state,
            rule_definition=self.rule_definition,
            rule_type=self.rule_type,
            status_code=self.status_code,
            system_data=self.system_data,
            type=self.type)


def get_summary_log(resource_group_name: Optional[builtins.str] = None,
                    summary_logs_name: Optional[builtins.str] = None,
                    workspace_name: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSummaryLogResult:
    """
    Gets Log Analytics workspace Summary rules.

    Uses Azure REST API version 2025-07-01.


    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str summary_logs_name: The name of the summary logs. Must not contain '/'.
    :param builtins.str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['summaryLogsName'] = summary_logs_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:operationalinsights:getSummaryLog', __args__, opts=opts, typ=GetSummaryLogResult).value

    return AwaitableGetSummaryLogResult(
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        rule_definition=pulumi.get(__ret__, 'rule_definition'),
        rule_type=pulumi.get(__ret__, 'rule_type'),
        status_code=pulumi.get(__ret__, 'status_code'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_summary_log_output(resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                           summary_logs_name: Optional[pulumi.Input[builtins.str]] = None,
                           workspace_name: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSummaryLogResult]:
    """
    Gets Log Analytics workspace Summary rules.

    Uses Azure REST API version 2025-07-01.


    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    :param builtins.str summary_logs_name: The name of the summary logs. Must not contain '/'.
    :param builtins.str workspace_name: The name of the workspace.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['summaryLogsName'] = summary_logs_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:operationalinsights:getSummaryLog', __args__, opts=opts, typ=GetSummaryLogResult)
    return __ret__.apply(lambda __response__: GetSummaryLogResult(
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        id=pulumi.get(__response__, 'id'),
        is_active=pulumi.get(__response__, 'is_active'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        rule_definition=pulumi.get(__response__, 'rule_definition'),
        rule_type=pulumi.get(__response__, 'rule_type'),
        status_code=pulumi.get(__response__, 'status_code'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
