# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'LogAnalyticsQueryPackQueryPropertiesRelatedArgs',
]

@pulumi.input_type
class LogAnalyticsQueryPackQueryPropertiesRelatedArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 solutions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The related metadata items for the function.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] categories: The related categories for the function.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types: The related resource types for the function.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] solutions: The related Log Analytics solutions for the function.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if solutions is not None:
            pulumi.set(__self__, "solutions", solutions)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The related categories for the function.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The related resource types for the function.
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter
    def solutions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The related Log Analytics solutions for the function.
        """
        return pulumi.get(self, "solutions")

    @solutions.setter
    def solutions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "solutions", value)


