# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'LinkedServicePropertiesResponse',
    'LinkedStorageAccountsPropertiesResponse',
]

@pulumi.output_type
class LinkedServicePropertiesResponse(dict):
    """
    Linked service properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "writeAccessResourceId":
            suggest = "write_access_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkedServicePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkedServicePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkedServicePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: Optional[str] = None,
                 write_access_resource_id: Optional[str] = None):
        """
        Linked service properties.
        :param str resource_id: The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
        :param str write_access_resource_id: The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if write_access_resource_id is not None:
            pulumi.set(__self__, "write_access_resource_id", write_access_resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="writeAccessResourceId")
    def write_access_resource_id(self) -> Optional[str]:
        """
        The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
        """
        return pulumi.get(self, "write_access_resource_id")


@pulumi.output_type
class LinkedStorageAccountsPropertiesResponse(dict):
    """
    Linked storage accounts properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "storageAccountIds":
            suggest = "storage_account_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkedStorageAccountsPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkedStorageAccountsPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkedStorageAccountsPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: str,
                 storage_account_ids: Optional[Sequence[str]] = None):
        """
        Linked storage accounts properties.
        :param str data_source_type: Linked storage accounts type.
        :param Sequence[str] storage_account_ids: Linked storage accounts resources ids.
        """
        pulumi.set(__self__, "data_source_type", data_source_type)
        if storage_account_ids is not None:
            pulumi.set(__self__, "storage_account_ids", storage_account_ids)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        """
        Linked storage accounts type.
        """
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="storageAccountIds")
    def storage_account_ids(self) -> Optional[Sequence[str]]:
        """
        Linked storage accounts resources ids.
        """
        return pulumi.get(self, "storage_account_ids")


