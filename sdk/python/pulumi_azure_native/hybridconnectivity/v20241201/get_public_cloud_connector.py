# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetPublicCloudConnectorResult',
    'AwaitableGetPublicCloudConnectorResult',
    'get_public_cloud_connector',
    'get_public_cloud_connector_output',
]

@pulumi.output_type
class GetPublicCloudConnectorResult:
    """
    Public Cloud Connector
    """
    def __init__(__self__, aws_cloud_profile=None, connector_primary_identifier=None, host_type=None, id=None, location=None, name=None, provisioning_state=None, system_data=None, tags=None, type=None):
        if aws_cloud_profile and not isinstance(aws_cloud_profile, dict):
            raise TypeError("Expected argument 'aws_cloud_profile' to be a dict")
        pulumi.set(__self__, "aws_cloud_profile", aws_cloud_profile)
        if connector_primary_identifier and not isinstance(connector_primary_identifier, str):
            raise TypeError("Expected argument 'connector_primary_identifier' to be a str")
        pulumi.set(__self__, "connector_primary_identifier", connector_primary_identifier)
        if host_type and not isinstance(host_type, str):
            raise TypeError("Expected argument 'host_type' to be a str")
        pulumi.set(__self__, "host_type", host_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="awsCloudProfile")
    def aws_cloud_profile(self) -> 'outputs.AwsCloudProfileResponse':
        """
        Cloud profile for AWS.
        """
        return pulumi.get(self, "aws_cloud_profile")

    @property
    @pulumi.getter(name="connectorPrimaryIdentifier")
    def connector_primary_identifier(self) -> str:
        """
        Connector primary identifier.
        """
        return pulumi.get(self, "connector_primary_identifier")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        """
        Host cloud the public cloud connector.
        """
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The resource provisioning state.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetPublicCloudConnectorResult(GetPublicCloudConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicCloudConnectorResult(
            aws_cloud_profile=self.aws_cloud_profile,
            connector_primary_identifier=self.connector_primary_identifier,
            host_type=self.host_type,
            id=self.id,
            location=self.location,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_public_cloud_connector(public_cloud_connector: Optional[str] = None,
                               resource_group_name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicCloudConnectorResult:
    """
    Get a PublicCloudConnector


    :param str public_cloud_connector: Represent public cloud connectors resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['publicCloudConnector'] = public_cloud_connector
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:hybridconnectivity/v20241201:getPublicCloudConnector', __args__, opts=opts, typ=GetPublicCloudConnectorResult).value

    return AwaitableGetPublicCloudConnectorResult(
        aws_cloud_profile=pulumi.get(__ret__, 'aws_cloud_profile'),
        connector_primary_identifier=pulumi.get(__ret__, 'connector_primary_identifier'),
        host_type=pulumi.get(__ret__, 'host_type'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_public_cloud_connector_output(public_cloud_connector: Optional[pulumi.Input[str]] = None,
                                      resource_group_name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPublicCloudConnectorResult]:
    """
    Get a PublicCloudConnector


    :param str public_cloud_connector: Represent public cloud connectors resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['publicCloudConnector'] = public_cloud_connector
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:hybridconnectivity/v20241201:getPublicCloudConnector', __args__, opts=opts, typ=GetPublicCloudConnectorResult)
    return __ret__.apply(lambda __response__: GetPublicCloudConnectorResult(
        aws_cloud_profile=pulumi.get(__response__, 'aws_cloud_profile'),
        connector_primary_identifier=pulumi.get(__response__, 'connector_primary_identifier'),
        host_type=pulumi.get(__response__, 'host_type'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
