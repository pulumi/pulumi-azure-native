# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AssociatedTenantPropertiesArgs',
    'AssociatedTenantPropertiesArgsDict',
    'AzurePlanArgs',
    'AzurePlanArgsDict',
    'BillingProfilePropertiesBillToArgs',
    'BillingProfilePropertiesBillToArgsDict',
    'BillingProfilePropertiesCurrentPaymentTermArgs',
    'BillingProfilePropertiesCurrentPaymentTermArgsDict',
    'BillingProfilePropertiesIndirectRelationshipInfoArgs',
    'BillingProfilePropertiesIndirectRelationshipInfoArgsDict',
    'BillingProfilePropertiesShipToArgs',
    'BillingProfilePropertiesShipToArgsDict',
    'BillingProfilePropertiesSoldToArgs',
    'BillingProfilePropertiesSoldToArgsDict',
    'BillingProfilePropertiesArgs',
    'BillingProfilePropertiesArgsDict',
    'BillingRoleAssignmentPropertiesArgs',
    'BillingRoleAssignmentPropertiesArgsDict',
    'InvoiceSectionPropertiesArgs',
    'InvoiceSectionPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class AssociatedTenantPropertiesArgsDict(TypedDict):
        """
        An associated tenant.
        """
        billing_management_state: NotRequired[pulumi.Input[Union[str, 'BillingManagementTenantState']]]
        """
        The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The name of the associated tenant.
        """
        provisioning_management_state: NotRequired[pulumi.Input[Union[str, 'ProvisioningTenantState']]]
        """
        The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        """
        tenant_id: NotRequired[pulumi.Input[str]]
        """
        The ID that uniquely identifies a tenant.
        """
elif False:
    AssociatedTenantPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssociatedTenantPropertiesArgs:
    def __init__(__self__, *,
                 billing_management_state: Optional[pulumi.Input[Union[str, 'BillingManagementTenantState']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 provisioning_management_state: Optional[pulumi.Input[Union[str, 'ProvisioningTenantState']]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        An associated tenant.
        :param pulumi.Input[Union[str, 'BillingManagementTenantState']] billing_management_state: The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        :param pulumi.Input[str] display_name: The name of the associated tenant.
        :param pulumi.Input[Union[str, 'ProvisioningTenantState']] provisioning_management_state: The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        :param pulumi.Input[str] tenant_id: The ID that uniquely identifies a tenant.
        """
        if billing_management_state is not None:
            pulumi.set(__self__, "billing_management_state", billing_management_state)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if provisioning_management_state is not None:
            pulumi.set(__self__, "provisioning_management_state", provisioning_management_state)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="billingManagementState")
    def billing_management_state(self) -> Optional[pulumi.Input[Union[str, 'BillingManagementTenantState']]]:
        """
        The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        """
        return pulumi.get(self, "billing_management_state")

    @billing_management_state.setter
    def billing_management_state(self, value: Optional[pulumi.Input[Union[str, 'BillingManagementTenantState']]]):
        pulumi.set(self, "billing_management_state", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the associated tenant.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="provisioningManagementState")
    def provisioning_management_state(self) -> Optional[pulumi.Input[Union[str, 'ProvisioningTenantState']]]:
        """
        The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        """
        return pulumi.get(self, "provisioning_management_state")

    @provisioning_management_state.setter
    def provisioning_management_state(self, value: Optional[pulumi.Input[Union[str, 'ProvisioningTenantState']]]):
        pulumi.set(self, "provisioning_management_state", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID that uniquely identifies a tenant.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class AzurePlanArgsDict(TypedDict):
        """
        Details of the Azure plan.
        """
        product_id: NotRequired[pulumi.Input[str]]
        """
        The ID that uniquely identifies a product.
        """
        sku_description: NotRequired[pulumi.Input[str]]
        """
        The sku description.
        """
        sku_id: NotRequired[pulumi.Input[str]]
        """
        The ID that uniquely identifies a sku.
        """
elif False:
    AzurePlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzurePlanArgs:
    def __init__(__self__, *,
                 product_id: Optional[pulumi.Input[str]] = None,
                 sku_description: Optional[pulumi.Input[str]] = None,
                 sku_id: Optional[pulumi.Input[str]] = None):
        """
        Details of the Azure plan.
        :param pulumi.Input[str] product_id: The ID that uniquely identifies a product.
        :param pulumi.Input[str] sku_description: The sku description.
        :param pulumi.Input[str] sku_id: The ID that uniquely identifies a sku.
        """
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if sku_description is not None:
            pulumi.set(__self__, "sku_description", sku_description)
        if sku_id is not None:
            pulumi.set(__self__, "sku_id", sku_id)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID that uniquely identifies a product.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="skuDescription")
    def sku_description(self) -> Optional[pulumi.Input[str]]:
        """
        The sku description.
        """
        return pulumi.get(self, "sku_description")

    @sku_description.setter
    def sku_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_description", value)

    @property
    @pulumi.getter(name="skuId")
    def sku_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID that uniquely identifies a sku.
        """
        return pulumi.get(self, "sku_id")

    @sku_id.setter
    def sku_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_id", value)


if not MYPY:
    class BillingProfilePropertiesBillToArgsDict(TypedDict):
        """
        Billing address.
        """
        address_line1: pulumi.Input[str]
        """
        Address line 1.
        """
        country: pulumi.Input[str]
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        address_line2: NotRequired[pulumi.Input[str]]
        """
        Address line 2.
        """
        address_line3: NotRequired[pulumi.Input[str]]
        """
        Address line 3.
        """
        city: NotRequired[pulumi.Input[str]]
        """
        Address city.
        """
        company_name: NotRequired[pulumi.Input[str]]
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        district: NotRequired[pulumi.Input[str]]
        """
        Address district.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email address.
        """
        first_name: NotRequired[pulumi.Input[str]]
        """
        First name. Optional for MCA Enterprise.
        """
        is_valid_address: NotRequired[pulumi.Input[bool]]
        """
        Indicates if the address is incomplete.
        """
        last_name: NotRequired[pulumi.Input[str]]
        """
        Last name. Optional for MCA Enterprise.
        """
        middle_name: NotRequired[pulumi.Input[str]]
        """
        Middle name.
        """
        phone_number: NotRequired[pulumi.Input[str]]
        """
        Phone number.
        """
        postal_code: NotRequired[pulumi.Input[str]]
        """
        Postal code.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Address region.
        """
elif False:
    BillingProfilePropertiesBillToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingProfilePropertiesBillToArgs:
    def __init__(__self__, *,
                 address_line1: pulumi.Input[str],
                 country: pulumi.Input[str],
                 address_line2: Optional[pulumi.Input[str]] = None,
                 address_line3: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 company_name: Optional[pulumi.Input[str]] = None,
                 district: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 is_valid_address: Optional[pulumi.Input[bool]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 middle_name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Billing address.
        :param pulumi.Input[str] address_line1: Address line 1.
        :param pulumi.Input[str] country: Country code uses ISO 3166-1 Alpha-2 format.
        :param pulumi.Input[str] address_line2: Address line 2.
        :param pulumi.Input[str] address_line3: Address line 3.
        :param pulumi.Input[str] city: Address city.
        :param pulumi.Input[str] company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param pulumi.Input[str] district: Address district.
        :param pulumi.Input[str] email: Email address.
        :param pulumi.Input[str] first_name: First name. Optional for MCA Enterprise.
        :param pulumi.Input[bool] is_valid_address: Indicates if the address is incomplete.
        :param pulumi.Input[str] last_name: Last name. Optional for MCA Enterprise.
        :param pulumi.Input[str] middle_name: Middle name.
        :param pulumi.Input[str] phone_number: Phone number.
        :param pulumi.Input[str] postal_code: Postal code.
        :param pulumi.Input[str] region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> pulumi.Input[str]:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @address_line1.setter
    def address_line1(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line1", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[pulumi.Input[str]]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @address_line2.setter
    def address_line2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line2", value)

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[pulumi.Input[str]]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @address_line3.setter
    def address_line3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line3", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter
    def district(self) -> Optional[pulumi.Input[str]]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @district.setter
    def district(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "district", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @is_valid_address.setter
    def is_valid_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid_address", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[pulumi.Input[str]]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @middle_name.setter
    def middle_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "middle_name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Address region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class BillingProfilePropertiesCurrentPaymentTermArgsDict(TypedDict):
        """
        The current payment term of the billing profile.
        """
        end_date: NotRequired[pulumi.Input[str]]
        """
        The date on when the defined 'Payment Term' will end and is always in UTC.
        """
        start_date: NotRequired[pulumi.Input[str]]
        """
        The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        """
        term: NotRequired[pulumi.Input[str]]
        """
        Represents duration in netXX format. Always in days.
        """
elif False:
    BillingProfilePropertiesCurrentPaymentTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingProfilePropertiesCurrentPaymentTermArgs:
    def __init__(__self__, *,
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 term: Optional[pulumi.Input[str]] = None):
        """
        The current payment term of the billing profile.
        :param pulumi.Input[str] end_date: The date on when the defined 'Payment Term' will end and is always in UTC.
        :param pulumi.Input[str] start_date: The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        :param pulumi.Input[str] term: Represents duration in netXX format. Always in days.
        """
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if term is not None:
            pulumi.set(__self__, "term", term)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date on when the defined 'Payment Term' will end and is always in UTC.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def term(self) -> Optional[pulumi.Input[str]]:
        """
        Represents duration in netXX format. Always in days.
        """
        return pulumi.get(self, "term")

    @term.setter
    def term(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "term", value)


if not MYPY:
    class BillingProfilePropertiesIndirectRelationshipInfoArgsDict(TypedDict):
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        """
        billing_account_name: NotRequired[pulumi.Input[str]]
        """
        The billing account name of the partner or the customer for an indirect motion.
        """
        billing_profile_name: NotRequired[pulumi.Input[str]]
        """
        The billing profile name of the partner or the customer for an indirect motion.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The display name of the partner or customer for an indirect motion.
        """
elif False:
    BillingProfilePropertiesIndirectRelationshipInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingProfilePropertiesIndirectRelationshipInfoArgs:
    def __init__(__self__, *,
                 billing_account_name: Optional[pulumi.Input[str]] = None,
                 billing_profile_name: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        :param pulumi.Input[str] billing_account_name: The billing account name of the partner or the customer for an indirect motion.
        :param pulumi.Input[str] billing_profile_name: The billing profile name of the partner or the customer for an indirect motion.
        :param pulumi.Input[str] display_name: The display name of the partner or customer for an indirect motion.
        """
        if billing_account_name is not None:
            pulumi.set(__self__, "billing_account_name", billing_account_name)
        if billing_profile_name is not None:
            pulumi.set(__self__, "billing_profile_name", billing_profile_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="billingAccountName")
    def billing_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The billing account name of the partner or the customer for an indirect motion.
        """
        return pulumi.get(self, "billing_account_name")

    @billing_account_name.setter
    def billing_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_account_name", value)

    @property
    @pulumi.getter(name="billingProfileName")
    def billing_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        The billing profile name of the partner or the customer for an indirect motion.
        """
        return pulumi.get(self, "billing_profile_name")

    @billing_profile_name.setter
    def billing_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_profile_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the partner or customer for an indirect motion.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


if not MYPY:
    class BillingProfilePropertiesShipToArgsDict(TypedDict):
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        """
        address_line1: pulumi.Input[str]
        """
        Address line 1.
        """
        country: pulumi.Input[str]
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        address_line2: NotRequired[pulumi.Input[str]]
        """
        Address line 2.
        """
        address_line3: NotRequired[pulumi.Input[str]]
        """
        Address line 3.
        """
        city: NotRequired[pulumi.Input[str]]
        """
        Address city.
        """
        company_name: NotRequired[pulumi.Input[str]]
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        district: NotRequired[pulumi.Input[str]]
        """
        Address district.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email address.
        """
        first_name: NotRequired[pulumi.Input[str]]
        """
        First name. Optional for MCA Enterprise.
        """
        is_valid_address: NotRequired[pulumi.Input[bool]]
        """
        Indicates if the address is incomplete.
        """
        last_name: NotRequired[pulumi.Input[str]]
        """
        Last name. Optional for MCA Enterprise.
        """
        middle_name: NotRequired[pulumi.Input[str]]
        """
        Middle name.
        """
        phone_number: NotRequired[pulumi.Input[str]]
        """
        Phone number.
        """
        postal_code: NotRequired[pulumi.Input[str]]
        """
        Postal code.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Address region.
        """
elif False:
    BillingProfilePropertiesShipToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingProfilePropertiesShipToArgs:
    def __init__(__self__, *,
                 address_line1: pulumi.Input[str],
                 country: pulumi.Input[str],
                 address_line2: Optional[pulumi.Input[str]] = None,
                 address_line3: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 company_name: Optional[pulumi.Input[str]] = None,
                 district: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 is_valid_address: Optional[pulumi.Input[bool]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 middle_name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        :param pulumi.Input[str] address_line1: Address line 1.
        :param pulumi.Input[str] country: Country code uses ISO 3166-1 Alpha-2 format.
        :param pulumi.Input[str] address_line2: Address line 2.
        :param pulumi.Input[str] address_line3: Address line 3.
        :param pulumi.Input[str] city: Address city.
        :param pulumi.Input[str] company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param pulumi.Input[str] district: Address district.
        :param pulumi.Input[str] email: Email address.
        :param pulumi.Input[str] first_name: First name. Optional for MCA Enterprise.
        :param pulumi.Input[bool] is_valid_address: Indicates if the address is incomplete.
        :param pulumi.Input[str] last_name: Last name. Optional for MCA Enterprise.
        :param pulumi.Input[str] middle_name: Middle name.
        :param pulumi.Input[str] phone_number: Phone number.
        :param pulumi.Input[str] postal_code: Postal code.
        :param pulumi.Input[str] region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> pulumi.Input[str]:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @address_line1.setter
    def address_line1(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line1", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[pulumi.Input[str]]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @address_line2.setter
    def address_line2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line2", value)

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[pulumi.Input[str]]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @address_line3.setter
    def address_line3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line3", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter
    def district(self) -> Optional[pulumi.Input[str]]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @district.setter
    def district(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "district", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @is_valid_address.setter
    def is_valid_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid_address", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[pulumi.Input[str]]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @middle_name.setter
    def middle_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "middle_name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Address region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class BillingProfilePropertiesSoldToArgsDict(TypedDict):
        """
        The address of the individual or organization that is responsible for the billing account.
        """
        address_line1: pulumi.Input[str]
        """
        Address line 1.
        """
        country: pulumi.Input[str]
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        address_line2: NotRequired[pulumi.Input[str]]
        """
        Address line 2.
        """
        address_line3: NotRequired[pulumi.Input[str]]
        """
        Address line 3.
        """
        city: NotRequired[pulumi.Input[str]]
        """
        Address city.
        """
        company_name: NotRequired[pulumi.Input[str]]
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        district: NotRequired[pulumi.Input[str]]
        """
        Address district.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email address.
        """
        first_name: NotRequired[pulumi.Input[str]]
        """
        First name. Optional for MCA Enterprise.
        """
        is_valid_address: NotRequired[pulumi.Input[bool]]
        """
        Indicates if the address is incomplete.
        """
        last_name: NotRequired[pulumi.Input[str]]
        """
        Last name. Optional for MCA Enterprise.
        """
        middle_name: NotRequired[pulumi.Input[str]]
        """
        Middle name.
        """
        phone_number: NotRequired[pulumi.Input[str]]
        """
        Phone number.
        """
        postal_code: NotRequired[pulumi.Input[str]]
        """
        Postal code.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Address region.
        """
elif False:
    BillingProfilePropertiesSoldToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingProfilePropertiesSoldToArgs:
    def __init__(__self__, *,
                 address_line1: pulumi.Input[str],
                 country: pulumi.Input[str],
                 address_line2: Optional[pulumi.Input[str]] = None,
                 address_line3: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 company_name: Optional[pulumi.Input[str]] = None,
                 district: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 is_valid_address: Optional[pulumi.Input[bool]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 middle_name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The address of the individual or organization that is responsible for the billing account.
        :param pulumi.Input[str] address_line1: Address line 1.
        :param pulumi.Input[str] country: Country code uses ISO 3166-1 Alpha-2 format.
        :param pulumi.Input[str] address_line2: Address line 2.
        :param pulumi.Input[str] address_line3: Address line 3.
        :param pulumi.Input[str] city: Address city.
        :param pulumi.Input[str] company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param pulumi.Input[str] district: Address district.
        :param pulumi.Input[str] email: Email address.
        :param pulumi.Input[str] first_name: First name. Optional for MCA Enterprise.
        :param pulumi.Input[bool] is_valid_address: Indicates if the address is incomplete.
        :param pulumi.Input[str] last_name: Last name. Optional for MCA Enterprise.
        :param pulumi.Input[str] middle_name: Middle name.
        :param pulumi.Input[str] phone_number: Phone number.
        :param pulumi.Input[str] postal_code: Postal code.
        :param pulumi.Input[str] region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> pulumi.Input[str]:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @address_line1.setter
    def address_line1(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line1", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[pulumi.Input[str]]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @address_line2.setter
    def address_line2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line2", value)

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[pulumi.Input[str]]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @address_line3.setter
    def address_line3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line3", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter
    def district(self) -> Optional[pulumi.Input[str]]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @district.setter
    def district(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "district", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @is_valid_address.setter
    def is_valid_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid_address", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[pulumi.Input[str]]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @middle_name.setter
    def middle_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "middle_name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Address region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class BillingProfilePropertiesArgsDict(TypedDict):
        """
        A billing profile.
        """
        bill_to: NotRequired[pulumi.Input['BillingProfilePropertiesBillToArgsDict']]
        """
        Billing address.
        """
        current_payment_term: NotRequired[pulumi.Input['BillingProfilePropertiesCurrentPaymentTermArgsDict']]
        """
        The current payment term of the billing profile.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The name of the billing profile.
        """
        enabled_azure_plans: NotRequired[pulumi.Input[Sequence[pulumi.Input['AzurePlanArgsDict']]]]
        """
        Information about the enabled azure plans.
        """
        indirect_relationship_info: NotRequired[pulumi.Input['BillingProfilePropertiesIndirectRelationshipInfoArgsDict']]
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        """
        invoice_email_opt_in: NotRequired[pulumi.Input[bool]]
        """
        Flag controlling whether the invoices for the billing profile are sent through email.
        """
        invoice_recipients: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of email addresses to receive invoices by email for the billing profile.
        """
        po_number: NotRequired[pulumi.Input[str]]
        """
        The default purchase order number that will appear on the invoices generated for the billing profile.
        """
        ship_to: NotRequired[pulumi.Input['BillingProfilePropertiesShipToArgsDict']]
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        """
        sold_to: NotRequired[pulumi.Input['BillingProfilePropertiesSoldToArgsDict']]
        """
        The address of the individual or organization that is responsible for the billing account.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
elif False:
    BillingProfilePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingProfilePropertiesArgs:
    def __init__(__self__, *,
                 bill_to: Optional[pulumi.Input['BillingProfilePropertiesBillToArgs']] = None,
                 current_payment_term: Optional[pulumi.Input['BillingProfilePropertiesCurrentPaymentTermArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled_azure_plans: Optional[pulumi.Input[Sequence[pulumi.Input['AzurePlanArgs']]]] = None,
                 indirect_relationship_info: Optional[pulumi.Input['BillingProfilePropertiesIndirectRelationshipInfoArgs']] = None,
                 invoice_email_opt_in: Optional[pulumi.Input[bool]] = None,
                 invoice_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 po_number: Optional[pulumi.Input[str]] = None,
                 ship_to: Optional[pulumi.Input['BillingProfilePropertiesShipToArgs']] = None,
                 sold_to: Optional[pulumi.Input['BillingProfilePropertiesSoldToArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A billing profile.
        :param pulumi.Input['BillingProfilePropertiesBillToArgs'] bill_to: Billing address.
        :param pulumi.Input['BillingProfilePropertiesCurrentPaymentTermArgs'] current_payment_term: The current payment term of the billing profile.
        :param pulumi.Input[str] display_name: The name of the billing profile.
        :param pulumi.Input[Sequence[pulumi.Input['AzurePlanArgs']]] enabled_azure_plans: Information about the enabled azure plans.
        :param pulumi.Input['BillingProfilePropertiesIndirectRelationshipInfoArgs'] indirect_relationship_info: Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        :param pulumi.Input[bool] invoice_email_opt_in: Flag controlling whether the invoices for the billing profile are sent through email.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] invoice_recipients: The list of email addresses to receive invoices by email for the billing profile.
        :param pulumi.Input[str] po_number: The default purchase order number that will appear on the invoices generated for the billing profile.
        :param pulumi.Input['BillingProfilePropertiesShipToArgs'] ship_to: The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        :param pulumi.Input['BillingProfilePropertiesSoldToArgs'] sold_to: The address of the individual or organization that is responsible for the billing account.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        if bill_to is not None:
            pulumi.set(__self__, "bill_to", bill_to)
        if current_payment_term is not None:
            pulumi.set(__self__, "current_payment_term", current_payment_term)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled_azure_plans is not None:
            pulumi.set(__self__, "enabled_azure_plans", enabled_azure_plans)
        if indirect_relationship_info is not None:
            pulumi.set(__self__, "indirect_relationship_info", indirect_relationship_info)
        if invoice_email_opt_in is not None:
            pulumi.set(__self__, "invoice_email_opt_in", invoice_email_opt_in)
        if invoice_recipients is not None:
            pulumi.set(__self__, "invoice_recipients", invoice_recipients)
        if po_number is not None:
            pulumi.set(__self__, "po_number", po_number)
        if ship_to is not None:
            pulumi.set(__self__, "ship_to", ship_to)
        if sold_to is not None:
            pulumi.set(__self__, "sold_to", sold_to)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="billTo")
    def bill_to(self) -> Optional[pulumi.Input['BillingProfilePropertiesBillToArgs']]:
        """
        Billing address.
        """
        return pulumi.get(self, "bill_to")

    @bill_to.setter
    def bill_to(self, value: Optional[pulumi.Input['BillingProfilePropertiesBillToArgs']]):
        pulumi.set(self, "bill_to", value)

    @property
    @pulumi.getter(name="currentPaymentTerm")
    def current_payment_term(self) -> Optional[pulumi.Input['BillingProfilePropertiesCurrentPaymentTermArgs']]:
        """
        The current payment term of the billing profile.
        """
        return pulumi.get(self, "current_payment_term")

    @current_payment_term.setter
    def current_payment_term(self, value: Optional[pulumi.Input['BillingProfilePropertiesCurrentPaymentTermArgs']]):
        pulumi.set(self, "current_payment_term", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the billing profile.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="enabledAzurePlans")
    def enabled_azure_plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzurePlanArgs']]]]:
        """
        Information about the enabled azure plans.
        """
        return pulumi.get(self, "enabled_azure_plans")

    @enabled_azure_plans.setter
    def enabled_azure_plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzurePlanArgs']]]]):
        pulumi.set(self, "enabled_azure_plans", value)

    @property
    @pulumi.getter(name="indirectRelationshipInfo")
    def indirect_relationship_info(self) -> Optional[pulumi.Input['BillingProfilePropertiesIndirectRelationshipInfoArgs']]:
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        """
        return pulumi.get(self, "indirect_relationship_info")

    @indirect_relationship_info.setter
    def indirect_relationship_info(self, value: Optional[pulumi.Input['BillingProfilePropertiesIndirectRelationshipInfoArgs']]):
        pulumi.set(self, "indirect_relationship_info", value)

    @property
    @pulumi.getter(name="invoiceEmailOptIn")
    def invoice_email_opt_in(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag controlling whether the invoices for the billing profile are sent through email.
        """
        return pulumi.get(self, "invoice_email_opt_in")

    @invoice_email_opt_in.setter
    def invoice_email_opt_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invoice_email_opt_in", value)

    @property
    @pulumi.getter(name="invoiceRecipients")
    def invoice_recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of email addresses to receive invoices by email for the billing profile.
        """
        return pulumi.get(self, "invoice_recipients")

    @invoice_recipients.setter
    def invoice_recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "invoice_recipients", value)

    @property
    @pulumi.getter(name="poNumber")
    def po_number(self) -> Optional[pulumi.Input[str]]:
        """
        The default purchase order number that will appear on the invoices generated for the billing profile.
        """
        return pulumi.get(self, "po_number")

    @po_number.setter
    def po_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "po_number", value)

    @property
    @pulumi.getter(name="shipTo")
    def ship_to(self) -> Optional[pulumi.Input['BillingProfilePropertiesShipToArgs']]:
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        """
        return pulumi.get(self, "ship_to")

    @ship_to.setter
    def ship_to(self, value: Optional[pulumi.Input['BillingProfilePropertiesShipToArgs']]):
        pulumi.set(self, "ship_to", value)

    @property
    @pulumi.getter(name="soldTo")
    def sold_to(self) -> Optional[pulumi.Input['BillingProfilePropertiesSoldToArgs']]:
        """
        The address of the individual or organization that is responsible for the billing account.
        """
        return pulumi.get(self, "sold_to")

    @sold_to.setter
    def sold_to(self, value: Optional[pulumi.Input['BillingProfilePropertiesSoldToArgs']]):
        pulumi.set(self, "sold_to", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class BillingRoleAssignmentPropertiesArgsDict(TypedDict):
        """
        The properties of the billing role assignment.
        """
        role_definition_id: pulumi.Input[str]
        """
        The ID of the role definition.
        """
        principal_id: NotRequired[pulumi.Input[str]]
        """
        The object id of the user to whom the role was assigned.
        """
        principal_puid: NotRequired[pulumi.Input[str]]
        """
        The principal PUID of the user to whom the role was assigned.
        """
        principal_tenant_id: NotRequired[pulumi.Input[str]]
        """
        The principal tenant id of the user to whom the role was assigned.
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        The scope at which the role was assigned.
        """
        user_authentication_type: NotRequired[pulumi.Input[str]]
        """
        The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        user_email_address: NotRequired[pulumi.Input[str]]
        """
        The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
elif False:
    BillingRoleAssignmentPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BillingRoleAssignmentPropertiesArgs:
    def __init__(__self__, *,
                 role_definition_id: pulumi.Input[str],
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_puid: Optional[pulumi.Input[str]] = None,
                 principal_tenant_id: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 user_authentication_type: Optional[pulumi.Input[str]] = None,
                 user_email_address: Optional[pulumi.Input[str]] = None):
        """
        The properties of the billing role assignment.
        :param pulumi.Input[str] role_definition_id: The ID of the role definition.
        :param pulumi.Input[str] principal_id: The object id of the user to whom the role was assigned.
        :param pulumi.Input[str] principal_puid: The principal PUID of the user to whom the role was assigned.
        :param pulumi.Input[str] principal_tenant_id: The principal tenant id of the user to whom the role was assigned.
        :param pulumi.Input[str] scope: The scope at which the role was assigned.
        :param pulumi.Input[str] user_authentication_type: The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        :param pulumi.Input[str] user_email_address: The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        pulumi.set(__self__, "role_definition_id", role_definition_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_puid is not None:
            pulumi.set(__self__, "principal_puid", principal_puid)
        if principal_tenant_id is not None:
            pulumi.set(__self__, "principal_tenant_id", principal_tenant_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if user_authentication_type is not None:
            pulumi.set(__self__, "user_authentication_type", user_authentication_type)
        if user_email_address is not None:
            pulumi.set(__self__, "user_email_address", user_email_address)

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> pulumi.Input[str]:
        """
        The ID of the role definition.
        """
        return pulumi.get(self, "role_definition_id")

    @role_definition_id.setter
    def role_definition_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_definition_id", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the user to whom the role was assigned.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalPuid")
    def principal_puid(self) -> Optional[pulumi.Input[str]]:
        """
        The principal PUID of the user to whom the role was assigned.
        """
        return pulumi.get(self, "principal_puid")

    @principal_puid.setter
    def principal_puid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_puid", value)

    @property
    @pulumi.getter(name="principalTenantId")
    def principal_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The principal tenant id of the user to whom the role was assigned.
        """
        return pulumi.get(self, "principal_tenant_id")

    @principal_tenant_id.setter
    def principal_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_tenant_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope at which the role was assigned.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="userAuthenticationType")
    def user_authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        return pulumi.get(self, "user_authentication_type")

    @user_authentication_type.setter
    def user_authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_authentication_type", value)

    @property
    @pulumi.getter(name="userEmailAddress")
    def user_email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        return pulumi.get(self, "user_email_address")

    @user_email_address.setter
    def user_email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email_address", value)


if not MYPY:
    class InvoiceSectionPropertiesArgsDict(TypedDict):
        """
        An invoice section.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The name of the invoice section.
        """
        reason_code: NotRequired[pulumi.Input[Union[str, 'InvoiceSectionStateReasonCode']]]
        """
        Reason for the specified invoice section status.
        """
        state: NotRequired[pulumi.Input[Union[str, 'InvoiceSectionState']]]
        """
        Identifies the status of an invoice section.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        target_cloud: NotRequired[pulumi.Input[Union[str, 'TargetCloud']]]
        """
        Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
elif False:
    InvoiceSectionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InvoiceSectionPropertiesArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 reason_code: Optional[pulumi.Input[Union[str, 'InvoiceSectionStateReasonCode']]] = None,
                 state: Optional[pulumi.Input[Union[str, 'InvoiceSectionState']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_cloud: Optional[pulumi.Input[Union[str, 'TargetCloud']]] = None):
        """
        An invoice section.
        :param pulumi.Input[str] display_name: The name of the invoice section.
        :param pulumi.Input[Union[str, 'InvoiceSectionStateReasonCode']] reason_code: Reason for the specified invoice section status.
        :param pulumi.Input[Union[str, 'InvoiceSectionState']] state: Identifies the status of an invoice section.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        :param pulumi.Input[Union[str, 'TargetCloud']] target_cloud: Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_cloud is not None:
            pulumi.set(__self__, "target_cloud", target_cloud)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the invoice section.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[pulumi.Input[Union[str, 'InvoiceSectionStateReasonCode']]]:
        """
        Reason for the specified invoice section status.
        """
        return pulumi.get(self, "reason_code")

    @reason_code.setter
    def reason_code(self, value: Optional[pulumi.Input[Union[str, 'InvoiceSectionStateReasonCode']]]):
        pulumi.set(self, "reason_code", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'InvoiceSectionState']]]:
        """
        Identifies the status of an invoice section.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'InvoiceSectionState']]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetCloud")
    def target_cloud(self) -> Optional[pulumi.Input[Union[str, 'TargetCloud']]]:
        """
        Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
        return pulumi.get(self, "target_cloud")

    @target_cloud.setter
    def target_cloud(self, value: Optional[pulumi.Input[Union[str, 'TargetCloud']]]):
        pulumi.set(self, "target_cloud", value)


