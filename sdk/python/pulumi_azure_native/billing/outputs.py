# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssociatedTenantPropertiesResponse',
    'AzurePlanResponse',
    'BillingProfilePropertiesResponse',
    'BillingProfilePropertiesResponseBillTo',
    'BillingProfilePropertiesResponseCurrentPaymentTerm',
    'BillingProfilePropertiesResponseIndirectRelationshipInfo',
    'BillingProfilePropertiesResponseShipTo',
    'BillingProfilePropertiesResponseSoldTo',
    'BillingRoleAssignmentPropertiesResponse',
    'InvoiceSectionPropertiesResponse',
    'InvoiceSectionWithCreateSubPermissionResponse',
    'PaymentTermResponse',
    'SpendingLimitDetailsResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AssociatedTenantPropertiesResponse(dict):
    """
    An associated tenant.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningBillingRequestId":
            suggest = "provisioning_billing_request_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "billingManagementState":
            suggest = "billing_management_state"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "provisioningManagementState":
            suggest = "provisioning_management_state"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssociatedTenantPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssociatedTenantPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssociatedTenantPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_billing_request_id: _builtins.str,
                 provisioning_state: _builtins.str,
                 billing_management_state: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 provisioning_management_state: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        """
        An associated tenant.
        :param _builtins.str provisioning_billing_request_id: The unique identifier for the billing request that is created when enabling provisioning for an associated tenant.
        :param _builtins.str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param _builtins.str billing_management_state: The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        :param _builtins.str display_name: The name of the associated tenant.
        :param _builtins.str provisioning_management_state: The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        :param _builtins.str tenant_id: The ID that uniquely identifies a tenant.
        """
        pulumi.set(__self__, "provisioning_billing_request_id", provisioning_billing_request_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if billing_management_state is not None:
            pulumi.set(__self__, "billing_management_state", billing_management_state)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if provisioning_management_state is not None:
            pulumi.set(__self__, "provisioning_management_state", provisioning_management_state)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="provisioningBillingRequestId")
    def provisioning_billing_request_id(self) -> _builtins.str:
        """
        The unique identifier for the billing request that is created when enabling provisioning for an associated tenant.
        """
        return pulumi.get(self, "provisioning_billing_request_id")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="billingManagementState")
    def billing_management_state(self) -> Optional[_builtins.str]:
        """
        The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        """
        return pulumi.get(self, "billing_management_state")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The name of the associated tenant.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="provisioningManagementState")
    def provisioning_management_state(self) -> Optional[_builtins.str]:
        """
        The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        """
        return pulumi.get(self, "provisioning_management_state")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        """
        The ID that uniquely identifies a tenant.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class AzurePlanResponse(dict):
    """
    Details of the Azure plan.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productId":
            suggest = "product_id"
        elif key == "skuDescription":
            suggest = "sku_description"
        elif key == "skuId":
            suggest = "sku_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzurePlanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzurePlanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzurePlanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_id: Optional[_builtins.str] = None,
                 sku_description: Optional[_builtins.str] = None,
                 sku_id: Optional[_builtins.str] = None):
        """
        Details of the Azure plan.
        :param _builtins.str product_id: The ID that uniquely identifies a product.
        :param _builtins.str sku_description: The sku description.
        :param _builtins.str sku_id: The ID that uniquely identifies a sku.
        """
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if sku_description is not None:
            pulumi.set(__self__, "sku_description", sku_description)
        if sku_id is not None:
            pulumi.set(__self__, "sku_id", sku_id)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[_builtins.str]:
        """
        The ID that uniquely identifies a product.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="skuDescription")
    def sku_description(self) -> Optional[_builtins.str]:
        """
        The sku description.
        """
        return pulumi.get(self, "sku_description")

    @_builtins.property
    @pulumi.getter(name="skuId")
    def sku_id(self) -> Optional[_builtins.str]:
        """
        The ID that uniquely identifies a sku.
        """
        return pulumi.get(self, "sku_id")


@pulumi.output_type
class BillingProfilePropertiesResponse(dict):
    """
    A billing profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingRelationshipType":
            suggest = "billing_relationship_type"
        elif key == "hasReadAccess":
            suggest = "has_read_access"
        elif key == "invoiceDay":
            suggest = "invoice_day"
        elif key == "otherPaymentTerms":
            suggest = "other_payment_terms"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "spendingLimit":
            suggest = "spending_limit"
        elif key == "spendingLimitDetails":
            suggest = "spending_limit_details"
        elif key == "statusReasonCode":
            suggest = "status_reason_code"
        elif key == "systemId":
            suggest = "system_id"
        elif key == "targetClouds":
            suggest = "target_clouds"
        elif key == "billTo":
            suggest = "bill_to"
        elif key == "currentPaymentTerm":
            suggest = "current_payment_term"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "enabledAzurePlans":
            suggest = "enabled_azure_plans"
        elif key == "indirectRelationshipInfo":
            suggest = "indirect_relationship_info"
        elif key == "invoiceEmailOptIn":
            suggest = "invoice_email_opt_in"
        elif key == "invoiceRecipients":
            suggest = "invoice_recipients"
        elif key == "poNumber":
            suggest = "po_number"
        elif key == "shipTo":
            suggest = "ship_to"
        elif key == "soldTo":
            suggest = "sold_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_relationship_type: _builtins.str,
                 currency: _builtins.str,
                 has_read_access: _builtins.bool,
                 invoice_day: _builtins.int,
                 other_payment_terms: Sequence['outputs.PaymentTermResponse'],
                 provisioning_state: _builtins.str,
                 spending_limit: _builtins.str,
                 spending_limit_details: Sequence['outputs.SpendingLimitDetailsResponse'],
                 status: _builtins.str,
                 status_reason_code: _builtins.str,
                 system_id: _builtins.str,
                 target_clouds: Sequence[_builtins.str],
                 bill_to: Optional['outputs.BillingProfilePropertiesResponseBillTo'] = None,
                 current_payment_term: Optional['outputs.BillingProfilePropertiesResponseCurrentPaymentTerm'] = None,
                 display_name: Optional[_builtins.str] = None,
                 enabled_azure_plans: Optional[Sequence['outputs.AzurePlanResponse']] = None,
                 indirect_relationship_info: Optional['outputs.BillingProfilePropertiesResponseIndirectRelationshipInfo'] = None,
                 invoice_email_opt_in: Optional[_builtins.bool] = None,
                 invoice_recipients: Optional[Sequence[_builtins.str]] = None,
                 po_number: Optional[_builtins.str] = None,
                 ship_to: Optional['outputs.BillingProfilePropertiesResponseShipTo'] = None,
                 sold_to: Optional['outputs.BillingProfilePropertiesResponseSoldTo'] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        A billing profile.
        :param _builtins.str billing_relationship_type: Identifies the billing relationship represented by the billing profile. The billing relationship may be between Microsoft, the customer, and/or a third-party.
        :param _builtins.str currency: The currency in which the charges for the billing profile are billed.
        :param _builtins.bool has_read_access: Indicates whether user has read access to the billing profile.
        :param _builtins.int invoice_day: The day of the month when the invoice for the billing profile is generated.
        :param Sequence['PaymentTermResponse'] other_payment_terms: The other payment terms of the billing profile.
        :param _builtins.str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param _builtins.str spending_limit: The billing profile spending limit.
        :param Sequence['SpendingLimitDetailsResponse'] spending_limit_details: The details of billing profile spending limit.
        :param _builtins.str status: The status of the billing profile.
        :param _builtins.str status_reason_code: Reason for the specified billing profile status.
        :param _builtins.str system_id: The system generated unique identifier for a billing profile.
        :param Sequence[_builtins.str] target_clouds: Identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as the billing profile gets associated with accounts in various clouds.
        :param 'BillingProfilePropertiesResponseBillTo' bill_to: Billing address.
        :param 'BillingProfilePropertiesResponseCurrentPaymentTerm' current_payment_term: The current payment term of the billing profile.
        :param _builtins.str display_name: The name of the billing profile.
        :param Sequence['AzurePlanResponse'] enabled_azure_plans: Information about the enabled azure plans.
        :param 'BillingProfilePropertiesResponseIndirectRelationshipInfo' indirect_relationship_info: Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        :param _builtins.bool invoice_email_opt_in: Flag controlling whether the invoices for the billing profile are sent through email.
        :param Sequence[_builtins.str] invoice_recipients: The list of email addresses to receive invoices by email for the billing profile.
        :param _builtins.str po_number: The default purchase order number that will appear on the invoices generated for the billing profile.
        :param 'BillingProfilePropertiesResponseShipTo' ship_to: The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        :param 'BillingProfilePropertiesResponseSoldTo' sold_to: The address of the individual or organization that is responsible for the billing account.
        :param Mapping[str, _builtins.str] tags: Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        pulumi.set(__self__, "billing_relationship_type", billing_relationship_type)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "has_read_access", has_read_access)
        pulumi.set(__self__, "invoice_day", invoice_day)
        pulumi.set(__self__, "other_payment_terms", other_payment_terms)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "spending_limit", spending_limit)
        pulumi.set(__self__, "spending_limit_details", spending_limit_details)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_reason_code", status_reason_code)
        pulumi.set(__self__, "system_id", system_id)
        pulumi.set(__self__, "target_clouds", target_clouds)
        if bill_to is not None:
            pulumi.set(__self__, "bill_to", bill_to)
        if current_payment_term is not None:
            pulumi.set(__self__, "current_payment_term", current_payment_term)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled_azure_plans is not None:
            pulumi.set(__self__, "enabled_azure_plans", enabled_azure_plans)
        if indirect_relationship_info is not None:
            pulumi.set(__self__, "indirect_relationship_info", indirect_relationship_info)
        if invoice_email_opt_in is not None:
            pulumi.set(__self__, "invoice_email_opt_in", invoice_email_opt_in)
        if invoice_recipients is not None:
            pulumi.set(__self__, "invoice_recipients", invoice_recipients)
        if po_number is not None:
            pulumi.set(__self__, "po_number", po_number)
        if ship_to is not None:
            pulumi.set(__self__, "ship_to", ship_to)
        if sold_to is not None:
            pulumi.set(__self__, "sold_to", sold_to)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="billingRelationshipType")
    def billing_relationship_type(self) -> _builtins.str:
        """
        Identifies the billing relationship represented by the billing profile. The billing relationship may be between Microsoft, the customer, and/or a third-party.
        """
        return pulumi.get(self, "billing_relationship_type")

    @_builtins.property
    @pulumi.getter
    def currency(self) -> _builtins.str:
        """
        The currency in which the charges for the billing profile are billed.
        """
        return pulumi.get(self, "currency")

    @_builtins.property
    @pulumi.getter(name="hasReadAccess")
    def has_read_access(self) -> _builtins.bool:
        """
        Indicates whether user has read access to the billing profile.
        """
        return pulumi.get(self, "has_read_access")

    @_builtins.property
    @pulumi.getter(name="invoiceDay")
    def invoice_day(self) -> _builtins.int:
        """
        The day of the month when the invoice for the billing profile is generated.
        """
        return pulumi.get(self, "invoice_day")

    @_builtins.property
    @pulumi.getter(name="otherPaymentTerms")
    def other_payment_terms(self) -> Sequence['outputs.PaymentTermResponse']:
        """
        The other payment terms of the billing profile.
        """
        return pulumi.get(self, "other_payment_terms")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="spendingLimit")
    def spending_limit(self) -> _builtins.str:
        """
        The billing profile spending limit.
        """
        return pulumi.get(self, "spending_limit")

    @_builtins.property
    @pulumi.getter(name="spendingLimitDetails")
    def spending_limit_details(self) -> Sequence['outputs.SpendingLimitDetailsResponse']:
        """
        The details of billing profile spending limit.
        """
        return pulumi.get(self, "spending_limit_details")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the billing profile.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasonCode")
    def status_reason_code(self) -> _builtins.str:
        """
        Reason for the specified billing profile status.
        """
        return pulumi.get(self, "status_reason_code")

    @_builtins.property
    @pulumi.getter(name="systemId")
    def system_id(self) -> _builtins.str:
        """
        The system generated unique identifier for a billing profile.
        """
        return pulumi.get(self, "system_id")

    @_builtins.property
    @pulumi.getter(name="targetClouds")
    def target_clouds(self) -> Sequence[_builtins.str]:
        """
        Identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as the billing profile gets associated with accounts in various clouds.
        """
        return pulumi.get(self, "target_clouds")

    @_builtins.property
    @pulumi.getter(name="billTo")
    def bill_to(self) -> Optional['outputs.BillingProfilePropertiesResponseBillTo']:
        """
        Billing address.
        """
        return pulumi.get(self, "bill_to")

    @_builtins.property
    @pulumi.getter(name="currentPaymentTerm")
    def current_payment_term(self) -> Optional['outputs.BillingProfilePropertiesResponseCurrentPaymentTerm']:
        """
        The current payment term of the billing profile.
        """
        return pulumi.get(self, "current_payment_term")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The name of the billing profile.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="enabledAzurePlans")
    def enabled_azure_plans(self) -> Optional[Sequence['outputs.AzurePlanResponse']]:
        """
        Information about the enabled azure plans.
        """
        return pulumi.get(self, "enabled_azure_plans")

    @_builtins.property
    @pulumi.getter(name="indirectRelationshipInfo")
    def indirect_relationship_info(self) -> Optional['outputs.BillingProfilePropertiesResponseIndirectRelationshipInfo']:
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        """
        return pulumi.get(self, "indirect_relationship_info")

    @_builtins.property
    @pulumi.getter(name="invoiceEmailOptIn")
    def invoice_email_opt_in(self) -> Optional[_builtins.bool]:
        """
        Flag controlling whether the invoices for the billing profile are sent through email.
        """
        return pulumi.get(self, "invoice_email_opt_in")

    @_builtins.property
    @pulumi.getter(name="invoiceRecipients")
    def invoice_recipients(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of email addresses to receive invoices by email for the billing profile.
        """
        return pulumi.get(self, "invoice_recipients")

    @_builtins.property
    @pulumi.getter(name="poNumber")
    def po_number(self) -> Optional[_builtins.str]:
        """
        The default purchase order number that will appear on the invoices generated for the billing profile.
        """
        return pulumi.get(self, "po_number")

    @_builtins.property
    @pulumi.getter(name="shipTo")
    def ship_to(self) -> Optional['outputs.BillingProfilePropertiesResponseShipTo']:
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        """
        return pulumi.get(self, "ship_to")

    @_builtins.property
    @pulumi.getter(name="soldTo")
    def sold_to(self) -> Optional['outputs.BillingProfilePropertiesResponseSoldTo']:
        """
        The address of the individual or organization that is responsible for the billing account.
        """
        return pulumi.get(self, "sold_to")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class BillingProfilePropertiesResponseBillTo(dict):
    """
    Billing address.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLine1":
            suggest = "address_line1"
        elif key == "addressLine2":
            suggest = "address_line2"
        elif key == "addressLine3":
            suggest = "address_line3"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "isValidAddress":
            suggest = "is_valid_address"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseBillTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseBillTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseBillTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line1: _builtins.str,
                 country: _builtins.str,
                 address_line2: Optional[_builtins.str] = None,
                 address_line3: Optional[_builtins.str] = None,
                 city: Optional[_builtins.str] = None,
                 company_name: Optional[_builtins.str] = None,
                 district: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 first_name: Optional[_builtins.str] = None,
                 is_valid_address: Optional[_builtins.bool] = None,
                 last_name: Optional[_builtins.str] = None,
                 middle_name: Optional[_builtins.str] = None,
                 phone_number: Optional[_builtins.str] = None,
                 postal_code: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None):
        """
        Billing address.
        :param _builtins.str address_line1: Address line 1.
        :param _builtins.str country: Country code uses ISO 3166-1 Alpha-2 format.
        :param _builtins.str address_line2: Address line 2.
        :param _builtins.str address_line3: Address line 3.
        :param _builtins.str city: Address city.
        :param _builtins.str company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param _builtins.str district: Address district.
        :param _builtins.str email: Email address.
        :param _builtins.str first_name: First name. Optional for MCA Enterprise.
        :param _builtins.bool is_valid_address: Indicates if the address is incomplete.
        :param _builtins.str last_name: Last name. Optional for MCA Enterprise.
        :param _builtins.str middle_name: Middle name.
        :param _builtins.str phone_number: Phone number.
        :param _builtins.str postal_code: Postal code.
        :param _builtins.str region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> _builtins.str:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[_builtins.str]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @_builtins.property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[_builtins.str]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[_builtins.str]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter
    def district(self) -> Optional[_builtins.str]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[_builtins.str]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[_builtins.bool]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[_builtins.str]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[_builtins.str]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[_builtins.str]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[_builtins.str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Address region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class BillingProfilePropertiesResponseCurrentPaymentTerm(dict):
    """
    The current payment term of the billing profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseCurrentPaymentTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseCurrentPaymentTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseCurrentPaymentTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_default: _builtins.bool,
                 end_date: Optional[_builtins.str] = None,
                 start_date: Optional[_builtins.str] = None,
                 term: Optional[_builtins.str] = None):
        """
        The current payment term of the billing profile.
        :param _builtins.bool is_default: Indicates payment term is the standard payment term.
        :param _builtins.str end_date: The date on when the defined 'Payment Term' will end and is always in UTC.
        :param _builtins.str start_date: The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        :param _builtins.str term: Represents duration in netXX format. Always in days.
        """
        pulumi.set(__self__, "is_default", is_default)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if term is not None:
            pulumi.set(__self__, "term", term)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Indicates payment term is the standard payment term.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        The date on when the defined 'Payment Term' will end and is always in UTC.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.str]:
        """
        The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def term(self) -> Optional[_builtins.str]:
        """
        Represents duration in netXX format. Always in days.
        """
        return pulumi.get(self, "term")


@pulumi.output_type
class BillingProfilePropertiesResponseIndirectRelationshipInfo(dict):
    """
    Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingAccountName":
            suggest = "billing_account_name"
        elif key == "billingProfileName":
            suggest = "billing_profile_name"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseIndirectRelationshipInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseIndirectRelationshipInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseIndirectRelationshipInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_account_name: Optional[_builtins.str] = None,
                 billing_profile_name: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None):
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        :param _builtins.str billing_account_name: The billing account name of the partner or the customer for an indirect motion.
        :param _builtins.str billing_profile_name: The billing profile name of the partner or the customer for an indirect motion.
        :param _builtins.str display_name: The display name of the partner or customer for an indirect motion.
        """
        if billing_account_name is not None:
            pulumi.set(__self__, "billing_account_name", billing_account_name)
        if billing_profile_name is not None:
            pulumi.set(__self__, "billing_profile_name", billing_profile_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @_builtins.property
    @pulumi.getter(name="billingAccountName")
    def billing_account_name(self) -> Optional[_builtins.str]:
        """
        The billing account name of the partner or the customer for an indirect motion.
        """
        return pulumi.get(self, "billing_account_name")

    @_builtins.property
    @pulumi.getter(name="billingProfileName")
    def billing_profile_name(self) -> Optional[_builtins.str]:
        """
        The billing profile name of the partner or the customer for an indirect motion.
        """
        return pulumi.get(self, "billing_profile_name")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The display name of the partner or customer for an indirect motion.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class BillingProfilePropertiesResponseShipTo(dict):
    """
    The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLine1":
            suggest = "address_line1"
        elif key == "addressLine2":
            suggest = "address_line2"
        elif key == "addressLine3":
            suggest = "address_line3"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "isValidAddress":
            suggest = "is_valid_address"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseShipTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseShipTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseShipTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line1: _builtins.str,
                 country: _builtins.str,
                 address_line2: Optional[_builtins.str] = None,
                 address_line3: Optional[_builtins.str] = None,
                 city: Optional[_builtins.str] = None,
                 company_name: Optional[_builtins.str] = None,
                 district: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 first_name: Optional[_builtins.str] = None,
                 is_valid_address: Optional[_builtins.bool] = None,
                 last_name: Optional[_builtins.str] = None,
                 middle_name: Optional[_builtins.str] = None,
                 phone_number: Optional[_builtins.str] = None,
                 postal_code: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None):
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        :param _builtins.str address_line1: Address line 1.
        :param _builtins.str country: Country code uses ISO 3166-1 Alpha-2 format.
        :param _builtins.str address_line2: Address line 2.
        :param _builtins.str address_line3: Address line 3.
        :param _builtins.str city: Address city.
        :param _builtins.str company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param _builtins.str district: Address district.
        :param _builtins.str email: Email address.
        :param _builtins.str first_name: First name. Optional for MCA Enterprise.
        :param _builtins.bool is_valid_address: Indicates if the address is incomplete.
        :param _builtins.str last_name: Last name. Optional for MCA Enterprise.
        :param _builtins.str middle_name: Middle name.
        :param _builtins.str phone_number: Phone number.
        :param _builtins.str postal_code: Postal code.
        :param _builtins.str region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> _builtins.str:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[_builtins.str]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @_builtins.property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[_builtins.str]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[_builtins.str]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter
    def district(self) -> Optional[_builtins.str]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[_builtins.str]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[_builtins.bool]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[_builtins.str]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[_builtins.str]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[_builtins.str]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[_builtins.str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Address region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class BillingProfilePropertiesResponseSoldTo(dict):
    """
    The address of the individual or organization that is responsible for the billing account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLine1":
            suggest = "address_line1"
        elif key == "addressLine2":
            suggest = "address_line2"
        elif key == "addressLine3":
            suggest = "address_line3"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "isValidAddress":
            suggest = "is_valid_address"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseSoldTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseSoldTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseSoldTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line1: _builtins.str,
                 country: _builtins.str,
                 address_line2: Optional[_builtins.str] = None,
                 address_line3: Optional[_builtins.str] = None,
                 city: Optional[_builtins.str] = None,
                 company_name: Optional[_builtins.str] = None,
                 district: Optional[_builtins.str] = None,
                 email: Optional[_builtins.str] = None,
                 first_name: Optional[_builtins.str] = None,
                 is_valid_address: Optional[_builtins.bool] = None,
                 last_name: Optional[_builtins.str] = None,
                 middle_name: Optional[_builtins.str] = None,
                 phone_number: Optional[_builtins.str] = None,
                 postal_code: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None):
        """
        The address of the individual or organization that is responsible for the billing account.
        :param _builtins.str address_line1: Address line 1.
        :param _builtins.str country: Country code uses ISO 3166-1 Alpha-2 format.
        :param _builtins.str address_line2: Address line 2.
        :param _builtins.str address_line3: Address line 3.
        :param _builtins.str city: Address city.
        :param _builtins.str company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param _builtins.str district: Address district.
        :param _builtins.str email: Email address.
        :param _builtins.str first_name: First name. Optional for MCA Enterprise.
        :param _builtins.bool is_valid_address: Indicates if the address is incomplete.
        :param _builtins.str last_name: Last name. Optional for MCA Enterprise.
        :param _builtins.str middle_name: Middle name.
        :param _builtins.str phone_number: Phone number.
        :param _builtins.str postal_code: Postal code.
        :param _builtins.str region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> _builtins.str:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[_builtins.str]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @_builtins.property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[_builtins.str]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[_builtins.str]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter
    def district(self) -> Optional[_builtins.str]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[_builtins.str]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[_builtins.bool]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[_builtins.str]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[_builtins.str]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[_builtins.str]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @_builtins.property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[_builtins.str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Address region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class BillingRoleAssignmentPropertiesResponse(dict):
    """
    The properties of the billing role assignment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingAccountDisplayName":
            suggest = "billing_account_display_name"
        elif key == "billingAccountId":
            suggest = "billing_account_id"
        elif key == "billingProfileDisplayName":
            suggest = "billing_profile_display_name"
        elif key == "billingProfileId":
            suggest = "billing_profile_id"
        elif key == "billingRequestId":
            suggest = "billing_request_id"
        elif key == "createdByPrincipalId":
            suggest = "created_by_principal_id"
        elif key == "createdByPrincipalPuid":
            suggest = "created_by_principal_puid"
        elif key == "createdByPrincipalTenantId":
            suggest = "created_by_principal_tenant_id"
        elif key == "createdByUserEmailAddress":
            suggest = "created_by_user_email_address"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "customerDisplayName":
            suggest = "customer_display_name"
        elif key == "customerId":
            suggest = "customer_id"
        elif key == "invoiceSectionDisplayName":
            suggest = "invoice_section_display_name"
        elif key == "invoiceSectionId":
            suggest = "invoice_section_id"
        elif key == "modifiedByPrincipalId":
            suggest = "modified_by_principal_id"
        elif key == "modifiedByPrincipalPuid":
            suggest = "modified_by_principal_puid"
        elif key == "modifiedByPrincipalTenantId":
            suggest = "modified_by_principal_tenant_id"
        elif key == "modifiedByUserEmailAddress":
            suggest = "modified_by_user_email_address"
        elif key == "modifiedOn":
            suggest = "modified_on"
        elif key == "principalDisplayName":
            suggest = "principal_display_name"
        elif key == "principalTenantName":
            suggest = "principal_tenant_name"
        elif key == "principalType":
            suggest = "principal_type"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "roleDefinitionId":
            suggest = "role_definition_id"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "principalPuid":
            suggest = "principal_puid"
        elif key == "principalTenantId":
            suggest = "principal_tenant_id"
        elif key == "userAuthenticationType":
            suggest = "user_authentication_type"
        elif key == "userEmailAddress":
            suggest = "user_email_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingRoleAssignmentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingRoleAssignmentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingRoleAssignmentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_account_display_name: _builtins.str,
                 billing_account_id: _builtins.str,
                 billing_profile_display_name: _builtins.str,
                 billing_profile_id: _builtins.str,
                 billing_request_id: _builtins.str,
                 created_by_principal_id: _builtins.str,
                 created_by_principal_puid: _builtins.str,
                 created_by_principal_tenant_id: _builtins.str,
                 created_by_user_email_address: _builtins.str,
                 created_on: _builtins.str,
                 customer_display_name: _builtins.str,
                 customer_id: _builtins.str,
                 invoice_section_display_name: _builtins.str,
                 invoice_section_id: _builtins.str,
                 modified_by_principal_id: _builtins.str,
                 modified_by_principal_puid: _builtins.str,
                 modified_by_principal_tenant_id: _builtins.str,
                 modified_by_user_email_address: _builtins.str,
                 modified_on: _builtins.str,
                 principal_display_name: _builtins.str,
                 principal_tenant_name: _builtins.str,
                 principal_type: _builtins.str,
                 provisioning_state: _builtins.str,
                 role_definition_id: _builtins.str,
                 principal_id: Optional[_builtins.str] = None,
                 principal_puid: Optional[_builtins.str] = None,
                 principal_tenant_id: Optional[_builtins.str] = None,
                 scope: Optional[_builtins.str] = None,
                 user_authentication_type: Optional[_builtins.str] = None,
                 user_email_address: Optional[_builtins.str] = None):
        """
        The properties of the billing role assignment.
        :param _builtins.str billing_account_display_name: The name of the billing account.
        :param _builtins.str billing_account_id: The fully qualified ID that uniquely identifies a billing account.
        :param _builtins.str billing_profile_display_name: The name of the billing profile.
        :param _builtins.str billing_profile_id: The fully qualified ID that uniquely identifies a billing profile.
        :param _builtins.str billing_request_id: The ID of the billing request that was created for the role assignment. This is only applicable to cross tenant role assignments or role assignments created through the billing request.
        :param _builtins.str created_by_principal_id: The object ID of the user who created the role assignment.
        :param _builtins.str created_by_principal_puid: The principal PUID of the user who created the role assignment.
        :param _builtins.str created_by_principal_tenant_id: The tenant Id of the user who created the role assignment.
        :param _builtins.str created_by_user_email_address: The email address of the user who created the role assignment. This is supported only for billing accounts with agreement type Enterprise Agreement.
        :param _builtins.str created_on: The date the role assignment was created.
        :param _builtins.str customer_display_name: The name of the customer.
        :param _builtins.str customer_id: The fully qualified ID that uniquely identifies a customer.
        :param _builtins.str invoice_section_display_name: The name of the invoice section.
        :param _builtins.str invoice_section_id: The fully qualified ID that uniquely identifies an invoice section.
        :param _builtins.str modified_by_principal_id: The principal PUID of the user who modified the role assignment.
        :param _builtins.str modified_by_principal_puid: The principal PUID of the user who modified the role assignment.
        :param _builtins.str modified_by_principal_tenant_id: The tenant Id of the user who modified the role assignment.
        :param _builtins.str modified_by_user_email_address: The email address of the user who modified the role assignment. This is supported only for billing accounts with agreement type Enterprise Agreement.
        :param _builtins.str modified_on: The date the role assignment was modified.
        :param _builtins.str principal_display_name: The display name of the principal to whom the role was assigned.
        :param _builtins.str principal_tenant_name: The friendly name of the tenant of the user to whom the role was assigned. This will be 'Primary Tenant' for the primary tenant of the billing account.
        :param _builtins.str principal_type: The type of a role Assignment.
        :param _builtins.str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param _builtins.str role_definition_id: The ID of the role definition.
        :param _builtins.str principal_id: The object id of the user to whom the role was assigned.
        :param _builtins.str principal_puid: The principal PUID of the user to whom the role was assigned.
        :param _builtins.str principal_tenant_id: The principal tenant id of the user to whom the role was assigned.
        :param _builtins.str scope: The scope at which the role was assigned.
        :param _builtins.str user_authentication_type: The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        :param _builtins.str user_email_address: The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        pulumi.set(__self__, "billing_account_display_name", billing_account_display_name)
        pulumi.set(__self__, "billing_account_id", billing_account_id)
        pulumi.set(__self__, "billing_profile_display_name", billing_profile_display_name)
        pulumi.set(__self__, "billing_profile_id", billing_profile_id)
        pulumi.set(__self__, "billing_request_id", billing_request_id)
        pulumi.set(__self__, "created_by_principal_id", created_by_principal_id)
        pulumi.set(__self__, "created_by_principal_puid", created_by_principal_puid)
        pulumi.set(__self__, "created_by_principal_tenant_id", created_by_principal_tenant_id)
        pulumi.set(__self__, "created_by_user_email_address", created_by_user_email_address)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "customer_display_name", customer_display_name)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "invoice_section_display_name", invoice_section_display_name)
        pulumi.set(__self__, "invoice_section_id", invoice_section_id)
        pulumi.set(__self__, "modified_by_principal_id", modified_by_principal_id)
        pulumi.set(__self__, "modified_by_principal_puid", modified_by_principal_puid)
        pulumi.set(__self__, "modified_by_principal_tenant_id", modified_by_principal_tenant_id)
        pulumi.set(__self__, "modified_by_user_email_address", modified_by_user_email_address)
        pulumi.set(__self__, "modified_on", modified_on)
        pulumi.set(__self__, "principal_display_name", principal_display_name)
        pulumi.set(__self__, "principal_tenant_name", principal_tenant_name)
        pulumi.set(__self__, "principal_type", principal_type)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "role_definition_id", role_definition_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_puid is not None:
            pulumi.set(__self__, "principal_puid", principal_puid)
        if principal_tenant_id is not None:
            pulumi.set(__self__, "principal_tenant_id", principal_tenant_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if user_authentication_type is not None:
            pulumi.set(__self__, "user_authentication_type", user_authentication_type)
        if user_email_address is not None:
            pulumi.set(__self__, "user_email_address", user_email_address)

    @_builtins.property
    @pulumi.getter(name="billingAccountDisplayName")
    def billing_account_display_name(self) -> _builtins.str:
        """
        The name of the billing account.
        """
        return pulumi.get(self, "billing_account_display_name")

    @_builtins.property
    @pulumi.getter(name="billingAccountId")
    def billing_account_id(self) -> _builtins.str:
        """
        The fully qualified ID that uniquely identifies a billing account.
        """
        return pulumi.get(self, "billing_account_id")

    @_builtins.property
    @pulumi.getter(name="billingProfileDisplayName")
    def billing_profile_display_name(self) -> _builtins.str:
        """
        The name of the billing profile.
        """
        return pulumi.get(self, "billing_profile_display_name")

    @_builtins.property
    @pulumi.getter(name="billingProfileId")
    def billing_profile_id(self) -> _builtins.str:
        """
        The fully qualified ID that uniquely identifies a billing profile.
        """
        return pulumi.get(self, "billing_profile_id")

    @_builtins.property
    @pulumi.getter(name="billingRequestId")
    def billing_request_id(self) -> _builtins.str:
        """
        The ID of the billing request that was created for the role assignment. This is only applicable to cross tenant role assignments or role assignments created through the billing request.
        """
        return pulumi.get(self, "billing_request_id")

    @_builtins.property
    @pulumi.getter(name="createdByPrincipalId")
    def created_by_principal_id(self) -> _builtins.str:
        """
        The object ID of the user who created the role assignment.
        """
        return pulumi.get(self, "created_by_principal_id")

    @_builtins.property
    @pulumi.getter(name="createdByPrincipalPuid")
    def created_by_principal_puid(self) -> _builtins.str:
        """
        The principal PUID of the user who created the role assignment.
        """
        return pulumi.get(self, "created_by_principal_puid")

    @_builtins.property
    @pulumi.getter(name="createdByPrincipalTenantId")
    def created_by_principal_tenant_id(self) -> _builtins.str:
        """
        The tenant Id of the user who created the role assignment.
        """
        return pulumi.get(self, "created_by_principal_tenant_id")

    @_builtins.property
    @pulumi.getter(name="createdByUserEmailAddress")
    def created_by_user_email_address(self) -> _builtins.str:
        """
        The email address of the user who created the role assignment. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        return pulumi.get(self, "created_by_user_email_address")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        """
        The date the role assignment was created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="customerDisplayName")
    def customer_display_name(self) -> _builtins.str:
        """
        The name of the customer.
        """
        return pulumi.get(self, "customer_display_name")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        The fully qualified ID that uniquely identifies a customer.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter(name="invoiceSectionDisplayName")
    def invoice_section_display_name(self) -> _builtins.str:
        """
        The name of the invoice section.
        """
        return pulumi.get(self, "invoice_section_display_name")

    @_builtins.property
    @pulumi.getter(name="invoiceSectionId")
    def invoice_section_id(self) -> _builtins.str:
        """
        The fully qualified ID that uniquely identifies an invoice section.
        """
        return pulumi.get(self, "invoice_section_id")

    @_builtins.property
    @pulumi.getter(name="modifiedByPrincipalId")
    def modified_by_principal_id(self) -> _builtins.str:
        """
        The principal PUID of the user who modified the role assignment.
        """
        return pulumi.get(self, "modified_by_principal_id")

    @_builtins.property
    @pulumi.getter(name="modifiedByPrincipalPuid")
    def modified_by_principal_puid(self) -> _builtins.str:
        """
        The principal PUID of the user who modified the role assignment.
        """
        return pulumi.get(self, "modified_by_principal_puid")

    @_builtins.property
    @pulumi.getter(name="modifiedByPrincipalTenantId")
    def modified_by_principal_tenant_id(self) -> _builtins.str:
        """
        The tenant Id of the user who modified the role assignment.
        """
        return pulumi.get(self, "modified_by_principal_tenant_id")

    @_builtins.property
    @pulumi.getter(name="modifiedByUserEmailAddress")
    def modified_by_user_email_address(self) -> _builtins.str:
        """
        The email address of the user who modified the role assignment. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        return pulumi.get(self, "modified_by_user_email_address")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> _builtins.str:
        """
        The date the role assignment was modified.
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter(name="principalDisplayName")
    def principal_display_name(self) -> _builtins.str:
        """
        The display name of the principal to whom the role was assigned.
        """
        return pulumi.get(self, "principal_display_name")

    @_builtins.property
    @pulumi.getter(name="principalTenantName")
    def principal_tenant_name(self) -> _builtins.str:
        """
        The friendly name of the tenant of the user to whom the role was assigned. This will be 'Primary Tenant' for the primary tenant of the billing account.
        """
        return pulumi.get(self, "principal_tenant_name")

    @_builtins.property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> _builtins.str:
        """
        The type of a role Assignment.
        """
        return pulumi.get(self, "principal_type")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> _builtins.str:
        """
        The ID of the role definition.
        """
        return pulumi.get(self, "role_definition_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[_builtins.str]:
        """
        The object id of the user to whom the role was assigned.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="principalPuid")
    def principal_puid(self) -> Optional[_builtins.str]:
        """
        The principal PUID of the user to whom the role was assigned.
        """
        return pulumi.get(self, "principal_puid")

    @_builtins.property
    @pulumi.getter(name="principalTenantId")
    def principal_tenant_id(self) -> Optional[_builtins.str]:
        """
        The principal tenant id of the user to whom the role was assigned.
        """
        return pulumi.get(self, "principal_tenant_id")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.str]:
        """
        The scope at which the role was assigned.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="userAuthenticationType")
    def user_authentication_type(self) -> Optional[_builtins.str]:
        """
        The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        return pulumi.get(self, "user_authentication_type")

    @_builtins.property
    @pulumi.getter(name="userEmailAddress")
    def user_email_address(self) -> Optional[_builtins.str]:
        """
        The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
        """
        return pulumi.get(self, "user_email_address")


@pulumi.output_type
class InvoiceSectionPropertiesResponse(dict):
    """
    An invoice section.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemId":
            suggest = "system_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "reasonCode":
            suggest = "reason_code"
        elif key == "targetCloud":
            suggest = "target_cloud"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvoiceSectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvoiceSectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvoiceSectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 system_id: _builtins.str,
                 display_name: Optional[_builtins.str] = None,
                 reason_code: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None,
                 target_cloud: Optional[_builtins.str] = None):
        """
        An invoice section.
        :param _builtins.str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param _builtins.str system_id: The system generated unique identifier for an invoice section.
        :param _builtins.str display_name: The name of the invoice section.
        :param _builtins.str reason_code: Reason for the specified invoice section status.
        :param _builtins.str state: Identifies the status of an invoice section.
        :param Mapping[str, _builtins.str] tags: Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        :param _builtins.str target_cloud: Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "system_id", system_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_cloud is not None:
            pulumi.set(__self__, "target_cloud", target_cloud)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="systemId")
    def system_id(self) -> _builtins.str:
        """
        The system generated unique identifier for an invoice section.
        """
        return pulumi.get(self, "system_id")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The name of the invoice section.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[_builtins.str]:
        """
        Reason for the specified invoice section status.
        """
        return pulumi.get(self, "reason_code")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        Identifies the status of an invoice section.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetCloud")
    def target_cloud(self) -> Optional[_builtins.str]:
        """
        Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
        return pulumi.get(self, "target_cloud")


@pulumi.output_type
class InvoiceSectionWithCreateSubPermissionResponse(dict):
    """
    Invoice section properties with create subscription permission.
    """
    def __init__(__self__, *,
                 billing_profile_display_name: _builtins.str,
                 billing_profile_id: _builtins.str,
                 billing_profile_spending_limit: _builtins.str,
                 billing_profile_status: _builtins.str,
                 billing_profile_status_reason_code: _builtins.str,
                 billing_profile_system_id: _builtins.str,
                 enabled_azure_plans: Sequence['outputs.AzurePlanResponse'],
                 invoice_section_display_name: _builtins.str,
                 invoice_section_id: _builtins.str,
                 invoice_section_system_id: _builtins.str):
        """
        Invoice section properties with create subscription permission.
        :param _builtins.str billing_profile_display_name: The name of the billing profile.
        :param _builtins.str billing_profile_id: The fully qualified ID that uniquely identifies a billing profile.
        :param _builtins.str billing_profile_spending_limit: The billing profile spending limit.
        :param _builtins.str billing_profile_status: The status of the billing profile.
        :param _builtins.str billing_profile_status_reason_code: Reason for the specified billing profile status.
        :param _builtins.str billing_profile_system_id: The system generated unique identifier for a billing profile.
        :param Sequence['AzurePlanResponse'] enabled_azure_plans: Enabled azure plans for the associated billing profile.
        :param _builtins.str invoice_section_display_name: The name of the invoice section.
        :param _builtins.str invoice_section_id: The fully qualified ID that uniquely identifies an invoice section.
        :param _builtins.str invoice_section_system_id: The system generated unique identifier for an invoice section.
        """
        pulumi.set(__self__, "billing_profile_display_name", billing_profile_display_name)
        pulumi.set(__self__, "billing_profile_id", billing_profile_id)
        pulumi.set(__self__, "billing_profile_spending_limit", billing_profile_spending_limit)
        pulumi.set(__self__, "billing_profile_status", billing_profile_status)
        pulumi.set(__self__, "billing_profile_status_reason_code", billing_profile_status_reason_code)
        pulumi.set(__self__, "billing_profile_system_id", billing_profile_system_id)
        pulumi.set(__self__, "enabled_azure_plans", enabled_azure_plans)
        pulumi.set(__self__, "invoice_section_display_name", invoice_section_display_name)
        pulumi.set(__self__, "invoice_section_id", invoice_section_id)
        pulumi.set(__self__, "invoice_section_system_id", invoice_section_system_id)

    @_builtins.property
    @pulumi.getter(name="billingProfileDisplayName")
    def billing_profile_display_name(self) -> _builtins.str:
        """
        The name of the billing profile.
        """
        return pulumi.get(self, "billing_profile_display_name")

    @_builtins.property
    @pulumi.getter(name="billingProfileId")
    def billing_profile_id(self) -> _builtins.str:
        """
        The fully qualified ID that uniquely identifies a billing profile.
        """
        return pulumi.get(self, "billing_profile_id")

    @_builtins.property
    @pulumi.getter(name="billingProfileSpendingLimit")
    def billing_profile_spending_limit(self) -> _builtins.str:
        """
        The billing profile spending limit.
        """
        return pulumi.get(self, "billing_profile_spending_limit")

    @_builtins.property
    @pulumi.getter(name="billingProfileStatus")
    def billing_profile_status(self) -> _builtins.str:
        """
        The status of the billing profile.
        """
        return pulumi.get(self, "billing_profile_status")

    @_builtins.property
    @pulumi.getter(name="billingProfileStatusReasonCode")
    def billing_profile_status_reason_code(self) -> _builtins.str:
        """
        Reason for the specified billing profile status.
        """
        return pulumi.get(self, "billing_profile_status_reason_code")

    @_builtins.property
    @pulumi.getter(name="billingProfileSystemId")
    def billing_profile_system_id(self) -> _builtins.str:
        """
        The system generated unique identifier for a billing profile.
        """
        return pulumi.get(self, "billing_profile_system_id")

    @_builtins.property
    @pulumi.getter(name="enabledAzurePlans")
    def enabled_azure_plans(self) -> Sequence['outputs.AzurePlanResponse']:
        """
        Enabled azure plans for the associated billing profile.
        """
        return pulumi.get(self, "enabled_azure_plans")

    @_builtins.property
    @pulumi.getter(name="invoiceSectionDisplayName")
    def invoice_section_display_name(self) -> _builtins.str:
        """
        The name of the invoice section.
        """
        return pulumi.get(self, "invoice_section_display_name")

    @_builtins.property
    @pulumi.getter(name="invoiceSectionId")
    def invoice_section_id(self) -> _builtins.str:
        """
        The fully qualified ID that uniquely identifies an invoice section.
        """
        return pulumi.get(self, "invoice_section_id")

    @_builtins.property
    @pulumi.getter(name="invoiceSectionSystemId")
    def invoice_section_system_id(self) -> _builtins.str:
        """
        The system generated unique identifier for an invoice section.
        """
        return pulumi.get(self, "invoice_section_system_id")


@pulumi.output_type
class PaymentTermResponse(dict):
    """
    The properties of payment term.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PaymentTermResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PaymentTermResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PaymentTermResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_default: _builtins.bool,
                 end_date: Optional[_builtins.str] = None,
                 start_date: Optional[_builtins.str] = None,
                 term: Optional[_builtins.str] = None):
        """
        The properties of payment term.
        :param _builtins.bool is_default: Indicates payment term is the standard payment term.
        :param _builtins.str end_date: The date on when the defined 'Payment Term' will end and is always in UTC.
        :param _builtins.str start_date: The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        :param _builtins.str term: Represents duration in netXX format. Always in days.
        """
        pulumi.set(__self__, "is_default", is_default)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if term is not None:
            pulumi.set(__self__, "term", term)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        """
        Indicates payment term is the standard payment term.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        The date on when the defined 'Payment Term' will end and is always in UTC.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.str]:
        """
        The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def term(self) -> Optional[_builtins.str]:
        """
        Represents duration in netXX format. Always in days.
        """
        return pulumi.get(self, "term")


@pulumi.output_type
class SpendingLimitDetailsResponse(dict):
    """
    The billing profile spending limit.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpendingLimitDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpendingLimitDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpendingLimitDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amount: Optional[_builtins.float] = None,
                 currency: Optional[_builtins.str] = None,
                 end_date: Optional[_builtins.str] = None,
                 start_date: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        The billing profile spending limit.
        :param _builtins.float amount: The initial amount for the billing profile.
        :param _builtins.str currency: The currency in which the charges for the billing profile are billed.
        :param _builtins.str end_date: The date when this spending limit is no longer in effect.
        :param _builtins.str start_date: The date when this spending limit goes into effect.
        :param _builtins.str status: The status of current spending limit.
        :param _builtins.str type: The type of spending limit.
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def amount(self) -> Optional[_builtins.float]:
        """
        The initial amount for the billing profile.
        """
        return pulumi.get(self, "amount")

    @_builtins.property
    @pulumi.getter
    def currency(self) -> Optional[_builtins.str]:
        """
        The currency in which the charges for the billing profile are billed.
        """
        return pulumi.get(self, "currency")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        The date when this spending limit is no longer in effect.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.str]:
        """
        The date when this spending limit goes into effect.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of current spending limit.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of spending limit.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


