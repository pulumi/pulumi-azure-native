# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssociatedTenantPropertiesResponse',
    'AzurePlanResponse',
    'BillingProfilePropertiesResponse',
    'BillingProfilePropertiesResponseBillTo',
    'BillingProfilePropertiesResponseCurrentPaymentTerm',
    'BillingProfilePropertiesResponseIndirectRelationshipInfo',
    'BillingProfilePropertiesResponseShipTo',
    'BillingProfilePropertiesResponseSoldTo',
    'InvoiceSectionPropertiesResponse',
    'InvoiceSectionWithCreateSubPermissionResponse',
    'PaymentTermResponse',
    'SpendingLimitDetailsResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AssociatedTenantPropertiesResponse(dict):
    """
    An associated tenant.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningBillingRequestId":
            suggest = "provisioning_billing_request_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "billingManagementState":
            suggest = "billing_management_state"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "provisioningManagementState":
            suggest = "provisioning_management_state"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssociatedTenantPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssociatedTenantPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssociatedTenantPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_billing_request_id: str,
                 provisioning_state: str,
                 billing_management_state: Optional[str] = None,
                 display_name: Optional[str] = None,
                 provisioning_management_state: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        An associated tenant.
        :param str provisioning_billing_request_id: The unique identifier for the billing request that is created when enabling provisioning for an associated tenant.
        :param str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param str billing_management_state: The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        :param str display_name: The name of the associated tenant.
        :param str provisioning_management_state: The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        :param str tenant_id: The ID that uniquely identifies a tenant.
        """
        pulumi.set(__self__, "provisioning_billing_request_id", provisioning_billing_request_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if billing_management_state is not None:
            pulumi.set(__self__, "billing_management_state", billing_management_state)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if provisioning_management_state is not None:
            pulumi.set(__self__, "provisioning_management_state", provisioning_management_state)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="provisioningBillingRequestId")
    def provisioning_billing_request_id(self) -> str:
        """
        The unique identifier for the billing request that is created when enabling provisioning for an associated tenant.
        """
        return pulumi.get(self, "provisioning_billing_request_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="billingManagementState")
    def billing_management_state(self) -> Optional[str]:
        """
        The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
        """
        return pulumi.get(self, "billing_management_state")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the associated tenant.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="provisioningManagementState")
    def provisioning_management_state(self) -> Optional[str]:
        """
        The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
        """
        return pulumi.get(self, "provisioning_management_state")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The ID that uniquely identifies a tenant.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class AzurePlanResponse(dict):
    """
    Details of the Azure plan.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "skuDescription":
            suggest = "sku_description"
        elif key == "productId":
            suggest = "product_id"
        elif key == "skuId":
            suggest = "sku_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzurePlanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzurePlanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzurePlanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sku_description: str,
                 product_id: Optional[str] = None,
                 sku_id: Optional[str] = None):
        """
        Details of the Azure plan.
        :param str sku_description: The sku description.
        :param str product_id: The ID that uniquely identifies a product.
        :param str sku_id: The sku id.
        """
        pulumi.set(__self__, "sku_description", sku_description)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if sku_id is not None:
            pulumi.set(__self__, "sku_id", sku_id)

    @property
    @pulumi.getter(name="skuDescription")
    def sku_description(self) -> str:
        """
        The sku description.
        """
        return pulumi.get(self, "sku_description")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[str]:
        """
        The ID that uniquely identifies a product.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="skuId")
    def sku_id(self) -> Optional[str]:
        """
        The sku id.
        """
        return pulumi.get(self, "sku_id")


@pulumi.output_type
class BillingProfilePropertiesResponse(dict):
    """
    A billing profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingRelationshipType":
            suggest = "billing_relationship_type"
        elif key == "hasReadAccess":
            suggest = "has_read_access"
        elif key == "invoiceDay":
            suggest = "invoice_day"
        elif key == "otherPaymentTerms":
            suggest = "other_payment_terms"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "spendingLimit":
            suggest = "spending_limit"
        elif key == "spendingLimitDetails":
            suggest = "spending_limit_details"
        elif key == "statusReasonCode":
            suggest = "status_reason_code"
        elif key == "systemId":
            suggest = "system_id"
        elif key == "targetClouds":
            suggest = "target_clouds"
        elif key == "billTo":
            suggest = "bill_to"
        elif key == "currentPaymentTerm":
            suggest = "current_payment_term"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "enabledAzurePlans":
            suggest = "enabled_azure_plans"
        elif key == "indirectRelationshipInfo":
            suggest = "indirect_relationship_info"
        elif key == "invoiceEmailOptIn":
            suggest = "invoice_email_opt_in"
        elif key == "invoiceRecipients":
            suggest = "invoice_recipients"
        elif key == "poNumber":
            suggest = "po_number"
        elif key == "shipTo":
            suggest = "ship_to"
        elif key == "soldTo":
            suggest = "sold_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_relationship_type: str,
                 currency: str,
                 has_read_access: bool,
                 invoice_day: int,
                 other_payment_terms: Sequence['outputs.PaymentTermResponse'],
                 provisioning_state: str,
                 spending_limit: str,
                 spending_limit_details: Sequence['outputs.SpendingLimitDetailsResponse'],
                 status: str,
                 status_reason_code: str,
                 system_id: str,
                 target_clouds: Sequence[str],
                 bill_to: Optional['outputs.BillingProfilePropertiesResponseBillTo'] = None,
                 current_payment_term: Optional['outputs.BillingProfilePropertiesResponseCurrentPaymentTerm'] = None,
                 display_name: Optional[str] = None,
                 enabled_azure_plans: Optional[Sequence['outputs.AzurePlanResponse']] = None,
                 indirect_relationship_info: Optional['outputs.BillingProfilePropertiesResponseIndirectRelationshipInfo'] = None,
                 invoice_email_opt_in: Optional[bool] = None,
                 invoice_recipients: Optional[Sequence[str]] = None,
                 po_number: Optional[str] = None,
                 ship_to: Optional['outputs.BillingProfilePropertiesResponseShipTo'] = None,
                 sold_to: Optional['outputs.BillingProfilePropertiesResponseSoldTo'] = None,
                 tags: Optional[Mapping[str, str]] = None):
        """
        A billing profile.
        :param str billing_relationship_type: Identifies the billing relationship represented by the billing profile. The billing relationship may be between Microsoft, the customer, and/or a third-party.
        :param str currency: The currency in which the charges for the billing profile are billed.
        :param bool has_read_access: Indicates whether user has read access to the billing profile.
        :param int invoice_day: The day of the month when the invoice for the billing profile is generated.
        :param Sequence['PaymentTermResponse'] other_payment_terms: The other payment terms of the billing profile.
        :param str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param str spending_limit: The billing profile spending limit.
        :param Sequence['SpendingLimitDetailsResponse'] spending_limit_details: The details of billing profile spending limit.
        :param str status: The status of the billing profile.
        :param str status_reason_code: Reason for the specified billing profile status.
        :param str system_id: The system generated unique identifier for a billing profile.
        :param Sequence[str] target_clouds: Identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as the billing profile gets associated with accounts in various clouds.
        :param 'BillingProfilePropertiesResponseBillTo' bill_to: Billing address.
        :param 'BillingProfilePropertiesResponseCurrentPaymentTerm' current_payment_term: The current payment term of the billing profile.
        :param str display_name: The name of the billing profile.
        :param Sequence['AzurePlanResponse'] enabled_azure_plans: Information about the enabled azure plans.
        :param 'BillingProfilePropertiesResponseIndirectRelationshipInfo' indirect_relationship_info: Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        :param bool invoice_email_opt_in: Flag controlling whether the invoices for the billing profile are sent through email.
        :param Sequence[str] invoice_recipients: The list of email addresses to receive invoices by email for the billing profile.
        :param str po_number: The default purchase order number that will appear on the invoices generated for the billing profile.
        :param 'BillingProfilePropertiesResponseShipTo' ship_to: The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        :param 'BillingProfilePropertiesResponseSoldTo' sold_to: The address of the individual or organization that is responsible for the billing account.
        :param Mapping[str, str] tags: Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        pulumi.set(__self__, "billing_relationship_type", billing_relationship_type)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "has_read_access", has_read_access)
        pulumi.set(__self__, "invoice_day", invoice_day)
        pulumi.set(__self__, "other_payment_terms", other_payment_terms)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "spending_limit", spending_limit)
        pulumi.set(__self__, "spending_limit_details", spending_limit_details)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_reason_code", status_reason_code)
        pulumi.set(__self__, "system_id", system_id)
        pulumi.set(__self__, "target_clouds", target_clouds)
        if bill_to is not None:
            pulumi.set(__self__, "bill_to", bill_to)
        if current_payment_term is not None:
            pulumi.set(__self__, "current_payment_term", current_payment_term)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled_azure_plans is not None:
            pulumi.set(__self__, "enabled_azure_plans", enabled_azure_plans)
        if indirect_relationship_info is not None:
            pulumi.set(__self__, "indirect_relationship_info", indirect_relationship_info)
        if invoice_email_opt_in is not None:
            pulumi.set(__self__, "invoice_email_opt_in", invoice_email_opt_in)
        if invoice_recipients is not None:
            pulumi.set(__self__, "invoice_recipients", invoice_recipients)
        if po_number is not None:
            pulumi.set(__self__, "po_number", po_number)
        if ship_to is not None:
            pulumi.set(__self__, "ship_to", ship_to)
        if sold_to is not None:
            pulumi.set(__self__, "sold_to", sold_to)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="billingRelationshipType")
    def billing_relationship_type(self) -> str:
        """
        Identifies the billing relationship represented by the billing profile. The billing relationship may be between Microsoft, the customer, and/or a third-party.
        """
        return pulumi.get(self, "billing_relationship_type")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        The currency in which the charges for the billing profile are billed.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="hasReadAccess")
    def has_read_access(self) -> bool:
        """
        Indicates whether user has read access to the billing profile.
        """
        return pulumi.get(self, "has_read_access")

    @property
    @pulumi.getter(name="invoiceDay")
    def invoice_day(self) -> int:
        """
        The day of the month when the invoice for the billing profile is generated.
        """
        return pulumi.get(self, "invoice_day")

    @property
    @pulumi.getter(name="otherPaymentTerms")
    def other_payment_terms(self) -> Sequence['outputs.PaymentTermResponse']:
        """
        The other payment terms of the billing profile.
        """
        return pulumi.get(self, "other_payment_terms")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="spendingLimit")
    def spending_limit(self) -> str:
        """
        The billing profile spending limit.
        """
        return pulumi.get(self, "spending_limit")

    @property
    @pulumi.getter(name="spendingLimitDetails")
    def spending_limit_details(self) -> Sequence['outputs.SpendingLimitDetailsResponse']:
        """
        The details of billing profile spending limit.
        """
        return pulumi.get(self, "spending_limit_details")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the billing profile.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReasonCode")
    def status_reason_code(self) -> str:
        """
        Reason for the specified billing profile status.
        """
        return pulumi.get(self, "status_reason_code")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        """
        The system generated unique identifier for a billing profile.
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter(name="targetClouds")
    def target_clouds(self) -> Sequence[str]:
        """
        Identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as the billing profile gets associated with accounts in various clouds.
        """
        return pulumi.get(self, "target_clouds")

    @property
    @pulumi.getter(name="billTo")
    def bill_to(self) -> Optional['outputs.BillingProfilePropertiesResponseBillTo']:
        """
        Billing address.
        """
        return pulumi.get(self, "bill_to")

    @property
    @pulumi.getter(name="currentPaymentTerm")
    def current_payment_term(self) -> Optional['outputs.BillingProfilePropertiesResponseCurrentPaymentTerm']:
        """
        The current payment term of the billing profile.
        """
        return pulumi.get(self, "current_payment_term")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the billing profile.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enabledAzurePlans")
    def enabled_azure_plans(self) -> Optional[Sequence['outputs.AzurePlanResponse']]:
        """
        Information about the enabled azure plans.
        """
        return pulumi.get(self, "enabled_azure_plans")

    @property
    @pulumi.getter(name="indirectRelationshipInfo")
    def indirect_relationship_info(self) -> Optional['outputs.BillingProfilePropertiesResponseIndirectRelationshipInfo']:
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        """
        return pulumi.get(self, "indirect_relationship_info")

    @property
    @pulumi.getter(name="invoiceEmailOptIn")
    def invoice_email_opt_in(self) -> Optional[bool]:
        """
        Flag controlling whether the invoices for the billing profile are sent through email.
        """
        return pulumi.get(self, "invoice_email_opt_in")

    @property
    @pulumi.getter(name="invoiceRecipients")
    def invoice_recipients(self) -> Optional[Sequence[str]]:
        """
        The list of email addresses to receive invoices by email for the billing profile.
        """
        return pulumi.get(self, "invoice_recipients")

    @property
    @pulumi.getter(name="poNumber")
    def po_number(self) -> Optional[str]:
        """
        The default purchase order number that will appear on the invoices generated for the billing profile.
        """
        return pulumi.get(self, "po_number")

    @property
    @pulumi.getter(name="shipTo")
    def ship_to(self) -> Optional['outputs.BillingProfilePropertiesResponseShipTo']:
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        """
        return pulumi.get(self, "ship_to")

    @property
    @pulumi.getter(name="soldTo")
    def sold_to(self) -> Optional['outputs.BillingProfilePropertiesResponseSoldTo']:
        """
        The address of the individual or organization that is responsible for the billing account.
        """
        return pulumi.get(self, "sold_to")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class BillingProfilePropertiesResponseBillTo(dict):
    """
    Billing address.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLine1":
            suggest = "address_line1"
        elif key == "addressLine2":
            suggest = "address_line2"
        elif key == "addressLine3":
            suggest = "address_line3"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "isValidAddress":
            suggest = "is_valid_address"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseBillTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseBillTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseBillTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line1: str,
                 country: str,
                 address_line2: Optional[str] = None,
                 address_line3: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 district: Optional[str] = None,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 is_valid_address: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None):
        """
        Billing address.
        :param str address_line1: Address line 1.
        :param str country: Country code uses ISO 3166-1 Alpha-2 format.
        :param str address_line2: Address line 2.
        :param str address_line3: Address line 3.
        :param str city: Address city.
        :param str company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param str district: Address district.
        :param str email: Email address.
        :param str first_name: First name. Optional for MCA Enterprise.
        :param bool is_valid_address: Indicates if the address is incomplete.
        :param str last_name: Last name. Optional for MCA Enterprise.
        :param str middle_name: Middle name.
        :param str phone_number: Phone number.
        :param str postal_code: Postal code.
        :param str region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> str:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[str]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[str]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter
    def district(self) -> Optional[str]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[bool]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Address region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class BillingProfilePropertiesResponseCurrentPaymentTerm(dict):
    """
    The current payment term of the billing profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseCurrentPaymentTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseCurrentPaymentTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseCurrentPaymentTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_default: bool,
                 end_date: Optional[str] = None,
                 start_date: Optional[str] = None,
                 term: Optional[str] = None):
        """
        The current payment term of the billing profile.
        :param bool is_default: Indicates payment term is the standard payment term.
        :param str end_date: The date on when the defined 'Payment Term' will end and is always in UTC.
        :param str start_date: The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        :param str term: Represents duration in netXX format. Always in days.
        """
        pulumi.set(__self__, "is_default", is_default)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if term is not None:
            pulumi.set(__self__, "term", term)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates payment term is the standard payment term.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        """
        The date on when the defined 'Payment Term' will end and is always in UTC.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        """
        The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def term(self) -> Optional[str]:
        """
        Represents duration in netXX format. Always in days.
        """
        return pulumi.get(self, "term")


@pulumi.output_type
class BillingProfilePropertiesResponseIndirectRelationshipInfo(dict):
    """
    Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingAccountName":
            suggest = "billing_account_name"
        elif key == "billingProfileName":
            suggest = "billing_profile_name"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseIndirectRelationshipInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseIndirectRelationshipInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseIndirectRelationshipInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_account_name: Optional[str] = None,
                 billing_profile_name: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
        :param str billing_account_name: The billing account name of the partner or the customer for an indirect motion.
        :param str billing_profile_name: The billing profile name of the partner or the customer for an indirect motion.
        :param str display_name: The display name of the partner or customer for an indirect motion.
        """
        if billing_account_name is not None:
            pulumi.set(__self__, "billing_account_name", billing_account_name)
        if billing_profile_name is not None:
            pulumi.set(__self__, "billing_profile_name", billing_profile_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="billingAccountName")
    def billing_account_name(self) -> Optional[str]:
        """
        The billing account name of the partner or the customer for an indirect motion.
        """
        return pulumi.get(self, "billing_account_name")

    @property
    @pulumi.getter(name="billingProfileName")
    def billing_profile_name(self) -> Optional[str]:
        """
        The billing profile name of the partner or the customer for an indirect motion.
        """
        return pulumi.get(self, "billing_profile_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the partner or customer for an indirect motion.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class BillingProfilePropertiesResponseShipTo(dict):
    """
    The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLine1":
            suggest = "address_line1"
        elif key == "addressLine2":
            suggest = "address_line2"
        elif key == "addressLine3":
            suggest = "address_line3"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "isValidAddress":
            suggest = "is_valid_address"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseShipTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseShipTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseShipTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line1: str,
                 country: str,
                 address_line2: Optional[str] = None,
                 address_line3: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 district: Optional[str] = None,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 is_valid_address: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None):
        """
        The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.
        :param str address_line1: Address line 1.
        :param str country: Country code uses ISO 3166-1 Alpha-2 format.
        :param str address_line2: Address line 2.
        :param str address_line3: Address line 3.
        :param str city: Address city.
        :param str company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param str district: Address district.
        :param str email: Email address.
        :param str first_name: First name. Optional for MCA Enterprise.
        :param bool is_valid_address: Indicates if the address is incomplete.
        :param str last_name: Last name. Optional for MCA Enterprise.
        :param str middle_name: Middle name.
        :param str phone_number: Phone number.
        :param str postal_code: Postal code.
        :param str region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> str:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[str]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[str]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter
    def district(self) -> Optional[str]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[bool]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Address region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class BillingProfilePropertiesResponseSoldTo(dict):
    """
    The address of the individual or organization that is responsible for the billing account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLine1":
            suggest = "address_line1"
        elif key == "addressLine2":
            suggest = "address_line2"
        elif key == "addressLine3":
            suggest = "address_line3"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "isValidAddress":
            suggest = "is_valid_address"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingProfilePropertiesResponseSoldTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingProfilePropertiesResponseSoldTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingProfilePropertiesResponseSoldTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line1: str,
                 country: str,
                 address_line2: Optional[str] = None,
                 address_line3: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 district: Optional[str] = None,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 is_valid_address: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None):
        """
        The address of the individual or organization that is responsible for the billing account.
        :param str address_line1: Address line 1.
        :param str country: Country code uses ISO 3166-1 Alpha-2 format.
        :param str address_line2: Address line 2.
        :param str address_line3: Address line 3.
        :param str city: Address city.
        :param str company_name: Company name. Optional for MCA Individual (Pay-as-you-go).
        :param str district: Address district.
        :param str email: Email address.
        :param str first_name: First name. Optional for MCA Enterprise.
        :param bool is_valid_address: Indicates if the address is incomplete.
        :param str last_name: Last name. Optional for MCA Enterprise.
        :param str middle_name: Middle name.
        :param str phone_number: Phone number.
        :param str postal_code: Postal code.
        :param str region: Address region.
        """
        pulumi.set(__self__, "address_line1", address_line1)
        pulumi.set(__self__, "country", country)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if district is not None:
            pulumi.set(__self__, "district", district)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_valid_address is not None:
            pulumi.set(__self__, "is_valid_address", is_valid_address)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> str:
        """
        Address line 1.
        """
        return pulumi.get(self, "address_line1")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Country code uses ISO 3166-1 Alpha-2 format.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[str]:
        """
        Address line 2.
        """
        return pulumi.get(self, "address_line2")

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[str]:
        """
        Address line 3.
        """
        return pulumi.get(self, "address_line3")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        Address city.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        Company name. Optional for MCA Individual (Pay-as-you-go).
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter
    def district(self) -> Optional[str]:
        """
        Address district.
        """
        return pulumi.get(self, "district")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        First name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="isValidAddress")
    def is_valid_address(self) -> Optional[bool]:
        """
        Indicates if the address is incomplete.
        """
        return pulumi.get(self, "is_valid_address")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        Last name. Optional for MCA Enterprise.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        """
        Middle name.
        """
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        """
        Phone number.
        """
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Address region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class InvoiceSectionPropertiesResponse(dict):
    """
    An invoice section.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "systemId":
            suggest = "system_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "reasonCode":
            suggest = "reason_code"
        elif key == "targetCloud":
            suggest = "target_cloud"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvoiceSectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvoiceSectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvoiceSectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: str,
                 system_id: str,
                 display_name: Optional[str] = None,
                 reason_code: Optional[str] = None,
                 state: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 target_cloud: Optional[str] = None):
        """
        An invoice section.
        :param str provisioning_state: The provisioning state of the resource during a long-running operation.
        :param str system_id: The system generated unique identifier for an invoice section.
        :param str display_name: The name of the invoice section.
        :param str reason_code: Reason for the specified invoice section status.
        :param str state: Identifies the status of an invoice section.
        :param Mapping[str, str] tags: Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        :param str target_cloud: Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "system_id", system_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_cloud is not None:
            pulumi.set(__self__, "target_cloud", target_cloud)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource during a long-running operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        """
        The system generated unique identifier for an invoice section.
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the invoice section.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[str]:
        """
        Reason for the specified invoice section status.
        """
        return pulumi.get(self, "reason_code")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Identifies the status of an invoice section.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetCloud")
    def target_cloud(self) -> Optional[str]:
        """
        Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
        """
        return pulumi.get(self, "target_cloud")


@pulumi.output_type
class InvoiceSectionWithCreateSubPermissionResponse(dict):
    """
    Invoice section properties with create subscription permission.
    """
    def __init__(__self__, *,
                 billing_profile_display_name: str,
                 billing_profile_id: str,
                 billing_profile_spending_limit: str,
                 billing_profile_status: str,
                 billing_profile_status_reason_code: str,
                 billing_profile_system_id: str,
                 invoice_section_display_name: str,
                 invoice_section_id: str,
                 invoice_section_system_id: str,
                 enabled_azure_plans: Optional[Sequence['outputs.AzurePlanResponse']] = None):
        """
        Invoice section properties with create subscription permission.
        :param str billing_profile_display_name: The name of the billing profile for the invoice section.
        :param str billing_profile_id: The ID of the billing profile for the invoice section.
        :param str billing_profile_spending_limit: The billing profile spending limit.
        :param str billing_profile_status: The status of the billing profile.
        :param str billing_profile_status_reason_code: Reason for the specified billing profile status.
        :param str billing_profile_system_id: The system generated unique identifier for a billing profile.
        :param str invoice_section_display_name: The name of the invoice section.
        :param str invoice_section_id: The ID of the invoice section.
        :param str invoice_section_system_id: The system generated unique identifier for an invoice section.
        :param Sequence['AzurePlanResponse'] enabled_azure_plans: Enabled azure plans for the associated billing profile.
        """
        pulumi.set(__self__, "billing_profile_display_name", billing_profile_display_name)
        pulumi.set(__self__, "billing_profile_id", billing_profile_id)
        pulumi.set(__self__, "billing_profile_spending_limit", billing_profile_spending_limit)
        pulumi.set(__self__, "billing_profile_status", billing_profile_status)
        pulumi.set(__self__, "billing_profile_status_reason_code", billing_profile_status_reason_code)
        pulumi.set(__self__, "billing_profile_system_id", billing_profile_system_id)
        pulumi.set(__self__, "invoice_section_display_name", invoice_section_display_name)
        pulumi.set(__self__, "invoice_section_id", invoice_section_id)
        pulumi.set(__self__, "invoice_section_system_id", invoice_section_system_id)
        if enabled_azure_plans is not None:
            pulumi.set(__self__, "enabled_azure_plans", enabled_azure_plans)

    @property
    @pulumi.getter(name="billingProfileDisplayName")
    def billing_profile_display_name(self) -> str:
        """
        The name of the billing profile for the invoice section.
        """
        return pulumi.get(self, "billing_profile_display_name")

    @property
    @pulumi.getter(name="billingProfileId")
    def billing_profile_id(self) -> str:
        """
        The ID of the billing profile for the invoice section.
        """
        return pulumi.get(self, "billing_profile_id")

    @property
    @pulumi.getter(name="billingProfileSpendingLimit")
    def billing_profile_spending_limit(self) -> str:
        """
        The billing profile spending limit.
        """
        return pulumi.get(self, "billing_profile_spending_limit")

    @property
    @pulumi.getter(name="billingProfileStatus")
    def billing_profile_status(self) -> str:
        """
        The status of the billing profile.
        """
        return pulumi.get(self, "billing_profile_status")

    @property
    @pulumi.getter(name="billingProfileStatusReasonCode")
    def billing_profile_status_reason_code(self) -> str:
        """
        Reason for the specified billing profile status.
        """
        return pulumi.get(self, "billing_profile_status_reason_code")

    @property
    @pulumi.getter(name="billingProfileSystemId")
    def billing_profile_system_id(self) -> str:
        """
        The system generated unique identifier for a billing profile.
        """
        return pulumi.get(self, "billing_profile_system_id")

    @property
    @pulumi.getter(name="invoiceSectionDisplayName")
    def invoice_section_display_name(self) -> str:
        """
        The name of the invoice section.
        """
        return pulumi.get(self, "invoice_section_display_name")

    @property
    @pulumi.getter(name="invoiceSectionId")
    def invoice_section_id(self) -> str:
        """
        The ID of the invoice section.
        """
        return pulumi.get(self, "invoice_section_id")

    @property
    @pulumi.getter(name="invoiceSectionSystemId")
    def invoice_section_system_id(self) -> str:
        """
        The system generated unique identifier for an invoice section.
        """
        return pulumi.get(self, "invoice_section_system_id")

    @property
    @pulumi.getter(name="enabledAzurePlans")
    def enabled_azure_plans(self) -> Optional[Sequence['outputs.AzurePlanResponse']]:
        """
        Enabled azure plans for the associated billing profile.
        """
        return pulumi.get(self, "enabled_azure_plans")


@pulumi.output_type
class PaymentTermResponse(dict):
    """
    The properties of payment term.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PaymentTermResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PaymentTermResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PaymentTermResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_default: bool,
                 end_date: Optional[str] = None,
                 start_date: Optional[str] = None,
                 term: Optional[str] = None):
        """
        The properties of payment term.
        :param bool is_default: Indicates payment term is the standard payment term.
        :param str end_date: The date on when the defined 'Payment Term' will end and is always in UTC.
        :param str start_date: The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        :param str term: Represents duration in netXX format. Always in days.
        """
        pulumi.set(__self__, "is_default", is_default)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if term is not None:
            pulumi.set(__self__, "term", term)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates payment term is the standard payment term.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        """
        The date on when the defined 'Payment Term' will end and is always in UTC.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        """
        The date on when the defined 'Payment Term' will be effective from and is always in UTC.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def term(self) -> Optional[str]:
        """
        Represents duration in netXX format. Always in days.
        """
        return pulumi.get(self, "term")


@pulumi.output_type
class SpendingLimitDetailsResponse(dict):
    """
    The billing profile spending limit.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpendingLimitDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpendingLimitDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpendingLimitDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amount: Optional[float] = None,
                 currency: Optional[str] = None,
                 end_date: Optional[str] = None,
                 start_date: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The billing profile spending limit.
        :param float amount: The initial amount for the billing profile.
        :param str currency: The currency in which the charges for the billing profile are billed.
        :param str end_date: The date when this spending limit is no longer in effect.
        :param str start_date: The date when this spending limit goes into effect.
        :param str status: The status of current spending limit.
        :param str type: The type of spending limit.
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def amount(self) -> Optional[float]:
        """
        The initial amount for the billing profile.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        """
        The currency in which the charges for the billing profile are billed.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        """
        The date when this spending limit is no longer in effect.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        """
        The date when this spending limit goes into effect.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of current spending limit.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of spending limit.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


