# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ScalingPlanPersonalScheduleArgs', 'ScalingPlanPersonalSchedule']

@pulumi.input_type
class ScalingPlanPersonalScheduleArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 scaling_plan_name: pulumi.Input[str],
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]]] = None,
                 off_peak_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 off_peak_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 off_peak_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 off_peak_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 off_peak_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 off_peak_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 peak_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 peak_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 peak_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 peak_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 peak_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 peak_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 ramp_down_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_down_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_down_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 ramp_down_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 ramp_down_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 ramp_down_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 ramp_up_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_up_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_up_auto_start_hosts: Optional[pulumi.Input[Union[str, 'StartupBehavior']]] = None,
                 ramp_up_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 ramp_up_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 ramp_up_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 ramp_up_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 scaling_plan_schedule_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ScalingPlanPersonalSchedule resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] scaling_plan_name: The name of the scaling plan.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]] days_of_week: Set of days of the week on which this schedule is active.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] off_peak_action_on_disconnect: Action to be taken after a user disconnect during the off-peak period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] off_peak_action_on_logoff: Action to be taken after a logoff during the off-peak period.
        :param pulumi.Input[int] off_peak_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        :param pulumi.Input[int] off_peak_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        :param pulumi.Input['TimeArgs'] off_peak_start_time: Starting time for off-peak period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] off_peak_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] peak_action_on_disconnect: Action to be taken after a user disconnect during the peak period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] peak_action_on_logoff: Action to be taken after a logoff during the peak period.
        :param pulumi.Input[int] peak_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        :param pulumi.Input[int] peak_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        :param pulumi.Input['TimeArgs'] peak_start_time: Starting time for peak period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] peak_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_down_action_on_disconnect: Action to be taken after a user disconnect during the ramp down period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_down_action_on_logoff: Action to be taken after a logoff during the ramp down period.
        :param pulumi.Input[int] ramp_down_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        :param pulumi.Input[int] ramp_down_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        :param pulumi.Input['TimeArgs'] ramp_down_start_time: Starting time for ramp down period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] ramp_down_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_up_action_on_disconnect: Action to be taken after a user disconnect during the ramp up period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_up_action_on_logoff: Action to be taken after a logoff during the ramp up period.
        :param pulumi.Input[Union[str, 'StartupBehavior']] ramp_up_auto_start_hosts: The desired startup behavior during the ramp up period for personal vms in the hostpool.
        :param pulumi.Input[int] ramp_up_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        :param pulumi.Input[int] ramp_up_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        :param pulumi.Input['TimeArgs'] ramp_up_start_time: Starting time for ramp up period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] ramp_up_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        :param pulumi.Input[str] scaling_plan_schedule_name: The name of the ScalingPlanSchedule
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "scaling_plan_name", scaling_plan_name)
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if off_peak_action_on_disconnect is not None:
            pulumi.set(__self__, "off_peak_action_on_disconnect", off_peak_action_on_disconnect)
        if off_peak_action_on_logoff is not None:
            pulumi.set(__self__, "off_peak_action_on_logoff", off_peak_action_on_logoff)
        if off_peak_minutes_to_wait_on_disconnect is not None:
            pulumi.set(__self__, "off_peak_minutes_to_wait_on_disconnect", off_peak_minutes_to_wait_on_disconnect)
        if off_peak_minutes_to_wait_on_logoff is not None:
            pulumi.set(__self__, "off_peak_minutes_to_wait_on_logoff", off_peak_minutes_to_wait_on_logoff)
        if off_peak_start_time is not None:
            pulumi.set(__self__, "off_peak_start_time", off_peak_start_time)
        if off_peak_start_vm_on_connect is None:
            off_peak_start_vm_on_connect = 'Enable'
        if off_peak_start_vm_on_connect is not None:
            pulumi.set(__self__, "off_peak_start_vm_on_connect", off_peak_start_vm_on_connect)
        if peak_action_on_disconnect is not None:
            pulumi.set(__self__, "peak_action_on_disconnect", peak_action_on_disconnect)
        if peak_action_on_logoff is not None:
            pulumi.set(__self__, "peak_action_on_logoff", peak_action_on_logoff)
        if peak_minutes_to_wait_on_disconnect is not None:
            pulumi.set(__self__, "peak_minutes_to_wait_on_disconnect", peak_minutes_to_wait_on_disconnect)
        if peak_minutes_to_wait_on_logoff is not None:
            pulumi.set(__self__, "peak_minutes_to_wait_on_logoff", peak_minutes_to_wait_on_logoff)
        if peak_start_time is not None:
            pulumi.set(__self__, "peak_start_time", peak_start_time)
        if peak_start_vm_on_connect is None:
            peak_start_vm_on_connect = 'Enable'
        if peak_start_vm_on_connect is not None:
            pulumi.set(__self__, "peak_start_vm_on_connect", peak_start_vm_on_connect)
        if ramp_down_action_on_disconnect is not None:
            pulumi.set(__self__, "ramp_down_action_on_disconnect", ramp_down_action_on_disconnect)
        if ramp_down_action_on_logoff is not None:
            pulumi.set(__self__, "ramp_down_action_on_logoff", ramp_down_action_on_logoff)
        if ramp_down_minutes_to_wait_on_disconnect is not None:
            pulumi.set(__self__, "ramp_down_minutes_to_wait_on_disconnect", ramp_down_minutes_to_wait_on_disconnect)
        if ramp_down_minutes_to_wait_on_logoff is not None:
            pulumi.set(__self__, "ramp_down_minutes_to_wait_on_logoff", ramp_down_minutes_to_wait_on_logoff)
        if ramp_down_start_time is not None:
            pulumi.set(__self__, "ramp_down_start_time", ramp_down_start_time)
        if ramp_down_start_vm_on_connect is None:
            ramp_down_start_vm_on_connect = 'Enable'
        if ramp_down_start_vm_on_connect is not None:
            pulumi.set(__self__, "ramp_down_start_vm_on_connect", ramp_down_start_vm_on_connect)
        if ramp_up_action_on_disconnect is not None:
            pulumi.set(__self__, "ramp_up_action_on_disconnect", ramp_up_action_on_disconnect)
        if ramp_up_action_on_logoff is not None:
            pulumi.set(__self__, "ramp_up_action_on_logoff", ramp_up_action_on_logoff)
        if ramp_up_auto_start_hosts is not None:
            pulumi.set(__self__, "ramp_up_auto_start_hosts", ramp_up_auto_start_hosts)
        if ramp_up_minutes_to_wait_on_disconnect is not None:
            pulumi.set(__self__, "ramp_up_minutes_to_wait_on_disconnect", ramp_up_minutes_to_wait_on_disconnect)
        if ramp_up_minutes_to_wait_on_logoff is not None:
            pulumi.set(__self__, "ramp_up_minutes_to_wait_on_logoff", ramp_up_minutes_to_wait_on_logoff)
        if ramp_up_start_time is not None:
            pulumi.set(__self__, "ramp_up_start_time", ramp_up_start_time)
        if ramp_up_start_vm_on_connect is None:
            ramp_up_start_vm_on_connect = 'Enable'
        if ramp_up_start_vm_on_connect is not None:
            pulumi.set(__self__, "ramp_up_start_vm_on_connect", ramp_up_start_vm_on_connect)
        if scaling_plan_schedule_name is not None:
            pulumi.set(__self__, "scaling_plan_schedule_name", scaling_plan_schedule_name)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="scalingPlanName")
    def scaling_plan_name(self) -> pulumi.Input[str]:
        """
        The name of the scaling plan.
        """
        return pulumi.get(self, "scaling_plan_name")

    @scaling_plan_name.setter
    def scaling_plan_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "scaling_plan_name", value)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]]]:
        """
        Set of days of the week on which this schedule is active.
        """
        return pulumi.get(self, "days_of_week")

    @days_of_week.setter
    def days_of_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]]]):
        pulumi.set(self, "days_of_week", value)

    @property
    @pulumi.getter(name="offPeakActionOnDisconnect")
    def off_peak_action_on_disconnect(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a user disconnect during the off-peak period.
        """
        return pulumi.get(self, "off_peak_action_on_disconnect")

    @off_peak_action_on_disconnect.setter
    def off_peak_action_on_disconnect(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "off_peak_action_on_disconnect", value)

    @property
    @pulumi.getter(name="offPeakActionOnLogoff")
    def off_peak_action_on_logoff(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a logoff during the off-peak period.
        """
        return pulumi.get(self, "off_peak_action_on_logoff")

    @off_peak_action_on_logoff.setter
    def off_peak_action_on_logoff(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "off_peak_action_on_logoff", value)

    @property
    @pulumi.getter(name="offPeakMinutesToWaitOnDisconnect")
    def off_peak_minutes_to_wait_on_disconnect(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        """
        return pulumi.get(self, "off_peak_minutes_to_wait_on_disconnect")

    @off_peak_minutes_to_wait_on_disconnect.setter
    def off_peak_minutes_to_wait_on_disconnect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "off_peak_minutes_to_wait_on_disconnect", value)

    @property
    @pulumi.getter(name="offPeakMinutesToWaitOnLogoff")
    def off_peak_minutes_to_wait_on_logoff(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        """
        return pulumi.get(self, "off_peak_minutes_to_wait_on_logoff")

    @off_peak_minutes_to_wait_on_logoff.setter
    def off_peak_minutes_to_wait_on_logoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "off_peak_minutes_to_wait_on_logoff", value)

    @property
    @pulumi.getter(name="offPeakStartTime")
    def off_peak_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for off-peak period.
        """
        return pulumi.get(self, "off_peak_start_time")

    @off_peak_start_time.setter
    def off_peak_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "off_peak_start_time", value)

    @property
    @pulumi.getter(name="offPeakStartVMOnConnect")
    def off_peak_start_vm_on_connect(self) -> Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        """
        return pulumi.get(self, "off_peak_start_vm_on_connect")

    @off_peak_start_vm_on_connect.setter
    def off_peak_start_vm_on_connect(self, value: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]):
        pulumi.set(self, "off_peak_start_vm_on_connect", value)

    @property
    @pulumi.getter(name="peakActionOnDisconnect")
    def peak_action_on_disconnect(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a user disconnect during the peak period.
        """
        return pulumi.get(self, "peak_action_on_disconnect")

    @peak_action_on_disconnect.setter
    def peak_action_on_disconnect(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "peak_action_on_disconnect", value)

    @property
    @pulumi.getter(name="peakActionOnLogoff")
    def peak_action_on_logoff(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a logoff during the peak period.
        """
        return pulumi.get(self, "peak_action_on_logoff")

    @peak_action_on_logoff.setter
    def peak_action_on_logoff(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "peak_action_on_logoff", value)

    @property
    @pulumi.getter(name="peakMinutesToWaitOnDisconnect")
    def peak_minutes_to_wait_on_disconnect(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        """
        return pulumi.get(self, "peak_minutes_to_wait_on_disconnect")

    @peak_minutes_to_wait_on_disconnect.setter
    def peak_minutes_to_wait_on_disconnect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peak_minutes_to_wait_on_disconnect", value)

    @property
    @pulumi.getter(name="peakMinutesToWaitOnLogoff")
    def peak_minutes_to_wait_on_logoff(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        """
        return pulumi.get(self, "peak_minutes_to_wait_on_logoff")

    @peak_minutes_to_wait_on_logoff.setter
    def peak_minutes_to_wait_on_logoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peak_minutes_to_wait_on_logoff", value)

    @property
    @pulumi.getter(name="peakStartTime")
    def peak_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for peak period.
        """
        return pulumi.get(self, "peak_start_time")

    @peak_start_time.setter
    def peak_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "peak_start_time", value)

    @property
    @pulumi.getter(name="peakStartVMOnConnect")
    def peak_start_vm_on_connect(self) -> Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        """
        return pulumi.get(self, "peak_start_vm_on_connect")

    @peak_start_vm_on_connect.setter
    def peak_start_vm_on_connect(self, value: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]):
        pulumi.set(self, "peak_start_vm_on_connect", value)

    @property
    @pulumi.getter(name="rampDownActionOnDisconnect")
    def ramp_down_action_on_disconnect(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a user disconnect during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_action_on_disconnect")

    @ramp_down_action_on_disconnect.setter
    def ramp_down_action_on_disconnect(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "ramp_down_action_on_disconnect", value)

    @property
    @pulumi.getter(name="rampDownActionOnLogoff")
    def ramp_down_action_on_logoff(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a logoff during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_action_on_logoff")

    @ramp_down_action_on_logoff.setter
    def ramp_down_action_on_logoff(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "ramp_down_action_on_logoff", value)

    @property
    @pulumi.getter(name="rampDownMinutesToWaitOnDisconnect")
    def ramp_down_minutes_to_wait_on_disconnect(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_minutes_to_wait_on_disconnect")

    @ramp_down_minutes_to_wait_on_disconnect.setter
    def ramp_down_minutes_to_wait_on_disconnect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ramp_down_minutes_to_wait_on_disconnect", value)

    @property
    @pulumi.getter(name="rampDownMinutesToWaitOnLogoff")
    def ramp_down_minutes_to_wait_on_logoff(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_minutes_to_wait_on_logoff")

    @ramp_down_minutes_to_wait_on_logoff.setter
    def ramp_down_minutes_to_wait_on_logoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ramp_down_minutes_to_wait_on_logoff", value)

    @property
    @pulumi.getter(name="rampDownStartTime")
    def ramp_down_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for ramp down period.
        """
        return pulumi.get(self, "ramp_down_start_time")

    @ramp_down_start_time.setter
    def ramp_down_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "ramp_down_start_time", value)

    @property
    @pulumi.getter(name="rampDownStartVMOnConnect")
    def ramp_down_start_vm_on_connect(self) -> Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        """
        return pulumi.get(self, "ramp_down_start_vm_on_connect")

    @ramp_down_start_vm_on_connect.setter
    def ramp_down_start_vm_on_connect(self, value: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]):
        pulumi.set(self, "ramp_down_start_vm_on_connect", value)

    @property
    @pulumi.getter(name="rampUpActionOnDisconnect")
    def ramp_up_action_on_disconnect(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a user disconnect during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_action_on_disconnect")

    @ramp_up_action_on_disconnect.setter
    def ramp_up_action_on_disconnect(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "ramp_up_action_on_disconnect", value)

    @property
    @pulumi.getter(name="rampUpActionOnLogoff")
    def ramp_up_action_on_logoff(self) -> Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]:
        """
        Action to be taken after a logoff during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_action_on_logoff")

    @ramp_up_action_on_logoff.setter
    def ramp_up_action_on_logoff(self, value: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]]):
        pulumi.set(self, "ramp_up_action_on_logoff", value)

    @property
    @pulumi.getter(name="rampUpAutoStartHosts")
    def ramp_up_auto_start_hosts(self) -> Optional[pulumi.Input[Union[str, 'StartupBehavior']]]:
        """
        The desired startup behavior during the ramp up period for personal vms in the hostpool.
        """
        return pulumi.get(self, "ramp_up_auto_start_hosts")

    @ramp_up_auto_start_hosts.setter
    def ramp_up_auto_start_hosts(self, value: Optional[pulumi.Input[Union[str, 'StartupBehavior']]]):
        pulumi.set(self, "ramp_up_auto_start_hosts", value)

    @property
    @pulumi.getter(name="rampUpMinutesToWaitOnDisconnect")
    def ramp_up_minutes_to_wait_on_disconnect(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_minutes_to_wait_on_disconnect")

    @ramp_up_minutes_to_wait_on_disconnect.setter
    def ramp_up_minutes_to_wait_on_disconnect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ramp_up_minutes_to_wait_on_disconnect", value)

    @property
    @pulumi.getter(name="rampUpMinutesToWaitOnLogoff")
    def ramp_up_minutes_to_wait_on_logoff(self) -> Optional[pulumi.Input[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_minutes_to_wait_on_logoff")

    @ramp_up_minutes_to_wait_on_logoff.setter
    def ramp_up_minutes_to_wait_on_logoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ramp_up_minutes_to_wait_on_logoff", value)

    @property
    @pulumi.getter(name="rampUpStartTime")
    def ramp_up_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for ramp up period.
        """
        return pulumi.get(self, "ramp_up_start_time")

    @ramp_up_start_time.setter
    def ramp_up_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "ramp_up_start_time", value)

    @property
    @pulumi.getter(name="rampUpStartVMOnConnect")
    def ramp_up_start_vm_on_connect(self) -> Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        """
        return pulumi.get(self, "ramp_up_start_vm_on_connect")

    @ramp_up_start_vm_on_connect.setter
    def ramp_up_start_vm_on_connect(self, value: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]]):
        pulumi.set(self, "ramp_up_start_vm_on_connect", value)

    @property
    @pulumi.getter(name="scalingPlanScheduleName")
    def scaling_plan_schedule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ScalingPlanSchedule
        """
        return pulumi.get(self, "scaling_plan_schedule_name")

    @scaling_plan_schedule_name.setter
    def scaling_plan_schedule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_plan_schedule_name", value)


class ScalingPlanPersonalSchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]]] = None,
                 off_peak_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 off_peak_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 off_peak_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 off_peak_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 off_peak_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 off_peak_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 peak_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 peak_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 peak_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 peak_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 peak_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 peak_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 ramp_down_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_down_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_down_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 ramp_down_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 ramp_down_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 ramp_down_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 ramp_up_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_up_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_up_auto_start_hosts: Optional[pulumi.Input[Union[str, 'StartupBehavior']]] = None,
                 ramp_up_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 ramp_up_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 ramp_up_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 ramp_up_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_plan_name: Optional[pulumi.Input[str]] = None,
                 scaling_plan_schedule_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents a ScalingPlanPersonalSchedule definition.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]] days_of_week: Set of days of the week on which this schedule is active.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] off_peak_action_on_disconnect: Action to be taken after a user disconnect during the off-peak period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] off_peak_action_on_logoff: Action to be taken after a logoff during the off-peak period.
        :param pulumi.Input[int] off_peak_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        :param pulumi.Input[int] off_peak_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        :param pulumi.Input[pulumi.InputType['TimeArgs']] off_peak_start_time: Starting time for off-peak period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] off_peak_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] peak_action_on_disconnect: Action to be taken after a user disconnect during the peak period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] peak_action_on_logoff: Action to be taken after a logoff during the peak period.
        :param pulumi.Input[int] peak_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        :param pulumi.Input[int] peak_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        :param pulumi.Input[pulumi.InputType['TimeArgs']] peak_start_time: Starting time for peak period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] peak_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_down_action_on_disconnect: Action to be taken after a user disconnect during the ramp down period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_down_action_on_logoff: Action to be taken after a logoff during the ramp down period.
        :param pulumi.Input[int] ramp_down_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        :param pulumi.Input[int] ramp_down_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        :param pulumi.Input[pulumi.InputType['TimeArgs']] ramp_down_start_time: Starting time for ramp down period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] ramp_down_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_up_action_on_disconnect: Action to be taken after a user disconnect during the ramp up period.
        :param pulumi.Input[Union[str, 'SessionHandlingOperation']] ramp_up_action_on_logoff: Action to be taken after a logoff during the ramp up period.
        :param pulumi.Input[Union[str, 'StartupBehavior']] ramp_up_auto_start_hosts: The desired startup behavior during the ramp up period for personal vms in the hostpool.
        :param pulumi.Input[int] ramp_up_minutes_to_wait_on_disconnect: The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        :param pulumi.Input[int] ramp_up_minutes_to_wait_on_logoff: The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        :param pulumi.Input[pulumi.InputType['TimeArgs']] ramp_up_start_time: Starting time for ramp up period.
        :param pulumi.Input[Union[str, 'SetStartVMOnConnect']] ramp_up_start_vm_on_connect: The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] scaling_plan_name: The name of the scaling plan.
        :param pulumi.Input[str] scaling_plan_schedule_name: The name of the ScalingPlanSchedule
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScalingPlanPersonalScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a ScalingPlanPersonalSchedule definition.

        :param str resource_name: The name of the resource.
        :param ScalingPlanPersonalScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScalingPlanPersonalScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'DayOfWeek']]]]] = None,
                 off_peak_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 off_peak_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 off_peak_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 off_peak_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 off_peak_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 off_peak_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 peak_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 peak_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 peak_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 peak_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 peak_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 peak_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 ramp_down_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_down_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_down_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 ramp_down_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 ramp_down_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 ramp_down_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 ramp_up_action_on_disconnect: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_up_action_on_logoff: Optional[pulumi.Input[Union[str, 'SessionHandlingOperation']]] = None,
                 ramp_up_auto_start_hosts: Optional[pulumi.Input[Union[str, 'StartupBehavior']]] = None,
                 ramp_up_minutes_to_wait_on_disconnect: Optional[pulumi.Input[int]] = None,
                 ramp_up_minutes_to_wait_on_logoff: Optional[pulumi.Input[int]] = None,
                 ramp_up_start_time: Optional[pulumi.Input[pulumi.InputType['TimeArgs']]] = None,
                 ramp_up_start_vm_on_connect: Optional[pulumi.Input[Union[str, 'SetStartVMOnConnect']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_plan_name: Optional[pulumi.Input[str]] = None,
                 scaling_plan_schedule_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScalingPlanPersonalScheduleArgs.__new__(ScalingPlanPersonalScheduleArgs)

            __props__.__dict__["days_of_week"] = days_of_week
            __props__.__dict__["off_peak_action_on_disconnect"] = off_peak_action_on_disconnect
            __props__.__dict__["off_peak_action_on_logoff"] = off_peak_action_on_logoff
            __props__.__dict__["off_peak_minutes_to_wait_on_disconnect"] = off_peak_minutes_to_wait_on_disconnect
            __props__.__dict__["off_peak_minutes_to_wait_on_logoff"] = off_peak_minutes_to_wait_on_logoff
            __props__.__dict__["off_peak_start_time"] = off_peak_start_time
            if off_peak_start_vm_on_connect is None:
                off_peak_start_vm_on_connect = 'Enable'
            __props__.__dict__["off_peak_start_vm_on_connect"] = off_peak_start_vm_on_connect
            __props__.__dict__["peak_action_on_disconnect"] = peak_action_on_disconnect
            __props__.__dict__["peak_action_on_logoff"] = peak_action_on_logoff
            __props__.__dict__["peak_minutes_to_wait_on_disconnect"] = peak_minutes_to_wait_on_disconnect
            __props__.__dict__["peak_minutes_to_wait_on_logoff"] = peak_minutes_to_wait_on_logoff
            __props__.__dict__["peak_start_time"] = peak_start_time
            if peak_start_vm_on_connect is None:
                peak_start_vm_on_connect = 'Enable'
            __props__.__dict__["peak_start_vm_on_connect"] = peak_start_vm_on_connect
            __props__.__dict__["ramp_down_action_on_disconnect"] = ramp_down_action_on_disconnect
            __props__.__dict__["ramp_down_action_on_logoff"] = ramp_down_action_on_logoff
            __props__.__dict__["ramp_down_minutes_to_wait_on_disconnect"] = ramp_down_minutes_to_wait_on_disconnect
            __props__.__dict__["ramp_down_minutes_to_wait_on_logoff"] = ramp_down_minutes_to_wait_on_logoff
            __props__.__dict__["ramp_down_start_time"] = ramp_down_start_time
            if ramp_down_start_vm_on_connect is None:
                ramp_down_start_vm_on_connect = 'Enable'
            __props__.__dict__["ramp_down_start_vm_on_connect"] = ramp_down_start_vm_on_connect
            __props__.__dict__["ramp_up_action_on_disconnect"] = ramp_up_action_on_disconnect
            __props__.__dict__["ramp_up_action_on_logoff"] = ramp_up_action_on_logoff
            __props__.__dict__["ramp_up_auto_start_hosts"] = ramp_up_auto_start_hosts
            __props__.__dict__["ramp_up_minutes_to_wait_on_disconnect"] = ramp_up_minutes_to_wait_on_disconnect
            __props__.__dict__["ramp_up_minutes_to_wait_on_logoff"] = ramp_up_minutes_to_wait_on_logoff
            __props__.__dict__["ramp_up_start_time"] = ramp_up_start_time
            if ramp_up_start_vm_on_connect is None:
                ramp_up_start_vm_on_connect = 'Enable'
            __props__.__dict__["ramp_up_start_vm_on_connect"] = ramp_up_start_vm_on_connect
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if scaling_plan_name is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_plan_name'")
            __props__.__dict__["scaling_plan_name"] = scaling_plan_name
            __props__.__dict__["scaling_plan_schedule_name"] = scaling_plan_schedule_name
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:desktopvirtualization:ScalingPlanPersonalSchedule"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20230905:ScalingPlanPersonalSchedule")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ScalingPlanPersonalSchedule, __self__).__init__(
            'azure-native:desktopvirtualization/v20230707preview:ScalingPlanPersonalSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ScalingPlanPersonalSchedule':
        """
        Get an existing ScalingPlanPersonalSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ScalingPlanPersonalScheduleArgs.__new__(ScalingPlanPersonalScheduleArgs)

        __props__.__dict__["days_of_week"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["off_peak_action_on_disconnect"] = None
        __props__.__dict__["off_peak_action_on_logoff"] = None
        __props__.__dict__["off_peak_minutes_to_wait_on_disconnect"] = None
        __props__.__dict__["off_peak_minutes_to_wait_on_logoff"] = None
        __props__.__dict__["off_peak_start_time"] = None
        __props__.__dict__["off_peak_start_vm_on_connect"] = None
        __props__.__dict__["peak_action_on_disconnect"] = None
        __props__.__dict__["peak_action_on_logoff"] = None
        __props__.__dict__["peak_minutes_to_wait_on_disconnect"] = None
        __props__.__dict__["peak_minutes_to_wait_on_logoff"] = None
        __props__.__dict__["peak_start_time"] = None
        __props__.__dict__["peak_start_vm_on_connect"] = None
        __props__.__dict__["ramp_down_action_on_disconnect"] = None
        __props__.__dict__["ramp_down_action_on_logoff"] = None
        __props__.__dict__["ramp_down_minutes_to_wait_on_disconnect"] = None
        __props__.__dict__["ramp_down_minutes_to_wait_on_logoff"] = None
        __props__.__dict__["ramp_down_start_time"] = None
        __props__.__dict__["ramp_down_start_vm_on_connect"] = None
        __props__.__dict__["ramp_up_action_on_disconnect"] = None
        __props__.__dict__["ramp_up_action_on_logoff"] = None
        __props__.__dict__["ramp_up_auto_start_hosts"] = None
        __props__.__dict__["ramp_up_minutes_to_wait_on_disconnect"] = None
        __props__.__dict__["ramp_up_minutes_to_wait_on_logoff"] = None
        __props__.__dict__["ramp_up_start_time"] = None
        __props__.__dict__["ramp_up_start_vm_on_connect"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return ScalingPlanPersonalSchedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Set of days of the week on which this schedule is active.
        """
        return pulumi.get(self, "days_of_week")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="offPeakActionOnDisconnect")
    def off_peak_action_on_disconnect(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a user disconnect during the off-peak period.
        """
        return pulumi.get(self, "off_peak_action_on_disconnect")

    @property
    @pulumi.getter(name="offPeakActionOnLogoff")
    def off_peak_action_on_logoff(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a logoff during the off-peak period.
        """
        return pulumi.get(self, "off_peak_action_on_logoff")

    @property
    @pulumi.getter(name="offPeakMinutesToWaitOnDisconnect")
    def off_peak_minutes_to_wait_on_disconnect(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        """
        return pulumi.get(self, "off_peak_minutes_to_wait_on_disconnect")

    @property
    @pulumi.getter(name="offPeakMinutesToWaitOnLogoff")
    def off_peak_minutes_to_wait_on_logoff(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        """
        return pulumi.get(self, "off_peak_minutes_to_wait_on_logoff")

    @property
    @pulumi.getter(name="offPeakStartTime")
    def off_peak_start_time(self) -> pulumi.Output[Optional['outputs.TimeResponse']]:
        """
        Starting time for off-peak period.
        """
        return pulumi.get(self, "off_peak_start_time")

    @property
    @pulumi.getter(name="offPeakStartVMOnConnect")
    def off_peak_start_vm_on_connect(self) -> pulumi.Output[Optional[str]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        """
        return pulumi.get(self, "off_peak_start_vm_on_connect")

    @property
    @pulumi.getter(name="peakActionOnDisconnect")
    def peak_action_on_disconnect(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a user disconnect during the peak period.
        """
        return pulumi.get(self, "peak_action_on_disconnect")

    @property
    @pulumi.getter(name="peakActionOnLogoff")
    def peak_action_on_logoff(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a logoff during the peak period.
        """
        return pulumi.get(self, "peak_action_on_logoff")

    @property
    @pulumi.getter(name="peakMinutesToWaitOnDisconnect")
    def peak_minutes_to_wait_on_disconnect(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        """
        return pulumi.get(self, "peak_minutes_to_wait_on_disconnect")

    @property
    @pulumi.getter(name="peakMinutesToWaitOnLogoff")
    def peak_minutes_to_wait_on_logoff(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        """
        return pulumi.get(self, "peak_minutes_to_wait_on_logoff")

    @property
    @pulumi.getter(name="peakStartTime")
    def peak_start_time(self) -> pulumi.Output[Optional['outputs.TimeResponse']]:
        """
        Starting time for peak period.
        """
        return pulumi.get(self, "peak_start_time")

    @property
    @pulumi.getter(name="peakStartVMOnConnect")
    def peak_start_vm_on_connect(self) -> pulumi.Output[Optional[str]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        """
        return pulumi.get(self, "peak_start_vm_on_connect")

    @property
    @pulumi.getter(name="rampDownActionOnDisconnect")
    def ramp_down_action_on_disconnect(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a user disconnect during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_action_on_disconnect")

    @property
    @pulumi.getter(name="rampDownActionOnLogoff")
    def ramp_down_action_on_logoff(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a logoff during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_action_on_logoff")

    @property
    @pulumi.getter(name="rampDownMinutesToWaitOnDisconnect")
    def ramp_down_minutes_to_wait_on_disconnect(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_minutes_to_wait_on_disconnect")

    @property
    @pulumi.getter(name="rampDownMinutesToWaitOnLogoff")
    def ramp_down_minutes_to_wait_on_logoff(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        """
        return pulumi.get(self, "ramp_down_minutes_to_wait_on_logoff")

    @property
    @pulumi.getter(name="rampDownStartTime")
    def ramp_down_start_time(self) -> pulumi.Output[Optional['outputs.TimeResponse']]:
        """
        Starting time for ramp down period.
        """
        return pulumi.get(self, "ramp_down_start_time")

    @property
    @pulumi.getter(name="rampDownStartVMOnConnect")
    def ramp_down_start_vm_on_connect(self) -> pulumi.Output[Optional[str]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        """
        return pulumi.get(self, "ramp_down_start_vm_on_connect")

    @property
    @pulumi.getter(name="rampUpActionOnDisconnect")
    def ramp_up_action_on_disconnect(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a user disconnect during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_action_on_disconnect")

    @property
    @pulumi.getter(name="rampUpActionOnLogoff")
    def ramp_up_action_on_logoff(self) -> pulumi.Output[Optional[str]]:
        """
        Action to be taken after a logoff during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_action_on_logoff")

    @property
    @pulumi.getter(name="rampUpAutoStartHosts")
    def ramp_up_auto_start_hosts(self) -> pulumi.Output[Optional[str]]:
        """
        The desired startup behavior during the ramp up period for personal vms in the hostpool.
        """
        return pulumi.get(self, "ramp_up_auto_start_hosts")

    @property
    @pulumi.getter(name="rampUpMinutesToWaitOnDisconnect")
    def ramp_up_minutes_to_wait_on_disconnect(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_minutes_to_wait_on_disconnect")

    @property
    @pulumi.getter(name="rampUpMinutesToWaitOnLogoff")
    def ramp_up_minutes_to_wait_on_logoff(self) -> pulumi.Output[Optional[int]]:
        """
        The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        """
        return pulumi.get(self, "ramp_up_minutes_to_wait_on_logoff")

    @property
    @pulumi.getter(name="rampUpStartTime")
    def ramp_up_start_time(self) -> pulumi.Output[Optional['outputs.TimeResponse']]:
        """
        Starting time for ramp up period.
        """
        return pulumi.get(self, "ramp_up_start_time")

    @property
    @pulumi.getter(name="rampUpStartVMOnConnect")
    def ramp_up_start_vm_on_connect(self) -> pulumi.Output[Optional[str]]:
        """
        The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        """
        return pulumi.get(self, "ramp_up_start_vm_on_connect")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

