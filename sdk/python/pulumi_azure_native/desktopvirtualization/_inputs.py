# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AgentUpdatePropertiesArgs',
    'AgentUpdatePropertiesArgsDict',
    'AppAttachPackageInfoPropertiesArgs',
    'AppAttachPackageInfoPropertiesArgsDict',
    'AppAttachPackagePropertiesArgs',
    'AppAttachPackagePropertiesArgsDict',
    'MaintenanceWindowPropertiesArgs',
    'MaintenanceWindowPropertiesArgsDict',
    'MsixPackageApplicationsArgs',
    'MsixPackageApplicationsArgsDict',
    'MsixPackageDependenciesArgs',
    'MsixPackageDependenciesArgsDict',
    'PrivateLinkServiceConnectionStateArgs',
    'PrivateLinkServiceConnectionStateArgsDict',
    'RegistrationInfoArgs',
    'RegistrationInfoArgsDict',
    'ResourceModelWithAllowedPropertySetIdentityArgs',
    'ResourceModelWithAllowedPropertySetIdentityArgsDict',
    'ResourceModelWithAllowedPropertySetPlanArgs',
    'ResourceModelWithAllowedPropertySetPlanArgsDict',
    'ResourceModelWithAllowedPropertySetSkuArgs',
    'ResourceModelWithAllowedPropertySetSkuArgsDict',
    'ScalingHostPoolReferenceArgs',
    'ScalingHostPoolReferenceArgsDict',
    'ScalingScheduleArgs',
    'ScalingScheduleArgsDict',
    'TimeArgs',
    'TimeArgsDict',
]

MYPY = False

if not MYPY:
    class AgentUpdatePropertiesArgsDict(TypedDict):
        """
        The session host configuration for updating agent, monitoring agent, and stack component.
        """
        maintenance_window_time_zone: NotRequired[pulumi.Input[builtins.str]]
        """
        Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
        """
        maintenance_windows: NotRequired[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowPropertiesArgsDict']]]]
        """
        List of maintenance windows. Maintenance windows are 2 hours long.
        """
        type: NotRequired[pulumi.Input[Union[builtins.str, 'SessionHostComponentUpdateType']]]
        """
        The type of maintenance for session host components.
        """
        use_session_host_local_time: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to use localTime of the virtual machine.
        """
elif False:
    AgentUpdatePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgentUpdatePropertiesArgs:
    def __init__(__self__, *,
                 maintenance_window_time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 maintenance_windows: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowPropertiesArgs']]]] = None,
                 type: Optional[pulumi.Input[Union[builtins.str, 'SessionHostComponentUpdateType']]] = None,
                 use_session_host_local_time: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The session host configuration for updating agent, monitoring agent, and stack component.
        :param pulumi.Input[builtins.str] maintenance_window_time_zone: Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
        :param pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowPropertiesArgs']]] maintenance_windows: List of maintenance windows. Maintenance windows are 2 hours long.
        :param pulumi.Input[Union[builtins.str, 'SessionHostComponentUpdateType']] type: The type of maintenance for session host components.
        :param pulumi.Input[builtins.bool] use_session_host_local_time: Whether to use localTime of the virtual machine.
        """
        if maintenance_window_time_zone is not None:
            pulumi.set(__self__, "maintenance_window_time_zone", maintenance_window_time_zone)
        if maintenance_windows is not None:
            pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_session_host_local_time is not None:
            pulumi.set(__self__, "use_session_host_local_time", use_session_host_local_time)

    @property
    @pulumi.getter(name="maintenanceWindowTimeZone")
    def maintenance_window_time_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
        """
        return pulumi.get(self, "maintenance_window_time_zone")

    @maintenance_window_time_zone.setter
    def maintenance_window_time_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "maintenance_window_time_zone", value)

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowPropertiesArgs']]]]:
        """
        List of maintenance windows. Maintenance windows are 2 hours long.
        """
        return pulumi.get(self, "maintenance_windows")

    @maintenance_windows.setter
    def maintenance_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowPropertiesArgs']]]]):
        pulumi.set(self, "maintenance_windows", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[builtins.str, 'SessionHostComponentUpdateType']]]:
        """
        The type of maintenance for session host components.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[builtins.str, 'SessionHostComponentUpdateType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useSessionHostLocalTime")
    def use_session_host_local_time(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to use localTime of the virtual machine.
        """
        return pulumi.get(self, "use_session_host_local_time")

    @use_session_host_local_time.setter
    def use_session_host_local_time(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_session_host_local_time", value)


if not MYPY:
    class AppAttachPackageInfoPropertiesArgsDict(TypedDict):
        """
        Schema for Import Package Information properties.
        """
        certificate_expiry: NotRequired[pulumi.Input[builtins.str]]
        """
        Date certificate expires, found in the appxmanifest.xml. 
        """
        certificate_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Certificate name found in the appxmanifest.xml. 
        """
        display_name: NotRequired[pulumi.Input[builtins.str]]
        """
        User friendly Name to be displayed in the portal. 
        """
        image_path: NotRequired[pulumi.Input[builtins.str]]
        """
        VHD/CIM image path on Network Share.
        """
        is_active: NotRequired[pulumi.Input[builtins.bool]]
        """
        Make this version of the package the active one across the hostpool. 
        """
        is_package_timestamped: NotRequired[pulumi.Input[Union[builtins.str, 'PackageTimestamped']]]
        """
        Is package timestamped so it can ignore the certificate expiry date
        """
        is_regular_registration: NotRequired[pulumi.Input[builtins.bool]]
        """
        Specifies how to register Package in feed.
        """
        last_updated: NotRequired[pulumi.Input[builtins.str]]
        """
        Date Package was last updated, found in the appxmanifest.xml. 
        """
        package_alias: NotRequired[pulumi.Input[builtins.str]]
        """
        Alias of App Attach Package. Assigned at import time
        """
        package_applications: NotRequired[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgsDict']]]]
        """
        List of package applications. 
        """
        package_dependencies: NotRequired[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgsDict']]]]
        """
        List of package dependencies. 
        """
        package_family_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. 
        """
        package_full_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Package Full Name from appxmanifest.xml. 
        """
        package_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Package Name from appxmanifest.xml. 
        """
        package_relative_path: NotRequired[pulumi.Input[builtins.str]]
        """
        Relative Path to the package inside the image. 
        """
        version: NotRequired[pulumi.Input[builtins.str]]
        """
        Package version found in the appxmanifest.xml. 
        """
elif False:
    AppAttachPackageInfoPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppAttachPackageInfoPropertiesArgs:
    def __init__(__self__, *,
                 certificate_expiry: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_name: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 image_path: Optional[pulumi.Input[builtins.str]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 is_package_timestamped: Optional[pulumi.Input[Union[builtins.str, 'PackageTimestamped']]] = None,
                 is_regular_registration: Optional[pulumi.Input[builtins.bool]] = None,
                 last_updated: Optional[pulumi.Input[builtins.str]] = None,
                 package_alias: Optional[pulumi.Input[builtins.str]] = None,
                 package_applications: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]]] = None,
                 package_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]]] = None,
                 package_family_name: Optional[pulumi.Input[builtins.str]] = None,
                 package_full_name: Optional[pulumi.Input[builtins.str]] = None,
                 package_name: Optional[pulumi.Input[builtins.str]] = None,
                 package_relative_path: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        """
        Schema for Import Package Information properties.
        :param pulumi.Input[builtins.str] certificate_expiry: Date certificate expires, found in the appxmanifest.xml. 
        :param pulumi.Input[builtins.str] certificate_name: Certificate name found in the appxmanifest.xml. 
        :param pulumi.Input[builtins.str] display_name: User friendly Name to be displayed in the portal. 
        :param pulumi.Input[builtins.str] image_path: VHD/CIM image path on Network Share.
        :param pulumi.Input[builtins.bool] is_active: Make this version of the package the active one across the hostpool. 
        :param pulumi.Input[Union[builtins.str, 'PackageTimestamped']] is_package_timestamped: Is package timestamped so it can ignore the certificate expiry date
        :param pulumi.Input[builtins.bool] is_regular_registration: Specifies how to register Package in feed.
        :param pulumi.Input[builtins.str] last_updated: Date Package was last updated, found in the appxmanifest.xml. 
        :param pulumi.Input[builtins.str] package_alias: Alias of App Attach Package. Assigned at import time
        :param pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]] package_applications: List of package applications. 
        :param pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]] package_dependencies: List of package dependencies. 
        :param pulumi.Input[builtins.str] package_family_name: Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. 
        :param pulumi.Input[builtins.str] package_full_name: Package Full Name from appxmanifest.xml. 
        :param pulumi.Input[builtins.str] package_name: Package Name from appxmanifest.xml. 
        :param pulumi.Input[builtins.str] package_relative_path: Relative Path to the package inside the image. 
        :param pulumi.Input[builtins.str] version: Package version found in the appxmanifest.xml. 
        """
        if certificate_expiry is not None:
            pulumi.set(__self__, "certificate_expiry", certificate_expiry)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if image_path is not None:
            pulumi.set(__self__, "image_path", image_path)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_package_timestamped is not None:
            pulumi.set(__self__, "is_package_timestamped", is_package_timestamped)
        if is_regular_registration is not None:
            pulumi.set(__self__, "is_regular_registration", is_regular_registration)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if package_alias is not None:
            pulumi.set(__self__, "package_alias", package_alias)
        if package_applications is not None:
            pulumi.set(__self__, "package_applications", package_applications)
        if package_dependencies is not None:
            pulumi.set(__self__, "package_dependencies", package_dependencies)
        if package_family_name is not None:
            pulumi.set(__self__, "package_family_name", package_family_name)
        if package_full_name is not None:
            pulumi.set(__self__, "package_full_name", package_full_name)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_relative_path is not None:
            pulumi.set(__self__, "package_relative_path", package_relative_path)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="certificateExpiry")
    def certificate_expiry(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Date certificate expires, found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "certificate_expiry")

    @certificate_expiry.setter
    def certificate_expiry(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_expiry", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Certificate name found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User friendly Name to be displayed in the portal. 
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VHD/CIM image path on Network Share.
        """
        return pulumi.get(self, "image_path")

    @image_path.setter
    def image_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_path", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Make this version of the package the active one across the hostpool. 
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isPackageTimestamped")
    def is_package_timestamped(self) -> Optional[pulumi.Input[Union[builtins.str, 'PackageTimestamped']]]:
        """
        Is package timestamped so it can ignore the certificate expiry date
        """
        return pulumi.get(self, "is_package_timestamped")

    @is_package_timestamped.setter
    def is_package_timestamped(self, value: Optional[pulumi.Input[Union[builtins.str, 'PackageTimestamped']]]):
        pulumi.set(self, "is_package_timestamped", value)

    @property
    @pulumi.getter(name="isRegularRegistration")
    def is_regular_registration(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies how to register Package in feed.
        """
        return pulumi.get(self, "is_regular_registration")

    @is_regular_registration.setter
    def is_regular_registration(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_regular_registration", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Date Package was last updated, found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="packageAlias")
    def package_alias(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Alias of App Attach Package. Assigned at import time
        """
        return pulumi.get(self, "package_alias")

    @package_alias.setter
    def package_alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_alias", value)

    @property
    @pulumi.getter(name="packageApplications")
    def package_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]]]:
        """
        List of package applications. 
        """
        return pulumi.get(self, "package_applications")

    @package_applications.setter
    def package_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]]]):
        pulumi.set(self, "package_applications", value)

    @property
    @pulumi.getter(name="packageDependencies")
    def package_dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]]]:
        """
        List of package dependencies. 
        """
        return pulumi.get(self, "package_dependencies")

    @package_dependencies.setter
    def package_dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]]]):
        pulumi.set(self, "package_dependencies", value)

    @property
    @pulumi.getter(name="packageFamilyName")
    def package_family_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. 
        """
        return pulumi.get(self, "package_family_name")

    @package_family_name.setter
    def package_family_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_family_name", value)

    @property
    @pulumi.getter(name="packageFullName")
    def package_full_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Package Full Name from appxmanifest.xml. 
        """
        return pulumi.get(self, "package_full_name")

    @package_full_name.setter
    def package_full_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_full_name", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Package Name from appxmanifest.xml. 
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="packageRelativePath")
    def package_relative_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Relative Path to the package inside the image. 
        """
        return pulumi.get(self, "package_relative_path")

    @package_relative_path.setter
    def package_relative_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_relative_path", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Package version found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class AppAttachPackagePropertiesArgsDict(TypedDict):
        """
        Schema for App Attach Package properties.
        """
        fail_health_check_on_staging_failure: NotRequired[pulumi.Input[Union[builtins.str, 'FailHealthCheckOnStagingFailure']]]
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        host_pool_references: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of Hostpool resource Ids.
        """
        image: NotRequired[pulumi.Input['AppAttachPackageInfoPropertiesArgsDict']]
        """
        Detailed properties for App Attach Package
        """
        key_vault_url: NotRequired[pulumi.Input[builtins.str]]
        """
        URL path to certificate name located in keyVault
        """
elif False:
    AppAttachPackagePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppAttachPackagePropertiesArgs:
    def __init__(__self__, *,
                 fail_health_check_on_staging_failure: Optional[pulumi.Input[Union[builtins.str, 'FailHealthCheckOnStagingFailure']]] = None,
                 host_pool_references: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 image: Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']] = None,
                 key_vault_url: Optional[pulumi.Input[builtins.str]] = None):
        """
        Schema for App Attach Package properties.
        :param pulumi.Input[Union[builtins.str, 'FailHealthCheckOnStagingFailure']] fail_health_check_on_staging_failure: Parameter indicating how the health check should behave if this package fails staging
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_pool_references: List of Hostpool resource Ids.
        :param pulumi.Input['AppAttachPackageInfoPropertiesArgs'] image: Detailed properties for App Attach Package
        :param pulumi.Input[builtins.str] key_vault_url: URL path to certificate name located in keyVault
        """
        if fail_health_check_on_staging_failure is not None:
            pulumi.set(__self__, "fail_health_check_on_staging_failure", fail_health_check_on_staging_failure)
        if host_pool_references is not None:
            pulumi.set(__self__, "host_pool_references", host_pool_references)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if key_vault_url is not None:
            pulumi.set(__self__, "key_vault_url", key_vault_url)

    @property
    @pulumi.getter(name="failHealthCheckOnStagingFailure")
    def fail_health_check_on_staging_failure(self) -> Optional[pulumi.Input[Union[builtins.str, 'FailHealthCheckOnStagingFailure']]]:
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        return pulumi.get(self, "fail_health_check_on_staging_failure")

    @fail_health_check_on_staging_failure.setter
    def fail_health_check_on_staging_failure(self, value: Optional[pulumi.Input[Union[builtins.str, 'FailHealthCheckOnStagingFailure']]]):
        pulumi.set(self, "fail_health_check_on_staging_failure", value)

    @property
    @pulumi.getter(name="hostPoolReferences")
    def host_pool_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of Hostpool resource Ids.
        """
        return pulumi.get(self, "host_pool_references")

    @host_pool_references.setter
    def host_pool_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_pool_references", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']]:
        """
        Detailed properties for App Attach Package
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="keyVaultURL")
    def key_vault_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        URL path to certificate name located in keyVault
        """
        return pulumi.get(self, "key_vault_url")

    @key_vault_url.setter
    def key_vault_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_vault_url", value)


if not MYPY:
    class MaintenanceWindowPropertiesArgsDict(TypedDict):
        """
        Maintenance window starting hour and day of week.
        """
        day_of_week: NotRequired[pulumi.Input['DayOfWeek']]
        """
        Day of the week.
        """
        hour: NotRequired[pulumi.Input[builtins.int]]
        """
        The update start hour of the day. (0 - 23)
        """
elif False:
    MaintenanceWindowPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MaintenanceWindowPropertiesArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input['DayOfWeek']] = None,
                 hour: Optional[pulumi.Input[builtins.int]] = None):
        """
        Maintenance window starting hour and day of week.
        :param pulumi.Input['DayOfWeek'] day_of_week: Day of the week.
        :param pulumi.Input[builtins.int] hour: The update start hour of the day. (0 - 23)
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input['DayOfWeek']]:
        """
        Day of the week.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input['DayOfWeek']]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The update start hour of the day. (0 - 23)
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "hour", value)


if not MYPY:
    class MsixPackageApplicationsArgsDict(TypedDict):
        """
        Schema for MSIX Package Application properties.
        """
        app_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Package Application Id, found in appxmanifest.xml.
        """
        app_user_model_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        Description of Package Application.
        """
        friendly_name: NotRequired[pulumi.Input[builtins.str]]
        """
        User friendly name.
        """
        icon_image_name: NotRequired[pulumi.Input[builtins.str]]
        """
        User friendly name.
        """
        raw_icon: NotRequired[pulumi.Input[builtins.str]]
        """
        the icon a 64 bit string as a byte array.
        """
        raw_png: NotRequired[pulumi.Input[builtins.str]]
        """
        the icon a 64 bit string as a byte array.
        """
elif False:
    MsixPackageApplicationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MsixPackageApplicationsArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[builtins.str]] = None,
                 app_user_model_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 friendly_name: Optional[pulumi.Input[builtins.str]] = None,
                 icon_image_name: Optional[pulumi.Input[builtins.str]] = None,
                 raw_icon: Optional[pulumi.Input[builtins.str]] = None,
                 raw_png: Optional[pulumi.Input[builtins.str]] = None):
        """
        Schema for MSIX Package Application properties.
        :param pulumi.Input[builtins.str] app_id: Package Application Id, found in appxmanifest.xml.
        :param pulumi.Input[builtins.str] app_user_model_id: Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        :param pulumi.Input[builtins.str] description: Description of Package Application.
        :param pulumi.Input[builtins.str] friendly_name: User friendly name.
        :param pulumi.Input[builtins.str] icon_image_name: User friendly name.
        :param pulumi.Input[builtins.str] raw_icon: the icon a 64 bit string as a byte array.
        :param pulumi.Input[builtins.str] raw_png: the icon a 64 bit string as a byte array.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_user_model_id is not None:
            pulumi.set(__self__, "app_user_model_id", app_user_model_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if icon_image_name is not None:
            pulumi.set(__self__, "icon_image_name", icon_image_name)
        if raw_icon is not None:
            pulumi.set(__self__, "raw_icon", raw_icon)
        if raw_png is not None:
            pulumi.set(__self__, "raw_png", raw_png)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Package Application Id, found in appxmanifest.xml.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appUserModelID")
    def app_user_model_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        """
        return pulumi.get(self, "app_user_model_id")

    @app_user_model_id.setter
    def app_user_model_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_user_model_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of Package Application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="iconImageName")
    def icon_image_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        User friendly name.
        """
        return pulumi.get(self, "icon_image_name")

    @icon_image_name.setter
    def icon_image_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "icon_image_name", value)

    @property
    @pulumi.getter(name="rawIcon")
    def raw_icon(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        the icon a 64 bit string as a byte array.
        """
        return pulumi.get(self, "raw_icon")

    @raw_icon.setter
    def raw_icon(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "raw_icon", value)

    @property
    @pulumi.getter(name="rawPng")
    def raw_png(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        the icon a 64 bit string as a byte array.
        """
        return pulumi.get(self, "raw_png")

    @raw_png.setter
    def raw_png(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "raw_png", value)


if not MYPY:
    class MsixPackageDependenciesArgsDict(TypedDict):
        """
        Schema for MSIX Package Dependencies properties.
        """
        dependency_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of package dependency.
        """
        min_version: NotRequired[pulumi.Input[builtins.str]]
        """
        Dependency version required.
        """
        publisher: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of dependency publisher.
        """
elif False:
    MsixPackageDependenciesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MsixPackageDependenciesArgs:
    def __init__(__self__, *,
                 dependency_name: Optional[pulumi.Input[builtins.str]] = None,
                 min_version: Optional[pulumi.Input[builtins.str]] = None,
                 publisher: Optional[pulumi.Input[builtins.str]] = None):
        """
        Schema for MSIX Package Dependencies properties.
        :param pulumi.Input[builtins.str] dependency_name: Name of package dependency.
        :param pulumi.Input[builtins.str] min_version: Dependency version required.
        :param pulumi.Input[builtins.str] publisher: Name of dependency publisher.
        """
        if dependency_name is not None:
            pulumi.set(__self__, "dependency_name", dependency_name)
        if min_version is not None:
            pulumi.set(__self__, "min_version", min_version)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter(name="dependencyName")
    def dependency_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of package dependency.
        """
        return pulumi.get(self, "dependency_name")

    @dependency_name.setter
    def dependency_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dependency_name", value)

    @property
    @pulumi.getter(name="minVersion")
    def min_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Dependency version required.
        """
        return pulumi.get(self, "min_version")

    @min_version.setter
    def min_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_version", value)

    @property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of dependency publisher.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "publisher", value)


if not MYPY:
    class PrivateLinkServiceConnectionStateArgsDict(TypedDict):
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        actions_required: NotRequired[pulumi.Input[builtins.str]]
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        The reason for approval/rejection of the connection.
        """
        status: NotRequired[pulumi.Input[Union[builtins.str, 'PrivateEndpointServiceConnectionStatus']]]
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
elif False:
    PrivateLinkServiceConnectionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[Union[builtins.str, 'PrivateEndpointServiceConnectionStatus']]] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param pulumi.Input[builtins.str] actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param pulumi.Input[builtins.str] description: The reason for approval/rejection of the connection.
        :param pulumi.Input[Union[builtins.str, 'PrivateEndpointServiceConnectionStatus']] status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[builtins.str, 'PrivateEndpointServiceConnectionStatus']]]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[builtins.str, 'PrivateEndpointServiceConnectionStatus']]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class RegistrationInfoArgsDict(TypedDict):
        """
        Represents a RegistrationInfo definition.
        """
        expiration_time: NotRequired[pulumi.Input[builtins.str]]
        """
        Expiration time of registration token.
        """
        registration_token_operation: NotRequired[pulumi.Input[Union[builtins.str, 'RegistrationTokenOperation']]]
        """
        The type of resetting the token.
        """
        token: NotRequired[pulumi.Input[builtins.str]]
        """
        The registration token base64 encoded string.
        """
elif False:
    RegistrationInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegistrationInfoArgs:
    def __init__(__self__, *,
                 expiration_time: Optional[pulumi.Input[builtins.str]] = None,
                 registration_token_operation: Optional[pulumi.Input[Union[builtins.str, 'RegistrationTokenOperation']]] = None,
                 token: Optional[pulumi.Input[builtins.str]] = None):
        """
        Represents a RegistrationInfo definition.
        :param pulumi.Input[builtins.str] expiration_time: Expiration time of registration token.
        :param pulumi.Input[Union[builtins.str, 'RegistrationTokenOperation']] registration_token_operation: The type of resetting the token.
        :param pulumi.Input[builtins.str] token: The registration token base64 encoded string.
        """
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if registration_token_operation is not None:
            pulumi.set(__self__, "registration_token_operation", registration_token_operation)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Expiration time of registration token.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="registrationTokenOperation")
    def registration_token_operation(self) -> Optional[pulumi.Input[Union[builtins.str, 'RegistrationTokenOperation']]]:
        """
        The type of resetting the token.
        """
        return pulumi.get(self, "registration_token_operation")

    @registration_token_operation.setter
    def registration_token_operation(self, value: Optional[pulumi.Input[Union[builtins.str, 'RegistrationTokenOperation']]]):
        pulumi.set(self, "registration_token_operation", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The registration token base64 encoded string.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "token", value)


if not MYPY:
    class ResourceModelWithAllowedPropertySetIdentityArgsDict(TypedDict):
        type: NotRequired[pulumi.Input['ResourceIdentityType']]
        """
        The identity type.
        """
elif False:
    ResourceModelWithAllowedPropertySetIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceModelWithAllowedPropertySetIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None):
        """
        :param pulumi.Input['ResourceIdentityType'] type: The identity type.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ResourceIdentityType']]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ResourceIdentityType']]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ResourceModelWithAllowedPropertySetPlanArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        A user defined name of the 3rd Party Artifact that is being procured.
        """
        product: pulumi.Input[builtins.str]
        """
        The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        """
        publisher: pulumi.Input[builtins.str]
        """
        The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        """
        promotion_code: NotRequired[pulumi.Input[builtins.str]]
        """
        A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        """
        version: NotRequired[pulumi.Input[builtins.str]]
        """
        The version of the desired product/artifact.
        """
elif False:
    ResourceModelWithAllowedPropertySetPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceModelWithAllowedPropertySetPlanArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 product: pulumi.Input[builtins.str],
                 publisher: pulumi.Input[builtins.str],
                 promotion_code: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: A user defined name of the 3rd Party Artifact that is being procured.
        :param pulumi.Input[builtins.str] product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        :param pulumi.Input[builtins.str] publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        :param pulumi.Input[builtins.str] promotion_code: A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        :param pulumi.Input[builtins.str] version: The version of the desired product/artifact.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "publisher", publisher)
        if promotion_code is not None:
            pulumi.set(__self__, "promotion_code", promotion_code)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        A user defined name of the 3rd Party Artifact that is being procured.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[builtins.str]:
        """
        The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[builtins.str]:
        """
        The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="promotionCode")
    def promotion_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        """
        return pulumi.get(self, "promotion_code")

    @promotion_code.setter
    def promotion_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "promotion_code", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The version of the desired product/artifact.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ResourceModelWithAllowedPropertySetSkuArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[builtins.int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[builtins.str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[builtins.str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    ResourceModelWithAllowedPropertySetSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceModelWithAllowedPropertySetSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 capacity: Optional[pulumi.Input[builtins.int]] = None,
                 family: Optional[pulumi.Input[builtins.str]] = None,
                 size: Optional[pulumi.Input[builtins.str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        :param pulumi.Input[builtins.str] name: The name of the SKU. E.g. P3. It is typically a letter+number code
        :param pulumi.Input[builtins.int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[builtins.str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[builtins.str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the SKU. E.g. P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class ScalingHostPoolReferenceArgsDict(TypedDict):
        """
        Scaling plan reference to hostpool.
        """
        host_pool_arm_path: NotRequired[pulumi.Input[builtins.str]]
        """
        Arm path of referenced hostpool.
        """
        scaling_plan_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Is the scaling plan enabled for this hostpool.
        """
elif False:
    ScalingHostPoolReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScalingHostPoolReferenceArgs:
    def __init__(__self__, *,
                 host_pool_arm_path: Optional[pulumi.Input[builtins.str]] = None,
                 scaling_plan_enabled: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Scaling plan reference to hostpool.
        :param pulumi.Input[builtins.str] host_pool_arm_path: Arm path of referenced hostpool.
        :param pulumi.Input[builtins.bool] scaling_plan_enabled: Is the scaling plan enabled for this hostpool.
        """
        if host_pool_arm_path is not None:
            pulumi.set(__self__, "host_pool_arm_path", host_pool_arm_path)
        if scaling_plan_enabled is not None:
            pulumi.set(__self__, "scaling_plan_enabled", scaling_plan_enabled)

    @property
    @pulumi.getter(name="hostPoolArmPath")
    def host_pool_arm_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Arm path of referenced hostpool.
        """
        return pulumi.get(self, "host_pool_arm_path")

    @host_pool_arm_path.setter
    def host_pool_arm_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host_pool_arm_path", value)

    @property
    @pulumi.getter(name="scalingPlanEnabled")
    def scaling_plan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Is the scaling plan enabled for this hostpool.
        """
        return pulumi.get(self, "scaling_plan_enabled")

    @scaling_plan_enabled.setter
    def scaling_plan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "scaling_plan_enabled", value)


if not MYPY:
    class ScalingScheduleArgsDict(TypedDict):
        """
        A ScalingPlanPooledSchedule.
        """
        days_of_week: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Set of days of the week on which this schedule is active.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the ScalingPlanPooledSchedule.
        """
        off_peak_load_balancing_algorithm: NotRequired[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]
        """
        Load balancing algorithm for off-peak period.
        """
        off_peak_start_time: NotRequired[pulumi.Input['TimeArgsDict']]
        """
        Starting time for off-peak period.
        """
        peak_load_balancing_algorithm: NotRequired[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]
        """
        Load balancing algorithm for peak period.
        """
        peak_start_time: NotRequired[pulumi.Input['TimeArgsDict']]
        """
        Starting time for peak period.
        """
        ramp_down_capacity_threshold_pct: NotRequired[pulumi.Input[builtins.int]]
        """
        Capacity threshold for ramp down period.
        """
        ramp_down_force_logoff_users: NotRequired[pulumi.Input[builtins.bool]]
        """
        Should users be logged off forcefully from hosts.
        """
        ramp_down_load_balancing_algorithm: NotRequired[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]
        """
        Load balancing algorithm for ramp down period.
        """
        ramp_down_minimum_hosts_pct: NotRequired[pulumi.Input[builtins.int]]
        """
        Minimum host percentage for ramp down period.
        """
        ramp_down_notification_message: NotRequired[pulumi.Input[builtins.str]]
        """
        Notification message for users during ramp down period.
        """
        ramp_down_start_time: NotRequired[pulumi.Input['TimeArgsDict']]
        """
        Starting time for ramp down period.
        """
        ramp_down_stop_hosts_when: NotRequired[pulumi.Input[Union[builtins.str, 'StopHostsWhen']]]
        """
        Specifies when to stop hosts during ramp down period.
        """
        ramp_down_wait_time_minutes: NotRequired[pulumi.Input[builtins.int]]
        """
        Number of minutes to wait to stop hosts during ramp down period.
        """
        ramp_up_capacity_threshold_pct: NotRequired[pulumi.Input[builtins.int]]
        """
        Capacity threshold for ramp up period.
        """
        ramp_up_load_balancing_algorithm: NotRequired[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]
        """
        Load balancing algorithm for ramp up period.
        """
        ramp_up_minimum_hosts_pct: NotRequired[pulumi.Input[builtins.int]]
        """
        Minimum host percentage for ramp up period.
        """
        ramp_up_start_time: NotRequired[pulumi.Input['TimeArgsDict']]
        """
        Starting time for ramp up period.
        """
elif False:
    ScalingScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScalingScheduleArgs:
    def __init__(__self__, *,
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 off_peak_load_balancing_algorithm: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]] = None,
                 off_peak_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 peak_load_balancing_algorithm: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]] = None,
                 peak_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 ramp_down_capacity_threshold_pct: Optional[pulumi.Input[builtins.int]] = None,
                 ramp_down_force_logoff_users: Optional[pulumi.Input[builtins.bool]] = None,
                 ramp_down_load_balancing_algorithm: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]] = None,
                 ramp_down_minimum_hosts_pct: Optional[pulumi.Input[builtins.int]] = None,
                 ramp_down_notification_message: Optional[pulumi.Input[builtins.str]] = None,
                 ramp_down_start_time: Optional[pulumi.Input['TimeArgs']] = None,
                 ramp_down_stop_hosts_when: Optional[pulumi.Input[Union[builtins.str, 'StopHostsWhen']]] = None,
                 ramp_down_wait_time_minutes: Optional[pulumi.Input[builtins.int]] = None,
                 ramp_up_capacity_threshold_pct: Optional[pulumi.Input[builtins.int]] = None,
                 ramp_up_load_balancing_algorithm: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]] = None,
                 ramp_up_minimum_hosts_pct: Optional[pulumi.Input[builtins.int]] = None,
                 ramp_up_start_time: Optional[pulumi.Input['TimeArgs']] = None):
        """
        A ScalingPlanPooledSchedule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] days_of_week: Set of days of the week on which this schedule is active.
        :param pulumi.Input[builtins.str] name: Name of the ScalingPlanPooledSchedule.
        :param pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']] off_peak_load_balancing_algorithm: Load balancing algorithm for off-peak period.
        :param pulumi.Input['TimeArgs'] off_peak_start_time: Starting time for off-peak period.
        :param pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']] peak_load_balancing_algorithm: Load balancing algorithm for peak period.
        :param pulumi.Input['TimeArgs'] peak_start_time: Starting time for peak period.
        :param pulumi.Input[builtins.int] ramp_down_capacity_threshold_pct: Capacity threshold for ramp down period.
        :param pulumi.Input[builtins.bool] ramp_down_force_logoff_users: Should users be logged off forcefully from hosts.
        :param pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']] ramp_down_load_balancing_algorithm: Load balancing algorithm for ramp down period.
        :param pulumi.Input[builtins.int] ramp_down_minimum_hosts_pct: Minimum host percentage for ramp down period.
        :param pulumi.Input[builtins.str] ramp_down_notification_message: Notification message for users during ramp down period.
        :param pulumi.Input['TimeArgs'] ramp_down_start_time: Starting time for ramp down period.
        :param pulumi.Input[Union[builtins.str, 'StopHostsWhen']] ramp_down_stop_hosts_when: Specifies when to stop hosts during ramp down period.
        :param pulumi.Input[builtins.int] ramp_down_wait_time_minutes: Number of minutes to wait to stop hosts during ramp down period.
        :param pulumi.Input[builtins.int] ramp_up_capacity_threshold_pct: Capacity threshold for ramp up period.
        :param pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']] ramp_up_load_balancing_algorithm: Load balancing algorithm for ramp up period.
        :param pulumi.Input[builtins.int] ramp_up_minimum_hosts_pct: Minimum host percentage for ramp up period.
        :param pulumi.Input['TimeArgs'] ramp_up_start_time: Starting time for ramp up period.
        """
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if off_peak_load_balancing_algorithm is not None:
            pulumi.set(__self__, "off_peak_load_balancing_algorithm", off_peak_load_balancing_algorithm)
        if off_peak_start_time is not None:
            pulumi.set(__self__, "off_peak_start_time", off_peak_start_time)
        if peak_load_balancing_algorithm is not None:
            pulumi.set(__self__, "peak_load_balancing_algorithm", peak_load_balancing_algorithm)
        if peak_start_time is not None:
            pulumi.set(__self__, "peak_start_time", peak_start_time)
        if ramp_down_capacity_threshold_pct is not None:
            pulumi.set(__self__, "ramp_down_capacity_threshold_pct", ramp_down_capacity_threshold_pct)
        if ramp_down_force_logoff_users is not None:
            pulumi.set(__self__, "ramp_down_force_logoff_users", ramp_down_force_logoff_users)
        if ramp_down_load_balancing_algorithm is not None:
            pulumi.set(__self__, "ramp_down_load_balancing_algorithm", ramp_down_load_balancing_algorithm)
        if ramp_down_minimum_hosts_pct is not None:
            pulumi.set(__self__, "ramp_down_minimum_hosts_pct", ramp_down_minimum_hosts_pct)
        if ramp_down_notification_message is not None:
            pulumi.set(__self__, "ramp_down_notification_message", ramp_down_notification_message)
        if ramp_down_start_time is not None:
            pulumi.set(__self__, "ramp_down_start_time", ramp_down_start_time)
        if ramp_down_stop_hosts_when is not None:
            pulumi.set(__self__, "ramp_down_stop_hosts_when", ramp_down_stop_hosts_when)
        if ramp_down_wait_time_minutes is not None:
            pulumi.set(__self__, "ramp_down_wait_time_minutes", ramp_down_wait_time_minutes)
        if ramp_up_capacity_threshold_pct is not None:
            pulumi.set(__self__, "ramp_up_capacity_threshold_pct", ramp_up_capacity_threshold_pct)
        if ramp_up_load_balancing_algorithm is not None:
            pulumi.set(__self__, "ramp_up_load_balancing_algorithm", ramp_up_load_balancing_algorithm)
        if ramp_up_minimum_hosts_pct is not None:
            pulumi.set(__self__, "ramp_up_minimum_hosts_pct", ramp_up_minimum_hosts_pct)
        if ramp_up_start_time is not None:
            pulumi.set(__self__, "ramp_up_start_time", ramp_up_start_time)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Set of days of the week on which this schedule is active.
        """
        return pulumi.get(self, "days_of_week")

    @days_of_week.setter
    def days_of_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "days_of_week", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the ScalingPlanPooledSchedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="offPeakLoadBalancingAlgorithm")
    def off_peak_load_balancing_algorithm(self) -> Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]:
        """
        Load balancing algorithm for off-peak period.
        """
        return pulumi.get(self, "off_peak_load_balancing_algorithm")

    @off_peak_load_balancing_algorithm.setter
    def off_peak_load_balancing_algorithm(self, value: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]):
        pulumi.set(self, "off_peak_load_balancing_algorithm", value)

    @property
    @pulumi.getter(name="offPeakStartTime")
    def off_peak_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for off-peak period.
        """
        return pulumi.get(self, "off_peak_start_time")

    @off_peak_start_time.setter
    def off_peak_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "off_peak_start_time", value)

    @property
    @pulumi.getter(name="peakLoadBalancingAlgorithm")
    def peak_load_balancing_algorithm(self) -> Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]:
        """
        Load balancing algorithm for peak period.
        """
        return pulumi.get(self, "peak_load_balancing_algorithm")

    @peak_load_balancing_algorithm.setter
    def peak_load_balancing_algorithm(self, value: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]):
        pulumi.set(self, "peak_load_balancing_algorithm", value)

    @property
    @pulumi.getter(name="peakStartTime")
    def peak_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for peak period.
        """
        return pulumi.get(self, "peak_start_time")

    @peak_start_time.setter
    def peak_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "peak_start_time", value)

    @property
    @pulumi.getter(name="rampDownCapacityThresholdPct")
    def ramp_down_capacity_threshold_pct(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Capacity threshold for ramp down period.
        """
        return pulumi.get(self, "ramp_down_capacity_threshold_pct")

    @ramp_down_capacity_threshold_pct.setter
    def ramp_down_capacity_threshold_pct(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ramp_down_capacity_threshold_pct", value)

    @property
    @pulumi.getter(name="rampDownForceLogoffUsers")
    def ramp_down_force_logoff_users(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Should users be logged off forcefully from hosts.
        """
        return pulumi.get(self, "ramp_down_force_logoff_users")

    @ramp_down_force_logoff_users.setter
    def ramp_down_force_logoff_users(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ramp_down_force_logoff_users", value)

    @property
    @pulumi.getter(name="rampDownLoadBalancingAlgorithm")
    def ramp_down_load_balancing_algorithm(self) -> Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]:
        """
        Load balancing algorithm for ramp down period.
        """
        return pulumi.get(self, "ramp_down_load_balancing_algorithm")

    @ramp_down_load_balancing_algorithm.setter
    def ramp_down_load_balancing_algorithm(self, value: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]):
        pulumi.set(self, "ramp_down_load_balancing_algorithm", value)

    @property
    @pulumi.getter(name="rampDownMinimumHostsPct")
    def ramp_down_minimum_hosts_pct(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Minimum host percentage for ramp down period.
        """
        return pulumi.get(self, "ramp_down_minimum_hosts_pct")

    @ramp_down_minimum_hosts_pct.setter
    def ramp_down_minimum_hosts_pct(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ramp_down_minimum_hosts_pct", value)

    @property
    @pulumi.getter(name="rampDownNotificationMessage")
    def ramp_down_notification_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Notification message for users during ramp down period.
        """
        return pulumi.get(self, "ramp_down_notification_message")

    @ramp_down_notification_message.setter
    def ramp_down_notification_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ramp_down_notification_message", value)

    @property
    @pulumi.getter(name="rampDownStartTime")
    def ramp_down_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for ramp down period.
        """
        return pulumi.get(self, "ramp_down_start_time")

    @ramp_down_start_time.setter
    def ramp_down_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "ramp_down_start_time", value)

    @property
    @pulumi.getter(name="rampDownStopHostsWhen")
    def ramp_down_stop_hosts_when(self) -> Optional[pulumi.Input[Union[builtins.str, 'StopHostsWhen']]]:
        """
        Specifies when to stop hosts during ramp down period.
        """
        return pulumi.get(self, "ramp_down_stop_hosts_when")

    @ramp_down_stop_hosts_when.setter
    def ramp_down_stop_hosts_when(self, value: Optional[pulumi.Input[Union[builtins.str, 'StopHostsWhen']]]):
        pulumi.set(self, "ramp_down_stop_hosts_when", value)

    @property
    @pulumi.getter(name="rampDownWaitTimeMinutes")
    def ramp_down_wait_time_minutes(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of minutes to wait to stop hosts during ramp down period.
        """
        return pulumi.get(self, "ramp_down_wait_time_minutes")

    @ramp_down_wait_time_minutes.setter
    def ramp_down_wait_time_minutes(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ramp_down_wait_time_minutes", value)

    @property
    @pulumi.getter(name="rampUpCapacityThresholdPct")
    def ramp_up_capacity_threshold_pct(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Capacity threshold for ramp up period.
        """
        return pulumi.get(self, "ramp_up_capacity_threshold_pct")

    @ramp_up_capacity_threshold_pct.setter
    def ramp_up_capacity_threshold_pct(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ramp_up_capacity_threshold_pct", value)

    @property
    @pulumi.getter(name="rampUpLoadBalancingAlgorithm")
    def ramp_up_load_balancing_algorithm(self) -> Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]:
        """
        Load balancing algorithm for ramp up period.
        """
        return pulumi.get(self, "ramp_up_load_balancing_algorithm")

    @ramp_up_load_balancing_algorithm.setter
    def ramp_up_load_balancing_algorithm(self, value: Optional[pulumi.Input[Union[builtins.str, 'SessionHostLoadBalancingAlgorithm']]]):
        pulumi.set(self, "ramp_up_load_balancing_algorithm", value)

    @property
    @pulumi.getter(name="rampUpMinimumHostsPct")
    def ramp_up_minimum_hosts_pct(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Minimum host percentage for ramp up period.
        """
        return pulumi.get(self, "ramp_up_minimum_hosts_pct")

    @ramp_up_minimum_hosts_pct.setter
    def ramp_up_minimum_hosts_pct(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ramp_up_minimum_hosts_pct", value)

    @property
    @pulumi.getter(name="rampUpStartTime")
    def ramp_up_start_time(self) -> Optional[pulumi.Input['TimeArgs']]:
        """
        Starting time for ramp up period.
        """
        return pulumi.get(self, "ramp_up_start_time")

    @ramp_up_start_time.setter
    def ramp_up_start_time(self, value: Optional[pulumi.Input['TimeArgs']]):
        pulumi.set(self, "ramp_up_start_time", value)


if not MYPY:
    class TimeArgsDict(TypedDict):
        """
        The time for a scaling action to occur.
        """
        hour: pulumi.Input[builtins.int]
        """
        The hour.
        """
        minute: pulumi.Input[builtins.int]
        """
        The minute.
        """
elif False:
    TimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TimeArgs:
    def __init__(__self__, *,
                 hour: pulumi.Input[builtins.int],
                 minute: pulumi.Input[builtins.int]):
        """
        The time for a scaling action to occur.
        :param pulumi.Input[builtins.int] hour: The hour.
        :param pulumi.Input[builtins.int] minute: The minute.
        """
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "minute", minute)

    @property
    @pulumi.getter
    def hour(self) -> pulumi.Input[builtins.int]:
        """
        The hour.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def minute(self) -> pulumi.Input[builtins.int]:
        """
        The minute.
        """
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "minute", value)


