# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AppAttachPackageArgs', 'AppAttachPackage']

@pulumi.input_type
class AppAttachPackageArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 app_attach_package_name: Optional[pulumi.Input[str]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 fail_health_check_on_staging_failure: Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]] = None,
                 host_pool_references: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']] = None,
                 key_vault_url: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 package_lookback_url: Optional[pulumi.Input[str]] = None,
                 package_owner_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a AppAttachPackage resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] app_attach_package_name: The name of the App Attach package
        :param pulumi.Input[str] custom_data: Field that can be populated with custom data and filtered on in list GET calls
        :param pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']] fail_health_check_on_staging_failure: Parameter indicating how the health check should behave if this package fails staging
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_pool_references: List of Hostpool resource Ids.
        :param pulumi.Input['AppAttachPackageInfoPropertiesArgs'] image: Detailed properties for App Attach Package
        :param pulumi.Input[str] key_vault_url: URL path to certificate name located in keyVault
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] package_lookback_url: Lookback url to third party control plane, is null for native app attach packages
        :param pulumi.Input[str] package_owner_name: Specific name of package owner, is "AppAttach" for native app attach packages
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if app_attach_package_name is not None:
            pulumi.set(__self__, "app_attach_package_name", app_attach_package_name)
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)
        if fail_health_check_on_staging_failure is not None:
            pulumi.set(__self__, "fail_health_check_on_staging_failure", fail_health_check_on_staging_failure)
        if host_pool_references is not None:
            pulumi.set(__self__, "host_pool_references", host_pool_references)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if key_vault_url is not None:
            pulumi.set(__self__, "key_vault_url", key_vault_url)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if package_lookback_url is not None:
            pulumi.set(__self__, "package_lookback_url", package_lookback_url)
        if package_owner_name is not None:
            pulumi.set(__self__, "package_owner_name", package_owner_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="appAttachPackageName")
    def app_attach_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the App Attach package
        """
        return pulumi.get(self, "app_attach_package_name")

    @app_attach_package_name.setter
    def app_attach_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_attach_package_name", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        """
        Field that can be populated with custom data and filtered on in list GET calls
        """
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="failHealthCheckOnStagingFailure")
    def fail_health_check_on_staging_failure(self) -> Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]]:
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        return pulumi.get(self, "fail_health_check_on_staging_failure")

    @fail_health_check_on_staging_failure.setter
    def fail_health_check_on_staging_failure(self, value: Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]]):
        pulumi.set(self, "fail_health_check_on_staging_failure", value)

    @property
    @pulumi.getter(name="hostPoolReferences")
    def host_pool_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Hostpool resource Ids.
        """
        return pulumi.get(self, "host_pool_references")

    @host_pool_references.setter
    def host_pool_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_pool_references", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']]:
        """
        Detailed properties for App Attach Package
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="keyVaultURL")
    def key_vault_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL path to certificate name located in keyVault
        """
        return pulumi.get(self, "key_vault_url")

    @key_vault_url.setter
    def key_vault_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_url", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="packageLookbackUrl")
    def package_lookback_url(self) -> Optional[pulumi.Input[str]]:
        """
        Lookback url to third party control plane, is null for native app attach packages
        """
        return pulumi.get(self, "package_lookback_url")

    @package_lookback_url.setter
    def package_lookback_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_lookback_url", value)

    @property
    @pulumi.getter(name="packageOwnerName")
    def package_owner_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specific name of package owner, is "AppAttach" for native app attach packages
        """
        return pulumi.get(self, "package_owner_name")

    @package_owner_name.setter
    def package_owner_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_owner_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class AppAttachPackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_attach_package_name: Optional[pulumi.Input[str]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 fail_health_check_on_staging_failure: Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]] = None,
                 host_pool_references: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[Union['AppAttachPackageInfoPropertiesArgs', 'AppAttachPackageInfoPropertiesArgsDict']]] = None,
                 key_vault_url: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 package_lookback_url: Optional[pulumi.Input[str]] = None,
                 package_owner_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Schema for App Attach Package properties.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_attach_package_name: The name of the App Attach package
        :param pulumi.Input[str] custom_data: Field that can be populated with custom data and filtered on in list GET calls
        :param pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']] fail_health_check_on_staging_failure: Parameter indicating how the health check should behave if this package fails staging
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_pool_references: List of Hostpool resource Ids.
        :param pulumi.Input[Union['AppAttachPackageInfoPropertiesArgs', 'AppAttachPackageInfoPropertiesArgsDict']] image: Detailed properties for App Attach Package
        :param pulumi.Input[str] key_vault_url: URL path to certificate name located in keyVault
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] package_lookback_url: Lookback url to third party control plane, is null for native app attach packages
        :param pulumi.Input[str] package_owner_name: Specific name of package owner, is "AppAttach" for native app attach packages
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppAttachPackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Schema for App Attach Package properties.

        :param str resource_name: The name of the resource.
        :param AppAttachPackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppAttachPackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_attach_package_name: Optional[pulumi.Input[str]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 fail_health_check_on_staging_failure: Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]] = None,
                 host_pool_references: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[Union['AppAttachPackageInfoPropertiesArgs', 'AppAttachPackageInfoPropertiesArgsDict']]] = None,
                 key_vault_url: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 package_lookback_url: Optional[pulumi.Input[str]] = None,
                 package_owner_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppAttachPackageArgs.__new__(AppAttachPackageArgs)

            __props__.__dict__["app_attach_package_name"] = app_attach_package_name
            __props__.__dict__["custom_data"] = custom_data
            __props__.__dict__["fail_health_check_on_staging_failure"] = fail_health_check_on_staging_failure
            __props__.__dict__["host_pool_references"] = host_pool_references
            __props__.__dict__["image"] = image
            __props__.__dict__["key_vault_url"] = key_vault_url
            __props__.__dict__["location"] = location
            __props__.__dict__["package_lookback_url"] = package_lookback_url
            __props__.__dict__["package_owner_name"] = package_owner_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:desktopvirtualization/v20231004preview:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20231101preview:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20240116preview:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20240306preview:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20240403:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20240408preview:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization/v20241101preview:AppAttachPackage"), pulumi.Alias(type_="azure-native:desktopvirtualization:AppAttachPackage")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(AppAttachPackage, __self__).__init__(
            'azure-native:desktopvirtualization/v20240808preview:AppAttachPackage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AppAttachPackage':
        """
        Get an existing AppAttachPackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AppAttachPackageArgs.__new__(AppAttachPackageArgs)

        __props__.__dict__["custom_data"] = None
        __props__.__dict__["fail_health_check_on_staging_failure"] = None
        __props__.__dict__["host_pool_references"] = None
        __props__.__dict__["image"] = None
        __props__.__dict__["key_vault_url"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["package_lookback_url"] = None
        __props__.__dict__["package_owner_name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return AppAttachPackage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> pulumi.Output[Optional[str]]:
        """
        Field that can be populated with custom data and filtered on in list GET calls
        """
        return pulumi.get(self, "custom_data")

    @property
    @pulumi.getter(name="failHealthCheckOnStagingFailure")
    def fail_health_check_on_staging_failure(self) -> pulumi.Output[Optional[str]]:
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        return pulumi.get(self, "fail_health_check_on_staging_failure")

    @property
    @pulumi.getter(name="hostPoolReferences")
    def host_pool_references(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of Hostpool resource Ids.
        """
        return pulumi.get(self, "host_pool_references")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output[Optional['outputs.AppAttachPackageInfoPropertiesResponse']]:
        """
        Detailed properties for App Attach Package
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="keyVaultURL")
    def key_vault_url(self) -> pulumi.Output[Optional[str]]:
        """
        URL path to certificate name located in keyVault
        """
        return pulumi.get(self, "key_vault_url")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageLookbackUrl")
    def package_lookback_url(self) -> pulumi.Output[Optional[str]]:
        """
        Lookback url to third party control plane, is null for native app attach packages
        """
        return pulumi.get(self, "package_lookback_url")

    @property
    @pulumi.getter(name="packageOwnerName")
    def package_owner_name(self) -> pulumi.Output[Optional[str]]:
        """
        Specific name of package owner, is "AppAttach" for native app attach packages
        """
        return pulumi.get(self, "package_owner_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the App Attach Package.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

