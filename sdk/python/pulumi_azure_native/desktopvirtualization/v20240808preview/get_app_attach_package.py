# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetAppAttachPackageResult',
    'AwaitableGetAppAttachPackageResult',
    'get_app_attach_package',
    'get_app_attach_package_output',
]

@pulumi.output_type
class GetAppAttachPackageResult:
    """
    Schema for App Attach Package properties.
    """
    def __init__(__self__, custom_data=None, fail_health_check_on_staging_failure=None, host_pool_references=None, id=None, image=None, key_vault_url=None, location=None, name=None, package_lookback_url=None, package_owner_name=None, provisioning_state=None, system_data=None, tags=None, type=None):
        if custom_data and not isinstance(custom_data, str):
            raise TypeError("Expected argument 'custom_data' to be a str")
        pulumi.set(__self__, "custom_data", custom_data)
        if fail_health_check_on_staging_failure and not isinstance(fail_health_check_on_staging_failure, str):
            raise TypeError("Expected argument 'fail_health_check_on_staging_failure' to be a str")
        pulumi.set(__self__, "fail_health_check_on_staging_failure", fail_health_check_on_staging_failure)
        if host_pool_references and not isinstance(host_pool_references, list):
            raise TypeError("Expected argument 'host_pool_references' to be a list")
        pulumi.set(__self__, "host_pool_references", host_pool_references)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, dict):
            raise TypeError("Expected argument 'image' to be a dict")
        pulumi.set(__self__, "image", image)
        if key_vault_url and not isinstance(key_vault_url, str):
            raise TypeError("Expected argument 'key_vault_url' to be a str")
        pulumi.set(__self__, "key_vault_url", key_vault_url)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if package_lookback_url and not isinstance(package_lookback_url, str):
            raise TypeError("Expected argument 'package_lookback_url' to be a str")
        pulumi.set(__self__, "package_lookback_url", package_lookback_url)
        if package_owner_name and not isinstance(package_owner_name, str):
            raise TypeError("Expected argument 'package_owner_name' to be a str")
        pulumi.set(__self__, "package_owner_name", package_owner_name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[str]:
        """
        Field that can be populated with custom data and filtered on in list GET calls
        """
        return pulumi.get(self, "custom_data")

    @property
    @pulumi.getter(name="failHealthCheckOnStagingFailure")
    def fail_health_check_on_staging_failure(self) -> Optional[str]:
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        return pulumi.get(self, "fail_health_check_on_staging_failure")

    @property
    @pulumi.getter(name="hostPoolReferences")
    def host_pool_references(self) -> Optional[Sequence[str]]:
        """
        List of Hostpool resource Ids.
        """
        return pulumi.get(self, "host_pool_references")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.AppAttachPackageInfoPropertiesResponse']:
        """
        Detailed properties for App Attach Package
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="keyVaultURL")
    def key_vault_url(self) -> Optional[str]:
        """
        URL path to certificate name located in keyVault
        """
        return pulumi.get(self, "key_vault_url")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageLookbackUrl")
    def package_lookback_url(self) -> Optional[str]:
        """
        Lookback url to third party control plane, is null for native app attach packages
        """
        return pulumi.get(self, "package_lookback_url")

    @property
    @pulumi.getter(name="packageOwnerName")
    def package_owner_name(self) -> Optional[str]:
        """
        Specific name of package owner, is "AppAttach" for native app attach packages
        """
        return pulumi.get(self, "package_owner_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the App Attach Package.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAppAttachPackageResult(GetAppAttachPackageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppAttachPackageResult(
            custom_data=self.custom_data,
            fail_health_check_on_staging_failure=self.fail_health_check_on_staging_failure,
            host_pool_references=self.host_pool_references,
            id=self.id,
            image=self.image,
            key_vault_url=self.key_vault_url,
            location=self.location,
            name=self.name,
            package_lookback_url=self.package_lookback_url,
            package_owner_name=self.package_owner_name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_app_attach_package(app_attach_package_name: Optional[str] = None,
                           resource_group_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppAttachPackageResult:
    """
    Get an app attach package.


    :param str app_attach_package_name: The name of the App Attach package
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['appAttachPackageName'] = app_attach_package_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:desktopvirtualization/v20240808preview:getAppAttachPackage', __args__, opts=opts, typ=GetAppAttachPackageResult).value

    return AwaitableGetAppAttachPackageResult(
        custom_data=pulumi.get(__ret__, 'custom_data'),
        fail_health_check_on_staging_failure=pulumi.get(__ret__, 'fail_health_check_on_staging_failure'),
        host_pool_references=pulumi.get(__ret__, 'host_pool_references'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        key_vault_url=pulumi.get(__ret__, 'key_vault_url'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        package_lookback_url=pulumi.get(__ret__, 'package_lookback_url'),
        package_owner_name=pulumi.get(__ret__, 'package_owner_name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_app_attach_package_output(app_attach_package_name: Optional[pulumi.Input[str]] = None,
                                  resource_group_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppAttachPackageResult]:
    """
    Get an app attach package.


    :param str app_attach_package_name: The name of the App Attach package
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['appAttachPackageName'] = app_attach_package_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:desktopvirtualization/v20240808preview:getAppAttachPackage', __args__, opts=opts, typ=GetAppAttachPackageResult)
    return __ret__.apply(lambda __response__: GetAppAttachPackageResult(
        custom_data=pulumi.get(__response__, 'custom_data'),
        fail_health_check_on_staging_failure=pulumi.get(__response__, 'fail_health_check_on_staging_failure'),
        host_pool_references=pulumi.get(__response__, 'host_pool_references'),
        id=pulumi.get(__response__, 'id'),
        image=pulumi.get(__response__, 'image'),
        key_vault_url=pulumi.get(__response__, 'key_vault_url'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        package_lookback_url=pulumi.get(__response__, 'package_lookback_url'),
        package_owner_name=pulumi.get(__response__, 'package_owner_name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
