# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'ApplicationGroupType',
    'CommandLineSetting',
    'DayOfWeek',
    'DirectUDP',
    'FailHealthCheckOnStagingFailure',
    'HostPoolType',
    'HostpoolPublicNetworkAccess',
    'LoadBalancerType',
    'ManagedPrivateUDP',
    'ManagedServiceIdentityType',
    'ManagementType',
    'PackageTimestamped',
    'PersonalDesktopAssignmentType',
    'PreferredAppGroupType',
    'PrivateEndpointServiceConnectionStatus',
    'PublicNetworkAccess',
    'PublicUDP',
    'RegistrationTokenOperation',
    'RelayUDP',
    'RemoteApplicationType',
    'SSOSecretType',
    'ScalingHostPoolType',
    'SessionHandlingOperation',
    'SessionHostComponentUpdateType',
    'SessionHostLoadBalancingAlgorithm',
    'SetStartVMOnConnect',
    'SkuTier',
    'StartupBehavior',
    'StopHostsWhen',
]


class ApplicationGroupType(str, Enum):
    """
    Resource Type of ApplicationGroup.
    """
    REMOTE_APP = "RemoteApp"
    """
    Application group is Remote and can launch individual applications without a Desktop.
    """
    DESKTOP = "Desktop"
    """
    Application Group delivers a full expected Desktop experience
    """


class CommandLineSetting(str, Enum):
    """
    Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
    """
    DO_NOT_ALLOW = "DoNotAllow"
    """
    Cannot be launched with command line arguments.
    """
    ALLOW = "Allow"
    """
    Can optionally be launched with command line arguments.
    """
    REQUIRE = "Require"
    """
    Required to be launched with command line arguments.
    """


class DayOfWeek(str, Enum):
    """
    Day of the week. Modeled as string
    """
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"


class DirectUDP(str, Enum):
    """
    Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
    """
    DEFAULT = "Default"
    """
    AVD-wide settings are used to determine connection availability
    """
    ENABLED = "Enabled"
    """
    UDP will attempt this connection type when making connections.
    """
    DISABLED = "Disabled"
    """
    UDP will not attempt this connection type when making connections
    """


class FailHealthCheckOnStagingFailure(str, Enum):
    """
    Parameter indicating how the health check should behave if this package fails staging
    """
    UNHEALTHY = "Unhealthy"
    """
    Health Check will report unhealthy
    """
    NEEDS_ASSISTANCE = "NeedsAssistance"
    """
    Health Check will report NeedsAssistance
    """
    DO_NOT_FAIL = "DoNotFail"
    """
    Health Check will not report failure
    """


class HostPoolType(str, Enum):
    """
    HostPool type for desktop.
    """
    PERSONAL = "Personal"
    """
    Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
    """
    POOLED = "Pooled"
    """
    Users get a new (random) SessionHost every time it connects to the HostPool.
    """
    BYO_DESKTOP = "BYODesktop"
    """
    Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
    """


class HostpoolPublicNetworkAccess(str, Enum):
    """
    Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints
    """
    ENABLED = "Enabled"
    """
    Allows this resource to be accessed from the public network
    """
    DISABLED = "Disabled"
    """
    Prevents this resource from being accessed from the public network
    """
    ENABLED_FOR_SESSION_HOSTS_ONLY = "EnabledForSessionHostsOnly"
    """
    Allows SessionHosts to be accessed from the public network
    """
    ENABLED_FOR_CLIENTS_ONLY = "EnabledForClientsOnly"
    """
    Allows Clients to be accessed from the public network
    """


class LoadBalancerType(str, Enum):
    """
    The type of the load balancer.
    """
    BREADTH_FIRST = "BreadthFirst"
    """
    Uses BreadthFirst algorithm for load balancing.
    """
    DEPTH_FIRST = "DepthFirst"
    """
    Uses DepthFirst algorithm for load balancing.
    """
    PERSISTENT = "Persistent"
    """
    Maintains persistent connections.
    """
    MULTIPLE_PERSISTENT = "MultiplePersistent"
    """
    Maintains multiple persistents connections.
    """


class ManagedPrivateUDP(str, Enum):
    """
    Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
    """
    DEFAULT = "Default"
    """
    AVD-wide settings are used to determine connection availability
    """
    ENABLED = "Enabled"
    """
    UDP will attempt this connection type when making connections.
    """
    DISABLED = "Disabled"
    """
    UDP will not attempt this connection type when making connections
    """


class ManagedServiceIdentityType(str, Enum):
    """
    Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    """
    NONE = "None"
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned,UserAssigned"


class ManagementType(str, Enum):
    """
    The type of management for this hostpool, Automated or Standard. The default value is Automated.
    """
    AUTOMATED = "Automated"
    """
    Automated management of the hostpool
    """
    STANDARD = "Standard"
    """
    Standard management of the hostpool
    """


class PackageTimestamped(str, Enum):
    """
    Is package timestamped so it can ignore the certificate expiry date
    """
    TIMESTAMPED = "Timestamped"
    """
    Package is timestamped
    """
    NOT_TIMESTAMPED = "NotTimestamped"
    """
    Package is not timestamped, use certificate expiry date
    """


class PersonalDesktopAssignmentType(str, Enum):
    """
    PersonalDesktopAssignment type for HostPool.
    """
    AUTOMATIC = "Automatic"
    """
    Automatically assigns an available personal desktop to the user.
    """
    DIRECT = "Direct"
    """
    Manually assigns a specific personal desktop to the user.
    """


class PreferredAppGroupType(str, Enum):
    """
    The type of preferred application group type, default to Desktop Application Group
    """
    NONE = "None"
    """
    Internal Use Only
    """
    DESKTOP = "Desktop"
    """
    Use Desktop Application Group
    """
    RAIL_APPLICATIONS = "RailApplications"
    """
    Use RailApplications (RemoteApp)
    """


class PrivateEndpointServiceConnectionStatus(str, Enum):
    """
    Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    """
    PENDING = "Pending"
    """
    Connection is Pending
    """
    APPROVED = "Approved"
    """
    Connection was Approved
    """
    REJECTED = "Rejected"
    """
    Connection was rejected
    """


class PublicNetworkAccess(str, Enum):
    """
    Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints
    """
    ENABLED = "Enabled"
    """
    This resource is accessible from the public network.
    """
    DISABLED = "Disabled"
    """
    This resource is not accessible from the public network.
    """


class PublicUDP(str, Enum):
    """
    Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
    """
    DEFAULT = "Default"
    """
    AVD-wide settings are used to determine connection availability
    """
    ENABLED = "Enabled"
    """
    UDP will attempt this connection type when making connections.
    """
    DISABLED = "Disabled"
    """
    UDP will not attempt this connection type when making connections
    """


class RegistrationTokenOperation(str, Enum):
    """
    The type of resetting the token.
    """
    DELETE = "Delete"
    """
    Delete operation
    """
    NONE = "None"
    """
    No Operation
    """
    UPDATE = "Update"
    """
    Update Operation
    """


class RelayUDP(str, Enum):
    """
    Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
    """
    DEFAULT = "Default"
    """
    AVD-wide settings are used to determine connection availability
    """
    ENABLED = "Enabled"
    """
    UDP will attempt this connection type when making connections.
    """
    DISABLED = "Disabled"
    """
    UDP will not attempt this connection type when making connections
    """


class RemoteApplicationType(str, Enum):
    """
    Resource Type of Application.
    """
    IN_BUILT = "InBuilt"
    """
    Built-in applications
    """
    MSIX_APPLICATION = "MsixApplication"
    """
    Imported MSIX application packages
    """


class SSOSecretType(str, Enum):
    """
    The type of single sign on Secret Type.
    """
    SHARED_KEY = "SharedKey"
    """
    The SSO Secret is a Shared Key.
    """
    CERTIFICATE = "Certificate"
    """
    The SSO Secret is a Certificate.
    """
    SHARED_KEY_IN_KEY_VAULT = "SharedKeyInKeyVault"
    """
    The SSO Secret is a SharedKey that is stored in KeyVault.
    """
    CERTIFICATE_IN_KEY_VAULT = "CertificateInKeyVault"
    """
    The SSO Secret is a Certificate that is stored in KeyVault.
    """


class ScalingHostPoolType(str, Enum):
    """
    HostPool type for desktop.
    """
    POOLED = "Pooled"
    """
    Users get a new (random) SessionHost every time it connects to the HostPool.
    """
    PERSONAL = "Personal"
    """
    Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
    """


class SessionHandlingOperation(str, Enum):
    """
    Action to be taken after a logoff during the ramp up period.
    """
    NONE = "None"
    """
    No action will be taken after disconnect
    """
    DEALLOCATE = "Deallocate"
    """
    Session Host will be deallocated after disconnect
    """
    HIBERNATE = "Hibernate"
    """
    Session Host will hibernate after disconnect
    """


class SessionHostComponentUpdateType(str, Enum):
    """
    The type of maintenance for session host components.
    """
    DEFAULT = "Default"
    """
    Agent and other agent side components are delivery schedule is controlled by WVD Infra.
    """
    SCHEDULED = "Scheduled"
    """
    TenantAdmin have opted in for Scheduled Component Update feature.
    """


class SessionHostLoadBalancingAlgorithm(str, Enum):
    """
    Load balancing algorithm for ramp up period.
    """
    BREADTH_FIRST = "BreadthFirst"
    """
    Breadth First Algorithm for Load Balancing
    """
    DEPTH_FIRST = "DepthFirst"
    """
    Depth First Algorithm for Load Balancing
    """


class SetStartVMOnConnect(str, Enum):
    """
    The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
    """
    ENABLE = "Enable"
    """
    Start VM on Connect is enabled
    """
    DISABLE = "Disable"
    """
    Start VM on Connect is disabled, must use rampUpAutoStartHosts or turn on manually
    """


class SkuTier(str, Enum):
    """
    This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    """
    FREE = "Free"
    BASIC = "Basic"
    STANDARD = "Standard"
    PREMIUM = "Premium"


class StartupBehavior(str, Enum):
    """
    The desired startup behavior during the ramp up period for personal vms in the hostpool.
    """
    NONE = "None"
    """
    Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts.
    """
    WITH_ASSIGNED_USER = "WithAssignedUser"
    """
    Session hosts with an assigned user will be started during Ramp Up
    """
    ALL = "All"
    """
    All personal session hosts in the hostpool will be started during ramp up.
    """


class StopHostsWhen(str, Enum):
    """
    Specifies when to stop hosts during ramp down period.
    """
    ZERO_SESSIONS = "ZeroSessions"
    """
    Zero Total Sessions
    """
    ZERO_ACTIVE_SESSIONS = "ZeroActiveSessions"
    """
    Zero Active Sessions
    """
