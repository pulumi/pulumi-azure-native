# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AppAttachPackageInfoPropertiesArgs',
    'AppAttachPackageInfoPropertiesArgsDict',
    'AppAttachPackagePropertiesArgs',
    'AppAttachPackagePropertiesArgsDict',
    'MsixPackageApplicationsArgs',
    'MsixPackageApplicationsArgsDict',
    'MsixPackageDependenciesArgs',
    'MsixPackageDependenciesArgsDict',
    'ResourceModelWithAllowedPropertySetIdentityArgs',
    'ResourceModelWithAllowedPropertySetIdentityArgsDict',
    'ResourceModelWithAllowedPropertySetPlanArgs',
    'ResourceModelWithAllowedPropertySetPlanArgsDict',
    'ResourceModelWithAllowedPropertySetSkuArgs',
    'ResourceModelWithAllowedPropertySetSkuArgsDict',
]

MYPY = False

if not MYPY:
    class AppAttachPackageInfoPropertiesArgsDict(TypedDict):
        """
        Schema for Import Package Information properties.
        """
        certificate_expiry: NotRequired[pulumi.Input[str]]
        """
        Date certificate expires, found in the appxmanifest.xml. 
        """
        certificate_name: NotRequired[pulumi.Input[str]]
        """
        Certificate name found in the appxmanifest.xml. 
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        User friendly Name to be displayed in the portal. 
        """
        image_path: NotRequired[pulumi.Input[str]]
        """
        VHD/CIM image path on Network Share.
        """
        is_active: NotRequired[pulumi.Input[bool]]
        """
        Make this version of the package the active one across the hostpool. 
        """
        is_package_timestamped: NotRequired[pulumi.Input[Union[str, 'PackageTimestamped']]]
        """
        Is package timestamped so it can ignore the certificate expiry date
        """
        is_regular_registration: NotRequired[pulumi.Input[bool]]
        """
        Specifies how to register Package in feed.
        """
        last_updated: NotRequired[pulumi.Input[str]]
        """
        Date Package was last updated, found in the appxmanifest.xml. 
        """
        package_alias: NotRequired[pulumi.Input[str]]
        """
        Alias of App Attach Package. Assigned at import time
        """
        package_applications: NotRequired[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgsDict']]]]
        """
        List of package applications. 
        """
        package_dependencies: NotRequired[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgsDict']]]]
        """
        List of package dependencies. 
        """
        package_family_name: NotRequired[pulumi.Input[str]]
        """
        Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. 
        """
        package_full_name: NotRequired[pulumi.Input[str]]
        """
        Package Full Name from appxmanifest.xml. 
        """
        package_name: NotRequired[pulumi.Input[str]]
        """
        Package Name from appxmanifest.xml. 
        """
        package_relative_path: NotRequired[pulumi.Input[str]]
        """
        Relative Path to the package inside the image. 
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Package Version found in the appxmanifest.xml. 
        """
elif False:
    AppAttachPackageInfoPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppAttachPackageInfoPropertiesArgs:
    def __init__(__self__, *,
                 certificate_expiry: Optional[pulumi.Input[str]] = None,
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 image_path: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 is_package_timestamped: Optional[pulumi.Input[Union[str, 'PackageTimestamped']]] = None,
                 is_regular_registration: Optional[pulumi.Input[bool]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 package_alias: Optional[pulumi.Input[str]] = None,
                 package_applications: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]]] = None,
                 package_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]]] = None,
                 package_family_name: Optional[pulumi.Input[str]] = None,
                 package_full_name: Optional[pulumi.Input[str]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_relative_path: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Schema for Import Package Information properties.
        :param pulumi.Input[str] certificate_expiry: Date certificate expires, found in the appxmanifest.xml. 
        :param pulumi.Input[str] certificate_name: Certificate name found in the appxmanifest.xml. 
        :param pulumi.Input[str] display_name: User friendly Name to be displayed in the portal. 
        :param pulumi.Input[str] image_path: VHD/CIM image path on Network Share.
        :param pulumi.Input[bool] is_active: Make this version of the package the active one across the hostpool. 
        :param pulumi.Input[Union[str, 'PackageTimestamped']] is_package_timestamped: Is package timestamped so it can ignore the certificate expiry date
        :param pulumi.Input[bool] is_regular_registration: Specifies how to register Package in feed.
        :param pulumi.Input[str] last_updated: Date Package was last updated, found in the appxmanifest.xml. 
        :param pulumi.Input[str] package_alias: Alias of App Attach Package. Assigned at import time
        :param pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]] package_applications: List of package applications. 
        :param pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]] package_dependencies: List of package dependencies. 
        :param pulumi.Input[str] package_family_name: Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. 
        :param pulumi.Input[str] package_full_name: Package Full Name from appxmanifest.xml. 
        :param pulumi.Input[str] package_name: Package Name from appxmanifest.xml. 
        :param pulumi.Input[str] package_relative_path: Relative Path to the package inside the image. 
        :param pulumi.Input[str] version: Package Version found in the appxmanifest.xml. 
        """
        if certificate_expiry is not None:
            pulumi.set(__self__, "certificate_expiry", certificate_expiry)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if image_path is not None:
            pulumi.set(__self__, "image_path", image_path)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_package_timestamped is not None:
            pulumi.set(__self__, "is_package_timestamped", is_package_timestamped)
        if is_regular_registration is not None:
            pulumi.set(__self__, "is_regular_registration", is_regular_registration)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if package_alias is not None:
            pulumi.set(__self__, "package_alias", package_alias)
        if package_applications is not None:
            pulumi.set(__self__, "package_applications", package_applications)
        if package_dependencies is not None:
            pulumi.set(__self__, "package_dependencies", package_dependencies)
        if package_family_name is not None:
            pulumi.set(__self__, "package_family_name", package_family_name)
        if package_full_name is not None:
            pulumi.set(__self__, "package_full_name", package_full_name)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_relative_path is not None:
            pulumi.set(__self__, "package_relative_path", package_relative_path)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="certificateExpiry")
    def certificate_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Date certificate expires, found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "certificate_expiry")

    @certificate_expiry.setter
    def certificate_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_expiry", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate name found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User friendly Name to be displayed in the portal. 
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> Optional[pulumi.Input[str]]:
        """
        VHD/CIM image path on Network Share.
        """
        return pulumi.get(self, "image_path")

    @image_path.setter
    def image_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_path", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Make this version of the package the active one across the hostpool. 
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isPackageTimestamped")
    def is_package_timestamped(self) -> Optional[pulumi.Input[Union[str, 'PackageTimestamped']]]:
        """
        Is package timestamped so it can ignore the certificate expiry date
        """
        return pulumi.get(self, "is_package_timestamped")

    @is_package_timestamped.setter
    def is_package_timestamped(self, value: Optional[pulumi.Input[Union[str, 'PackageTimestamped']]]):
        pulumi.set(self, "is_package_timestamped", value)

    @property
    @pulumi.getter(name="isRegularRegistration")
    def is_regular_registration(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies how to register Package in feed.
        """
        return pulumi.get(self, "is_regular_registration")

    @is_regular_registration.setter
    def is_regular_registration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_regular_registration", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        Date Package was last updated, found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="packageAlias")
    def package_alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias of App Attach Package. Assigned at import time
        """
        return pulumi.get(self, "package_alias")

    @package_alias.setter
    def package_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_alias", value)

    @property
    @pulumi.getter(name="packageApplications")
    def package_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]]]:
        """
        List of package applications. 
        """
        return pulumi.get(self, "package_applications")

    @package_applications.setter
    def package_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageApplicationsArgs']]]]):
        pulumi.set(self, "package_applications", value)

    @property
    @pulumi.getter(name="packageDependencies")
    def package_dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]]]:
        """
        List of package dependencies. 
        """
        return pulumi.get(self, "package_dependencies")

    @package_dependencies.setter
    def package_dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MsixPackageDependenciesArgs']]]]):
        pulumi.set(self, "package_dependencies", value)

    @property
    @pulumi.getter(name="packageFamilyName")
    def package_family_name(self) -> Optional[pulumi.Input[str]]:
        """
        Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. 
        """
        return pulumi.get(self, "package_family_name")

    @package_family_name.setter
    def package_family_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_family_name", value)

    @property
    @pulumi.getter(name="packageFullName")
    def package_full_name(self) -> Optional[pulumi.Input[str]]:
        """
        Package Full Name from appxmanifest.xml. 
        """
        return pulumi.get(self, "package_full_name")

    @package_full_name.setter
    def package_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_full_name", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Package Name from appxmanifest.xml. 
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="packageRelativePath")
    def package_relative_path(self) -> Optional[pulumi.Input[str]]:
        """
        Relative Path to the package inside the image. 
        """
        return pulumi.get(self, "package_relative_path")

    @package_relative_path.setter
    def package_relative_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_relative_path", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Package Version found in the appxmanifest.xml. 
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class AppAttachPackagePropertiesArgsDict(TypedDict):
        """
        Schema for App Attach Package properties.
        """
        fail_health_check_on_staging_failure: NotRequired[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]]
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        host_pool_references: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of Hostpool resource Ids.
        """
        image: NotRequired[pulumi.Input['AppAttachPackageInfoPropertiesArgsDict']]
        """
        Detailed properties for App Attach Package
        """
        key_vault_url: NotRequired[pulumi.Input[str]]
        """
        URL of keyvault location to store certificate
        """
elif False:
    AppAttachPackagePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppAttachPackagePropertiesArgs:
    def __init__(__self__, *,
                 fail_health_check_on_staging_failure: Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]] = None,
                 host_pool_references: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']] = None,
                 key_vault_url: Optional[pulumi.Input[str]] = None):
        """
        Schema for App Attach Package properties.
        :param pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']] fail_health_check_on_staging_failure: Parameter indicating how the health check should behave if this package fails staging
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_pool_references: List of Hostpool resource Ids.
        :param pulumi.Input['AppAttachPackageInfoPropertiesArgs'] image: Detailed properties for App Attach Package
        :param pulumi.Input[str] key_vault_url: URL of keyvault location to store certificate
        """
        if fail_health_check_on_staging_failure is not None:
            pulumi.set(__self__, "fail_health_check_on_staging_failure", fail_health_check_on_staging_failure)
        if host_pool_references is not None:
            pulumi.set(__self__, "host_pool_references", host_pool_references)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if key_vault_url is not None:
            pulumi.set(__self__, "key_vault_url", key_vault_url)

    @property
    @pulumi.getter(name="failHealthCheckOnStagingFailure")
    def fail_health_check_on_staging_failure(self) -> Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]]:
        """
        Parameter indicating how the health check should behave if this package fails staging
        """
        return pulumi.get(self, "fail_health_check_on_staging_failure")

    @fail_health_check_on_staging_failure.setter
    def fail_health_check_on_staging_failure(self, value: Optional[pulumi.Input[Union[str, 'FailHealthCheckOnStagingFailure']]]):
        pulumi.set(self, "fail_health_check_on_staging_failure", value)

    @property
    @pulumi.getter(name="hostPoolReferences")
    def host_pool_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Hostpool resource Ids.
        """
        return pulumi.get(self, "host_pool_references")

    @host_pool_references.setter
    def host_pool_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_pool_references", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']]:
        """
        Detailed properties for App Attach Package
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppAttachPackageInfoPropertiesArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="keyVaultURL")
    def key_vault_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of keyvault location to store certificate
        """
        return pulumi.get(self, "key_vault_url")

    @key_vault_url.setter
    def key_vault_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_url", value)


if not MYPY:
    class MsixPackageApplicationsArgsDict(TypedDict):
        """
        Schema for MSIX Package Application properties.
        """
        app_id: NotRequired[pulumi.Input[str]]
        """
        Package Application Id, found in appxmanifest.xml.
        """
        app_user_model_id: NotRequired[pulumi.Input[str]]
        """
        Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of Package Application.
        """
        friendly_name: NotRequired[pulumi.Input[str]]
        """
        User friendly name.
        """
        icon_image_name: NotRequired[pulumi.Input[str]]
        """
        User friendly name.
        """
        raw_icon: NotRequired[pulumi.Input[str]]
        """
        the icon a 64 bit string as a byte array.
        """
        raw_png: NotRequired[pulumi.Input[str]]
        """
        the icon a 64 bit string as a byte array.
        """
elif False:
    MsixPackageApplicationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MsixPackageApplicationsArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_user_model_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 icon_image_name: Optional[pulumi.Input[str]] = None,
                 raw_icon: Optional[pulumi.Input[str]] = None,
                 raw_png: Optional[pulumi.Input[str]] = None):
        """
        Schema for MSIX Package Application properties.
        :param pulumi.Input[str] app_id: Package Application Id, found in appxmanifest.xml.
        :param pulumi.Input[str] app_user_model_id: Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        :param pulumi.Input[str] description: Description of Package Application.
        :param pulumi.Input[str] friendly_name: User friendly name.
        :param pulumi.Input[str] icon_image_name: User friendly name.
        :param pulumi.Input[str] raw_icon: the icon a 64 bit string as a byte array.
        :param pulumi.Input[str] raw_png: the icon a 64 bit string as a byte array.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_user_model_id is not None:
            pulumi.set(__self__, "app_user_model_id", app_user_model_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if icon_image_name is not None:
            pulumi.set(__self__, "icon_image_name", icon_image_name)
        if raw_icon is not None:
            pulumi.set(__self__, "raw_icon", raw_icon)
        if raw_png is not None:
            pulumi.set(__self__, "raw_png", raw_png)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Package Application Id, found in appxmanifest.xml.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appUserModelID")
    def app_user_model_id(self) -> Optional[pulumi.Input[str]]:
        """
        Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        """
        return pulumi.get(self, "app_user_model_id")

    @app_user_model_id.setter
    def app_user_model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_user_model_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of Package Application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        User friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="iconImageName")
    def icon_image_name(self) -> Optional[pulumi.Input[str]]:
        """
        User friendly name.
        """
        return pulumi.get(self, "icon_image_name")

    @icon_image_name.setter
    def icon_image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_image_name", value)

    @property
    @pulumi.getter(name="rawIcon")
    def raw_icon(self) -> Optional[pulumi.Input[str]]:
        """
        the icon a 64 bit string as a byte array.
        """
        return pulumi.get(self, "raw_icon")

    @raw_icon.setter
    def raw_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_icon", value)

    @property
    @pulumi.getter(name="rawPng")
    def raw_png(self) -> Optional[pulumi.Input[str]]:
        """
        the icon a 64 bit string as a byte array.
        """
        return pulumi.get(self, "raw_png")

    @raw_png.setter
    def raw_png(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_png", value)


if not MYPY:
    class MsixPackageDependenciesArgsDict(TypedDict):
        """
        Schema for MSIX Package Dependencies properties.
        """
        dependency_name: NotRequired[pulumi.Input[str]]
        """
        Name of package dependency.
        """
        min_version: NotRequired[pulumi.Input[str]]
        """
        Dependency version required.
        """
        publisher: NotRequired[pulumi.Input[str]]
        """
        Name of dependency publisher.
        """
elif False:
    MsixPackageDependenciesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MsixPackageDependenciesArgs:
    def __init__(__self__, *,
                 dependency_name: Optional[pulumi.Input[str]] = None,
                 min_version: Optional[pulumi.Input[str]] = None,
                 publisher: Optional[pulumi.Input[str]] = None):
        """
        Schema for MSIX Package Dependencies properties.
        :param pulumi.Input[str] dependency_name: Name of package dependency.
        :param pulumi.Input[str] min_version: Dependency version required.
        :param pulumi.Input[str] publisher: Name of dependency publisher.
        """
        if dependency_name is not None:
            pulumi.set(__self__, "dependency_name", dependency_name)
        if min_version is not None:
            pulumi.set(__self__, "min_version", min_version)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter(name="dependencyName")
    def dependency_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of package dependency.
        """
        return pulumi.get(self, "dependency_name")

    @dependency_name.setter
    def dependency_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependency_name", value)

    @property
    @pulumi.getter(name="minVersion")
    def min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Dependency version required.
        """
        return pulumi.get(self, "min_version")

    @min_version.setter
    def min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_version", value)

    @property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input[str]]:
        """
        Name of dependency publisher.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publisher", value)


if not MYPY:
    class ResourceModelWithAllowedPropertySetIdentityArgsDict(TypedDict):
        type: NotRequired[pulumi.Input['ResourceIdentityType']]
        """
        The identity type.
        """
elif False:
    ResourceModelWithAllowedPropertySetIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceModelWithAllowedPropertySetIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None):
        """
        :param pulumi.Input['ResourceIdentityType'] type: The identity type.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ResourceIdentityType']]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ResourceIdentityType']]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ResourceModelWithAllowedPropertySetPlanArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        A user defined name of the 3rd Party Artifact that is being procured.
        """
        product: pulumi.Input[str]
        """
        The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        """
        publisher: pulumi.Input[str]
        """
        The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        """
        promotion_code: NotRequired[pulumi.Input[str]]
        """
        A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        The version of the desired product/artifact.
        """
elif False:
    ResourceModelWithAllowedPropertySetPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceModelWithAllowedPropertySetPlanArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 product: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 promotion_code: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: A user defined name of the 3rd Party Artifact that is being procured.
        :param pulumi.Input[str] product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        :param pulumi.Input[str] publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        :param pulumi.Input[str] promotion_code: A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        :param pulumi.Input[str] version: The version of the desired product/artifact.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "publisher", publisher)
        if promotion_code is not None:
            pulumi.set(__self__, "promotion_code", promotion_code)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A user defined name of the 3rd Party Artifact that is being procured.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[str]:
        """
        The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="promotionCode")
    def promotion_code(self) -> Optional[pulumi.Input[str]]:
        """
        A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        """
        return pulumi.get(self, "promotion_code")

    @promotion_code.setter
    def promotion_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "promotion_code", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the desired product/artifact.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ResourceModelWithAllowedPropertySetSkuArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        family: NotRequired[pulumi.Input[str]]
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        size: NotRequired[pulumi.Input[str]]
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
elif False:
    ResourceModelWithAllowedPropertySetSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceModelWithAllowedPropertySetSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        :param pulumi.Input[str] name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param pulumi.Input[int] capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param pulumi.Input[str] family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param pulumi.Input[str] size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param pulumi.Input['SkuTier'] tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


