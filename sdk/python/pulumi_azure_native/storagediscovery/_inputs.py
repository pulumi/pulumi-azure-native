# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'StorageDiscoveryScopeArgs',
    'StorageDiscoveryScopeArgsDict',
    'StorageDiscoveryWorkspacePropertiesArgs',
    'StorageDiscoveryWorkspacePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class StorageDiscoveryScopeArgsDict(TypedDict):
        """
        Storage Discovery Scope. This had added validations
        """
        display_name: pulumi.Input[builtins.str]
        """
        Display name of the collection
        """
        resource_types: pulumi.Input[Sequence[pulumi.Input[Union[builtins.str, 'StorageDiscoveryResourceType']]]]
        """
        Resource types for the collection
        """
        tag_keys_only: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The storage account tags keys to filter
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Resource tags.
        """
elif False:
    StorageDiscoveryScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageDiscoveryScopeArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[builtins.str],
                 resource_types: pulumi.Input[Sequence[pulumi.Input[Union[builtins.str, 'StorageDiscoveryResourceType']]]],
                 tag_keys_only: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        Storage Discovery Scope. This had added validations
        :param pulumi.Input[builtins.str] display_name: Display name of the collection
        :param pulumi.Input[Sequence[pulumi.Input[Union[builtins.str, 'StorageDiscoveryResourceType']]]] resource_types: Resource types for the collection
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tag_keys_only: The storage account tags keys to filter
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "resource_types", resource_types)
        if tag_keys_only is not None:
            pulumi.set(__self__, "tag_keys_only", tag_keys_only)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        Display name of the collection
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> pulumi.Input[Sequence[pulumi.Input[Union[builtins.str, 'StorageDiscoveryResourceType']]]]:
        """
        Resource types for the collection
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: pulumi.Input[Sequence[pulumi.Input[Union[builtins.str, 'StorageDiscoveryResourceType']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter(name="tagKeysOnly")
    def tag_keys_only(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The storage account tags keys to filter
        """
        return pulumi.get(self, "tag_keys_only")

    @tag_keys_only.setter
    def tag_keys_only(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tag_keys_only", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class StorageDiscoveryWorkspacePropertiesArgsDict(TypedDict):
        """
        Storage Discovery Workspace Properties
        """
        scopes: pulumi.Input[Sequence[pulumi.Input['StorageDiscoveryScopeArgsDict']]]
        """
        The scopes of the storage discovery workspace.
        """
        workspace_roots: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        The view level storage discovery data estate
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        The description of the storage discovery workspace
        """
        sku: NotRequired[pulumi.Input[Union[builtins.str, 'StorageDiscoverySku']]]
        """
        The storage discovery sku
        """
elif False:
    StorageDiscoveryWorkspacePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageDiscoveryWorkspacePropertiesArgs:
    def __init__(__self__, *,
                 scopes: pulumi.Input[Sequence[pulumi.Input['StorageDiscoveryScopeArgs']]],
                 workspace_roots: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 sku: Optional[pulumi.Input[Union[builtins.str, 'StorageDiscoverySku']]] = None):
        """
        Storage Discovery Workspace Properties
        :param pulumi.Input[Sequence[pulumi.Input['StorageDiscoveryScopeArgs']]] scopes: The scopes of the storage discovery workspace.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] workspace_roots: The view level storage discovery data estate
        :param pulumi.Input[builtins.str] description: The description of the storage discovery workspace
        :param pulumi.Input[Union[builtins.str, 'StorageDiscoverySku']] sku: The storage discovery sku
        """
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "workspace_roots", workspace_roots)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sku is None:
            sku = 'Standard'
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input['StorageDiscoveryScopeArgs']]]:
        """
        The scopes of the storage discovery workspace.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input['StorageDiscoveryScopeArgs']]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="workspaceRoots")
    def workspace_roots(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The view level storage discovery data estate
        """
        return pulumi.get(self, "workspace_roots")

    @workspace_roots.setter
    def workspace_roots(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "workspace_roots", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the storage discovery workspace
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[Union[builtins.str, 'StorageDiscoverySku']]]:
        """
        The storage discovery sku
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[Union[builtins.str, 'StorageDiscoverySku']]]):
        pulumi.set(self, "sku", value)


