# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPermissionBindingResult',
    'AwaitableGetPermissionBindingResult',
    'get_permission_binding',
    'get_permission_binding_output',
]

@pulumi.output_type
class GetPermissionBindingResult:
    """
    The Permission binding resource.
    """
    def __init__(__self__, client_group_name=None, description=None, id=None, name=None, permission=None, provisioning_state=None, system_data=None, topic_space_name=None, type=None):
        if client_group_name and not isinstance(client_group_name, str):
            raise TypeError("Expected argument 'client_group_name' to be a str")
        pulumi.set(__self__, "client_group_name", client_group_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        pulumi.set(__self__, "permission", permission)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if topic_space_name and not isinstance(topic_space_name, str):
            raise TypeError("Expected argument 'topic_space_name' to be a str")
        pulumi.set(__self__, "topic_space_name", topic_space_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientGroupName")
    def client_group_name(self) -> Optional[str]:
        """
        The name of the client group resource that the permission is bound to.
        The client group needs to be a resource under the same namespace the permission binding is a part of.
        """
        return pulumi.get(self, "client_group_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the Permission Binding resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> Optional[str]:
        """
        The allowed permission.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the PermissionBinding resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        The system metadata relating to the PermissionBinding resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="topicSpaceName")
    def topic_space_name(self) -> Optional[str]:
        """
        The name of the Topic Space resource that the permission is bound to.
        The Topic space needs to be a resource under the same namespace the permission binding is a part of.
        """
        return pulumi.get(self, "topic_space_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")


class AwaitableGetPermissionBindingResult(GetPermissionBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPermissionBindingResult(
            client_group_name=self.client_group_name,
            description=self.description,
            id=self.id,
            name=self.name,
            permission=self.permission,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            topic_space_name=self.topic_space_name,
            type=self.type)


def get_permission_binding(namespace_name: Optional[str] = None,
                           permission_binding_name: Optional[str] = None,
                           resource_group_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPermissionBindingResult:
    """
    Get properties of a permission binding.
    Azure REST API version: 2023-06-01-preview.


    :param str namespace_name: Name of the namespace.
    :param str permission_binding_name: Name of the permission binding.
    :param str resource_group_name: The name of the resource group within the user's subscription.
    """
    __args__ = dict()
    __args__['namespaceName'] = namespace_name
    __args__['permissionBindingName'] = permission_binding_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:eventgrid:getPermissionBinding', __args__, opts=opts, typ=GetPermissionBindingResult).value

    return AwaitableGetPermissionBindingResult(
        client_group_name=pulumi.get(__ret__, 'client_group_name'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        permission=pulumi.get(__ret__, 'permission'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        topic_space_name=pulumi.get(__ret__, 'topic_space_name'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_permission_binding)
def get_permission_binding_output(namespace_name: Optional[pulumi.Input[str]] = None,
                                  permission_binding_name: Optional[pulumi.Input[str]] = None,
                                  resource_group_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPermissionBindingResult]:
    """
    Get properties of a permission binding.
    Azure REST API version: 2023-06-01-preview.


    :param str namespace_name: Name of the namespace.
    :param str permission_binding_name: Name of the permission binding.
    :param str resource_group_name: The name of the resource group within the user's subscription.
    """
    ...
