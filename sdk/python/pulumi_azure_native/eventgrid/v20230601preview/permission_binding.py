# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['PermissionBindingArgs', 'PermissionBinding']

@pulumi.input_type
class PermissionBindingArgs:
    def __init__(__self__, *,
                 namespace_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 client_group_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[Union[str, 'PermissionType']]] = None,
                 permission_binding_name: Optional[pulumi.Input[str]] = None,
                 topic_space_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PermissionBinding resource.
        :param pulumi.Input[str] namespace_name: Name of the namespace.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription.
        :param pulumi.Input[str] client_group_name: The name of the client group resource that the permission is bound to.
               The client group needs to be a resource under the same namespace the permission binding is a part of.
        :param pulumi.Input[str] description: Description for the Permission Binding resource.
        :param pulumi.Input[Union[str, 'PermissionType']] permission: The allowed permission.
        :param pulumi.Input[str] permission_binding_name: The permission binding name.
        :param pulumi.Input[str] topic_space_name: The name of the Topic Space resource that the permission is bound to.
               The Topic space needs to be a resource under the same namespace the permission binding is a part of.
        """
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if client_group_name is not None:
            pulumi.set(__self__, "client_group_name", client_group_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if permission_binding_name is not None:
            pulumi.set(__self__, "permission_binding_name", permission_binding_name)
        if topic_space_name is not None:
            pulumi.set(__self__, "topic_space_name", topic_space_name)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Input[str]:
        """
        Name of the namespace.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group within the user's subscription.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="clientGroupName")
    def client_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the client group resource that the permission is bound to.
        The client group needs to be a resource under the same namespace the permission binding is a part of.
        """
        return pulumi.get(self, "client_group_name")

    @client_group_name.setter
    def client_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_group_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the Permission Binding resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[Union[str, 'PermissionType']]]:
        """
        The allowed permission.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[Union[str, 'PermissionType']]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="permissionBindingName")
    def permission_binding_name(self) -> Optional[pulumi.Input[str]]:
        """
        The permission binding name.
        """
        return pulumi.get(self, "permission_binding_name")

    @permission_binding_name.setter
    def permission_binding_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_binding_name", value)

    @property
    @pulumi.getter(name="topicSpaceName")
    def topic_space_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Topic Space resource that the permission is bound to.
        The Topic space needs to be a resource under the same namespace the permission binding is a part of.
        """
        return pulumi.get(self, "topic_space_name")

    @topic_space_name.setter
    def topic_space_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_space_name", value)


class PermissionBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_group_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[Union[str, 'PermissionType']]] = None,
                 permission_binding_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 topic_space_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The Permission binding resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_group_name: The name of the client group resource that the permission is bound to.
               The client group needs to be a resource under the same namespace the permission binding is a part of.
        :param pulumi.Input[str] description: Description for the Permission Binding resource.
        :param pulumi.Input[str] namespace_name: Name of the namespace.
        :param pulumi.Input[Union[str, 'PermissionType']] permission: The allowed permission.
        :param pulumi.Input[str] permission_binding_name: The permission binding name.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription.
        :param pulumi.Input[str] topic_space_name: The name of the Topic Space resource that the permission is bound to.
               The Topic space needs to be a resource under the same namespace the permission binding is a part of.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The Permission binding resource.

        :param str resource_name: The name of the resource.
        :param PermissionBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_group_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[Union[str, 'PermissionType']]] = None,
                 permission_binding_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 topic_space_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionBindingArgs.__new__(PermissionBindingArgs)

            __props__.__dict__["client_group_name"] = client_group_name
            __props__.__dict__["description"] = description
            if namespace_name is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_name'")
            __props__.__dict__["namespace_name"] = namespace_name
            __props__.__dict__["permission"] = permission
            __props__.__dict__["permission_binding_name"] = permission_binding_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["topic_space_name"] = topic_space_name
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:eventgrid:PermissionBinding")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(PermissionBinding, __self__).__init__(
            'azure-native:eventgrid/v20230601preview:PermissionBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PermissionBinding':
        """
        Get an existing PermissionBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PermissionBindingArgs.__new__(PermissionBindingArgs)

        __props__.__dict__["client_group_name"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["permission"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["topic_space_name"] = None
        __props__.__dict__["type"] = None
        return PermissionBinding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientGroupName")
    def client_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the client group resource that the permission is bound to.
        The client group needs to be a resource under the same namespace the permission binding is a part of.
        """
        return pulumi.get(self, "client_group_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description for the Permission Binding resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Output[Optional[str]]:
        """
        The allowed permission.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the PermissionBinding resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        The system metadata relating to the PermissionBinding resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="topicSpaceName")
    def topic_space_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the Topic Space resource that the permission is bound to.
        The Topic space needs to be a resource under the same namespace the permission binding is a part of.
        """
        return pulumi.get(self, "topic_space_name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")

