# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetClientResult',
    'AwaitableGetClientResult',
    'get_client',
    'get_client_output',
]

@pulumi.output_type
class GetClientResult:
    """
    The Client resource.
    """
    def __init__(__self__, attributes=None, authentication=None, authentication_name=None, client_certificate_authentication=None, description=None, id=None, name=None, provisioning_state=None, state=None, system_data=None, type=None):
        if attributes and not isinstance(attributes, dict):
            raise TypeError("Expected argument 'attributes' to be a dict")
        pulumi.set(__self__, "attributes", attributes)
        if authentication and not isinstance(authentication, dict):
            raise TypeError("Expected argument 'authentication' to be a dict")
        pulumi.set(__self__, "authentication", authentication)
        if authentication_name and not isinstance(authentication_name, str):
            raise TypeError("Expected argument 'authentication_name' to be a str")
        pulumi.set(__self__, "authentication_name", authentication_name)
        if client_certificate_authentication and not isinstance(client_certificate_authentication, dict):
            raise TypeError("Expected argument 'client_certificate_authentication' to be a dict")
        pulumi.set(__self__, "client_certificate_authentication", client_certificate_authentication)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        """
        Attributes for the client. Supported values are int, bool, string, string[].
        Example:
        "attributes": { "room": "345", "floor": 12, "deviceTypes": ["Fan", "Light"] }
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.ClientAuthenticationResponse']:
        """
        Authentication information for the client.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationName")
    def authentication_name(self) -> Optional[str]:
        """
        The name presented by the client for authentication. The default value is the name of the resource.
        """
        return pulumi.get(self, "authentication_name")

    @property
    @pulumi.getter(name="clientCertificateAuthentication")
    def client_certificate_authentication(self) -> Optional['outputs.ClientCertificateAuthenticationResponse']:
        """
        The client certificate authentication information.
        """
        return pulumi.get(self, "client_certificate_authentication")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the Client resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the Client resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Indicates if the client is enabled or not. Default value is Enabled.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        The system metadata relating to the Client resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")


class AwaitableGetClientResult(GetClientResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClientResult(
            attributes=self.attributes,
            authentication=self.authentication,
            authentication_name=self.authentication_name,
            client_certificate_authentication=self.client_certificate_authentication,
            description=self.description,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            state=self.state,
            system_data=self.system_data,
            type=self.type)


def get_client(client_name: Optional[str] = None,
               namespace_name: Optional[str] = None,
               resource_group_name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClientResult:
    """
    Get properties of a client.


    :param str client_name: Name of the client.
    :param str namespace_name: Name of the namespace.
    :param str resource_group_name: The name of the resource group within the user's subscription.
    """
    __args__ = dict()
    __args__['clientName'] = client_name
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:eventgrid/v20230601preview:getClient', __args__, opts=opts, typ=GetClientResult).value

    return AwaitableGetClientResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        authentication=pulumi.get(__ret__, 'authentication'),
        authentication_name=pulumi.get(__ret__, 'authentication_name'),
        client_certificate_authentication=pulumi.get(__ret__, 'client_certificate_authentication'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        state=pulumi.get(__ret__, 'state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_client)
def get_client_output(client_name: Optional[pulumi.Input[str]] = None,
                      namespace_name: Optional[pulumi.Input[str]] = None,
                      resource_group_name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClientResult]:
    """
    Get properties of a client.


    :param str client_name: Name of the client.
    :param str namespace_name: Name of the namespace.
    :param str resource_group_name: The name of the resource group within the user's subscription.
    """
    ...
