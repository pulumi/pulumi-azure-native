# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['NamespaceTopicArgs', 'NamespaceTopic']

@pulumi.input_type
class NamespaceTopicArgs:
    def __init__(__self__, *,
                 namespace_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 event_retention_in_days: Optional[pulumi.Input[int]] = None,
                 input_schema: Optional[pulumi.Input[Union[str, 'EventInputSchema']]] = None,
                 publisher_type: Optional[pulumi.Input[Union[str, 'PublisherType']]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NamespaceTopic resource.
        :param pulumi.Input[str] namespace_name: Name of the namespace.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription.
        :param pulumi.Input[int] event_retention_in_days: Event retention for the namespace topic expressed in days. The property default value is 1 day.
               Min event retention duration value is 1 day and max event retention duration value is 1 day.
        :param pulumi.Input[Union[str, 'EventInputSchema']] input_schema: This determines the format that is expected for incoming events published to the topic.
        :param pulumi.Input[Union[str, 'PublisherType']] publisher_type: Publisher type of the namespace topic.
        :param pulumi.Input[str] topic_name: Name of the namespace topic.
        """
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if event_retention_in_days is not None:
            pulumi.set(__self__, "event_retention_in_days", event_retention_in_days)
        if input_schema is None:
            input_schema = 'CloudEventSchemaV1_0'
        if input_schema is not None:
            pulumi.set(__self__, "input_schema", input_schema)
        if publisher_type is not None:
            pulumi.set(__self__, "publisher_type", publisher_type)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Input[str]:
        """
        Name of the namespace.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group within the user's subscription.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="eventRetentionInDays")
    def event_retention_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Event retention for the namespace topic expressed in days. The property default value is 1 day.
        Min event retention duration value is 1 day and max event retention duration value is 1 day.
        """
        return pulumi.get(self, "event_retention_in_days")

    @event_retention_in_days.setter
    def event_retention_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_retention_in_days", value)

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> Optional[pulumi.Input[Union[str, 'EventInputSchema']]]:
        """
        This determines the format that is expected for incoming events published to the topic.
        """
        return pulumi.get(self, "input_schema")

    @input_schema.setter
    def input_schema(self, value: Optional[pulumi.Input[Union[str, 'EventInputSchema']]]):
        pulumi.set(self, "input_schema", value)

    @property
    @pulumi.getter(name="publisherType")
    def publisher_type(self) -> Optional[pulumi.Input[Union[str, 'PublisherType']]]:
        """
        Publisher type of the namespace topic.
        """
        return pulumi.get(self, "publisher_type")

    @publisher_type.setter
    def publisher_type(self, value: Optional[pulumi.Input[Union[str, 'PublisherType']]]):
        pulumi.set(self, "publisher_type", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the namespace topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class NamespaceTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_retention_in_days: Optional[pulumi.Input[int]] = None,
                 input_schema: Optional[pulumi.Input[Union[str, 'EventInputSchema']]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 publisher_type: Optional[pulumi.Input[Union[str, 'PublisherType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Namespace topic details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] event_retention_in_days: Event retention for the namespace topic expressed in days. The property default value is 1 day.
               Min event retention duration value is 1 day and max event retention duration value is 1 day.
        :param pulumi.Input[Union[str, 'EventInputSchema']] input_schema: This determines the format that is expected for incoming events published to the topic.
        :param pulumi.Input[str] namespace_name: Name of the namespace.
        :param pulumi.Input[Union[str, 'PublisherType']] publisher_type: Publisher type of the namespace topic.
        :param pulumi.Input[str] resource_group_name: The name of the resource group within the user's subscription.
        :param pulumi.Input[str] topic_name: Name of the namespace topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Namespace topic details.

        :param str resource_name: The name of the resource.
        :param NamespaceTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_retention_in_days: Optional[pulumi.Input[int]] = None,
                 input_schema: Optional[pulumi.Input[Union[str, 'EventInputSchema']]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 publisher_type: Optional[pulumi.Input[Union[str, 'PublisherType']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceTopicArgs.__new__(NamespaceTopicArgs)

            __props__.__dict__["event_retention_in_days"] = event_retention_in_days
            if input_schema is None:
                input_schema = 'CloudEventSchemaV1_0'
            __props__.__dict__["input_schema"] = input_schema
            if namespace_name is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_name'")
            __props__.__dict__["namespace_name"] = namespace_name
            __props__.__dict__["publisher_type"] = publisher_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:eventgrid:NamespaceTopic")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(NamespaceTopic, __self__).__init__(
            'azure-native:eventgrid/v20230601preview:NamespaceTopic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NamespaceTopic':
        """
        Get an existing NamespaceTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NamespaceTopicArgs.__new__(NamespaceTopicArgs)

        __props__.__dict__["event_retention_in_days"] = None
        __props__.__dict__["input_schema"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["publisher_type"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return NamespaceTopic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eventRetentionInDays")
    def event_retention_in_days(self) -> pulumi.Output[Optional[int]]:
        """
        Event retention for the namespace topic expressed in days. The property default value is 1 day.
        Min event retention duration value is 1 day and max event retention duration value is 1 day.
        """
        return pulumi.get(self, "event_retention_in_days")

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> pulumi.Output[Optional[str]]:
        """
        This determines the format that is expected for incoming events published to the topic.
        """
        return pulumi.get(self, "input_schema")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the namespace topic.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publisherType")
    def publisher_type(self) -> pulumi.Output[Optional[str]]:
        """
        Publisher type of the namespace topic.
        """
        return pulumi.get(self, "publisher_type")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        The system metadata relating to namespace topic resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")

