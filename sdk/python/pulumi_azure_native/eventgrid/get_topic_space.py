# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTopicSpaceResult',
    'AwaitableGetTopicSpaceResult',
    'get_topic_space',
    'get_topic_space_output',
]

@pulumi.output_type
class GetTopicSpaceResult:
    """
    The Topic space resource.
    """
    def __init__(__self__, description=None, id=None, name=None, provisioning_state=None, system_data=None, topic_templates=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if topic_templates and not isinstance(topic_templates, list):
            raise TypeError("Expected argument 'topic_templates' to be a list")
        pulumi.set(__self__, "topic_templates", topic_templates)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the Topic Space resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the TopicSpace resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        The system metadata relating to the TopicSpace resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="topicTemplates")
    def topic_templates(self) -> Optional[Sequence[str]]:
        """
        The topic filters in the topic space.
        Example: "topicTemplates": [ 
                      "devices/foo/bar",
                      "devices/topic1/+",
                      "devices/${principal.name}/${principal.attributes.keyName}" ].
        """
        return pulumi.get(self, "topic_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")


class AwaitableGetTopicSpaceResult(GetTopicSpaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicSpaceResult(
            description=self.description,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            topic_templates=self.topic_templates,
            type=self.type)


def get_topic_space(namespace_name: Optional[str] = None,
                    resource_group_name: Optional[str] = None,
                    topic_space_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicSpaceResult:
    """
    Get properties of a topic space.
    Azure REST API version: 2023-06-01-preview.


    :param str namespace_name: Name of the namespace.
    :param str resource_group_name: The name of the resource group within the user's subscription.
    :param str topic_space_name: Name of the Topic space.
    """
    __args__ = dict()
    __args__['namespaceName'] = namespace_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['topicSpaceName'] = topic_space_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:eventgrid:getTopicSpace', __args__, opts=opts, typ=GetTopicSpaceResult).value

    return AwaitableGetTopicSpaceResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        topic_templates=pulumi.get(__ret__, 'topic_templates'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_topic_space)
def get_topic_space_output(namespace_name: Optional[pulumi.Input[str]] = None,
                           resource_group_name: Optional[pulumi.Input[str]] = None,
                           topic_space_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTopicSpaceResult]:
    """
    Get properties of a topic space.
    Azure REST API version: 2023-06-01-preview.


    :param str namespace_name: Name of the namespace.
    :param str resource_group_name: The name of the resource group within the user's subscription.
    :param str topic_space_name: Name of the Topic space.
    """
    ...
