# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'CertificatePropertiesResponse',
]

@pulumi.output_type
class CertificatePropertiesResponse(dict):
    """
    The description of an X509 CA Certificate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isVerified":
            suggest = "is_verified"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificatePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificatePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificatePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: str,
                 expiry: str,
                 is_verified: bool,
                 subject: str,
                 thumbprint: str,
                 updated: str,
                 certificate: Optional[str] = None):
        """
        The description of an X509 CA Certificate.
        :param str created: The certificate's create date and time.
        :param str expiry: The certificate's expiration date and time.
        :param bool is_verified: Determines whether certificate has been verified.
        :param str subject: The certificate's subject name.
        :param str thumbprint: The certificate's thumbprint.
        :param str updated: The certificate's last update date and time.
        :param str certificate: The certificate content
        """
        CertificatePropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            expiry=expiry,
            is_verified=is_verified,
            subject=subject,
            thumbprint=thumbprint,
            updated=updated,
            certificate=certificate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             expiry: str,
             is_verified: bool,
             subject: str,
             thumbprint: str,
             updated: str,
             certificate: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("expiry", expiry)
        _setter("is_verified", is_verified)
        _setter("subject", subject)
        _setter("thumbprint", thumbprint)
        _setter("updated", updated)
        if certificate is not None:
            _setter("certificate", certificate)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The certificate's create date and time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def expiry(self) -> str:
        """
        The certificate's expiration date and time.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> bool:
        """
        Determines whether certificate has been verified.
        """
        return pulumi.get(self, "is_verified")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The certificate's subject name.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The certificate's thumbprint.
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        The certificate's last update date and time.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        The certificate content
        """
        return pulumi.get(self, "certificate")


