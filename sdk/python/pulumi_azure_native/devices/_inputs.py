# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ArmIdentityArgs',
    'CertificatePropertiesArgs',
    'CloudToDevicePropertiesArgs',
    'EncryptionPropertiesDescriptionArgs',
    'EnrichmentPropertiesArgs',
    'EventHubConsumerGroupNameArgs',
    'EventHubPropertiesArgs',
    'FallbackRoutePropertiesArgs',
    'FeedbackPropertiesArgs',
    'IotDpsPropertiesDescriptionArgs',
    'IotDpsSkuInfoArgs',
    'IotHubDefinitionDescriptionArgs',
    'IotHubPropertiesDeviceStreamsArgs',
    'IotHubPropertiesArgs',
    'IotHubSkuInfoArgs',
    'IpFilterRuleArgs',
    'KeyVaultKeyPropertiesArgs',
    'ManagedIdentityArgs',
    'MessagingEndpointPropertiesArgs',
    'NetworkRuleSetIpRuleArgs',
    'NetworkRuleSetPropertiesArgs',
    'PrivateEndpointConnectionPropertiesArgs',
    'PrivateEndpointConnectionArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'RootCertificatePropertiesArgs',
    'RoutePropertiesArgs',
    'RoutingCosmosDBSqlApiPropertiesArgs',
    'RoutingEndpointsArgs',
    'RoutingEventHubPropertiesArgs',
    'RoutingPropertiesArgs',
    'RoutingServiceBusQueueEndpointPropertiesArgs',
    'RoutingServiceBusTopicEndpointPropertiesArgs',
    'RoutingStorageContainerPropertiesArgs',
    'SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs',
    'SharedAccessSignatureAuthorizationRuleArgs',
    'StorageEndpointPropertiesArgs',
    'TargetIpFilterRuleArgs',
]

@pulumi.input_type
class ArmIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None,
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ResourceIdentityType'] type: The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
        """
        ArmIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            user_assigned_identities=user_assigned_identities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[pulumi.Input['ResourceIdentityType']] = None,
             user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if type is not None:
            _setter("type", type)
        if user_assigned_identities is not None:
            _setter("user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ResourceIdentityType']]:
        """
        The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ResourceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class CertificatePropertiesArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 is_verified: Optional[pulumi.Input[bool]] = None):
        """
        The description of an X509 CA Certificate.
        :param pulumi.Input[str] certificate: base-64 representation of X509 certificate .cer file or just .pem file content.
        :param pulumi.Input[bool] is_verified: Determines whether certificate has been verified.
        """
        CertificatePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate=certificate,
            is_verified=is_verified,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate: Optional[pulumi.Input[str]] = None,
             is_verified: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if certificate is not None:
            _setter("certificate", certificate)
        if is_verified is not None:
            _setter("is_verified", is_verified)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        base-64 representation of X509 certificate .cer file or just .pem file content.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether certificate has been verified.
        """
        return pulumi.get(self, "is_verified")

    @is_verified.setter
    def is_verified(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_verified", value)


@pulumi.input_type
class CloudToDevicePropertiesArgs:
    def __init__(__self__, *,
                 default_ttl_as_iso8601: Optional[pulumi.Input[str]] = None,
                 feedback: Optional[pulumi.Input['FeedbackPropertiesArgs']] = None,
                 max_delivery_count: Optional[pulumi.Input[int]] = None):
        """
        The IoT hub cloud-to-device messaging properties.
        :param pulumi.Input[str] default_ttl_as_iso8601: The default time to live for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        :param pulumi.Input['FeedbackPropertiesArgs'] feedback: The properties of the feedback queue for cloud-to-device messages.
        :param pulumi.Input[int] max_delivery_count: The max delivery count for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        CloudToDevicePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_ttl_as_iso8601=default_ttl_as_iso8601,
            feedback=feedback,
            max_delivery_count=max_delivery_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_ttl_as_iso8601: Optional[pulumi.Input[str]] = None,
             feedback: Optional[pulumi.Input['FeedbackPropertiesArgs']] = None,
             max_delivery_count: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if default_ttl_as_iso8601 is not None:
            _setter("default_ttl_as_iso8601", default_ttl_as_iso8601)
        if feedback is not None:
            _setter("feedback", feedback)
        if max_delivery_count is not None:
            _setter("max_delivery_count", max_delivery_count)

    @property
    @pulumi.getter(name="defaultTtlAsIso8601")
    def default_ttl_as_iso8601(self) -> Optional[pulumi.Input[str]]:
        """
        The default time to live for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        return pulumi.get(self, "default_ttl_as_iso8601")

    @default_ttl_as_iso8601.setter
    def default_ttl_as_iso8601(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_ttl_as_iso8601", value)

    @property
    @pulumi.getter
    def feedback(self) -> Optional[pulumi.Input['FeedbackPropertiesArgs']]:
        """
        The properties of the feedback queue for cloud-to-device messages.
        """
        return pulumi.get(self, "feedback")

    @feedback.setter
    def feedback(self, value: Optional[pulumi.Input['FeedbackPropertiesArgs']]):
        pulumi.set(self, "feedback", value)

    @property
    @pulumi.getter(name="maxDeliveryCount")
    def max_delivery_count(self) -> Optional[pulumi.Input[int]]:
        """
        The max delivery count for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        return pulumi.get(self, "max_delivery_count")

    @max_delivery_count.setter
    def max_delivery_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_delivery_count", value)


@pulumi.input_type
class EncryptionPropertiesDescriptionArgs:
    def __init__(__self__, *,
                 key_source: Optional[pulumi.Input[str]] = None,
                 key_vault_properties: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultKeyPropertiesArgs']]]] = None):
        """
        The encryption properties for the IoT hub.
        :param pulumi.Input[str] key_source: The source of the key.
        :param pulumi.Input[Sequence[pulumi.Input['KeyVaultKeyPropertiesArgs']]] key_vault_properties: The properties of the KeyVault key.
        """
        EncryptionPropertiesDescriptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_source=key_source,
            key_vault_properties=key_vault_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_source: Optional[pulumi.Input[str]] = None,
             key_vault_properties: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultKeyPropertiesArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key_source is not None:
            _setter("key_source", key_source)
        if key_vault_properties is not None:
            _setter("key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="keySource")
    def key_source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the key.
        """
        return pulumi.get(self, "key_source")

    @key_source.setter
    def key_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_source", value)

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultKeyPropertiesArgs']]]]:
        """
        The properties of the KeyVault key.
        """
        return pulumi.get(self, "key_vault_properties")

    @key_vault_properties.setter
    def key_vault_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultKeyPropertiesArgs']]]]):
        pulumi.set(self, "key_vault_properties", value)


@pulumi.input_type
class EnrichmentPropertiesArgs:
    def __init__(__self__, *,
                 endpoint_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        The properties of an enrichment that your IoT hub applies to messages delivered to endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoint_names: The list of endpoints for which the enrichment is applied to the message.
        :param pulumi.Input[str] key: The key or name for the enrichment property.
        :param pulumi.Input[str] value: The value for the enrichment property.
        """
        EnrichmentPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint_names=endpoint_names,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint_names: pulumi.Input[Sequence[pulumi.Input[str]]],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("endpoint_names", endpoint_names)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter(name="endpointNames")
    def endpoint_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of endpoints for which the enrichment is applied to the message.
        """
        return pulumi.get(self, "endpoint_names")

    @endpoint_names.setter
    def endpoint_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "endpoint_names", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key or name for the enrichment property.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the enrichment property.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EventHubConsumerGroupNameArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        The EventHub consumer group name.
        :param pulumi.Input[str] name: EventHub consumer group name
        """
        EventHubConsumerGroupNameArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        EventHub consumer group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EventHubPropertiesArgs:
    def __init__(__self__, *,
                 partition_count: Optional[pulumi.Input[int]] = None,
                 retention_time_in_days: Optional[pulumi.Input[float]] = None):
        """
        The properties of the provisioned Event Hub-compatible endpoint used by the IoT hub.
        :param pulumi.Input[int] partition_count: The number of partitions for receiving device-to-cloud messages in the Event Hub-compatible endpoint. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
        :param pulumi.Input[float] retention_time_in_days: The retention time for device-to-cloud messages in days. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages
        """
        EventHubPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            partition_count=partition_count,
            retention_time_in_days=retention_time_in_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             partition_count: Optional[pulumi.Input[int]] = None,
             retention_time_in_days: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if partition_count is not None:
            _setter("partition_count", partition_count)
        if retention_time_in_days is not None:
            _setter("retention_time_in_days", retention_time_in_days)

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of partitions for receiving device-to-cloud messages in the Event Hub-compatible endpoint. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
        """
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_count", value)

    @property
    @pulumi.getter(name="retentionTimeInDays")
    def retention_time_in_days(self) -> Optional[pulumi.Input[float]]:
        """
        The retention time for device-to-cloud messages in days. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages
        """
        return pulumi.get(self, "retention_time_in_days")

    @retention_time_in_days.setter
    def retention_time_in_days(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "retention_time_in_days", value)


@pulumi.input_type
class FallbackRoutePropertiesArgs:
    def __init__(__self__, *,
                 endpoint_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: pulumi.Input[bool],
                 source: pulumi.Input[Union[str, 'RoutingSource']],
                 condition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The properties of the fallback route. IoT Hub uses these properties when it routes messages to the fallback endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoint_names: The list of endpoints to which the messages that satisfy the condition are routed to. Currently only 1 endpoint is allowed.
        :param pulumi.Input[bool] is_enabled: Used to specify whether the fallback route is enabled.
        :param pulumi.Input[Union[str, 'RoutingSource']] source: The source to which the routing rule is to be applied to. For example, DeviceMessages
        :param pulumi.Input[str] condition: The condition which is evaluated in order to apply the fallback route. If the condition is not provided it will evaluate to true by default. For grammar, See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
        :param pulumi.Input[str] name: The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
        """
        FallbackRoutePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint_names=endpoint_names,
            is_enabled=is_enabled,
            source=source,
            condition=condition,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint_names: pulumi.Input[Sequence[pulumi.Input[str]]],
             is_enabled: pulumi.Input[bool],
             source: pulumi.Input[Union[str, 'RoutingSource']],
             condition: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("endpoint_names", endpoint_names)
        _setter("is_enabled", is_enabled)
        _setter("source", source)
        if condition is not None:
            _setter("condition", condition)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="endpointNames")
    def endpoint_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of endpoints to which the messages that satisfy the condition are routed to. Currently only 1 endpoint is allowed.
        """
        return pulumi.get(self, "endpoint_names")

    @endpoint_names.setter
    def endpoint_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "endpoint_names", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Used to specify whether the fallback route is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[Union[str, 'RoutingSource']]:
        """
        The source to which the routing rule is to be applied to. For example, DeviceMessages
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[Union[str, 'RoutingSource']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition which is evaluated in order to apply the fallback route. If the condition is not provided it will evaluate to true by default. For grammar, See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FeedbackPropertiesArgs:
    def __init__(__self__, *,
                 lock_duration_as_iso8601: Optional[pulumi.Input[str]] = None,
                 max_delivery_count: Optional[pulumi.Input[int]] = None,
                 ttl_as_iso8601: Optional[pulumi.Input[str]] = None):
        """
        The properties of the feedback queue for cloud-to-device messages.
        :param pulumi.Input[str] lock_duration_as_iso8601: The lock duration for the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        :param pulumi.Input[int] max_delivery_count: The number of times the IoT hub attempts to deliver a message on the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        :param pulumi.Input[str] ttl_as_iso8601: The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        FeedbackPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lock_duration_as_iso8601=lock_duration_as_iso8601,
            max_delivery_count=max_delivery_count,
            ttl_as_iso8601=ttl_as_iso8601,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lock_duration_as_iso8601: Optional[pulumi.Input[str]] = None,
             max_delivery_count: Optional[pulumi.Input[int]] = None,
             ttl_as_iso8601: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lock_duration_as_iso8601 is not None:
            _setter("lock_duration_as_iso8601", lock_duration_as_iso8601)
        if max_delivery_count is not None:
            _setter("max_delivery_count", max_delivery_count)
        if ttl_as_iso8601 is not None:
            _setter("ttl_as_iso8601", ttl_as_iso8601)

    @property
    @pulumi.getter(name="lockDurationAsIso8601")
    def lock_duration_as_iso8601(self) -> Optional[pulumi.Input[str]]:
        """
        The lock duration for the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        return pulumi.get(self, "lock_duration_as_iso8601")

    @lock_duration_as_iso8601.setter
    def lock_duration_as_iso8601(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lock_duration_as_iso8601", value)

    @property
    @pulumi.getter(name="maxDeliveryCount")
    def max_delivery_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the IoT hub attempts to deliver a message on the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        return pulumi.get(self, "max_delivery_count")

    @max_delivery_count.setter
    def max_delivery_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_delivery_count", value)

    @property
    @pulumi.getter(name="ttlAsIso8601")
    def ttl_as_iso8601(self) -> Optional[pulumi.Input[str]]:
        """
        The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
        """
        return pulumi.get(self, "ttl_as_iso8601")

    @ttl_as_iso8601.setter
    def ttl_as_iso8601(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl_as_iso8601", value)


@pulumi.input_type
class IotDpsPropertiesDescriptionArgs:
    def __init__(__self__, *,
                 allocation_policy: Optional[pulumi.Input[Union[str, 'AllocationPolicy']]] = None,
                 authorization_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs']]]] = None,
                 enable_data_residency: Optional[pulumi.Input[bool]] = None,
                 iot_hubs: Optional[pulumi.Input[Sequence[pulumi.Input['IotHubDefinitionDescriptionArgs']]]] = None,
                 ip_filter_rules: Optional[pulumi.Input[Sequence[pulumi.Input['TargetIpFilterRuleArgs']]]] = None,
                 portal_operations_host_name: Optional[pulumi.Input[str]] = None,
                 private_endpoint_connections: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]] = None,
                 provisioning_state: Optional[pulumi.Input[str]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 state: Optional[pulumi.Input[Union[str, 'State']]] = None):
        """
        the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
        :param pulumi.Input[Union[str, 'AllocationPolicy']] allocation_policy: Allocation policy to be used by this provisioning service.
        :param pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs']]] authorization_policies: List of authorization keys for a provisioning service.
        :param pulumi.Input[bool] enable_data_residency: Optional.
               Indicates if the DPS instance has Data Residency enabled, removing the cross geo-pair disaster recovery.
        :param pulumi.Input[Sequence[pulumi.Input['IotHubDefinitionDescriptionArgs']]] iot_hubs: List of IoT hubs associated with this provisioning service.
        :param pulumi.Input[Sequence[pulumi.Input['TargetIpFilterRuleArgs']]] ip_filter_rules: The IP filter rules.
        :param pulumi.Input[str] portal_operations_host_name: Portal endpoint to enable CORS for this provisioning service.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]] private_endpoint_connections: Private endpoint connections created on this IotHub
        :param pulumi.Input[str] provisioning_state: The ARM provisioning state of the provisioning service.
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Whether requests from Public Network are allowed
        :param pulumi.Input[Union[str, 'State']] state: Current state of the provisioning service.
        """
        IotDpsPropertiesDescriptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_policy=allocation_policy,
            authorization_policies=authorization_policies,
            enable_data_residency=enable_data_residency,
            iot_hubs=iot_hubs,
            ip_filter_rules=ip_filter_rules,
            portal_operations_host_name=portal_operations_host_name,
            private_endpoint_connections=private_endpoint_connections,
            provisioning_state=provisioning_state,
            public_network_access=public_network_access,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_policy: Optional[pulumi.Input[Union[str, 'AllocationPolicy']]] = None,
             authorization_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs']]]] = None,
             enable_data_residency: Optional[pulumi.Input[bool]] = None,
             iot_hubs: Optional[pulumi.Input[Sequence[pulumi.Input['IotHubDefinitionDescriptionArgs']]]] = None,
             ip_filter_rules: Optional[pulumi.Input[Sequence[pulumi.Input['TargetIpFilterRuleArgs']]]] = None,
             portal_operations_host_name: Optional[pulumi.Input[str]] = None,
             private_endpoint_connections: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]] = None,
             provisioning_state: Optional[pulumi.Input[str]] = None,
             public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
             state: Optional[pulumi.Input[Union[str, 'State']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allocation_policy is not None:
            _setter("allocation_policy", allocation_policy)
        if authorization_policies is not None:
            _setter("authorization_policies", authorization_policies)
        if enable_data_residency is not None:
            _setter("enable_data_residency", enable_data_residency)
        if iot_hubs is not None:
            _setter("iot_hubs", iot_hubs)
        if ip_filter_rules is not None:
            _setter("ip_filter_rules", ip_filter_rules)
        if portal_operations_host_name is not None:
            _setter("portal_operations_host_name", portal_operations_host_name)
        if private_endpoint_connections is not None:
            _setter("private_endpoint_connections", private_endpoint_connections)
        if provisioning_state is not None:
            _setter("provisioning_state", provisioning_state)
        if public_network_access is not None:
            _setter("public_network_access", public_network_access)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter(name="allocationPolicy")
    def allocation_policy(self) -> Optional[pulumi.Input[Union[str, 'AllocationPolicy']]]:
        """
        Allocation policy to be used by this provisioning service.
        """
        return pulumi.get(self, "allocation_policy")

    @allocation_policy.setter
    def allocation_policy(self, value: Optional[pulumi.Input[Union[str, 'AllocationPolicy']]]):
        pulumi.set(self, "allocation_policy", value)

    @property
    @pulumi.getter(name="authorizationPolicies")
    def authorization_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs']]]]:
        """
        List of authorization keys for a provisioning service.
        """
        return pulumi.get(self, "authorization_policies")

    @authorization_policies.setter
    def authorization_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs']]]]):
        pulumi.set(self, "authorization_policies", value)

    @property
    @pulumi.getter(name="enableDataResidency")
    def enable_data_residency(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional.
        Indicates if the DPS instance has Data Residency enabled, removing the cross geo-pair disaster recovery.
        """
        return pulumi.get(self, "enable_data_residency")

    @enable_data_residency.setter
    def enable_data_residency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_data_residency", value)

    @property
    @pulumi.getter(name="iotHubs")
    def iot_hubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IotHubDefinitionDescriptionArgs']]]]:
        """
        List of IoT hubs associated with this provisioning service.
        """
        return pulumi.get(self, "iot_hubs")

    @iot_hubs.setter
    def iot_hubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IotHubDefinitionDescriptionArgs']]]]):
        pulumi.set(self, "iot_hubs", value)

    @property
    @pulumi.getter(name="ipFilterRules")
    def ip_filter_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetIpFilterRuleArgs']]]]:
        """
        The IP filter rules.
        """
        return pulumi.get(self, "ip_filter_rules")

    @ip_filter_rules.setter
    def ip_filter_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetIpFilterRuleArgs']]]]):
        pulumi.set(self, "ip_filter_rules", value)

    @property
    @pulumi.getter(name="portalOperationsHostName")
    def portal_operations_host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Portal endpoint to enable CORS for this provisioning service.
        """
        return pulumi.get(self, "portal_operations_host_name")

    @portal_operations_host_name.setter
    def portal_operations_host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_operations_host_name", value)

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]]:
        """
        Private endpoint connections created on this IotHub
        """
        return pulumi.get(self, "private_endpoint_connections")

    @private_endpoint_connections.setter
    def private_endpoint_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]]):
        pulumi.set(self, "private_endpoint_connections", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM provisioning state of the provisioning service.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_state", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        Whether requests from Public Network are allowed
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'State']]]:
        """
        Current state of the provisioning service.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'State']]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class IotDpsSkuInfoArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[Union[str, 'IotDpsSku']]] = None):
        """
        List of possible provisioning service SKUs.
        :param pulumi.Input[float] capacity: The number of units to provision
        :param pulumi.Input[Union[str, 'IotDpsSku']] name: Sku name.
        """
        IotDpsSkuInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity=capacity,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[Union[str, 'IotDpsSku']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if capacity is not None:
            _setter("capacity", capacity)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[float]]:
        """
        The number of units to provision
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Union[str, 'IotDpsSku']]]:
        """
        Sku name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Union[str, 'IotDpsSku']]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IotHubDefinitionDescriptionArgs:
    def __init__(__self__, *,
                 connection_string: pulumi.Input[str],
                 location: pulumi.Input[str],
                 allocation_weight: Optional[pulumi.Input[int]] = None,
                 apply_allocation_policy: Optional[pulumi.Input[bool]] = None):
        """
        Description of the IoT hub.
        :param pulumi.Input[str] connection_string: Connection string of the IoT hub.
        :param pulumi.Input[str] location: ARM region of the IoT hub.
        :param pulumi.Input[int] allocation_weight: weight to apply for a given iot h.
        :param pulumi.Input[bool] apply_allocation_policy: flag for applying allocationPolicy or not for a given iot hub.
        """
        IotHubDefinitionDescriptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            location=location,
            allocation_weight=allocation_weight,
            apply_allocation_policy=apply_allocation_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: pulumi.Input[str],
             location: pulumi.Input[str],
             allocation_weight: Optional[pulumi.Input[int]] = None,
             apply_allocation_policy: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_string", connection_string)
        _setter("location", location)
        if allocation_weight is not None:
            _setter("allocation_weight", allocation_weight)
        if apply_allocation_policy is not None:
            _setter("apply_allocation_policy", apply_allocation_policy)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Input[str]:
        """
        Connection string of the IoT hub.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        ARM region of the IoT hub.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="allocationWeight")
    def allocation_weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight to apply for a given iot h.
        """
        return pulumi.get(self, "allocation_weight")

    @allocation_weight.setter
    def allocation_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allocation_weight", value)

    @property
    @pulumi.getter(name="applyAllocationPolicy")
    def apply_allocation_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        flag for applying allocationPolicy or not for a given iot hub.
        """
        return pulumi.get(self, "apply_allocation_policy")

    @apply_allocation_policy.setter
    def apply_allocation_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_allocation_policy", value)


@pulumi.input_type
class IotHubPropertiesDeviceStreamsArgs:
    def __init__(__self__, *,
                 streaming_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The device streams properties of iothub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] streaming_endpoints: List of Device Streams Endpoints.
        """
        IotHubPropertiesDeviceStreamsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            streaming_endpoints=streaming_endpoints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             streaming_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if streaming_endpoints is not None:
            _setter("streaming_endpoints", streaming_endpoints)

    @property
    @pulumi.getter(name="streamingEndpoints")
    def streaming_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Device Streams Endpoints.
        """
        return pulumi.get(self, "streaming_endpoints")

    @streaming_endpoints.setter
    def streaming_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "streaming_endpoints", value)


@pulumi.input_type
class IotHubPropertiesArgs:
    def __init__(__self__, *,
                 allowed_fqdn_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleArgs']]]] = None,
                 cloud_to_device: Optional[pulumi.Input['CloudToDevicePropertiesArgs']] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 device_streams: Optional[pulumi.Input['IotHubPropertiesDeviceStreamsArgs']] = None,
                 disable_device_sas: Optional[pulumi.Input[bool]] = None,
                 disable_local_auth: Optional[pulumi.Input[bool]] = None,
                 disable_module_sas: Optional[pulumi.Input[bool]] = None,
                 enable_data_residency: Optional[pulumi.Input[bool]] = None,
                 enable_file_upload_notifications: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input['EncryptionPropertiesDescriptionArgs']] = None,
                 event_hub_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input['EventHubPropertiesArgs']]]] = None,
                 features: Optional[pulumi.Input[Union[str, 'Capabilities']]] = None,
                 ip_filter_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IpFilterRuleArgs']]]] = None,
                 messaging_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input['MessagingEndpointPropertiesArgs']]]] = None,
                 min_tls_version: Optional[pulumi.Input[str]] = None,
                 network_rule_sets: Optional[pulumi.Input['NetworkRuleSetPropertiesArgs']] = None,
                 private_endpoint_connections: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 restrict_outbound_network_access: Optional[pulumi.Input[bool]] = None,
                 root_certificate: Optional[pulumi.Input['RootCertificatePropertiesArgs']] = None,
                 routing: Optional[pulumi.Input['RoutingPropertiesArgs']] = None,
                 storage_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input['StorageEndpointPropertiesArgs']]]] = None):
        """
        The properties of an IoT hub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_fqdn_list: List of allowed FQDNs(Fully Qualified Domain Name) for egress from Iot Hub.
        :param pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleArgs']]] authorization_policies: The shared access policies you can use to secure a connection to the IoT hub.
        :param pulumi.Input['CloudToDevicePropertiesArgs'] cloud_to_device: The IoT hub cloud-to-device messaging properties.
        :param pulumi.Input[str] comments: IoT hub comments.
        :param pulumi.Input['IotHubPropertiesDeviceStreamsArgs'] device_streams: The device streams properties of iothub.
        :param pulumi.Input[bool] disable_device_sas: If true, all device(including Edge devices but excluding modules) scoped SAS keys cannot be used for authentication.
        :param pulumi.Input[bool] disable_local_auth: If true, SAS tokens with Iot hub scoped SAS keys cannot be used for authentication.
        :param pulumi.Input[bool] disable_module_sas: If true, all module scoped SAS keys cannot be used for authentication.
        :param pulumi.Input[bool] enable_data_residency: This property when set to true, will enable data residency, thus, disabling disaster recovery.
        :param pulumi.Input[bool] enable_file_upload_notifications: If True, file upload notifications are enabled.
        :param pulumi.Input['EncryptionPropertiesDescriptionArgs'] encryption: The encryption properties for the IoT hub.
        :param pulumi.Input[Mapping[str, pulumi.Input['EventHubPropertiesArgs']]] event_hub_endpoints: The Event Hub-compatible endpoint properties. The only possible keys to this dictionary is events. This key has to be present in the dictionary while making create or update calls for the IoT hub.
        :param pulumi.Input[Union[str, 'Capabilities']] features: The capabilities and features enabled for the IoT hub.
        :param pulumi.Input[Sequence[pulumi.Input['IpFilterRuleArgs']]] ip_filter_rules: The IP filter rules.
        :param pulumi.Input[Mapping[str, pulumi.Input['MessagingEndpointPropertiesArgs']]] messaging_endpoints: The messaging endpoint properties for the file upload notification queue.
        :param pulumi.Input[str] min_tls_version: Specifies the minimum TLS version to support for this hub. Can be set to "1.2" to have clients that use a TLS version below 1.2 to be rejected.
        :param pulumi.Input['NetworkRuleSetPropertiesArgs'] network_rule_sets: Network Rule Set Properties of IotHub
        :param pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]] private_endpoint_connections: Private endpoint connections created on this IotHub
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Whether requests from Public Network are allowed
        :param pulumi.Input[bool] restrict_outbound_network_access: If true, egress from IotHub will be restricted to only the allowed FQDNs that are configured via allowedFqdnList.
        :param pulumi.Input['RootCertificatePropertiesArgs'] root_certificate: This property store root certificate related information
        :param pulumi.Input['RoutingPropertiesArgs'] routing: The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
        :param pulumi.Input[Mapping[str, pulumi.Input['StorageEndpointPropertiesArgs']]] storage_endpoints: The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
        """
        IotHubPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_fqdn_list=allowed_fqdn_list,
            authorization_policies=authorization_policies,
            cloud_to_device=cloud_to_device,
            comments=comments,
            device_streams=device_streams,
            disable_device_sas=disable_device_sas,
            disable_local_auth=disable_local_auth,
            disable_module_sas=disable_module_sas,
            enable_data_residency=enable_data_residency,
            enable_file_upload_notifications=enable_file_upload_notifications,
            encryption=encryption,
            event_hub_endpoints=event_hub_endpoints,
            features=features,
            ip_filter_rules=ip_filter_rules,
            messaging_endpoints=messaging_endpoints,
            min_tls_version=min_tls_version,
            network_rule_sets=network_rule_sets,
            private_endpoint_connections=private_endpoint_connections,
            public_network_access=public_network_access,
            restrict_outbound_network_access=restrict_outbound_network_access,
            root_certificate=root_certificate,
            routing=routing,
            storage_endpoints=storage_endpoints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_fqdn_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             authorization_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleArgs']]]] = None,
             cloud_to_device: Optional[pulumi.Input['CloudToDevicePropertiesArgs']] = None,
             comments: Optional[pulumi.Input[str]] = None,
             device_streams: Optional[pulumi.Input['IotHubPropertiesDeviceStreamsArgs']] = None,
             disable_device_sas: Optional[pulumi.Input[bool]] = None,
             disable_local_auth: Optional[pulumi.Input[bool]] = None,
             disable_module_sas: Optional[pulumi.Input[bool]] = None,
             enable_data_residency: Optional[pulumi.Input[bool]] = None,
             enable_file_upload_notifications: Optional[pulumi.Input[bool]] = None,
             encryption: Optional[pulumi.Input['EncryptionPropertiesDescriptionArgs']] = None,
             event_hub_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input['EventHubPropertiesArgs']]]] = None,
             features: Optional[pulumi.Input[Union[str, 'Capabilities']]] = None,
             ip_filter_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IpFilterRuleArgs']]]] = None,
             messaging_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input['MessagingEndpointPropertiesArgs']]]] = None,
             min_tls_version: Optional[pulumi.Input[str]] = None,
             network_rule_sets: Optional[pulumi.Input['NetworkRuleSetPropertiesArgs']] = None,
             private_endpoint_connections: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]] = None,
             public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
             restrict_outbound_network_access: Optional[pulumi.Input[bool]] = None,
             root_certificate: Optional[pulumi.Input['RootCertificatePropertiesArgs']] = None,
             routing: Optional[pulumi.Input['RoutingPropertiesArgs']] = None,
             storage_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input['StorageEndpointPropertiesArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allowed_fqdn_list is not None:
            _setter("allowed_fqdn_list", allowed_fqdn_list)
        if authorization_policies is not None:
            _setter("authorization_policies", authorization_policies)
        if cloud_to_device is not None:
            _setter("cloud_to_device", cloud_to_device)
        if comments is not None:
            _setter("comments", comments)
        if device_streams is not None:
            _setter("device_streams", device_streams)
        if disable_device_sas is not None:
            _setter("disable_device_sas", disable_device_sas)
        if disable_local_auth is not None:
            _setter("disable_local_auth", disable_local_auth)
        if disable_module_sas is not None:
            _setter("disable_module_sas", disable_module_sas)
        if enable_data_residency is not None:
            _setter("enable_data_residency", enable_data_residency)
        if enable_file_upload_notifications is not None:
            _setter("enable_file_upload_notifications", enable_file_upload_notifications)
        if encryption is not None:
            _setter("encryption", encryption)
        if event_hub_endpoints is not None:
            _setter("event_hub_endpoints", event_hub_endpoints)
        if features is not None:
            _setter("features", features)
        if ip_filter_rules is not None:
            _setter("ip_filter_rules", ip_filter_rules)
        if messaging_endpoints is not None:
            _setter("messaging_endpoints", messaging_endpoints)
        if min_tls_version is not None:
            _setter("min_tls_version", min_tls_version)
        if network_rule_sets is not None:
            _setter("network_rule_sets", network_rule_sets)
        if private_endpoint_connections is not None:
            _setter("private_endpoint_connections", private_endpoint_connections)
        if public_network_access is not None:
            _setter("public_network_access", public_network_access)
        if restrict_outbound_network_access is not None:
            _setter("restrict_outbound_network_access", restrict_outbound_network_access)
        if root_certificate is not None:
            _setter("root_certificate", root_certificate)
        if routing is not None:
            _setter("routing", routing)
        if storage_endpoints is not None:
            _setter("storage_endpoints", storage_endpoints)

    @property
    @pulumi.getter(name="allowedFqdnList")
    def allowed_fqdn_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed FQDNs(Fully Qualified Domain Name) for egress from Iot Hub.
        """
        return pulumi.get(self, "allowed_fqdn_list")

    @allowed_fqdn_list.setter
    def allowed_fqdn_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_fqdn_list", value)

    @property
    @pulumi.getter(name="authorizationPolicies")
    def authorization_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleArgs']]]]:
        """
        The shared access policies you can use to secure a connection to the IoT hub.
        """
        return pulumi.get(self, "authorization_policies")

    @authorization_policies.setter
    def authorization_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SharedAccessSignatureAuthorizationRuleArgs']]]]):
        pulumi.set(self, "authorization_policies", value)

    @property
    @pulumi.getter(name="cloudToDevice")
    def cloud_to_device(self) -> Optional[pulumi.Input['CloudToDevicePropertiesArgs']]:
        """
        The IoT hub cloud-to-device messaging properties.
        """
        return pulumi.get(self, "cloud_to_device")

    @cloud_to_device.setter
    def cloud_to_device(self, value: Optional[pulumi.Input['CloudToDevicePropertiesArgs']]):
        pulumi.set(self, "cloud_to_device", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        IoT hub comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="deviceStreams")
    def device_streams(self) -> Optional[pulumi.Input['IotHubPropertiesDeviceStreamsArgs']]:
        """
        The device streams properties of iothub.
        """
        return pulumi.get(self, "device_streams")

    @device_streams.setter
    def device_streams(self, value: Optional[pulumi.Input['IotHubPropertiesDeviceStreamsArgs']]):
        pulumi.set(self, "device_streams", value)

    @property
    @pulumi.getter(name="disableDeviceSAS")
    def disable_device_sas(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, all device(including Edge devices but excluding modules) scoped SAS keys cannot be used for authentication.
        """
        return pulumi.get(self, "disable_device_sas")

    @disable_device_sas.setter
    def disable_device_sas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_device_sas", value)

    @property
    @pulumi.getter(name="disableLocalAuth")
    def disable_local_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, SAS tokens with Iot hub scoped SAS keys cannot be used for authentication.
        """
        return pulumi.get(self, "disable_local_auth")

    @disable_local_auth.setter
    def disable_local_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_local_auth", value)

    @property
    @pulumi.getter(name="disableModuleSAS")
    def disable_module_sas(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, all module scoped SAS keys cannot be used for authentication.
        """
        return pulumi.get(self, "disable_module_sas")

    @disable_module_sas.setter
    def disable_module_sas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_module_sas", value)

    @property
    @pulumi.getter(name="enableDataResidency")
    def enable_data_residency(self) -> Optional[pulumi.Input[bool]]:
        """
        This property when set to true, will enable data residency, thus, disabling disaster recovery.
        """
        return pulumi.get(self, "enable_data_residency")

    @enable_data_residency.setter
    def enable_data_residency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_data_residency", value)

    @property
    @pulumi.getter(name="enableFileUploadNotifications")
    def enable_file_upload_notifications(self) -> Optional[pulumi.Input[bool]]:
        """
        If True, file upload notifications are enabled.
        """
        return pulumi.get(self, "enable_file_upload_notifications")

    @enable_file_upload_notifications.setter
    def enable_file_upload_notifications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_file_upload_notifications", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionPropertiesDescriptionArgs']]:
        """
        The encryption properties for the IoT hub.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionPropertiesDescriptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="eventHubEndpoints")
    def event_hub_endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EventHubPropertiesArgs']]]]:
        """
        The Event Hub-compatible endpoint properties. The only possible keys to this dictionary is events. This key has to be present in the dictionary while making create or update calls for the IoT hub.
        """
        return pulumi.get(self, "event_hub_endpoints")

    @event_hub_endpoints.setter
    def event_hub_endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EventHubPropertiesArgs']]]]):
        pulumi.set(self, "event_hub_endpoints", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Union[str, 'Capabilities']]]:
        """
        The capabilities and features enabled for the IoT hub.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Union[str, 'Capabilities']]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="ipFilterRules")
    def ip_filter_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpFilterRuleArgs']]]]:
        """
        The IP filter rules.
        """
        return pulumi.get(self, "ip_filter_rules")

    @ip_filter_rules.setter
    def ip_filter_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpFilterRuleArgs']]]]):
        pulumi.set(self, "ip_filter_rules", value)

    @property
    @pulumi.getter(name="messagingEndpoints")
    def messaging_endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['MessagingEndpointPropertiesArgs']]]]:
        """
        The messaging endpoint properties for the file upload notification queue.
        """
        return pulumi.get(self, "messaging_endpoints")

    @messaging_endpoints.setter
    def messaging_endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['MessagingEndpointPropertiesArgs']]]]):
        pulumi.set(self, "messaging_endpoints", value)

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the minimum TLS version to support for this hub. Can be set to "1.2" to have clients that use a TLS version below 1.2 to be rejected.
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tls_version", value)

    @property
    @pulumi.getter(name="networkRuleSets")
    def network_rule_sets(self) -> Optional[pulumi.Input['NetworkRuleSetPropertiesArgs']]:
        """
        Network Rule Set Properties of IotHub
        """
        return pulumi.get(self, "network_rule_sets")

    @network_rule_sets.setter
    def network_rule_sets(self, value: Optional[pulumi.Input['NetworkRuleSetPropertiesArgs']]):
        pulumi.set(self, "network_rule_sets", value)

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]]:
        """
        Private endpoint connections created on this IotHub
        """
        return pulumi.get(self, "private_endpoint_connections")

    @private_endpoint_connections.setter
    def private_endpoint_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateEndpointConnectionArgs']]]]):
        pulumi.set(self, "private_endpoint_connections", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        Whether requests from Public Network are allowed
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="restrictOutboundNetworkAccess")
    def restrict_outbound_network_access(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, egress from IotHub will be restricted to only the allowed FQDNs that are configured via allowedFqdnList.
        """
        return pulumi.get(self, "restrict_outbound_network_access")

    @restrict_outbound_network_access.setter
    def restrict_outbound_network_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_outbound_network_access", value)

    @property
    @pulumi.getter(name="rootCertificate")
    def root_certificate(self) -> Optional[pulumi.Input['RootCertificatePropertiesArgs']]:
        """
        This property store root certificate related information
        """
        return pulumi.get(self, "root_certificate")

    @root_certificate.setter
    def root_certificate(self, value: Optional[pulumi.Input['RootCertificatePropertiesArgs']]):
        pulumi.set(self, "root_certificate", value)

    @property
    @pulumi.getter
    def routing(self) -> Optional[pulumi.Input['RoutingPropertiesArgs']]:
        """
        The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
        """
        return pulumi.get(self, "routing")

    @routing.setter
    def routing(self, value: Optional[pulumi.Input['RoutingPropertiesArgs']]):
        pulumi.set(self, "routing", value)

    @property
    @pulumi.getter(name="storageEndpoints")
    def storage_endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['StorageEndpointPropertiesArgs']]]]:
        """
        The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
        """
        return pulumi.get(self, "storage_endpoints")

    @storage_endpoints.setter
    def storage_endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['StorageEndpointPropertiesArgs']]]]):
        pulumi.set(self, "storage_endpoints", value)


@pulumi.input_type
class IotHubSkuInfoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Union[str, 'IotHubSku']],
                 capacity: Optional[pulumi.Input[float]] = None):
        """
        Information about the SKU of the IoT hub.
        :param pulumi.Input[Union[str, 'IotHubSku']] name: The name of the SKU.
        :param pulumi.Input[float] capacity: The number of provisioned IoT Hub units. See: https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
        """
        IotHubSkuInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            capacity=capacity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[Union[str, 'IotHubSku']],
             capacity: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if capacity is not None:
            _setter("capacity", capacity)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'IotHubSku']]:
        """
        The name of the SKU.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'IotHubSku']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[float]]:
        """
        The number of provisioned IoT Hub units. See: https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "capacity", value)


@pulumi.input_type
class IpFilterRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['IpFilterActionType'],
                 filter_name: pulumi.Input[str],
                 ip_mask: pulumi.Input[str]):
        """
        The IP filter rules for the IoT hub.
        :param pulumi.Input['IpFilterActionType'] action: The desired action for requests captured by this rule.
        :param pulumi.Input[str] filter_name: The name of the IP filter rule.
        :param pulumi.Input[str] ip_mask: A string that contains the IP address range in CIDR notation for the rule.
        """
        IpFilterRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            filter_name=filter_name,
            ip_mask=ip_mask,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['IpFilterActionType'],
             filter_name: pulumi.Input[str],
             ip_mask: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("filter_name", filter_name)
        _setter("ip_mask", ip_mask)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['IpFilterActionType']:
        """
        The desired action for requests captured by this rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['IpFilterActionType']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> pulumi.Input[str]:
        """
        The name of the IP filter rule.
        """
        return pulumi.get(self, "filter_name")

    @filter_name.setter
    def filter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_name", value)

    @property
    @pulumi.getter(name="ipMask")
    def ip_mask(self) -> pulumi.Input[str]:
        """
        A string that contains the IP address range in CIDR notation for the rule.
        """
        return pulumi.get(self, "ip_mask")

    @ip_mask.setter
    def ip_mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_mask", value)


@pulumi.input_type
class KeyVaultKeyPropertiesArgs:
    def __init__(__self__, *,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 key_identifier: Optional[pulumi.Input[str]] = None):
        """
        The properties of the KeyVault key.
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of KeyVault Key.
        :param pulumi.Input[str] key_identifier: The identifier of the key.
        """
        KeyVaultKeyPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity=identity,
            key_identifier=key_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             key_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if identity is not None:
            _setter("identity", identity)
        if key_identifier is not None:
            _setter("key_identifier", key_identifier)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of KeyVault Key.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the key.
        """
        return pulumi.get(self, "key_identifier")

    @key_identifier.setter
    def key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_identifier", value)


@pulumi.input_type
class ManagedIdentityArgs:
    def __init__(__self__, *,
                 user_assigned_identity: Optional[pulumi.Input[str]] = None):
        """
        The properties of the Managed identity.
        :param pulumi.Input[str] user_assigned_identity: The user assigned identity.
        """
        ManagedIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            user_assigned_identity=user_assigned_identity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             user_assigned_identity: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if user_assigned_identity is not None:
            _setter("user_assigned_identity", user_assigned_identity)

    @property
    @pulumi.getter(name="userAssignedIdentity")
    def user_assigned_identity(self) -> Optional[pulumi.Input[str]]:
        """
        The user assigned identity.
        """
        return pulumi.get(self, "user_assigned_identity")

    @user_assigned_identity.setter
    def user_assigned_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity", value)


@pulumi.input_type
class MessagingEndpointPropertiesArgs:
    def __init__(__self__, *,
                 lock_duration_as_iso8601: Optional[pulumi.Input[str]] = None,
                 max_delivery_count: Optional[pulumi.Input[int]] = None,
                 ttl_as_iso8601: Optional[pulumi.Input[str]] = None):
        """
        The properties of the messaging endpoints used by this IoT hub.
        :param pulumi.Input[str] lock_duration_as_iso8601: The lock duration. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
        :param pulumi.Input[int] max_delivery_count: The number of times the IoT hub attempts to deliver a message. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
        :param pulumi.Input[str] ttl_as_iso8601: The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
        """
        MessagingEndpointPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lock_duration_as_iso8601=lock_duration_as_iso8601,
            max_delivery_count=max_delivery_count,
            ttl_as_iso8601=ttl_as_iso8601,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lock_duration_as_iso8601: Optional[pulumi.Input[str]] = None,
             max_delivery_count: Optional[pulumi.Input[int]] = None,
             ttl_as_iso8601: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lock_duration_as_iso8601 is not None:
            _setter("lock_duration_as_iso8601", lock_duration_as_iso8601)
        if max_delivery_count is not None:
            _setter("max_delivery_count", max_delivery_count)
        if ttl_as_iso8601 is not None:
            _setter("ttl_as_iso8601", ttl_as_iso8601)

    @property
    @pulumi.getter(name="lockDurationAsIso8601")
    def lock_duration_as_iso8601(self) -> Optional[pulumi.Input[str]]:
        """
        The lock duration. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
        """
        return pulumi.get(self, "lock_duration_as_iso8601")

    @lock_duration_as_iso8601.setter
    def lock_duration_as_iso8601(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lock_duration_as_iso8601", value)

    @property
    @pulumi.getter(name="maxDeliveryCount")
    def max_delivery_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the IoT hub attempts to deliver a message. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
        """
        return pulumi.get(self, "max_delivery_count")

    @max_delivery_count.setter
    def max_delivery_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_delivery_count", value)

    @property
    @pulumi.getter(name="ttlAsIso8601")
    def ttl_as_iso8601(self) -> Optional[pulumi.Input[str]]:
        """
        The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
        """
        return pulumi.get(self, "ttl_as_iso8601")

    @ttl_as_iso8601.setter
    def ttl_as_iso8601(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl_as_iso8601", value)


@pulumi.input_type
class NetworkRuleSetIpRuleArgs:
    def __init__(__self__, *,
                 filter_name: pulumi.Input[str],
                 ip_mask: pulumi.Input[str],
                 action: Optional[pulumi.Input[Union[str, 'NetworkRuleIPAction']]] = None):
        """
        IP Rule to be applied as part of Network Rule Set
        :param pulumi.Input[str] filter_name: Name of the IP filter rule.
        :param pulumi.Input[str] ip_mask: A string that contains the IP address range in CIDR notation for the rule.
        :param pulumi.Input[Union[str, 'NetworkRuleIPAction']] action: IP Filter Action
        """
        NetworkRuleSetIpRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_name=filter_name,
            ip_mask=ip_mask,
            action=action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_name: pulumi.Input[str],
             ip_mask: pulumi.Input[str],
             action: Optional[pulumi.Input[Union[str, 'NetworkRuleIPAction']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_name", filter_name)
        _setter("ip_mask", ip_mask)
        if action is None:
            action = 'Allow'
        if action is not None:
            _setter("action", action)

    @property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> pulumi.Input[str]:
        """
        Name of the IP filter rule.
        """
        return pulumi.get(self, "filter_name")

    @filter_name.setter
    def filter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_name", value)

    @property
    @pulumi.getter(name="ipMask")
    def ip_mask(self) -> pulumi.Input[str]:
        """
        A string that contains the IP address range in CIDR notation for the rule.
        """
        return pulumi.get(self, "ip_mask")

    @ip_mask.setter
    def ip_mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_mask", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[Union[str, 'NetworkRuleIPAction']]]:
        """
        IP Filter Action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[Union[str, 'NetworkRuleIPAction']]]):
        pulumi.set(self, "action", value)


@pulumi.input_type
class NetworkRuleSetPropertiesArgs:
    def __init__(__self__, *,
                 apply_to_built_in_event_hub_endpoint: pulumi.Input[bool],
                 ip_rules: pulumi.Input[Sequence[pulumi.Input['NetworkRuleSetIpRuleArgs']]],
                 default_action: Optional[pulumi.Input[Union[str, 'DefaultAction']]] = None):
        """
        Network Rule Set Properties of IotHub
        :param pulumi.Input[bool] apply_to_built_in_event_hub_endpoint: If True, then Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub
        :param pulumi.Input[Sequence[pulumi.Input['NetworkRuleSetIpRuleArgs']]] ip_rules: List of IP Rules
        :param pulumi.Input[Union[str, 'DefaultAction']] default_action: Default Action for Network Rule Set
        """
        NetworkRuleSetPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_to_built_in_event_hub_endpoint=apply_to_built_in_event_hub_endpoint,
            ip_rules=ip_rules,
            default_action=default_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_to_built_in_event_hub_endpoint: pulumi.Input[bool],
             ip_rules: pulumi.Input[Sequence[pulumi.Input['NetworkRuleSetIpRuleArgs']]],
             default_action: Optional[pulumi.Input[Union[str, 'DefaultAction']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("apply_to_built_in_event_hub_endpoint", apply_to_built_in_event_hub_endpoint)
        _setter("ip_rules", ip_rules)
        if default_action is None:
            default_action = 'Deny'
        if default_action is not None:
            _setter("default_action", default_action)

    @property
    @pulumi.getter(name="applyToBuiltInEventHubEndpoint")
    def apply_to_built_in_event_hub_endpoint(self) -> pulumi.Input[bool]:
        """
        If True, then Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub
        """
        return pulumi.get(self, "apply_to_built_in_event_hub_endpoint")

    @apply_to_built_in_event_hub_endpoint.setter
    def apply_to_built_in_event_hub_endpoint(self, value: pulumi.Input[bool]):
        pulumi.set(self, "apply_to_built_in_event_hub_endpoint", value)

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> pulumi.Input[Sequence[pulumi.Input['NetworkRuleSetIpRuleArgs']]]:
        """
        List of IP Rules
        """
        return pulumi.get(self, "ip_rules")

    @ip_rules.setter
    def ip_rules(self, value: pulumi.Input[Sequence[pulumi.Input['NetworkRuleSetIpRuleArgs']]]):
        pulumi.set(self, "ip_rules", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[Union[str, 'DefaultAction']]]:
        """
        Default Action for Network Rule Set
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[Union[str, 'DefaultAction']]]):
        pulumi.set(self, "default_action", value)


@pulumi.input_type
class PrivateEndpointConnectionPropertiesArgs:
    def __init__(__self__, *,
                 private_link_service_connection_state: pulumi.Input['PrivateLinkServiceConnectionStateArgs']):
        """
        The properties of a private endpoint connection
        :param pulumi.Input['PrivateLinkServiceConnectionStateArgs'] private_link_service_connection_state: The current state of a private endpoint connection
        """
        PrivateEndpointConnectionPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_link_service_connection_state=private_link_service_connection_state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_link_service_connection_state: pulumi.Input['PrivateLinkServiceConnectionStateArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("private_link_service_connection_state", private_link_service_connection_state)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> pulumi.Input['PrivateLinkServiceConnectionStateArgs']:
        """
        The current state of a private endpoint connection
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: pulumi.Input['PrivateLinkServiceConnectionStateArgs']):
        pulumi.set(self, "private_link_service_connection_state", value)


@pulumi.input_type
class PrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 properties: pulumi.Input['PrivateEndpointConnectionPropertiesArgs']):
        """
        The private endpoint connection of an IotHub
        :param pulumi.Input['PrivateEndpointConnectionPropertiesArgs'] properties: The properties of a private endpoint connection
        """
        PrivateEndpointConnectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             properties: pulumi.Input['PrivateEndpointConnectionPropertiesArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input['PrivateEndpointConnectionPropertiesArgs']:
        """
        The properties of a private endpoint connection
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['PrivateEndpointConnectionPropertiesArgs']):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 status: pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStatus']],
                 actions_required: Optional[pulumi.Input[str]] = None):
        """
        The current state of a private endpoint connection
        :param pulumi.Input[str] description: The description for the current state of a private endpoint connection
        :param pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStatus']] status: The status of a private endpoint connection
        :param pulumi.Input[str] actions_required: Actions required for a private endpoint connection
        """
        PrivateLinkServiceConnectionStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            status=status,
            actions_required=actions_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: pulumi.Input[str],
             status: pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStatus']],
             actions_required: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("description", description)
        _setter("status", status)
        if actions_required is not None:
            _setter("actions_required", actions_required)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description for the current state of a private endpoint connection
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStatus']]:
        """
        The status of a private endpoint connection
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[Union[str, 'PrivateLinkServiceConnectionStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        Actions required for a private endpoint connection
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)


@pulumi.input_type
class RootCertificatePropertiesArgs:
    def __init__(__self__, *,
                 enable_root_certificate_v2: Optional[pulumi.Input[bool]] = None):
        """
        This property store root certificate related information
        :param pulumi.Input[bool] enable_root_certificate_v2: This property when set to true, hub will use G2 cert; while it's set to false, hub uses Baltimore Cert.
        """
        RootCertificatePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_root_certificate_v2=enable_root_certificate_v2,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_root_certificate_v2: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_root_certificate_v2 is not None:
            _setter("enable_root_certificate_v2", enable_root_certificate_v2)

    @property
    @pulumi.getter(name="enableRootCertificateV2")
    def enable_root_certificate_v2(self) -> Optional[pulumi.Input[bool]]:
        """
        This property when set to true, hub will use G2 cert; while it's set to false, hub uses Baltimore Cert.
        """
        return pulumi.get(self, "enable_root_certificate_v2")

    @enable_root_certificate_v2.setter
    def enable_root_certificate_v2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_root_certificate_v2", value)


@pulumi.input_type
class RoutePropertiesArgs:
    def __init__(__self__, *,
                 endpoint_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 source: pulumi.Input[Union[str, 'RoutingSource']],
                 condition: Optional[pulumi.Input[str]] = None):
        """
        The properties of a routing rule that your IoT hub uses to route messages to endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoint_names: The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
        :param pulumi.Input[bool] is_enabled: Used to specify whether a route is enabled.
        :param pulumi.Input[str] name: The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
        :param pulumi.Input[Union[str, 'RoutingSource']] source: The source that the routing rule is to be applied to, such as DeviceMessages.
        :param pulumi.Input[str] condition: The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
        """
        RoutePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint_names=endpoint_names,
            is_enabled=is_enabled,
            name=name,
            source=source,
            condition=condition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint_names: pulumi.Input[Sequence[pulumi.Input[str]]],
             is_enabled: pulumi.Input[bool],
             name: pulumi.Input[str],
             source: pulumi.Input[Union[str, 'RoutingSource']],
             condition: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("endpoint_names", endpoint_names)
        _setter("is_enabled", is_enabled)
        _setter("name", name)
        _setter("source", source)
        if condition is not None:
            _setter("condition", condition)

    @property
    @pulumi.getter(name="endpointNames")
    def endpoint_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
        """
        return pulumi.get(self, "endpoint_names")

    @endpoint_names.setter
    def endpoint_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "endpoint_names", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Used to specify whether a route is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[Union[str, 'RoutingSource']]:
        """
        The source that the routing rule is to be applied to, such as DeviceMessages.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[Union[str, 'RoutingSource']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class RoutingCosmosDBSqlApiPropertiesArgs:
    def __init__(__self__, *,
                 collection_name: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 endpoint_uri: pulumi.Input[str],
                 name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 partition_key_name: Optional[pulumi.Input[str]] = None,
                 partition_key_template: Optional[pulumi.Input[str]] = None,
                 primary_key: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 secondary_key: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        The properties related to a cosmos DB sql collection endpoint.
        :param pulumi.Input[str] collection_name: The name of the cosmos DB sql collection in the cosmos DB database.
        :param pulumi.Input[str] database_name: The name of the cosmos DB database in the cosmos DB account.
        :param pulumi.Input[str] endpoint_uri: The url of the cosmos DB account. It must include the protocol https://
        :param pulumi.Input[str] name: The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: Method used to authenticate against the cosmos DB sql collection endpoint
        :param pulumi.Input[str] id: Id of the cosmos DB sql collection endpoint
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of routing cosmos DB collection endpoint.
        :param pulumi.Input[str] partition_key_name: The name of the partition key associated with this cosmos DB sql collection if one exists. This is an optional parameter.
        :param pulumi.Input[str] partition_key_template: The template for generating a synthetic partition key value for use with this cosmos DB sql collection. The template must include at least one of the following placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}. Any one placeholder may be specified at most once, but order and non-placeholder components are arbitrary. This parameter is only required if PartitionKeyName is specified.
        :param pulumi.Input[str] primary_key: The primary key of the cosmos DB account.
        :param pulumi.Input[str] resource_group: The name of the resource group of the cosmos DB account.
        :param pulumi.Input[str] secondary_key: The secondary key of the cosmos DB account.
        :param pulumi.Input[str] subscription_id: The subscription identifier of the cosmos DB account.
        """
        RoutingCosmosDBSqlApiPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collection_name=collection_name,
            database_name=database_name,
            endpoint_uri=endpoint_uri,
            name=name,
            authentication_type=authentication_type,
            id=id,
            identity=identity,
            partition_key_name=partition_key_name,
            partition_key_template=partition_key_template,
            primary_key=primary_key,
            resource_group=resource_group,
            secondary_key=secondary_key,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collection_name: pulumi.Input[str],
             database_name: pulumi.Input[str],
             endpoint_uri: pulumi.Input[str],
             name: pulumi.Input[str],
             authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
             id: Optional[pulumi.Input[str]] = None,
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             partition_key_name: Optional[pulumi.Input[str]] = None,
             partition_key_template: Optional[pulumi.Input[str]] = None,
             primary_key: Optional[pulumi.Input[str]] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             secondary_key: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("collection_name", collection_name)
        _setter("database_name", database_name)
        _setter("endpoint_uri", endpoint_uri)
        _setter("name", name)
        if authentication_type is not None:
            _setter("authentication_type", authentication_type)
        if id is not None:
            _setter("id", id)
        if identity is not None:
            _setter("identity", identity)
        if partition_key_name is not None:
            _setter("partition_key_name", partition_key_name)
        if partition_key_template is not None:
            _setter("partition_key_template", partition_key_template)
        if primary_key is not None:
            _setter("primary_key", primary_key)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if secondary_key is not None:
            _setter("secondary_key", secondary_key)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> pulumi.Input[str]:
        """
        The name of the cosmos DB sql collection in the cosmos DB database.
        """
        return pulumi.get(self, "collection_name")

    @collection_name.setter
    def collection_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "collection_name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The name of the cosmos DB database in the cosmos DB account.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> pulumi.Input[str]:
        """
        The url of the cosmos DB account. It must include the protocol https://
        """
        return pulumi.get(self, "endpoint_uri")

    @endpoint_uri.setter
    def endpoint_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_uri", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Method used to authenticate against the cosmos DB sql collection endpoint
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the cosmos DB sql collection endpoint
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of routing cosmos DB collection endpoint.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="partitionKeyName")
    def partition_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the partition key associated with this cosmos DB sql collection if one exists. This is an optional parameter.
        """
        return pulumi.get(self, "partition_key_name")

    @partition_key_name.setter
    def partition_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_key_name", value)

    @property
    @pulumi.getter(name="partitionKeyTemplate")
    def partition_key_template(self) -> Optional[pulumi.Input[str]]:
        """
        The template for generating a synthetic partition key value for use with this cosmos DB sql collection. The template must include at least one of the following placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}. Any one placeholder may be specified at most once, but order and non-placeholder components are arbitrary. This parameter is only required if PartitionKeyName is specified.
        """
        return pulumi.get(self, "partition_key_template")

    @partition_key_template.setter
    def partition_key_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_key_template", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input[str]]:
        """
        The primary key of the cosmos DB account.
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group of the cosmos DB account.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="secondaryKey")
    def secondary_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary key of the cosmos DB account.
        """
        return pulumi.get(self, "secondary_key")

    @secondary_key.setter
    def secondary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_key", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription identifier of the cosmos DB account.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class RoutingEndpointsArgs:
    def __init__(__self__, *,
                 cosmos_db_sql_collections: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingCosmosDBSqlApiPropertiesArgs']]]] = None,
                 event_hubs: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingEventHubPropertiesArgs']]]] = None,
                 service_bus_queues: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusQueueEndpointPropertiesArgs']]]] = None,
                 service_bus_topics: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusTopicEndpointPropertiesArgs']]]] = None,
                 storage_containers: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingStorageContainerPropertiesArgs']]]] = None):
        """
        The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingCosmosDBSqlApiPropertiesArgs']]] cosmos_db_sql_collections: The list of Cosmos DB collection endpoints that IoT hub routes messages to, based on the routing rules.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingEventHubPropertiesArgs']]] event_hubs: The list of Event Hubs endpoints that IoT hub routes messages to, based on the routing rules. This list does not include the built-in Event Hubs endpoint.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusQueueEndpointPropertiesArgs']]] service_bus_queues: The list of Service Bus queue endpoints that IoT hub routes the messages to, based on the routing rules.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusTopicEndpointPropertiesArgs']]] service_bus_topics: The list of Service Bus topic endpoints that the IoT hub routes the messages to, based on the routing rules.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingStorageContainerPropertiesArgs']]] storage_containers: The list of storage container endpoints that IoT hub routes messages to, based on the routing rules.
        """
        RoutingEndpointsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cosmos_db_sql_collections=cosmos_db_sql_collections,
            event_hubs=event_hubs,
            service_bus_queues=service_bus_queues,
            service_bus_topics=service_bus_topics,
            storage_containers=storage_containers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cosmos_db_sql_collections: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingCosmosDBSqlApiPropertiesArgs']]]] = None,
             event_hubs: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingEventHubPropertiesArgs']]]] = None,
             service_bus_queues: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusQueueEndpointPropertiesArgs']]]] = None,
             service_bus_topics: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusTopicEndpointPropertiesArgs']]]] = None,
             storage_containers: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingStorageContainerPropertiesArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cosmos_db_sql_collections is not None:
            _setter("cosmos_db_sql_collections", cosmos_db_sql_collections)
        if event_hubs is not None:
            _setter("event_hubs", event_hubs)
        if service_bus_queues is not None:
            _setter("service_bus_queues", service_bus_queues)
        if service_bus_topics is not None:
            _setter("service_bus_topics", service_bus_topics)
        if storage_containers is not None:
            _setter("storage_containers", storage_containers)

    @property
    @pulumi.getter(name="cosmosDBSqlCollections")
    def cosmos_db_sql_collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingCosmosDBSqlApiPropertiesArgs']]]]:
        """
        The list of Cosmos DB collection endpoints that IoT hub routes messages to, based on the routing rules.
        """
        return pulumi.get(self, "cosmos_db_sql_collections")

    @cosmos_db_sql_collections.setter
    def cosmos_db_sql_collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingCosmosDBSqlApiPropertiesArgs']]]]):
        pulumi.set(self, "cosmos_db_sql_collections", value)

    @property
    @pulumi.getter(name="eventHubs")
    def event_hubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingEventHubPropertiesArgs']]]]:
        """
        The list of Event Hubs endpoints that IoT hub routes messages to, based on the routing rules. This list does not include the built-in Event Hubs endpoint.
        """
        return pulumi.get(self, "event_hubs")

    @event_hubs.setter
    def event_hubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingEventHubPropertiesArgs']]]]):
        pulumi.set(self, "event_hubs", value)

    @property
    @pulumi.getter(name="serviceBusQueues")
    def service_bus_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusQueueEndpointPropertiesArgs']]]]:
        """
        The list of Service Bus queue endpoints that IoT hub routes the messages to, based on the routing rules.
        """
        return pulumi.get(self, "service_bus_queues")

    @service_bus_queues.setter
    def service_bus_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusQueueEndpointPropertiesArgs']]]]):
        pulumi.set(self, "service_bus_queues", value)

    @property
    @pulumi.getter(name="serviceBusTopics")
    def service_bus_topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusTopicEndpointPropertiesArgs']]]]:
        """
        The list of Service Bus topic endpoints that the IoT hub routes the messages to, based on the routing rules.
        """
        return pulumi.get(self, "service_bus_topics")

    @service_bus_topics.setter
    def service_bus_topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingServiceBusTopicEndpointPropertiesArgs']]]]):
        pulumi.set(self, "service_bus_topics", value)

    @property
    @pulumi.getter(name="storageContainers")
    def storage_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingStorageContainerPropertiesArgs']]]]:
        """
        The list of storage container endpoints that IoT hub routes messages to, based on the routing rules.
        """
        return pulumi.get(self, "storage_containers")

    @storage_containers.setter
    def storage_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingStorageContainerPropertiesArgs']]]]):
        pulumi.set(self, "storage_containers", value)


@pulumi.input_type
class RoutingEventHubPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 endpoint_uri: Optional[pulumi.Input[str]] = None,
                 entity_path: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        The properties related to an event hub endpoint.
        :param pulumi.Input[str] name: The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: Method used to authenticate against the event hub endpoint
        :param pulumi.Input[str] connection_string: The connection string of the event hub endpoint. 
        :param pulumi.Input[str] endpoint_uri: The url of the event hub endpoint. It must include the protocol sb://
        :param pulumi.Input[str] entity_path: Event hub name on the event hub namespace
        :param pulumi.Input[str] id: Id of the event hub endpoint
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of routing event hub endpoint.
        :param pulumi.Input[str] resource_group: The name of the resource group of the event hub endpoint.
        :param pulumi.Input[str] subscription_id: The subscription identifier of the event hub endpoint.
        """
        RoutingEventHubPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            authentication_type=authentication_type,
            connection_string=connection_string,
            endpoint_uri=endpoint_uri,
            entity_path=entity_path,
            id=id,
            identity=identity,
            resource_group=resource_group,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
             connection_string: Optional[pulumi.Input[str]] = None,
             endpoint_uri: Optional[pulumi.Input[str]] = None,
             entity_path: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if authentication_type is not None:
            _setter("authentication_type", authentication_type)
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if endpoint_uri is not None:
            _setter("endpoint_uri", endpoint_uri)
        if entity_path is not None:
            _setter("entity_path", entity_path)
        if id is not None:
            _setter("id", id)
        if identity is not None:
            _setter("identity", identity)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Method used to authenticate against the event hub endpoint
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        The connection string of the event hub endpoint. 
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The url of the event hub endpoint. It must include the protocol sb://
        """
        return pulumi.get(self, "endpoint_uri")

    @endpoint_uri.setter
    def endpoint_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_uri", value)

    @property
    @pulumi.getter(name="entityPath")
    def entity_path(self) -> Optional[pulumi.Input[str]]:
        """
        Event hub name on the event hub namespace
        """
        return pulumi.get(self, "entity_path")

    @entity_path.setter
    def entity_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_path", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the event hub endpoint
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of routing event hub endpoint.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group of the event hub endpoint.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription identifier of the event hub endpoint.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class RoutingPropertiesArgs:
    def __init__(__self__, *,
                 endpoints: Optional[pulumi.Input['RoutingEndpointsArgs']] = None,
                 enrichments: Optional[pulumi.Input[Sequence[pulumi.Input['EnrichmentPropertiesArgs']]]] = None,
                 fallback_route: Optional[pulumi.Input['FallbackRoutePropertiesArgs']] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePropertiesArgs']]]] = None):
        """
        The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
        :param pulumi.Input['RoutingEndpointsArgs'] endpoints: The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
        :param pulumi.Input[Sequence[pulumi.Input['EnrichmentPropertiesArgs']]] enrichments: The list of user-provided enrichments that the IoT hub applies to messages to be delivered to built-in and custom endpoints. See: https://aka.ms/telemetryoneventgrid
        :param pulumi.Input['FallbackRoutePropertiesArgs'] fallback_route: The properties of the route that is used as a fall-back route when none of the conditions specified in the 'routes' section are met. This is an optional parameter. When this property is not set, the messages which do not meet any of the conditions specified in the 'routes' section get routed to the built-in eventhub endpoint.
        :param pulumi.Input[Sequence[pulumi.Input['RoutePropertiesArgs']]] routes: The list of user-provided routing rules that the IoT hub uses to route messages to built-in and custom endpoints. A maximum of 100 routing rules are allowed for paid hubs and a maximum of 5 routing rules are allowed for free hubs.
        """
        RoutingPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoints=endpoints,
            enrichments=enrichments,
            fallback_route=fallback_route,
            routes=routes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoints: Optional[pulumi.Input['RoutingEndpointsArgs']] = None,
             enrichments: Optional[pulumi.Input[Sequence[pulumi.Input['EnrichmentPropertiesArgs']]]] = None,
             fallback_route: Optional[pulumi.Input['FallbackRoutePropertiesArgs']] = None,
             routes: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePropertiesArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if endpoints is not None:
            _setter("endpoints", endpoints)
        if enrichments is not None:
            _setter("enrichments", enrichments)
        if fallback_route is not None:
            _setter("fallback_route", fallback_route)
        if routes is not None:
            _setter("routes", routes)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input['RoutingEndpointsArgs']]:
        """
        The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input['RoutingEndpointsArgs']]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def enrichments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnrichmentPropertiesArgs']]]]:
        """
        The list of user-provided enrichments that the IoT hub applies to messages to be delivered to built-in and custom endpoints. See: https://aka.ms/telemetryoneventgrid
        """
        return pulumi.get(self, "enrichments")

    @enrichments.setter
    def enrichments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnrichmentPropertiesArgs']]]]):
        pulumi.set(self, "enrichments", value)

    @property
    @pulumi.getter(name="fallbackRoute")
    def fallback_route(self) -> Optional[pulumi.Input['FallbackRoutePropertiesArgs']]:
        """
        The properties of the route that is used as a fall-back route when none of the conditions specified in the 'routes' section are met. This is an optional parameter. When this property is not set, the messages which do not meet any of the conditions specified in the 'routes' section get routed to the built-in eventhub endpoint.
        """
        return pulumi.get(self, "fallback_route")

    @fallback_route.setter
    def fallback_route(self, value: Optional[pulumi.Input['FallbackRoutePropertiesArgs']]):
        pulumi.set(self, "fallback_route", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutePropertiesArgs']]]]:
        """
        The list of user-provided routing rules that the IoT hub uses to route messages to built-in and custom endpoints. A maximum of 100 routing rules are allowed for paid hubs and a maximum of 5 routing rules are allowed for free hubs.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePropertiesArgs']]]]):
        pulumi.set(self, "routes", value)


@pulumi.input_type
class RoutingServiceBusQueueEndpointPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 endpoint_uri: Optional[pulumi.Input[str]] = None,
                 entity_path: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        The properties related to service bus queue endpoint types.
        :param pulumi.Input[str] name: The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: Method used to authenticate against the service bus queue endpoint
        :param pulumi.Input[str] connection_string: The connection string of the service bus queue endpoint.
        :param pulumi.Input[str] endpoint_uri: The url of the service bus queue endpoint. It must include the protocol sb://
        :param pulumi.Input[str] entity_path: Queue name on the service bus namespace
        :param pulumi.Input[str] id: Id of the service bus queue endpoint
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of routing service bus queue endpoint.
        :param pulumi.Input[str] resource_group: The name of the resource group of the service bus queue endpoint.
        :param pulumi.Input[str] subscription_id: The subscription identifier of the service bus queue endpoint.
        """
        RoutingServiceBusQueueEndpointPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            authentication_type=authentication_type,
            connection_string=connection_string,
            endpoint_uri=endpoint_uri,
            entity_path=entity_path,
            id=id,
            identity=identity,
            resource_group=resource_group,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
             connection_string: Optional[pulumi.Input[str]] = None,
             endpoint_uri: Optional[pulumi.Input[str]] = None,
             entity_path: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if authentication_type is not None:
            _setter("authentication_type", authentication_type)
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if endpoint_uri is not None:
            _setter("endpoint_uri", endpoint_uri)
        if entity_path is not None:
            _setter("entity_path", entity_path)
        if id is not None:
            _setter("id", id)
        if identity is not None:
            _setter("identity", identity)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Method used to authenticate against the service bus queue endpoint
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        The connection string of the service bus queue endpoint.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The url of the service bus queue endpoint. It must include the protocol sb://
        """
        return pulumi.get(self, "endpoint_uri")

    @endpoint_uri.setter
    def endpoint_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_uri", value)

    @property
    @pulumi.getter(name="entityPath")
    def entity_path(self) -> Optional[pulumi.Input[str]]:
        """
        Queue name on the service bus namespace
        """
        return pulumi.get(self, "entity_path")

    @entity_path.setter
    def entity_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_path", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the service bus queue endpoint
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of routing service bus queue endpoint.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group of the service bus queue endpoint.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription identifier of the service bus queue endpoint.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class RoutingServiceBusTopicEndpointPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 endpoint_uri: Optional[pulumi.Input[str]] = None,
                 entity_path: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        The properties related to service bus topic endpoint types.
        :param pulumi.Input[str] name: The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.  The name need not be the same as the actual topic name.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: Method used to authenticate against the service bus topic endpoint
        :param pulumi.Input[str] connection_string: The connection string of the service bus topic endpoint.
        :param pulumi.Input[str] endpoint_uri: The url of the service bus topic endpoint. It must include the protocol sb://
        :param pulumi.Input[str] entity_path: Queue name on the service bus topic
        :param pulumi.Input[str] id: Id of the service bus topic endpoint
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of routing service bus topic endpoint.
        :param pulumi.Input[str] resource_group: The name of the resource group of the service bus topic endpoint.
        :param pulumi.Input[str] subscription_id: The subscription identifier of the service bus topic endpoint.
        """
        RoutingServiceBusTopicEndpointPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            authentication_type=authentication_type,
            connection_string=connection_string,
            endpoint_uri=endpoint_uri,
            entity_path=entity_path,
            id=id,
            identity=identity,
            resource_group=resource_group,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
             connection_string: Optional[pulumi.Input[str]] = None,
             endpoint_uri: Optional[pulumi.Input[str]] = None,
             entity_path: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if authentication_type is not None:
            _setter("authentication_type", authentication_type)
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if endpoint_uri is not None:
            _setter("endpoint_uri", endpoint_uri)
        if entity_path is not None:
            _setter("entity_path", entity_path)
        if id is not None:
            _setter("id", id)
        if identity is not None:
            _setter("identity", identity)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.  The name need not be the same as the actual topic name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Method used to authenticate against the service bus topic endpoint
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        The connection string of the service bus topic endpoint.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The url of the service bus topic endpoint. It must include the protocol sb://
        """
        return pulumi.get(self, "endpoint_uri")

    @endpoint_uri.setter
    def endpoint_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_uri", value)

    @property
    @pulumi.getter(name="entityPath")
    def entity_path(self) -> Optional[pulumi.Input[str]]:
        """
        Queue name on the service bus topic
        """
        return pulumi.get(self, "entity_path")

    @entity_path.setter
    def entity_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_path", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the service bus topic endpoint
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of routing service bus topic endpoint.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group of the service bus topic endpoint.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription identifier of the service bus topic endpoint.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class RoutingStorageContainerPropertiesArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 batch_frequency_in_seconds: Optional[pulumi.Input[int]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 endpoint_uri: Optional[pulumi.Input[str]] = None,
                 file_name_format: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 max_chunk_size_in_bytes: Optional[pulumi.Input[int]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        The properties related to a storage container endpoint.
        :param pulumi.Input[str] container_name: The name of storage container in the storage account.
        :param pulumi.Input[str] name: The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: Method used to authenticate against the storage endpoint
        :param pulumi.Input[int] batch_frequency_in_seconds: Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
        :param pulumi.Input[str] connection_string: The connection string of the storage account.
        :param pulumi.Input[str] encoding: Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.
        :param pulumi.Input[str] endpoint_uri: The url of the storage endpoint. It must include the protocol https://
        :param pulumi.Input[str] file_name_format: File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.
        :param pulumi.Input[str] id: Id of the storage container endpoint
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of routing storage endpoint.
        :param pulumi.Input[int] max_chunk_size_in_bytes: Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
        :param pulumi.Input[str] resource_group: The name of the resource group of the storage account.
        :param pulumi.Input[str] subscription_id: The subscription identifier of the storage account.
        """
        RoutingStorageContainerPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_name=container_name,
            name=name,
            authentication_type=authentication_type,
            batch_frequency_in_seconds=batch_frequency_in_seconds,
            connection_string=connection_string,
            encoding=encoding,
            endpoint_uri=endpoint_uri,
            file_name_format=file_name_format,
            id=id,
            identity=identity,
            max_chunk_size_in_bytes=max_chunk_size_in_bytes,
            resource_group=resource_group,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_name: pulumi.Input[str],
             name: pulumi.Input[str],
             authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
             batch_frequency_in_seconds: Optional[pulumi.Input[int]] = None,
             connection_string: Optional[pulumi.Input[str]] = None,
             encoding: Optional[pulumi.Input[str]] = None,
             endpoint_uri: Optional[pulumi.Input[str]] = None,
             file_name_format: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             max_chunk_size_in_bytes: Optional[pulumi.Input[int]] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_name", container_name)
        _setter("name", name)
        if authentication_type is not None:
            _setter("authentication_type", authentication_type)
        if batch_frequency_in_seconds is not None:
            _setter("batch_frequency_in_seconds", batch_frequency_in_seconds)
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if encoding is not None:
            _setter("encoding", encoding)
        if endpoint_uri is not None:
            _setter("endpoint_uri", endpoint_uri)
        if file_name_format is not None:
            _setter("file_name_format", file_name_format)
        if id is not None:
            _setter("id", id)
        if identity is not None:
            _setter("identity", identity)
        if max_chunk_size_in_bytes is not None:
            _setter("max_chunk_size_in_bytes", max_chunk_size_in_bytes)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        """
        The name of storage container in the storage account.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Method used to authenticate against the storage endpoint
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="batchFrequencyInSeconds")
    def batch_frequency_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
        """
        return pulumi.get(self, "batch_frequency_in_seconds")

    @batch_frequency_in_seconds.setter
    def batch_frequency_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_frequency_in_seconds", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        The connection string of the storage account.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The url of the storage endpoint. It must include the protocol https://
        """
        return pulumi.get(self, "endpoint_uri")

    @endpoint_uri.setter
    def endpoint_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_uri", value)

    @property
    @pulumi.getter(name="fileNameFormat")
    def file_name_format(self) -> Optional[pulumi.Input[str]]:
        """
        File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.
        """
        return pulumi.get(self, "file_name_format")

    @file_name_format.setter
    def file_name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_format", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the storage container endpoint
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of routing storage endpoint.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="maxChunkSizeInBytes")
    def max_chunk_size_in_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
        """
        return pulumi.get(self, "max_chunk_size_in_bytes")

    @max_chunk_size_in_bytes.setter
    def max_chunk_size_in_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_chunk_size_in_bytes", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group of the storage account.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription identifier of the storage account.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs:
    def __init__(__self__, *,
                 key_name: pulumi.Input[str],
                 rights: pulumi.Input[Union[str, 'AccessRightsDescription']],
                 primary_key: Optional[pulumi.Input[str]] = None,
                 secondary_key: Optional[pulumi.Input[str]] = None):
        """
        Description of the shared access key.
        :param pulumi.Input[str] key_name: Name of the key.
        :param pulumi.Input[Union[str, 'AccessRightsDescription']] rights: Rights that this key has.
        :param pulumi.Input[str] primary_key: Primary SAS key value.
        :param pulumi.Input[str] secondary_key: Secondary SAS key value.
        """
        SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            rights=rights,
            primary_key=primary_key,
            secondary_key=secondary_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: pulumi.Input[str],
             rights: pulumi.Input[Union[str, 'AccessRightsDescription']],
             primary_key: Optional[pulumi.Input[str]] = None,
             secondary_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_name", key_name)
        _setter("rights", rights)
        if primary_key is not None:
            _setter("primary_key", primary_key)
        if secondary_key is not None:
            _setter("secondary_key", secondary_key)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        """
        Name of the key.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter
    def rights(self) -> pulumi.Input[Union[str, 'AccessRightsDescription']]:
        """
        Rights that this key has.
        """
        return pulumi.get(self, "rights")

    @rights.setter
    def rights(self, value: pulumi.Input[Union[str, 'AccessRightsDescription']]):
        pulumi.set(self, "rights", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input[str]]:
        """
        Primary SAS key value.
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter(name="secondaryKey")
    def secondary_key(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary SAS key value.
        """
        return pulumi.get(self, "secondary_key")

    @secondary_key.setter
    def secondary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_key", value)


@pulumi.input_type
class SharedAccessSignatureAuthorizationRuleArgs:
    def __init__(__self__, *,
                 key_name: pulumi.Input[str],
                 rights: pulumi.Input['AccessRights'],
                 primary_key: Optional[pulumi.Input[str]] = None,
                 secondary_key: Optional[pulumi.Input[str]] = None):
        """
        The properties of an IoT hub shared access policy.
        :param pulumi.Input[str] key_name: The name of the shared access policy.
        :param pulumi.Input['AccessRights'] rights: The permissions assigned to the shared access policy.
        :param pulumi.Input[str] primary_key: The primary key.
        :param pulumi.Input[str] secondary_key: The secondary key.
        """
        SharedAccessSignatureAuthorizationRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            rights=rights,
            primary_key=primary_key,
            secondary_key=secondary_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: pulumi.Input[str],
             rights: pulumi.Input['AccessRights'],
             primary_key: Optional[pulumi.Input[str]] = None,
             secondary_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_name", key_name)
        _setter("rights", rights)
        if primary_key is not None:
            _setter("primary_key", primary_key)
        if secondary_key is not None:
            _setter("secondary_key", secondary_key)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        """
        The name of the shared access policy.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter
    def rights(self) -> pulumi.Input['AccessRights']:
        """
        The permissions assigned to the shared access policy.
        """
        return pulumi.get(self, "rights")

    @rights.setter
    def rights(self, value: pulumi.Input['AccessRights']):
        pulumi.set(self, "rights", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input[str]]:
        """
        The primary key.
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter(name="secondaryKey")
    def secondary_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary key.
        """
        return pulumi.get(self, "secondary_key")

    @secondary_key.setter
    def secondary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_key", value)


@pulumi.input_type
class StorageEndpointPropertiesArgs:
    def __init__(__self__, *,
                 connection_string: pulumi.Input[str],
                 container_name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
                 identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
                 sas_ttl_as_iso8601: Optional[pulumi.Input[str]] = None):
        """
        The properties of the Azure Storage endpoint for file upload.
        :param pulumi.Input[str] connection_string: The connection string for the Azure Storage account to which files are uploaded.
        :param pulumi.Input[str] container_name: The name of the root container where you upload files. The container need not exist but should be creatable using the connectionString specified.
        :param pulumi.Input[Union[str, 'AuthenticationType']] authentication_type: Specifies authentication type being used for connecting to the storage account.
        :param pulumi.Input['ManagedIdentityArgs'] identity: Managed identity properties of storage endpoint for file upload.
        :param pulumi.Input[str] sas_ttl_as_iso8601: The period of time for which the SAS URI generated by IoT Hub for file upload is valid. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
        """
        StorageEndpointPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            container_name=container_name,
            authentication_type=authentication_type,
            identity=identity,
            sas_ttl_as_iso8601=sas_ttl_as_iso8601,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: pulumi.Input[str],
             container_name: pulumi.Input[str],
             authentication_type: Optional[pulumi.Input[Union[str, 'AuthenticationType']]] = None,
             identity: Optional[pulumi.Input['ManagedIdentityArgs']] = None,
             sas_ttl_as_iso8601: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_string", connection_string)
        _setter("container_name", container_name)
        if authentication_type is not None:
            _setter("authentication_type", authentication_type)
        if identity is not None:
            _setter("identity", identity)
        if sas_ttl_as_iso8601 is not None:
            _setter("sas_ttl_as_iso8601", sas_ttl_as_iso8601)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Input[str]:
        """
        The connection string for the Azure Storage account to which files are uploaded.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        """
        The name of the root container where you upload files. The container need not exist but should be creatable using the connectionString specified.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationType']]]:
        """
        Specifies authentication type being used for connecting to the storage account.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationType']]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedIdentityArgs']]:
        """
        Managed identity properties of storage endpoint for file upload.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="sasTtlAsIso8601")
    def sas_ttl_as_iso8601(self) -> Optional[pulumi.Input[str]]:
        """
        The period of time for which the SAS URI generated by IoT Hub for file upload is valid. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
        """
        return pulumi.get(self, "sas_ttl_as_iso8601")

    @sas_ttl_as_iso8601.setter
    def sas_ttl_as_iso8601(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sas_ttl_as_iso8601", value)


@pulumi.input_type
class TargetIpFilterRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['IpFilterActionType'],
                 filter_name: pulumi.Input[str],
                 ip_mask: pulumi.Input[str],
                 target: Optional[pulumi.Input['IpFilterTargetType']] = None):
        """
        The IP filter rules for a provisioning Service.
        :param pulumi.Input['IpFilterActionType'] action: The desired action for requests captured by this rule.
        :param pulumi.Input[str] filter_name: The name of the IP filter rule.
        :param pulumi.Input[str] ip_mask: A string that contains the IP address range in CIDR notation for the rule.
        :param pulumi.Input['IpFilterTargetType'] target: Target for requests captured by this rule.
        """
        TargetIpFilterRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            filter_name=filter_name,
            ip_mask=ip_mask,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['IpFilterActionType'],
             filter_name: pulumi.Input[str],
             ip_mask: pulumi.Input[str],
             target: Optional[pulumi.Input['IpFilterTargetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("filter_name", filter_name)
        _setter("ip_mask", ip_mask)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['IpFilterActionType']:
        """
        The desired action for requests captured by this rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['IpFilterActionType']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> pulumi.Input[str]:
        """
        The name of the IP filter rule.
        """
        return pulumi.get(self, "filter_name")

    @filter_name.setter
    def filter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_name", value)

    @property
    @pulumi.getter(name="ipMask")
    def ip_mask(self) -> pulumi.Input[str]:
        """
        A string that contains the IP address range in CIDR notation for the rule.
        """
        return pulumi.get(self, "ip_mask")

    @ip_mask.setter
    def ip_mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_mask", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['IpFilterTargetType']]:
        """
        Target for requests captured by this rule.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['IpFilterTargetType']]):
        pulumi.set(self, "target", value)


