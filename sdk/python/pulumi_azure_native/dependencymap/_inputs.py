# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'DependencyProcessFilter',
    'DependencyProcessFilterDict',
    'ProcessNameFilter',
    'ProcessNameFilterDict',
]

MYPY = False

if not MYPY:
    class DependencyProcessFilterDict(TypedDict):
        """
        DependencyProcessFilter model
        """
        process_name_filter: NotRequired['ProcessNameFilterDict']
        """
        Process name filter
        """
elif False:
    DependencyProcessFilterDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DependencyProcessFilter:
    def __init__(__self__, *,
                 process_name_filter: Optional['ProcessNameFilter'] = None):
        """
        DependencyProcessFilter model
        :param 'ProcessNameFilter' process_name_filter: Process name filter
        """
        if process_name_filter is not None:
            pulumi.set(__self__, "process_name_filter", process_name_filter)

    @property
    @pulumi.getter(name="processNameFilter")
    def process_name_filter(self) -> Optional['ProcessNameFilter']:
        """
        Process name filter
        """
        return pulumi.get(self, "process_name_filter")

    @process_name_filter.setter
    def process_name_filter(self, value: Optional['ProcessNameFilter']):
        pulumi.set(self, "process_name_filter", value)


if not MYPY:
    class ProcessNameFilterDict(TypedDict):
        """
        Process name filter for dependency map visualization apis
        """
        operator: Union[builtins.str, 'ProcessNameFilterOperator']
        """
        Operator for process name filter
        """
        process_names: Sequence[builtins.str]
        """
        List of process names on which the operator should be applied
        """
elif False:
    ProcessNameFilterDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProcessNameFilter:
    def __init__(__self__, *,
                 operator: Union[builtins.str, 'ProcessNameFilterOperator'],
                 process_names: Sequence[builtins.str]):
        """
        Process name filter for dependency map visualization apis
        :param Union[builtins.str, 'ProcessNameFilterOperator'] operator: Operator for process name filter
        :param Sequence[builtins.str] process_names: List of process names on which the operator should be applied
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "process_names", process_names)

    @property
    @pulumi.getter
    def operator(self) -> Union[builtins.str, 'ProcessNameFilterOperator']:
        """
        Operator for process name filter
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Union[builtins.str, 'ProcessNameFilterOperator']):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="processNames")
    def process_names(self) -> Sequence[builtins.str]:
        """
        List of process names on which the operator should be applied
        """
        return pulumi.get(self, "process_names")

    @process_names.setter
    def process_names(self, value: Sequence[builtins.str]):
        pulumi.set(self, "process_names", value)


