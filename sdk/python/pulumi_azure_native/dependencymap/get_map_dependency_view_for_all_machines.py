# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = [
    'GetMapDependencyViewForAllMachinesResult',
    'AwaitableGetMapDependencyViewForAllMachinesResult',
    'get_map_dependency_view_for_all_machines',
    'get_map_dependency_view_for_all_machines_output',
]

@pulumi.output_type
class GetMapDependencyViewForAllMachinesResult:
    """
    Model representing the result of the export dependencies asynchronous operation.
    """
    def __init__(__self__, end_time=None, error=None, id=None, name=None, properties=None, start_time=None, status=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[builtins.str]:
        """
        The end time of the operation.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.ErrorDetailResponse']:
        """
        Contains error details if status is Failed/Canceled.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The status URL of the asynchronous operation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The resource name of the operation status. It must match the last segment of 'id' field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.GetDependencyViewForAllMachinesResultPropertiesResponse':
        """
        Properties for export dependencies. These should only be set if the status is Succeeded.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[builtins.str]:
        """
        The start time of the operation.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The overall arm status of the operation. It has one of the terminal states - Succeeded/Failed/Canceled.
        """
        return pulumi.get(self, "status")


class AwaitableGetMapDependencyViewForAllMachinesResult(GetMapDependencyViewForAllMachinesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMapDependencyViewForAllMachinesResult(
            end_time=self.end_time,
            error=self.error,
            id=self.id,
            name=self.name,
            properties=self.properties,
            start_time=self.start_time,
            status=self.status)


def get_map_dependency_view_for_all_machines(filters: Optional[Union['DependencyProcessFilter', 'DependencyProcessFilterDict']] = None,
                                             map_name: Optional[builtins.str] = None,
                                             resource_group_name: Optional[builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMapDependencyViewForAllMachinesResult:
    """
    Get dependencies for all machines

    Uses Azure REST API version 2025-07-01-preview.


    :param Union['DependencyProcessFilter', 'DependencyProcessFilterDict'] filters: Filters for GetDependencyViewForAllMachines
    :param builtins.str map_name: Maps resource name
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['mapName'] = map_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:dependencymap:getMapDependencyViewForAllMachines', __args__, opts=opts, typ=GetMapDependencyViewForAllMachinesResult).value

    return AwaitableGetMapDependencyViewForAllMachinesResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        error=pulumi.get(__ret__, 'error'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        properties=pulumi.get(__ret__, 'properties'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))
def get_map_dependency_view_for_all_machines_output(filters: Optional[pulumi.Input[Optional[Union['DependencyProcessFilter', 'DependencyProcessFilterDict']]]] = None,
                                                    map_name: Optional[pulumi.Input[builtins.str]] = None,
                                                    resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMapDependencyViewForAllMachinesResult]:
    """
    Get dependencies for all machines

    Uses Azure REST API version 2025-07-01-preview.


    :param Union['DependencyProcessFilter', 'DependencyProcessFilterDict'] filters: Filters for GetDependencyViewForAllMachines
    :param builtins.str map_name: Maps resource name
    :param builtins.str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['mapName'] = map_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:dependencymap:getMapDependencyViewForAllMachines', __args__, opts=opts, typ=GetMapDependencyViewForAllMachinesResult)
    return __ret__.apply(lambda __response__: GetMapDependencyViewForAllMachinesResult(
        end_time=pulumi.get(__response__, 'end_time'),
        error=pulumi.get(__response__, 'error'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        properties=pulumi.get(__response__, 'properties'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status')))
