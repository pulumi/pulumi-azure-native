# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['OrganizationEnvironmentByIdArgs', 'OrganizationEnvironmentById']

@pulumi.input_type
class OrganizationEnvironmentByIdArgs:
    def __init__(__self__, *,
                 organization_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 environment_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['SCMetadataEntityArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stream_governance_config: Optional[pulumi.Input['StreamGovernanceConfigArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrganizationEnvironmentById resource.
        :param pulumi.Input[str] organization_name: Organization resource name
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] environment_id: Confluent environment id
        :param pulumi.Input[str] id: Id of the environment
        :param pulumi.Input[str] kind: Type of environment
        :param pulumi.Input['SCMetadataEntityArgs'] metadata: Metadata of the record
        :param pulumi.Input[str] name: Display name of the environment
        :param pulumi.Input['StreamGovernanceConfigArgs'] stream_governance_config: Stream governance configuration
        :param pulumi.Input[str] type: Type of the resource
        """
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stream_governance_config is not None:
            pulumi.set(__self__, "stream_governance_config", stream_governance_config)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        Organization resource name
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Confluent environment id
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the environment
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Type of environment
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['SCMetadataEntityArgs']]:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['SCMetadataEntityArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the environment
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="streamGovernanceConfig")
    def stream_governance_config(self) -> Optional[pulumi.Input['StreamGovernanceConfigArgs']]:
        """
        Stream governance configuration
        """
        return pulumi.get(self, "stream_governance_config")

    @stream_governance_config.setter
    def stream_governance_config(self, value: Optional[pulumi.Input['StreamGovernanceConfigArgs']]):
        pulumi.set(self, "stream_governance_config", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class OrganizationEnvironmentById(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Union['SCMetadataEntityArgs', 'SCMetadataEntityArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 stream_governance_config: Optional[pulumi.Input[Union['StreamGovernanceConfigArgs', 'StreamGovernanceConfigArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Details about environment name, metadata and environment id of an environment
        Azure REST API version: 2024-07-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] environment_id: Confluent environment id
        :param pulumi.Input[str] id: Id of the environment
        :param pulumi.Input[str] kind: Type of environment
        :param pulumi.Input[Union['SCMetadataEntityArgs', 'SCMetadataEntityArgsDict']] metadata: Metadata of the record
        :param pulumi.Input[str] name: Display name of the environment
        :param pulumi.Input[str] organization_name: Organization resource name
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union['StreamGovernanceConfigArgs', 'StreamGovernanceConfigArgsDict']] stream_governance_config: Stream governance configuration
        :param pulumi.Input[str] type: Type of the resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationEnvironmentByIdArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Details about environment name, metadata and environment id of an environment
        Azure REST API version: 2024-07-01.

        :param str resource_name: The name of the resource.
        :param OrganizationEnvironmentByIdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationEnvironmentByIdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Union['SCMetadataEntityArgs', 'SCMetadataEntityArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 stream_governance_config: Optional[pulumi.Input[Union['StreamGovernanceConfigArgs', 'StreamGovernanceConfigArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationEnvironmentByIdArgs.__new__(OrganizationEnvironmentByIdArgs)

            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["id"] = id
            __props__.__dict__["kind"] = kind
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            if organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'organization_name'")
            __props__.__dict__["organization_name"] = organization_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["stream_governance_config"] = stream_governance_config
            __props__.__dict__["type"] = type
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:confluent/v20240701:OrganizationEnvironmentById")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(OrganizationEnvironmentById, __self__).__init__(
            'azure-native:confluent:OrganizationEnvironmentById',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OrganizationEnvironmentById':
        """
        Get an existing OrganizationEnvironmentById resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OrganizationEnvironmentByIdArgs.__new__(OrganizationEnvironmentByIdArgs)

        __props__.__dict__["kind"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["stream_governance_config"] = None
        __props__.__dict__["type"] = None
        return OrganizationEnvironmentById(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        Type of environment
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['outputs.SCMetadataEntityResponse']]:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        Display name of the environment
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="streamGovernanceConfig")
    def stream_governance_config(self) -> pulumi.Output[Optional['outputs.StreamGovernanceConfigResponse']]:
        """
        Stream governance configuration
        """
        return pulumi.get(self, "stream_governance_config")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of the resource
        """
        return pulumi.get(self, "type")

