# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTopicResult',
    'AwaitableGetTopicResult',
    'get_topic',
    'get_topic_output',
]

@pulumi.output_type
class GetTopicResult:
    """
    Details of topic record
    """
    def __init__(__self__, configs=None, id=None, input_configs=None, kind=None, metadata=None, name=None, partitions=None, partitions_count=None, partitions_reassignments=None, replication_factor=None, topic_id=None, type=None):
        if configs and not isinstance(configs, dict):
            raise TypeError("Expected argument 'configs' to be a dict")
        pulumi.set(__self__, "configs", configs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input_configs and not isinstance(input_configs, list):
            raise TypeError("Expected argument 'input_configs' to be a list")
        pulumi.set(__self__, "input_configs", input_configs)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partitions and not isinstance(partitions, dict):
            raise TypeError("Expected argument 'partitions' to be a dict")
        pulumi.set(__self__, "partitions", partitions)
        if partitions_count and not isinstance(partitions_count, str):
            raise TypeError("Expected argument 'partitions_count' to be a str")
        pulumi.set(__self__, "partitions_count", partitions_count)
        if partitions_reassignments and not isinstance(partitions_reassignments, dict):
            raise TypeError("Expected argument 'partitions_reassignments' to be a dict")
        pulumi.set(__self__, "partitions_reassignments", partitions_reassignments)
        if replication_factor and not isinstance(replication_factor, str):
            raise TypeError("Expected argument 'replication_factor' to be a str")
        pulumi.set(__self__, "replication_factor", replication_factor)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def configs(self) -> Optional['outputs.TopicsRelatedLinkResponse']:
        """
        Config Specification of the topic
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ARM Resource Id of the Topic
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputConfigs")
    def input_configs(self) -> Optional[Sequence['outputs.TopicsInputConfigResponse']]:
        """
        Input Config Specification of the topic
        """
        return pulumi.get(self, "input_configs")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Type of topic
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.TopicMetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name of the topic
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> Optional['outputs.TopicsRelatedLinkResponse']:
        """
        Partition Specification of the topic
        """
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="partitionsCount")
    def partitions_count(self) -> Optional[str]:
        """
        Partition count of the topic
        """
        return pulumi.get(self, "partitions_count")

    @property
    @pulumi.getter(name="partitionsReassignments")
    def partitions_reassignments(self) -> Optional['outputs.TopicsRelatedLinkResponse']:
        """
        Partition Reassignment Specification of the topic
        """
        return pulumi.get(self, "partitions_reassignments")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[str]:
        """
        Replication factor of the topic
        """
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        """
        Topic Id returned by Confluent
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource.
        """
        return pulumi.get(self, "type")


class AwaitableGetTopicResult(GetTopicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicResult(
            configs=self.configs,
            id=self.id,
            input_configs=self.input_configs,
            kind=self.kind,
            metadata=self.metadata,
            name=self.name,
            partitions=self.partitions,
            partitions_count=self.partitions_count,
            partitions_reassignments=self.partitions_reassignments,
            replication_factor=self.replication_factor,
            topic_id=self.topic_id,
            type=self.type)


def get_topic(cluster_id: Optional[str] = None,
              environment_id: Optional[str] = None,
              organization_name: Optional[str] = None,
              resource_group_name: Optional[str] = None,
              topic_name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicResult:
    """
    Details of topic record
    Azure REST API version: 2024-07-01.


    :param str cluster_id: Confluent kafka or schema registry cluster id
    :param str environment_id: Confluent environment id
    :param str organization_name: Organization resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str topic_name: Confluent kafka or schema registry topic name
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['environmentId'] = environment_id
    __args__['organizationName'] = organization_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:confluent:getTopic', __args__, opts=opts, typ=GetTopicResult).value

    return AwaitableGetTopicResult(
        configs=pulumi.get(__ret__, 'configs'),
        id=pulumi.get(__ret__, 'id'),
        input_configs=pulumi.get(__ret__, 'input_configs'),
        kind=pulumi.get(__ret__, 'kind'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        partitions=pulumi.get(__ret__, 'partitions'),
        partitions_count=pulumi.get(__ret__, 'partitions_count'),
        partitions_reassignments=pulumi.get(__ret__, 'partitions_reassignments'),
        replication_factor=pulumi.get(__ret__, 'replication_factor'),
        topic_id=pulumi.get(__ret__, 'topic_id'),
        type=pulumi.get(__ret__, 'type'))
def get_topic_output(cluster_id: Optional[pulumi.Input[str]] = None,
                     environment_id: Optional[pulumi.Input[str]] = None,
                     organization_name: Optional[pulumi.Input[str]] = None,
                     resource_group_name: Optional[pulumi.Input[str]] = None,
                     topic_name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTopicResult]:
    """
    Details of topic record
    Azure REST API version: 2024-07-01.


    :param str cluster_id: Confluent kafka or schema registry cluster id
    :param str environment_id: Confluent environment id
    :param str organization_name: Organization resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str topic_name: Confluent kafka or schema registry topic name
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['environmentId'] = environment_id
    __args__['organizationName'] = organization_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:confluent:getTopic', __args__, opts=opts, typ=GetTopicResult)
    return __ret__.apply(lambda __response__: GetTopicResult(
        configs=pulumi.get(__response__, 'configs'),
        id=pulumi.get(__response__, 'id'),
        input_configs=pulumi.get(__response__, 'input_configs'),
        kind=pulumi.get(__response__, 'kind'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        partitions=pulumi.get(__response__, 'partitions'),
        partitions_count=pulumi.get(__response__, 'partitions_count'),
        partitions_reassignments=pulumi.get(__response__, 'partitions_reassignments'),
        replication_factor=pulumi.get(__response__, 'replication_factor'),
        topic_id=pulumi.get(__response__, 'topic_id'),
        type=pulumi.get(__response__, 'type')))
