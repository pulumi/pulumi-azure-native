# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AzureBlobStorageSinkConnectorServiceInfoResponse',
    'AzureBlobStorageSourceConnectorServiceInfoResponse',
    'AzureCosmosDBSinkConnectorServiceInfoResponse',
    'AzureCosmosDBSourceConnectorServiceInfoResponse',
    'AzureSynapseAnalyticsSinkConnectorServiceInfoResponse',
    'ClusterByokEntityResponse',
    'ClusterConfigEntityResponse',
    'ClusterEnvironmentEntityResponse',
    'ClusterNetworkEntityResponse',
    'ClusterRecordResponse',
    'ClusterSpecEntityResponse',
    'ClusterStatusEntityResponse',
    'ConfluentListMetadataResponse',
    'ConnectorInfoBaseResponse',
    'EnvironmentRecordResponse',
    'InvitationRecordResponse',
    'KafkaAzureBlobStorageSinkConnectorInfoResponse',
    'KafkaAzureBlobStorageSourceConnectorInfoResponse',
    'KafkaAzureCosmosDBSinkConnectorInfoResponse',
    'KafkaAzureCosmosDBSourceConnectorInfoResponse',
    'KafkaAzureSynapseAnalyticsSinkConnectorInfoResponse',
    'MetadataEntityResponse',
    'OfferDetailResponse',
    'RegionRecordResponse',
    'RegionSpecEntityResponse',
    'RoleBindingRecordResponse',
    'SCClusterByokEntityResponse',
    'SCClusterNetworkEnvironmentEntityResponse',
    'SCClusterSpecEntityResponse',
    'SCMetadataEntityResponse',
    'ServiceAccountRecordResponse',
    'StreamGovernanceConfigResponse',
    'SystemDataResponse',
    'TopicMetadataEntityResponse',
    'TopicsInputConfigResponse',
    'TopicsRelatedLinkResponse',
    'UserDetailResponse',
    'UserRecordResponse',
]

@pulumi.output_type
class AzureBlobStorageSinkConnectorServiceInfoResponse(dict):
    """
    The authentication info when auth_type is azureBlobStorageSinkConnector
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorServiceType":
            suggest = "connector_service_type"
        elif key == "storageAccountKey":
            suggest = "storage_account_key"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "storageContainerName":
            suggest = "storage_container_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureBlobStorageSinkConnectorServiceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureBlobStorageSinkConnectorServiceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureBlobStorageSinkConnectorServiceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_service_type: builtins.str,
                 storage_account_key: Optional[builtins.str] = None,
                 storage_account_name: Optional[builtins.str] = None,
                 storage_container_name: Optional[builtins.str] = None):
        """
        The authentication info when auth_type is azureBlobStorageSinkConnector
        :param builtins.str connector_service_type: The connector service type.
               Expected value is 'AzureBlobStorageSinkConnector'.
        :param builtins.str storage_account_key: Azure Blob Storage Account Key
        :param builtins.str storage_account_name: Azure Blob Storage Account Name
        :param builtins.str storage_container_name: Azure Blob Storage Account Container Name
        """
        pulumi.set(__self__, "connector_service_type", 'AzureBlobStorageSinkConnector')
        if storage_account_key is not None:
            pulumi.set(__self__, "storage_account_key", storage_account_key)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if storage_container_name is not None:
            pulumi.set(__self__, "storage_container_name", storage_container_name)

    @property
    @pulumi.getter(name="connectorServiceType")
    def connector_service_type(self) -> builtins.str:
        """
        The connector service type.
        Expected value is 'AzureBlobStorageSinkConnector'.
        """
        return pulumi.get(self, "connector_service_type")

    @property
    @pulumi.getter(name="storageAccountKey")
    def storage_account_key(self) -> Optional[builtins.str]:
        """
        Azure Blob Storage Account Key
        """
        return pulumi.get(self, "storage_account_key")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[builtins.str]:
        """
        Azure Blob Storage Account Name
        """
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageContainerName")
    def storage_container_name(self) -> Optional[builtins.str]:
        """
        Azure Blob Storage Account Container Name
        """
        return pulumi.get(self, "storage_container_name")


@pulumi.output_type
class AzureBlobStorageSourceConnectorServiceInfoResponse(dict):
    """
    The connector service type is AzureBlobStorageSourceConnector
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorServiceType":
            suggest = "connector_service_type"
        elif key == "storageAccountKey":
            suggest = "storage_account_key"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "storageContainerName":
            suggest = "storage_container_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureBlobStorageSourceConnectorServiceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureBlobStorageSourceConnectorServiceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureBlobStorageSourceConnectorServiceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_service_type: builtins.str,
                 storage_account_key: Optional[builtins.str] = None,
                 storage_account_name: Optional[builtins.str] = None,
                 storage_container_name: Optional[builtins.str] = None):
        """
        The connector service type is AzureBlobStorageSourceConnector
        :param builtins.str connector_service_type: The connector service type.
               Expected value is 'AzureBlobStorageSourceConnector'.
        :param builtins.str storage_account_key: Azure Blob Storage Account Key
        :param builtins.str storage_account_name: Azure Blob Storage Account Name
        :param builtins.str storage_container_name: Azure Blob Storage Account Container Name
        """
        pulumi.set(__self__, "connector_service_type", 'AzureBlobStorageSourceConnector')
        if storage_account_key is not None:
            pulumi.set(__self__, "storage_account_key", storage_account_key)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if storage_container_name is not None:
            pulumi.set(__self__, "storage_container_name", storage_container_name)

    @property
    @pulumi.getter(name="connectorServiceType")
    def connector_service_type(self) -> builtins.str:
        """
        The connector service type.
        Expected value is 'AzureBlobStorageSourceConnector'.
        """
        return pulumi.get(self, "connector_service_type")

    @property
    @pulumi.getter(name="storageAccountKey")
    def storage_account_key(self) -> Optional[builtins.str]:
        """
        Azure Blob Storage Account Key
        """
        return pulumi.get(self, "storage_account_key")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[builtins.str]:
        """
        Azure Blob Storage Account Name
        """
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageContainerName")
    def storage_container_name(self) -> Optional[builtins.str]:
        """
        Azure Blob Storage Account Container Name
        """
        return pulumi.get(self, "storage_container_name")


@pulumi.output_type
class AzureCosmosDBSinkConnectorServiceInfoResponse(dict):
    """
    The authentication info when auth_type is AzureCosmosDBSinkConnector
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorServiceType":
            suggest = "connector_service_type"
        elif key == "cosmosConnectionEndpoint":
            suggest = "cosmos_connection_endpoint"
        elif key == "cosmosContainersTopicMapping":
            suggest = "cosmos_containers_topic_mapping"
        elif key == "cosmosDatabaseName":
            suggest = "cosmos_database_name"
        elif key == "cosmosIdStrategy":
            suggest = "cosmos_id_strategy"
        elif key == "cosmosMasterKey":
            suggest = "cosmos_master_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCosmosDBSinkConnectorServiceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCosmosDBSinkConnectorServiceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCosmosDBSinkConnectorServiceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_service_type: builtins.str,
                 cosmos_connection_endpoint: Optional[builtins.str] = None,
                 cosmos_containers_topic_mapping: Optional[builtins.str] = None,
                 cosmos_database_name: Optional[builtins.str] = None,
                 cosmos_id_strategy: Optional[builtins.str] = None,
                 cosmos_master_key: Optional[builtins.str] = None):
        """
        The authentication info when auth_type is AzureCosmosDBSinkConnector
        :param builtins.str connector_service_type: The connector service type.
               Expected value is 'AzureCosmosDBSinkConnector'.
        :param builtins.str cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint
        :param builtins.str cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping
        :param builtins.str cosmos_database_name: Azure Cosmos Database Name
        :param builtins.str cosmos_id_strategy: Azure Cosmos Database Id Strategy
        :param builtins.str cosmos_master_key: Azure Cosmos Database Master Key
        """
        pulumi.set(__self__, "connector_service_type", 'AzureCosmosDBSinkConnector')
        if cosmos_connection_endpoint is not None:
            pulumi.set(__self__, "cosmos_connection_endpoint", cosmos_connection_endpoint)
        if cosmos_containers_topic_mapping is not None:
            pulumi.set(__self__, "cosmos_containers_topic_mapping", cosmos_containers_topic_mapping)
        if cosmos_database_name is not None:
            pulumi.set(__self__, "cosmos_database_name", cosmos_database_name)
        if cosmos_id_strategy is not None:
            pulumi.set(__self__, "cosmos_id_strategy", cosmos_id_strategy)
        if cosmos_master_key is not None:
            pulumi.set(__self__, "cosmos_master_key", cosmos_master_key)

    @property
    @pulumi.getter(name="connectorServiceType")
    def connector_service_type(self) -> builtins.str:
        """
        The connector service type.
        Expected value is 'AzureCosmosDBSinkConnector'.
        """
        return pulumi.get(self, "connector_service_type")

    @property
    @pulumi.getter(name="cosmosConnectionEndpoint")
    def cosmos_connection_endpoint(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Connection Endpoint
        """
        return pulumi.get(self, "cosmos_connection_endpoint")

    @property
    @pulumi.getter(name="cosmosContainersTopicMapping")
    def cosmos_containers_topic_mapping(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Containers Topic Mapping
        """
        return pulumi.get(self, "cosmos_containers_topic_mapping")

    @property
    @pulumi.getter(name="cosmosDatabaseName")
    def cosmos_database_name(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Name
        """
        return pulumi.get(self, "cosmos_database_name")

    @property
    @pulumi.getter(name="cosmosIdStrategy")
    def cosmos_id_strategy(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Id Strategy
        """
        return pulumi.get(self, "cosmos_id_strategy")

    @property
    @pulumi.getter(name="cosmosMasterKey")
    def cosmos_master_key(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Master Key
        """
        return pulumi.get(self, "cosmos_master_key")


@pulumi.output_type
class AzureCosmosDBSourceConnectorServiceInfoResponse(dict):
    """
    The authentication info when auth_type is AzureCosmosDBSourceConnector
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorServiceType":
            suggest = "connector_service_type"
        elif key == "cosmosConnectionEndpoint":
            suggest = "cosmos_connection_endpoint"
        elif key == "cosmosContainersTopicMapping":
            suggest = "cosmos_containers_topic_mapping"
        elif key == "cosmosDatabaseName":
            suggest = "cosmos_database_name"
        elif key == "cosmosMasterKey":
            suggest = "cosmos_master_key"
        elif key == "cosmosMessageKeyEnabled":
            suggest = "cosmos_message_key_enabled"
        elif key == "cosmosMessageKeyField":
            suggest = "cosmos_message_key_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCosmosDBSourceConnectorServiceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCosmosDBSourceConnectorServiceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCosmosDBSourceConnectorServiceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_service_type: builtins.str,
                 cosmos_connection_endpoint: Optional[builtins.str] = None,
                 cosmos_containers_topic_mapping: Optional[builtins.str] = None,
                 cosmos_database_name: Optional[builtins.str] = None,
                 cosmos_master_key: Optional[builtins.str] = None,
                 cosmos_message_key_enabled: Optional[builtins.bool] = None,
                 cosmos_message_key_field: Optional[builtins.str] = None):
        """
        The authentication info when auth_type is AzureCosmosDBSourceConnector
        :param builtins.str connector_service_type: The connector service type.
               Expected value is 'AzureCosmosDBSourceConnector'.
        :param builtins.str cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint
        :param builtins.str cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping
        :param builtins.str cosmos_database_name: Azure Cosmos Database Name
        :param builtins.str cosmos_master_key: Azure Cosmos Database Master Key
        :param builtins.bool cosmos_message_key_enabled: Azure Cosmos Database Message Key Enabled
        :param builtins.str cosmos_message_key_field: Azure Cosmos Database Message Key Field
        """
        pulumi.set(__self__, "connector_service_type", 'AzureCosmosDBSourceConnector')
        if cosmos_connection_endpoint is not None:
            pulumi.set(__self__, "cosmos_connection_endpoint", cosmos_connection_endpoint)
        if cosmos_containers_topic_mapping is not None:
            pulumi.set(__self__, "cosmos_containers_topic_mapping", cosmos_containers_topic_mapping)
        if cosmos_database_name is not None:
            pulumi.set(__self__, "cosmos_database_name", cosmos_database_name)
        if cosmos_master_key is not None:
            pulumi.set(__self__, "cosmos_master_key", cosmos_master_key)
        if cosmos_message_key_enabled is not None:
            pulumi.set(__self__, "cosmos_message_key_enabled", cosmos_message_key_enabled)
        if cosmos_message_key_field is not None:
            pulumi.set(__self__, "cosmos_message_key_field", cosmos_message_key_field)

    @property
    @pulumi.getter(name="connectorServiceType")
    def connector_service_type(self) -> builtins.str:
        """
        The connector service type.
        Expected value is 'AzureCosmosDBSourceConnector'.
        """
        return pulumi.get(self, "connector_service_type")

    @property
    @pulumi.getter(name="cosmosConnectionEndpoint")
    def cosmos_connection_endpoint(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Connection Endpoint
        """
        return pulumi.get(self, "cosmos_connection_endpoint")

    @property
    @pulumi.getter(name="cosmosContainersTopicMapping")
    def cosmos_containers_topic_mapping(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Containers Topic Mapping
        """
        return pulumi.get(self, "cosmos_containers_topic_mapping")

    @property
    @pulumi.getter(name="cosmosDatabaseName")
    def cosmos_database_name(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Name
        """
        return pulumi.get(self, "cosmos_database_name")

    @property
    @pulumi.getter(name="cosmosMasterKey")
    def cosmos_master_key(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Master Key
        """
        return pulumi.get(self, "cosmos_master_key")

    @property
    @pulumi.getter(name="cosmosMessageKeyEnabled")
    def cosmos_message_key_enabled(self) -> Optional[builtins.bool]:
        """
        Azure Cosmos Database Message Key Enabled
        """
        return pulumi.get(self, "cosmos_message_key_enabled")

    @property
    @pulumi.getter(name="cosmosMessageKeyField")
    def cosmos_message_key_field(self) -> Optional[builtins.str]:
        """
        Azure Cosmos Database Message Key Field
        """
        return pulumi.get(self, "cosmos_message_key_field")


@pulumi.output_type
class AzureSynapseAnalyticsSinkConnectorServiceInfoResponse(dict):
    """
    The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorServiceType":
            suggest = "connector_service_type"
        elif key == "synapseSqlDatabaseName":
            suggest = "synapse_sql_database_name"
        elif key == "synapseSqlPassword":
            suggest = "synapse_sql_password"
        elif key == "synapseSqlServerName":
            suggest = "synapse_sql_server_name"
        elif key == "synapseSqlUser":
            suggest = "synapse_sql_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureSynapseAnalyticsSinkConnectorServiceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureSynapseAnalyticsSinkConnectorServiceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureSynapseAnalyticsSinkConnectorServiceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_service_type: builtins.str,
                 synapse_sql_database_name: Optional[builtins.str] = None,
                 synapse_sql_password: Optional[builtins.str] = None,
                 synapse_sql_server_name: Optional[builtins.str] = None,
                 synapse_sql_user: Optional[builtins.str] = None):
        """
        The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector
        :param builtins.str connector_service_type: The connector service type.
               Expected value is 'AzureSynapseAnalyticsSinkConnector'.
        :param builtins.str synapse_sql_database_name: Azure Synapse Dedicated SQL Pool Database Name
        :param builtins.str synapse_sql_password: Azure Synapse SQL login details
        :param builtins.str synapse_sql_server_name: Azure Synapse Analytics SQL Server Name
        :param builtins.str synapse_sql_user: Azure Synapse SQL login details
        """
        pulumi.set(__self__, "connector_service_type", 'AzureSynapseAnalyticsSinkConnector')
        if synapse_sql_database_name is not None:
            pulumi.set(__self__, "synapse_sql_database_name", synapse_sql_database_name)
        if synapse_sql_password is not None:
            pulumi.set(__self__, "synapse_sql_password", synapse_sql_password)
        if synapse_sql_server_name is not None:
            pulumi.set(__self__, "synapse_sql_server_name", synapse_sql_server_name)
        if synapse_sql_user is not None:
            pulumi.set(__self__, "synapse_sql_user", synapse_sql_user)

    @property
    @pulumi.getter(name="connectorServiceType")
    def connector_service_type(self) -> builtins.str:
        """
        The connector service type.
        Expected value is 'AzureSynapseAnalyticsSinkConnector'.
        """
        return pulumi.get(self, "connector_service_type")

    @property
    @pulumi.getter(name="synapseSqlDatabaseName")
    def synapse_sql_database_name(self) -> Optional[builtins.str]:
        """
        Azure Synapse Dedicated SQL Pool Database Name
        """
        return pulumi.get(self, "synapse_sql_database_name")

    @property
    @pulumi.getter(name="synapseSqlPassword")
    def synapse_sql_password(self) -> Optional[builtins.str]:
        """
        Azure Synapse SQL login details
        """
        return pulumi.get(self, "synapse_sql_password")

    @property
    @pulumi.getter(name="synapseSqlServerName")
    def synapse_sql_server_name(self) -> Optional[builtins.str]:
        """
        Azure Synapse Analytics SQL Server Name
        """
        return pulumi.get(self, "synapse_sql_server_name")

    @property
    @pulumi.getter(name="synapseSqlUser")
    def synapse_sql_user(self) -> Optional[builtins.str]:
        """
        Azure Synapse SQL login details
        """
        return pulumi.get(self, "synapse_sql_user")


@pulumi.output_type
class ClusterByokEntityResponse(dict):
    """
    The network associated with this object
    """
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 related: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None):
        """
        The network associated with this object
        :param builtins.str id: ID of the referred resource
        :param builtins.str related: API URL for accessing or modifying the referred object
        :param builtins.str resource_name: CRN reference to the referred resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if related is not None:
            pulumi.set(__self__, "related", related)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        ID of the referred resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def related(self) -> Optional[builtins.str]:
        """
        API URL for accessing or modifying the referred object
        """
        return pulumi.get(self, "related")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        CRN reference to the referred resource
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class ClusterConfigEntityResponse(dict):
    """
    The configuration of the Kafka cluster
    """
    def __init__(__self__, *,
                 kind: Optional[builtins.str] = None):
        """
        The configuration of the Kafka cluster
        :param builtins.str kind: The lifecycle phase of the cluster
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        The lifecycle phase of the cluster
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class ClusterEnvironmentEntityResponse(dict):
    """
    The environment to which cluster belongs
    """
    def __init__(__self__, *,
                 environment: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 related: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None):
        """
        The environment to which cluster belongs
        :param builtins.str environment: Environment of the referred resource
        :param builtins.str id: ID of the referred resource
        :param builtins.str related: API URL for accessing or modifying the referred object
        :param builtins.str resource_name: CRN reference to the referred resource
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if related is not None:
            pulumi.set(__self__, "related", related)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        """
        Environment of the referred resource
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        ID of the referred resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def related(self) -> Optional[builtins.str]:
        """
        API URL for accessing or modifying the referred object
        """
        return pulumi.get(self, "related")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        CRN reference to the referred resource
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class ClusterNetworkEntityResponse(dict):
    """
    The network associated with this object
    """
    def __init__(__self__, *,
                 environment: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 related: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None):
        """
        The network associated with this object
        :param builtins.str environment: Environment of the referred resource
        :param builtins.str id: ID of the referred resource
        :param builtins.str related: API URL for accessing or modifying the referred object
        :param builtins.str resource_name: CRN reference to the referred resource
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if related is not None:
            pulumi.set(__self__, "related", related)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        """
        Environment of the referred resource
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        ID of the referred resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def related(self) -> Optional[builtins.str]:
        """
        API URL for accessing or modifying the referred object
        """
        return pulumi.get(self, "related")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        CRN reference to the referred resource
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class ClusterRecordResponse(dict):
    """
    Details of cluster record
    """
    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.MetadataEntityResponse'] = None,
                 spec: Optional['outputs.ClusterSpecEntityResponse'] = None,
                 status: Optional['outputs.ClusterStatusEntityResponse'] = None):
        """
        Details of cluster record
        :param builtins.str display_name: Display name of the cluster
        :param builtins.str id: Id of the cluster
        :param builtins.str kind: Type of cluster
        :param 'MetadataEntityResponse' metadata: Metadata of the record
        :param 'ClusterSpecEntityResponse' spec: Specification of the cluster
        :param 'ClusterStatusEntityResponse' status: Specification of the cluster
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        Display name of the cluster
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Type of cluster
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.MetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ClusterSpecEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.ClusterStatusEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterSpecEntityResponse(dict):
    """
    Spec of the cluster record
    """
    def __init__(__self__, *,
                 api_endpoint: Optional[builtins.str] = None,
                 availability: Optional[builtins.str] = None,
                 byok: Optional['outputs.ClusterByokEntityResponse'] = None,
                 cloud: Optional[builtins.str] = None,
                 config: Optional['outputs.ClusterConfigEntityResponse'] = None,
                 display_name: Optional[builtins.str] = None,
                 environment: Optional['outputs.ClusterEnvironmentEntityResponse'] = None,
                 http_endpoint: Optional[builtins.str] = None,
                 kafka_bootstrap_endpoint: Optional[builtins.str] = None,
                 network: Optional['outputs.ClusterNetworkEntityResponse'] = None,
                 region: Optional[builtins.str] = None,
                 zone: Optional[builtins.str] = None):
        """
        Spec of the cluster record
        :param builtins.str api_endpoint: The Kafka API cluster endpoint
        :param builtins.str availability: The availability zone configuration of the cluster
        :param 'ClusterByokEntityResponse' byok: Specification of the cluster
        :param builtins.str cloud: The cloud service provider 
        :param 'ClusterConfigEntityResponse' config: Specification of the cluster
        :param builtins.str display_name: The name of the cluster
        :param 'ClusterEnvironmentEntityResponse' environment: Specification of the cluster
        :param builtins.str http_endpoint: The cluster HTTP request URL.
        :param builtins.str kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to the cluster
        :param 'ClusterNetworkEntityResponse' network: Specification of the cluster
        :param builtins.str region: The cloud service provider region
        :param builtins.str zone: type of zone availability
        """
        if api_endpoint is not None:
            pulumi.set(__self__, "api_endpoint", api_endpoint)
        if availability is not None:
            pulumi.set(__self__, "availability", availability)
        if byok is not None:
            pulumi.set(__self__, "byok", byok)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if kafka_bootstrap_endpoint is not None:
            pulumi.set(__self__, "kafka_bootstrap_endpoint", kafka_bootstrap_endpoint)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="apiEndpoint")
    def api_endpoint(self) -> Optional[builtins.str]:
        """
        The Kafka API cluster endpoint
        """
        return pulumi.get(self, "api_endpoint")

    @property
    @pulumi.getter
    def availability(self) -> Optional[builtins.str]:
        """
        The availability zone configuration of the cluster
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter
    def byok(self) -> Optional['outputs.ClusterByokEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "byok")

    @property
    @pulumi.getter
    def cloud(self) -> Optional[builtins.str]:
        """
        The cloud service provider 
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ClusterConfigEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        The name of the cluster
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.ClusterEnvironmentEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[builtins.str]:
        """
        The cluster HTTP request URL.
        """
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="kafkaBootstrapEndpoint")
    def kafka_bootstrap_endpoint(self) -> Optional[builtins.str]:
        """
        The bootstrap endpoint used by Kafka clients to connect to the cluster
        """
        return pulumi.get(self, "kafka_bootstrap_endpoint")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ClusterNetworkEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        """
        The cloud service provider region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def zone(self) -> Optional[builtins.str]:
        """
        type of zone availability
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ClusterStatusEntityResponse(dict):
    """
    Status of the cluster record
    """
    def __init__(__self__, *,
                 cku: Optional[builtins.int] = None,
                 phase: Optional[builtins.str] = None):
        """
        Status of the cluster record
        :param builtins.int cku: The number of Confluent Kafka Units 
        :param builtins.str phase: The lifecycle phase of the cluster
        """
        if cku is not None:
            pulumi.set(__self__, "cku", cku)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def cku(self) -> Optional[builtins.int]:
        """
        The number of Confluent Kafka Units 
        """
        return pulumi.get(self, "cku")

    @property
    @pulumi.getter
    def phase(self) -> Optional[builtins.str]:
        """
        The lifecycle phase of the cluster
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class ConfluentListMetadataResponse(dict):
    """
    Metadata of the list
    """
    def __init__(__self__, *,
                 first: Optional[builtins.str] = None,
                 last: Optional[builtins.str] = None,
                 next: Optional[builtins.str] = None,
                 prev: Optional[builtins.str] = None,
                 total_size: Optional[builtins.int] = None):
        """
        Metadata of the list
        :param builtins.str first: First page of the list
        :param builtins.str last: Last page of the list
        :param builtins.str next: Next page of the list
        :param builtins.str prev: Previous page of the list
        :param builtins.int total_size: Total size of the list
        """
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter
    def first(self) -> Optional[builtins.str]:
        """
        First page of the list
        """
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[builtins.str]:
        """
        Last page of the list
        """
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[builtins.str]:
        """
        Next page of the list
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def prev(self) -> Optional[builtins.str]:
        """
        Previous page of the list
        """
        return pulumi.get(self, "prev")

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[builtins.int]:
        """
        Total size of the list
        """
        return pulumi.get(self, "total_size")


@pulumi.output_type
class ConnectorInfoBaseResponse(dict):
    """
    Connector Info Base properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorClass":
            suggest = "connector_class"
        elif key == "connectorId":
            suggest = "connector_id"
        elif key == "connectorName":
            suggest = "connector_name"
        elif key == "connectorState":
            suggest = "connector_state"
        elif key == "connectorType":
            suggest = "connector_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorInfoBaseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorInfoBaseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorInfoBaseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_class: Optional[builtins.str] = None,
                 connector_id: Optional[builtins.str] = None,
                 connector_name: Optional[builtins.str] = None,
                 connector_state: Optional[builtins.str] = None,
                 connector_type: Optional[builtins.str] = None):
        """
        Connector Info Base properties
        :param builtins.str connector_class: Connector Class
        :param builtins.str connector_id: Connector Id
        :param builtins.str connector_name: Connector Name
        :param builtins.str connector_state: Connector Status
        :param builtins.str connector_type: Connector Type
        """
        if connector_class is not None:
            pulumi.set(__self__, "connector_class", connector_class)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)
        if connector_state is not None:
            pulumi.set(__self__, "connector_state", connector_state)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)

    @property
    @pulumi.getter(name="connectorClass")
    def connector_class(self) -> Optional[builtins.str]:
        """
        Connector Class
        """
        return pulumi.get(self, "connector_class")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[builtins.str]:
        """
        Connector Id
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[builtins.str]:
        """
        Connector Name
        """
        return pulumi.get(self, "connector_name")

    @property
    @pulumi.getter(name="connectorState")
    def connector_state(self) -> Optional[builtins.str]:
        """
        Connector Status
        """
        return pulumi.get(self, "connector_state")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[builtins.str]:
        """
        Connector Type
        """
        return pulumi.get(self, "connector_type")


@pulumi.output_type
class EnvironmentRecordResponse(dict):
    """
    Details about environment name, metadata and environment id of an environment
    """
    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.MetadataEntityResponse'] = None):
        """
        Details about environment name, metadata and environment id of an environment
        :param builtins.str display_name: Display name of the user
        :param builtins.str id: Id of the environment
        :param builtins.str kind: Type of environment
        :param 'MetadataEntityResponse' metadata: Metadata of the record
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        Display name of the user
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the environment
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Type of environment
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.MetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")


@pulumi.output_type
class InvitationRecordResponse(dict):
    """
    Record of the invitation
    """
    def __init__(__self__, *,
                 accepted_at: Optional[builtins.str] = None,
                 auth_type: Optional[builtins.str] = None,
                 email: Optional[builtins.str] = None,
                 expires_at: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.MetadataEntityResponse'] = None,
                 status: Optional[builtins.str] = None):
        """
        Record of the invitation
        :param builtins.str accepted_at: Accepted date time of the invitation
        :param builtins.str auth_type: Auth type of the user
        :param builtins.str email: Email of the user
        :param builtins.str expires_at: Expiration date time of the invitation
        :param builtins.str id: Id of the invitation
        :param builtins.str kind: Type of account
        :param 'MetadataEntityResponse' metadata: Metadata of the record
        :param builtins.str status: Status of the invitation
        """
        if accepted_at is not None:
            pulumi.set(__self__, "accepted_at", accepted_at)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="acceptedAt")
    def accepted_at(self) -> Optional[builtins.str]:
        """
        Accepted date time of the invitation
        """
        return pulumi.get(self, "accepted_at")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Auth type of the user
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> Optional[builtins.str]:
        """
        Email of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[builtins.str]:
        """
        Expiration date time of the invitation
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the invitation
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Type of account
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.MetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        Status of the invitation
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class KafkaAzureBlobStorageSinkConnectorInfoResponse(dict):
    """
    The partner connector type is KafkaAzureBlobStorageSink
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "partnerConnectorType":
            suggest = "partner_connector_type"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiSecret":
            suggest = "api_secret"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "flushSize":
            suggest = "flush_size"
        elif key == "inputFormat":
            suggest = "input_format"
        elif key == "maxTasks":
            suggest = "max_tasks"
        elif key == "outputFormat":
            suggest = "output_format"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "timeInterval":
            suggest = "time_interval"
        elif key == "topicsDir":
            suggest = "topics_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaAzureBlobStorageSinkConnectorInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaAzureBlobStorageSinkConnectorInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaAzureBlobStorageSinkConnectorInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 partner_connector_type: builtins.str,
                 api_key: Optional[builtins.str] = None,
                 api_secret: Optional[builtins.str] = None,
                 auth_type: Optional[builtins.str] = None,
                 flush_size: Optional[builtins.str] = None,
                 input_format: Optional[builtins.str] = None,
                 max_tasks: Optional[builtins.str] = None,
                 output_format: Optional[builtins.str] = None,
                 service_account_id: Optional[builtins.str] = None,
                 time_interval: Optional[builtins.str] = None,
                 topics: Optional[Sequence[builtins.str]] = None,
                 topics_dir: Optional[builtins.str] = None):
        """
        The partner connector type is KafkaAzureBlobStorageSink
        :param builtins.str partner_connector_type: Partner Connector type.
               Expected value is 'KafkaAzureBlobStorageSink'.
        :param builtins.str api_key: Kafka API Key
        :param builtins.str api_secret: Kafka API Key Secret
        :param builtins.str auth_type: Kafka Auth Type
        :param builtins.str flush_size: Flush size
        :param builtins.str input_format: Kafka Input Data Format Type
        :param builtins.str max_tasks: Maximum Tasks
        :param builtins.str output_format: Kafka Output Data Format Type
        :param builtins.str service_account_id: Kafka Service Account Id
        :param builtins.str time_interval: Time Interval
        :param Sequence[builtins.str] topics: Kafka topics list
        :param builtins.str topics_dir: Kafka topics directory
        """
        pulumi.set(__self__, "partner_connector_type", 'KafkaAzureBlobStorageSink')
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if flush_size is not None:
            pulumi.set(__self__, "flush_size", flush_size)
        if input_format is not None:
            pulumi.set(__self__, "input_format", input_format)
        if max_tasks is not None:
            pulumi.set(__self__, "max_tasks", max_tasks)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_dir is not None:
            pulumi.set(__self__, "topics_dir", topics_dir)

    @property
    @pulumi.getter(name="partnerConnectorType")
    def partner_connector_type(self) -> builtins.str:
        """
        Partner Connector type.
        Expected value is 'KafkaAzureBlobStorageSink'.
        """
        return pulumi.get(self, "partner_connector_type")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[builtins.str]:
        """
        Kafka API Key
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[builtins.str]:
        """
        Kafka API Key Secret
        """
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Kafka Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="flushSize")
    def flush_size(self) -> Optional[builtins.str]:
        """
        Flush size
        """
        return pulumi.get(self, "flush_size")

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[builtins.str]:
        """
        Kafka Input Data Format Type
        """
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="maxTasks")
    def max_tasks(self) -> Optional[builtins.str]:
        """
        Maximum Tasks
        """
        return pulumi.get(self, "max_tasks")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[builtins.str]:
        """
        Kafka Output Data Format Type
        """
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[builtins.str]:
        """
        Kafka Service Account Id
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[builtins.str]:
        """
        Time Interval
        """
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter
    def topics(self) -> Optional[Sequence[builtins.str]]:
        """
        Kafka topics list
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter(name="topicsDir")
    def topics_dir(self) -> Optional[builtins.str]:
        """
        Kafka topics directory
        """
        return pulumi.get(self, "topics_dir")


@pulumi.output_type
class KafkaAzureBlobStorageSourceConnectorInfoResponse(dict):
    """
    The partner connector type is KafkaAzureBlobStorageSource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "partnerConnectorType":
            suggest = "partner_connector_type"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiSecret":
            suggest = "api_secret"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "inputFormat":
            suggest = "input_format"
        elif key == "maxTasks":
            suggest = "max_tasks"
        elif key == "outputFormat":
            suggest = "output_format"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "topicRegex":
            suggest = "topic_regex"
        elif key == "topicsDir":
            suggest = "topics_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaAzureBlobStorageSourceConnectorInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaAzureBlobStorageSourceConnectorInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaAzureBlobStorageSourceConnectorInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 partner_connector_type: builtins.str,
                 api_key: Optional[builtins.str] = None,
                 api_secret: Optional[builtins.str] = None,
                 auth_type: Optional[builtins.str] = None,
                 input_format: Optional[builtins.str] = None,
                 max_tasks: Optional[builtins.str] = None,
                 output_format: Optional[builtins.str] = None,
                 service_account_id: Optional[builtins.str] = None,
                 topic_regex: Optional[builtins.str] = None,
                 topics_dir: Optional[builtins.str] = None):
        """
        The partner connector type is KafkaAzureBlobStorageSource
        :param builtins.str partner_connector_type: Partner Connector type.
               Expected value is 'KafkaAzureBlobStorageSource'.
        :param builtins.str api_key: Kafka API Key
        :param builtins.str api_secret: Kafka API Secret
        :param builtins.str auth_type: Kafka Auth Type
        :param builtins.str input_format: Kafka Input Data Format Type
        :param builtins.str max_tasks: Maximum Tasks
        :param builtins.str output_format: Kafka Output Data Format Type
        :param builtins.str service_account_id: Kafka Service Account Id
        :param builtins.str topic_regex: Kafka topics Regex pattern
        :param builtins.str topics_dir: Kafka topics directory
        """
        pulumi.set(__self__, "partner_connector_type", 'KafkaAzureBlobStorageSource')
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if input_format is not None:
            pulumi.set(__self__, "input_format", input_format)
        if max_tasks is not None:
            pulumi.set(__self__, "max_tasks", max_tasks)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if topic_regex is not None:
            pulumi.set(__self__, "topic_regex", topic_regex)
        if topics_dir is not None:
            pulumi.set(__self__, "topics_dir", topics_dir)

    @property
    @pulumi.getter(name="partnerConnectorType")
    def partner_connector_type(self) -> builtins.str:
        """
        Partner Connector type.
        Expected value is 'KafkaAzureBlobStorageSource'.
        """
        return pulumi.get(self, "partner_connector_type")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[builtins.str]:
        """
        Kafka API Key
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[builtins.str]:
        """
        Kafka API Secret
        """
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Kafka Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[builtins.str]:
        """
        Kafka Input Data Format Type
        """
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="maxTasks")
    def max_tasks(self) -> Optional[builtins.str]:
        """
        Maximum Tasks
        """
        return pulumi.get(self, "max_tasks")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[builtins.str]:
        """
        Kafka Output Data Format Type
        """
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[builtins.str]:
        """
        Kafka Service Account Id
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="topicRegex")
    def topic_regex(self) -> Optional[builtins.str]:
        """
        Kafka topics Regex pattern
        """
        return pulumi.get(self, "topic_regex")

    @property
    @pulumi.getter(name="topicsDir")
    def topics_dir(self) -> Optional[builtins.str]:
        """
        Kafka topics directory
        """
        return pulumi.get(self, "topics_dir")


@pulumi.output_type
class KafkaAzureCosmosDBSinkConnectorInfoResponse(dict):
    """
    The partner connector type is KafkaAzureCosmosDBSink
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "partnerConnectorType":
            suggest = "partner_connector_type"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiSecret":
            suggest = "api_secret"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "flushSize":
            suggest = "flush_size"
        elif key == "inputFormat":
            suggest = "input_format"
        elif key == "maxTasks":
            suggest = "max_tasks"
        elif key == "outputFormat":
            suggest = "output_format"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "timeInterval":
            suggest = "time_interval"
        elif key == "topicsDir":
            suggest = "topics_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaAzureCosmosDBSinkConnectorInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaAzureCosmosDBSinkConnectorInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaAzureCosmosDBSinkConnectorInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 partner_connector_type: builtins.str,
                 api_key: Optional[builtins.str] = None,
                 api_secret: Optional[builtins.str] = None,
                 auth_type: Optional[builtins.str] = None,
                 flush_size: Optional[builtins.str] = None,
                 input_format: Optional[builtins.str] = None,
                 max_tasks: Optional[builtins.str] = None,
                 output_format: Optional[builtins.str] = None,
                 service_account_id: Optional[builtins.str] = None,
                 time_interval: Optional[builtins.str] = None,
                 topics: Optional[Sequence[builtins.str]] = None,
                 topics_dir: Optional[builtins.str] = None):
        """
        The partner connector type is KafkaAzureCosmosDBSink
        :param builtins.str partner_connector_type: Partner Connector type.
               Expected value is 'KafkaAzureCosmosDBSink'.
        :param builtins.str api_key: Kafka API Key
        :param builtins.str api_secret: Kafka API Key Secret
        :param builtins.str auth_type: Kafka Auth Type
        :param builtins.str flush_size: Flush size
        :param builtins.str input_format: Kafka Input Data Format Type
        :param builtins.str max_tasks: Maximum Tasks
        :param builtins.str output_format: Kafka Output Data Format Type
        :param builtins.str service_account_id: Kafka Service Account Id
        :param builtins.str time_interval: Time Interval
        :param Sequence[builtins.str] topics: Kafka topics list
        :param builtins.str topics_dir: Kafka topics directory
        """
        pulumi.set(__self__, "partner_connector_type", 'KafkaAzureCosmosDBSink')
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if flush_size is not None:
            pulumi.set(__self__, "flush_size", flush_size)
        if input_format is not None:
            pulumi.set(__self__, "input_format", input_format)
        if max_tasks is not None:
            pulumi.set(__self__, "max_tasks", max_tasks)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_dir is not None:
            pulumi.set(__self__, "topics_dir", topics_dir)

    @property
    @pulumi.getter(name="partnerConnectorType")
    def partner_connector_type(self) -> builtins.str:
        """
        Partner Connector type.
        Expected value is 'KafkaAzureCosmosDBSink'.
        """
        return pulumi.get(self, "partner_connector_type")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[builtins.str]:
        """
        Kafka API Key
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[builtins.str]:
        """
        Kafka API Key Secret
        """
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Kafka Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="flushSize")
    def flush_size(self) -> Optional[builtins.str]:
        """
        Flush size
        """
        return pulumi.get(self, "flush_size")

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[builtins.str]:
        """
        Kafka Input Data Format Type
        """
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="maxTasks")
    def max_tasks(self) -> Optional[builtins.str]:
        """
        Maximum Tasks
        """
        return pulumi.get(self, "max_tasks")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[builtins.str]:
        """
        Kafka Output Data Format Type
        """
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[builtins.str]:
        """
        Kafka Service Account Id
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[builtins.str]:
        """
        Time Interval
        """
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter
    def topics(self) -> Optional[Sequence[builtins.str]]:
        """
        Kafka topics list
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter(name="topicsDir")
    def topics_dir(self) -> Optional[builtins.str]:
        """
        Kafka topics directory
        """
        return pulumi.get(self, "topics_dir")


@pulumi.output_type
class KafkaAzureCosmosDBSourceConnectorInfoResponse(dict):
    """
    The partner connector type is KafkaAzureCosmosDBSource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "partnerConnectorType":
            suggest = "partner_connector_type"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiSecret":
            suggest = "api_secret"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "inputFormat":
            suggest = "input_format"
        elif key == "maxTasks":
            suggest = "max_tasks"
        elif key == "outputFormat":
            suggest = "output_format"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "topicRegex":
            suggest = "topic_regex"
        elif key == "topicsDir":
            suggest = "topics_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaAzureCosmosDBSourceConnectorInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaAzureCosmosDBSourceConnectorInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaAzureCosmosDBSourceConnectorInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 partner_connector_type: builtins.str,
                 api_key: Optional[builtins.str] = None,
                 api_secret: Optional[builtins.str] = None,
                 auth_type: Optional[builtins.str] = None,
                 input_format: Optional[builtins.str] = None,
                 max_tasks: Optional[builtins.str] = None,
                 output_format: Optional[builtins.str] = None,
                 service_account_id: Optional[builtins.str] = None,
                 topic_regex: Optional[builtins.str] = None,
                 topics_dir: Optional[builtins.str] = None):
        """
        The partner connector type is KafkaAzureCosmosDBSource
        :param builtins.str partner_connector_type: Partner Connector type.
               Expected value is 'KafkaAzureCosmosDBSource'.
        :param builtins.str api_key: Kafka API Key
        :param builtins.str api_secret: Kafka API Secret
        :param builtins.str auth_type: Kafka Auth Type
        :param builtins.str input_format: Kafka Input Data Format Type
        :param builtins.str max_tasks: Maximum Tasks
        :param builtins.str output_format: Kafka Output Data Format Type
        :param builtins.str service_account_id: Kafka Service Account Id
        :param builtins.str topic_regex: Kafka topics Regex pattern
        :param builtins.str topics_dir: Kafka topics directory
        """
        pulumi.set(__self__, "partner_connector_type", 'KafkaAzureCosmosDBSource')
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if input_format is not None:
            pulumi.set(__self__, "input_format", input_format)
        if max_tasks is not None:
            pulumi.set(__self__, "max_tasks", max_tasks)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if topic_regex is not None:
            pulumi.set(__self__, "topic_regex", topic_regex)
        if topics_dir is not None:
            pulumi.set(__self__, "topics_dir", topics_dir)

    @property
    @pulumi.getter(name="partnerConnectorType")
    def partner_connector_type(self) -> builtins.str:
        """
        Partner Connector type.
        Expected value is 'KafkaAzureCosmosDBSource'.
        """
        return pulumi.get(self, "partner_connector_type")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[builtins.str]:
        """
        Kafka API Key
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[builtins.str]:
        """
        Kafka API Secret
        """
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Kafka Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[builtins.str]:
        """
        Kafka Input Data Format Type
        """
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="maxTasks")
    def max_tasks(self) -> Optional[builtins.str]:
        """
        Maximum Tasks
        """
        return pulumi.get(self, "max_tasks")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[builtins.str]:
        """
        Kafka Output Data Format Type
        """
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[builtins.str]:
        """
        Kafka Service Account Id
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="topicRegex")
    def topic_regex(self) -> Optional[builtins.str]:
        """
        Kafka topics Regex pattern
        """
        return pulumi.get(self, "topic_regex")

    @property
    @pulumi.getter(name="topicsDir")
    def topics_dir(self) -> Optional[builtins.str]:
        """
        Kafka topics directory
        """
        return pulumi.get(self, "topics_dir")


@pulumi.output_type
class KafkaAzureSynapseAnalyticsSinkConnectorInfoResponse(dict):
    """
    The partner connector type is KafkaAzureSynapseAnalyticsSink
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "partnerConnectorType":
            suggest = "partner_connector_type"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiSecret":
            suggest = "api_secret"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "flushSize":
            suggest = "flush_size"
        elif key == "inputFormat":
            suggest = "input_format"
        elif key == "maxTasks":
            suggest = "max_tasks"
        elif key == "outputFormat":
            suggest = "output_format"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "timeInterval":
            suggest = "time_interval"
        elif key == "topicsDir":
            suggest = "topics_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaAzureSynapseAnalyticsSinkConnectorInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaAzureSynapseAnalyticsSinkConnectorInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaAzureSynapseAnalyticsSinkConnectorInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 partner_connector_type: builtins.str,
                 api_key: Optional[builtins.str] = None,
                 api_secret: Optional[builtins.str] = None,
                 auth_type: Optional[builtins.str] = None,
                 flush_size: Optional[builtins.str] = None,
                 input_format: Optional[builtins.str] = None,
                 max_tasks: Optional[builtins.str] = None,
                 output_format: Optional[builtins.str] = None,
                 service_account_id: Optional[builtins.str] = None,
                 time_interval: Optional[builtins.str] = None,
                 topics: Optional[Sequence[builtins.str]] = None,
                 topics_dir: Optional[builtins.str] = None):
        """
        The partner connector type is KafkaAzureSynapseAnalyticsSink
        :param builtins.str partner_connector_type: Partner Connector type.
               Expected value is 'KafkaAzureSynapseAnalyticsSink'.
        :param builtins.str api_key: Kafka API Key
        :param builtins.str api_secret: Kafka API Key Secret
        :param builtins.str auth_type: Kafka Auth Type
        :param builtins.str flush_size: Flush size
        :param builtins.str input_format: Kafka Input Data Format Type
        :param builtins.str max_tasks: Maximum Tasks
        :param builtins.str output_format: Kafka Output Data Format Type
        :param builtins.str service_account_id: Kafka Service Account Id
        :param builtins.str time_interval: Time Interval
        :param Sequence[builtins.str] topics: Kafka topics list
        :param builtins.str topics_dir: Kafka topics directory
        """
        pulumi.set(__self__, "partner_connector_type", 'KafkaAzureSynapseAnalyticsSink')
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if flush_size is not None:
            pulumi.set(__self__, "flush_size", flush_size)
        if input_format is not None:
            pulumi.set(__self__, "input_format", input_format)
        if max_tasks is not None:
            pulumi.set(__self__, "max_tasks", max_tasks)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if topics_dir is not None:
            pulumi.set(__self__, "topics_dir", topics_dir)

    @property
    @pulumi.getter(name="partnerConnectorType")
    def partner_connector_type(self) -> builtins.str:
        """
        Partner Connector type.
        Expected value is 'KafkaAzureSynapseAnalyticsSink'.
        """
        return pulumi.get(self, "partner_connector_type")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[builtins.str]:
        """
        Kafka API Key
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[builtins.str]:
        """
        Kafka API Key Secret
        """
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Kafka Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="flushSize")
    def flush_size(self) -> Optional[builtins.str]:
        """
        Flush size
        """
        return pulumi.get(self, "flush_size")

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[builtins.str]:
        """
        Kafka Input Data Format Type
        """
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="maxTasks")
    def max_tasks(self) -> Optional[builtins.str]:
        """
        Maximum Tasks
        """
        return pulumi.get(self, "max_tasks")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[builtins.str]:
        """
        Kafka Output Data Format Type
        """
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[builtins.str]:
        """
        Kafka Service Account Id
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[builtins.str]:
        """
        Time Interval
        """
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter
    def topics(self) -> Optional[Sequence[builtins.str]]:
        """
        Kafka topics list
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter(name="topicsDir")
    def topics_dir(self) -> Optional[builtins.str]:
        """
        Kafka topics directory
        """
        return pulumi.get(self, "topics_dir")


@pulumi.output_type
class MetadataEntityResponse(dict):
    """
    Metadata of the data record
    """
    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 deleted_at: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None,
                 self: Optional[builtins.str] = None,
                 updated_at: Optional[builtins.str] = None):
        """
        Metadata of the data record
        :param builtins.str created_at: Created Date Time
        :param builtins.str deleted_at: Deleted Date time
        :param builtins.str resource_name: Resource name of the record
        :param builtins.str self: Self lookup url
        :param builtins.str updated_at: Updated Date time
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        Created Date Time
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[builtins.str]:
        """
        Deleted Date time
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        Resource name of the record
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def self(self) -> Optional[builtins.str]:
        """
        Self lookup url
        """
        return pulumi.get(self, "self")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        """
        Updated Date time
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class OfferDetailResponse(dict):
    """
    Confluent Offer detail
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planId":
            suggest = "plan_id"
        elif key == "planName":
            suggest = "plan_name"
        elif key == "publisherId":
            suggest = "publisher_id"
        elif key == "termUnit":
            suggest = "term_unit"
        elif key == "privateOfferId":
            suggest = "private_offer_id"
        elif key == "privateOfferIds":
            suggest = "private_offer_ids"
        elif key == "termId":
            suggest = "term_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfferDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfferDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfferDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 plan_id: builtins.str,
                 plan_name: builtins.str,
                 publisher_id: builtins.str,
                 term_unit: builtins.str,
                 private_offer_id: Optional[builtins.str] = None,
                 private_offer_ids: Optional[Sequence[builtins.str]] = None,
                 status: Optional[builtins.str] = None,
                 term_id: Optional[builtins.str] = None):
        """
        Confluent Offer detail
        :param builtins.str id: Offer Id
        :param builtins.str plan_id: Offer Plan Id
        :param builtins.str plan_name: Offer Plan Name
        :param builtins.str publisher_id: Publisher Id
        :param builtins.str term_unit: Offer Plan Term unit
        :param builtins.str private_offer_id: Private Offer Id
        :param Sequence[builtins.str] private_offer_ids: Array of Private Offer Ids
        :param builtins.str status: SaaS Offer Status
        :param builtins.str term_id: Offer Plan Term Id
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "publisher_id", publisher_id)
        pulumi.set(__self__, "term_unit", term_unit)
        if private_offer_id is not None:
            pulumi.set(__self__, "private_offer_id", private_offer_id)
        if private_offer_ids is not None:
            pulumi.set(__self__, "private_offer_ids", private_offer_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if term_id is not None:
            pulumi.set(__self__, "term_id", term_id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Offer Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> builtins.str:
        """
        Offer Plan Id
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> builtins.str:
        """
        Offer Plan Name
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="publisherId")
    def publisher_id(self) -> builtins.str:
        """
        Publisher Id
        """
        return pulumi.get(self, "publisher_id")

    @property
    @pulumi.getter(name="termUnit")
    def term_unit(self) -> builtins.str:
        """
        Offer Plan Term unit
        """
        return pulumi.get(self, "term_unit")

    @property
    @pulumi.getter(name="privateOfferId")
    def private_offer_id(self) -> Optional[builtins.str]:
        """
        Private Offer Id
        """
        return pulumi.get(self, "private_offer_id")

    @property
    @pulumi.getter(name="privateOfferIds")
    def private_offer_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        Array of Private Offer Ids
        """
        return pulumi.get(self, "private_offer_ids")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        SaaS Offer Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="termId")
    def term_id(self) -> Optional[builtins.str]:
        """
        Offer Plan Term Id
        """
        return pulumi.get(self, "term_id")


@pulumi.output_type
class RegionRecordResponse(dict):
    """
    Details of region record
    """
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.SCMetadataEntityResponse'] = None,
                 spec: Optional['outputs.RegionSpecEntityResponse'] = None):
        """
        Details of region record
        :param builtins.str id: Id of the cluster
        :param builtins.str kind: Kind of the cluster
        :param 'SCMetadataEntityResponse' metadata: Metadata of the record
        :param 'RegionSpecEntityResponse' spec: Specification of the region
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Kind of the cluster
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.SCMetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.RegionSpecEntityResponse']:
        """
        Specification of the region
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class RegionSpecEntityResponse(dict):
    """
    Region spec details
    """
    def __init__(__self__, *,
                 cloud: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 packages: Optional[Sequence[builtins.str]] = None,
                 region_name: Optional[builtins.str] = None):
        """
        Region spec details
        :param builtins.str cloud: Cloud provider name
        :param builtins.str name: Display Name of the region
        :param builtins.str region_name: Region name
        """
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if region_name is not None:
            pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[builtins.str]:
        """
        Cloud provider name
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Display Name of the region
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> Optional[builtins.str]:
        """
        Region name
        """
        return pulumi.get(self, "region_name")


@pulumi.output_type
class RoleBindingRecordResponse(dict):
    """
    Details on principal, role name and crn pattern of a role binding
    """
    def __init__(__self__, *,
                 crn_pattern: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.MetadataEntityResponse'] = None,
                 principal: Optional[builtins.str] = None,
                 role_name: Optional[builtins.str] = None):
        """
        Details on principal, role name and crn pattern of a role binding
        :param builtins.str crn_pattern: A CRN that specifies the scope and resource patterns necessary for the role to bind
        :param builtins.str id: Id of the role binding
        :param builtins.str kind: The type of the resource.
        :param 'MetadataEntityResponse' metadata: Metadata of the record
        :param builtins.str principal: The principal User or Group to bind the role to
        :param builtins.str role_name: The name of the role to bind to the principal
        """
        if crn_pattern is not None:
            pulumi.set(__self__, "crn_pattern", crn_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="crnPattern")
    def crn_pattern(self) -> Optional[builtins.str]:
        """
        A CRN that specifies the scope and resource patterns necessary for the role to bind
        """
        return pulumi.get(self, "crn_pattern")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the role binding
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        The type of the resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.MetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def principal(self) -> Optional[builtins.str]:
        """
        The principal User or Group to bind the role to
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[builtins.str]:
        """
        The name of the role to bind to the principal
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class SCClusterByokEntityResponse(dict):
    """
    The network associated with this object
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SCClusterByokEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SCClusterByokEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SCClusterByokEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 related: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None):
        """
        The network associated with this object
        :param builtins.str id: ID of the referred resource
        :param builtins.str related: API URL for accessing or modifying the referred object
        :param builtins.str resource_name: CRN reference to the referred resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if related is not None:
            pulumi.set(__self__, "related", related)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        ID of the referred resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def related(self) -> Optional[builtins.str]:
        """
        API URL for accessing or modifying the referred object
        """
        return pulumi.get(self, "related")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        CRN reference to the referred resource
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class SCClusterNetworkEnvironmentEntityResponse(dict):
    """
    The environment or the network to which cluster belongs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SCClusterNetworkEnvironmentEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SCClusterNetworkEnvironmentEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SCClusterNetworkEnvironmentEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 related: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None):
        """
        The environment or the network to which cluster belongs
        :param builtins.str environment: Environment of the referred resource
        :param builtins.str id: ID of the referred resource
        :param builtins.str related: API URL for accessing or modifying the referred object
        :param builtins.str resource_name: CRN reference to the referred resource
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if related is not None:
            pulumi.set(__self__, "related", related)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        """
        Environment of the referred resource
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        ID of the referred resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def related(self) -> Optional[builtins.str]:
        """
        API URL for accessing or modifying the referred object
        """
        return pulumi.get(self, "related")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        CRN reference to the referred resource
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class SCClusterSpecEntityResponse(dict):
    """
    Spec of the cluster record
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiEndpoint":
            suggest = "api_endpoint"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "kafkaBootstrapEndpoint":
            suggest = "kafka_bootstrap_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SCClusterSpecEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SCClusterSpecEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SCClusterSpecEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_endpoint: Optional[builtins.str] = None,
                 availability: Optional[builtins.str] = None,
                 byok: Optional['outputs.SCClusterByokEntityResponse'] = None,
                 cloud: Optional[builtins.str] = None,
                 config: Optional['outputs.ClusterConfigEntityResponse'] = None,
                 environment: Optional['outputs.SCClusterNetworkEnvironmentEntityResponse'] = None,
                 http_endpoint: Optional[builtins.str] = None,
                 kafka_bootstrap_endpoint: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 network: Optional['outputs.SCClusterNetworkEnvironmentEntityResponse'] = None,
                 package: Optional[builtins.str] = None,
                 region: Optional[builtins.str] = None,
                 zone: Optional[builtins.str] = None):
        """
        Spec of the cluster record
        :param builtins.str api_endpoint: The Kafka API cluster endpoint
        :param builtins.str availability: The availability zone configuration of the cluster
        :param 'SCClusterByokEntityResponse' byok: Specification of the cluster byok
        :param builtins.str cloud: The cloud service provider 
        :param 'ClusterConfigEntityResponse' config: Specification of the cluster configuration
        :param 'SCClusterNetworkEnvironmentEntityResponse' environment: Specification of the cluster environment
        :param builtins.str http_endpoint: The cluster HTTP request URL.
        :param builtins.str kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to the cluster
        :param builtins.str name: The name of the cluster
        :param 'SCClusterNetworkEnvironmentEntityResponse' network: Specification of the cluster network
        :param builtins.str package: Stream governance configuration
        :param builtins.str region: The cloud service provider region
        :param builtins.str zone: type of zone availability
        """
        if api_endpoint is not None:
            pulumi.set(__self__, "api_endpoint", api_endpoint)
        if availability is not None:
            pulumi.set(__self__, "availability", availability)
        if byok is not None:
            pulumi.set(__self__, "byok", byok)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if kafka_bootstrap_endpoint is not None:
            pulumi.set(__self__, "kafka_bootstrap_endpoint", kafka_bootstrap_endpoint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="apiEndpoint")
    def api_endpoint(self) -> Optional[builtins.str]:
        """
        The Kafka API cluster endpoint
        """
        return pulumi.get(self, "api_endpoint")

    @property
    @pulumi.getter
    def availability(self) -> Optional[builtins.str]:
        """
        The availability zone configuration of the cluster
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter
    def byok(self) -> Optional['outputs.SCClusterByokEntityResponse']:
        """
        Specification of the cluster byok
        """
        return pulumi.get(self, "byok")

    @property
    @pulumi.getter
    def cloud(self) -> Optional[builtins.str]:
        """
        The cloud service provider 
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ClusterConfigEntityResponse']:
        """
        Specification of the cluster configuration
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.SCClusterNetworkEnvironmentEntityResponse']:
        """
        Specification of the cluster environment
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[builtins.str]:
        """
        The cluster HTTP request URL.
        """
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="kafkaBootstrapEndpoint")
    def kafka_bootstrap_endpoint(self) -> Optional[builtins.str]:
        """
        The bootstrap endpoint used by Kafka clients to connect to the cluster
        """
        return pulumi.get(self, "kafka_bootstrap_endpoint")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.SCClusterNetworkEnvironmentEntityResponse']:
        """
        Specification of the cluster network
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def package(self) -> Optional[builtins.str]:
        """
        Stream governance configuration
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        """
        The cloud service provider region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def zone(self) -> Optional[builtins.str]:
        """
        type of zone availability
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class SCMetadataEntityResponse(dict):
    """
    Metadata of the data record
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTimestamp":
            suggest = "created_timestamp"
        elif key == "deletedTimestamp":
            suggest = "deleted_timestamp"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "updatedTimestamp":
            suggest = "updated_timestamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SCMetadataEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SCMetadataEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SCMetadataEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_timestamp: Optional[builtins.str] = None,
                 deleted_timestamp: Optional[builtins.str] = None,
                 resource_name: Optional[builtins.str] = None,
                 self: Optional[builtins.str] = None,
                 updated_timestamp: Optional[builtins.str] = None):
        """
        Metadata of the data record
        :param builtins.str created_timestamp: Created Date Time
        :param builtins.str deleted_timestamp: Deleted Date time
        :param builtins.str resource_name: Resource name of the record
        :param builtins.str self: Self lookup url
        :param builtins.str updated_timestamp: Updated Date time
        """
        if created_timestamp is not None:
            pulumi.set(__self__, "created_timestamp", created_timestamp)
        if deleted_timestamp is not None:
            pulumi.set(__self__, "deleted_timestamp", deleted_timestamp)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if updated_timestamp is not None:
            pulumi.set(__self__, "updated_timestamp", updated_timestamp)

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> Optional[builtins.str]:
        """
        Created Date Time
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter(name="deletedTimestamp")
    def deleted_timestamp(self) -> Optional[builtins.str]:
        """
        Deleted Date time
        """
        return pulumi.get(self, "deleted_timestamp")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        Resource name of the record
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def self(self) -> Optional[builtins.str]:
        """
        Self lookup url
        """
        return pulumi.get(self, "self")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> Optional[builtins.str]:
        """
        Updated Date time
        """
        return pulumi.get(self, "updated_timestamp")


@pulumi.output_type
class ServiceAccountRecordResponse(dict):
    """
    Record of the service account
    """
    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.MetadataEntityResponse'] = None):
        """
        Record of the service account
        :param builtins.str description: Description of the service account
        :param builtins.str display_name: Name of the service account
        :param builtins.str id: Id of the service account
        :param builtins.str kind: Type of account
        :param 'MetadataEntityResponse' metadata: Metadata of the record
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Description of the service account
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        Name of the service account
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the service account
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Type of account
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.MetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")


@pulumi.output_type
class StreamGovernanceConfigResponse(dict):
    """
    Stream governance configuration
    """
    def __init__(__self__, *,
                 package: Optional[builtins.str] = None):
        """
        Stream governance configuration
        :param builtins.str package: Stream governance configuration
        """
        if package is not None:
            pulumi.set(__self__, "package", package)

    @property
    @pulumi.getter
    def package(self) -> Optional[builtins.str]:
        """
        Stream governance configuration
        """
        return pulumi.get(self, "package")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TopicMetadataEntityResponse(dict):
    """
    Metadata of the data record
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TopicMetadataEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TopicMetadataEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TopicMetadataEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_name: Optional[builtins.str] = None,
                 self: Optional[builtins.str] = None):
        """
        Metadata of the data record
        :param builtins.str resource_name: Resource name of the record
        :param builtins.str self: Self lookup url
        """
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if self is not None:
            pulumi.set(__self__, "self", self)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        Resource name of the record
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def self(self) -> Optional[builtins.str]:
        """
        Self lookup url
        """
        return pulumi.get(self, "self")


@pulumi.output_type
class TopicsInputConfigResponse(dict):
    """
    Topics input config
    """
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        Topics input config
        :param builtins.str name: Name of the topic input config
        :param builtins.str value: Value of the topic input config
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the topic input config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        Value of the topic input config
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TopicsRelatedLinkResponse(dict):
    """
    Partition Config spec of the topic record
    """
    def __init__(__self__, *,
                 related: Optional[builtins.str] = None):
        """
        Partition Config spec of the topic record
        :param builtins.str related: Relationship of the topic
        """
        if related is not None:
            pulumi.set(__self__, "related", related)

    @property
    @pulumi.getter
    def related(self) -> Optional[builtins.str]:
        """
        Relationship of the topic
        """
        return pulumi.get(self, "related")


@pulumi.output_type
class UserDetailResponse(dict):
    """
    Subscriber detail
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailAddress":
            suggest = "email_address"
        elif key == "aadEmail":
            suggest = "aad_email"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "userPrincipalName":
            suggest = "user_principal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_address: builtins.str,
                 aad_email: Optional[builtins.str] = None,
                 first_name: Optional[builtins.str] = None,
                 last_name: Optional[builtins.str] = None,
                 user_principal_name: Optional[builtins.str] = None):
        """
        Subscriber detail
        :param builtins.str email_address: Email address
        :param builtins.str aad_email: AAD email address
        :param builtins.str first_name: First name
        :param builtins.str last_name: Last name
        :param builtins.str user_principal_name: User principal name
        """
        pulumi.set(__self__, "email_address", email_address)
        if aad_email is not None:
            pulumi.set(__self__, "aad_email", aad_email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if user_principal_name is not None:
            pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> builtins.str:
        """
        Email address
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="aadEmail")
    def aad_email(self) -> Optional[builtins.str]:
        """
        AAD email address
        """
        return pulumi.get(self, "aad_email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[builtins.str]:
        """
        First name
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[builtins.str]:
        """
        Last name
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> Optional[builtins.str]:
        """
        User principal name
        """
        return pulumi.get(self, "user_principal_name")


@pulumi.output_type
class UserRecordResponse(dict):
    """
    Record of the user
    """
    def __init__(__self__, *,
                 auth_type: Optional[builtins.str] = None,
                 email: Optional[builtins.str] = None,
                 full_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 kind: Optional[builtins.str] = None,
                 metadata: Optional['outputs.MetadataEntityResponse'] = None):
        """
        Record of the user
        :param builtins.str auth_type: Auth type of the user
        :param builtins.str email: Email of the user
        :param builtins.str full_name: Name of the user
        :param builtins.str id: Id of the user
        :param builtins.str kind: Type of account
        :param 'MetadataEntityResponse' metadata: Metadata of the record
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[builtins.str]:
        """
        Auth type of the user
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def email(self) -> Optional[builtins.str]:
        """
        Email of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[builtins.str]:
        """
        Name of the user
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Id of the user
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Type of account
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.MetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")


