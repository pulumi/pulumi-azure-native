# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TopicArgs', 'Topic']

@pulumi.input_type
class TopicArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 environment_id: pulumi.Input[str],
                 organization_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 configs: Optional[pulumi.Input['TopicsRelatedLinkArgs']] = None,
                 input_configs: Optional[pulumi.Input[Sequence[pulumi.Input['TopicsInputConfigArgs']]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['TopicMetadataEntityArgs']] = None,
                 partitions: Optional[pulumi.Input['TopicsRelatedLinkArgs']] = None,
                 partitions_count: Optional[pulumi.Input[str]] = None,
                 partitions_reassignments: Optional[pulumi.Input['TopicsRelatedLinkArgs']] = None,
                 replication_factor: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Topic resource.
        :param pulumi.Input[str] cluster_id: Confluent kafka or schema registry cluster id
        :param pulumi.Input[str] environment_id: Confluent environment id
        :param pulumi.Input[str] organization_name: Organization resource name
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input['TopicsRelatedLinkArgs'] configs: Config Specification of the topic
        :param pulumi.Input[Sequence[pulumi.Input['TopicsInputConfigArgs']]] input_configs: Input Config Specification of the topic
        :param pulumi.Input[str] kind: Type of topic
        :param pulumi.Input['TopicMetadataEntityArgs'] metadata: Metadata of the record
        :param pulumi.Input['TopicsRelatedLinkArgs'] partitions: Partition Specification of the topic
        :param pulumi.Input[str] partitions_count: Partition count of the topic
        :param pulumi.Input['TopicsRelatedLinkArgs'] partitions_reassignments: Partition Reassignment Specification of the topic
        :param pulumi.Input[str] replication_factor: Replication factor of the topic
        :param pulumi.Input[str] topic_id: Topic Id returned by Confluent
        :param pulumi.Input[str] topic_name: Confluent kafka or schema registry topic name
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if input_configs is not None:
            pulumi.set(__self__, "input_configs", input_configs)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if partitions_count is not None:
            pulumi.set(__self__, "partitions_count", partitions_count)
        if partitions_reassignments is not None:
            pulumi.set(__self__, "partitions_reassignments", partitions_reassignments)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Confluent kafka or schema registry cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        Confluent environment id
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        """
        Organization resource name
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['TopicsRelatedLinkArgs']]:
        """
        Config Specification of the topic
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['TopicsRelatedLinkArgs']]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="inputConfigs")
    def input_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicsInputConfigArgs']]]]:
        """
        Input Config Specification of the topic
        """
        return pulumi.get(self, "input_configs")

    @input_configs.setter
    def input_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicsInputConfigArgs']]]]):
        pulumi.set(self, "input_configs", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Type of topic
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['TopicMetadataEntityArgs']]:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['TopicMetadataEntityArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input['TopicsRelatedLinkArgs']]:
        """
        Partition Specification of the topic
        """
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input['TopicsRelatedLinkArgs']]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter(name="partitionsCount")
    def partitions_count(self) -> Optional[pulumi.Input[str]]:
        """
        Partition count of the topic
        """
        return pulumi.get(self, "partitions_count")

    @partitions_count.setter
    def partitions_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partitions_count", value)

    @property
    @pulumi.getter(name="partitionsReassignments")
    def partitions_reassignments(self) -> Optional[pulumi.Input['TopicsRelatedLinkArgs']]:
        """
        Partition Reassignment Specification of the topic
        """
        return pulumi.get(self, "partitions_reassignments")

    @partitions_reassignments.setter
    def partitions_reassignments(self, value: Optional[pulumi.Input['TopicsRelatedLinkArgs']]):
        pulumi.set(self, "partitions_reassignments", value)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Replication factor of the topic
        """
        return pulumi.get(self, "replication_factor")

    @replication_factor.setter
    def replication_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_factor", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Topic Id returned by Confluent
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Confluent kafka or schema registry topic name
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class Topic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 configs: Optional[pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 input_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TopicsInputConfigArgs', 'TopicsInputConfigArgsDict']]]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Union['TopicMetadataEntityArgs', 'TopicMetadataEntityArgsDict']]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']]] = None,
                 partitions_count: Optional[pulumi.Input[str]] = None,
                 partitions_reassignments: Optional[pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']]] = None,
                 replication_factor: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Details of topic record

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Confluent kafka or schema registry cluster id
        :param pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']] configs: Config Specification of the topic
        :param pulumi.Input[str] environment_id: Confluent environment id
        :param pulumi.Input[Sequence[pulumi.Input[Union['TopicsInputConfigArgs', 'TopicsInputConfigArgsDict']]]] input_configs: Input Config Specification of the topic
        :param pulumi.Input[str] kind: Type of topic
        :param pulumi.Input[Union['TopicMetadataEntityArgs', 'TopicMetadataEntityArgsDict']] metadata: Metadata of the record
        :param pulumi.Input[str] organization_name: Organization resource name
        :param pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']] partitions: Partition Specification of the topic
        :param pulumi.Input[str] partitions_count: Partition count of the topic
        :param pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']] partitions_reassignments: Partition Reassignment Specification of the topic
        :param pulumi.Input[str] replication_factor: Replication factor of the topic
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] topic_id: Topic Id returned by Confluent
        :param pulumi.Input[str] topic_name: Confluent kafka or schema registry topic name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Details of topic record

        :param str resource_name: The name of the resource.
        :param TopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 configs: Optional[pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 input_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TopicsInputConfigArgs', 'TopicsInputConfigArgsDict']]]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Union['TopicMetadataEntityArgs', 'TopicMetadataEntityArgsDict']]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']]] = None,
                 partitions_count: Optional[pulumi.Input[str]] = None,
                 partitions_reassignments: Optional[pulumi.Input[Union['TopicsRelatedLinkArgs', 'TopicsRelatedLinkArgsDict']]] = None,
                 replication_factor: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicArgs.__new__(TopicArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["configs"] = configs
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["input_configs"] = input_configs
            __props__.__dict__["kind"] = kind
            __props__.__dict__["metadata"] = metadata
            if organization_name is None and not opts.urn:
                raise TypeError("Missing required property 'organization_name'")
            __props__.__dict__["organization_name"] = organization_name
            __props__.__dict__["partitions"] = partitions
            __props__.__dict__["partitions_count"] = partitions_count
            __props__.__dict__["partitions_reassignments"] = partitions_reassignments
            __props__.__dict__["replication_factor"] = replication_factor
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["topic_id"] = topic_id
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:confluent:Topic")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Topic, __self__).__init__(
            'azure-native:confluent/v20240701:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Topic':
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TopicArgs.__new__(TopicArgs)

        __props__.__dict__["configs"] = None
        __props__.__dict__["input_configs"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["partitions"] = None
        __props__.__dict__["partitions_count"] = None
        __props__.__dict__["partitions_reassignments"] = None
        __props__.__dict__["replication_factor"] = None
        __props__.__dict__["topic_id"] = None
        __props__.__dict__["type"] = None
        return Topic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Optional['outputs.TopicsRelatedLinkResponse']]:
        """
        Config Specification of the topic
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="inputConfigs")
    def input_configs(self) -> pulumi.Output[Optional[Sequence['outputs.TopicsInputConfigResponse']]]:
        """
        Input Config Specification of the topic
        """
        return pulumi.get(self, "input_configs")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        Type of topic
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['outputs.TopicMetadataEntityResponse']]:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Display name of the topic
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> pulumi.Output[Optional['outputs.TopicsRelatedLinkResponse']]:
        """
        Partition Specification of the topic
        """
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="partitionsCount")
    def partitions_count(self) -> pulumi.Output[Optional[str]]:
        """
        Partition count of the topic
        """
        return pulumi.get(self, "partitions_count")

    @property
    @pulumi.getter(name="partitionsReassignments")
    def partitions_reassignments(self) -> pulumi.Output[Optional['outputs.TopicsRelatedLinkResponse']]:
        """
        Partition Reassignment Specification of the topic
        """
        return pulumi.get(self, "partitions_reassignments")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> pulumi.Output[Optional[str]]:
        """
        Replication factor of the topic
        """
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[Optional[str]]:
        """
        Topic Id returned by Confluent
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource.
        """
        return pulumi.get(self, "type")

