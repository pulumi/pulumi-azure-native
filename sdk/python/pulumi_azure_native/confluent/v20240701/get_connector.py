# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetConnectorResult',
    'AwaitableGetConnectorResult',
    'get_connector',
    'get_connector_output',
]

@pulumi.output_type
class GetConnectorResult:
    """
    Details of connector record
    """
    def __init__(__self__, connector_basic_info=None, connector_service_type_info=None, id=None, name=None, partner_connector_info=None, system_data=None, type=None):
        if connector_basic_info and not isinstance(connector_basic_info, dict):
            raise TypeError("Expected argument 'connector_basic_info' to be a dict")
        pulumi.set(__self__, "connector_basic_info", connector_basic_info)
        if connector_service_type_info and not isinstance(connector_service_type_info, dict):
            raise TypeError("Expected argument 'connector_service_type_info' to be a dict")
        pulumi.set(__self__, "connector_service_type_info", connector_service_type_info)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partner_connector_info and not isinstance(partner_connector_info, dict):
            raise TypeError("Expected argument 'partner_connector_info' to be a dict")
        pulumi.set(__self__, "partner_connector_info", partner_connector_info)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectorBasicInfo")
    def connector_basic_info(self) -> Optional['outputs.ConnectorInfoBaseResponse']:
        """
        Connector Info Base
        """
        return pulumi.get(self, "connector_basic_info")

    @property
    @pulumi.getter(name="connectorServiceTypeInfo")
    def connector_service_type_info(self) -> Optional[Any]:
        """
        Connector Service type info base properties.
        """
        return pulumi.get(self, "connector_service_type_info")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnerConnectorInfo")
    def partner_connector_info(self) -> Optional[Any]:
        """
        The connection information consumed by applications.
        """
        return pulumi.get(self, "partner_connector_info")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetConnectorResult(GetConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectorResult(
            connector_basic_info=self.connector_basic_info,
            connector_service_type_info=self.connector_service_type_info,
            id=self.id,
            name=self.name,
            partner_connector_info=self.partner_connector_info,
            system_data=self.system_data,
            type=self.type)


def get_connector(cluster_id: Optional[str] = None,
                  connector_name: Optional[str] = None,
                  environment_id: Optional[str] = None,
                  organization_name: Optional[str] = None,
                  resource_group_name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectorResult:
    """
    Details of connector record


    :param str cluster_id: Confluent kafka or schema registry cluster id
    :param str connector_name: Confluent connector name
    :param str environment_id: Confluent environment id
    :param str organization_name: Organization resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['connectorName'] = connector_name
    __args__['environmentId'] = environment_id
    __args__['organizationName'] = organization_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:confluent/v20240701:getConnector', __args__, opts=opts, typ=GetConnectorResult).value

    return AwaitableGetConnectorResult(
        connector_basic_info=pulumi.get(__ret__, 'connector_basic_info'),
        connector_service_type_info=pulumi.get(__ret__, 'connector_service_type_info'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        partner_connector_info=pulumi.get(__ret__, 'partner_connector_info'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_connector_output(cluster_id: Optional[pulumi.Input[str]] = None,
                         connector_name: Optional[pulumi.Input[str]] = None,
                         environment_id: Optional[pulumi.Input[str]] = None,
                         organization_name: Optional[pulumi.Input[str]] = None,
                         resource_group_name: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectorResult]:
    """
    Details of connector record


    :param str cluster_id: Confluent kafka or schema registry cluster id
    :param str connector_name: Confluent connector name
    :param str environment_id: Confluent environment id
    :param str organization_name: Organization resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['connectorName'] = connector_name
    __args__['environmentId'] = environment_id
    __args__['organizationName'] = organization_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:confluent/v20240701:getConnector', __args__, opts=opts, typ=GetConnectorResult)
    return __ret__.apply(lambda __response__: GetConnectorResult(
        connector_basic_info=pulumi.get(__response__, 'connector_basic_info'),
        connector_service_type_info=pulumi.get(__response__, 'connector_service_type_info'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        partner_connector_info=pulumi.get(__response__, 'partner_connector_info'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
