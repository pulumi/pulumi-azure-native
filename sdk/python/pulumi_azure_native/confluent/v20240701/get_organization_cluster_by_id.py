# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetOrganizationClusterByIdResult',
    'AwaitableGetOrganizationClusterByIdResult',
    'get_organization_cluster_by_id',
    'get_organization_cluster_by_id_output',
]

@pulumi.output_type
class GetOrganizationClusterByIdResult:
    """
    Details of cluster record
    """
    def __init__(__self__, id=None, kind=None, metadata=None, name=None, spec=None, status=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if spec and not isinstance(spec, dict):
            raise TypeError("Expected argument 'spec' to be a dict")
        pulumi.set(__self__, "spec", spec)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Type of cluster
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.SCMetadataEntityResponse']:
        """
        Metadata of the record
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name of the cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.SCClusterSpecEntityResponse']:
        """
        Specification of the cluster
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.ClusterStatusEntityResponse']:
        """
        Specification of the cluster status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "type")


class AwaitableGetOrganizationClusterByIdResult(GetOrganizationClusterByIdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationClusterByIdResult(
            id=self.id,
            kind=self.kind,
            metadata=self.metadata,
            name=self.name,
            spec=self.spec,
            status=self.status,
            type=self.type)


def get_organization_cluster_by_id(cluster_id: Optional[str] = None,
                                   environment_id: Optional[str] = None,
                                   organization_name: Optional[str] = None,
                                   resource_group_name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationClusterByIdResult:
    """
    Details of cluster record


    :param str cluster_id: Confluent kafka or schema registry cluster id
    :param str environment_id: Confluent environment id
    :param str organization_name: Organization resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['environmentId'] = environment_id
    __args__['organizationName'] = organization_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:confluent/v20240701:getOrganizationClusterById', __args__, opts=opts, typ=GetOrganizationClusterByIdResult).value

    return AwaitableGetOrganizationClusterByIdResult(
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        spec=pulumi.get(__ret__, 'spec'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_organization_cluster_by_id_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                          environment_id: Optional[pulumi.Input[str]] = None,
                                          organization_name: Optional[pulumi.Input[str]] = None,
                                          resource_group_name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationClusterByIdResult]:
    """
    Details of cluster record


    :param str cluster_id: Confluent kafka or schema registry cluster id
    :param str environment_id: Confluent environment id
    :param str organization_name: Organization resource name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['environmentId'] = environment_id
    __args__['organizationName'] = organization_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:confluent/v20240701:getOrganizationClusterById', __args__, opts=opts, typ=GetOrganizationClusterByIdResult)
    return __ret__.apply(lambda __response__: GetOrganizationClusterByIdResult(
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        spec=pulumi.get(__response__, 'spec'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
