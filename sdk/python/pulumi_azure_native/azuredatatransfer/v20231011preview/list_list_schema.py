# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ListListSchemaResult',
    'AwaitableListListSchemaResult',
    'list_list_schema',
    'list_list_schema_output',
]

@pulumi.output_type
class ListListSchemaResult:
    """
    The schemas list result.
    """
    def __init__(__self__, value=None):
        if value and not isinstance(value, list):
            raise TypeError("Expected argument 'value' to be a list")
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Sequence['outputs.SchemaResponse']]:
        """
        Schemas array.
        """
        return pulumi.get(self, "value")


class AwaitableListListSchemaResult(ListListSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListListSchemaResult(
            value=self.value)


def list_list_schema(connection_id: Optional[str] = None,
                     content: Optional[str] = None,
                     id: Optional[str] = None,
                     name: Optional[str] = None,
                     pipeline_name: Optional[str] = None,
                     resource_group_name: Optional[str] = None,
                     status: Optional[Union[str, 'SchemaStatus']] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListListSchemaResult:
    """
    Lists the schemas for the specified connection in a pipeline.


    :param str connection_id: Connection ID associated with this schema
    :param str content: Content of the schema
    :param str id: ID associated with this schema
    :param str name: Name of the schema
    :param str pipeline_name: The name for the pipeline that is to be requested.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param Union[str, 'SchemaStatus'] status: Status of the schema
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['content'] = content
    __args__['id'] = id
    __args__['name'] = name
    __args__['pipelineName'] = pipeline_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azuredatatransfer/v20231011preview:listListSchema', __args__, opts=opts, typ=ListListSchemaResult).value

    return AwaitableListListSchemaResult(
        value=pulumi.get(__ret__, 'value'))


@_utilities.lift_output_func(list_list_schema)
def list_list_schema_output(connection_id: Optional[pulumi.Input[Optional[str]]] = None,
                            content: Optional[pulumi.Input[Optional[str]]] = None,
                            id: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            pipeline_name: Optional[pulumi.Input[str]] = None,
                            resource_group_name: Optional[pulumi.Input[str]] = None,
                            status: Optional[pulumi.Input[Optional[Union[str, 'SchemaStatus']]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListListSchemaResult]:
    """
    Lists the schemas for the specified connection in a pipeline.


    :param str connection_id: Connection ID associated with this schema
    :param str content: Content of the schema
    :param str id: ID associated with this schema
    :param str name: Name of the schema
    :param str pipeline_name: The name for the pipeline that is to be requested.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param Union[str, 'SchemaStatus'] status: Status of the schema
    """
    ...
