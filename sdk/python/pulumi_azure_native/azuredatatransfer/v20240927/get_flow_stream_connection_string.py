# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'GetFlowStreamConnectionStringResult',
    'AwaitableGetFlowStreamConnectionStringResult',
    'get_flow_stream_connection_string',
    'get_flow_stream_connection_string_output',
]

@pulumi.output_type
class GetFlowStreamConnectionStringResult:
    """
    The connection string for the specified streaming flow
    """
    def __init__(__self__, connection_string=None):
        if connection_string and not isinstance(connection_string, str):
            raise TypeError("Expected argument 'connection_string' to be a str")
        pulumi.set(__self__, "connection_string", connection_string)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        """
        The connection string for the specified streaming flow
        """
        return pulumi.get(self, "connection_string")


class AwaitableGetFlowStreamConnectionStringResult(GetFlowStreamConnectionStringResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlowStreamConnectionStringResult(
            connection_string=self.connection_string)


def get_flow_stream_connection_string(connection_name: Optional[str] = None,
                                      flow_name: Optional[str] = None,
                                      resource_group_name: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlowStreamConnectionStringResult:
    """
    Get the connection string for the specified flow.


    :param str connection_name: The name for the connection that is to be requested.
    :param str flow_name: The name for the flow that is to be onboarded.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['connectionName'] = connection_name
    __args__['flowName'] = flow_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azuredatatransfer/v20240927:getFlowStreamConnectionString', __args__, opts=opts, typ=GetFlowStreamConnectionStringResult).value

    return AwaitableGetFlowStreamConnectionStringResult(
        connection_string=pulumi.get(__ret__, 'connection_string'))
def get_flow_stream_connection_string_output(connection_name: Optional[pulumi.Input[str]] = None,
                                             flow_name: Optional[pulumi.Input[str]] = None,
                                             resource_group_name: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlowStreamConnectionStringResult]:
    """
    Get the connection string for the specified flow.


    :param str connection_name: The name for the connection that is to be requested.
    :param str flow_name: The name for the flow that is to be onboarded.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['connectionName'] = connection_name
    __args__['flowName'] = flow_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:azuredatatransfer/v20240927:getFlowStreamConnectionString', __args__, opts=opts, typ=GetFlowStreamConnectionStringResult)
    return __ret__.apply(lambda __response__: GetFlowStreamConnectionStringResult(
        connection_string=pulumi.get(__response__, 'connection_string')))
