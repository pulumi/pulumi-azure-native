# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'GetFlowDestinationEndpointPortsResult',
    'AwaitableGetFlowDestinationEndpointPortsResult',
    'get_flow_destination_endpoint_ports',
    'get_flow_destination_endpoint_ports_output',
]

@pulumi.output_type
class GetFlowDestinationEndpointPortsResult:
    """
    List of destination endpoint ports for the flow stream
    """
    def __init__(__self__, ports=None):
        if ports and not isinstance(ports, list):
            raise TypeError("Expected argument 'ports' to be a list")
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[float]]:
        """
        The destination endpoint port for the flow stream
        """
        return pulumi.get(self, "ports")


class AwaitableGetFlowDestinationEndpointPortsResult(GetFlowDestinationEndpointPortsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlowDestinationEndpointPortsResult(
            ports=self.ports)


def get_flow_destination_endpoint_ports(connection_name: Optional[str] = None,
                                        flow_name: Optional[str] = None,
                                        resource_group_name: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlowDestinationEndpointPortsResult:
    """
    Get the destination endpoint ports for the specified flow and stream ID.


    :param str connection_name: The name for the connection that is to be requested.
    :param str flow_name: The name for the flow that is to be onboarded.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['connectionName'] = connection_name
    __args__['flowName'] = flow_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azuredatatransfer/v20240927:getFlowDestinationEndpointPorts', __args__, opts=opts, typ=GetFlowDestinationEndpointPortsResult).value

    return AwaitableGetFlowDestinationEndpointPortsResult(
        ports=pulumi.get(__ret__, 'ports'))
def get_flow_destination_endpoint_ports_output(connection_name: Optional[pulumi.Input[str]] = None,
                                               flow_name: Optional[pulumi.Input[str]] = None,
                                               resource_group_name: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlowDestinationEndpointPortsResult]:
    """
    Get the destination endpoint ports for the specified flow and stream ID.


    :param str connection_name: The name for the connection that is to be requested.
    :param str flow_name: The name for the flow that is to be onboarded.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['connectionName'] = connection_name
    __args__['flowName'] = flow_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:azuredatatransfer/v20240927:getFlowDestinationEndpointPorts', __args__, opts=opts, typ=GetFlowDestinationEndpointPortsResult)
    return __ret__.apply(lambda __response__: GetFlowDestinationEndpointPortsResult(
        ports=pulumi.get(__response__, 'ports')))
