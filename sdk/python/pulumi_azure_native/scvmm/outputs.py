# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CheckpointResponse',
    'CloudCapacityResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'ExtendedLocationResponse',
    'GuestAgentProfileResponse',
    'GuestCredentialResponse',
    'HardwareProfileResponse',
    'HttpProxyConfigurationResponse',
    'IdentityResponse',
    'InfrastructureProfileResponse',
    'MachineExtensionInstanceViewResponseStatus',
    'MachineExtensionPropertiesResponseInstanceView',
    'NetworkInterfacesResponse',
    'NetworkProfileResponse',
    'OsProfileForVMInstanceResponse',
    'OsProfileResponse',
    'StorageProfileResponse',
    'StorageQoSPolicyDetailsResponse',
    'StorageQoSPolicyResponse',
    'SystemDataResponse',
    'VMMServerPropertiesResponseCredentials',
    'VirtualDiskResponse',
    'VirtualMachineInstancePropertiesResponseAvailabilitySets',
    'VirtualMachinePropertiesResponseAvailabilitySets',
]

@pulumi.output_type
class CheckpointResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkpointID":
            suggest = "checkpoint_id"
        elif key == "parentCheckpointID":
            suggest = "parent_checkpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckpointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckpointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckpointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 checkpoint_id: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 parent_checkpoint_id: Optional[_builtins.str] = None):
        """
        Defines the resource properties.
        :param _builtins.str checkpoint_id: Gets ID of the checkpoint.
        :param _builtins.str description: Gets description of the checkpoint.
        :param _builtins.str name: Gets name of the checkpoint.
        :param _builtins.str parent_checkpoint_id: Gets ID of parent of the checkpoint.
        """
        if checkpoint_id is not None:
            pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_checkpoint_id is not None:
            pulumi.set(__self__, "parent_checkpoint_id", parent_checkpoint_id)

    @_builtins.property
    @pulumi.getter(name="checkpointID")
    def checkpoint_id(self) -> Optional[_builtins.str]:
        """
        Gets ID of the checkpoint.
        """
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Gets description of the checkpoint.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Gets name of the checkpoint.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentCheckpointID")
    def parent_checkpoint_id(self) -> Optional[_builtins.str]:
        """
        Gets ID of parent of the checkpoint.
        """
        return pulumi.get(self, "parent_checkpoint_id")


@pulumi.output_type
class CloudCapacityResponse(dict):
    """
    Cloud Capacity model
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCount":
            suggest = "cpu_count"
        elif key == "memoryMB":
            suggest = "memory_mb"
        elif key == "vmCount":
            suggest = "vm_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudCapacityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudCapacityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudCapacityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_count: Optional[_builtins.float] = None,
                 memory_mb: Optional[_builtins.float] = None,
                 vm_count: Optional[_builtins.float] = None):
        """
        Cloud Capacity model
        :param _builtins.float cpu_count: CPUCount specifies the maximum number of CPUs that can be allocated in the cloud.
        :param _builtins.float memory_mb: MemoryMB specifies a memory usage limit in megabytes.
        :param _builtins.float vm_count: VMCount gives the max number of VMs that can be deployed in the cloud.
        """
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)

    @_builtins.property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[_builtins.float]:
        """
        CPUCount specifies the maximum number of CPUs that can be allocated in the cloud.
        """
        return pulumi.get(self, "cpu_count")

    @_builtins.property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[_builtins.float]:
        """
        MemoryMB specifies a memory usage limit in megabytes.
        """
        return pulumi.get(self, "memory_mb")

    @_builtins.property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[_builtins.float]:
        """
        VMCount gives the max number of VMs that can be deployed in the cloud.
        """
        return pulumi.get(self, "vm_count")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: _builtins.str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param _builtins.str type: The additional info type.
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: _builtins.str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: _builtins.str,
                 target: _builtins.str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param _builtins.str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param _builtins.str message: The error message.
        :param _builtins.str target: The error target.
        """
        pulumi.set(__self__, "additional_info", additional_info)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class ExtendedLocationResponse(dict):
    """
    The extended location.
    """
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        The extended location.
        :param _builtins.str name: The extended location name.
        :param _builtins.str type: The extended location type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The extended location name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The extended location type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GuestAgentProfileResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"
        elif key == "errorDetails":
            suggest = "error_details"
        elif key == "lastStatusChange":
            suggest = "last_status_change"
        elif key == "vmUuid":
            suggest = "vm_uuid"
        elif key == "clientPublicKey":
            suggest = "client_public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuestAgentProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuestAgentProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuestAgentProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: _builtins.str,
                 error_details: Sequence['outputs.ErrorDetailResponse'],
                 last_status_change: _builtins.str,
                 status: _builtins.str,
                 vm_uuid: _builtins.str,
                 client_public_key: Optional[_builtins.str] = None):
        """
        Defines the resource properties.
        :param _builtins.str agent_version: The hybrid machine agent full version.
        :param Sequence['ErrorDetailResponse'] error_details: Details about the error state.
        :param _builtins.str last_status_change: The time of the last status change.
        :param _builtins.str status: The status of the hybrid machine agent.
        :param _builtins.str vm_uuid: Specifies the VM's unique SMBIOS ID.
        :param _builtins.str client_public_key: Gets or sets the Public Key provided by the client for enabling guest management.
        """
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "last_status_change", last_status_change)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vm_uuid", vm_uuid)
        if client_public_key is not None:
            pulumi.set(__self__, "client_public_key", client_public_key)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        """
        The hybrid machine agent full version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        Details about the error state.
        """
        return pulumi.get(self, "error_details")

    @_builtins.property
    @pulumi.getter(name="lastStatusChange")
    def last_status_change(self) -> _builtins.str:
        """
        The time of the last status change.
        """
        return pulumi.get(self, "last_status_change")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the hybrid machine agent.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vmUuid")
    def vm_uuid(self) -> _builtins.str:
        """
        Specifies the VM's unique SMBIOS ID.
        """
        return pulumi.get(self, "vm_uuid")

    @_builtins.property
    @pulumi.getter(name="clientPublicKey")
    def client_public_key(self) -> Optional[_builtins.str]:
        """
        Gets or sets the Public Key provided by the client for enabling guest management.
        """
        return pulumi.get(self, "client_public_key")


@pulumi.output_type
class GuestCredentialResponse(dict):
    """
    Username / Password Credentials to connect to guest.
    """
    def __init__(__self__, *,
                 username: _builtins.str):
        """
        Username / Password Credentials to connect to guest.
        :param _builtins.str username: Gets or sets username to connect with the guest.
        """
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Gets or sets username to connect with the guest.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class HardwareProfileResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCount":
            suggest = "cpu_count"
        elif key == "dynamicMemoryEnabled":
            suggest = "dynamic_memory_enabled"
        elif key == "dynamicMemoryMaxMB":
            suggest = "dynamic_memory_max_mb"
        elif key == "dynamicMemoryMinMB":
            suggest = "dynamic_memory_min_mb"
        elif key == "isHighlyAvailable":
            suggest = "is_highly_available"
        elif key == "limitCpuForMigration":
            suggest = "limit_cpu_for_migration"
        elif key == "memoryMB":
            suggest = "memory_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HardwareProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HardwareProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HardwareProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_count: Optional[_builtins.int] = None,
                 dynamic_memory_enabled: Optional[_builtins.str] = None,
                 dynamic_memory_max_mb: Optional[_builtins.int] = None,
                 dynamic_memory_min_mb: Optional[_builtins.int] = None,
                 is_highly_available: Optional[_builtins.str] = None,
                 limit_cpu_for_migration: Optional[_builtins.str] = None,
                 memory_mb: Optional[_builtins.int] = None):
        """
        Defines the resource properties.
        :param _builtins.int cpu_count: Gets or sets the number of vCPUs for the vm.
        :param _builtins.str dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic memory or not.
        :param _builtins.int dynamic_memory_max_mb: Gets or sets the max dynamic memory for the vm.
        :param _builtins.int dynamic_memory_min_mb: Gets or sets the min dynamic memory for the vm.
        :param _builtins.str is_highly_available: Gets highly available property.
        :param _builtins.str limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        :param _builtins.int memory_mb: MemoryMB is the size of a virtual machine's memory, in MB.
        """
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if dynamic_memory_enabled is not None:
            pulumi.set(__self__, "dynamic_memory_enabled", dynamic_memory_enabled)
        if dynamic_memory_max_mb is not None:
            pulumi.set(__self__, "dynamic_memory_max_mb", dynamic_memory_max_mb)
        if dynamic_memory_min_mb is not None:
            pulumi.set(__self__, "dynamic_memory_min_mb", dynamic_memory_min_mb)
        if is_highly_available is not None:
            pulumi.set(__self__, "is_highly_available", is_highly_available)
        if limit_cpu_for_migration is not None:
            pulumi.set(__self__, "limit_cpu_for_migration", limit_cpu_for_migration)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)

    @_builtins.property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[_builtins.int]:
        """
        Gets or sets the number of vCPUs for the vm.
        """
        return pulumi.get(self, "cpu_count")

    @_builtins.property
    @pulumi.getter(name="dynamicMemoryEnabled")
    def dynamic_memory_enabled(self) -> Optional[_builtins.str]:
        """
        Gets or sets a value indicating whether to enable dynamic memory or not.
        """
        return pulumi.get(self, "dynamic_memory_enabled")

    @_builtins.property
    @pulumi.getter(name="dynamicMemoryMaxMB")
    def dynamic_memory_max_mb(self) -> Optional[_builtins.int]:
        """
        Gets or sets the max dynamic memory for the vm.
        """
        return pulumi.get(self, "dynamic_memory_max_mb")

    @_builtins.property
    @pulumi.getter(name="dynamicMemoryMinMB")
    def dynamic_memory_min_mb(self) -> Optional[_builtins.int]:
        """
        Gets or sets the min dynamic memory for the vm.
        """
        return pulumi.get(self, "dynamic_memory_min_mb")

    @_builtins.property
    @pulumi.getter(name="isHighlyAvailable")
    def is_highly_available(self) -> Optional[_builtins.str]:
        """
        Gets highly available property.
        """
        return pulumi.get(self, "is_highly_available")

    @_builtins.property
    @pulumi.getter(name="limitCpuForMigration")
    def limit_cpu_for_migration(self) -> Optional[_builtins.str]:
        """
        Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        """
        return pulumi.get(self, "limit_cpu_for_migration")

    @_builtins.property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[_builtins.int]:
        """
        MemoryMB is the size of a virtual machine's memory, in MB.
        """
        return pulumi.get(self, "memory_mb")


@pulumi.output_type
class HttpProxyConfigurationResponse(dict):
    """
    HTTP Proxy configuration for the VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpsProxy":
            suggest = "https_proxy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpProxyConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpProxyConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 https_proxy: Optional[_builtins.str] = None):
        """
        HTTP Proxy configuration for the VM.
        :param _builtins.str https_proxy: Gets or sets httpsProxy url.
        """
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)

    @_builtins.property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[_builtins.str]:
        """
        Gets or sets httpsProxy url.
        """
        return pulumi.get(self, "https_proxy")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Managed service identity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str):
        """
        Managed service identity.
        :param _builtins.str principal_id: The principal id of managed service identity.
        :param _builtins.str tenant_id: The tenant of managed service identity.
        :param _builtins.str type: The type of managed service identity.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal id of managed service identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant of managed service identity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of managed service identity.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InfrastructureProfileResponse(dict):
    """
    Specifies the vmmServer infrastructure specific settings for the virtual machine instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRestoredVMCheckpoint":
            suggest = "last_restored_vm_checkpoint"
        elif key == "biosGuid":
            suggest = "bios_guid"
        elif key == "checkpointType":
            suggest = "checkpoint_type"
        elif key == "cloudId":
            suggest = "cloud_id"
        elif key == "inventoryItemId":
            suggest = "inventory_item_id"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "vmName":
            suggest = "vm_name"
        elif key == "vmmServerId":
            suggest = "vmm_server_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InfrastructureProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InfrastructureProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InfrastructureProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_restored_vm_checkpoint: 'outputs.CheckpointResponse',
                 bios_guid: Optional[_builtins.str] = None,
                 checkpoint_type: Optional[_builtins.str] = None,
                 checkpoints: Optional[Sequence['outputs.CheckpointResponse']] = None,
                 cloud_id: Optional[_builtins.str] = None,
                 generation: Optional[_builtins.int] = None,
                 inventory_item_id: Optional[_builtins.str] = None,
                 template_id: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None,
                 vm_name: Optional[_builtins.str] = None,
                 vmm_server_id: Optional[_builtins.str] = None):
        """
        Specifies the vmmServer infrastructure specific settings for the virtual machine instance.
        :param 'CheckpointResponse' last_restored_vm_checkpoint: Last restored checkpoint in the vm.
        :param _builtins.str bios_guid: Gets or sets the bios guid for the vm.
        :param _builtins.str checkpoint_type: Type of checkpoint supported for the vm.
        :param Sequence['CheckpointResponse'] checkpoints: Checkpoints in the vm.
        :param _builtins.str cloud_id: ARM Id of the cloud resource to use for deploying the vm.
        :param _builtins.int generation: Gets or sets the generation for the vm.
        :param _builtins.str inventory_item_id: Gets or sets the inventory Item ID for the resource.
        :param _builtins.str template_id: ARM Id of the template resource to use for deploying the vm.
        :param _builtins.str uuid: Unique ID of the virtual machine.
        :param _builtins.str vm_name: VMName is the name of VM on the SCVMM server.
        :param _builtins.str vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
        """
        pulumi.set(__self__, "last_restored_vm_checkpoint", last_restored_vm_checkpoint)
        if bios_guid is not None:
            pulumi.set(__self__, "bios_guid", bios_guid)
        if checkpoint_type is not None:
            pulumi.set(__self__, "checkpoint_type", checkpoint_type)
        if checkpoints is not None:
            pulumi.set(__self__, "checkpoints", checkpoints)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if inventory_item_id is not None:
            pulumi.set(__self__, "inventory_item_id", inventory_item_id)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)
        if vmm_server_id is not None:
            pulumi.set(__self__, "vmm_server_id", vmm_server_id)

    @_builtins.property
    @pulumi.getter(name="lastRestoredVMCheckpoint")
    def last_restored_vm_checkpoint(self) -> 'outputs.CheckpointResponse':
        """
        Last restored checkpoint in the vm.
        """
        return pulumi.get(self, "last_restored_vm_checkpoint")

    @_builtins.property
    @pulumi.getter(name="biosGuid")
    def bios_guid(self) -> Optional[_builtins.str]:
        """
        Gets or sets the bios guid for the vm.
        """
        return pulumi.get(self, "bios_guid")

    @_builtins.property
    @pulumi.getter(name="checkpointType")
    def checkpoint_type(self) -> Optional[_builtins.str]:
        """
        Type of checkpoint supported for the vm.
        """
        return pulumi.get(self, "checkpoint_type")

    @_builtins.property
    @pulumi.getter
    def checkpoints(self) -> Optional[Sequence['outputs.CheckpointResponse']]:
        """
        Checkpoints in the vm.
        """
        return pulumi.get(self, "checkpoints")

    @_builtins.property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[_builtins.str]:
        """
        ARM Id of the cloud resource to use for deploying the vm.
        """
        return pulumi.get(self, "cloud_id")

    @_builtins.property
    @pulumi.getter
    def generation(self) -> Optional[_builtins.int]:
        """
        Gets or sets the generation for the vm.
        """
        return pulumi.get(self, "generation")

    @_builtins.property
    @pulumi.getter(name="inventoryItemId")
    def inventory_item_id(self) -> Optional[_builtins.str]:
        """
        Gets or sets the inventory Item ID for the resource.
        """
        return pulumi.get(self, "inventory_item_id")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[_builtins.str]:
        """
        ARM Id of the template resource to use for deploying the vm.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Unique ID of the virtual machine.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[_builtins.str]:
        """
        VMName is the name of VM on the SCVMM server.
        """
        return pulumi.get(self, "vm_name")

    @_builtins.property
    @pulumi.getter(name="vmmServerId")
    def vmm_server_id(self) -> Optional[_builtins.str]:
        """
        ARM Id of the vmmServer resource in which this resource resides.
        """
        return pulumi.get(self, "vmm_server_id")


@pulumi.output_type
class MachineExtensionInstanceViewResponseStatus(dict):
    """
    Instance view status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayStatus":
            suggest = "display_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineExtensionInstanceViewResponseStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineExtensionInstanceViewResponseStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: _builtins.str,
                 display_status: _builtins.str,
                 level: _builtins.str,
                 message: _builtins.str,
                 time: _builtins.str):
        """
        Instance view status.
        :param _builtins.str code: The status code.
        :param _builtins.str display_status: The short localizable label for the status.
        :param _builtins.str level: The level code.
        :param _builtins.str message: The detailed status message, including for alerts and error messages.
        :param _builtins.str time: The time of the status.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "display_status", display_status)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The status code.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> _builtins.str:
        """
        The short localizable label for the status.
        """
        return pulumi.get(self, "display_status")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level code.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The detailed status message, including for alerts and error messages.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        The time of the status.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MachineExtensionPropertiesResponseInstanceView(dict):
    """
    The machine extension instance view.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeHandlerVersion":
            suggest = "type_handler_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineExtensionPropertiesResponseInstanceView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineExtensionPropertiesResponseInstanceView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineExtensionPropertiesResponseInstanceView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 type: _builtins.str,
                 type_handler_version: _builtins.str,
                 status: Optional['outputs.MachineExtensionInstanceViewResponseStatus'] = None):
        """
        The machine extension instance view.
        :param _builtins.str name: The machine extension name.
        :param _builtins.str type: Specifies the type of the extension; an example is "CustomScriptExtension".
        :param _builtins.str type_handler_version: Specifies the version of the script handler.
        :param 'MachineExtensionInstanceViewResponseStatus' status: Instance view status.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_handler_version", type_handler_version)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The machine extension name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the extension; an example is "CustomScriptExtension".
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> _builtins.str:
        """
        Specifies the version of the script handler.
        """
        return pulumi.get(self, "type_handler_version")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.MachineExtensionInstanceViewResponseStatus']:
        """
        Instance view status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NetworkInterfacesResponse(dict):
    """
    Network Interface model
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ipv4Addresses":
            suggest = "ipv4_addresses"
        elif key == "ipv6Addresses":
            suggest = "ipv6_addresses"
        elif key == "networkName":
            suggest = "network_name"
        elif key == "ipv4AddressType":
            suggest = "ipv4_address_type"
        elif key == "ipv6AddressType":
            suggest = "ipv6_address_type"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressType":
            suggest = "mac_address_type"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "virtualNetworkId":
            suggest = "virtual_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfacesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfacesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfacesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: _builtins.str,
                 ipv4_addresses: Sequence[_builtins.str],
                 ipv6_addresses: Sequence[_builtins.str],
                 network_name: _builtins.str,
                 ipv4_address_type: Optional[_builtins.str] = None,
                 ipv6_address_type: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 nic_id: Optional[_builtins.str] = None,
                 virtual_network_id: Optional[_builtins.str] = None):
        """
        Network Interface model
        :param _builtins.str display_name: Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC when the name is not set.
        :param Sequence[_builtins.str] ipv4_addresses: Gets or sets the nic ipv4 addresses.
        :param Sequence[_builtins.str] ipv6_addresses: Gets or sets the nic ipv6 addresses.
        :param _builtins.str network_name: Gets or sets the name of the virtual network in vmmServer that the nic is connected to.
        :param _builtins.str ipv4_address_type: Gets or sets the ipv4 address type.
        :param _builtins.str ipv6_address_type: Gets or sets the ipv6 address type.
        :param _builtins.str mac_address: Gets or sets the nic MAC address.
        :param _builtins.str mac_address_type: Gets or sets the mac address type.
        :param _builtins.str name: Gets or sets the name of the network interface.
        :param _builtins.str nic_id: Gets or sets the nic id.
        :param _builtins.str virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        pulumi.set(__self__, "network_name", network_name)
        if ipv4_address_type is not None:
            pulumi.set(__self__, "ipv4_address_type", ipv4_address_type)
        if ipv6_address_type is not None:
            pulumi.set(__self__, "ipv6_address_type", ipv6_address_type)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_type is not None:
            pulumi.set(__self__, "mac_address_type", mac_address_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if virtual_network_id is not None:
            pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC when the name is not set.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[_builtins.str]:
        """
        Gets or sets the nic ipv4 addresses.
        """
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence[_builtins.str]:
        """
        Gets or sets the nic ipv6 addresses.
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> _builtins.str:
        """
        Gets or sets the name of the virtual network in vmmServer that the nic is connected to.
        """
        return pulumi.get(self, "network_name")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressType")
    def ipv4_address_type(self) -> Optional[_builtins.str]:
        """
        Gets or sets the ipv4 address type.
        """
        return pulumi.get(self, "ipv4_address_type")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressType")
    def ipv6_address_type(self) -> Optional[_builtins.str]:
        """
        Gets or sets the ipv6 address type.
        """
        return pulumi.get(self, "ipv6_address_type")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        Gets or sets the nic MAC address.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressType")
    def mac_address_type(self) -> Optional[_builtins.str]:
        """
        Gets or sets the mac address type.
        """
        return pulumi.get(self, "mac_address_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Gets or sets the name of the network interface.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[_builtins.str]:
        """
        Gets or sets the nic id.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[_builtins.str]:
        """
        Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
        """
        return pulumi.get(self, "virtual_network_id")


@pulumi.output_type
class NetworkProfileResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaces":
            suggest = "network_interfaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interfaces: Optional[Sequence['outputs.NetworkInterfacesResponse']] = None):
        """
        Defines the resource properties.
        :param Sequence['NetworkInterfacesResponse'] network_interfaces: Gets or sets the list of network interfaces associated with the virtual machine.
        """
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.NetworkInterfacesResponse']]:
        """
        Gets or sets the list of network interfaces associated with the virtual machine.
        """
        return pulumi.get(self, "network_interfaces")


@pulumi.output_type
class OsProfileForVMInstanceResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osSku":
            suggest = "os_sku"
        elif key == "osType":
            suggest = "os_type"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "computerName":
            suggest = "computer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsProfileForVMInstanceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsProfileForVMInstanceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsProfileForVMInstanceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_sku: _builtins.str,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 computer_name: Optional[_builtins.str] = None):
        """
        Defines the resource properties.
        :param _builtins.str os_sku: Gets or sets os sku.
        :param _builtins.str os_type: Gets or sets the type of the os.
        :param _builtins.str os_version: Gets os version.
        :param _builtins.str computer_name: Gets or sets computer name.
        """
        pulumi.set(__self__, "os_sku", os_sku)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)

    @_builtins.property
    @pulumi.getter(name="osSku")
    def os_sku(self) -> _builtins.str:
        """
        Gets or sets os sku.
        """
        return pulumi.get(self, "os_sku")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Gets or sets the type of the os.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        Gets os version.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[_builtins.str]:
        """
        Gets or sets computer name.
        """
        return pulumi.get(self, "computer_name")


@pulumi.output_type
class OsProfileResponse(dict):
    """
    Defines the resource properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osName":
            suggest = "os_name"
        elif key == "osType":
            suggest = "os_type"
        elif key == "computerName":
            suggest = "computer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OsProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OsProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_name: _builtins.str,
                 os_type: _builtins.str,
                 computer_name: Optional[_builtins.str] = None):
        """
        Defines the resource properties.
        :param _builtins.str os_name: Gets or sets os name.
        :param _builtins.str os_type: Gets or sets the type of the os.
        :param _builtins.str computer_name: Gets or sets computer name.
        """
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        if computer_name is not None:
            pulumi.set(__self__, "computer_name", computer_name)

    @_builtins.property
    @pulumi.getter(name="osName")
    def os_name(self) -> _builtins.str:
        """
        Gets or sets os name.
        """
        return pulumi.get(self, "os_name")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        Gets or sets the type of the os.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> Optional[_builtins.str]:
        """
        Gets or sets computer name.
        """
        return pulumi.get(self, "computer_name")


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    Defines the resource properties.
    """
    def __init__(__self__, *,
                 disks: Optional[Sequence['outputs.VirtualDiskResponse']] = None):
        """
        Defines the resource properties.
        :param Sequence['VirtualDiskResponse'] disks: Gets or sets the list of virtual disks associated with the virtual machine.
        """
        if disks is not None:
            pulumi.set(__self__, "disks", disks)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.VirtualDiskResponse']]:
        """
        Gets or sets the list of virtual disks associated with the virtual machine.
        """
        return pulumi.get(self, "disks")


@pulumi.output_type
class StorageQoSPolicyDetailsResponse(dict):
    """
    The StorageQoSPolicyDetails definition.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        The StorageQoSPolicyDetails definition.
        :param _builtins.str id: The ID of the QoS policy.
        :param _builtins.str name: The name of the policy.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the QoS policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StorageQoSPolicyResponse(dict):
    """
    The StorageQoSPolicy definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthLimit":
            suggest = "bandwidth_limit"
        elif key == "iopsMaximum":
            suggest = "iops_maximum"
        elif key == "iopsMinimum":
            suggest = "iops_minimum"
        elif key == "policyId":
            suggest = "policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageQoSPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageQoSPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageQoSPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_limit: Optional[_builtins.float] = None,
                 id: Optional[_builtins.str] = None,
                 iops_maximum: Optional[_builtins.float] = None,
                 iops_minimum: Optional[_builtins.float] = None,
                 name: Optional[_builtins.str] = None,
                 policy_id: Optional[_builtins.str] = None):
        """
        The StorageQoSPolicy definition.
        :param _builtins.float bandwidth_limit: The Bandwidth Limit for internet traffic.
        :param _builtins.str id: The ID of the QoS policy.
        :param _builtins.float iops_maximum: The maximum IO operations per second.
        :param _builtins.float iops_minimum: The minimum IO operations per second.
        :param _builtins.str name: The name of the policy.
        :param _builtins.str policy_id: The underlying policy.
        """
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iops_maximum is not None:
            pulumi.set(__self__, "iops_maximum", iops_maximum)
        if iops_minimum is not None:
            pulumi.set(__self__, "iops_minimum", iops_minimum)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)

    @_builtins.property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[_builtins.float]:
        """
        The Bandwidth Limit for internet traffic.
        """
        return pulumi.get(self, "bandwidth_limit")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the QoS policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="iopsMaximum")
    def iops_maximum(self) -> Optional[_builtins.float]:
        """
        The maximum IO operations per second.
        """
        return pulumi.get(self, "iops_maximum")

    @_builtins.property
    @pulumi.getter(name="iopsMinimum")
    def iops_minimum(self) -> Optional[_builtins.float]:
        """
        The minimum IO operations per second.
        """
        return pulumi.get(self, "iops_minimum")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        """
        The underlying policy.
        """
        return pulumi.get(self, "policy_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class VMMServerPropertiesResponseCredentials(dict):
    """
    Credentials to connect to VMMServer.
    """
    def __init__(__self__, *,
                 username: Optional[_builtins.str] = None):
        """
        Credentials to connect to VMMServer.
        :param _builtins.str username: Username to use to connect to VMMServer.
        """
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        """
        Username to use to connect to VMMServer.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class VirtualDiskResponse(dict):
    """
    Virtual disk model
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "maxDiskSizeGB":
            suggest = "max_disk_size_gb"
        elif key == "vhdFormatType":
            suggest = "vhd_format_type"
        elif key == "volumeType":
            suggest = "volume_type"
        elif key == "busType":
            suggest = "bus_type"
        elif key == "createDiffDisk":
            suggest = "create_diff_disk"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSizeGB":
            suggest = "disk_size_gb"
        elif key == "storageQoSPolicy":
            suggest = "storage_qo_s_policy"
        elif key == "templateDiskId":
            suggest = "template_disk_id"
        elif key == "vhdType":
            suggest = "vhd_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: _builtins.str,
                 max_disk_size_gb: _builtins.int,
                 vhd_format_type: _builtins.str,
                 volume_type: _builtins.str,
                 bus: Optional[_builtins.int] = None,
                 bus_type: Optional[_builtins.str] = None,
                 create_diff_disk: Optional[_builtins.str] = None,
                 disk_id: Optional[_builtins.str] = None,
                 disk_size_gb: Optional[_builtins.int] = None,
                 lun: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 storage_qo_s_policy: Optional['outputs.StorageQoSPolicyDetailsResponse'] = None,
                 template_disk_id: Optional[_builtins.str] = None,
                 vhd_type: Optional[_builtins.str] = None):
        """
        Virtual disk model
        :param _builtins.str display_name: Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label for a disk when the name is not set.
        :param _builtins.int max_disk_size_gb: Gets or sets the max disk size.
        :param _builtins.str vhd_format_type: Gets the disk vhd format type.
        :param _builtins.str volume_type: Gets or sets the disk volume type.
        :param _builtins.int bus: Gets or sets the disk bus.
        :param _builtins.str bus_type: Gets or sets the disk bus type.
        :param _builtins.str create_diff_disk: Gets or sets a value indicating diff disk.
        :param _builtins.str disk_id: Gets or sets the disk id.
        :param _builtins.int disk_size_gb: Gets or sets the disk total size.
        :param _builtins.int lun: Gets or sets the disk lun.
        :param _builtins.str name: Gets or sets the name of the disk.
        :param 'StorageQoSPolicyDetailsResponse' storage_qo_s_policy: The QoS policy for the disk.
        :param _builtins.str template_disk_id: Gets or sets the disk id in the template.
        :param _builtins.str vhd_type: Gets or sets the disk vhd type.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_disk_size_gb", max_disk_size_gb)
        pulumi.set(__self__, "vhd_format_type", vhd_format_type)
        pulumi.set(__self__, "volume_type", volume_type)
        if bus is not None:
            pulumi.set(__self__, "bus", bus)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if create_diff_disk is not None:
            pulumi.set(__self__, "create_diff_disk", create_diff_disk)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if storage_qo_s_policy is not None:
            pulumi.set(__self__, "storage_qo_s_policy", storage_qo_s_policy)
        if template_disk_id is not None:
            pulumi.set(__self__, "template_disk_id", template_disk_id)
        if vhd_type is not None:
            pulumi.set(__self__, "vhd_type", vhd_type)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label for a disk when the name is not set.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="maxDiskSizeGB")
    def max_disk_size_gb(self) -> _builtins.int:
        """
        Gets or sets the max disk size.
        """
        return pulumi.get(self, "max_disk_size_gb")

    @_builtins.property
    @pulumi.getter(name="vhdFormatType")
    def vhd_format_type(self) -> _builtins.str:
        """
        Gets the disk vhd format type.
        """
        return pulumi.get(self, "vhd_format_type")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Gets or sets the disk volume type.
        """
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def bus(self) -> Optional[_builtins.int]:
        """
        Gets or sets the disk bus.
        """
        return pulumi.get(self, "bus")

    @_builtins.property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[_builtins.str]:
        """
        Gets or sets the disk bus type.
        """
        return pulumi.get(self, "bus_type")

    @_builtins.property
    @pulumi.getter(name="createDiffDisk")
    def create_diff_disk(self) -> Optional[_builtins.str]:
        """
        Gets or sets a value indicating diff disk.
        """
        return pulumi.get(self, "create_diff_disk")

    @_builtins.property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[_builtins.str]:
        """
        Gets or sets the disk id.
        """
        return pulumi.get(self, "disk_id")

    @_builtins.property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> Optional[_builtins.int]:
        """
        Gets or sets the disk total size.
        """
        return pulumi.get(self, "disk_size_gb")

    @_builtins.property
    @pulumi.getter
    def lun(self) -> Optional[_builtins.int]:
        """
        Gets or sets the disk lun.
        """
        return pulumi.get(self, "lun")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Gets or sets the name of the disk.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="storageQoSPolicy")
    def storage_qo_s_policy(self) -> Optional['outputs.StorageQoSPolicyDetailsResponse']:
        """
        The QoS policy for the disk.
        """
        return pulumi.get(self, "storage_qo_s_policy")

    @_builtins.property
    @pulumi.getter(name="templateDiskId")
    def template_disk_id(self) -> Optional[_builtins.str]:
        """
        Gets or sets the disk id in the template.
        """
        return pulumi.get(self, "template_disk_id")

    @_builtins.property
    @pulumi.getter(name="vhdType")
    def vhd_type(self) -> Optional[_builtins.str]:
        """
        Gets or sets the disk vhd type.
        """
        return pulumi.get(self, "vhd_type")


@pulumi.output_type
class VirtualMachineInstancePropertiesResponseAvailabilitySets(dict):
    """
    Availability Set model
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        Availability Set model
        :param _builtins.str id: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
        :param _builtins.str name: Gets or sets the name of the availability set.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Gets or sets the name of the availability set.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualMachinePropertiesResponseAvailabilitySets(dict):
    """
    Availability Set model
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        Availability Set model
        :param _builtins.str id: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
        :param _builtins.str name: Gets or sets the name of the availability set.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Gets or sets the name of the availability set.
        """
        return pulumi.get(self, "name")


