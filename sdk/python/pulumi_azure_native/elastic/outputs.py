# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConnectedPartnerResourcePropertiesResponse',
    'ConnectedPartnerResourcesListFormatResponse',
    'ElasticCloudDeploymentResponse',
    'ElasticCloudUserResponse',
    'ElasticOrganizationToAzureSubscriptionMappingResponsePropertiesResponse',
    'ElasticPropertiesResponse',
    'ElasticTrafficFilterResponse',
    'ElasticTrafficFilterRuleResponse',
    'FilteringTagResponse',
    'IdentityPropertiesResponse',
    'LogRulesResponse',
    'MarketplaceSaaSInfoResponse',
    'MarketplaceSaaSInfoResponseMarketplaceSubscription',
    'MonitorPropertiesResponse',
    'MonitoredResourceResponse',
    'MonitoredSubscriptionResponse',
    'MonitoringTagRulesPropertiesResponse',
    'OpenAIIntegrationPropertiesResponse',
    'OpenAIIntegrationStatusResponsePropertiesResponse',
    'PartnerBillingEntityResponse',
    'PlanDetailsResponse',
    'ResourceSkuResponse',
    'SubscriptionListResponse',
    'SystemDataResponse',
    'UserApiKeyResponsePropertiesResponse',
    'VMResourcesResponse',
]

@pulumi.output_type
class ConnectedPartnerResourcePropertiesResponse(dict):
    """
    Connected Partner Resource Properties
    """
    def __init__(__self__, *,
                 azure_resource_id: Optional[_builtins.str] = None,
                 location: Optional[_builtins.str] = None,
                 partner_deployment_name: Optional[_builtins.str] = None,
                 partner_deployment_uri: Optional[_builtins.str] = None):
        """
        Connected Partner Resource Properties
        :param _builtins.str azure_resource_id: The azure resource Id of the deployment.
        :param _builtins.str location: The location of the deployment.
        :param _builtins.str partner_deployment_name: Elastic deployment name
        :param _builtins.str partner_deployment_uri: Deployment URL of the elasticsearch in Elastic cloud deployment.
        """
        if azure_resource_id is not None:
            pulumi.set(__self__, "azure_resource_id", azure_resource_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if partner_deployment_name is not None:
            pulumi.set(__self__, "partner_deployment_name", partner_deployment_name)
        if partner_deployment_uri is not None:
            pulumi.set(__self__, "partner_deployment_uri", partner_deployment_uri)

    @_builtins.property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> Optional[_builtins.str]:
        """
        The azure resource Id of the deployment.
        """
        return pulumi.get(self, "azure_resource_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        """
        The location of the deployment.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="partnerDeploymentName")
    def partner_deployment_name(self) -> Optional[_builtins.str]:
        """
        Elastic deployment name
        """
        return pulumi.get(self, "partner_deployment_name")

    @_builtins.property
    @pulumi.getter(name="partnerDeploymentUri")
    def partner_deployment_uri(self) -> Optional[_builtins.str]:
        """
        Deployment URL of the elasticsearch in Elastic cloud deployment.
        """
        return pulumi.get(self, "partner_deployment_uri")


@pulumi.output_type
class ConnectedPartnerResourcesListFormatResponse(dict):
    """
    Connected Partner Resources List Format
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ConnectedPartnerResourcePropertiesResponse'] = None):
        """
        Connected Partner Resources List Format
        :param 'ConnectedPartnerResourcePropertiesResponse' properties: Connected Partner Resource Properties
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ConnectedPartnerResourcePropertiesResponse']:
        """
        Connected Partner Resource Properties
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class ElasticCloudDeploymentResponse(dict):
    """
    Details of the user's elastic deployment associated with the monitor resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureSubscriptionId":
            suggest = "azure_subscription_id"
        elif key == "deploymentId":
            suggest = "deployment_id"
        elif key == "elasticsearchRegion":
            suggest = "elasticsearch_region"
        elif key == "elasticsearchServiceUrl":
            suggest = "elasticsearch_service_url"
        elif key == "kibanaServiceUrl":
            suggest = "kibana_service_url"
        elif key == "kibanaSsoUrl":
            suggest = "kibana_sso_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticCloudDeploymentResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticCloudDeploymentResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticCloudDeploymentResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_subscription_id: _builtins.str,
                 deployment_id: _builtins.str,
                 elasticsearch_region: _builtins.str,
                 elasticsearch_service_url: _builtins.str,
                 kibana_service_url: _builtins.str,
                 kibana_sso_url: _builtins.str,
                 name: _builtins.str):
        """
        Details of the user's elastic deployment associated with the monitor resource.
        :param _builtins.str azure_subscription_id: Associated Azure subscription Id for the elastic deployment.
        :param _builtins.str deployment_id: Elastic deployment Id
        :param _builtins.str elasticsearch_region: Region where Deployment at Elastic side took place.
        :param _builtins.str elasticsearch_service_url: Elasticsearch ingestion endpoint of the Elastic deployment.
        :param _builtins.str kibana_service_url: Kibana endpoint of the Elastic deployment.
        :param _builtins.str kibana_sso_url: Kibana dashboard sso URL of the Elastic deployment.
        :param _builtins.str name: Elastic deployment name
        """
        pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "elasticsearch_region", elasticsearch_region)
        pulumi.set(__self__, "elasticsearch_service_url", elasticsearch_service_url)
        pulumi.set(__self__, "kibana_service_url", kibana_service_url)
        pulumi.set(__self__, "kibana_sso_url", kibana_sso_url)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> _builtins.str:
        """
        Associated Azure subscription Id for the elastic deployment.
        """
        return pulumi.get(self, "azure_subscription_id")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        """
        Elastic deployment Id
        """
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter(name="elasticsearchRegion")
    def elasticsearch_region(self) -> _builtins.str:
        """
        Region where Deployment at Elastic side took place.
        """
        return pulumi.get(self, "elasticsearch_region")

    @_builtins.property
    @pulumi.getter(name="elasticsearchServiceUrl")
    def elasticsearch_service_url(self) -> _builtins.str:
        """
        Elasticsearch ingestion endpoint of the Elastic deployment.
        """
        return pulumi.get(self, "elasticsearch_service_url")

    @_builtins.property
    @pulumi.getter(name="kibanaServiceUrl")
    def kibana_service_url(self) -> _builtins.str:
        """
        Kibana endpoint of the Elastic deployment.
        """
        return pulumi.get(self, "kibana_service_url")

    @_builtins.property
    @pulumi.getter(name="kibanaSsoUrl")
    def kibana_sso_url(self) -> _builtins.str:
        """
        Kibana dashboard sso URL of the Elastic deployment.
        """
        return pulumi.get(self, "kibana_sso_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Elastic deployment name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ElasticCloudUserResponse(dict):
    """
    Details of the user's elastic account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticCloudSsoDefaultUrl":
            suggest = "elastic_cloud_sso_default_url"
        elif key == "emailAddress":
            suggest = "email_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticCloudUserResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticCloudUserResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticCloudUserResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elastic_cloud_sso_default_url: _builtins.str,
                 email_address: _builtins.str,
                 id: _builtins.str):
        """
        Details of the user's elastic account.
        :param _builtins.str elastic_cloud_sso_default_url: Elastic cloud default dashboard sso URL of the Elastic user account.
        :param _builtins.str email_address: Email of the Elastic User Account.
        :param _builtins.str id: User Id of the elastic account of the User.
        """
        pulumi.set(__self__, "elastic_cloud_sso_default_url", elastic_cloud_sso_default_url)
        pulumi.set(__self__, "email_address", email_address)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="elasticCloudSsoDefaultUrl")
    def elastic_cloud_sso_default_url(self) -> _builtins.str:
        """
        Elastic cloud default dashboard sso URL of the Elastic user account.
        """
        return pulumi.get(self, "elastic_cloud_sso_default_url")

    @_builtins.property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> _builtins.str:
        """
        Email of the Elastic User Account.
        """
        return pulumi.get(self, "email_address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        User Id of the elastic account of the User.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ElasticOrganizationToAzureSubscriptionMappingResponsePropertiesResponse(dict):
    """
    The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into.
    """
    def __init__(__self__, *,
                 marketplace_saas_info: 'outputs.MarketplaceSaaSInfoResponse',
                 billed_azure_subscription_id: Optional[_builtins.str] = None,
                 elastic_organization_id: Optional[_builtins.str] = None,
                 elastic_organization_name: Optional[_builtins.str] = None):
        """
        The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into.
        :param 'MarketplaceSaaSInfoResponse' marketplace_saas_info: Marketplace SaaS Info of the resource.
        :param _builtins.str billed_azure_subscription_id: The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
        :param _builtins.str elastic_organization_id: The Elastic Organization Id.
        :param _builtins.str elastic_organization_name: The Elastic Organization Name.
        """
        pulumi.set(__self__, "marketplace_saas_info", marketplace_saas_info)
        if billed_azure_subscription_id is not None:
            pulumi.set(__self__, "billed_azure_subscription_id", billed_azure_subscription_id)
        if elastic_organization_id is not None:
            pulumi.set(__self__, "elastic_organization_id", elastic_organization_id)
        if elastic_organization_name is not None:
            pulumi.set(__self__, "elastic_organization_name", elastic_organization_name)

    @_builtins.property
    @pulumi.getter(name="marketplaceSaasInfo")
    def marketplace_saas_info(self) -> 'outputs.MarketplaceSaaSInfoResponse':
        """
        Marketplace SaaS Info of the resource.
        """
        return pulumi.get(self, "marketplace_saas_info")

    @_builtins.property
    @pulumi.getter(name="billedAzureSubscriptionId")
    def billed_azure_subscription_id(self) -> Optional[_builtins.str]:
        """
        The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
        """
        return pulumi.get(self, "billed_azure_subscription_id")

    @_builtins.property
    @pulumi.getter(name="elasticOrganizationId")
    def elastic_organization_id(self) -> Optional[_builtins.str]:
        """
        The Elastic Organization Id.
        """
        return pulumi.get(self, "elastic_organization_id")

    @_builtins.property
    @pulumi.getter(name="elasticOrganizationName")
    def elastic_organization_name(self) -> Optional[_builtins.str]:
        """
        The Elastic Organization Name.
        """
        return pulumi.get(self, "elastic_organization_name")


@pulumi.output_type
class ElasticPropertiesResponse(dict):
    """
    Elastic Resource Properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticCloudDeployment":
            suggest = "elastic_cloud_deployment"
        elif key == "elasticCloudUser":
            suggest = "elastic_cloud_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elastic_cloud_deployment: Optional['outputs.ElasticCloudDeploymentResponse'] = None,
                 elastic_cloud_user: Optional['outputs.ElasticCloudUserResponse'] = None):
        """
        Elastic Resource Properties.
        :param 'ElasticCloudDeploymentResponse' elastic_cloud_deployment: Details of the elastic cloud deployment.
        :param 'ElasticCloudUserResponse' elastic_cloud_user: Details of the user's elastic account.
        """
        if elastic_cloud_deployment is not None:
            pulumi.set(__self__, "elastic_cloud_deployment", elastic_cloud_deployment)
        if elastic_cloud_user is not None:
            pulumi.set(__self__, "elastic_cloud_user", elastic_cloud_user)

    @_builtins.property
    @pulumi.getter(name="elasticCloudDeployment")
    def elastic_cloud_deployment(self) -> Optional['outputs.ElasticCloudDeploymentResponse']:
        """
        Details of the elastic cloud deployment.
        """
        return pulumi.get(self, "elastic_cloud_deployment")

    @_builtins.property
    @pulumi.getter(name="elasticCloudUser")
    def elastic_cloud_user(self) -> Optional['outputs.ElasticCloudUserResponse']:
        """
        Details of the user's elastic account.
        """
        return pulumi.get(self, "elastic_cloud_user")


@pulumi.output_type
class ElasticTrafficFilterResponse(dict):
    """
    Elastic traffic filter object
    """
    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 include_by_default: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 rules: Optional[Sequence['outputs.ElasticTrafficFilterRuleResponse']] = None,
                 type: Optional[_builtins.str] = None):
        """
        Elastic traffic filter object
        :param _builtins.str description: Description of the elastic filter
        :param _builtins.str id: Id of the elastic filter
        :param _builtins.bool include_by_default: IncludeByDefault for the elastic filter
        :param _builtins.str name: Name of the elastic filter
        :param _builtins.str region: Region of the elastic filter
        :param Sequence['ElasticTrafficFilterRuleResponse'] rules: Rules in the elastic filter
        :param _builtins.str type: Type of the elastic filter
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_by_default is not None:
            pulumi.set(__self__, "include_by_default", include_by_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description of the elastic filter
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Id of the elastic filter
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeByDefault")
    def include_by_default(self) -> Optional[_builtins.bool]:
        """
        IncludeByDefault for the elastic filter
        """
        return pulumi.get(self, "include_by_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the elastic filter
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Region of the elastic filter
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.ElasticTrafficFilterRuleResponse']]:
        """
        Rules in the elastic filter
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Type of the elastic filter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ElasticTrafficFilterRuleResponse(dict):
    """
    Elastic traffic filter rule object
    """
    def __init__(__self__, *,
                 azure_endpoint_guid: Optional[_builtins.str] = None,
                 azure_endpoint_name: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 source: Optional[_builtins.str] = None):
        """
        Elastic traffic filter rule object
        :param _builtins.str azure_endpoint_guid: Guid of Private Endpoint in the elastic filter rule
        :param _builtins.str azure_endpoint_name: Name of the Private Endpoint in the elastic filter rule
        :param _builtins.str description: Description of the elastic filter rule
        :param _builtins.str id: Id of the elastic filter rule
        :param _builtins.str source: IP of the elastic filter rule
        """
        if azure_endpoint_guid is not None:
            pulumi.set(__self__, "azure_endpoint_guid", azure_endpoint_guid)
        if azure_endpoint_name is not None:
            pulumi.set(__self__, "azure_endpoint_name", azure_endpoint_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter(name="azureEndpointGuid")
    def azure_endpoint_guid(self) -> Optional[_builtins.str]:
        """
        Guid of Private Endpoint in the elastic filter rule
        """
        return pulumi.get(self, "azure_endpoint_guid")

    @_builtins.property
    @pulumi.getter(name="azureEndpointName")
    def azure_endpoint_name(self) -> Optional[_builtins.str]:
        """
        Name of the Private Endpoint in the elastic filter rule
        """
        return pulumi.get(self, "azure_endpoint_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description of the elastic filter rule
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Id of the elastic filter rule
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        IP of the elastic filter rule
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class FilteringTagResponse(dict):
    """
    The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
    """
    def __init__(__self__, *,
                 action: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
        :param _builtins.str action: Valid actions for a filtering tag.
        :param _builtins.str name: The name (also known as the key) of the tag.
        :param _builtins.str value: The value of the tag.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[_builtins.str]:
        """
        Valid actions for a filtering tag.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name (also known as the key) of the tag.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IdentityPropertiesResponse(dict):
    """
    Identity properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: Optional[_builtins.str] = None):
        """
        Identity properties.
        :param _builtins.str principal_id: The identity ID.
        :param _builtins.str tenant_id: The tenant ID of resource.
        :param _builtins.str type: Managed identity type.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The identity ID.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Managed identity type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LogRulesResponse(dict):
    """
    Set of rules for sending logs for the Monitor resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filteringTags":
            suggest = "filtering_tags"
        elif key == "sendAadLogs":
            suggest = "send_aad_logs"
        elif key == "sendActivityLogs":
            suggest = "send_activity_logs"
        elif key == "sendSubscriptionLogs":
            suggest = "send_subscription_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogRulesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogRulesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogRulesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filtering_tags: Optional[Sequence['outputs.FilteringTagResponse']] = None,
                 send_aad_logs: Optional[_builtins.bool] = None,
                 send_activity_logs: Optional[_builtins.bool] = None,
                 send_subscription_logs: Optional[_builtins.bool] = None):
        """
        Set of rules for sending logs for the Monitor resource.
        :param Sequence['FilteringTagResponse'] filtering_tags: List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
        :param _builtins.bool send_aad_logs: Flag specifying if AAD logs should be sent for the Monitor resource.
        :param _builtins.bool send_activity_logs: Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        :param _builtins.bool send_subscription_logs: Flag specifying if subscription logs should be sent for the Monitor resource.
        """
        if filtering_tags is not None:
            pulumi.set(__self__, "filtering_tags", filtering_tags)
        if send_aad_logs is not None:
            pulumi.set(__self__, "send_aad_logs", send_aad_logs)
        if send_activity_logs is not None:
            pulumi.set(__self__, "send_activity_logs", send_activity_logs)
        if send_subscription_logs is not None:
            pulumi.set(__self__, "send_subscription_logs", send_subscription_logs)

    @_builtins.property
    @pulumi.getter(name="filteringTags")
    def filtering_tags(self) -> Optional[Sequence['outputs.FilteringTagResponse']]:
        """
        List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
        """
        return pulumi.get(self, "filtering_tags")

    @_builtins.property
    @pulumi.getter(name="sendAadLogs")
    def send_aad_logs(self) -> Optional[_builtins.bool]:
        """
        Flag specifying if AAD logs should be sent for the Monitor resource.
        """
        return pulumi.get(self, "send_aad_logs")

    @_builtins.property
    @pulumi.getter(name="sendActivityLogs")
    def send_activity_logs(self) -> Optional[_builtins.bool]:
        """
        Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        """
        return pulumi.get(self, "send_activity_logs")

    @_builtins.property
    @pulumi.getter(name="sendSubscriptionLogs")
    def send_subscription_logs(self) -> Optional[_builtins.bool]:
        """
        Flag specifying if subscription logs should be sent for the Monitor resource.
        """
        return pulumi.get(self, "send_subscription_logs")


@pulumi.output_type
class MarketplaceSaaSInfoResponse(dict):
    """
    Marketplace SAAS Info of the resource.
    """
    def __init__(__self__, *,
                 billed_azure_subscription_id: Optional[_builtins.str] = None,
                 marketplace_name: Optional[_builtins.str] = None,
                 marketplace_resource_id: Optional[_builtins.str] = None,
                 marketplace_status: Optional[_builtins.str] = None,
                 marketplace_subscription: Optional['outputs.MarketplaceSaaSInfoResponseMarketplaceSubscription'] = None,
                 subscribed: Optional[_builtins.bool] = None):
        """
        Marketplace SAAS Info of the resource.
        :param _builtins.str billed_azure_subscription_id: The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into.
        :param _builtins.str marketplace_name: Marketplace Subscription Details: SAAS Name
        :param _builtins.str marketplace_resource_id: Marketplace Subscription Details: Resource URI
        :param _builtins.str marketplace_status: Marketplace Subscription Details: SaaS Subscription Status
        :param 'MarketplaceSaaSInfoResponseMarketplaceSubscription' marketplace_subscription: Marketplace Subscription
        :param _builtins.bool subscribed: Flag specifying if the Marketplace status is subscribed or not.
        """
        if billed_azure_subscription_id is not None:
            pulumi.set(__self__, "billed_azure_subscription_id", billed_azure_subscription_id)
        if marketplace_name is not None:
            pulumi.set(__self__, "marketplace_name", marketplace_name)
        if marketplace_resource_id is not None:
            pulumi.set(__self__, "marketplace_resource_id", marketplace_resource_id)
        if marketplace_status is not None:
            pulumi.set(__self__, "marketplace_status", marketplace_status)
        if marketplace_subscription is not None:
            pulumi.set(__self__, "marketplace_subscription", marketplace_subscription)
        if subscribed is not None:
            pulumi.set(__self__, "subscribed", subscribed)

    @_builtins.property
    @pulumi.getter(name="billedAzureSubscriptionId")
    def billed_azure_subscription_id(self) -> Optional[_builtins.str]:
        """
        The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into.
        """
        return pulumi.get(self, "billed_azure_subscription_id")

    @_builtins.property
    @pulumi.getter(name="marketplaceName")
    def marketplace_name(self) -> Optional[_builtins.str]:
        """
        Marketplace Subscription Details: SAAS Name
        """
        return pulumi.get(self, "marketplace_name")

    @_builtins.property
    @pulumi.getter(name="marketplaceResourceId")
    def marketplace_resource_id(self) -> Optional[_builtins.str]:
        """
        Marketplace Subscription Details: Resource URI
        """
        return pulumi.get(self, "marketplace_resource_id")

    @_builtins.property
    @pulumi.getter(name="marketplaceStatus")
    def marketplace_status(self) -> Optional[_builtins.str]:
        """
        Marketplace Subscription Details: SaaS Subscription Status
        """
        return pulumi.get(self, "marketplace_status")

    @_builtins.property
    @pulumi.getter(name="marketplaceSubscription")
    def marketplace_subscription(self) -> Optional['outputs.MarketplaceSaaSInfoResponseMarketplaceSubscription']:
        """
        Marketplace Subscription
        """
        return pulumi.get(self, "marketplace_subscription")

    @_builtins.property
    @pulumi.getter
    def subscribed(self) -> Optional[_builtins.bool]:
        """
        Flag specifying if the Marketplace status is subscribed or not.
        """
        return pulumi.get(self, "subscribed")


@pulumi.output_type
class MarketplaceSaaSInfoResponseMarketplaceSubscription(dict):
    """
    Marketplace Subscription
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        Marketplace Subscription
        :param _builtins.str id: Marketplace Subscription Id. This is a GUID-formatted string.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Marketplace Subscription Id. This is a GUID-formatted string.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class MonitorPropertiesResponse(dict):
    """
    Properties specific to the monitor resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "liftrResourceCategory":
            suggest = "liftr_resource_category"
        elif key == "liftrResourcePreference":
            suggest = "liftr_resource_preference"
        elif key == "elasticProperties":
            suggest = "elastic_properties"
        elif key == "generateApiKey":
            suggest = "generate_api_key"
        elif key == "monitoringStatus":
            suggest = "monitoring_status"
        elif key == "planDetails":
            suggest = "plan_details"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "saaSAzureSubscriptionStatus":
            suggest = "saa_s_azure_subscription_status"
        elif key == "sourceCampaignId":
            suggest = "source_campaign_id"
        elif key == "sourceCampaignName":
            suggest = "source_campaign_name"
        elif key == "subscriptionState":
            suggest = "subscription_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 liftr_resource_category: _builtins.str,
                 liftr_resource_preference: _builtins.int,
                 elastic_properties: Optional['outputs.ElasticPropertiesResponse'] = None,
                 generate_api_key: Optional[_builtins.bool] = None,
                 monitoring_status: Optional[_builtins.str] = None,
                 plan_details: Optional['outputs.PlanDetailsResponse'] = None,
                 provisioning_state: Optional[_builtins.str] = None,
                 saa_s_azure_subscription_status: Optional[_builtins.str] = None,
                 source_campaign_id: Optional[_builtins.str] = None,
                 source_campaign_name: Optional[_builtins.str] = None,
                 subscription_state: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        Properties specific to the monitor resource.
        :param _builtins.int liftr_resource_preference: The priority of the resource.
        :param 'ElasticPropertiesResponse' elastic_properties: Elastic cloud properties.
        :param _builtins.bool generate_api_key: Flag to determine if User API Key has to be generated and shared.
        :param _builtins.str monitoring_status: Flag specifying if the resource monitoring is enabled or disabled.
        :param 'PlanDetailsResponse' plan_details: Plan details of the monitor resource.
        :param _builtins.str provisioning_state: Provisioning state of the monitor resource.
        :param _builtins.str saa_s_azure_subscription_status: Status of Azure Subscription where Marketplace SaaS is located.
        :param _builtins.str source_campaign_id: A unique identifier associated with the campaign.
        :param _builtins.str source_campaign_name: Name of the marketing campaign.
        :param _builtins.str subscription_state: State of the Azure Subscription containing the monitor resource
        :param _builtins.str version: Version of elastic of the monitor resource
        """
        pulumi.set(__self__, "liftr_resource_category", liftr_resource_category)
        pulumi.set(__self__, "liftr_resource_preference", liftr_resource_preference)
        if elastic_properties is not None:
            pulumi.set(__self__, "elastic_properties", elastic_properties)
        if generate_api_key is not None:
            pulumi.set(__self__, "generate_api_key", generate_api_key)
        if monitoring_status is not None:
            pulumi.set(__self__, "monitoring_status", monitoring_status)
        if plan_details is not None:
            pulumi.set(__self__, "plan_details", plan_details)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)
        if saa_s_azure_subscription_status is not None:
            pulumi.set(__self__, "saa_s_azure_subscription_status", saa_s_azure_subscription_status)
        if source_campaign_id is not None:
            pulumi.set(__self__, "source_campaign_id", source_campaign_id)
        if source_campaign_name is not None:
            pulumi.set(__self__, "source_campaign_name", source_campaign_name)
        if subscription_state is not None:
            pulumi.set(__self__, "subscription_state", subscription_state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="liftrResourceCategory")
    def liftr_resource_category(self) -> _builtins.str:
        return pulumi.get(self, "liftr_resource_category")

    @_builtins.property
    @pulumi.getter(name="liftrResourcePreference")
    def liftr_resource_preference(self) -> _builtins.int:
        """
        The priority of the resource.
        """
        return pulumi.get(self, "liftr_resource_preference")

    @_builtins.property
    @pulumi.getter(name="elasticProperties")
    def elastic_properties(self) -> Optional['outputs.ElasticPropertiesResponse']:
        """
        Elastic cloud properties.
        """
        return pulumi.get(self, "elastic_properties")

    @_builtins.property
    @pulumi.getter(name="generateApiKey")
    def generate_api_key(self) -> Optional[_builtins.bool]:
        """
        Flag to determine if User API Key has to be generated and shared.
        """
        return pulumi.get(self, "generate_api_key")

    @_builtins.property
    @pulumi.getter(name="monitoringStatus")
    def monitoring_status(self) -> Optional[_builtins.str]:
        """
        Flag specifying if the resource monitoring is enabled or disabled.
        """
        return pulumi.get(self, "monitoring_status")

    @_builtins.property
    @pulumi.getter(name="planDetails")
    def plan_details(self) -> Optional['outputs.PlanDetailsResponse']:
        """
        Plan details of the monitor resource.
        """
        return pulumi.get(self, "plan_details")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[_builtins.str]:
        """
        Provisioning state of the monitor resource.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="saaSAzureSubscriptionStatus")
    def saa_s_azure_subscription_status(self) -> Optional[_builtins.str]:
        """
        Status of Azure Subscription where Marketplace SaaS is located.
        """
        return pulumi.get(self, "saa_s_azure_subscription_status")

    @_builtins.property
    @pulumi.getter(name="sourceCampaignId")
    def source_campaign_id(self) -> Optional[_builtins.str]:
        """
        A unique identifier associated with the campaign.
        """
        return pulumi.get(self, "source_campaign_id")

    @_builtins.property
    @pulumi.getter(name="sourceCampaignName")
    def source_campaign_name(self) -> Optional[_builtins.str]:
        """
        Name of the marketing campaign.
        """
        return pulumi.get(self, "source_campaign_name")

    @_builtins.property
    @pulumi.getter(name="subscriptionState")
    def subscription_state(self) -> Optional[_builtins.str]:
        """
        State of the Azure Subscription containing the monitor resource
        """
        return pulumi.get(self, "subscription_state")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Version of elastic of the monitor resource
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MonitoredResourceResponse(dict):
    """
    The properties of a resource currently being monitored by the Elastic monitor resource.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 reason_for_logs_status: Optional[_builtins.str] = None,
                 sending_logs: Optional[_builtins.str] = None):
        """
        The properties of a resource currently being monitored by the Elastic monitor resource.
        :param _builtins.str id: The ARM id of the resource.
        :param _builtins.str reason_for_logs_status: Reason for why the resource is sending logs (or why it is not sending).
        :param _builtins.str sending_logs: Flag indicating the status of the resource for sending logs operation to Elastic.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if reason_for_logs_status is not None:
            pulumi.set(__self__, "reason_for_logs_status", reason_for_logs_status)
        if sending_logs is not None:
            pulumi.set(__self__, "sending_logs", sending_logs)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ARM id of the resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="reasonForLogsStatus")
    def reason_for_logs_status(self) -> Optional[_builtins.str]:
        """
        Reason for why the resource is sending logs (or why it is not sending).
        """
        return pulumi.get(self, "reason_for_logs_status")

    @_builtins.property
    @pulumi.getter(name="sendingLogs")
    def sending_logs(self) -> Optional[_builtins.str]:
        """
        Flag indicating the status of the resource for sending logs operation to Elastic.
        """
        return pulumi.get(self, "sending_logs")


@pulumi.output_type
class MonitoredSubscriptionResponse(dict):
    """
    The list of subscriptions and it's monitoring status by current Elastic monitor.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tagRules":
            suggest = "tag_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredSubscriptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredSubscriptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredSubscriptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 subscription_id: Optional[_builtins.str] = None,
                 tag_rules: Optional['outputs.MonitoringTagRulesPropertiesResponse'] = None):
        """
        The list of subscriptions and it's monitoring status by current Elastic monitor.
        :param _builtins.str error: The reason of not monitoring the subscription.
        :param _builtins.str status: The state of monitoring.
        :param _builtins.str subscription_id: The subscriptionId to be monitored.
        :param 'MonitoringTagRulesPropertiesResponse' tag_rules: Definition of the properties for a TagRules resource.
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tag_rules is not None:
            pulumi.set(__self__, "tag_rules", tag_rules)

    @_builtins.property
    @pulumi.getter
    def error(self) -> Optional[_builtins.str]:
        """
        The reason of not monitoring the subscription.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The state of monitoring.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[_builtins.str]:
        """
        The subscriptionId to be monitored.
        """
        return pulumi.get(self, "subscription_id")

    @_builtins.property
    @pulumi.getter(name="tagRules")
    def tag_rules(self) -> Optional['outputs.MonitoringTagRulesPropertiesResponse']:
        """
        Definition of the properties for a TagRules resource.
        """
        return pulumi.get(self, "tag_rules")


@pulumi.output_type
class MonitoringTagRulesPropertiesResponse(dict):
    """
    Definition of the properties for a TagRules resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logRules":
            suggest = "log_rules"
        elif key == "provisioningState":
            suggest = "provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringTagRulesPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringTagRulesPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringTagRulesPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_rules: Optional['outputs.LogRulesResponse'] = None,
                 provisioning_state: Optional[_builtins.str] = None):
        """
        Definition of the properties for a TagRules resource.
        :param 'LogRulesResponse' log_rules: Rules for sending logs.
        :param _builtins.str provisioning_state: Provisioning state of the monitoring tag rules.
        """
        if log_rules is not None:
            pulumi.set(__self__, "log_rules", log_rules)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @_builtins.property
    @pulumi.getter(name="logRules")
    def log_rules(self) -> Optional['outputs.LogRulesResponse']:
        """
        Rules for sending logs.
        """
        return pulumi.get(self, "log_rules")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[_builtins.str]:
        """
        Provisioning state of the monitoring tag rules.
        """
        return pulumi.get(self, "provisioning_state")


@pulumi.output_type
class OpenAIIntegrationPropertiesResponse(dict):
    """
    Open AI Integration details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshAt":
            suggest = "last_refresh_at"
        elif key == "openAIResourceEndpoint":
            suggest = "open_ai_resource_endpoint"
        elif key == "openAIResourceId":
            suggest = "open_ai_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenAIIntegrationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenAIIntegrationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenAIIntegrationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_at: _builtins.str,
                 key: Optional[_builtins.str] = None,
                 open_ai_resource_endpoint: Optional[_builtins.str] = None,
                 open_ai_resource_id: Optional[_builtins.str] = None):
        """
        Open AI Integration details.
        :param _builtins.str last_refresh_at: Last Update Timestamp for key updation
        :param _builtins.str key: Value of API key for Open AI resource
        :param _builtins.str open_ai_resource_endpoint: The API endpoint for Open AI resource
        :param _builtins.str open_ai_resource_id: The resource name of Open AI resource
        """
        pulumi.set(__self__, "last_refresh_at", last_refresh_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if open_ai_resource_endpoint is not None:
            pulumi.set(__self__, "open_ai_resource_endpoint", open_ai_resource_endpoint)
        if open_ai_resource_id is not None:
            pulumi.set(__self__, "open_ai_resource_id", open_ai_resource_id)

    @_builtins.property
    @pulumi.getter(name="lastRefreshAt")
    def last_refresh_at(self) -> _builtins.str:
        """
        Last Update Timestamp for key updation
        """
        return pulumi.get(self, "last_refresh_at")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Value of API key for Open AI resource
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="openAIResourceEndpoint")
    def open_ai_resource_endpoint(self) -> Optional[_builtins.str]:
        """
        The API endpoint for Open AI resource
        """
        return pulumi.get(self, "open_ai_resource_endpoint")

    @_builtins.property
    @pulumi.getter(name="openAIResourceId")
    def open_ai_resource_id(self) -> Optional[_builtins.str]:
        """
        The resource name of Open AI resource
        """
        return pulumi.get(self, "open_ai_resource_id")


@pulumi.output_type
class OpenAIIntegrationStatusResponsePropertiesResponse(dict):
    """
    Status of the OpenAI Integration
    """
    def __init__(__self__, *,
                 status: Optional[_builtins.str] = None):
        """
        Status of the OpenAI Integration
        :param _builtins.str status: Status of the OpenAI Integration
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the OpenAI Integration
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class PartnerBillingEntityResponse(dict):
    """
    Partner Billing details associated with the resource.
    """
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 partner_entity_uri: Optional[_builtins.str] = None):
        """
        Partner Billing details associated with the resource.
        :param _builtins.str id: The Elastic Organization Id.
        :param _builtins.str name: The Elastic Organization Name.
        :param _builtins.str partner_entity_uri: Link to the elastic organization page
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partner_entity_uri is not None:
            pulumi.set(__self__, "partner_entity_uri", partner_entity_uri)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The Elastic Organization Id.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The Elastic Organization Name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="partnerEntityUri")
    def partner_entity_uri(self) -> Optional[_builtins.str]:
        """
        Link to the elastic organization page
        """
        return pulumi.get(self, "partner_entity_uri")


@pulumi.output_type
class PlanDetailsResponse(dict):
    """
    Plan details of the monitor resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "offerID":
            suggest = "offer_id"
        elif key == "planID":
            suggest = "plan_id"
        elif key == "planName":
            suggest = "plan_name"
        elif key == "publisherID":
            suggest = "publisher_id"
        elif key == "termID":
            suggest = "term_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlanDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlanDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlanDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 offer_id: Optional[_builtins.str] = None,
                 plan_id: Optional[_builtins.str] = None,
                 plan_name: Optional[_builtins.str] = None,
                 publisher_id: Optional[_builtins.str] = None,
                 term_id: Optional[_builtins.str] = None):
        """
        Plan details of the monitor resource.
        :param _builtins.str offer_id: Offer ID of the plan
        :param _builtins.str plan_id: Plan ID
        :param _builtins.str plan_name: Plan Name
        :param _builtins.str publisher_id: Publisher ID of the plan
        :param _builtins.str term_id: Term ID of the plan
        """
        if offer_id is not None:
            pulumi.set(__self__, "offer_id", offer_id)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if publisher_id is not None:
            pulumi.set(__self__, "publisher_id", publisher_id)
        if term_id is not None:
            pulumi.set(__self__, "term_id", term_id)

    @_builtins.property
    @pulumi.getter(name="offerID")
    def offer_id(self) -> Optional[_builtins.str]:
        """
        Offer ID of the plan
        """
        return pulumi.get(self, "offer_id")

    @_builtins.property
    @pulumi.getter(name="planID")
    def plan_id(self) -> Optional[_builtins.str]:
        """
        Plan ID
        """
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[_builtins.str]:
        """
        Plan Name
        """
        return pulumi.get(self, "plan_name")

    @_builtins.property
    @pulumi.getter(name="publisherID")
    def publisher_id(self) -> Optional[_builtins.str]:
        """
        Publisher ID of the plan
        """
        return pulumi.get(self, "publisher_id")

    @_builtins.property
    @pulumi.getter(name="termID")
    def term_id(self) -> Optional[_builtins.str]:
        """
        Term ID of the plan
        """
        return pulumi.get(self, "term_id")


@pulumi.output_type
class ResourceSkuResponse(dict):
    """
    Microsoft.Elastic SKU.
    """
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        Microsoft.Elastic SKU.
        :param _builtins.str name: Name of the SKU.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the SKU.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SubscriptionListResponse(dict):
    """
    The request to update subscriptions needed to be monitored by the Elastic monitor resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "monitoredSubscriptionList":
            suggest = "monitored_subscription_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionListResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionListResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionListResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: _builtins.str,
                 monitored_subscription_list: Optional[Sequence['outputs.MonitoredSubscriptionResponse']] = None):
        """
        The request to update subscriptions needed to be monitored by the Elastic monitor resource.
        :param _builtins.str provisioning_state: Provisioning State of the resource
        :param Sequence['MonitoredSubscriptionResponse'] monitored_subscription_list: List of subscriptions and the state of the monitoring.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if monitored_subscription_list is not None:
            pulumi.set(__self__, "monitored_subscription_list", monitored_subscription_list)

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        Provisioning State of the resource
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="monitoredSubscriptionList")
    def monitored_subscription_list(self) -> Optional[Sequence['outputs.MonitoredSubscriptionResponse']]:
        """
        List of subscriptions and the state of the monitoring.
        """
        return pulumi.get(self, "monitored_subscription_list")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserApiKeyResponsePropertiesResponse(dict):
    def __init__(__self__, *,
                 api_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str api_key: The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal clients only.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[_builtins.str]:
        """
        The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal clients only.
        """
        return pulumi.get(self, "api_key")


@pulumi.output_type
class VMResourcesResponse(dict):
    """
    The vm resource properties that is currently being monitored by the Elastic monitor resource.
    """
    def __init__(__self__, *,
                 vm_resource_id: Optional[_builtins.str] = None):
        """
        The vm resource properties that is currently being monitored by the Elastic monitor resource.
        :param _builtins.str vm_resource_id: The ARM id of the VM resource.
        """
        if vm_resource_id is not None:
            pulumi.set(__self__, "vm_resource_id", vm_resource_id)

    @_builtins.property
    @pulumi.getter(name="vmResourceId")
    def vm_resource_id(self) -> Optional[_builtins.str]:
        """
        The ARM id of the VM resource.
        """
        return pulumi.get(self, "vm_resource_id")


