# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ElasticOrganizationToAzureSubscriptionMappingResponsePropertiesResponse',
    'MarketplaceSaaSInfoResponse',
    'MarketplaceSaaSInfoResponseMarketplaceSubscription',
    'OpenAIIntegrationPropertiesResponse',
    'OpenAIIntegrationStatusResponsePropertiesResponse',
    'UserApiKeyResponsePropertiesResponse',
]

@pulumi.output_type
class ElasticOrganizationToAzureSubscriptionMappingResponsePropertiesResponse(dict):
    """
    The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into.
    """
    def __init__(__self__, *,
                 marketplace_saas_info: 'outputs.MarketplaceSaaSInfoResponse',
                 billed_azure_subscription_id: Optional[str] = None,
                 elastic_organization_id: Optional[str] = None,
                 elastic_organization_name: Optional[str] = None):
        """
        The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into.
        :param 'MarketplaceSaaSInfoResponse' marketplace_saas_info: Marketplace SaaS Info of the resource.
        :param str billed_azure_subscription_id: The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
        :param str elastic_organization_id: The Elastic Organization Id.
        :param str elastic_organization_name: The Elastic Organization Name.
        """
        pulumi.set(__self__, "marketplace_saas_info", marketplace_saas_info)
        if billed_azure_subscription_id is not None:
            pulumi.set(__self__, "billed_azure_subscription_id", billed_azure_subscription_id)
        if elastic_organization_id is not None:
            pulumi.set(__self__, "elastic_organization_id", elastic_organization_id)
        if elastic_organization_name is not None:
            pulumi.set(__self__, "elastic_organization_name", elastic_organization_name)

    @property
    @pulumi.getter(name="marketplaceSaasInfo")
    def marketplace_saas_info(self) -> 'outputs.MarketplaceSaaSInfoResponse':
        """
        Marketplace SaaS Info of the resource.
        """
        return pulumi.get(self, "marketplace_saas_info")

    @property
    @pulumi.getter(name="billedAzureSubscriptionId")
    def billed_azure_subscription_id(self) -> Optional[str]:
        """
        The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
        """
        return pulumi.get(self, "billed_azure_subscription_id")

    @property
    @pulumi.getter(name="elasticOrganizationId")
    def elastic_organization_id(self) -> Optional[str]:
        """
        The Elastic Organization Id.
        """
        return pulumi.get(self, "elastic_organization_id")

    @property
    @pulumi.getter(name="elasticOrganizationName")
    def elastic_organization_name(self) -> Optional[str]:
        """
        The Elastic Organization Name.
        """
        return pulumi.get(self, "elastic_organization_name")


@pulumi.output_type
class MarketplaceSaaSInfoResponse(dict):
    """
    Marketplace SAAS Info of the resource.
    """
    def __init__(__self__, *,
                 billed_azure_subscription_id: Optional[str] = None,
                 marketplace_name: Optional[str] = None,
                 marketplace_resource_id: Optional[str] = None,
                 marketplace_status: Optional[str] = None,
                 marketplace_subscription: Optional['outputs.MarketplaceSaaSInfoResponseMarketplaceSubscription'] = None,
                 subscribed: Optional[bool] = None):
        """
        Marketplace SAAS Info of the resource.
        :param str billed_azure_subscription_id: The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into.
        :param str marketplace_name: Marketplace Subscription Details: SAAS Name
        :param str marketplace_resource_id: Marketplace Subscription Details: Resource URI
        :param str marketplace_status: Marketplace Subscription Details: SaaS Subscription Status
        :param 'MarketplaceSaaSInfoResponseMarketplaceSubscription' marketplace_subscription: Marketplace Subscription
        :param bool subscribed: Flag specifying if the Marketplace status is subscribed or not.
        """
        if billed_azure_subscription_id is not None:
            pulumi.set(__self__, "billed_azure_subscription_id", billed_azure_subscription_id)
        if marketplace_name is not None:
            pulumi.set(__self__, "marketplace_name", marketplace_name)
        if marketplace_resource_id is not None:
            pulumi.set(__self__, "marketplace_resource_id", marketplace_resource_id)
        if marketplace_status is not None:
            pulumi.set(__self__, "marketplace_status", marketplace_status)
        if marketplace_subscription is not None:
            pulumi.set(__self__, "marketplace_subscription", marketplace_subscription)
        if subscribed is not None:
            pulumi.set(__self__, "subscribed", subscribed)

    @property
    @pulumi.getter(name="billedAzureSubscriptionId")
    def billed_azure_subscription_id(self) -> Optional[str]:
        """
        The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into.
        """
        return pulumi.get(self, "billed_azure_subscription_id")

    @property
    @pulumi.getter(name="marketplaceName")
    def marketplace_name(self) -> Optional[str]:
        """
        Marketplace Subscription Details: SAAS Name
        """
        return pulumi.get(self, "marketplace_name")

    @property
    @pulumi.getter(name="marketplaceResourceId")
    def marketplace_resource_id(self) -> Optional[str]:
        """
        Marketplace Subscription Details: Resource URI
        """
        return pulumi.get(self, "marketplace_resource_id")

    @property
    @pulumi.getter(name="marketplaceStatus")
    def marketplace_status(self) -> Optional[str]:
        """
        Marketplace Subscription Details: SaaS Subscription Status
        """
        return pulumi.get(self, "marketplace_status")

    @property
    @pulumi.getter(name="marketplaceSubscription")
    def marketplace_subscription(self) -> Optional['outputs.MarketplaceSaaSInfoResponseMarketplaceSubscription']:
        """
        Marketplace Subscription
        """
        return pulumi.get(self, "marketplace_subscription")

    @property
    @pulumi.getter
    def subscribed(self) -> Optional[bool]:
        """
        Flag specifying if the Marketplace status is subscribed or not.
        """
        return pulumi.get(self, "subscribed")


@pulumi.output_type
class MarketplaceSaaSInfoResponseMarketplaceSubscription(dict):
    """
    Marketplace Subscription
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Marketplace Subscription
        :param str id: Marketplace Subscription Id. This is a GUID-formatted string.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Marketplace Subscription Id. This is a GUID-formatted string.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class OpenAIIntegrationPropertiesResponse(dict):
    """
    Open AI Integration details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRefreshAt":
            suggest = "last_refresh_at"
        elif key == "openAIResourceEndpoint":
            suggest = "open_ai_resource_endpoint"
        elif key == "openAIResourceId":
            suggest = "open_ai_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpenAIIntegrationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpenAIIntegrationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpenAIIntegrationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_refresh_at: str,
                 key: Optional[str] = None,
                 open_ai_resource_endpoint: Optional[str] = None,
                 open_ai_resource_id: Optional[str] = None):
        """
        Open AI Integration details.
        :param str last_refresh_at: Last Update Timestamp for key updation
        :param str key: Value of API key for Open AI resource
        :param str open_ai_resource_endpoint: The API endpoint for Open AI resource
        :param str open_ai_resource_id: The resource name of Open AI resource
        """
        pulumi.set(__self__, "last_refresh_at", last_refresh_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if open_ai_resource_endpoint is not None:
            pulumi.set(__self__, "open_ai_resource_endpoint", open_ai_resource_endpoint)
        if open_ai_resource_id is not None:
            pulumi.set(__self__, "open_ai_resource_id", open_ai_resource_id)

    @property
    @pulumi.getter(name="lastRefreshAt")
    def last_refresh_at(self) -> str:
        """
        Last Update Timestamp for key updation
        """
        return pulumi.get(self, "last_refresh_at")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Value of API key for Open AI resource
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="openAIResourceEndpoint")
    def open_ai_resource_endpoint(self) -> Optional[str]:
        """
        The API endpoint for Open AI resource
        """
        return pulumi.get(self, "open_ai_resource_endpoint")

    @property
    @pulumi.getter(name="openAIResourceId")
    def open_ai_resource_id(self) -> Optional[str]:
        """
        The resource name of Open AI resource
        """
        return pulumi.get(self, "open_ai_resource_id")


@pulumi.output_type
class OpenAIIntegrationStatusResponsePropertiesResponse(dict):
    """
    Status of the OpenAI Integration
    """
    def __init__(__self__, *,
                 status: Optional[str] = None):
        """
        Status of the OpenAI Integration
        :param str status: Status of the OpenAI Integration
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the OpenAI Integration
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class UserApiKeyResponsePropertiesResponse(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None):
        """
        :param str api_key: The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal clients only.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        """
        The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal clients only.
        """
        return pulumi.get(self, "api_key")


