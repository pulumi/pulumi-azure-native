# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ConnectedPartnerResourcePropertiesResponse',
    'ConnectedPartnerResourcesListFormatResponse',
    'ElasticOrganizationToAzureSubscriptionMappingResponsePropertiesResponse',
    'MarketplaceSaaSInfoResponse',
    'MarketplaceSaaSInfoResponseMarketplaceSubscription',
    'PartnerBillingEntityResponse',
    'UserApiKeyResponsePropertiesResponse',
]

@pulumi.output_type
class ConnectedPartnerResourcePropertiesResponse(dict):
    """
    Connected Partner Resource Properties
    """
    def __init__(__self__, *,
                 azure_resource_id: Optional[str] = None,
                 location: Optional[str] = None,
                 partner_deployment_name: Optional[str] = None,
                 partner_deployment_uri: Optional[str] = None):
        """
        Connected Partner Resource Properties
        :param str azure_resource_id: The azure resource Id of the deployment.
        :param str location: The location of the deployment.
        :param str partner_deployment_name: Elastic deployment name
        :param str partner_deployment_uri: Deployment URL of the elasticsearch in Elastic cloud deployment.
        """
        if azure_resource_id is not None:
            pulumi.set(__self__, "azure_resource_id", azure_resource_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if partner_deployment_name is not None:
            pulumi.set(__self__, "partner_deployment_name", partner_deployment_name)
        if partner_deployment_uri is not None:
            pulumi.set(__self__, "partner_deployment_uri", partner_deployment_uri)

    @property
    @pulumi.getter(name="azureResourceId")
    def azure_resource_id(self) -> Optional[str]:
        """
        The azure resource Id of the deployment.
        """
        return pulumi.get(self, "azure_resource_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location of the deployment.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="partnerDeploymentName")
    def partner_deployment_name(self) -> Optional[str]:
        """
        Elastic deployment name
        """
        return pulumi.get(self, "partner_deployment_name")

    @property
    @pulumi.getter(name="partnerDeploymentUri")
    def partner_deployment_uri(self) -> Optional[str]:
        """
        Deployment URL of the elasticsearch in Elastic cloud deployment.
        """
        return pulumi.get(self, "partner_deployment_uri")


@pulumi.output_type
class ConnectedPartnerResourcesListFormatResponse(dict):
    """
    Connected Partner Resources List Format
    """
    def __init__(__self__, *,
                 properties: Optional['outputs.ConnectedPartnerResourcePropertiesResponse'] = None):
        """
        Connected Partner Resources List Format
        :param 'ConnectedPartnerResourcePropertiesResponse' properties: Connected Partner Resource Properties
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ConnectedPartnerResourcePropertiesResponse']:
        """
        Connected Partner Resource Properties
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class ElasticOrganizationToAzureSubscriptionMappingResponsePropertiesResponse(dict):
    """
    The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into.
    """
    def __init__(__self__, *,
                 marketplace_saas_info: 'outputs.MarketplaceSaaSInfoResponse',
                 billed_azure_subscription_id: Optional[str] = None,
                 elastic_organization_id: Optional[str] = None,
                 elastic_organization_name: Optional[str] = None):
        """
        The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into.
        :param 'MarketplaceSaaSInfoResponse' marketplace_saas_info: Marketplace SaaS Info of the resource.
        :param str billed_azure_subscription_id: The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
        :param str elastic_organization_id: The Elastic Organization Id.
        :param str elastic_organization_name: The Elastic Organization Name.
        """
        pulumi.set(__self__, "marketplace_saas_info", marketplace_saas_info)
        if billed_azure_subscription_id is not None:
            pulumi.set(__self__, "billed_azure_subscription_id", billed_azure_subscription_id)
        if elastic_organization_id is not None:
            pulumi.set(__self__, "elastic_organization_id", elastic_organization_id)
        if elastic_organization_name is not None:
            pulumi.set(__self__, "elastic_organization_name", elastic_organization_name)

    @property
    @pulumi.getter(name="marketplaceSaasInfo")
    def marketplace_saas_info(self) -> 'outputs.MarketplaceSaaSInfoResponse':
        """
        Marketplace SaaS Info of the resource.
        """
        return pulumi.get(self, "marketplace_saas_info")

    @property
    @pulumi.getter(name="billedAzureSubscriptionId")
    def billed_azure_subscription_id(self) -> Optional[str]:
        """
        The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
        """
        return pulumi.get(self, "billed_azure_subscription_id")

    @property
    @pulumi.getter(name="elasticOrganizationId")
    def elastic_organization_id(self) -> Optional[str]:
        """
        The Elastic Organization Id.
        """
        return pulumi.get(self, "elastic_organization_id")

    @property
    @pulumi.getter(name="elasticOrganizationName")
    def elastic_organization_name(self) -> Optional[str]:
        """
        The Elastic Organization Name.
        """
        return pulumi.get(self, "elastic_organization_name")


@pulumi.output_type
class MarketplaceSaaSInfoResponse(dict):
    """
    Marketplace SAAS Info of the resource.
    """
    def __init__(__self__, *,
                 billed_azure_subscription_id: Optional[str] = None,
                 marketplace_name: Optional[str] = None,
                 marketplace_resource_id: Optional[str] = None,
                 marketplace_status: Optional[str] = None,
                 marketplace_subscription: Optional['outputs.MarketplaceSaaSInfoResponseMarketplaceSubscription'] = None,
                 subscribed: Optional[bool] = None):
        """
        Marketplace SAAS Info of the resource.
        :param str billed_azure_subscription_id: The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into.
        :param str marketplace_name: Marketplace Subscription Details: SAAS Name
        :param str marketplace_resource_id: Marketplace Subscription Details: Resource URI
        :param str marketplace_status: Marketplace Subscription Details: SaaS Subscription Status
        :param 'MarketplaceSaaSInfoResponseMarketplaceSubscription' marketplace_subscription: Marketplace Subscription
        :param bool subscribed: Flag specifying if the Marketplace status is subscribed or not.
        """
        if billed_azure_subscription_id is not None:
            pulumi.set(__self__, "billed_azure_subscription_id", billed_azure_subscription_id)
        if marketplace_name is not None:
            pulumi.set(__self__, "marketplace_name", marketplace_name)
        if marketplace_resource_id is not None:
            pulumi.set(__self__, "marketplace_resource_id", marketplace_resource_id)
        if marketplace_status is not None:
            pulumi.set(__self__, "marketplace_status", marketplace_status)
        if marketplace_subscription is not None:
            pulumi.set(__self__, "marketplace_subscription", marketplace_subscription)
        if subscribed is not None:
            pulumi.set(__self__, "subscribed", subscribed)

    @property
    @pulumi.getter(name="billedAzureSubscriptionId")
    def billed_azure_subscription_id(self) -> Optional[str]:
        """
        The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into.
        """
        return pulumi.get(self, "billed_azure_subscription_id")

    @property
    @pulumi.getter(name="marketplaceName")
    def marketplace_name(self) -> Optional[str]:
        """
        Marketplace Subscription Details: SAAS Name
        """
        return pulumi.get(self, "marketplace_name")

    @property
    @pulumi.getter(name="marketplaceResourceId")
    def marketplace_resource_id(self) -> Optional[str]:
        """
        Marketplace Subscription Details: Resource URI
        """
        return pulumi.get(self, "marketplace_resource_id")

    @property
    @pulumi.getter(name="marketplaceStatus")
    def marketplace_status(self) -> Optional[str]:
        """
        Marketplace Subscription Details: SaaS Subscription Status
        """
        return pulumi.get(self, "marketplace_status")

    @property
    @pulumi.getter(name="marketplaceSubscription")
    def marketplace_subscription(self) -> Optional['outputs.MarketplaceSaaSInfoResponseMarketplaceSubscription']:
        """
        Marketplace Subscription
        """
        return pulumi.get(self, "marketplace_subscription")

    @property
    @pulumi.getter
    def subscribed(self) -> Optional[bool]:
        """
        Flag specifying if the Marketplace status is subscribed or not.
        """
        return pulumi.get(self, "subscribed")


@pulumi.output_type
class MarketplaceSaaSInfoResponseMarketplaceSubscription(dict):
    """
    Marketplace Subscription
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Marketplace Subscription
        :param str id: Marketplace Subscription Id. This is a GUID-formatted string.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Marketplace Subscription Id. This is a GUID-formatted string.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PartnerBillingEntityResponse(dict):
    """
    Partner Billing details associated with the resource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 partner_entity_uri: Optional[str] = None):
        """
        Partner Billing details associated with the resource.
        :param str id: The Elastic Organization Id.
        :param str name: The Elastic Organization Name.
        :param str partner_entity_uri: Link to the elastic organization page
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partner_entity_uri is not None:
            pulumi.set(__self__, "partner_entity_uri", partner_entity_uri)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The Elastic Organization Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The Elastic Organization Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnerEntityUri")
    def partner_entity_uri(self) -> Optional[str]:
        """
        Link to the elastic organization page
        """
        return pulumi.get(self, "partner_entity_uri")


@pulumi.output_type
class UserApiKeyResponsePropertiesResponse(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None):
        """
        :param str api_key: The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal clients only.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        """
        The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal clients only.
        """
        return pulumi.get(self, "api_key")


