# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'FederatedIdentityCredentialPropertiesClaimsMatchingExpressionArgs',
    'FederatedIdentityCredentialPropertiesClaimsMatchingExpressionArgsDict',
]

MYPY = False

if not MYPY:
    class FederatedIdentityCredentialPropertiesClaimsMatchingExpressionArgsDict(TypedDict):
        """
        Object for defining the allowed identifiers of external identities. Either 'subject' or 'claimsMatchingExpression' must be defined, but not both.
        """
        language_version: pulumi.Input[int]
        """
        Specifies the version of the flexible fic language used in the expression.
        """
        value: pulumi.Input[str]
        """
        Wildcard-based expression for matching incoming subject claims.
        """
elif False:
    FederatedIdentityCredentialPropertiesClaimsMatchingExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FederatedIdentityCredentialPropertiesClaimsMatchingExpressionArgs:
    def __init__(__self__, *,
                 language_version: pulumi.Input[int],
                 value: pulumi.Input[str]):
        """
        Object for defining the allowed identifiers of external identities. Either 'subject' or 'claimsMatchingExpression' must be defined, but not both.
        :param pulumi.Input[int] language_version: Specifies the version of the flexible fic language used in the expression.
        :param pulumi.Input[str] value: Wildcard-based expression for matching incoming subject claims.
        """
        pulumi.set(__self__, "language_version", language_version)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> pulumi.Input[int]:
        """
        Specifies the version of the flexible fic language used in the expression.
        """
        return pulumi.get(self, "language_version")

    @language_version.setter
    def language_version(self, value: pulumi.Input[int]):
        pulumi.set(self, "language_version", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Wildcard-based expression for matching incoming subject claims.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


