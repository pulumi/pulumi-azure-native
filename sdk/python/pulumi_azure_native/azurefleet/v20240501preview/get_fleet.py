# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFleetResult',
    'AwaitableGetFleetResult',
    'get_fleet',
    'get_fleet_output',
]

@pulumi.output_type
class GetFleetResult:
    """
    An Compute Fleet resource
    """
    def __init__(__self__, compute_profile=None, id=None, identity=None, location=None, name=None, plan=None, provisioning_state=None, regular_priority_profile=None, spot_priority_profile=None, system_data=None, tags=None, type=None, vm_sizes_profile=None, zones=None):
        if compute_profile and not isinstance(compute_profile, dict):
            raise TypeError("Expected argument 'compute_profile' to be a dict")
        pulumi.set(__self__, "compute_profile", compute_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plan and not isinstance(plan, dict):
            raise TypeError("Expected argument 'plan' to be a dict")
        pulumi.set(__self__, "plan", plan)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if regular_priority_profile and not isinstance(regular_priority_profile, dict):
            raise TypeError("Expected argument 'regular_priority_profile' to be a dict")
        pulumi.set(__self__, "regular_priority_profile", regular_priority_profile)
        if spot_priority_profile and not isinstance(spot_priority_profile, dict):
            raise TypeError("Expected argument 'spot_priority_profile' to be a dict")
        pulumi.set(__self__, "spot_priority_profile", spot_priority_profile)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vm_sizes_profile and not isinstance(vm_sizes_profile, list):
            raise TypeError("Expected argument 'vm_sizes_profile' to be a list")
        pulumi.set(__self__, "vm_sizes_profile", vm_sizes_profile)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="computeProfile")
    def compute_profile(self) -> 'outputs.ComputeProfileResponse':
        """
        Compute Profile to use for running user's workloads.
        """
        return pulumi.get(self, "compute_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> Optional['outputs.PlanResponse']:
        """
        Details of the resource plan.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="regularPriorityProfile")
    def regular_priority_profile(self) -> Optional['outputs.RegularPriorityProfileResponse']:
        """
        Configuration Options for Regular instances in Compute Fleet.
        """
        return pulumi.get(self, "regular_priority_profile")

    @property
    @pulumi.getter(name="spotPriorityProfile")
    def spot_priority_profile(self) -> Optional['outputs.SpotPriorityProfileResponse']:
        """
        Configuration Options for Spot instances in Compute Fleet.
        """
        return pulumi.get(self, "spot_priority_profile")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmSizesProfile")
    def vm_sizes_profile(self) -> Sequence['outputs.VmSizeProfileResponse']:
        """
        List of VM sizes supported for Compute Fleet
        """
        return pulumi.get(self, "vm_sizes_profile")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        Zones in which the Compute Fleet is available
        """
        return pulumi.get(self, "zones")


class AwaitableGetFleetResult(GetFleetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFleetResult(
            compute_profile=self.compute_profile,
            id=self.id,
            identity=self.identity,
            location=self.location,
            name=self.name,
            plan=self.plan,
            provisioning_state=self.provisioning_state,
            regular_priority_profile=self.regular_priority_profile,
            spot_priority_profile=self.spot_priority_profile,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            vm_sizes_profile=self.vm_sizes_profile,
            zones=self.zones)


def get_fleet(fleet_name: Optional[str] = None,
              resource_group_name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFleetResult:
    """
    Get a Fleet


    :param str fleet_name: The name of the Compute Fleet
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['fleetName'] = fleet_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azurefleet/v20240501preview:getFleet', __args__, opts=opts, typ=GetFleetResult).value

    return AwaitableGetFleetResult(
        compute_profile=pulumi.get(__ret__, 'compute_profile'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        plan=pulumi.get(__ret__, 'plan'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        regular_priority_profile=pulumi.get(__ret__, 'regular_priority_profile'),
        spot_priority_profile=pulumi.get(__ret__, 'spot_priority_profile'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        vm_sizes_profile=pulumi.get(__ret__, 'vm_sizes_profile'),
        zones=pulumi.get(__ret__, 'zones'))


@_utilities.lift_output_func(get_fleet)
def get_fleet_output(fleet_name: Optional[pulumi.Input[str]] = None,
                     resource_group_name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFleetResult]:
    """
    Get a Fleet


    :param str fleet_name: The name of the Compute Fleet
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
