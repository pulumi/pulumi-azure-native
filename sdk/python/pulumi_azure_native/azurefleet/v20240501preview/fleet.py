# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['FleetArgs', 'Fleet']

@pulumi.input_type
class FleetArgs:
    def __init__(__self__, *,
                 compute_profile: pulumi.Input['ComputeProfileArgs'],
                 resource_group_name: pulumi.Input[str],
                 vm_sizes_profile: pulumi.Input[Sequence[pulumi.Input['VmSizeProfileArgs']]],
                 fleet_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input['ManagedServiceIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input['PlanArgs']] = None,
                 regular_priority_profile: Optional[pulumi.Input['RegularPriorityProfileArgs']] = None,
                 spot_priority_profile: Optional[pulumi.Input['SpotPriorityProfileArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Fleet resource.
        :param pulumi.Input['ComputeProfileArgs'] compute_profile: Compute Profile to use for running user's workloads.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input['VmSizeProfileArgs']]] vm_sizes_profile: List of VM sizes supported for Compute Fleet
        :param pulumi.Input[str] fleet_name: The name of the Compute Fleet
        :param pulumi.Input['ManagedServiceIdentityArgs'] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input['PlanArgs'] plan: Details of the resource plan.
        :param pulumi.Input['RegularPriorityProfileArgs'] regular_priority_profile: Configuration Options for Regular instances in Compute Fleet.
        :param pulumi.Input['SpotPriorityProfileArgs'] spot_priority_profile: Configuration Options for Spot instances in Compute Fleet.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Zones in which the Compute Fleet is available
        """
        pulumi.set(__self__, "compute_profile", compute_profile)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "vm_sizes_profile", vm_sizes_profile)
        if fleet_name is not None:
            pulumi.set(__self__, "fleet_name", fleet_name)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if regular_priority_profile is not None:
            pulumi.set(__self__, "regular_priority_profile", regular_priority_profile)
        if spot_priority_profile is not None:
            pulumi.set(__self__, "spot_priority_profile", spot_priority_profile)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="computeProfile")
    def compute_profile(self) -> pulumi.Input['ComputeProfileArgs']:
        """
        Compute Profile to use for running user's workloads.
        """
        return pulumi.get(self, "compute_profile")

    @compute_profile.setter
    def compute_profile(self, value: pulumi.Input['ComputeProfileArgs']):
        pulumi.set(self, "compute_profile", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="vmSizesProfile")
    def vm_sizes_profile(self) -> pulumi.Input[Sequence[pulumi.Input['VmSizeProfileArgs']]]:
        """
        List of VM sizes supported for Compute Fleet
        """
        return pulumi.get(self, "vm_sizes_profile")

    @vm_sizes_profile.setter
    def vm_sizes_profile(self, value: pulumi.Input[Sequence[pulumi.Input['VmSizeProfileArgs']]]):
        pulumi.set(self, "vm_sizes_profile", value)

    @property
    @pulumi.getter(name="fleetName")
    def fleet_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Compute Fleet
        """
        return pulumi.get(self, "fleet_name")

    @fleet_name.setter
    def fleet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fleet_name", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ManagedServiceIdentityArgs']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ManagedServiceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input['PlanArgs']]:
        """
        Details of the resource plan.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input['PlanArgs']]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="regularPriorityProfile")
    def regular_priority_profile(self) -> Optional[pulumi.Input['RegularPriorityProfileArgs']]:
        """
        Configuration Options for Regular instances in Compute Fleet.
        """
        return pulumi.get(self, "regular_priority_profile")

    @regular_priority_profile.setter
    def regular_priority_profile(self, value: Optional[pulumi.Input['RegularPriorityProfileArgs']]):
        pulumi.set(self, "regular_priority_profile", value)

    @property
    @pulumi.getter(name="spotPriorityProfile")
    def spot_priority_profile(self) -> Optional[pulumi.Input['SpotPriorityProfileArgs']]:
        """
        Configuration Options for Spot instances in Compute Fleet.
        """
        return pulumi.get(self, "spot_priority_profile")

    @spot_priority_profile.setter
    def spot_priority_profile(self, value: Optional[pulumi.Input['SpotPriorityProfileArgs']]):
        pulumi.set(self, "spot_priority_profile", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Zones in which the Compute Fleet is available
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class Fleet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_profile: Optional[pulumi.Input[pulumi.InputType['ComputeProfileArgs']]] = None,
                 fleet_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[pulumi.InputType['PlanArgs']]] = None,
                 regular_priority_profile: Optional[pulumi.Input[pulumi.InputType['RegularPriorityProfileArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 spot_priority_profile: Optional[pulumi.Input[pulumi.InputType['SpotPriorityProfileArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vm_sizes_profile: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmSizeProfileArgs']]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        An Compute Fleet resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ComputeProfileArgs']] compute_profile: Compute Profile to use for running user's workloads.
        :param pulumi.Input[str] fleet_name: The name of the Compute Fleet
        :param pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']] identity: The managed service identities assigned to this resource.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[pulumi.InputType['PlanArgs']] plan: Details of the resource plan.
        :param pulumi.Input[pulumi.InputType['RegularPriorityProfileArgs']] regular_priority_profile: Configuration Options for Regular instances in Compute Fleet.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[pulumi.InputType['SpotPriorityProfileArgs']] spot_priority_profile: Configuration Options for Spot instances in Compute Fleet.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmSizeProfileArgs']]]] vm_sizes_profile: List of VM sizes supported for Compute Fleet
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Zones in which the Compute Fleet is available
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FleetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An Compute Fleet resource

        :param str resource_name: The name of the resource.
        :param FleetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FleetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_profile: Optional[pulumi.Input[pulumi.InputType['ComputeProfileArgs']]] = None,
                 fleet_name: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ManagedServiceIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[pulumi.InputType['PlanArgs']]] = None,
                 regular_priority_profile: Optional[pulumi.Input[pulumi.InputType['RegularPriorityProfileArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 spot_priority_profile: Optional[pulumi.Input[pulumi.InputType['SpotPriorityProfileArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vm_sizes_profile: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmSizeProfileArgs']]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FleetArgs.__new__(FleetArgs)

            if compute_profile is None and not opts.urn:
                raise TypeError("Missing required property 'compute_profile'")
            __props__.__dict__["compute_profile"] = compute_profile
            __props__.__dict__["fleet_name"] = fleet_name
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["plan"] = plan
            __props__.__dict__["regular_priority_profile"] = regular_priority_profile
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["spot_priority_profile"] = spot_priority_profile
            __props__.__dict__["tags"] = tags
            if vm_sizes_profile is None and not opts.urn:
                raise TypeError("Missing required property 'vm_sizes_profile'")
            __props__.__dict__["vm_sizes_profile"] = vm_sizes_profile
            __props__.__dict__["zones"] = zones
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:azurefleet:Fleet"), pulumi.Alias(type_="azure-native:azurefleet/v20231101preview:Fleet")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Fleet, __self__).__init__(
            'azure-native:azurefleet/v20240501preview:Fleet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Fleet':
        """
        Get an existing Fleet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FleetArgs.__new__(FleetArgs)

        __props__.__dict__["compute_profile"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["plan"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["regular_priority_profile"] = None
        __props__.__dict__["spot_priority_profile"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["vm_sizes_profile"] = None
        __props__.__dict__["zones"] = None
        return Fleet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="computeProfile")
    def compute_profile(self) -> pulumi.Output['outputs.ComputeProfileResponse']:
        """
        Compute Profile to use for running user's workloads.
        """
        return pulumi.get(self, "compute_profile")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ManagedServiceIdentityResponse']]:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Output[Optional['outputs.PlanResponse']]:
        """
        Details of the resource plan.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="regularPriorityProfile")
    def regular_priority_profile(self) -> pulumi.Output[Optional['outputs.RegularPriorityProfileResponse']]:
        """
        Configuration Options for Regular instances in Compute Fleet.
        """
        return pulumi.get(self, "regular_priority_profile")

    @property
    @pulumi.getter(name="spotPriorityProfile")
    def spot_priority_profile(self) -> pulumi.Output[Optional['outputs.SpotPriorityProfileResponse']]:
        """
        Configuration Options for Spot instances in Compute Fleet.
        """
        return pulumi.get(self, "spot_priority_profile")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmSizesProfile")
    def vm_sizes_profile(self) -> pulumi.Output[Sequence['outputs.VmSizeProfileResponse']]:
        """
        List of VM sizes supported for Compute Fleet
        """
        return pulumi.get(self, "vm_sizes_profile")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Zones in which the Compute Fleet is available
        """
        return pulumi.get(self, "zones")

