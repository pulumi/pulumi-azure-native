# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AppliancePropertiesInfrastructureConfigArgs',
    'AppliancePropertiesInfrastructureConfigArgsDict',
    'IdentityArgs',
    'IdentityArgsDict',
]

MYPY = False

if not MYPY:
    class AppliancePropertiesInfrastructureConfigArgsDict(TypedDict):
        """
        Contains infrastructure information about the Appliance
        """
        provider: NotRequired[pulumi.Input[Union[str, 'Provider']]]
        """
        Information about the connected appliance.
        """
elif False:
    AppliancePropertiesInfrastructureConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppliancePropertiesInfrastructureConfigArgs:
    def __init__(__self__, *,
                 provider: Optional[pulumi.Input[Union[str, 'Provider']]] = None):
        """
        Contains infrastructure information about the Appliance
        :param pulumi.Input[Union[str, 'Provider']] provider: Information about the connected appliance.
        """
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[Union[str, 'Provider']]]:
        """
        Information about the connected appliance.
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[Union[str, 'Provider']]]):
        pulumi.set(self, "provider", value)


if not MYPY:
    class IdentityArgsDict(TypedDict):
        """
        Identity for the resource.
        """
        type: NotRequired[pulumi.Input[Union[str, 'ResourceIdentityType']]]
        """
        The identity type.
        """
elif False:
    IdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'ResourceIdentityType']]] = None):
        """
        Identity for the resource.
        :param pulumi.Input[Union[str, 'ResourceIdentityType']] type: The identity type.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ResourceIdentityType']]]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ResourceIdentityType']]]):
        pulumi.set(self, "type", value)


