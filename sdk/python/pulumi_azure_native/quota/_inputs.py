# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AdditionalAttributesArgs',
    'GroupQuotasEntityBaseArgs',
    'GroupingIdArgs',
]

@pulumi.input_type
class AdditionalAttributesArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input['GroupingIdArgs'],
                 environment: Optional[Any] = None):
        """
        Additional attribute to allow subscriptions to be part of the GroupQuota.
        :param pulumi.Input['GroupingIdArgs'] group_id: The grouping Id for the group quota. It can be management Group Id or ServiceTreeId if applicable. 
        """
        AdditionalAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_id=group_id,
            environment=environment,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_id: pulumi.Input['GroupingIdArgs'],
             environment: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("group_id", group_id)
        if environment is not None:
            _setter("environment", environment)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input['GroupingIdArgs']:
        """
        The grouping Id for the group quota. It can be management Group Id or ServiceTreeId if applicable. 
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input['GroupingIdArgs']):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)


@pulumi.input_type
class GroupQuotasEntityBaseArgs:
    def __init__(__self__, *,
                 additional_attributes: Optional[pulumi.Input['AdditionalAttributesArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        Properties and filters for ShareQuota. The request parameter is optional, if there are no filters specified.
        :param pulumi.Input['AdditionalAttributesArgs'] additional_attributes: Additional attributes to allow subscription, which can be added to the subscriptionIds.
        :param pulumi.Input[str] display_name: Display name of the GroupQuota entity.
        """
        GroupQuotasEntityBaseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_attributes=additional_attributes,
            display_name=display_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_attributes: Optional[pulumi.Input['AdditionalAttributesArgs']] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if additional_attributes is not None:
            _setter("additional_attributes", additional_attributes)
        if display_name is not None:
            _setter("display_name", display_name)

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Optional[pulumi.Input['AdditionalAttributesArgs']]:
        """
        Additional attributes to allow subscription, which can be added to the subscriptionIds.
        """
        return pulumi.get(self, "additional_attributes")

    @additional_attributes.setter
    def additional_attributes(self, value: Optional[pulumi.Input['AdditionalAttributesArgs']]):
        pulumi.set(self, "additional_attributes", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the GroupQuota entity.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class GroupingIdArgs:
    def __init__(__self__, *,
                 grouping_id_type: Optional[pulumi.Input[Union[str, 'GroupingIdType']]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The grouping Id for the group quota. It can be management Group Id or ServiceTreeId if applicable. 
        :param pulumi.Input[Union[str, 'GroupingIdType']] grouping_id_type: GroupingId type. It is a required property. More types of groupIds can be supported in future. MGID is already in the URI, so it's not needed.'
        :param pulumi.Input[str] value: GroupId value based on the groupingType selected - management Group Id or ServiceTreeId.
        """
        GroupingIdArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grouping_id_type=grouping_id_type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grouping_id_type: Optional[pulumi.Input[Union[str, 'GroupingIdType']]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grouping_id_type is not None:
            _setter("grouping_id_type", grouping_id_type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="groupingIdType")
    def grouping_id_type(self) -> Optional[pulumi.Input[Union[str, 'GroupingIdType']]]:
        """
        GroupingId type. It is a required property. More types of groupIds can be supported in future. MGID is already in the URI, so it's not needed.'
        """
        return pulumi.get(self, "grouping_id_type")

    @grouping_id_type.setter
    def grouping_id_type(self, value: Optional[pulumi.Input[Union[str, 'GroupingIdType']]]):
        pulumi.set(self, "grouping_id_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        GroupId value based on the groupingType selected - management Group Id or ServiceTreeId.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


