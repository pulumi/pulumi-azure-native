# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetDiscountResult',
    'AwaitableGetDiscountResult',
    'get_discount',
    'get_discount_output',
]

@pulumi.output_type
class GetDiscountResult:
    """
    Resource definition for Discounts.
    """
    def __init__(__self__, applied_scope_type=None, benefit_resource_id=None, billing_account_resource_id=None, billing_profile_resource_id=None, customer_resource_id=None, display_name=None, entity_type=None, etag=None, id=None, identity=None, kind=None, location=None, managed_by=None, name=None, plan=None, product_code=None, provisioning_state=None, sku=None, start_at=None, status=None, system_data=None, system_id=None, tags=None, type=None):
        if applied_scope_type and not isinstance(applied_scope_type, str):
            raise TypeError("Expected argument 'applied_scope_type' to be a str")
        pulumi.set(__self__, "applied_scope_type", applied_scope_type)
        if benefit_resource_id and not isinstance(benefit_resource_id, str):
            raise TypeError("Expected argument 'benefit_resource_id' to be a str")
        pulumi.set(__self__, "benefit_resource_id", benefit_resource_id)
        if billing_account_resource_id and not isinstance(billing_account_resource_id, str):
            raise TypeError("Expected argument 'billing_account_resource_id' to be a str")
        pulumi.set(__self__, "billing_account_resource_id", billing_account_resource_id)
        if billing_profile_resource_id and not isinstance(billing_profile_resource_id, str):
            raise TypeError("Expected argument 'billing_profile_resource_id' to be a str")
        pulumi.set(__self__, "billing_profile_resource_id", billing_profile_resource_id)
        if customer_resource_id and not isinstance(customer_resource_id, str):
            raise TypeError("Expected argument 'customer_resource_id' to be a str")
        pulumi.set(__self__, "customer_resource_id", customer_resource_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if entity_type and not isinstance(entity_type, str):
            raise TypeError("Expected argument 'entity_type' to be a str")
        pulumi.set(__self__, "entity_type", entity_type)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if managed_by and not isinstance(managed_by, str):
            raise TypeError("Expected argument 'managed_by' to be a str")
        pulumi.set(__self__, "managed_by", managed_by)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plan and not isinstance(plan, dict):
            raise TypeError("Expected argument 'plan' to be a dict")
        pulumi.set(__self__, "plan", plan)
        if product_code and not isinstance(product_code, str):
            raise TypeError("Expected argument 'product_code' to be a str")
        pulumi.set(__self__, "product_code", product_code)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if sku and not isinstance(sku, dict):
            raise TypeError("Expected argument 'sku' to be a dict")
        pulumi.set(__self__, "sku", sku)
        if start_at and not isinstance(start_at, str):
            raise TypeError("Expected argument 'start_at' to be a str")
        pulumi.set(__self__, "start_at", start_at)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if system_id and not isinstance(system_id, str):
            raise TypeError("Expected argument 'system_id' to be a str")
        pulumi.set(__self__, "system_id", system_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appliedScopeType")
    def applied_scope_type(self) -> Optional[str]:
        """
        List of applied scopes supported for discounts.
        """
        return pulumi.get(self, "applied_scope_type")

    @property
    @pulumi.getter(name="benefitResourceId")
    def benefit_resource_id(self) -> str:
        """
        Fully-qualified identifier of the benefit under applicable benefit list.
        """
        return pulumi.get(self, "benefit_resource_id")

    @property
    @pulumi.getter(name="billingAccountResourceId")
    def billing_account_resource_id(self) -> str:
        """
        Billing account resource id where the discount metadata is present.
        """
        return pulumi.get(self, "billing_account_resource_id")

    @property
    @pulumi.getter(name="billingProfileResourceId")
    def billing_profile_resource_id(self) -> str:
        """
        Billing profile resource id where the discount is scoped to.
        """
        return pulumi.get(self, "billing_profile_resource_id")

    @property
    @pulumi.getter(name="customerResourceId")
    def customer_resource_id(self) -> str:
        """
        Customer resource id where the discount is scoped to.
        """
        return pulumi.get(self, "customer_resource_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        This defines a user friendly display name for the discount.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate. Validation: Required, must match one of the 2 values.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. 
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. E.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedBy")
    def managed_by(self) -> Optional[str]:
        """
        The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        """
        return pulumi.get(self, "managed_by")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> Optional['outputs.PlanResponse']:
        """
        Plan for the resource.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> str:
        """
        This is the catalog UPN for the product.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The state of the resource. Supported values are Pending, Failed, Succeeded, Canceled.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.SkuResponse']:
        """
        The resource model definition representing SKU
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> str:
        """
        Start date of the discount. Value is the date the discount started or will start in the future.
        """
        return pulumi.get(self, "start_at")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Represents the current status of the discount.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> Optional[str]:
        """
        This is the globally unique identifier of the Discount which will not change for the lifetime of the Discount.
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetDiscountResult(GetDiscountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiscountResult(
            applied_scope_type=self.applied_scope_type,
            benefit_resource_id=self.benefit_resource_id,
            billing_account_resource_id=self.billing_account_resource_id,
            billing_profile_resource_id=self.billing_profile_resource_id,
            customer_resource_id=self.customer_resource_id,
            display_name=self.display_name,
            entity_type=self.entity_type,
            etag=self.etag,
            id=self.id,
            identity=self.identity,
            kind=self.kind,
            location=self.location,
            managed_by=self.managed_by,
            name=self.name,
            plan=self.plan,
            product_code=self.product_code,
            provisioning_state=self.provisioning_state,
            sku=self.sku,
            start_at=self.start_at,
            status=self.status,
            system_data=self.system_data,
            system_id=self.system_id,
            tags=self.tags,
            type=self.type)


def get_discount(discount_name: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiscountResult:
    """
    Get discount at resource group level


    :param str discount_name: Name of the discount
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['discountName'] = discount_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:billingbenefits/v20241101preview:getDiscount', __args__, opts=opts, typ=GetDiscountResult).value

    return AwaitableGetDiscountResult(
        applied_scope_type=pulumi.get(__ret__, 'applied_scope_type'),
        benefit_resource_id=pulumi.get(__ret__, 'benefit_resource_id'),
        billing_account_resource_id=pulumi.get(__ret__, 'billing_account_resource_id'),
        billing_profile_resource_id=pulumi.get(__ret__, 'billing_profile_resource_id'),
        customer_resource_id=pulumi.get(__ret__, 'customer_resource_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        entity_type=pulumi.get(__ret__, 'entity_type'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        kind=pulumi.get(__ret__, 'kind'),
        location=pulumi.get(__ret__, 'location'),
        managed_by=pulumi.get(__ret__, 'managed_by'),
        name=pulumi.get(__ret__, 'name'),
        plan=pulumi.get(__ret__, 'plan'),
        product_code=pulumi.get(__ret__, 'product_code'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        sku=pulumi.get(__ret__, 'sku'),
        start_at=pulumi.get(__ret__, 'start_at'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        system_id=pulumi.get(__ret__, 'system_id'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_discount_output(discount_name: Optional[pulumi.Input[str]] = None,
                        resource_group_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDiscountResult]:
    """
    Get discount at resource group level


    :param str discount_name: Name of the discount
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['discountName'] = discount_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:billingbenefits/v20241101preview:getDiscount', __args__, opts=opts, typ=GetDiscountResult)
    return __ret__.apply(lambda __response__: GetDiscountResult(
        applied_scope_type=pulumi.get(__response__, 'applied_scope_type'),
        benefit_resource_id=pulumi.get(__response__, 'benefit_resource_id'),
        billing_account_resource_id=pulumi.get(__response__, 'billing_account_resource_id'),
        billing_profile_resource_id=pulumi.get(__response__, 'billing_profile_resource_id'),
        customer_resource_id=pulumi.get(__response__, 'customer_resource_id'),
        display_name=pulumi.get(__response__, 'display_name'),
        entity_type=pulumi.get(__response__, 'entity_type'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        identity=pulumi.get(__response__, 'identity'),
        kind=pulumi.get(__response__, 'kind'),
        location=pulumi.get(__response__, 'location'),
        managed_by=pulumi.get(__response__, 'managed_by'),
        name=pulumi.get(__response__, 'name'),
        plan=pulumi.get(__response__, 'plan'),
        product_code=pulumi.get(__response__, 'product_code'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        sku=pulumi.get(__response__, 'sku'),
        start_at=pulumi.get(__response__, 'start_at'),
        status=pulumi.get(__response__, 'status'),
        system_data=pulumi.get(__response__, 'system_data'),
        system_id=pulumi.get(__response__, 'system_id'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
