# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAzureLargeInstanceResult',
    'AwaitableGetAzureLargeInstanceResult',
    'get_azure_large_instance',
    'get_azure_large_instance_output',
]

@pulumi.output_type
class GetAzureLargeInstanceResult:
    """
    Azure Large Instance info on Azure (ARM properties and AzureLargeInstance
    properties)
    """
    def __init__(__self__, azure_large_instance_id=None, hardware_profile=None, hw_revision=None, id=None, location=None, name=None, network_profile=None, os_profile=None, power_state=None, provisioning_state=None, proximity_placement_group=None, storage_profile=None, system_data=None, tags=None, type=None):
        if azure_large_instance_id and not isinstance(azure_large_instance_id, str):
            raise TypeError("Expected argument 'azure_large_instance_id' to be a str")
        pulumi.set(__self__, "azure_large_instance_id", azure_large_instance_id)
        if hardware_profile and not isinstance(hardware_profile, dict):
            raise TypeError("Expected argument 'hardware_profile' to be a dict")
        pulumi.set(__self__, "hardware_profile", hardware_profile)
        if hw_revision and not isinstance(hw_revision, str):
            raise TypeError("Expected argument 'hw_revision' to be a str")
        pulumi.set(__self__, "hw_revision", hw_revision)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_profile and not isinstance(network_profile, dict):
            raise TypeError("Expected argument 'network_profile' to be a dict")
        pulumi.set(__self__, "network_profile", network_profile)
        if os_profile and not isinstance(os_profile, dict):
            raise TypeError("Expected argument 'os_profile' to be a dict")
        pulumi.set(__self__, "os_profile", os_profile)
        if power_state and not isinstance(power_state, str):
            raise TypeError("Expected argument 'power_state' to be a str")
        pulumi.set(__self__, "power_state", power_state)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if proximity_placement_group and not isinstance(proximity_placement_group, str):
            raise TypeError("Expected argument 'proximity_placement_group' to be a str")
        pulumi.set(__self__, "proximity_placement_group", proximity_placement_group)
        if storage_profile and not isinstance(storage_profile, dict):
            raise TypeError("Expected argument 'storage_profile' to be a dict")
        pulumi.set(__self__, "storage_profile", storage_profile)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureLargeInstanceId")
    def azure_large_instance_id(self) -> Optional[str]:
        """
        Specifies the Azure Large Instance unique ID.
        """
        return pulumi.get(self, "azure_large_instance_id")

    @property
    @pulumi.getter(name="hardwareProfile")
    def hardware_profile(self) -> Optional['outputs.HardwareProfileResponse']:
        """
        Specifies the hardware settings for the Azure Large Instance.
        """
        return pulumi.get(self, "hardware_profile")

    @property
    @pulumi.getter(name="hwRevision")
    def hw_revision(self) -> Optional[str]:
        """
        Hardware revision of an Azure Large Instance
        """
        return pulumi.get(self, "hw_revision")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional['outputs.NetworkProfileResponse']:
        """
        Specifies the network settings for the Azure Large Instance.
        """
        return pulumi.get(self, "network_profile")

    @property
    @pulumi.getter(name="osProfile")
    def os_profile(self) -> Optional['outputs.OsProfileResponse']:
        """
        Specifies the operating system settings for the Azure Large Instance.
        """
        return pulumi.get(self, "os_profile")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        """
        Resource power state
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        State of provisioning of the AzureLargeInstance
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="proximityPlacementGroup")
    def proximity_placement_group(self) -> Optional[str]:
        """
        Resource proximity placement group
        """
        return pulumi.get(self, "proximity_placement_group")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional['outputs.StorageProfileResponse']:
        """
        Specifies the storage settings for the Azure Large Instance disks.
        """
        return pulumi.get(self, "storage_profile")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAzureLargeInstanceResult(GetAzureLargeInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureLargeInstanceResult(
            azure_large_instance_id=self.azure_large_instance_id,
            hardware_profile=self.hardware_profile,
            hw_revision=self.hw_revision,
            id=self.id,
            location=self.location,
            name=self.name,
            network_profile=self.network_profile,
            os_profile=self.os_profile,
            power_state=self.power_state,
            provisioning_state=self.provisioning_state,
            proximity_placement_group=self.proximity_placement_group,
            storage_profile=self.storage_profile,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_azure_large_instance(azure_large_instance_name: Optional[str] = None,
                             resource_group_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzureLargeInstanceResult:
    """
    Gets an Azure Large Instance for the specified subscription, resource group,
    and instance name.
    Azure REST API version: 2024-08-01-preview.


    :param str azure_large_instance_name: Name of the AzureLargeInstance.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['azureLargeInstanceName'] = azure_large_instance_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:azurelargeinstance:getAzureLargeInstance', __args__, opts=opts, typ=GetAzureLargeInstanceResult).value

    return AwaitableGetAzureLargeInstanceResult(
        azure_large_instance_id=pulumi.get(__ret__, 'azure_large_instance_id'),
        hardware_profile=pulumi.get(__ret__, 'hardware_profile'),
        hw_revision=pulumi.get(__ret__, 'hw_revision'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        network_profile=pulumi.get(__ret__, 'network_profile'),
        os_profile=pulumi.get(__ret__, 'os_profile'),
        power_state=pulumi.get(__ret__, 'power_state'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        proximity_placement_group=pulumi.get(__ret__, 'proximity_placement_group'),
        storage_profile=pulumi.get(__ret__, 'storage_profile'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_azure_large_instance_output(azure_large_instance_name: Optional[pulumi.Input[str]] = None,
                                    resource_group_name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAzureLargeInstanceResult]:
    """
    Gets an Azure Large Instance for the specified subscription, resource group,
    and instance name.
    Azure REST API version: 2024-08-01-preview.


    :param str azure_large_instance_name: Name of the AzureLargeInstance.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['azureLargeInstanceName'] = azure_large_instance_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:azurelargeinstance:getAzureLargeInstance', __args__, opts=opts, typ=GetAzureLargeInstanceResult)
    return __ret__.apply(lambda __response__: GetAzureLargeInstanceResult(
        azure_large_instance_id=pulumi.get(__response__, 'azure_large_instance_id'),
        hardware_profile=pulumi.get(__response__, 'hardware_profile'),
        hw_revision=pulumi.get(__response__, 'hw_revision'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        network_profile=pulumi.get(__response__, 'network_profile'),
        os_profile=pulumi.get(__response__, 'os_profile'),
        power_state=pulumi.get(__response__, 'power_state'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        proximity_placement_group=pulumi.get(__response__, 'proximity_placement_group'),
        storage_profile=pulumi.get(__response__, 'storage_profile'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
