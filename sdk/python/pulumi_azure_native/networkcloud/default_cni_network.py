# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DefaultCniNetworkArgs', 'DefaultCniNetwork']

@pulumi.input_type
class DefaultCniNetworkArgs:
    def __init__(__self__, *,
                 extended_location: pulumi.Input['ExtendedLocationArgs'],
                 l3_isolation_domain_id: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 vlan: pulumi.Input[float],
                 cni_bgp_configuration: Optional[pulumi.Input['CniBgpConfigurationArgs']] = None,
                 default_cni_network_name: Optional[pulumi.Input[str]] = None,
                 ip_allocation_type: Optional[pulumi.Input[Union[str, 'IpAllocationType']]] = None,
                 ipv4_connected_prefix: Optional[pulumi.Input[str]] = None,
                 ipv6_connected_prefix: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DefaultCniNetwork resource.
        :param pulumi.Input['ExtendedLocationArgs'] extended_location: The extended location of the cluster associated with the resource.
        :param pulumi.Input[str] l3_isolation_domain_id: The resource ID of the Network Fabric l3IsolationDomain.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[float] vlan: The VLAN from the l3IsolationDomain that is used for this network.
        :param pulumi.Input['CniBgpConfigurationArgs'] cni_bgp_configuration: The Calico BGP configuration.
        :param pulumi.Input[str] default_cni_network_name: The name of the default CNI network.
        :param pulumi.Input[Union[str, 'IpAllocationType']] ip_allocation_type: The type of the IP address allocation.
        :param pulumi.Input[str] ipv4_connected_prefix: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
               is IPV4 or DualStack.
        :param pulumi.Input[str] ipv6_connected_prefix: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
               is IPV6 or DualStack.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "extended_location", extended_location)
        pulumi.set(__self__, "l3_isolation_domain_id", l3_isolation_domain_id)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "vlan", vlan)
        if cni_bgp_configuration is not None:
            pulumi.set(__self__, "cni_bgp_configuration", cni_bgp_configuration)
        if default_cni_network_name is not None:
            pulumi.set(__self__, "default_cni_network_name", default_cni_network_name)
        if ip_allocation_type is None:
            ip_allocation_type = 'DualStack'
        if ip_allocation_type is not None:
            pulumi.set(__self__, "ip_allocation_type", ip_allocation_type)
        if ipv4_connected_prefix is not None:
            pulumi.set(__self__, "ipv4_connected_prefix", ipv4_connected_prefix)
        if ipv6_connected_prefix is not None:
            pulumi.set(__self__, "ipv6_connected_prefix", ipv6_connected_prefix)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Input['ExtendedLocationArgs']:
        """
        The extended location of the cluster associated with the resource.
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: pulumi.Input['ExtendedLocationArgs']):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="l3IsolationDomainId")
    def l3_isolation_domain_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Network Fabric l3IsolationDomain.
        """
        return pulumi.get(self, "l3_isolation_domain_id")

    @l3_isolation_domain_id.setter
    def l3_isolation_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "l3_isolation_domain_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Input[float]:
        """
        The VLAN from the l3IsolationDomain that is used for this network.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: pulumi.Input[float]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="cniBgpConfiguration")
    def cni_bgp_configuration(self) -> Optional[pulumi.Input['CniBgpConfigurationArgs']]:
        """
        The Calico BGP configuration.
        """
        return pulumi.get(self, "cni_bgp_configuration")

    @cni_bgp_configuration.setter
    def cni_bgp_configuration(self, value: Optional[pulumi.Input['CniBgpConfigurationArgs']]):
        pulumi.set(self, "cni_bgp_configuration", value)

    @property
    @pulumi.getter(name="defaultCniNetworkName")
    def default_cni_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the default CNI network.
        """
        return pulumi.get(self, "default_cni_network_name")

    @default_cni_network_name.setter
    def default_cni_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_cni_network_name", value)

    @property
    @pulumi.getter(name="ipAllocationType")
    def ip_allocation_type(self) -> Optional[pulumi.Input[Union[str, 'IpAllocationType']]]:
        """
        The type of the IP address allocation.
        """
        return pulumi.get(self, "ip_allocation_type")

    @ip_allocation_type.setter
    def ip_allocation_type(self, value: Optional[pulumi.Input[Union[str, 'IpAllocationType']]]):
        pulumi.set(self, "ip_allocation_type", value)

    @property
    @pulumi.getter(name="ipv4ConnectedPrefix")
    def ipv4_connected_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
        is IPV4 or DualStack.
        """
        return pulumi.get(self, "ipv4_connected_prefix")

    @ipv4_connected_prefix.setter
    def ipv4_connected_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_connected_prefix", value)

    @property
    @pulumi.getter(name="ipv6ConnectedPrefix")
    def ipv6_connected_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
        is IPV6 or DualStack.
        """
        return pulumi.get(self, "ipv6_connected_prefix")

    @ipv6_connected_prefix.setter
    def ipv6_connected_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_connected_prefix", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class DefaultCniNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cni_bgp_configuration: Optional[pulumi.Input[pulumi.InputType['CniBgpConfigurationArgs']]] = None,
                 default_cni_network_name: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationArgs']]] = None,
                 ip_allocation_type: Optional[pulumi.Input[Union[str, 'IpAllocationType']]] = None,
                 ipv4_connected_prefix: Optional[pulumi.Input[str]] = None,
                 ipv6_connected_prefix: Optional[pulumi.Input[str]] = None,
                 l3_isolation_domain_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vlan: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Azure REST API version: 2022-12-12-preview. Prior API version in Azure Native 1.x: 2022-12-12-preview

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CniBgpConfigurationArgs']] cni_bgp_configuration: The Calico BGP configuration.
        :param pulumi.Input[str] default_cni_network_name: The name of the default CNI network.
        :param pulumi.Input[pulumi.InputType['ExtendedLocationArgs']] extended_location: The extended location of the cluster associated with the resource.
        :param pulumi.Input[Union[str, 'IpAllocationType']] ip_allocation_type: The type of the IP address allocation.
        :param pulumi.Input[str] ipv4_connected_prefix: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
               is IPV4 or DualStack.
        :param pulumi.Input[str] ipv6_connected_prefix: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
               is IPV6 or DualStack.
        :param pulumi.Input[str] l3_isolation_domain_id: The resource ID of the Network Fabric l3IsolationDomain.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[float] vlan: The VLAN from the l3IsolationDomain that is used for this network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultCniNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Azure REST API version: 2022-12-12-preview. Prior API version in Azure Native 1.x: 2022-12-12-preview

        :param str resource_name: The name of the resource.
        :param DefaultCniNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultCniNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cni_bgp_configuration: Optional[pulumi.Input[pulumi.InputType['CniBgpConfigurationArgs']]] = None,
                 default_cni_network_name: Optional[pulumi.Input[str]] = None,
                 extended_location: Optional[pulumi.Input[pulumi.InputType['ExtendedLocationArgs']]] = None,
                 ip_allocation_type: Optional[pulumi.Input[Union[str, 'IpAllocationType']]] = None,
                 ipv4_connected_prefix: Optional[pulumi.Input[str]] = None,
                 ipv6_connected_prefix: Optional[pulumi.Input[str]] = None,
                 l3_isolation_domain_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vlan: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultCniNetworkArgs.__new__(DefaultCniNetworkArgs)

            __props__.__dict__["cni_bgp_configuration"] = cni_bgp_configuration
            __props__.__dict__["default_cni_network_name"] = default_cni_network_name
            if extended_location is None and not opts.urn:
                raise TypeError("Missing required property 'extended_location'")
            __props__.__dict__["extended_location"] = extended_location
            if ip_allocation_type is None:
                ip_allocation_type = 'DualStack'
            __props__.__dict__["ip_allocation_type"] = ip_allocation_type
            __props__.__dict__["ipv4_connected_prefix"] = ipv4_connected_prefix
            __props__.__dict__["ipv6_connected_prefix"] = ipv6_connected_prefix
            if l3_isolation_domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'l3_isolation_domain_id'")
            __props__.__dict__["l3_isolation_domain_id"] = l3_isolation_domain_id
            __props__.__dict__["location"] = location
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            if vlan is None and not opts.urn:
                raise TypeError("Missing required property 'vlan'")
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["cluster_id"] = None
            __props__.__dict__["cni_as_number"] = None
            __props__.__dict__["detailed_status"] = None
            __props__.__dict__["detailed_status_message"] = None
            __props__.__dict__["fabric_bgp_peers"] = None
            __props__.__dict__["hybrid_aks_clusters_associated_ids"] = None
            __props__.__dict__["interface_name"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:networkcloud/v20221212preview:DefaultCniNetwork")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DefaultCniNetwork, __self__).__init__(
            'azure-native:networkcloud:DefaultCniNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DefaultCniNetwork':
        """
        Get an existing DefaultCniNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DefaultCniNetworkArgs.__new__(DefaultCniNetworkArgs)

        __props__.__dict__["cluster_id"] = None
        __props__.__dict__["cni_as_number"] = None
        __props__.__dict__["cni_bgp_configuration"] = None
        __props__.__dict__["detailed_status"] = None
        __props__.__dict__["detailed_status_message"] = None
        __props__.__dict__["extended_location"] = None
        __props__.__dict__["fabric_bgp_peers"] = None
        __props__.__dict__["hybrid_aks_clusters_associated_ids"] = None
        __props__.__dict__["interface_name"] = None
        __props__.__dict__["ip_allocation_type"] = None
        __props__.__dict__["ipv4_connected_prefix"] = None
        __props__.__dict__["ipv6_connected_prefix"] = None
        __props__.__dict__["l3_isolation_domain_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["vlan"] = None
        return DefaultCniNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The resource ID of the Network Cloud cluster this default CNI network is associated with.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="cniAsNumber")
    def cni_as_number(self) -> pulumi.Output[float]:
        """
        The autonomous system number that the fabric expects to peer with, derived from the associated L3 isolation domain.
        """
        return pulumi.get(self, "cni_as_number")

    @property
    @pulumi.getter(name="cniBgpConfiguration")
    def cni_bgp_configuration(self) -> pulumi.Output[Optional['outputs.CniBgpConfigurationResponse']]:
        """
        The Calico BGP configuration.
        """
        return pulumi.get(self, "cni_bgp_configuration")

    @property
    @pulumi.getter(name="detailedStatus")
    def detailed_status(self) -> pulumi.Output[str]:
        """
        The more detailed status of the default CNI network.
        """
        return pulumi.get(self, "detailed_status")

    @property
    @pulumi.getter(name="detailedStatusMessage")
    def detailed_status_message(self) -> pulumi.Output[str]:
        """
        The descriptive message about the current detailed status.
        """
        return pulumi.get(self, "detailed_status_message")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output['outputs.ExtendedLocationResponse']:
        """
        The extended location of the cluster associated with the resource.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="fabricBgpPeers")
    def fabric_bgp_peers(self) -> pulumi.Output[Sequence['outputs.BgpPeerResponse']]:
        """
        The L3 isolation fabric BGP peering connectivity information necessary for BGP peering the Hybrid AKS Cluster with the switch fabric.
        """
        return pulumi.get(self, "fabric_bgp_peers")

    @property
    @pulumi.getter(name="hybridAksClustersAssociatedIds")
    def hybrid_aks_clusters_associated_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of Hybrid AKS cluster resource ID(s) that are associated with this default CNI network.
        """
        return pulumi.get(self, "hybrid_aks_clusters_associated_ids")

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> pulumi.Output[str]:
        """
        The name of the interface that will be present in the virtual machine to represent this network.
        """
        return pulumi.get(self, "interface_name")

    @property
    @pulumi.getter(name="ipAllocationType")
    def ip_allocation_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the IP address allocation.
        """
        return pulumi.get(self, "ip_allocation_type")

    @property
    @pulumi.getter(name="ipv4ConnectedPrefix")
    def ipv4_connected_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
        is IPV4 or DualStack.
        """
        return pulumi.get(self, "ipv4_connected_prefix")

    @property
    @pulumi.getter(name="ipv6ConnectedPrefix")
    def ipv6_connected_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
        is IPV6 or DualStack.
        """
        return pulumi.get(self, "ipv6_connected_prefix")

    @property
    @pulumi.getter(name="l3IsolationDomainId")
    def l3_isolation_domain_id(self) -> pulumi.Output[str]:
        """
        The resource ID of the Network Fabric l3IsolationDomain.
        """
        return pulumi.get(self, "l3_isolation_domain_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the default CNI network.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[float]:
        """
        The VLAN from the l3IsolationDomain that is used for this network.
        """
        return pulumi.get(self, "vlan")

