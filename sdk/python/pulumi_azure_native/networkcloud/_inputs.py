# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AdministrativeCredentialsArgs',
    'BareMetalMachineConfigurationDataArgs',
    'BareMetalMachineKeySetPropertiesArgs',
    'BareMetalMachinePropertiesArgs',
    'BgpPeerArgs',
    'BmcKeySetPropertiesArgs',
    'ClusterCapacityArgs',
    'ClusterManagerPropertiesArgs',
    'ClusterMetricsConfigurationPropertiesArgs',
    'ClusterPropertiesArgs',
    'CniBgpConfigurationArgs',
    'CommunityAdvertisementArgs',
    'ConsolePropertiesArgs',
    'DefaultCniNetworkPropertiesArgs',
    'EgressEndpointArgs',
    'EndpointDependencyArgs',
    'ExtendedLocationArgs',
    'HybridAksClusterPropertiesArgs',
    'ImageRepositoryCredentialsArgs',
    'KeySetUserArgs',
    'L2NetworkPropertiesArgs',
    'L3NetworkPropertiesArgs',
    'ManagedResourceGroupConfigurationArgs',
    'NetworkAttachmentArgs',
    'OsDiskArgs',
    'RackDefinitionArgs',
    'RackPropertiesArgs',
    'ServicePrincipalInformationArgs',
    'SshPublicKeyArgs',
    'StorageApplianceConfigurationDataArgs',
    'StorageAppliancePropertiesArgs',
    'StorageProfileArgs',
    'TrunkedNetworkPropertiesArgs',
    'ValidationThresholdArgs',
    'VirtualMachinePlacementHintArgs',
    'VirtualMachinePropertiesArgs',
    'VolumePropertiesArgs',
]

@pulumi.input_type
class AdministrativeCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password of the administrator of the device used during initialization.
        :param pulumi.Input[str] username: The username of the administrator of the device used during initialization.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of the administrator of the device used during initialization.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of the administrator of the device used during initialization.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class BareMetalMachineConfigurationDataArgs:
    def __init__(__self__, *,
                 bmc_credentials: pulumi.Input['AdministrativeCredentialsArgs'],
                 bmc_mac_address: pulumi.Input[str],
                 boot_mac_address: pulumi.Input[str],
                 rack_slot: pulumi.Input[float],
                 serial_number: pulumi.Input[str],
                 machine_details: Optional[pulumi.Input[str]] = None,
                 machine_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bmc_mac_address: The MAC address of the BMC for this machine.
        :param pulumi.Input[str] boot_mac_address: The MAC address associated with the PXE NIC card.
        :param pulumi.Input[float] rack_slot: The slot the physical machine is in the rack based on the BOM configuration.
        :param pulumi.Input[str] serial_number: The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
        :param pulumi.Input[str] machine_details: The free-form additional information about the machine, e.g. an asset tag.
        :param pulumi.Input[str] machine_name: The user-provided name for the bare metal machine created from this specification.
               If not provided, the machine name will be generated programmatically.
        """
        pulumi.set(__self__, "bmc_credentials", bmc_credentials)
        pulumi.set(__self__, "bmc_mac_address", bmc_mac_address)
        pulumi.set(__self__, "boot_mac_address", boot_mac_address)
        pulumi.set(__self__, "rack_slot", rack_slot)
        pulumi.set(__self__, "serial_number", serial_number)
        if machine_details is not None:
            pulumi.set(__self__, "machine_details", machine_details)
        if machine_name is not None:
            pulumi.set(__self__, "machine_name", machine_name)

    @property
    @pulumi.getter(name="bmcCredentials")
    def bmc_credentials(self) -> pulumi.Input['AdministrativeCredentialsArgs']:
        return pulumi.get(self, "bmc_credentials")

    @bmc_credentials.setter
    def bmc_credentials(self, value: pulumi.Input['AdministrativeCredentialsArgs']):
        pulumi.set(self, "bmc_credentials", value)

    @property
    @pulumi.getter(name="bmcMacAddress")
    def bmc_mac_address(self) -> pulumi.Input[str]:
        """
        The MAC address of the BMC for this machine.
        """
        return pulumi.get(self, "bmc_mac_address")

    @bmc_mac_address.setter
    def bmc_mac_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "bmc_mac_address", value)

    @property
    @pulumi.getter(name="bootMacAddress")
    def boot_mac_address(self) -> pulumi.Input[str]:
        """
        The MAC address associated with the PXE NIC card.
        """
        return pulumi.get(self, "boot_mac_address")

    @boot_mac_address.setter
    def boot_mac_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "boot_mac_address", value)

    @property
    @pulumi.getter(name="rackSlot")
    def rack_slot(self) -> pulumi.Input[float]:
        """
        The slot the physical machine is in the rack based on the BOM configuration.
        """
        return pulumi.get(self, "rack_slot")

    @rack_slot.setter
    def rack_slot(self, value: pulumi.Input[float]):
        pulumi.set(self, "rack_slot", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Input[str]:
        """
        The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="machineDetails")
    def machine_details(self) -> Optional[pulumi.Input[str]]:
        """
        The free-form additional information about the machine, e.g. an asset tag.
        """
        return pulumi.get(self, "machine_details")

    @machine_details.setter
    def machine_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_details", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user-provided name for the bare metal machine created from this specification.
        If not provided, the machine name will be generated programmatically.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_name", value)


@pulumi.input_type
class BareMetalMachineKeySetPropertiesArgs:
    def __init__(__self__, *,
                 azure_group_id: pulumi.Input[str],
                 expiration: pulumi.Input[str],
                 jump_hosts_allowed: pulumi.Input[Sequence[pulumi.Input[str]]],
                 privilege_level: pulumi.Input[Union[str, 'BareMetalMachineKeySetPrivilegeLevel']],
                 user_list: pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]],
                 os_group_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] azure_group_id: The object ID of Azure Active Directory group that all users in the list must be in for access to be granted. Users that are not in the group will not have access.
        :param pulumi.Input[str] expiration: The date and time after which the users in this key set will be removed from the bare metal machines.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] jump_hosts_allowed: The list of IP addresses of jump hosts with management network access from which a login will be allowed for the users.
        :param pulumi.Input[Union[str, 'BareMetalMachineKeySetPrivilegeLevel']] privilege_level: The access level allowed for the users in this key set.
        :param pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]] user_list: The unique list of permitted users.
        :param pulumi.Input[str] os_group_name: The name of the group that users will be assigned to on the operating system of the machines.
        """
        pulumi.set(__self__, "azure_group_id", azure_group_id)
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "jump_hosts_allowed", jump_hosts_allowed)
        pulumi.set(__self__, "privilege_level", privilege_level)
        pulumi.set(__self__, "user_list", user_list)
        if os_group_name is not None:
            pulumi.set(__self__, "os_group_name", os_group_name)

    @property
    @pulumi.getter(name="azureGroupId")
    def azure_group_id(self) -> pulumi.Input[str]:
        """
        The object ID of Azure Active Directory group that all users in the list must be in for access to be granted. Users that are not in the group will not have access.
        """
        return pulumi.get(self, "azure_group_id")

    @azure_group_id.setter
    def azure_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_group_id", value)

    @property
    @pulumi.getter
    def expiration(self) -> pulumi.Input[str]:
        """
        The date and time after which the users in this key set will be removed from the bare metal machines.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: pulumi.Input[str]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter(name="jumpHostsAllowed")
    def jump_hosts_allowed(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of IP addresses of jump hosts with management network access from which a login will be allowed for the users.
        """
        return pulumi.get(self, "jump_hosts_allowed")

    @jump_hosts_allowed.setter
    def jump_hosts_allowed(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "jump_hosts_allowed", value)

    @property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> pulumi.Input[Union[str, 'BareMetalMachineKeySetPrivilegeLevel']]:
        """
        The access level allowed for the users in this key set.
        """
        return pulumi.get(self, "privilege_level")

    @privilege_level.setter
    def privilege_level(self, value: pulumi.Input[Union[str, 'BareMetalMachineKeySetPrivilegeLevel']]):
        pulumi.set(self, "privilege_level", value)

    @property
    @pulumi.getter(name="userList")
    def user_list(self) -> pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]]:
        """
        The unique list of permitted users.
        """
        return pulumi.get(self, "user_list")

    @user_list.setter
    def user_list(self, value: pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]]):
        pulumi.set(self, "user_list", value)

    @property
    @pulumi.getter(name="osGroupName")
    def os_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the group that users will be assigned to on the operating system of the machines.
        """
        return pulumi.get(self, "os_group_name")

    @os_group_name.setter
    def os_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_group_name", value)


@pulumi.input_type
class BareMetalMachinePropertiesArgs:
    def __init__(__self__, *,
                 bmc_connection_string: pulumi.Input[str],
                 bmc_credentials: pulumi.Input['AdministrativeCredentialsArgs'],
                 bmc_mac_address: pulumi.Input[str],
                 boot_mac_address: pulumi.Input[str],
                 machine_details: pulumi.Input[str],
                 machine_name: pulumi.Input[str],
                 machine_sku_id: pulumi.Input[str],
                 rack_id: pulumi.Input[str],
                 rack_slot: pulumi.Input[float],
                 serial_number: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bmc_connection_string: The connection string for the baseboard management controller including IP address and protocol.
        :param pulumi.Input[str] bmc_mac_address: The MAC address of the BMC device.
        :param pulumi.Input[str] boot_mac_address: The MAC address of a NIC connected to the PXE network.
        :param pulumi.Input[str] machine_details: The custom details provided by the customer.
        :param pulumi.Input[str] machine_name: The OS-level hostname assigned to this machine.
        :param pulumi.Input[str] machine_sku_id: The unique internal identifier of the bare metal machine SKU.
        :param pulumi.Input[str] rack_id: The resource ID of the rack where this bare metal machine resides.
        :param pulumi.Input[float] rack_slot: The rack slot in which this bare metal machine is located, ordered from the bottom up i.e. the lowest slot is 1.
        :param pulumi.Input[str] serial_number: The serial number of the bare metal machine.
        """
        pulumi.set(__self__, "bmc_connection_string", bmc_connection_string)
        pulumi.set(__self__, "bmc_credentials", bmc_credentials)
        pulumi.set(__self__, "bmc_mac_address", bmc_mac_address)
        pulumi.set(__self__, "boot_mac_address", boot_mac_address)
        pulumi.set(__self__, "machine_details", machine_details)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "machine_sku_id", machine_sku_id)
        pulumi.set(__self__, "rack_id", rack_id)
        pulumi.set(__self__, "rack_slot", rack_slot)
        pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="bmcConnectionString")
    def bmc_connection_string(self) -> pulumi.Input[str]:
        """
        The connection string for the baseboard management controller including IP address and protocol.
        """
        return pulumi.get(self, "bmc_connection_string")

    @bmc_connection_string.setter
    def bmc_connection_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "bmc_connection_string", value)

    @property
    @pulumi.getter(name="bmcCredentials")
    def bmc_credentials(self) -> pulumi.Input['AdministrativeCredentialsArgs']:
        return pulumi.get(self, "bmc_credentials")

    @bmc_credentials.setter
    def bmc_credentials(self, value: pulumi.Input['AdministrativeCredentialsArgs']):
        pulumi.set(self, "bmc_credentials", value)

    @property
    @pulumi.getter(name="bmcMacAddress")
    def bmc_mac_address(self) -> pulumi.Input[str]:
        """
        The MAC address of the BMC device.
        """
        return pulumi.get(self, "bmc_mac_address")

    @bmc_mac_address.setter
    def bmc_mac_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "bmc_mac_address", value)

    @property
    @pulumi.getter(name="bootMacAddress")
    def boot_mac_address(self) -> pulumi.Input[str]:
        """
        The MAC address of a NIC connected to the PXE network.
        """
        return pulumi.get(self, "boot_mac_address")

    @boot_mac_address.setter
    def boot_mac_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "boot_mac_address", value)

    @property
    @pulumi.getter(name="machineDetails")
    def machine_details(self) -> pulumi.Input[str]:
        """
        The custom details provided by the customer.
        """
        return pulumi.get(self, "machine_details")

    @machine_details.setter
    def machine_details(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_details", value)

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> pulumi.Input[str]:
        """
        The OS-level hostname assigned to this machine.
        """
        return pulumi.get(self, "machine_name")

    @machine_name.setter
    def machine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_name", value)

    @property
    @pulumi.getter(name="machineSkuId")
    def machine_sku_id(self) -> pulumi.Input[str]:
        """
        The unique internal identifier of the bare metal machine SKU.
        """
        return pulumi.get(self, "machine_sku_id")

    @machine_sku_id.setter
    def machine_sku_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_sku_id", value)

    @property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the rack where this bare metal machine resides.
        """
        return pulumi.get(self, "rack_id")

    @rack_id.setter
    def rack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_id", value)

    @property
    @pulumi.getter(name="rackSlot")
    def rack_slot(self) -> pulumi.Input[float]:
        """
        The rack slot in which this bare metal machine is located, ordered from the bottom up i.e. the lowest slot is 1.
        """
        return pulumi.get(self, "rack_slot")

    @rack_slot.setter
    def rack_slot(self, value: pulumi.Input[float]):
        pulumi.set(self, "rack_slot", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Input[str]:
        """
        The serial number of the bare metal machine.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "serial_number", value)


@pulumi.input_type
class BgpPeerArgs:
    def __init__(__self__, *,
                 as_number: pulumi.Input[float],
                 peer_ip: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] as_number: The ASN (Autonomous System Number) of the BGP peer.
        :param pulumi.Input[str] peer_ip: The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
        :param pulumi.Input[str] password: The password for this peering neighbor. It defaults to no password if not specified.
        """
        pulumi.set(__self__, "as_number", as_number)
        pulumi.set(__self__, "peer_ip", peer_ip)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="asNumber")
    def as_number(self) -> pulumi.Input[float]:
        """
        The ASN (Autonomous System Number) of the BGP peer.
        """
        return pulumi.get(self, "as_number")

    @as_number.setter
    def as_number(self, value: pulumi.Input[float]):
        pulumi.set(self, "as_number", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> pulumi.Input[str]:
        """
        The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
        """
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_ip", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for this peering neighbor. It defaults to no password if not specified.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class BmcKeySetPropertiesArgs:
    def __init__(__self__, *,
                 azure_group_id: pulumi.Input[str],
                 expiration: pulumi.Input[str],
                 privilege_level: pulumi.Input[Union[str, 'BmcKeySetPrivilegeLevel']],
                 user_list: pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]]):
        """
        :param pulumi.Input[str] azure_group_id: The object ID of Azure Active Directory group that all users in the list must be in for access to be granted. Users that are not in the group will not have access.
        :param pulumi.Input[str] expiration: The date and time after which the users in this key set will be removed from the baseboard management controllers.
        :param pulumi.Input[Union[str, 'BmcKeySetPrivilegeLevel']] privilege_level: The access level allowed for the users in this key set.
        :param pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]] user_list: The unique list of permitted users.
        """
        pulumi.set(__self__, "azure_group_id", azure_group_id)
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "privilege_level", privilege_level)
        pulumi.set(__self__, "user_list", user_list)

    @property
    @pulumi.getter(name="azureGroupId")
    def azure_group_id(self) -> pulumi.Input[str]:
        """
        The object ID of Azure Active Directory group that all users in the list must be in for access to be granted. Users that are not in the group will not have access.
        """
        return pulumi.get(self, "azure_group_id")

    @azure_group_id.setter
    def azure_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_group_id", value)

    @property
    @pulumi.getter
    def expiration(self) -> pulumi.Input[str]:
        """
        The date and time after which the users in this key set will be removed from the baseboard management controllers.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: pulumi.Input[str]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> pulumi.Input[Union[str, 'BmcKeySetPrivilegeLevel']]:
        """
        The access level allowed for the users in this key set.
        """
        return pulumi.get(self, "privilege_level")

    @privilege_level.setter
    def privilege_level(self, value: pulumi.Input[Union[str, 'BmcKeySetPrivilegeLevel']]):
        pulumi.set(self, "privilege_level", value)

    @property
    @pulumi.getter(name="userList")
    def user_list(self) -> pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]]:
        """
        The unique list of permitted users.
        """
        return pulumi.get(self, "user_list")

    @user_list.setter
    def user_list(self, value: pulumi.Input[Sequence[pulumi.Input['KeySetUserArgs']]]):
        pulumi.set(self, "user_list", value)


@pulumi.input_type
class ClusterCapacityArgs:
    def __init__(__self__, *,
                 available_appliance_storage_gb: Optional[pulumi.Input[float]] = None,
                 available_core_count: Optional[pulumi.Input[float]] = None,
                 available_host_storage_gb: Optional[pulumi.Input[float]] = None,
                 available_memory_gb: Optional[pulumi.Input[float]] = None,
                 total_appliance_storage_gb: Optional[pulumi.Input[float]] = None,
                 total_core_count: Optional[pulumi.Input[float]] = None,
                 total_host_storage_gb: Optional[pulumi.Input[float]] = None,
                 total_memory_gb: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] available_appliance_storage_gb: The remaining appliance-based storage in GB available for workload use.
        :param pulumi.Input[float] available_core_count: The remaining number of cores that are available in this cluster for workload use.
        :param pulumi.Input[float] available_host_storage_gb: The remaining machine or host-based storage in GB available for workload use.
        :param pulumi.Input[float] available_memory_gb: The remaining memory in GB that are available in this cluster for workload use.
        :param pulumi.Input[float] total_appliance_storage_gb: The total appliance-based storage in GB supported by this cluster for workload use.
        :param pulumi.Input[float] total_core_count: The total number of cores that are supported by this cluster for workload use.
        :param pulumi.Input[float] total_host_storage_gb: The total machine or host-based storage in GB supported by this cluster for workload use.
        :param pulumi.Input[float] total_memory_gb: The total memory supported by this cluster for workload use.
        """
        if available_appliance_storage_gb is not None:
            pulumi.set(__self__, "available_appliance_storage_gb", available_appliance_storage_gb)
        if available_core_count is not None:
            pulumi.set(__self__, "available_core_count", available_core_count)
        if available_host_storage_gb is not None:
            pulumi.set(__self__, "available_host_storage_gb", available_host_storage_gb)
        if available_memory_gb is not None:
            pulumi.set(__self__, "available_memory_gb", available_memory_gb)
        if total_appliance_storage_gb is not None:
            pulumi.set(__self__, "total_appliance_storage_gb", total_appliance_storage_gb)
        if total_core_count is not None:
            pulumi.set(__self__, "total_core_count", total_core_count)
        if total_host_storage_gb is not None:
            pulumi.set(__self__, "total_host_storage_gb", total_host_storage_gb)
        if total_memory_gb is not None:
            pulumi.set(__self__, "total_memory_gb", total_memory_gb)

    @property
    @pulumi.getter(name="availableApplianceStorageGB")
    def available_appliance_storage_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The remaining appliance-based storage in GB available for workload use.
        """
        return pulumi.get(self, "available_appliance_storage_gb")

    @available_appliance_storage_gb.setter
    def available_appliance_storage_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "available_appliance_storage_gb", value)

    @property
    @pulumi.getter(name="availableCoreCount")
    def available_core_count(self) -> Optional[pulumi.Input[float]]:
        """
        The remaining number of cores that are available in this cluster for workload use.
        """
        return pulumi.get(self, "available_core_count")

    @available_core_count.setter
    def available_core_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "available_core_count", value)

    @property
    @pulumi.getter(name="availableHostStorageGB")
    def available_host_storage_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The remaining machine or host-based storage in GB available for workload use.
        """
        return pulumi.get(self, "available_host_storage_gb")

    @available_host_storage_gb.setter
    def available_host_storage_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "available_host_storage_gb", value)

    @property
    @pulumi.getter(name="availableMemoryGB")
    def available_memory_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The remaining memory in GB that are available in this cluster for workload use.
        """
        return pulumi.get(self, "available_memory_gb")

    @available_memory_gb.setter
    def available_memory_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "available_memory_gb", value)

    @property
    @pulumi.getter(name="totalApplianceStorageGB")
    def total_appliance_storage_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The total appliance-based storage in GB supported by this cluster for workload use.
        """
        return pulumi.get(self, "total_appliance_storage_gb")

    @total_appliance_storage_gb.setter
    def total_appliance_storage_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_appliance_storage_gb", value)

    @property
    @pulumi.getter(name="totalCoreCount")
    def total_core_count(self) -> Optional[pulumi.Input[float]]:
        """
        The total number of cores that are supported by this cluster for workload use.
        """
        return pulumi.get(self, "total_core_count")

    @total_core_count.setter
    def total_core_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_core_count", value)

    @property
    @pulumi.getter(name="totalHostStorageGB")
    def total_host_storage_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The total machine or host-based storage in GB supported by this cluster for workload use.
        """
        return pulumi.get(self, "total_host_storage_gb")

    @total_host_storage_gb.setter
    def total_host_storage_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_host_storage_gb", value)

    @property
    @pulumi.getter(name="totalMemoryGB")
    def total_memory_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The total memory supported by this cluster for workload use.
        """
        return pulumi.get(self, "total_memory_gb")

    @total_memory_gb.setter
    def total_memory_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_memory_gb", value)


@pulumi.input_type
class ClusterManagerPropertiesArgs:
    def __init__(__self__, *,
                 fabric_controller_id: pulumi.Input[str],
                 analytics_workspace_id: Optional[pulumi.Input[str]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 managed_resource_group_configuration: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] fabric_controller_id: The resource ID of the fabric controller that has one to one mapping with the cluster manager.
        :param pulumi.Input[str] analytics_workspace_id: The resource ID of the Log Analytics workspace that is used for the logs collection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zones: Field deprecated, this value will no longer influence the cluster manager allocation process and will be removed in a future version. The Azure availability zones within the region that will be used to support the cluster manager resource.
        :param pulumi.Input['ManagedResourceGroupConfigurationArgs'] managed_resource_group_configuration: The configuration of the managed resource group associated with the resource.
        :param pulumi.Input[str] vm_size: Field deprecated, this value will no longer influence the cluster manager allocation process and will be removed in a future version. The size of the Azure virtual machines to use for hosting the cluster manager resource.
        """
        pulumi.set(__self__, "fabric_controller_id", fabric_controller_id)
        if analytics_workspace_id is not None:
            pulumi.set(__self__, "analytics_workspace_id", analytics_workspace_id)
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)
        if vm_size is not None:
            pulumi.set(__self__, "vm_size", vm_size)

    @property
    @pulumi.getter(name="fabricControllerId")
    def fabric_controller_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the fabric controller that has one to one mapping with the cluster manager.
        """
        return pulumi.get(self, "fabric_controller_id")

    @fabric_controller_id.setter
    def fabric_controller_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric_controller_id", value)

    @property
    @pulumi.getter(name="analyticsWorkspaceId")
    def analytics_workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the Log Analytics workspace that is used for the logs collection.
        """
        return pulumi.get(self, "analytics_workspace_id")

    @analytics_workspace_id.setter
    def analytics_workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "analytics_workspace_id", value)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Field deprecated, this value will no longer influence the cluster manager allocation process and will be removed in a future version. The Azure availability zones within the region that will be used to support the cluster manager resource.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]:
        """
        The configuration of the managed resource group associated with the resource.
        """
        return pulumi.get(self, "managed_resource_group_configuration")

    @managed_resource_group_configuration.setter
    def managed_resource_group_configuration(self, value: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]):
        pulumi.set(self, "managed_resource_group_configuration", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        Field deprecated, this value will no longer influence the cluster manager allocation process and will be removed in a future version. The size of the Azure virtual machines to use for hosting the cluster manager resource.
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class ClusterMetricsConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 collection_interval: pulumi.Input[float],
                 enabled_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] collection_interval: The interval in minutes by which metrics will be collected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_metrics: The list of metric names that have been chosen to be enabled in addition to the core set of enabled metrics.
        """
        pulumi.set(__self__, "collection_interval", collection_interval)
        if enabled_metrics is not None:
            pulumi.set(__self__, "enabled_metrics", enabled_metrics)

    @property
    @pulumi.getter(name="collectionInterval")
    def collection_interval(self) -> pulumi.Input[float]:
        """
        The interval in minutes by which metrics will be collected.
        """
        return pulumi.get(self, "collection_interval")

    @collection_interval.setter
    def collection_interval(self, value: pulumi.Input[float]):
        pulumi.set(self, "collection_interval", value)

    @property
    @pulumi.getter(name="enabledMetrics")
    def enabled_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of metric names that have been chosen to be enabled in addition to the core set of enabled metrics.
        """
        return pulumi.get(self, "enabled_metrics")

    @enabled_metrics.setter
    def enabled_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enabled_metrics", value)


@pulumi.input_type
class ClusterPropertiesArgs:
    def __init__(__self__, *,
                 aggregator_or_single_rack_definition: pulumi.Input['RackDefinitionArgs'],
                 analytics_workspace_id: pulumi.Input[str],
                 cluster_type: pulumi.Input[Union[str, 'ClusterType']],
                 cluster_version: pulumi.Input[str],
                 network_fabric_id: pulumi.Input[str],
                 cluster_capacity: Optional[pulumi.Input['ClusterCapacityArgs']] = None,
                 cluster_location: Optional[pulumi.Input[str]] = None,
                 cluster_service_principal: Optional[pulumi.Input['ServicePrincipalInformationArgs']] = None,
                 compute_deployment_threshold: Optional[pulumi.Input['ValidationThresholdArgs']] = None,
                 compute_rack_definitions: Optional[pulumi.Input[Sequence[pulumi.Input['RackDefinitionArgs']]]] = None,
                 managed_resource_group_configuration: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] analytics_workspace_id: The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
        :param pulumi.Input[Union[str, 'ClusterType']] cluster_type: The type of rack configuration for the cluster.
        :param pulumi.Input[str] cluster_version: The current runtime version of the cluster.
        :param pulumi.Input[str] network_fabric_id: The resource ID of the Network Fabric associated with the cluster.
        :param pulumi.Input[str] cluster_location: The customer-provided location information to identify where the cluster resides.
        :param pulumi.Input[Sequence[pulumi.Input['RackDefinitionArgs']]] compute_rack_definitions: The list of rack definitions for the compute racks in a multi-rack
               cluster, or an empty list in a single-rack cluster.
        :param pulumi.Input['ManagedResourceGroupConfigurationArgs'] managed_resource_group_configuration: The configuration of the managed resource group associated with the resource.
        """
        pulumi.set(__self__, "aggregator_or_single_rack_definition", aggregator_or_single_rack_definition)
        pulumi.set(__self__, "analytics_workspace_id", analytics_workspace_id)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "network_fabric_id", network_fabric_id)
        if cluster_capacity is not None:
            pulumi.set(__self__, "cluster_capacity", cluster_capacity)
        if cluster_location is not None:
            pulumi.set(__self__, "cluster_location", cluster_location)
        if cluster_service_principal is not None:
            pulumi.set(__self__, "cluster_service_principal", cluster_service_principal)
        if compute_deployment_threshold is not None:
            pulumi.set(__self__, "compute_deployment_threshold", compute_deployment_threshold)
        if compute_rack_definitions is not None:
            pulumi.set(__self__, "compute_rack_definitions", compute_rack_definitions)
        if managed_resource_group_configuration is not None:
            pulumi.set(__self__, "managed_resource_group_configuration", managed_resource_group_configuration)

    @property
    @pulumi.getter(name="aggregatorOrSingleRackDefinition")
    def aggregator_or_single_rack_definition(self) -> pulumi.Input['RackDefinitionArgs']:
        return pulumi.get(self, "aggregator_or_single_rack_definition")

    @aggregator_or_single_rack_definition.setter
    def aggregator_or_single_rack_definition(self, value: pulumi.Input['RackDefinitionArgs']):
        pulumi.set(self, "aggregator_or_single_rack_definition", value)

    @property
    @pulumi.getter(name="analyticsWorkspaceId")
    def analytics_workspace_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
        """
        return pulumi.get(self, "analytics_workspace_id")

    @analytics_workspace_id.setter
    def analytics_workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "analytics_workspace_id", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[Union[str, 'ClusterType']]:
        """
        The type of rack configuration for the cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[Union[str, 'ClusterType']]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Input[str]:
        """
        The current runtime version of the cluster.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="networkFabricId")
    def network_fabric_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Network Fabric associated with the cluster.
        """
        return pulumi.get(self, "network_fabric_id")

    @network_fabric_id.setter
    def network_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_fabric_id", value)

    @property
    @pulumi.getter(name="clusterCapacity")
    def cluster_capacity(self) -> Optional[pulumi.Input['ClusterCapacityArgs']]:
        return pulumi.get(self, "cluster_capacity")

    @cluster_capacity.setter
    def cluster_capacity(self, value: Optional[pulumi.Input['ClusterCapacityArgs']]):
        pulumi.set(self, "cluster_capacity", value)

    @property
    @pulumi.getter(name="clusterLocation")
    def cluster_location(self) -> Optional[pulumi.Input[str]]:
        """
        The customer-provided location information to identify where the cluster resides.
        """
        return pulumi.get(self, "cluster_location")

    @cluster_location.setter
    def cluster_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_location", value)

    @property
    @pulumi.getter(name="clusterServicePrincipal")
    def cluster_service_principal(self) -> Optional[pulumi.Input['ServicePrincipalInformationArgs']]:
        return pulumi.get(self, "cluster_service_principal")

    @cluster_service_principal.setter
    def cluster_service_principal(self, value: Optional[pulumi.Input['ServicePrincipalInformationArgs']]):
        pulumi.set(self, "cluster_service_principal", value)

    @property
    @pulumi.getter(name="computeDeploymentThreshold")
    def compute_deployment_threshold(self) -> Optional[pulumi.Input['ValidationThresholdArgs']]:
        return pulumi.get(self, "compute_deployment_threshold")

    @compute_deployment_threshold.setter
    def compute_deployment_threshold(self, value: Optional[pulumi.Input['ValidationThresholdArgs']]):
        pulumi.set(self, "compute_deployment_threshold", value)

    @property
    @pulumi.getter(name="computeRackDefinitions")
    def compute_rack_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RackDefinitionArgs']]]]:
        """
        The list of rack definitions for the compute racks in a multi-rack
        cluster, or an empty list in a single-rack cluster.
        """
        return pulumi.get(self, "compute_rack_definitions")

    @compute_rack_definitions.setter
    def compute_rack_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RackDefinitionArgs']]]]):
        pulumi.set(self, "compute_rack_definitions", value)

    @property
    @pulumi.getter(name="managedResourceGroupConfiguration")
    def managed_resource_group_configuration(self) -> Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]:
        """
        The configuration of the managed resource group associated with the resource.
        """
        return pulumi.get(self, "managed_resource_group_configuration")

    @managed_resource_group_configuration.setter
    def managed_resource_group_configuration(self, value: Optional[pulumi.Input['ManagedResourceGroupConfigurationArgs']]):
        pulumi.set(self, "managed_resource_group_configuration", value)


@pulumi.input_type
class CniBgpConfigurationArgs:
    def __init__(__self__, *,
                 bgp_peers: Optional[pulumi.Input[Sequence[pulumi.Input['BgpPeerArgs']]]] = None,
                 community_advertisements: Optional[pulumi.Input[Sequence[pulumi.Input['CommunityAdvertisementArgs']]]] = None,
                 node_mesh_password: Optional[pulumi.Input[str]] = None,
                 service_external_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_load_balancer_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BgpPeerArgs']]] bgp_peers: The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
        :param pulumi.Input[Sequence[pulumi.Input['CommunityAdvertisementArgs']]] community_advertisements: The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
               communities that should be associated with that prefix when it is announced.
        :param pulumi.Input[str] node_mesh_password: The password of the Calico node mesh. It defaults to a randomly-generated string when not provided.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_external_prefixes: The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_load_balancer_prefixes: The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
               are within one of these blocks.
        """
        if bgp_peers is not None:
            pulumi.set(__self__, "bgp_peers", bgp_peers)
        if community_advertisements is not None:
            pulumi.set(__self__, "community_advertisements", community_advertisements)
        if node_mesh_password is not None:
            pulumi.set(__self__, "node_mesh_password", node_mesh_password)
        if service_external_prefixes is not None:
            pulumi.set(__self__, "service_external_prefixes", service_external_prefixes)
        if service_load_balancer_prefixes is not None:
            pulumi.set(__self__, "service_load_balancer_prefixes", service_load_balancer_prefixes)

    @property
    @pulumi.getter(name="bgpPeers")
    def bgp_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpPeerArgs']]]]:
        """
        The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
        """
        return pulumi.get(self, "bgp_peers")

    @bgp_peers.setter
    def bgp_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpPeerArgs']]]]):
        pulumi.set(self, "bgp_peers", value)

    @property
    @pulumi.getter(name="communityAdvertisements")
    def community_advertisements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommunityAdvertisementArgs']]]]:
        """
        The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
        communities that should be associated with that prefix when it is announced.
        """
        return pulumi.get(self, "community_advertisements")

    @community_advertisements.setter
    def community_advertisements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommunityAdvertisementArgs']]]]):
        pulumi.set(self, "community_advertisements", value)

    @property
    @pulumi.getter(name="nodeMeshPassword")
    def node_mesh_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the Calico node mesh. It defaults to a randomly-generated string when not provided.
        """
        return pulumi.get(self, "node_mesh_password")

    @node_mesh_password.setter
    def node_mesh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_mesh_password", value)

    @property
    @pulumi.getter(name="serviceExternalPrefixes")
    def service_external_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
        """
        return pulumi.get(self, "service_external_prefixes")

    @service_external_prefixes.setter
    def service_external_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_external_prefixes", value)

    @property
    @pulumi.getter(name="serviceLoadBalancerPrefixes")
    def service_load_balancer_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
        are within one of these blocks.
        """
        return pulumi.get(self, "service_load_balancer_prefixes")

    @service_load_balancer_prefixes.setter
    def service_load_balancer_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_load_balancer_prefixes", value)


@pulumi.input_type
class CommunityAdvertisementArgs:
    def __init__(__self__, *,
                 communities: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_prefix: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] communities: The list of community strings to announce with this prefix.
        :param pulumi.Input[str] subnet_prefix: The subnet in CIDR format for which properties should be advertised.
        """
        pulumi.set(__self__, "communities", communities)
        pulumi.set(__self__, "subnet_prefix", subnet_prefix)

    @property
    @pulumi.getter
    def communities(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of community strings to announce with this prefix.
        """
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter(name="subnetPrefix")
    def subnet_prefix(self) -> pulumi.Input[str]:
        """
        The subnet in CIDR format for which properties should be advertised.
        """
        return pulumi.get(self, "subnet_prefix")

    @subnet_prefix.setter
    def subnet_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_prefix", value)


@pulumi.input_type
class ConsolePropertiesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[Union[str, 'ConsoleEnabled']],
                 ssh_public_key: pulumi.Input['SshPublicKeyArgs'],
                 expiration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Union[str, 'ConsoleEnabled']] enabled: The indicator of whether the console access is enabled.
        :param pulumi.Input[str] expiration: The date and time after which the key will be disallowed access.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[Union[str, 'ConsoleEnabled']]:
        """
        The indicator of whether the console access is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[Union[str, 'ConsoleEnabled']]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Input['SshPublicKeyArgs']:
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: pulumi.Input['SshPublicKeyArgs']):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time after which the key will be disallowed access.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration", value)


@pulumi.input_type
class DefaultCniNetworkPropertiesArgs:
    def __init__(__self__, *,
                 l3_isolation_domain_id: pulumi.Input[str],
                 vlan: pulumi.Input[float],
                 cni_bgp_configuration: Optional[pulumi.Input['CniBgpConfigurationArgs']] = None,
                 ip_allocation_type: Optional[pulumi.Input[Union[str, 'IpAllocationType']]] = None,
                 ipv4_connected_prefix: Optional[pulumi.Input[str]] = None,
                 ipv6_connected_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] l3_isolation_domain_id: The resource ID of the Network Fabric l3IsolationDomain.
        :param pulumi.Input[float] vlan: The VLAN from the l3IsolationDomain that is used for this network.
        :param pulumi.Input[Union[str, 'IpAllocationType']] ip_allocation_type: The type of the IP address allocation.
        :param pulumi.Input[str] ipv4_connected_prefix: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
               is IPV4 or DualStack.
        :param pulumi.Input[str] ipv6_connected_prefix: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
               is IPV6 or DualStack.
        """
        pulumi.set(__self__, "l3_isolation_domain_id", l3_isolation_domain_id)
        pulumi.set(__self__, "vlan", vlan)
        if cni_bgp_configuration is not None:
            pulumi.set(__self__, "cni_bgp_configuration", cni_bgp_configuration)
        if ip_allocation_type is None:
            ip_allocation_type = 'DualStack'
        if ip_allocation_type is not None:
            pulumi.set(__self__, "ip_allocation_type", ip_allocation_type)
        if ipv4_connected_prefix is not None:
            pulumi.set(__self__, "ipv4_connected_prefix", ipv4_connected_prefix)
        if ipv6_connected_prefix is not None:
            pulumi.set(__self__, "ipv6_connected_prefix", ipv6_connected_prefix)

    @property
    @pulumi.getter(name="l3IsolationDomainId")
    def l3_isolation_domain_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Network Fabric l3IsolationDomain.
        """
        return pulumi.get(self, "l3_isolation_domain_id")

    @l3_isolation_domain_id.setter
    def l3_isolation_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "l3_isolation_domain_id", value)

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Input[float]:
        """
        The VLAN from the l3IsolationDomain that is used for this network.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: pulumi.Input[float]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="cniBgpConfiguration")
    def cni_bgp_configuration(self) -> Optional[pulumi.Input['CniBgpConfigurationArgs']]:
        return pulumi.get(self, "cni_bgp_configuration")

    @cni_bgp_configuration.setter
    def cni_bgp_configuration(self, value: Optional[pulumi.Input['CniBgpConfigurationArgs']]):
        pulumi.set(self, "cni_bgp_configuration", value)

    @property
    @pulumi.getter(name="ipAllocationType")
    def ip_allocation_type(self) -> Optional[pulumi.Input[Union[str, 'IpAllocationType']]]:
        """
        The type of the IP address allocation.
        """
        return pulumi.get(self, "ip_allocation_type")

    @ip_allocation_type.setter
    def ip_allocation_type(self, value: Optional[pulumi.Input[Union[str, 'IpAllocationType']]]):
        pulumi.set(self, "ip_allocation_type", value)

    @property
    @pulumi.getter(name="ipv4ConnectedPrefix")
    def ipv4_connected_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
        is IPV4 or DualStack.
        """
        return pulumi.get(self, "ipv4_connected_prefix")

    @ipv4_connected_prefix.setter
    def ipv4_connected_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_connected_prefix", value)

    @property
    @pulumi.getter(name="ipv6ConnectedPrefix")
    def ipv6_connected_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
        is IPV6 or DualStack.
        """
        return pulumi.get(self, "ipv6_connected_prefix")

    @ipv6_connected_prefix.setter
    def ipv6_connected_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_connected_prefix", value)


@pulumi.input_type
class EgressEndpointArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 endpoints: pulumi.Input[Sequence[pulumi.Input['EndpointDependencyArgs']]]):
        """
        :param pulumi.Input[str] category: The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointDependencyArgs']]] endpoints: The list of endpoint dependencies.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "endpoints", endpoints)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointDependencyArgs']]]:
        """
        The list of endpoint dependencies.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointDependencyArgs']]]):
        pulumi.set(self, "endpoints", value)


@pulumi.input_type
class EndpointDependencyArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 port: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] domain_name: The domain name of the dependency.
        :param pulumi.Input[float] port: The port of this endpoint.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        The domain name of the dependency.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The port of this endpoint.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ExtendedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The resource ID of the extended location on which the resource will be created.
        :param pulumi.Input[str] type: The extended location type, for example, CustomLocation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The resource ID of the extended location on which the resource will be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The extended location type, for example, CustomLocation.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class HybridAksClusterPropertiesArgs:
    def __init__(__self__, *,
                 associated_network_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 control_plane_count: pulumi.Input[float],
                 hybrid_aks_provisioned_cluster_id: pulumi.Input[str],
                 worker_count: pulumi.Input[float]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_network_ids: The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork.
        :param pulumi.Input[float] control_plane_count: The number of control plane node VMs.
        :param pulumi.Input[str] hybrid_aks_provisioned_cluster_id: The resource ID of the Hybrid AKS cluster that this additional information is for.
        :param pulumi.Input[float] worker_count: The number of worker node VMs.
        """
        pulumi.set(__self__, "associated_network_ids", associated_network_ids)
        pulumi.set(__self__, "control_plane_count", control_plane_count)
        pulumi.set(__self__, "hybrid_aks_provisioned_cluster_id", hybrid_aks_provisioned_cluster_id)
        pulumi.set(__self__, "worker_count", worker_count)

    @property
    @pulumi.getter(name="associatedNetworkIds")
    def associated_network_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork.
        """
        return pulumi.get(self, "associated_network_ids")

    @associated_network_ids.setter
    def associated_network_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "associated_network_ids", value)

    @property
    @pulumi.getter(name="controlPlaneCount")
    def control_plane_count(self) -> pulumi.Input[float]:
        """
        The number of control plane node VMs.
        """
        return pulumi.get(self, "control_plane_count")

    @control_plane_count.setter
    def control_plane_count(self, value: pulumi.Input[float]):
        pulumi.set(self, "control_plane_count", value)

    @property
    @pulumi.getter(name="hybridAksProvisionedClusterId")
    def hybrid_aks_provisioned_cluster_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Hybrid AKS cluster that this additional information is for.
        """
        return pulumi.get(self, "hybrid_aks_provisioned_cluster_id")

    @hybrid_aks_provisioned_cluster_id.setter
    def hybrid_aks_provisioned_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hybrid_aks_provisioned_cluster_id", value)

    @property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Input[float]:
        """
        The number of worker node VMs.
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: pulumi.Input[float]):
        pulumi.set(self, "worker_count", value)


@pulumi.input_type
class ImageRepositoryCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 registry_url: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password or token used to access an image in the target repository.
        :param pulumi.Input[str] registry_url: The URL of the authentication server used to validate the repository credentials.
        :param pulumi.Input[str] username: The username used to access an image in the target repository.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "registry_url", registry_url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password or token used to access an image in the target repository.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="registryUrl")
    def registry_url(self) -> pulumi.Input[str]:
        """
        The URL of the authentication server used to validate the repository credentials.
        """
        return pulumi.get(self, "registry_url")

    @registry_url.setter
    def registry_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry_url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username used to access an image in the target repository.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class KeySetUserArgs:
    def __init__(__self__, *,
                 azure_user_name: pulumi.Input[str],
                 ssh_public_key: pulumi.Input['SshPublicKeyArgs'],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] azure_user_name: The Azure Active Directory user name (email name).
        :param pulumi.Input[str] description: The free-form description for this user.
        """
        pulumi.set(__self__, "azure_user_name", azure_user_name)
        pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="azureUserName")
    def azure_user_name(self) -> pulumi.Input[str]:
        """
        The Azure Active Directory user name (email name).
        """
        return pulumi.get(self, "azure_user_name")

    @azure_user_name.setter
    def azure_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_user_name", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Input['SshPublicKeyArgs']:
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: pulumi.Input['SshPublicKeyArgs']):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The free-form description for this user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class L2NetworkPropertiesArgs:
    def __init__(__self__, *,
                 l2_isolation_domain_id: pulumi.Input[str],
                 hybrid_aks_plugin_type: Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]] = None,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] l2_isolation_domain_id: The resource ID of the Network Fabric l2IsolationDomain.
        :param pulumi.Input[Union[str, 'HybridAksPluginType']] hybrid_aks_plugin_type: The network plugin type for Hybrid AKS.
        :param pulumi.Input[str] interface_name: The default interface name for this L2 network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine.
        """
        pulumi.set(__self__, "l2_isolation_domain_id", l2_isolation_domain_id)
        if hybrid_aks_plugin_type is None:
            hybrid_aks_plugin_type = 'SRIOV'
        if hybrid_aks_plugin_type is not None:
            pulumi.set(__self__, "hybrid_aks_plugin_type", hybrid_aks_plugin_type)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="l2IsolationDomainId")
    def l2_isolation_domain_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Network Fabric l2IsolationDomain.
        """
        return pulumi.get(self, "l2_isolation_domain_id")

    @l2_isolation_domain_id.setter
    def l2_isolation_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "l2_isolation_domain_id", value)

    @property
    @pulumi.getter(name="hybridAksPluginType")
    def hybrid_aks_plugin_type(self) -> Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]]:
        """
        The network plugin type for Hybrid AKS.
        """
        return pulumi.get(self, "hybrid_aks_plugin_type")

    @hybrid_aks_plugin_type.setter
    def hybrid_aks_plugin_type(self, value: Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]]):
        pulumi.set(self, "hybrid_aks_plugin_type", value)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        The default interface name for this L2 network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class L3NetworkPropertiesArgs:
    def __init__(__self__, *,
                 l3_isolation_domain_id: pulumi.Input[str],
                 vlan: pulumi.Input[float],
                 hybrid_aks_ipam_enabled: Optional[pulumi.Input[Union[str, 'HybridAksIpamEnabled']]] = None,
                 hybrid_aks_plugin_type: Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]] = None,
                 interface_name: Optional[pulumi.Input[str]] = None,
                 ip_allocation_type: Optional[pulumi.Input[Union[str, 'IpAllocationType']]] = None,
                 ipv4_connected_prefix: Optional[pulumi.Input[str]] = None,
                 ipv6_connected_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] l3_isolation_domain_id: The resource ID of the Network Fabric l3IsolationDomain.
        :param pulumi.Input[float] vlan: The VLAN from the l3IsolationDomain that is used for this network.
        :param pulumi.Input[Union[str, 'HybridAksIpamEnabled']] hybrid_aks_ipam_enabled: The indicator of whether or not to disable IPAM allocation on the network attachment definition injected into the Hybrid AKS Cluster.
        :param pulumi.Input[Union[str, 'HybridAksPluginType']] hybrid_aks_plugin_type: The network plugin type for Hybrid AKS.
        :param pulumi.Input[str] interface_name: The default interface name for this L3 network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine.
        :param pulumi.Input[Union[str, 'IpAllocationType']] ip_allocation_type: The type of the IP address allocation, defaulted to "DualStack".
        :param pulumi.Input[str] ipv4_connected_prefix: The IPV4 prefix (CIDR) assigned to this L3 network. Required when the IP allocation type
               is IPV4 or DualStack.
        :param pulumi.Input[str] ipv6_connected_prefix: The IPV6 prefix (CIDR) assigned to this L3 network. Required when the IP allocation type
               is IPV6 or DualStack.
        """
        pulumi.set(__self__, "l3_isolation_domain_id", l3_isolation_domain_id)
        pulumi.set(__self__, "vlan", vlan)
        if hybrid_aks_ipam_enabled is None:
            hybrid_aks_ipam_enabled = 'True'
        if hybrid_aks_ipam_enabled is not None:
            pulumi.set(__self__, "hybrid_aks_ipam_enabled", hybrid_aks_ipam_enabled)
        if hybrid_aks_plugin_type is None:
            hybrid_aks_plugin_type = 'SRIOV'
        if hybrid_aks_plugin_type is not None:
            pulumi.set(__self__, "hybrid_aks_plugin_type", hybrid_aks_plugin_type)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if ip_allocation_type is None:
            ip_allocation_type = 'DualStack'
        if ip_allocation_type is not None:
            pulumi.set(__self__, "ip_allocation_type", ip_allocation_type)
        if ipv4_connected_prefix is not None:
            pulumi.set(__self__, "ipv4_connected_prefix", ipv4_connected_prefix)
        if ipv6_connected_prefix is not None:
            pulumi.set(__self__, "ipv6_connected_prefix", ipv6_connected_prefix)

    @property
    @pulumi.getter(name="l3IsolationDomainId")
    def l3_isolation_domain_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Network Fabric l3IsolationDomain.
        """
        return pulumi.get(self, "l3_isolation_domain_id")

    @l3_isolation_domain_id.setter
    def l3_isolation_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "l3_isolation_domain_id", value)

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Input[float]:
        """
        The VLAN from the l3IsolationDomain that is used for this network.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: pulumi.Input[float]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="hybridAksIpamEnabled")
    def hybrid_aks_ipam_enabled(self) -> Optional[pulumi.Input[Union[str, 'HybridAksIpamEnabled']]]:
        """
        The indicator of whether or not to disable IPAM allocation on the network attachment definition injected into the Hybrid AKS Cluster.
        """
        return pulumi.get(self, "hybrid_aks_ipam_enabled")

    @hybrid_aks_ipam_enabled.setter
    def hybrid_aks_ipam_enabled(self, value: Optional[pulumi.Input[Union[str, 'HybridAksIpamEnabled']]]):
        pulumi.set(self, "hybrid_aks_ipam_enabled", value)

    @property
    @pulumi.getter(name="hybridAksPluginType")
    def hybrid_aks_plugin_type(self) -> Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]]:
        """
        The network plugin type for Hybrid AKS.
        """
        return pulumi.get(self, "hybrid_aks_plugin_type")

    @hybrid_aks_plugin_type.setter
    def hybrid_aks_plugin_type(self, value: Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]]):
        pulumi.set(self, "hybrid_aks_plugin_type", value)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        The default interface name for this L3 network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)

    @property
    @pulumi.getter(name="ipAllocationType")
    def ip_allocation_type(self) -> Optional[pulumi.Input[Union[str, 'IpAllocationType']]]:
        """
        The type of the IP address allocation, defaulted to "DualStack".
        """
        return pulumi.get(self, "ip_allocation_type")

    @ip_allocation_type.setter
    def ip_allocation_type(self, value: Optional[pulumi.Input[Union[str, 'IpAllocationType']]]):
        pulumi.set(self, "ip_allocation_type", value)

    @property
    @pulumi.getter(name="ipv4ConnectedPrefix")
    def ipv4_connected_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The IPV4 prefix (CIDR) assigned to this L3 network. Required when the IP allocation type
        is IPV4 or DualStack.
        """
        return pulumi.get(self, "ipv4_connected_prefix")

    @ipv4_connected_prefix.setter
    def ipv4_connected_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_connected_prefix", value)

    @property
    @pulumi.getter(name="ipv6ConnectedPrefix")
    def ipv6_connected_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The IPV6 prefix (CIDR) assigned to this L3 network. Required when the IP allocation type
        is IPV6 or DualStack.
        """
        return pulumi.get(self, "ipv6_connected_prefix")

    @ipv6_connected_prefix.setter
    def ipv6_connected_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_connected_prefix", value)


@pulumi.input_type
class ManagedResourceGroupConfigurationArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] location: The location of the managed resource group. If not specified, the location of the parent resource is chosen.
        :param pulumi.Input[str] name: The name for the managed resource group. If not specified, the unique name is automatically generated.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the managed resource group. If not specified, the location of the parent resource is chosen.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the managed resource group. If not specified, the unique name is automatically generated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NetworkAttachmentArgs:
    def __init__(__self__, *,
                 attached_network_id: pulumi.Input[str],
                 ip_allocation_method: pulumi.Input[Union[str, 'VirtualMachineIPAllocationMethod']],
                 default_gateway: Optional[pulumi.Input[Union[str, 'DefaultGateway']]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv6_address: Optional[pulumi.Input[str]] = None,
                 network_attachment_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attached_network_id: The resource ID of the associated network attached to the virtual machine.
               It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
        :param pulumi.Input[Union[str, 'VirtualMachineIPAllocationMethod']] ip_allocation_method: The IP allocation mechanism for the virtual machine.
               Dynamic and Static are only valid for l3Network which may also specify Disabled.
               Otherwise, Disabled is the only permitted value.
        :param pulumi.Input[Union[str, 'DefaultGateway']] default_gateway: The indicator of whether this is the default gateway.
               Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
        :param pulumi.Input[str] ipv4_address: The IPv4 address of the virtual machine.
               
               This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
               
               If IPAllocationMethod is:
               Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
               Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
               Disabled - this field will be empty.
        :param pulumi.Input[str] ipv6_address: The IPv6 address of the virtual machine.
               
               This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
               
               If IPAllocationMethod is:
               Static - this field must contain an IPv6 address range from within the range specified in the attached network.
               Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
               Disabled - this field will be empty.
        :param pulumi.Input[str] network_attachment_name: The associated network's interface name.
               If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
               If the user doesn’t specify this value, the default interface name of the network resource will be used.
               For a CloudServicesNetwork resource, this name will be ignored.
        """
        pulumi.set(__self__, "attached_network_id", attached_network_id)
        pulumi.set(__self__, "ip_allocation_method", ip_allocation_method)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if network_attachment_name is not None:
            pulumi.set(__self__, "network_attachment_name", network_attachment_name)

    @property
    @pulumi.getter(name="attachedNetworkId")
    def attached_network_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the associated network attached to the virtual machine.
        It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
        """
        return pulumi.get(self, "attached_network_id")

    @attached_network_id.setter
    def attached_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "attached_network_id", value)

    @property
    @pulumi.getter(name="ipAllocationMethod")
    def ip_allocation_method(self) -> pulumi.Input[Union[str, 'VirtualMachineIPAllocationMethod']]:
        """
        The IP allocation mechanism for the virtual machine.
        Dynamic and Static are only valid for l3Network which may also specify Disabled.
        Otherwise, Disabled is the only permitted value.
        """
        return pulumi.get(self, "ip_allocation_method")

    @ip_allocation_method.setter
    def ip_allocation_method(self, value: pulumi.Input[Union[str, 'VirtualMachineIPAllocationMethod']]):
        pulumi.set(self, "ip_allocation_method", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[Union[str, 'DefaultGateway']]]:
        """
        The indicator of whether this is the default gateway.
        Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[Union[str, 'DefaultGateway']]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv4 address of the virtual machine.

        This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.

        If IPAllocationMethod is:
        Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
        Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
        Disabled - this field will be empty.
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv6 address of the virtual machine.

        This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.

        If IPAllocationMethod is:
        Static - this field must contain an IPv6 address range from within the range specified in the attached network.
        Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
        Disabled - this field will be empty.
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_address", value)

    @property
    @pulumi.getter(name="networkAttachmentName")
    def network_attachment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The associated network's interface name.
        If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
        If the user doesn’t specify this value, the default interface name of the network resource will be used.
        For a CloudServicesNetwork resource, this name will be ignored.
        """
        return pulumi.get(self, "network_attachment_name")

    @network_attachment_name.setter
    def network_attachment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_attachment_name", value)


@pulumi.input_type
class OsDiskArgs:
    def __init__(__self__, *,
                 disk_size_gb: pulumi.Input[float],
                 create_option: Optional[pulumi.Input[Union[str, 'OsDiskCreateOption']]] = None,
                 delete_option: Optional[pulumi.Input[Union[str, 'OsDiskDeleteOption']]] = None):
        """
        :param pulumi.Input[float] disk_size_gb: The size of the disk in gigabytes. Required if the createOption is Ephemeral.
        :param pulumi.Input[Union[str, 'OsDiskCreateOption']] create_option: The strategy for creating the OS disk.
        :param pulumi.Input[Union[str, 'OsDiskDeleteOption']] delete_option: The strategy for deleting the OS disk.
        """
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if create_option is None:
            create_option = 'Ephemeral'
        if create_option is not None:
            pulumi.set(__self__, "create_option", create_option)
        if delete_option is None:
            delete_option = 'Delete'
        if delete_option is not None:
            pulumi.set(__self__, "delete_option", delete_option)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[float]:
        """
        The size of the disk in gigabytes. Required if the createOption is Ephemeral.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="createOption")
    def create_option(self) -> Optional[pulumi.Input[Union[str, 'OsDiskCreateOption']]]:
        """
        The strategy for creating the OS disk.
        """
        return pulumi.get(self, "create_option")

    @create_option.setter
    def create_option(self, value: Optional[pulumi.Input[Union[str, 'OsDiskCreateOption']]]):
        pulumi.set(self, "create_option", value)

    @property
    @pulumi.getter(name="deleteOption")
    def delete_option(self) -> Optional[pulumi.Input[Union[str, 'OsDiskDeleteOption']]]:
        """
        The strategy for deleting the OS disk.
        """
        return pulumi.get(self, "delete_option")

    @delete_option.setter
    def delete_option(self, value: Optional[pulumi.Input[Union[str, 'OsDiskDeleteOption']]]):
        pulumi.set(self, "delete_option", value)


@pulumi.input_type
class RackDefinitionArgs:
    def __init__(__self__, *,
                 network_rack_id: pulumi.Input[str],
                 rack_serial_number: pulumi.Input[str],
                 rack_sku_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bare_metal_machine_configuration_data: Optional[pulumi.Input[Sequence[pulumi.Input['BareMetalMachineConfigurationDataArgs']]]] = None,
                 rack_location: Optional[pulumi.Input[str]] = None,
                 storage_appliance_configuration_data: Optional[pulumi.Input[Sequence[pulumi.Input['StorageApplianceConfigurationDataArgs']]]] = None):
        """
        :param pulumi.Input[str] network_rack_id: The resource ID of the network rack that matches this rack definition.
        :param pulumi.Input[str] rack_serial_number: The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        :param pulumi.Input[str] rack_sku_id: The resource ID of the sku for the rack being added.
        :param pulumi.Input[str] availability_zone: The zone name used for this rack when created.
        :param pulumi.Input[Sequence[pulumi.Input['BareMetalMachineConfigurationDataArgs']]] bare_metal_machine_configuration_data: The unordered list of bare metal machine configuration.
        :param pulumi.Input[str] rack_location: The free-form description of the rack's location.
        :param pulumi.Input[Sequence[pulumi.Input['StorageApplianceConfigurationDataArgs']]] storage_appliance_configuration_data: The list of storage appliance configuration data for this rack.
        """
        pulumi.set(__self__, "network_rack_id", network_rack_id)
        pulumi.set(__self__, "rack_serial_number", rack_serial_number)
        pulumi.set(__self__, "rack_sku_id", rack_sku_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bare_metal_machine_configuration_data is not None:
            pulumi.set(__self__, "bare_metal_machine_configuration_data", bare_metal_machine_configuration_data)
        if rack_location is not None:
            pulumi.set(__self__, "rack_location", rack_location)
        if storage_appliance_configuration_data is not None:
            pulumi.set(__self__, "storage_appliance_configuration_data", storage_appliance_configuration_data)

    @property
    @pulumi.getter(name="networkRackId")
    def network_rack_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the network rack that matches this rack definition.
        """
        return pulumi.get(self, "network_rack_id")

    @network_rack_id.setter
    def network_rack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_rack_id", value)

    @property
    @pulumi.getter(name="rackSerialNumber")
    def rack_serial_number(self) -> pulumi.Input[str]:
        """
        The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        """
        return pulumi.get(self, "rack_serial_number")

    @rack_serial_number.setter
    def rack_serial_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_serial_number", value)

    @property
    @pulumi.getter(name="rackSkuId")
    def rack_sku_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the sku for the rack being added.
        """
        return pulumi.get(self, "rack_sku_id")

    @rack_sku_id.setter
    def rack_sku_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_sku_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone name used for this rack when created.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bareMetalMachineConfigurationData")
    def bare_metal_machine_configuration_data(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BareMetalMachineConfigurationDataArgs']]]]:
        """
        The unordered list of bare metal machine configuration.
        """
        return pulumi.get(self, "bare_metal_machine_configuration_data")

    @bare_metal_machine_configuration_data.setter
    def bare_metal_machine_configuration_data(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BareMetalMachineConfigurationDataArgs']]]]):
        pulumi.set(self, "bare_metal_machine_configuration_data", value)

    @property
    @pulumi.getter(name="rackLocation")
    def rack_location(self) -> Optional[pulumi.Input[str]]:
        """
        The free-form description of the rack's location.
        """
        return pulumi.get(self, "rack_location")

    @rack_location.setter
    def rack_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rack_location", value)

    @property
    @pulumi.getter(name="storageApplianceConfigurationData")
    def storage_appliance_configuration_data(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageApplianceConfigurationDataArgs']]]]:
        """
        The list of storage appliance configuration data for this rack.
        """
        return pulumi.get(self, "storage_appliance_configuration_data")

    @storage_appliance_configuration_data.setter
    def storage_appliance_configuration_data(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageApplianceConfigurationDataArgs']]]]):
        pulumi.set(self, "storage_appliance_configuration_data", value)


@pulumi.input_type
class RackPropertiesArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[str],
                 rack_location: pulumi.Input[str],
                 rack_serial_number: pulumi.Input[str],
                 rack_sku_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] availability_zone: The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
        :param pulumi.Input[str] rack_location: The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
        :param pulumi.Input[str] rack_serial_number: The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        :param pulumi.Input[str] rack_sku_id: The SKU for the rack.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "rack_location", rack_location)
        pulumi.set(__self__, "rack_serial_number", rack_serial_number)
        pulumi.set(__self__, "rack_sku_id", rack_sku_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="rackLocation")
    def rack_location(self) -> pulumi.Input[str]:
        """
        The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
        """
        return pulumi.get(self, "rack_location")

    @rack_location.setter
    def rack_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_location", value)

    @property
    @pulumi.getter(name="rackSerialNumber")
    def rack_serial_number(self) -> pulumi.Input[str]:
        """
        The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        """
        return pulumi.get(self, "rack_serial_number")

    @rack_serial_number.setter
    def rack_serial_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_serial_number", value)

    @property
    @pulumi.getter(name="rackSkuId")
    def rack_sku_id(self) -> pulumi.Input[str]:
        """
        The SKU for the rack.
        """
        return pulumi.get(self, "rack_sku_id")

    @rack_sku_id.setter
    def rack_sku_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_sku_id", value)


@pulumi.input_type
class ServicePrincipalInformationArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 principal_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] application_id: The application ID, also known as client ID, of the service principal.
        :param pulumi.Input[str] password: The password of the service principal.
        :param pulumi.Input[str] principal_id: The principal ID, also known as the object ID, of the service principal.
        :param pulumi.Input[str] tenant_id: The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application ID, also known as client ID, of the service principal.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of the service principal.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Input[str]:
        """
        The principal ID, also known as the object ID, of the service principal.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class SshPublicKeyArgs:
    def __init__(__self__, *,
                 key_data: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key_data: The public ssh key of the user.
        """
        pulumi.set(__self__, "key_data", key_data)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> pulumi.Input[str]:
        """
        The public ssh key of the user.
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_data", value)


@pulumi.input_type
class StorageApplianceConfigurationDataArgs:
    def __init__(__self__, *,
                 admin_credentials: pulumi.Input['AdministrativeCredentialsArgs'],
                 rack_slot: pulumi.Input[float],
                 serial_number: pulumi.Input[str],
                 storage_appliance_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] rack_slot: The slot that storage appliance is in the rack based on the BOM configuration.
        :param pulumi.Input[str] serial_number: The serial number of the appliance.
        :param pulumi.Input[str] storage_appliance_name: The user-provided name for the storage appliance that will be created from this specification.
        """
        pulumi.set(__self__, "admin_credentials", admin_credentials)
        pulumi.set(__self__, "rack_slot", rack_slot)
        pulumi.set(__self__, "serial_number", serial_number)
        if storage_appliance_name is not None:
            pulumi.set(__self__, "storage_appliance_name", storage_appliance_name)

    @property
    @pulumi.getter(name="adminCredentials")
    def admin_credentials(self) -> pulumi.Input['AdministrativeCredentialsArgs']:
        return pulumi.get(self, "admin_credentials")

    @admin_credentials.setter
    def admin_credentials(self, value: pulumi.Input['AdministrativeCredentialsArgs']):
        pulumi.set(self, "admin_credentials", value)

    @property
    @pulumi.getter(name="rackSlot")
    def rack_slot(self) -> pulumi.Input[float]:
        """
        The slot that storage appliance is in the rack based on the BOM configuration.
        """
        return pulumi.get(self, "rack_slot")

    @rack_slot.setter
    def rack_slot(self, value: pulumi.Input[float]):
        pulumi.set(self, "rack_slot", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Input[str]:
        """
        The serial number of the appliance.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="storageApplianceName")
    def storage_appliance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user-provided name for the storage appliance that will be created from this specification.
        """
        return pulumi.get(self, "storage_appliance_name")

    @storage_appliance_name.setter
    def storage_appliance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_appliance_name", value)


@pulumi.input_type
class StorageAppliancePropertiesArgs:
    def __init__(__self__, *,
                 administrator_credentials: pulumi.Input['AdministrativeCredentialsArgs'],
                 rack_id: pulumi.Input[str],
                 rack_slot: pulumi.Input[float],
                 serial_number: pulumi.Input[str],
                 storage_appliance_sku_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] rack_id: The resource ID of the rack where this storage appliance resides.
        :param pulumi.Input[float] rack_slot: The slot the storage appliance is in the rack based on the BOM configuration.
        :param pulumi.Input[str] serial_number: The serial number for the storage appliance.
        :param pulumi.Input[str] storage_appliance_sku_id: The SKU for the storage appliance.
        """
        pulumi.set(__self__, "administrator_credentials", administrator_credentials)
        pulumi.set(__self__, "rack_id", rack_id)
        pulumi.set(__self__, "rack_slot", rack_slot)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "storage_appliance_sku_id", storage_appliance_sku_id)

    @property
    @pulumi.getter(name="administratorCredentials")
    def administrator_credentials(self) -> pulumi.Input['AdministrativeCredentialsArgs']:
        return pulumi.get(self, "administrator_credentials")

    @administrator_credentials.setter
    def administrator_credentials(self, value: pulumi.Input['AdministrativeCredentialsArgs']):
        pulumi.set(self, "administrator_credentials", value)

    @property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the rack where this storage appliance resides.
        """
        return pulumi.get(self, "rack_id")

    @rack_id.setter
    def rack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rack_id", value)

    @property
    @pulumi.getter(name="rackSlot")
    def rack_slot(self) -> pulumi.Input[float]:
        """
        The slot the storage appliance is in the rack based on the BOM configuration.
        """
        return pulumi.get(self, "rack_slot")

    @rack_slot.setter
    def rack_slot(self, value: pulumi.Input[float]):
        pulumi.set(self, "rack_slot", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Input[str]:
        """
        The serial number for the storage appliance.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="storageApplianceSkuId")
    def storage_appliance_sku_id(self) -> pulumi.Input[str]:
        """
        The SKU for the storage appliance.
        """
        return pulumi.get(self, "storage_appliance_sku_id")

    @storage_appliance_sku_id.setter
    def storage_appliance_sku_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_appliance_sku_id", value)


@pulumi.input_type
class StorageProfileArgs:
    def __init__(__self__, *,
                 os_disk: pulumi.Input['OsDiskArgs'],
                 volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] volume_attachments: The resource IDs of volumes that are requested to be attached to the virtual machine.
        """
        pulumi.set(__self__, "os_disk", os_disk)
        if volume_attachments is not None:
            pulumi.set(__self__, "volume_attachments", volume_attachments)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Input['OsDiskArgs']:
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: pulumi.Input['OsDiskArgs']):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resource IDs of volumes that are requested to be attached to the virtual machine.
        """
        return pulumi.get(self, "volume_attachments")

    @volume_attachments.setter
    def volume_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attachments", value)


@pulumi.input_type
class TrunkedNetworkPropertiesArgs:
    def __init__(__self__, *,
                 isolation_domain_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vlans: pulumi.Input[Sequence[pulumi.Input[float]]],
                 hybrid_aks_plugin_type: Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]] = None,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] isolation_domain_ids: The list of resource IDs representing the Network Fabric isolation domains. It can be any combination of l2IsolationDomain and l3IsolationDomain resources.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] vlans: The list of vlans that are selected from the isolation domains for trunking.
        :param pulumi.Input[Union[str, 'HybridAksPluginType']] hybrid_aks_plugin_type: The network plugin type for Hybrid AKS.
        :param pulumi.Input[str] interface_name: The default interface name for this trunked network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine.
        """
        pulumi.set(__self__, "isolation_domain_ids", isolation_domain_ids)
        pulumi.set(__self__, "vlans", vlans)
        if hybrid_aks_plugin_type is None:
            hybrid_aks_plugin_type = 'SRIOV'
        if hybrid_aks_plugin_type is not None:
            pulumi.set(__self__, "hybrid_aks_plugin_type", hybrid_aks_plugin_type)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="isolationDomainIds")
    def isolation_domain_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of resource IDs representing the Network Fabric isolation domains. It can be any combination of l2IsolationDomain and l3IsolationDomain resources.
        """
        return pulumi.get(self, "isolation_domain_ids")

    @isolation_domain_ids.setter
    def isolation_domain_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "isolation_domain_ids", value)

    @property
    @pulumi.getter
    def vlans(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        """
        The list of vlans that are selected from the isolation domains for trunking.
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "vlans", value)

    @property
    @pulumi.getter(name="hybridAksPluginType")
    def hybrid_aks_plugin_type(self) -> Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]]:
        """
        The network plugin type for Hybrid AKS.
        """
        return pulumi.get(self, "hybrid_aks_plugin_type")

    @hybrid_aks_plugin_type.setter
    def hybrid_aks_plugin_type(self, value: Optional[pulumi.Input[Union[str, 'HybridAksPluginType']]]):
        pulumi.set(self, "hybrid_aks_plugin_type", value)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        The default interface name for this trunked network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class ValidationThresholdArgs:
    def __init__(__self__, *,
                 grouping: pulumi.Input[Union[str, 'ValidationThresholdGrouping']],
                 type: pulumi.Input[Union[str, 'ValidationThresholdType']],
                 value: pulumi.Input[float]):
        """
        :param pulumi.Input[Union[str, 'ValidationThresholdGrouping']] grouping: Selection of how the type evaluation is applied to the cluster calculation.
        :param pulumi.Input[Union[str, 'ValidationThresholdType']] type: Selection of how the threshold should be evaluated.
        :param pulumi.Input[float] value: The numeric threshold value.
        """
        pulumi.set(__self__, "grouping", grouping)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def grouping(self) -> pulumi.Input[Union[str, 'ValidationThresholdGrouping']]:
        """
        Selection of how the type evaluation is applied to the cluster calculation.
        """
        return pulumi.get(self, "grouping")

    @grouping.setter
    def grouping(self, value: pulumi.Input[Union[str, 'ValidationThresholdGrouping']]):
        pulumi.set(self, "grouping", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ValidationThresholdType']]:
        """
        Selection of how the threshold should be evaluated.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ValidationThresholdType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The numeric threshold value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualMachinePlacementHintArgs:
    def __init__(__self__, *,
                 hint_type: pulumi.Input[Union[str, 'VirtualMachinePlacementHintType']],
                 resource_id: pulumi.Input[str],
                 scheduling_execution: pulumi.Input[Union[str, 'VirtualMachineSchedulingExecution']],
                 scope: pulumi.Input[Union[str, 'VirtualMachinePlacementHintPodAffinityScope']]):
        """
        :param pulumi.Input[Union[str, 'VirtualMachinePlacementHintType']] hint_type: The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
        :param pulumi.Input[str] resource_id: The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
        :param pulumi.Input[Union[str, 'VirtualMachineSchedulingExecution']] scheduling_execution: The indicator of whether the hint is a hard or soft requirement during scheduling.
        :param pulumi.Input[Union[str, 'VirtualMachinePlacementHintPodAffinityScope']] scope: The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
        """
        pulumi.set(__self__, "hint_type", hint_type)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "scheduling_execution", scheduling_execution)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="hintType")
    def hint_type(self) -> pulumi.Input[Union[str, 'VirtualMachinePlacementHintType']]:
        """
        The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
        """
        return pulumi.get(self, "hint_type")

    @hint_type.setter
    def hint_type(self, value: pulumi.Input[Union[str, 'VirtualMachinePlacementHintType']]):
        pulumi.set(self, "hint_type", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="schedulingExecution")
    def scheduling_execution(self) -> pulumi.Input[Union[str, 'VirtualMachineSchedulingExecution']]:
        """
        The indicator of whether the hint is a hard or soft requirement during scheduling.
        """
        return pulumi.get(self, "scheduling_execution")

    @scheduling_execution.setter
    def scheduling_execution(self, value: pulumi.Input[Union[str, 'VirtualMachineSchedulingExecution']]):
        pulumi.set(self, "scheduling_execution", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[Union[str, 'VirtualMachinePlacementHintPodAffinityScope']]:
        """
        The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[Union[str, 'VirtualMachinePlacementHintPodAffinityScope']]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class VirtualMachinePropertiesArgs:
    def __init__(__self__, *,
                 admin_username: pulumi.Input[str],
                 cloud_services_network_attachment: pulumi.Input['NetworkAttachmentArgs'],
                 cpu_cores: pulumi.Input[float],
                 memory_size_gb: pulumi.Input[float],
                 storage_profile: pulumi.Input['StorageProfileArgs'],
                 vm_image: pulumi.Input[str],
                 boot_method: Optional[pulumi.Input[Union[str, 'VirtualMachineBootMethod']]] = None,
                 isolate_emulator_thread: Optional[pulumi.Input[Union[str, 'VirtualMachineIsolateEmulatorThread']]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAttachmentArgs']]]] = None,
                 network_data: Optional[pulumi.Input[str]] = None,
                 placement_hints: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachinePlacementHintArgs']]]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['SshPublicKeyArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtio_interface: Optional[pulumi.Input[Union[str, 'VirtualMachineVirtioInterfaceType']]] = None,
                 vm_device_model: Optional[pulumi.Input[Union[str, 'VirtualMachineDeviceModelType']]] = None,
                 vm_image_repository_credentials: Optional[pulumi.Input['ImageRepositoryCredentialsArgs']] = None):
        """
        :param pulumi.Input[str] admin_username: The name of the administrator to which the ssh public keys will be added into the authorized keys.
        :param pulumi.Input[float] cpu_cores: The number of CPU cores in the virtual machine.
        :param pulumi.Input[float] memory_size_gb: The memory size of the virtual machine in GB.
        :param pulumi.Input[str] vm_image: The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        :param pulumi.Input[Union[str, 'VirtualMachineBootMethod']] boot_method: Selects the boot method for the virtual machine.
        :param pulumi.Input[Union[str, 'VirtualMachineIsolateEmulatorThread']] isolate_emulator_thread: Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkAttachmentArgs']]] network_attachments: The list of network attachments to the virtual machine.
        :param pulumi.Input[str] network_data: The Base64 encoded cloud-init network data.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualMachinePlacementHintArgs']]] placement_hints: The scheduling hints for the virtual machine.
        :param pulumi.Input[Sequence[pulumi.Input['SshPublicKeyArgs']]] ssh_public_keys: The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        :param pulumi.Input[str] user_data: The Base64 encoded cloud-init user data.
        :param pulumi.Input[Union[str, 'VirtualMachineVirtioInterfaceType']] virtio_interface: Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        :param pulumi.Input[Union[str, 'VirtualMachineDeviceModelType']] vm_device_model: The type of the device model to use.
        """
        pulumi.set(__self__, "admin_username", admin_username)
        pulumi.set(__self__, "cloud_services_network_attachment", cloud_services_network_attachment)
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "storage_profile", storage_profile)
        pulumi.set(__self__, "vm_image", vm_image)
        if boot_method is None:
            boot_method = 'UEFI'
        if boot_method is not None:
            pulumi.set(__self__, "boot_method", boot_method)
        if isolate_emulator_thread is None:
            isolate_emulator_thread = 'True'
        if isolate_emulator_thread is not None:
            pulumi.set(__self__, "isolate_emulator_thread", isolate_emulator_thread)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_data is not None:
            pulumi.set(__self__, "network_data", network_data)
        if placement_hints is not None:
            pulumi.set(__self__, "placement_hints", placement_hints)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if virtio_interface is None:
            virtio_interface = 'Modern'
        if virtio_interface is not None:
            pulumi.set(__self__, "virtio_interface", virtio_interface)
        if vm_device_model is None:
            vm_device_model = 'T2'
        if vm_device_model is not None:
            pulumi.set(__self__, "vm_device_model", vm_device_model)
        if vm_image_repository_credentials is not None:
            pulumi.set(__self__, "vm_image_repository_credentials", vm_image_repository_credentials)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> pulumi.Input[str]:
        """
        The name of the administrator to which the ssh public keys will be added into the authorized keys.
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="cloudServicesNetworkAttachment")
    def cloud_services_network_attachment(self) -> pulumi.Input['NetworkAttachmentArgs']:
        return pulumi.get(self, "cloud_services_network_attachment")

    @cloud_services_network_attachment.setter
    def cloud_services_network_attachment(self, value: pulumi.Input['NetworkAttachmentArgs']):
        pulumi.set(self, "cloud_services_network_attachment", value)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Input[float]:
        """
        The number of CPU cores in the virtual machine.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: pulumi.Input[float]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="memorySizeGB")
    def memory_size_gb(self) -> pulumi.Input[float]:
        """
        The memory size of the virtual machine in GB.
        """
        return pulumi.get(self, "memory_size_gb")

    @memory_size_gb.setter
    def memory_size_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "memory_size_gb", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> pulumi.Input['StorageProfileArgs']:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: pulumi.Input['StorageProfileArgs']):
        pulumi.set(self, "storage_profile", value)

    @property
    @pulumi.getter(name="vmImage")
    def vm_image(self) -> pulumi.Input[str]:
        """
        The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        """
        return pulumi.get(self, "vm_image")

    @vm_image.setter
    def vm_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_image", value)

    @property
    @pulumi.getter(name="bootMethod")
    def boot_method(self) -> Optional[pulumi.Input[Union[str, 'VirtualMachineBootMethod']]]:
        """
        Selects the boot method for the virtual machine.
        """
        return pulumi.get(self, "boot_method")

    @boot_method.setter
    def boot_method(self, value: Optional[pulumi.Input[Union[str, 'VirtualMachineBootMethod']]]):
        pulumi.set(self, "boot_method", value)

    @property
    @pulumi.getter(name="isolateEmulatorThread")
    def isolate_emulator_thread(self) -> Optional[pulumi.Input[Union[str, 'VirtualMachineIsolateEmulatorThread']]]:
        """
        Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        """
        return pulumi.get(self, "isolate_emulator_thread")

    @isolate_emulator_thread.setter
    def isolate_emulator_thread(self, value: Optional[pulumi.Input[Union[str, 'VirtualMachineIsolateEmulatorThread']]]):
        pulumi.set(self, "isolate_emulator_thread", value)

    @property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAttachmentArgs']]]]:
        """
        The list of network attachments to the virtual machine.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @property
    @pulumi.getter(name="networkData")
    def network_data(self) -> Optional[pulumi.Input[str]]:
        """
        The Base64 encoded cloud-init network data.
        """
        return pulumi.get(self, "network_data")

    @network_data.setter
    def network_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_data", value)

    @property
    @pulumi.getter(name="placementHints")
    def placement_hints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachinePlacementHintArgs']]]]:
        """
        The scheduling hints for the virtual machine.
        """
        return pulumi.get(self, "placement_hints")

    @placement_hints.setter
    def placement_hints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualMachinePlacementHintArgs']]]]):
        pulumi.set(self, "placement_hints", value)

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshPublicKeyArgs']]]]:
        """
        The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        """
        return pulumi.get(self, "ssh_public_keys")

    @ssh_public_keys.setter
    def ssh_public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshPublicKeyArgs']]]]):
        pulumi.set(self, "ssh_public_keys", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The Base64 encoded cloud-init user data.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="virtioInterface")
    def virtio_interface(self) -> Optional[pulumi.Input[Union[str, 'VirtualMachineVirtioInterfaceType']]]:
        """
        Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        """
        return pulumi.get(self, "virtio_interface")

    @virtio_interface.setter
    def virtio_interface(self, value: Optional[pulumi.Input[Union[str, 'VirtualMachineVirtioInterfaceType']]]):
        pulumi.set(self, "virtio_interface", value)

    @property
    @pulumi.getter(name="vmDeviceModel")
    def vm_device_model(self) -> Optional[pulumi.Input[Union[str, 'VirtualMachineDeviceModelType']]]:
        """
        The type of the device model to use.
        """
        return pulumi.get(self, "vm_device_model")

    @vm_device_model.setter
    def vm_device_model(self, value: Optional[pulumi.Input[Union[str, 'VirtualMachineDeviceModelType']]]):
        pulumi.set(self, "vm_device_model", value)

    @property
    @pulumi.getter(name="vmImageRepositoryCredentials")
    def vm_image_repository_credentials(self) -> Optional[pulumi.Input['ImageRepositoryCredentialsArgs']]:
        return pulumi.get(self, "vm_image_repository_credentials")

    @vm_image_repository_credentials.setter
    def vm_image_repository_credentials(self, value: Optional[pulumi.Input['ImageRepositoryCredentialsArgs']]):
        pulumi.set(self, "vm_image_repository_credentials", value)


@pulumi.input_type
class VolumePropertiesArgs:
    def __init__(__self__, *,
                 size_mi_b: pulumi.Input[float]):
        """
        :param pulumi.Input[float] size_mi_b: The size of the allocation for this volume in Mebibytes.
        """
        pulumi.set(__self__, "size_mi_b", size_mi_b)

    @property
    @pulumi.getter(name="sizeMiB")
    def size_mi_b(self) -> pulumi.Input[float]:
        """
        The size of the allocation for this volume in Mebibytes.
        """
        return pulumi.get(self, "size_mi_b")

    @size_mi_b.setter
    def size_mi_b(self, value: pulumi.Input[float]):
        pulumi.set(self, "size_mi_b", value)


