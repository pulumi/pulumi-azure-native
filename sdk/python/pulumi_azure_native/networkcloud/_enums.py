# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AdvertiseToFabric',
    'AgentPoolMode',
    'BareMetalMachineKeySetPrivilegeLevel',
    'BfdEnabled',
    'BgpMultiHop',
    'BmcKeySetPrivilegeLevel',
    'CloudServicesNetworkEnableDefaultEgressEndpoints',
    'ClusterType',
    'ConsoleEnabled',
    'DefaultGateway',
    'FabricPeeringEnabled',
    'HugepagesSize',
    'HybridAksIpamEnabled',
    'HybridAksPluginType',
    'IpAllocationType',
    'KubernetesPluginType',
    'L3NetworkConfigurationIpamEnabled',
    'OsDiskCreateOption',
    'OsDiskDeleteOption',
    'ValidationThresholdGrouping',
    'ValidationThresholdType',
    'VirtualMachineBootMethod',
    'VirtualMachineDeviceModelType',
    'VirtualMachineIPAllocationMethod',
    'VirtualMachineIsolateEmulatorThread',
    'VirtualMachinePlacementHintPodAffinityScope',
    'VirtualMachinePlacementHintType',
    'VirtualMachineSchedulingExecution',
    'VirtualMachineVirtioInterfaceType',
]


class AdvertiseToFabric(str, Enum):
    TRUE = "True"
    FALSE = "False"


class AgentPoolMode(str, Enum):
    SYSTEM = "System"
    USER = "User"
    NOT_APPLICABLE = "NotApplicable"


class BareMetalMachineKeySetPrivilegeLevel(str, Enum):
    STANDARD = "Standard"
    SUPERUSER = "Superuser"


class BfdEnabled(str, Enum):
    TRUE = "True"
    FALSE = "False"


class BgpMultiHop(str, Enum):
    TRUE = "True"
    FALSE = "False"


class BmcKeySetPrivilegeLevel(str, Enum):
    READ_ONLY = "ReadOnly"
    ADMINISTRATOR = "Administrator"


class CloudServicesNetworkEnableDefaultEgressEndpoints(str, Enum):
    TRUE = "True"
    FALSE = "False"


class ClusterType(str, Enum):
    SINGLE_RACK = "SingleRack"
    MULTI_RACK = "MultiRack"


class ConsoleEnabled(str, Enum):
    TRUE = "True"
    FALSE = "False"


class DefaultGateway(str, Enum):
    TRUE = "True"
    FALSE = "False"


class FabricPeeringEnabled(str, Enum):
    TRUE = "True"
    FALSE = "False"


class HugepagesSize(str, Enum):
    HUGEPAGES_SIZE_2_M = "2M"
    HUGEPAGES_SIZE_1_G = "1G"


class HybridAksIpamEnabled(str, Enum):
    TRUE = "True"
    FALSE = "False"


class HybridAksPluginType(str, Enum):
    DPDK = "DPDK"
    SRIOV = "SRIOV"
    OS_DEVICE = "OSDevice"


class IpAllocationType(str, Enum):
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    DUAL_STACK = "DualStack"


class KubernetesPluginType(str, Enum):
    DPDK = "DPDK"
    SRIOV = "SRIOV"
    OS_DEVICE = "OSDevice"
    MACVLAN = "MACVLAN"
    IPVLAN = "IPVLAN"


class L3NetworkConfigurationIpamEnabled(str, Enum):
    TRUE = "True"
    FALSE = "False"


class OsDiskCreateOption(str, Enum):
    EPHEMERAL = "Ephemeral"


class OsDiskDeleteOption(str, Enum):
    DELETE = "Delete"


class ValidationThresholdGrouping(str, Enum):
    PER_CLUSTER = "PerCluster"
    PER_RACK = "PerRack"


class ValidationThresholdType(str, Enum):
    COUNT_SUCCESS = "CountSuccess"
    PERCENT_SUCCESS = "PercentSuccess"


class VirtualMachineBootMethod(str, Enum):
    UEFI = "UEFI"
    BIOS = "BIOS"


class VirtualMachineDeviceModelType(str, Enum):
    T1 = "T1"
    T2 = "T2"


class VirtualMachineIPAllocationMethod(str, Enum):
    DYNAMIC = "Dynamic"
    STATIC = "Static"
    DISABLED = "Disabled"


class VirtualMachineIsolateEmulatorThread(str, Enum):
    TRUE = "True"
    FALSE = "False"


class VirtualMachinePlacementHintPodAffinityScope(str, Enum):
    RACK = "Rack"
    MACHINE = "Machine"


class VirtualMachinePlacementHintType(str, Enum):
    AFFINITY = "Affinity"
    ANTI_AFFINITY = "AntiAffinity"


class VirtualMachineSchedulingExecution(str, Enum):
    HARD = "Hard"
    SOFT = "Soft"


class VirtualMachineVirtioInterfaceType(str, Enum):
    MODERN = "Modern"
    TRANSITIONAL = "Transitional"
