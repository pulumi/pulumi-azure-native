# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetKubernetesClusterFeatureResult',
    'AwaitableGetKubernetesClusterFeatureResult',
    'get_kubernetes_cluster_feature',
    'get_kubernetes_cluster_feature_output',
]

@pulumi.output_type
class GetKubernetesClusterFeatureResult:
    def __init__(__self__, availability_lifecycle=None, detailed_status=None, detailed_status_message=None, id=None, location=None, name=None, options=None, provisioning_state=None, required=None, system_data=None, tags=None, type=None, version=None):
        if availability_lifecycle and not isinstance(availability_lifecycle, str):
            raise TypeError("Expected argument 'availability_lifecycle' to be a str")
        pulumi.set(__self__, "availability_lifecycle", availability_lifecycle)
        if detailed_status and not isinstance(detailed_status, str):
            raise TypeError("Expected argument 'detailed_status' to be a str")
        pulumi.set(__self__, "detailed_status", detailed_status)
        if detailed_status_message and not isinstance(detailed_status_message, str):
            raise TypeError("Expected argument 'detailed_status_message' to be a str")
        pulumi.set(__self__, "detailed_status_message", detailed_status_message)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if options and not isinstance(options, list):
            raise TypeError("Expected argument 'options' to be a list")
        pulumi.set(__self__, "options", options)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if required and not isinstance(required, str):
            raise TypeError("Expected argument 'required' to be a str")
        pulumi.set(__self__, "required", required)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availabilityLifecycle")
    def availability_lifecycle(self) -> str:
        """
        The lifecycle indicator of the feature.
        """
        return pulumi.get(self, "availability_lifecycle")

    @property
    @pulumi.getter(name="detailedStatus")
    def detailed_status(self) -> str:
        """
        The detailed status of the feature.
        """
        return pulumi.get(self, "detailed_status")

    @property
    @pulumi.getter(name="detailedStatusMessage")
    def detailed_status_message(self) -> str:
        """
        The descriptive message for the detailed status of the feature.
        """
        return pulumi.get(self, "detailed_status_message")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.StringKeyValuePairResponse']]:
        """
        The configured options for the feature.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the Kubernetes cluster feature.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        The indicator of if the feature is required or optional. Optional features may be deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the feature.
        """
        return pulumi.get(self, "version")


class AwaitableGetKubernetesClusterFeatureResult(GetKubernetesClusterFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubernetesClusterFeatureResult(
            availability_lifecycle=self.availability_lifecycle,
            detailed_status=self.detailed_status,
            detailed_status_message=self.detailed_status_message,
            id=self.id,
            location=self.location,
            name=self.name,
            options=self.options,
            provisioning_state=self.provisioning_state,
            required=self.required,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            version=self.version)


def get_kubernetes_cluster_feature(feature_name: Optional[str] = None,
                                   kubernetes_cluster_name: Optional[str] = None,
                                   resource_group_name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubernetesClusterFeatureResult:
    """
    Get properties of the provided the Kubernetes cluster feature.


    :param str feature_name: The name of the feature.
    :param str kubernetes_cluster_name: The name of the Kubernetes cluster.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['featureName'] = feature_name
    __args__['kubernetesClusterName'] = kubernetes_cluster_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:networkcloud/v20240601preview:getKubernetesClusterFeature', __args__, opts=opts, typ=GetKubernetesClusterFeatureResult).value

    return AwaitableGetKubernetesClusterFeatureResult(
        availability_lifecycle=pulumi.get(__ret__, 'availability_lifecycle'),
        detailed_status=pulumi.get(__ret__, 'detailed_status'),
        detailed_status_message=pulumi.get(__ret__, 'detailed_status_message'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        options=pulumi.get(__ret__, 'options'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        required=pulumi.get(__ret__, 'required'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))
def get_kubernetes_cluster_feature_output(feature_name: Optional[pulumi.Input[str]] = None,
                                          kubernetes_cluster_name: Optional[pulumi.Input[str]] = None,
                                          resource_group_name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKubernetesClusterFeatureResult]:
    """
    Get properties of the provided the Kubernetes cluster feature.


    :param str feature_name: The name of the feature.
    :param str kubernetes_cluster_name: The name of the Kubernetes cluster.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['featureName'] = feature_name
    __args__['kubernetesClusterName'] = kubernetes_cluster_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:networkcloud/v20240601preview:getKubernetesClusterFeature', __args__, opts=opts, typ=GetKubernetesClusterFeatureResult)
    return __ret__.apply(lambda __response__: GetKubernetesClusterFeatureResult(
        availability_lifecycle=pulumi.get(__response__, 'availability_lifecycle'),
        detailed_status=pulumi.get(__response__, 'detailed_status'),
        detailed_status_message=pulumi.get(__response__, 'detailed_status_message'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        options=pulumi.get(__response__, 'options'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        required=pulumi.get(__response__, 'required'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        version=pulumi.get(__response__, 'version')))
