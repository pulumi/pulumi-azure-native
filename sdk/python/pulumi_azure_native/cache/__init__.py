# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .database import *
from .firewall_rule import *
from .get_database import *
from .get_firewall_rule import *
from .get_linked_server import *
from .get_patch_schedule import *
from .get_private_endpoint_connection import *
from .get_redis import *
from .get_redis_enterprise import *
from .linked_server import *
from .list_database_keys import *
from .list_redis_keys import *
from .patch_schedule import *
from .private_endpoint_connection import *
from .redis import *
from .redis_enterprise import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    v20150801,
    v20160401,
    v20170201,
    v20171001,
    v20180301,
    v20190701,
    v20200601,
    v20201001preview,
    v20210201preview,
    v20210301,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:cache:Database":
                return Database(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cache:FirewallRule":
                return FirewallRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cache:LinkedServer":
                return LinkedServer(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cache:PatchSchedule":
                return PatchSchedule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cache:PrivateEndpointConnection":
                return PrivateEndpointConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cache:Redis":
                return Redis(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:cache:RedisEnterprise":
                return RedisEnterprise(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "cache", _module_instance)

_register_module()
