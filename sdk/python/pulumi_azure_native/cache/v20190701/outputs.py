# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'RedisAccessKeysResponse',
    'RedisFirewallRulePropertiesResponse',
    'RedisInstanceDetailsResponse',
    'RedisLinkedServerResponse',
    'RedisPropertiesResponse',
    'ScheduleEntriesResponse',
    'ScheduleEntryResponse',
    'SkuResponse',
]

@pulumi.output_type
class RedisAccessKeysResponse(dict):
    """
    Redis cache access keys.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryKey":
            suggest = "primary_key"
        elif key == "secondaryKey":
            suggest = "secondary_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisAccessKeysResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisAccessKeysResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisAccessKeysResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_key: str,
                 secondary_key: str):
        """
        Redis cache access keys.
        :param str primary_key: The current primary key that clients can use to authenticate with Redis cache.
        :param str secondary_key: The current secondary key that clients can use to authenticate with Redis cache.
        """
        pulumi.set(__self__, "primary_key", primary_key)
        pulumi.set(__self__, "secondary_key", secondary_key)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> str:
        """
        The current primary key that clients can use to authenticate with Redis cache.
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter(name="secondaryKey")
    def secondary_key(self) -> str:
        """
        The current secondary key that clients can use to authenticate with Redis cache.
        """
        return pulumi.get(self, "secondary_key")


@pulumi.output_type
class RedisFirewallRulePropertiesResponse(dict):
    """
    Specifies a range of IP addresses permitted to connect to the cache
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIP":
            suggest = "end_ip"
        elif key == "startIP":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisFirewallRulePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisFirewallRulePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisFirewallRulePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: str,
                 start_ip: str):
        """
        Specifies a range of IP addresses permitted to connect to the cache
        :param str end_ip: highest IP address included in the range
        :param str start_ip: lowest IP address included in the range
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> str:
        """
        highest IP address included in the range
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> str:
        """
        lowest IP address included in the range
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class RedisInstanceDetailsResponse(dict):
    """
    Details of single instance of redis.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isMaster":
            suggest = "is_master"
        elif key == "nonSslPort":
            suggest = "non_ssl_port"
        elif key == "shardId":
            suggest = "shard_id"
        elif key == "sslPort":
            suggest = "ssl_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisInstanceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisInstanceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisInstanceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_master: bool,
                 non_ssl_port: int,
                 shard_id: int,
                 ssl_port: int,
                 zone: str):
        """
        Details of single instance of redis.
        :param bool is_master: Specifies whether the instance is a master node.
        :param int non_ssl_port: If enableNonSslPort is true, provides Redis instance Non-SSL port.
        :param int shard_id: If clustering is enabled, the Shard ID of Redis Instance
        :param int ssl_port: Redis instance SSL port.
        :param str zone: If the Cache uses availability zones, specifies availability zone where this instance is located.
        """
        pulumi.set(__self__, "is_master", is_master)
        pulumi.set(__self__, "non_ssl_port", non_ssl_port)
        pulumi.set(__self__, "shard_id", shard_id)
        pulumi.set(__self__, "ssl_port", ssl_port)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="isMaster")
    def is_master(self) -> bool:
        """
        Specifies whether the instance is a master node.
        """
        return pulumi.get(self, "is_master")

    @property
    @pulumi.getter(name="nonSslPort")
    def non_ssl_port(self) -> int:
        """
        If enableNonSslPort is true, provides Redis instance Non-SSL port.
        """
        return pulumi.get(self, "non_ssl_port")

    @property
    @pulumi.getter(name="shardId")
    def shard_id(self) -> int:
        """
        If clustering is enabled, the Shard ID of Redis Instance
        """
        return pulumi.get(self, "shard_id")

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> int:
        """
        Redis instance SSL port.
        """
        return pulumi.get(self, "ssl_port")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        If the Cache uses availability zones, specifies availability zone where this instance is located.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class RedisLinkedServerResponse(dict):
    """
    Linked server Id
    """
    def __init__(__self__, *,
                 id: str):
        """
        Linked server Id
        :param str id: Linked server Id.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Linked server Id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class RedisPropertiesResponse(dict):
    """
    Properties of the redis cache.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeys":
            suggest = "access_keys"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "linkedServers":
            suggest = "linked_servers"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "redisVersion":
            suggest = "redis_version"
        elif key == "sslPort":
            suggest = "ssl_port"
        elif key == "enableNonSslPort":
            suggest = "enable_non_ssl_port"
        elif key == "minimumTlsVersion":
            suggest = "minimum_tls_version"
        elif key == "redisConfiguration":
            suggest = "redis_configuration"
        elif key == "replicasPerMaster":
            suggest = "replicas_per_master"
        elif key == "shardCount":
            suggest = "shard_count"
        elif key == "staticIP":
            suggest = "static_ip"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tenantSettings":
            suggest = "tenant_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_keys: 'outputs.RedisAccessKeysResponse',
                 host_name: str,
                 instances: Sequence['outputs.RedisInstanceDetailsResponse'],
                 linked_servers: Sequence['outputs.RedisLinkedServerResponse'],
                 port: int,
                 provisioning_state: str,
                 redis_version: str,
                 sku: 'outputs.SkuResponse',
                 ssl_port: int,
                 enable_non_ssl_port: Optional[bool] = None,
                 minimum_tls_version: Optional[str] = None,
                 redis_configuration: Optional[Mapping[str, str]] = None,
                 replicas_per_master: Optional[int] = None,
                 shard_count: Optional[int] = None,
                 static_ip: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 tenant_settings: Optional[Mapping[str, str]] = None):
        """
        Properties of the redis cache.
        :param 'RedisAccessKeysResponse' access_keys: The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
        :param str host_name: Redis host name.
        :param Sequence['RedisInstanceDetailsResponse'] instances: List of the Redis instances associated with the cache
        :param Sequence['RedisLinkedServerResponse'] linked_servers: List of the linked servers associated with the cache
        :param int port: Redis non-SSL port.
        :param str provisioning_state: Redis instance provisioning status.
        :param str redis_version: Redis version.
        :param 'SkuResponse' sku: The SKU of the Redis cache to deploy.
        :param int ssl_port: Redis SSL port.
        :param bool enable_non_ssl_port: Specifies whether the non-ssl Redis server port (6379) is enabled.
        :param str minimum_tls_version: Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        :param Mapping[str, str] redis_configuration: All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
        :param int replicas_per_master: The number of replicas to be created per master.
        :param int shard_count: The number of shards to be created on a Premium Cluster Cache.
        :param str static_ip: Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
        :param str subnet_id: The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        :param Mapping[str, str] tenant_settings: A dictionary of tenant settings
        """
        pulumi.set(__self__, "access_keys", access_keys)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "linked_servers", linked_servers)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "redis_version", redis_version)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "ssl_port", ssl_port)
        if enable_non_ssl_port is not None:
            pulumi.set(__self__, "enable_non_ssl_port", enable_non_ssl_port)
        if minimum_tls_version is not None:
            pulumi.set(__self__, "minimum_tls_version", minimum_tls_version)
        if redis_configuration is not None:
            pulumi.set(__self__, "redis_configuration", redis_configuration)
        if replicas_per_master is not None:
            pulumi.set(__self__, "replicas_per_master", replicas_per_master)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tenant_settings is not None:
            pulumi.set(__self__, "tenant_settings", tenant_settings)

    @property
    @pulumi.getter(name="accessKeys")
    def access_keys(self) -> 'outputs.RedisAccessKeysResponse':
        """
        The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
        """
        return pulumi.get(self, "access_keys")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Redis host name.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.RedisInstanceDetailsResponse']:
        """
        List of the Redis instances associated with the cache
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="linkedServers")
    def linked_servers(self) -> Sequence['outputs.RedisLinkedServerResponse']:
        """
        List of the linked servers associated with the cache
        """
        return pulumi.get(self, "linked_servers")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Redis non-SSL port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Redis instance provisioning status.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="redisVersion")
    def redis_version(self) -> str:
        """
        Redis version.
        """
        return pulumi.get(self, "redis_version")

    @property
    @pulumi.getter
    def sku(self) -> 'outputs.SkuResponse':
        """
        The SKU of the Redis cache to deploy.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> int:
        """
        Redis SSL port.
        """
        return pulumi.get(self, "ssl_port")

    @property
    @pulumi.getter(name="enableNonSslPort")
    def enable_non_ssl_port(self) -> Optional[bool]:
        """
        Specifies whether the non-ssl Redis server port (6379) is enabled.
        """
        return pulumi.get(self, "enable_non_ssl_port")

    @property
    @pulumi.getter(name="minimumTlsVersion")
    def minimum_tls_version(self) -> Optional[str]:
        """
        Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        """
        return pulumi.get(self, "minimum_tls_version")

    @property
    @pulumi.getter(name="redisConfiguration")
    def redis_configuration(self) -> Optional[Mapping[str, str]]:
        """
        All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
        """
        return pulumi.get(self, "redis_configuration")

    @property
    @pulumi.getter(name="replicasPerMaster")
    def replicas_per_master(self) -> Optional[int]:
        """
        The number of replicas to be created per master.
        """
        return pulumi.get(self, "replicas_per_master")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[int]:
        """
        The number of shards to be created on a Premium Cluster Cache.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="staticIP")
    def static_ip(self) -> Optional[str]:
        """
        Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
        """
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tenantSettings")
    def tenant_settings(self) -> Optional[Mapping[str, str]]:
        """
        A dictionary of tenant settings
        """
        return pulumi.get(self, "tenant_settings")


@pulumi.output_type
class ScheduleEntriesResponse(dict):
    """
    List of patch schedules for a Redis cache.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleEntries":
            suggest = "schedule_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleEntriesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleEntriesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleEntriesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_entries: Sequence['outputs.ScheduleEntryResponse']):
        """
        List of patch schedules for a Redis cache.
        :param Sequence['ScheduleEntryResponse'] schedule_entries: List of patch schedules for a Redis cache.
        """
        pulumi.set(__self__, "schedule_entries", schedule_entries)

    @property
    @pulumi.getter(name="scheduleEntries")
    def schedule_entries(self) -> Sequence['outputs.ScheduleEntryResponse']:
        """
        List of patch schedules for a Redis cache.
        """
        return pulumi.get(self, "schedule_entries")


@pulumi.output_type
class ScheduleEntryResponse(dict):
    """
    Patch schedule entry for a Premium Redis Cache.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "startHourUtc":
            suggest = "start_hour_utc"
        elif key == "maintenanceWindow":
            suggest = "maintenance_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleEntryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleEntryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleEntryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: str,
                 start_hour_utc: int,
                 maintenance_window: Optional[str] = None):
        """
        Patch schedule entry for a Premium Redis Cache.
        :param str day_of_week: Day of the week when a cache can be patched.
        :param int start_hour_utc: Start hour after which cache patching can start.
        :param str maintenance_window: ISO8601 timespan specifying how much time cache patching can take. 
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "start_hour_utc", start_hour_utc)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        Day of the week when a cache can be patched.
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="startHourUtc")
    def start_hour_utc(self) -> int:
        """
        Start hour after which cache patching can start.
        """
        return pulumi.get(self, "start_hour_utc")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[str]:
        """
        ISO8601 timespan specifying how much time cache patching can take. 
        """
        return pulumi.get(self, "maintenance_window")


@pulumi.output_type
class SkuResponse(dict):
    """
    SKU parameters supplied to the create Redis operation.
    """
    def __init__(__self__, *,
                 capacity: int,
                 family: str,
                 name: str):
        """
        SKU parameters supplied to the create Redis operation.
        :param int capacity: The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4, 5).
        :param str family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
        :param str name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> int:
        """
        The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4, 5).
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
        """
        return pulumi.get(self, "name")


