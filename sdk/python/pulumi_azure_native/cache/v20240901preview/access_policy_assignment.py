# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccessPolicyAssignmentArgs', 'AccessPolicyAssignment']

@pulumi.input_type
class AccessPolicyAssignmentArgs:
    def __init__(__self__, *,
                 access_policy_name: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 user: pulumi.Input['AccessPolicyAssignmentPropertiesUserArgs'],
                 access_policy_assignment_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AccessPolicyAssignment resource.
        :param pulumi.Input[str] access_policy_name: Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
        :param pulumi.Input[str] cluster_name: The name of the Redis Enterprise cluster.
        :param pulumi.Input[str] database_name: The name of the Redis Enterprise database.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input['AccessPolicyAssignmentPropertiesUserArgs'] user: The user associated with the access policy.
        :param pulumi.Input[str] access_policy_assignment_name: The name of the Redis Enterprise database access policy assignment.
        """
        pulumi.set(__self__, "access_policy_name", access_policy_name)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "user", user)
        if access_policy_assignment_name is not None:
            pulumi.set(__self__, "access_policy_assignment_name", access_policy_assignment_name)

    @property
    @pulumi.getter(name="accessPolicyName")
    def access_policy_name(self) -> pulumi.Input[str]:
        """
        Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
        """
        return pulumi.get(self, "access_policy_name")

    @access_policy_name.setter
    def access_policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_policy_name", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of the Redis Enterprise cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The name of the Redis Enterprise database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input['AccessPolicyAssignmentPropertiesUserArgs']:
        """
        The user associated with the access policy.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input['AccessPolicyAssignmentPropertiesUserArgs']):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="accessPolicyAssignmentName")
    def access_policy_assignment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Redis Enterprise database access policy assignment.
        """
        return pulumi.get(self, "access_policy_assignment_name")

    @access_policy_assignment_name.setter
    def access_policy_assignment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_policy_assignment_name", value)


class AccessPolicyAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policy_assignment_name: Optional[pulumi.Input[str]] = None,
                 access_policy_name: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[Union['AccessPolicyAssignmentPropertiesUserArgs', 'AccessPolicyAssignmentPropertiesUserArgsDict']]] = None,
                 __props__=None):
        """
        Describes the access policy assignment of Redis Enterprise database

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_policy_assignment_name: The name of the Redis Enterprise database access policy assignment.
        :param pulumi.Input[str] access_policy_name: Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
        :param pulumi.Input[str] cluster_name: The name of the Redis Enterprise cluster.
        :param pulumi.Input[str] database_name: The name of the Redis Enterprise database.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union['AccessPolicyAssignmentPropertiesUserArgs', 'AccessPolicyAssignmentPropertiesUserArgsDict']] user: The user associated with the access policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccessPolicyAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Describes the access policy assignment of Redis Enterprise database

        :param str resource_name: The name of the resource.
        :param AccessPolicyAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessPolicyAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policy_assignment_name: Optional[pulumi.Input[str]] = None,
                 access_policy_name: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[Union['AccessPolicyAssignmentPropertiesUserArgs', 'AccessPolicyAssignmentPropertiesUserArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessPolicyAssignmentArgs.__new__(AccessPolicyAssignmentArgs)

            __props__.__dict__["access_policy_assignment_name"] = access_policy_assignment_name
            if access_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'access_policy_name'")
            __props__.__dict__["access_policy_name"] = access_policy_name
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            if database_name is None and not opts.urn:
                raise TypeError("Missing required property 'database_name'")
            __props__.__dict__["database_name"] = database_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["type"] = None
        super(AccessPolicyAssignment, __self__).__init__(
            'azure-native:cache/v20240901preview:AccessPolicyAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AccessPolicyAssignment':
        """
        Get an existing AccessPolicyAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AccessPolicyAssignmentArgs.__new__(AccessPolicyAssignmentArgs)

        __props__.__dict__["access_policy_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["user"] = None
        return AccessPolicyAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessPolicyName")
    def access_policy_name(self) -> pulumi.Output[str]:
        """
        Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
        """
        return pulumi.get(self, "access_policy_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Current provisioning status of the access policy assignment.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output['outputs.AccessPolicyAssignmentPropertiesResponseUser']:
        """
        The user associated with the access policy.
        """
        return pulumi.get(self, "user")

