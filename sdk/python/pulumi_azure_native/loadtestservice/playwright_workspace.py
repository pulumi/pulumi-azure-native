# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['PlaywrightWorkspaceArgs', 'PlaywrightWorkspace']

@pulumi.input_type
class PlaywrightWorkspaceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[builtins.str],
                 local_auth: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 playwright_workspace_name: Optional[pulumi.Input[builtins.str]] = None,
                 regional_affinity: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a PlaywrightWorkspace resource.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[builtins.str, 'EnablementStatus']] local_auth: When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] playwright_workspace_name: The name of the PlaywrightWorkspace
        :param pulumi.Input[Union[builtins.str, 'EnablementStatus']] regional_affinity: This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if local_auth is None:
            local_auth = 'Disabled'
        if local_auth is not None:
            pulumi.set(__self__, "local_auth", local_auth)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if playwright_workspace_name is not None:
            pulumi.set(__self__, "playwright_workspace_name", playwright_workspace_name)
        if regional_affinity is None:
            regional_affinity = 'Enabled'
        if regional_affinity is not None:
            pulumi.set(__self__, "regional_affinity", regional_affinity)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="localAuth")
    def local_auth(self) -> Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]]:
        """
        When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations.
        """
        return pulumi.get(self, "local_auth")

    @local_auth.setter
    def local_auth(self, value: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]]):
        pulumi.set(self, "local_auth", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="playwrightWorkspaceName")
    def playwright_workspace_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the PlaywrightWorkspace
        """
        return pulumi.get(self, "playwright_workspace_name")

    @playwright_workspace_name.setter
    def playwright_workspace_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "playwright_workspace_name", value)

    @property
    @pulumi.getter(name="regionalAffinity")
    def regional_affinity(self) -> Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]]:
        """
        This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created.
        """
        return pulumi.get(self, "regional_affinity")

    @regional_affinity.setter
    def regional_affinity(self, value: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]]):
        pulumi.set(self, "regional_affinity", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("azure-native:loadtestservice:PlaywrightWorkspace")
class PlaywrightWorkspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 local_auth: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 playwright_workspace_name: Optional[pulumi.Input[builtins.str]] = None,
                 regional_affinity: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Playwright workspace resource.

        Uses Azure REST API version 2025-07-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[builtins.str, 'EnablementStatus']] local_auth: When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations.
        :param pulumi.Input[builtins.str] location: The geo-location where the resource lives
        :param pulumi.Input[builtins.str] playwright_workspace_name: The name of the PlaywrightWorkspace
        :param pulumi.Input[Union[builtins.str, 'EnablementStatus']] regional_affinity: This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created.
        :param pulumi.Input[builtins.str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlaywrightWorkspaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Playwright workspace resource.

        Uses Azure REST API version 2025-07-01-preview.

        :param str resource_name: The name of the resource.
        :param PlaywrightWorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlaywrightWorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 local_auth: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 playwright_workspace_name: Optional[pulumi.Input[builtins.str]] = None,
                 regional_affinity: Optional[pulumi.Input[Union[builtins.str, 'EnablementStatus']]] = None,
                 resource_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlaywrightWorkspaceArgs.__new__(PlaywrightWorkspaceArgs)

            if local_auth is None:
                local_auth = 'Disabled'
            __props__.__dict__["local_auth"] = local_auth
            __props__.__dict__["location"] = location
            __props__.__dict__["playwright_workspace_name"] = playwright_workspace_name
            if regional_affinity is None:
                regional_affinity = 'Enabled'
            __props__.__dict__["regional_affinity"] = regional_affinity
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["dataplane_uri"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:loadtestservice/v20250701preview:PlaywrightWorkspace")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(PlaywrightWorkspace, __self__).__init__(
            'azure-native:loadtestservice:PlaywrightWorkspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PlaywrightWorkspace':
        """
        Get an existing PlaywrightWorkspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PlaywrightWorkspaceArgs.__new__(PlaywrightWorkspaceArgs)

        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["dataplane_uri"] = None
        __props__.__dict__["local_auth"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["regional_affinity"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return PlaywrightWorkspace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[builtins.str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="dataplaneUri")
    def dataplane_uri(self) -> pulumi.Output[builtins.str]:
        """
        The workspace data plane URI.
        """
        return pulumi.get(self, "dataplane_uri")

    @property
    @pulumi.getter(name="localAuth")
    def local_auth(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations.
        """
        return pulumi.get(self, "local_auth")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[builtins.str]:
        """
        The status of the last resource operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="regionalAffinity")
    def regional_affinity(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created.
        """
        return pulumi.get(self, "regional_affinity")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

