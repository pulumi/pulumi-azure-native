# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMasterSitesControllerResult',
    'AwaitableGetMasterSitesControllerResult',
    'get_master_sites_controller',
    'get_master_sites_controller_output',
]

@pulumi.output_type
class GetMasterSitesControllerResult:
    """
    A MasterSite
    """
    def __init__(__self__, allow_multiple_sites=None, customer_storage_account_arm_id=None, id=None, location=None, name=None, nested_sites=None, private_endpoint_connections=None, provisioning_state=None, public_network_access=None, sites=None, system_data=None, tags=None, type=None):
        if allow_multiple_sites and not isinstance(allow_multiple_sites, bool):
            raise TypeError("Expected argument 'allow_multiple_sites' to be a bool")
        pulumi.set(__self__, "allow_multiple_sites", allow_multiple_sites)
        if customer_storage_account_arm_id and not isinstance(customer_storage_account_arm_id, str):
            raise TypeError("Expected argument 'customer_storage_account_arm_id' to be a str")
        pulumi.set(__self__, "customer_storage_account_arm_id", customer_storage_account_arm_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nested_sites and not isinstance(nested_sites, list):
            raise TypeError("Expected argument 'nested_sites' to be a list")
        pulumi.set(__self__, "nested_sites", nested_sites)
        if private_endpoint_connections and not isinstance(private_endpoint_connections, list):
            raise TypeError("Expected argument 'private_endpoint_connections' to be a list")
        pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if public_network_access and not isinstance(public_network_access, str):
            raise TypeError("Expected argument 'public_network_access' to be a str")
        pulumi.set(__self__, "public_network_access", public_network_access)
        if sites and not isinstance(sites, list):
            raise TypeError("Expected argument 'sites' to be a list")
        pulumi.set(__self__, "sites", sites)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowMultipleSites")
    def allow_multiple_sites(self) -> Optional[bool]:
        """
        Gets or sets a value indicating whether multiple sites per site type are
        allowed.
        """
        return pulumi.get(self, "allow_multiple_sites")

    @property
    @pulumi.getter(name="customerStorageAccountArmId")
    def customer_storage_account_arm_id(self) -> Optional[str]:
        """
        Gets or sets a value for customer storage account ARM id.
        """
        return pulumi.get(self, "customer_storage_account_arm_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nestedSites")
    def nested_sites(self) -> Sequence[str]:
        """
        Gets the nested sites under Master Site.
        """
        return pulumi.get(self, "nested_sites")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.PrivateEndpointConnectionResponse']:
        """
        Gets the private endpoint connections.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        provisioning state enum
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[str]:
        """
        Gets or sets the state of public network access.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter
    def sites(self) -> Optional[Sequence[str]]:
        """
        Gets or sets the sites that are a part of Master Site.
                    The key
        should contain the Site ARM name.
        """
        return pulumi.get(self, "sites")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetMasterSitesControllerResult(GetMasterSitesControllerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMasterSitesControllerResult(
            allow_multiple_sites=self.allow_multiple_sites,
            customer_storage_account_arm_id=self.customer_storage_account_arm_id,
            id=self.id,
            location=self.location,
            name=self.name,
            nested_sites=self.nested_sites,
            private_endpoint_connections=self.private_endpoint_connections,
            provisioning_state=self.provisioning_state,
            public_network_access=self.public_network_access,
            sites=self.sites,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_master_sites_controller(resource_group_name: Optional[str] = None,
                                site_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMasterSitesControllerResult:
    """
    Get a MasterSite


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str site_name: Site name
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:offazure/v20230606:getMasterSitesController', __args__, opts=opts, typ=GetMasterSitesControllerResult).value

    return AwaitableGetMasterSitesControllerResult(
        allow_multiple_sites=pulumi.get(__ret__, 'allow_multiple_sites'),
        customer_storage_account_arm_id=pulumi.get(__ret__, 'customer_storage_account_arm_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        nested_sites=pulumi.get(__ret__, 'nested_sites'),
        private_endpoint_connections=pulumi.get(__ret__, 'private_endpoint_connections'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        public_network_access=pulumi.get(__ret__, 'public_network_access'),
        sites=pulumi.get(__ret__, 'sites'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_master_sites_controller)
def get_master_sites_controller_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                                       site_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMasterSitesControllerResult]:
    """
    Get a MasterSite


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str site_name: Site name
    """
    ...
