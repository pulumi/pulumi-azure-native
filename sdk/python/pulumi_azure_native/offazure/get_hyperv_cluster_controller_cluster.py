# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetHypervClusterControllerClusterResult',
    'AwaitableGetHypervClusterControllerClusterResult',
    'get_hyperv_cluster_controller_cluster',
    'get_hyperv_cluster_controller_cluster_output',
]

@pulumi.output_type
class GetHypervClusterControllerClusterResult:
    """
    A cluster resource belonging to a site resource.
    """
    def __init__(__self__, created_timestamp=None, errors=None, fqdn=None, functional_level=None, host_fqdn_list=None, id=None, name=None, provisioning_state=None, run_as_account_id=None, status=None, system_data=None, type=None, updated_timestamp=None):
        if created_timestamp and not isinstance(created_timestamp, str):
            raise TypeError("Expected argument 'created_timestamp' to be a str")
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        if errors and not isinstance(errors, list):
            raise TypeError("Expected argument 'errors' to be a list")
        pulumi.set(__self__, "errors", errors)
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        pulumi.set(__self__, "fqdn", fqdn)
        if functional_level and not isinstance(functional_level, int):
            raise TypeError("Expected argument 'functional_level' to be a int")
        pulumi.set(__self__, "functional_level", functional_level)
        if host_fqdn_list and not isinstance(host_fqdn_list, list):
            raise TypeError("Expected argument 'host_fqdn_list' to be a list")
        pulumi.set(__self__, "host_fqdn_list", host_fqdn_list)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if run_as_account_id and not isinstance(run_as_account_id, str):
            raise TypeError("Expected argument 'run_as_account_id' to be a str")
        pulumi.set(__self__, "run_as_account_id", run_as_account_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_timestamp and not isinstance(updated_timestamp, str):
            raise TypeError("Expected argument 'updated_timestamp' to be a str")
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)

    @property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> str:
        """
        Gets the timestamp marking Hyper-V cluster creation.
        """
        return pulumi.get(self, "created_timestamp")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.HealthErrorDetailsResponse']:
        """
        Gets the errors.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        Gets or sets the FQDN/IPAddress of the Hyper-V cluster.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="functionalLevel")
    def functional_level(self) -> int:
        """
        Gets the functional level of the Hyper-V cluster.
        """
        return pulumi.get(self, "functional_level")

    @property
    @pulumi.getter(name="hostFqdnList")
    def host_fqdn_list(self) -> Optional[Sequence[str]]:
        """
        Gets or sets list of hosts (FQDN) currently being tracked by the cluster.
        """
        return pulumi.get(self, "host_fqdn_list")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="runAsAccountId")
    def run_as_account_id(self) -> Optional[str]:
        """
        Gets or sets Run as account ID of the Hyper-V cluster.
        """
        return pulumi.get(self, "run_as_account_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Gets the status of the Hyper-V cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> str:
        """
        Gets the timestamp marking last updated on the Hyper-V cluster.
        """
        return pulumi.get(self, "updated_timestamp")


class AwaitableGetHypervClusterControllerClusterResult(GetHypervClusterControllerClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHypervClusterControllerClusterResult(
            created_timestamp=self.created_timestamp,
            errors=self.errors,
            fqdn=self.fqdn,
            functional_level=self.functional_level,
            host_fqdn_list=self.host_fqdn_list,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            run_as_account_id=self.run_as_account_id,
            status=self.status,
            system_data=self.system_data,
            type=self.type,
            updated_timestamp=self.updated_timestamp)


def get_hyperv_cluster_controller_cluster(cluster_name: Optional[str] = None,
                                          resource_group_name: Optional[str] = None,
                                          site_name: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHypervClusterControllerClusterResult:
    """
    Method to get a Hyper-V cluster.
    Azure REST API version: 2023-06-06.


    :param str cluster_name:  Cluster ARM name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str site_name: Site name
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:offazure:getHypervClusterControllerCluster', __args__, opts=opts, typ=GetHypervClusterControllerClusterResult).value

    return AwaitableGetHypervClusterControllerClusterResult(
        created_timestamp=pulumi.get(__ret__, 'created_timestamp'),
        errors=pulumi.get(__ret__, 'errors'),
        fqdn=pulumi.get(__ret__, 'fqdn'),
        functional_level=pulumi.get(__ret__, 'functional_level'),
        host_fqdn_list=pulumi.get(__ret__, 'host_fqdn_list'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        run_as_account_id=pulumi.get(__ret__, 'run_as_account_id'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        updated_timestamp=pulumi.get(__ret__, 'updated_timestamp'))


@_utilities.lift_output_func(get_hyperv_cluster_controller_cluster)
def get_hyperv_cluster_controller_cluster_output(cluster_name: Optional[pulumi.Input[str]] = None,
                                                 resource_group_name: Optional[pulumi.Input[str]] = None,
                                                 site_name: Optional[pulumi.Input[str]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHypervClusterControllerClusterResult]:
    """
    Method to get a Hyper-V cluster.
    Azure REST API version: 2023-06-06.


    :param str cluster_name:  Cluster ARM name
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str site_name: Site name
    """
    ...
