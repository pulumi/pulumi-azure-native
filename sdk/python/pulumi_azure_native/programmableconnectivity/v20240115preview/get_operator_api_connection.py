# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetOperatorApiConnectionResult',
    'AwaitableGetOperatorApiConnectionResult',
    'get_operator_api_connection',
    'get_operator_api_connection_output',
]

@pulumi.output_type
class GetOperatorApiConnectionResult:
    """
    A Programmable Connectivity Operator API Connection resource
    """
    def __init__(__self__, account_type=None, app_id=None, camara_api_name=None, configured_application=None, gateway_id=None, id=None, location=None, name=None, operator_api_plan_id=None, operator_name=None, provisioning_state=None, saas_properties=None, status=None, system_data=None, tags=None, type=None):
        if account_type and not isinstance(account_type, str):
            raise TypeError("Expected argument 'account_type' to be a str")
        pulumi.set(__self__, "account_type", account_type)
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if camara_api_name and not isinstance(camara_api_name, str):
            raise TypeError("Expected argument 'camara_api_name' to be a str")
        pulumi.set(__self__, "camara_api_name", camara_api_name)
        if configured_application and not isinstance(configured_application, dict):
            raise TypeError("Expected argument 'configured_application' to be a dict")
        pulumi.set(__self__, "configured_application", configured_application)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operator_api_plan_id and not isinstance(operator_api_plan_id, str):
            raise TypeError("Expected argument 'operator_api_plan_id' to be a str")
        pulumi.set(__self__, "operator_api_plan_id", operator_api_plan_id)
        if operator_name and not isinstance(operator_name, str):
            raise TypeError("Expected argument 'operator_name' to be a str")
        pulumi.set(__self__, "operator_name", operator_name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if saas_properties and not isinstance(saas_properties, dict):
            raise TypeError("Expected argument 'saas_properties' to be a dict")
        pulumi.set(__self__, "saas_properties", saas_properties)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        Type of the account the user has with the Operator's Network API infrastructure. AzureManaged | UserManaged.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        Application ID of the App Developer that is registered with the Operator in a specific country/region.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="camaraApiName")
    def camara_api_name(self) -> str:
        """
        The Network API for the current operator in the country/region provided in the linked Operator API Plan.
        """
        return pulumi.get(self, "camara_api_name")

    @property
    @pulumi.getter(name="configuredApplication")
    def configured_application(self) -> Optional['outputs.ApplicationPropertiesResponse']:
        """
        Details about the Application that would use the Operator's Network APIs.
        """
        return pulumi.get(self, "configured_application")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        Reference to the APC Gateway resource ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatorApiPlanId")
    def operator_api_plan_id(self) -> str:
        """
        Reference to the Operator API Plan Resource ID.
        """
        return pulumi.get(self, "operator_api_plan_id")

    @property
    @pulumi.getter(name="operatorName")
    def operator_name(self) -> str:
        """
        Name of the Operator in the linked Operator API Plan belongs to.
        """
        return pulumi.get(self, "operator_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="saasProperties")
    def saas_properties(self) -> Optional['outputs.SaasPropertiesResponse']:
        """
        Details about the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_properties")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.StatusResponse':
        """
        The status of the OperatorApiConnection resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetOperatorApiConnectionResult(GetOperatorApiConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOperatorApiConnectionResult(
            account_type=self.account_type,
            app_id=self.app_id,
            camara_api_name=self.camara_api_name,
            configured_application=self.configured_application,
            gateway_id=self.gateway_id,
            id=self.id,
            location=self.location,
            name=self.name,
            operator_api_plan_id=self.operator_api_plan_id,
            operator_name=self.operator_name,
            provisioning_state=self.provisioning_state,
            saas_properties=self.saas_properties,
            status=self.status,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_operator_api_connection(operator_api_connection_name: Optional[str] = None,
                                resource_group_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOperatorApiConnectionResult:
    """
    Get an Operator API Connection.


    :param str operator_api_connection_name: Azure Programmable Connectivity (APC) Operator API Connection Name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['operatorApiConnectionName'] = operator_api_connection_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:programmableconnectivity/v20240115preview:getOperatorApiConnection', __args__, opts=opts, typ=GetOperatorApiConnectionResult).value

    return AwaitableGetOperatorApiConnectionResult(
        account_type=pulumi.get(__ret__, 'account_type'),
        app_id=pulumi.get(__ret__, 'app_id'),
        camara_api_name=pulumi.get(__ret__, 'camara_api_name'),
        configured_application=pulumi.get(__ret__, 'configured_application'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        operator_api_plan_id=pulumi.get(__ret__, 'operator_api_plan_id'),
        operator_name=pulumi.get(__ret__, 'operator_name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        saas_properties=pulumi.get(__ret__, 'saas_properties'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_operator_api_connection)
def get_operator_api_connection_output(operator_api_connection_name: Optional[pulumi.Input[str]] = None,
                                       resource_group_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOperatorApiConnectionResult]:
    """
    Get an Operator API Connection.


    :param str operator_api_connection_name: Azure Programmable Connectivity (APC) Operator API Connection Name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
