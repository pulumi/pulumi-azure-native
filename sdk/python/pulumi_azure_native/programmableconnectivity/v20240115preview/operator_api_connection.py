# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['OperatorApiConnectionArgs', 'OperatorApiConnection']

@pulumi.input_type
class OperatorApiConnectionArgs:
    def __init__(__self__, *,
                 account_type: pulumi.Input[Union[str, 'AccountType']],
                 gateway_id: pulumi.Input[str],
                 operator_api_plan_id: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_secret: Optional[pulumi.Input[str]] = None,
                 configured_application: Optional[pulumi.Input['ApplicationPropertiesArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 operator_api_connection_name: Optional[pulumi.Input[str]] = None,
                 saas_properties: Optional[pulumi.Input['SaasPropertiesArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a OperatorApiConnection resource.
        :param pulumi.Input[Union[str, 'AccountType']] account_type: Type of the account the user has with the Operator's Network API infrastructure. AzureManaged | UserManaged.
        :param pulumi.Input[str] gateway_id: Reference to the APC Gateway resource ID.
        :param pulumi.Input[str] operator_api_plan_id: Reference to the Operator API Plan Resource ID.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] app_id: Application ID of the App Developer that is registered with the Operator in a specific country/region.
        :param pulumi.Input[str] app_secret: Application secret linked to the 'appId'. This should be stored securely and is not returned back when the resource information is read.
        :param pulumi.Input['ApplicationPropertiesArgs'] configured_application: Details about the Application that would use the Operator's Network APIs.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] operator_api_connection_name: Azure Programmable Connectivity (APC) Operator API Connection Name.
        :param pulumi.Input['SaasPropertiesArgs'] saas_properties: Details about the SaaS offer purchased from the marketplace.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "operator_api_plan_id", operator_api_plan_id)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_secret is not None:
            pulumi.set(__self__, "app_secret", app_secret)
        if configured_application is not None:
            pulumi.set(__self__, "configured_application", configured_application)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if operator_api_connection_name is not None:
            pulumi.set(__self__, "operator_api_connection_name", operator_api_connection_name)
        if saas_properties is not None:
            pulumi.set(__self__, "saas_properties", saas_properties)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> pulumi.Input[Union[str, 'AccountType']]:
        """
        Type of the account the user has with the Operator's Network API infrastructure. AzureManaged | UserManaged.
        """
        return pulumi.get(self, "account_type")

    @account_type.setter
    def account_type(self, value: pulumi.Input[Union[str, 'AccountType']]):
        pulumi.set(self, "account_type", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        Reference to the APC Gateway resource ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="operatorApiPlanId")
    def operator_api_plan_id(self) -> pulumi.Input[str]:
        """
        Reference to the Operator API Plan Resource ID.
        """
        return pulumi.get(self, "operator_api_plan_id")

    @operator_api_plan_id.setter
    def operator_api_plan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator_api_plan_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Application ID of the App Developer that is registered with the Operator in a specific country/region.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Application secret linked to the 'appId'. This should be stored securely and is not returned back when the resource information is read.
        """
        return pulumi.get(self, "app_secret")

    @app_secret.setter
    def app_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_secret", value)

    @property
    @pulumi.getter(name="configuredApplication")
    def configured_application(self) -> Optional[pulumi.Input['ApplicationPropertiesArgs']]:
        """
        Details about the Application that would use the Operator's Network APIs.
        """
        return pulumi.get(self, "configured_application")

    @configured_application.setter
    def configured_application(self, value: Optional[pulumi.Input['ApplicationPropertiesArgs']]):
        pulumi.set(self, "configured_application", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="operatorApiConnectionName")
    def operator_api_connection_name(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Programmable Connectivity (APC) Operator API Connection Name.
        """
        return pulumi.get(self, "operator_api_connection_name")

    @operator_api_connection_name.setter
    def operator_api_connection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator_api_connection_name", value)

    @property
    @pulumi.getter(name="saasProperties")
    def saas_properties(self) -> Optional[pulumi.Input['SaasPropertiesArgs']]:
        """
        Details about the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_properties")

    @saas_properties.setter
    def saas_properties(self, value: Optional[pulumi.Input['SaasPropertiesArgs']]):
        pulumi.set(self, "saas_properties", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class OperatorApiConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_type: Optional[pulumi.Input[Union[str, 'AccountType']]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_secret: Optional[pulumi.Input[str]] = None,
                 configured_application: Optional[pulumi.Input[Union['ApplicationPropertiesArgs', 'ApplicationPropertiesArgsDict']]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 operator_api_connection_name: Optional[pulumi.Input[str]] = None,
                 operator_api_plan_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 saas_properties: Optional[pulumi.Input[Union['SaasPropertiesArgs', 'SaasPropertiesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        A Programmable Connectivity Operator API Connection resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[str, 'AccountType']] account_type: Type of the account the user has with the Operator's Network API infrastructure. AzureManaged | UserManaged.
        :param pulumi.Input[str] app_id: Application ID of the App Developer that is registered with the Operator in a specific country/region.
        :param pulumi.Input[str] app_secret: Application secret linked to the 'appId'. This should be stored securely and is not returned back when the resource information is read.
        :param pulumi.Input[Union['ApplicationPropertiesArgs', 'ApplicationPropertiesArgsDict']] configured_application: Details about the Application that would use the Operator's Network APIs.
        :param pulumi.Input[str] gateway_id: Reference to the APC Gateway resource ID.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] operator_api_connection_name: Azure Programmable Connectivity (APC) Operator API Connection Name.
        :param pulumi.Input[str] operator_api_plan_id: Reference to the Operator API Plan Resource ID.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union['SaasPropertiesArgs', 'SaasPropertiesArgsDict']] saas_properties: Details about the SaaS offer purchased from the marketplace.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OperatorApiConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Programmable Connectivity Operator API Connection resource

        :param str resource_name: The name of the resource.
        :param OperatorApiConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OperatorApiConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_type: Optional[pulumi.Input[Union[str, 'AccountType']]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_secret: Optional[pulumi.Input[str]] = None,
                 configured_application: Optional[pulumi.Input[Union['ApplicationPropertiesArgs', 'ApplicationPropertiesArgsDict']]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 operator_api_connection_name: Optional[pulumi.Input[str]] = None,
                 operator_api_plan_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 saas_properties: Optional[pulumi.Input[Union['SaasPropertiesArgs', 'SaasPropertiesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OperatorApiConnectionArgs.__new__(OperatorApiConnectionArgs)

            if account_type is None and not opts.urn:
                raise TypeError("Missing required property 'account_type'")
            __props__.__dict__["account_type"] = account_type
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["app_secret"] = app_secret
            __props__.__dict__["configured_application"] = configured_application
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["location"] = location
            __props__.__dict__["operator_api_connection_name"] = operator_api_connection_name
            if operator_api_plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'operator_api_plan_id'")
            __props__.__dict__["operator_api_plan_id"] = operator_api_plan_id
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["saas_properties"] = saas_properties
            __props__.__dict__["tags"] = tags
            __props__.__dict__["camara_api_name"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["operator_name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:programmableconnectivity:OperatorApiConnection")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(OperatorApiConnection, __self__).__init__(
            'azure-native:programmableconnectivity/v20240115preview:OperatorApiConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OperatorApiConnection':
        """
        Get an existing OperatorApiConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OperatorApiConnectionArgs.__new__(OperatorApiConnectionArgs)

        __props__.__dict__["account_type"] = None
        __props__.__dict__["app_id"] = None
        __props__.__dict__["camara_api_name"] = None
        __props__.__dict__["configured_application"] = None
        __props__.__dict__["gateway_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["operator_api_plan_id"] = None
        __props__.__dict__["operator_name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["saas_properties"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return OperatorApiConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> pulumi.Output[str]:
        """
        Type of the account the user has with the Operator's Network API infrastructure. AzureManaged | UserManaged.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[Optional[str]]:
        """
        Application ID of the App Developer that is registered with the Operator in a specific country/region.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="camaraApiName")
    def camara_api_name(self) -> pulumi.Output[str]:
        """
        The Network API for the current operator in the country/region provided in the linked Operator API Plan.
        """
        return pulumi.get(self, "camara_api_name")

    @property
    @pulumi.getter(name="configuredApplication")
    def configured_application(self) -> pulumi.Output[Optional['outputs.ApplicationPropertiesResponse']]:
        """
        Details about the Application that would use the Operator's Network APIs.
        """
        return pulumi.get(self, "configured_application")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        Reference to the APC Gateway resource ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatorApiPlanId")
    def operator_api_plan_id(self) -> pulumi.Output[str]:
        """
        Reference to the Operator API Plan Resource ID.
        """
        return pulumi.get(self, "operator_api_plan_id")

    @property
    @pulumi.getter(name="operatorName")
    def operator_name(self) -> pulumi.Output[str]:
        """
        Name of the Operator in the linked Operator API Plan belongs to.
        """
        return pulumi.get(self, "operator_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="saasProperties")
    def saas_properties(self) -> pulumi.Output[Optional['outputs.SaasPropertiesResponse']]:
        """
        Details about the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_properties")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.StatusResponse']:
        """
        The status of the OperatorApiConnection resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

