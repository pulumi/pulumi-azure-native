# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationPropertiesArgs',
    'ApplicationPropertiesArgsDict',
    'SaasPropertiesArgs',
    'SaasPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationPropertiesArgsDict(TypedDict):
        """
        Details about the Application that would use the Operator's Network APIs.
        """
        application_description: NotRequired[pulumi.Input[builtins.str]]
        """
        Description of the application.
        """
        application_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The category that describes the application.
        """
        legal_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Legal name of the organization owning the application.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the application.
        """
        organization_description: NotRequired[pulumi.Input[builtins.str]]
        """
        A description of the organization owning the application.
        """
        privacy_contact_email_address: NotRequired[pulumi.Input[builtins.str]]
        """
        Email address of the Privacy contact or Data Protection officer of the organization.
        """
        tax_number: NotRequired[pulumi.Input[builtins.str]]
        """
        Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased.
        """
elif False:
    ApplicationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPropertiesArgs:
    def __init__(__self__, *,
                 application_description: Optional[pulumi.Input[builtins.str]] = None,
                 application_type: Optional[pulumi.Input[builtins.str]] = None,
                 legal_name: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 organization_description: Optional[pulumi.Input[builtins.str]] = None,
                 privacy_contact_email_address: Optional[pulumi.Input[builtins.str]] = None,
                 tax_number: Optional[pulumi.Input[builtins.str]] = None):
        """
        Details about the Application that would use the Operator's Network APIs.
        :param pulumi.Input[builtins.str] application_description: Description of the application.
        :param pulumi.Input[builtins.str] application_type: The category that describes the application.
        :param pulumi.Input[builtins.str] legal_name: Legal name of the organization owning the application.
        :param pulumi.Input[builtins.str] name: Name of the application.
        :param pulumi.Input[builtins.str] organization_description: A description of the organization owning the application.
        :param pulumi.Input[builtins.str] privacy_contact_email_address: Email address of the Privacy contact or Data Protection officer of the organization.
        :param pulumi.Input[builtins.str] tax_number: Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased.
        """
        if application_description is not None:
            pulumi.set(__self__, "application_description", application_description)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if legal_name is not None:
            pulumi.set(__self__, "legal_name", legal_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_description is not None:
            pulumi.set(__self__, "organization_description", organization_description)
        if privacy_contact_email_address is not None:
            pulumi.set(__self__, "privacy_contact_email_address", privacy_contact_email_address)
        if tax_number is not None:
            pulumi.set(__self__, "tax_number", tax_number)

    @property
    @pulumi.getter(name="applicationDescription")
    def application_description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the application.
        """
        return pulumi.get(self, "application_description")

    @application_description.setter
    def application_description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_description", value)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The category that describes the application.
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter(name="legalName")
    def legal_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Legal name of the organization owning the application.
        """
        return pulumi.get(self, "legal_name")

    @legal_name.setter
    def legal_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "legal_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationDescription")
    def organization_description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description of the organization owning the application.
        """
        return pulumi.get(self, "organization_description")

    @organization_description.setter
    def organization_description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization_description", value)

    @property
    @pulumi.getter(name="privacyContactEmailAddress")
    def privacy_contact_email_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Email address of the Privacy contact or Data Protection officer of the organization.
        """
        return pulumi.get(self, "privacy_contact_email_address")

    @privacy_contact_email_address.setter
    def privacy_contact_email_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "privacy_contact_email_address", value)

    @property
    @pulumi.getter(name="taxNumber")
    def tax_number(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased.
        """
        return pulumi.get(self, "tax_number")

    @tax_number.setter
    def tax_number(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tax_number", value)


if not MYPY:
    class SaasPropertiesArgsDict(TypedDict):
        """
        Details about the SaaS offer purchased from the marketplace.
        """
        saas_resource_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Resource ID of the SaaS offer purchased from the marketplace.
        """
        saas_subscription_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Subscription ID of the SaaS offer purchased from the marketplace.
        """
elif False:
    SaasPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SaasPropertiesArgs:
    def __init__(__self__, *,
                 saas_resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 saas_subscription_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Details about the SaaS offer purchased from the marketplace.
        :param pulumi.Input[builtins.str] saas_resource_id: Resource ID of the SaaS offer purchased from the marketplace.
        :param pulumi.Input[builtins.str] saas_subscription_id: Subscription ID of the SaaS offer purchased from the marketplace.
        """
        if saas_resource_id is not None:
            pulumi.set(__self__, "saas_resource_id", saas_resource_id)
        if saas_subscription_id is not None:
            pulumi.set(__self__, "saas_subscription_id", saas_subscription_id)

    @property
    @pulumi.getter(name="saasResourceId")
    def saas_resource_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Resource ID of the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_resource_id")

    @saas_resource_id.setter
    def saas_resource_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "saas_resource_id", value)

    @property
    @pulumi.getter(name="saasSubscriptionId")
    def saas_subscription_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Subscription ID of the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_subscription_id")

    @saas_subscription_id.setter
    def saas_subscription_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "saas_subscription_id", value)


