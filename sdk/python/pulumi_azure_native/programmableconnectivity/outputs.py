# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationPropertiesResponse',
    'SaasPropertiesResponse',
    'StatusResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class ApplicationPropertiesResponse(dict):
    """
    Details about the Application that would use the Operator's Network APIs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationDescription":
            suggest = "application_description"
        elif key == "applicationType":
            suggest = "application_type"
        elif key == "legalName":
            suggest = "legal_name"
        elif key == "organizationDescription":
            suggest = "organization_description"
        elif key == "privacyContactEmailAddress":
            suggest = "privacy_contact_email_address"
        elif key == "taxNumber":
            suggest = "tax_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_description: Optional[_builtins.str] = None,
                 application_type: Optional[_builtins.str] = None,
                 legal_name: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 organization_description: Optional[_builtins.str] = None,
                 privacy_contact_email_address: Optional[_builtins.str] = None,
                 tax_number: Optional[_builtins.str] = None):
        """
        Details about the Application that would use the Operator's Network APIs.
        :param _builtins.str application_description: Description of the application.
        :param _builtins.str application_type: The category that describes the application.
        :param _builtins.str legal_name: Legal name of the organization owning the application.
        :param _builtins.str name: Name of the application.
        :param _builtins.str organization_description: A description of the organization owning the application.
        :param _builtins.str privacy_contact_email_address: Email address of the Privacy contact or Data Protection officer of the organization.
        :param _builtins.str tax_number: Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased.
        """
        if application_description is not None:
            pulumi.set(__self__, "application_description", application_description)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if legal_name is not None:
            pulumi.set(__self__, "legal_name", legal_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_description is not None:
            pulumi.set(__self__, "organization_description", organization_description)
        if privacy_contact_email_address is not None:
            pulumi.set(__self__, "privacy_contact_email_address", privacy_contact_email_address)
        if tax_number is not None:
            pulumi.set(__self__, "tax_number", tax_number)

    @_builtins.property
    @pulumi.getter(name="applicationDescription")
    def application_description(self) -> Optional[_builtins.str]:
        """
        Description of the application.
        """
        return pulumi.get(self, "application_description")

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[_builtins.str]:
        """
        The category that describes the application.
        """
        return pulumi.get(self, "application_type")

    @_builtins.property
    @pulumi.getter(name="legalName")
    def legal_name(self) -> Optional[_builtins.str]:
        """
        Legal name of the organization owning the application.
        """
        return pulumi.get(self, "legal_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationDescription")
    def organization_description(self) -> Optional[_builtins.str]:
        """
        A description of the organization owning the application.
        """
        return pulumi.get(self, "organization_description")

    @_builtins.property
    @pulumi.getter(name="privacyContactEmailAddress")
    def privacy_contact_email_address(self) -> Optional[_builtins.str]:
        """
        Email address of the Privacy contact or Data Protection officer of the organization.
        """
        return pulumi.get(self, "privacy_contact_email_address")

    @_builtins.property
    @pulumi.getter(name="taxNumber")
    def tax_number(self) -> Optional[_builtins.str]:
        """
        Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased.
        """
        return pulumi.get(self, "tax_number")


@pulumi.output_type
class SaasPropertiesResponse(dict):
    """
    Details about the SaaS offer purchased from the marketplace.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "saasResourceId":
            suggest = "saas_resource_id"
        elif key == "saasSubscriptionId":
            suggest = "saas_subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SaasPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SaasPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SaasPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 saas_resource_id: Optional[_builtins.str] = None,
                 saas_subscription_id: Optional[_builtins.str] = None):
        """
        Details about the SaaS offer purchased from the marketplace.
        :param _builtins.str saas_resource_id: Resource ID of the SaaS offer purchased from the marketplace.
        :param _builtins.str saas_subscription_id: Subscription ID of the SaaS offer purchased from the marketplace.
        """
        if saas_resource_id is not None:
            pulumi.set(__self__, "saas_resource_id", saas_resource_id)
        if saas_subscription_id is not None:
            pulumi.set(__self__, "saas_subscription_id", saas_subscription_id)

    @_builtins.property
    @pulumi.getter(name="saasResourceId")
    def saas_resource_id(self) -> Optional[_builtins.str]:
        """
        Resource ID of the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_resource_id")

    @_builtins.property
    @pulumi.getter(name="saasSubscriptionId")
    def saas_subscription_id(self) -> Optional[_builtins.str]:
        """
        Subscription ID of the SaaS offer purchased from the marketplace.
        """
        return pulumi.get(self, "saas_subscription_id")


@pulumi.output_type
class StatusResponse(dict):
    """
    Description of the current status of the OperatorApiConnection resource.
    """
    def __init__(__self__, *,
                 reason: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        Description of the current status of the OperatorApiConnection resource.
        :param _builtins.str reason: Explanation of the current state of the OperatorApiConnection resource.
        :param _builtins.str state: Current state of the OperatorApiConnection resource.
        """
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def reason(self) -> Optional[_builtins.str]:
        """
        Explanation of the current state of the OperatorApiConnection resource.
        """
        return pulumi.get(self, "reason")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        Current state of the OperatorApiConnection resource.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


