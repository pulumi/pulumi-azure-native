# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AuthorizationProfileResponse',
    'SubscriptionFeatureRegistrationResponseProperties',
]

@pulumi.output_type
class AuthorizationProfileResponse(dict):
    """
    Authorization Profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvedTime":
            suggest = "approved_time"
        elif key == "requestedTime":
            suggest = "requested_time"
        elif key == "requesterObjectId":
            suggest = "requester_object_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthorizationProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthorizationProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthorizationProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approved_time: _builtins.str,
                 approver: _builtins.str,
                 requested_time: _builtins.str,
                 requester: _builtins.str,
                 requester_object_id: _builtins.str):
        """
        Authorization Profile
        :param _builtins.str approved_time: The approved time
        :param _builtins.str approver: The approver
        :param _builtins.str requested_time: The requested time
        :param _builtins.str requester: The requester
        :param _builtins.str requester_object_id: The requester object id
        """
        pulumi.set(__self__, "approved_time", approved_time)
        pulumi.set(__self__, "approver", approver)
        pulumi.set(__self__, "requested_time", requested_time)
        pulumi.set(__self__, "requester", requester)
        pulumi.set(__self__, "requester_object_id", requester_object_id)

    @_builtins.property
    @pulumi.getter(name="approvedTime")
    def approved_time(self) -> _builtins.str:
        """
        The approved time
        """
        return pulumi.get(self, "approved_time")

    @_builtins.property
    @pulumi.getter
    def approver(self) -> _builtins.str:
        """
        The approver
        """
        return pulumi.get(self, "approver")

    @_builtins.property
    @pulumi.getter(name="requestedTime")
    def requested_time(self) -> _builtins.str:
        """
        The requested time
        """
        return pulumi.get(self, "requested_time")

    @_builtins.property
    @pulumi.getter
    def requester(self) -> _builtins.str:
        """
        The requester
        """
        return pulumi.get(self, "requester")

    @_builtins.property
    @pulumi.getter(name="requesterObjectId")
    def requester_object_id(self) -> _builtins.str:
        """
        The requester object id
        """
        return pulumi.get(self, "requester_object_id")


@pulumi.output_type
class SubscriptionFeatureRegistrationResponseProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvalType":
            suggest = "approval_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "documentationLink":
            suggest = "documentation_link"
        elif key == "featureName":
            suggest = "feature_name"
        elif key == "providerNamespace":
            suggest = "provider_namespace"
        elif key == "registrationDate":
            suggest = "registration_date"
        elif key == "releaseDate":
            suggest = "release_date"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "authorizationProfile":
            suggest = "authorization_profile"
        elif key == "shouldFeatureDisplayInPortal":
            suggest = "should_feature_display_in_portal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionFeatureRegistrationResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionFeatureRegistrationResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionFeatureRegistrationResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approval_type: _builtins.str,
                 display_name: _builtins.str,
                 documentation_link: _builtins.str,
                 feature_name: _builtins.str,
                 provider_namespace: _builtins.str,
                 registration_date: _builtins.str,
                 release_date: _builtins.str,
                 subscription_id: _builtins.str,
                 tenant_id: _builtins.str,
                 authorization_profile: Optional['outputs.AuthorizationProfileResponse'] = None,
                 description: Optional[_builtins.str] = None,
                 metadata: Optional[Mapping[str, _builtins.str]] = None,
                 should_feature_display_in_portal: Optional[_builtins.bool] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str approval_type: The feature approval type.
        :param _builtins.str display_name: The featureDisplayName.
        :param _builtins.str documentation_link: The feature documentation link.
        :param _builtins.str feature_name: The featureName.
        :param _builtins.str provider_namespace: The providerNamespace.
        :param _builtins.str registration_date: The feature registration date.
        :param _builtins.str release_date: The feature release date.
        :param _builtins.str subscription_id: The subscriptionId.
        :param _builtins.str tenant_id: The tenantId.
        :param 'AuthorizationProfileResponse' authorization_profile: Authorization Profile
        :param _builtins.str description: The feature description.
        :param Mapping[str, _builtins.str] metadata: Key-value pairs for meta data.
        :param _builtins.bool should_feature_display_in_portal: Indicates whether feature should be displayed in Portal.
        :param _builtins.str state: The state.
        """
        pulumi.set(__self__, "approval_type", approval_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "documentation_link", documentation_link)
        pulumi.set(__self__, "feature_name", feature_name)
        pulumi.set(__self__, "provider_namespace", provider_namespace)
        pulumi.set(__self__, "registration_date", registration_date)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if authorization_profile is not None:
            pulumi.set(__self__, "authorization_profile", authorization_profile)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if should_feature_display_in_portal is None:
            should_feature_display_in_portal = False
        if should_feature_display_in_portal is not None:
            pulumi.set(__self__, "should_feature_display_in_portal", should_feature_display_in_portal)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="approvalType")
    def approval_type(self) -> _builtins.str:
        """
        The feature approval type.
        """
        return pulumi.get(self, "approval_type")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The featureDisplayName.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="documentationLink")
    def documentation_link(self) -> _builtins.str:
        """
        The feature documentation link.
        """
        return pulumi.get(self, "documentation_link")

    @_builtins.property
    @pulumi.getter(name="featureName")
    def feature_name(self) -> _builtins.str:
        """
        The featureName.
        """
        return pulumi.get(self, "feature_name")

    @_builtins.property
    @pulumi.getter(name="providerNamespace")
    def provider_namespace(self) -> _builtins.str:
        """
        The providerNamespace.
        """
        return pulumi.get(self, "provider_namespace")

    @_builtins.property
    @pulumi.getter(name="registrationDate")
    def registration_date(self) -> _builtins.str:
        """
        The feature registration date.
        """
        return pulumi.get(self, "registration_date")

    @_builtins.property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> _builtins.str:
        """
        The feature release date.
        """
        return pulumi.get(self, "release_date")

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> _builtins.str:
        """
        The subscriptionId.
        """
        return pulumi.get(self, "subscription_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenantId.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="authorizationProfile")
    def authorization_profile(self) -> Optional['outputs.AuthorizationProfileResponse']:
        """
        Authorization Profile
        """
        return pulumi.get(self, "authorization_profile")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The feature description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value pairs for meta data.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="shouldFeatureDisplayInPortal")
    def should_feature_display_in_portal(self) -> Optional[_builtins.bool]:
        """
        Indicates whether feature should be displayed in Portal.
        """
        return pulumi.get(self, "should_feature_display_in_portal")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state.
        """
        return pulumi.get(self, "state")


