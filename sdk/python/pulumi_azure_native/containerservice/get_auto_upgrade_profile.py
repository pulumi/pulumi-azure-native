# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoUpgradeProfileResult',
    'AwaitableGetAutoUpgradeProfileResult',
    'get_auto_upgrade_profile',
    'get_auto_upgrade_profile_output',
]

@pulumi.output_type
class GetAutoUpgradeProfileResult:
    """
    The AutoUpgradeProfile resource.
    """
    def __init__(__self__, channel=None, disabled=None, e_tag=None, id=None, name=None, node_image_selection=None, provisioning_state=None, system_data=None, type=None, update_strategy_id=None):
        if channel and not isinstance(channel, str):
            raise TypeError("Expected argument 'channel' to be a str")
        pulumi.set(__self__, "channel", channel)
        if disabled and not isinstance(disabled, bool):
            raise TypeError("Expected argument 'disabled' to be a bool")
        pulumi.set(__self__, "disabled", disabled)
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        pulumi.set(__self__, "e_tag", e_tag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_image_selection and not isinstance(node_image_selection, dict):
            raise TypeError("Expected argument 'node_image_selection' to be a dict")
        pulumi.set(__self__, "node_image_selection", node_image_selection)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_strategy_id and not isinstance(update_strategy_id, str):
            raise TypeError("Expected argument 'update_strategy_id' to be a str")
        pulumi.set(__self__, "update_strategy_id", update_strategy_id)

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Configures how auto-upgrade will be run.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
        If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
        This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
        By default, this is set to False.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> str:
        """
        If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeImageSelection")
    def node_image_selection(self) -> Optional['outputs.AutoUpgradeNodeImageSelectionResponse']:
        """
        The node image upgrade to be applied to the target clusters in auto upgrade.
        """
        return pulumi.get(self, "node_image_selection")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the AutoUpgradeProfile resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateStrategyId")
    def update_strategy_id(self) -> Optional[str]:
        """
        The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
        """
        return pulumi.get(self, "update_strategy_id")


class AwaitableGetAutoUpgradeProfileResult(GetAutoUpgradeProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoUpgradeProfileResult(
            channel=self.channel,
            disabled=self.disabled,
            e_tag=self.e_tag,
            id=self.id,
            name=self.name,
            node_image_selection=self.node_image_selection,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            type=self.type,
            update_strategy_id=self.update_strategy_id)


def get_auto_upgrade_profile(auto_upgrade_profile_name: Optional[str] = None,
                             fleet_name: Optional[str] = None,
                             resource_group_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoUpgradeProfileResult:
    """
    Get a AutoUpgradeProfile
    Azure REST API version: 2024-05-02-preview.


    :param str auto_upgrade_profile_name: The name of the AutoUpgradeProfile resource.
    :param str fleet_name: The name of the Fleet resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['autoUpgradeProfileName'] = auto_upgrade_profile_name
    __args__['fleetName'] = fleet_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:containerservice:getAutoUpgradeProfile', __args__, opts=opts, typ=GetAutoUpgradeProfileResult).value

    return AwaitableGetAutoUpgradeProfileResult(
        channel=pulumi.get(__ret__, 'channel'),
        disabled=pulumi.get(__ret__, 'disabled'),
        e_tag=pulumi.get(__ret__, 'e_tag'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        node_image_selection=pulumi.get(__ret__, 'node_image_selection'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        update_strategy_id=pulumi.get(__ret__, 'update_strategy_id'))
def get_auto_upgrade_profile_output(auto_upgrade_profile_name: Optional[pulumi.Input[str]] = None,
                                    fleet_name: Optional[pulumi.Input[str]] = None,
                                    resource_group_name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoUpgradeProfileResult]:
    """
    Get a AutoUpgradeProfile
    Azure REST API version: 2024-05-02-preview.


    :param str auto_upgrade_profile_name: The name of the AutoUpgradeProfile resource.
    :param str fleet_name: The name of the Fleet resource.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['autoUpgradeProfileName'] = auto_upgrade_profile_name
    __args__['fleetName'] = fleet_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:containerservice:getAutoUpgradeProfile', __args__, opts=opts, typ=GetAutoUpgradeProfileResult)
    return __ret__.apply(lambda __response__: GetAutoUpgradeProfileResult(
        channel=pulumi.get(__response__, 'channel'),
        disabled=pulumi.get(__response__, 'disabled'),
        e_tag=pulumi.get(__response__, 'e_tag'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        node_image_selection=pulumi.get(__response__, 'node_image_selection'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type'),
        update_strategy_id=pulumi.get(__response__, 'update_strategy_id')))
