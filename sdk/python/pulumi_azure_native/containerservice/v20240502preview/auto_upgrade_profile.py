# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AutoUpgradeProfileArgs', 'AutoUpgradeProfile']

@pulumi.input_type
class AutoUpgradeProfileArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[Union[str, 'UpgradeChannel']],
                 fleet_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 auto_upgrade_profile_name: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 node_image_selection: Optional[pulumi.Input['AutoUpgradeNodeImageSelectionArgs']] = None,
                 update_strategy_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AutoUpgradeProfile resource.
        :param pulumi.Input[Union[str, 'UpgradeChannel']] channel: Configures how auto-upgrade will be run.
        :param pulumi.Input[str] fleet_name: The name of the Fleet resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] auto_upgrade_profile_name: The name of the AutoUpgradeProfile resource.
        :param pulumi.Input[bool] disabled: If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
               If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
               This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
               By default, this is set to False.
        :param pulumi.Input['AutoUpgradeNodeImageSelectionArgs'] node_image_selection: The node image upgrade to be applied to the target clusters in auto upgrade.
        :param pulumi.Input[str] update_strategy_id: The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "fleet_name", fleet_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if auto_upgrade_profile_name is not None:
            pulumi.set(__self__, "auto_upgrade_profile_name", auto_upgrade_profile_name)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if node_image_selection is not None:
            pulumi.set(__self__, "node_image_selection", node_image_selection)
        if update_strategy_id is not None:
            pulumi.set(__self__, "update_strategy_id", update_strategy_id)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[Union[str, 'UpgradeChannel']]:
        """
        Configures how auto-upgrade will be run.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[Union[str, 'UpgradeChannel']]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="fleetName")
    def fleet_name(self) -> pulumi.Input[str]:
        """
        The name of the Fleet resource.
        """
        return pulumi.get(self, "fleet_name")

    @fleet_name.setter
    def fleet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fleet_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="autoUpgradeProfileName")
    def auto_upgrade_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the AutoUpgradeProfile resource.
        """
        return pulumi.get(self, "auto_upgrade_profile_name")

    @auto_upgrade_profile_name.setter
    def auto_upgrade_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_upgrade_profile_name", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
        If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
        This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
        By default, this is set to False.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="nodeImageSelection")
    def node_image_selection(self) -> Optional[pulumi.Input['AutoUpgradeNodeImageSelectionArgs']]:
        """
        The node image upgrade to be applied to the target clusters in auto upgrade.
        """
        return pulumi.get(self, "node_image_selection")

    @node_image_selection.setter
    def node_image_selection(self, value: Optional[pulumi.Input['AutoUpgradeNodeImageSelectionArgs']]):
        pulumi.set(self, "node_image_selection", value)

    @property
    @pulumi.getter(name="updateStrategyId")
    def update_strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
        """
        return pulumi.get(self, "update_strategy_id")

    @update_strategy_id.setter
    def update_strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_strategy_id", value)


class AutoUpgradeProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_upgrade_profile_name: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[Union[str, 'UpgradeChannel']]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 fleet_name: Optional[pulumi.Input[str]] = None,
                 node_image_selection: Optional[pulumi.Input[Union['AutoUpgradeNodeImageSelectionArgs', 'AutoUpgradeNodeImageSelectionArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 update_strategy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The AutoUpgradeProfile resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_upgrade_profile_name: The name of the AutoUpgradeProfile resource.
        :param pulumi.Input[Union[str, 'UpgradeChannel']] channel: Configures how auto-upgrade will be run.
        :param pulumi.Input[bool] disabled: If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
               If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
               This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
               By default, this is set to False.
        :param pulumi.Input[str] fleet_name: The name of the Fleet resource.
        :param pulumi.Input[Union['AutoUpgradeNodeImageSelectionArgs', 'AutoUpgradeNodeImageSelectionArgsDict']] node_image_selection: The node image upgrade to be applied to the target clusters in auto upgrade.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] update_strategy_id: The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoUpgradeProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AutoUpgradeProfile resource.

        :param str resource_name: The name of the resource.
        :param AutoUpgradeProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoUpgradeProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_upgrade_profile_name: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[Union[str, 'UpgradeChannel']]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 fleet_name: Optional[pulumi.Input[str]] = None,
                 node_image_selection: Optional[pulumi.Input[Union['AutoUpgradeNodeImageSelectionArgs', 'AutoUpgradeNodeImageSelectionArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 update_strategy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoUpgradeProfileArgs.__new__(AutoUpgradeProfileArgs)

            __props__.__dict__["auto_upgrade_profile_name"] = auto_upgrade_profile_name
            if channel is None and not opts.urn:
                raise TypeError("Missing required property 'channel'")
            __props__.__dict__["channel"] = channel
            __props__.__dict__["disabled"] = disabled
            if fleet_name is None and not opts.urn:
                raise TypeError("Missing required property 'fleet_name'")
            __props__.__dict__["fleet_name"] = fleet_name
            __props__.__dict__["node_image_selection"] = node_image_selection
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["update_strategy_id"] = update_strategy_id
            __props__.__dict__["e_tag"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:containerservice:AutoUpgradeProfile")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(AutoUpgradeProfile, __self__).__init__(
            'azure-native:containerservice/v20240502preview:AutoUpgradeProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AutoUpgradeProfile':
        """
        Get an existing AutoUpgradeProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AutoUpgradeProfileArgs.__new__(AutoUpgradeProfileArgs)

        __props__.__dict__["channel"] = None
        __props__.__dict__["disabled"] = None
        __props__.__dict__["e_tag"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["node_image_selection"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["update_strategy_id"] = None
        return AutoUpgradeProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Output[str]:
        """
        Configures how auto-upgrade will be run.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
        If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
        This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
        By default, this is set to False.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> pulumi.Output[str]:
        """
        If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeImageSelection")
    def node_image_selection(self) -> pulumi.Output[Optional['outputs.AutoUpgradeNodeImageSelectionResponse']]:
        """
        The node image upgrade to be applied to the target clusters in auto upgrade.
        """
        return pulumi.get(self, "node_image_selection")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the AutoUpgradeProfile resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateStrategyId")
    def update_strategy_id(self) -> pulumi.Output[Optional[str]]:
        """
        The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
        """
        return pulumi.get(self, "update_strategy_id")

