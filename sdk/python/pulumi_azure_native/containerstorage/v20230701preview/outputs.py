# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssignmentResponse',
    'AssignmentStatusResponse',
    'AzureDiskResponse',
    'DiskResponse',
    'ElasticSanResponse',
    'ElasticSanVolumePropertiesResponse',
    'EncryptionResponse',
    'EphemeralDiskResponse',
    'ManagedServiceIdentityResponse',
    'PoolTypeResponse',
    'RequestsResponse',
    'ResourceOperationalStatusResponse',
    'ResourcesResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'VolumeTypeResponse',
]

@pulumi.output_type
class AssignmentResponse(dict):
    """
    Assignment Properties
    """
    def __init__(__self__, *,
                 id: str,
                 status: 'outputs.AssignmentStatusResponse'):
        """
        Assignment Properties
        :param str id: Resource id for the assigned resource
        :param 'AssignmentStatusResponse' status: Indicates if the assignment is in a usable state
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource id for the assigned resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.AssignmentStatusResponse':
        """
        Indicates if the assignment is in a usable state
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AssignmentStatusResponse(dict):
    """
    Status of the assignment resource
    """
    def __init__(__self__, *,
                 state: str,
                 message: Optional[str] = None):
        """
        Status of the assignment resource
        :param str state: State of the assignment resource
        :param str message: Reason for the status
        """
        pulumi.set(__self__, "state", state)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the assignment resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Reason for the status
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class AzureDiskResponse(dict):
    """
    Azure Disk Pool Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroup":
            suggest = "resource_group"
        elif key == "skuName":
            suggest = "sku_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_group: str,
                 disks: Optional[Sequence['outputs.DiskResponse']] = None,
                 encryption: Optional['outputs.EncryptionResponse'] = None,
                 sku_name: Optional[str] = None):
        """
        Azure Disk Pool Properties
        :param str resource_group: Managed resource group for the pool.
        :param Sequence['DiskResponse'] disks: Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :param 'EncryptionResponse' encryption: Encryption specifies the encryption configuration for the Azure Disk pool
        :param str sku_name: Sku name
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if sku_name is not None:
            pulumi.set(__self__, "sku_name", sku_name)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Managed resource group for the pool.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.DiskResponse']]:
        """
        Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.EncryptionResponse']:
        """
        Encryption specifies the encryption configuration for the Azure Disk pool
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> Optional[str]:
        """
        Sku name
        """
        return pulumi.get(self, "sku_name")


@pulumi.output_type
class DiskResponse(dict):
    """
    Model for disk for that pool is using
    """
    def __init__(__self__, *,
                 id: str,
                 reference: str):
        """
        Model for disk for that pool is using
        :param str id: ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
        :param str reference: Reference is the location of the disk in an external system.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def reference(self) -> str:
        """
        Reference is the location of the disk in an external system.
        """
        return pulumi.get(self, "reference")


@pulumi.output_type
class ElasticSanResponse(dict):
    """
    Elastic San Pool Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroup":
            suggest = "resource_group"
        elif key == "skuName":
            suggest = "sku_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticSanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticSanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticSanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_group: str,
                 encryption: Optional['outputs.EncryptionResponse'] = None,
                 sku_name: Optional[str] = None):
        """
        Elastic San Pool Properties
        :param str resource_group: Managed resource group for the pool.
        :param 'EncryptionResponse' encryption: Encryption specifies the encryption configuration for the Azure Disk pool
        :param str sku_name: Sku name
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if sku_name is not None:
            pulumi.set(__self__, "sku_name", sku_name)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Managed resource group for the pool.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.EncryptionResponse']:
        """
        Encryption specifies the encryption configuration for the Azure Disk pool
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> Optional[str]:
        """
        Sku name
        """
        return pulumi.get(self, "sku_name")


@pulumi.output_type
class ElasticSanVolumePropertiesResponse(dict):
    """
    Properties of the ElasticSAN iSCSI target
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetIqn":
            suggest = "target_iqn"
        elif key == "targetPortalHostname":
            suggest = "target_portal_hostname"
        elif key == "targetPortalPort":
            suggest = "target_portal_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticSanVolumePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticSanVolumePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticSanVolumePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_iqn: str,
                 target_portal_hostname: str,
                 target_portal_port: int):
        """
        Properties of the ElasticSAN iSCSI target
        :param str target_iqn: iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server"
        :param str target_portal_hostname: iSCSI Target Portal Host Name
        :param int target_portal_port: iSCSI Target Portal Port
        """
        pulumi.set(__self__, "target_iqn", target_iqn)
        pulumi.set(__self__, "target_portal_hostname", target_portal_hostname)
        pulumi.set(__self__, "target_portal_port", target_portal_port)

    @property
    @pulumi.getter(name="targetIqn")
    def target_iqn(self) -> str:
        """
        iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server"
        """
        return pulumi.get(self, "target_iqn")

    @property
    @pulumi.getter(name="targetPortalHostname")
    def target_portal_hostname(self) -> str:
        """
        iSCSI Target Portal Host Name
        """
        return pulumi.get(self, "target_portal_hostname")

    @property
    @pulumi.getter(name="targetPortalPort")
    def target_portal_port(self) -> int:
        """
        iSCSI Target Portal Port
        """
        return pulumi.get(self, "target_portal_port")


@pulumi.output_type
class EncryptionResponse(dict):
    """
    Encryption key properties for the pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"
        elif key == "keyVaultUri":
            suggest = "key_vault_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: str,
                 key_vault_uri: str,
                 identity: Optional['outputs.ManagedServiceIdentityResponse'] = None):
        """
        Encryption key properties for the pool.
        :param str key_name: The name of the key vault key.
        :param str key_vault_uri: The URI of the key vault.
        :param 'ManagedServiceIdentityResponse' identity: The managed service identities assigned to this resource.
        """
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The name of the key vault key.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> str:
        """
        The URI of the key vault.
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ManagedServiceIdentityResponse']:
        """
        The managed service identities assigned to this resource.
        """
        return pulumi.get(self, "identity")


@pulumi.output_type
class EphemeralDiskResponse(dict):
    """
    Ephemeral Disk Pool Properties
    """
    def __init__(__self__, *,
                 disks: Optional[Sequence['outputs.DiskResponse']] = None,
                 replicas: Optional[float] = None):
        """
        Ephemeral Disk Pool Properties
        :param Sequence['DiskResponse'] disks: Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :param float replicas: The number of data copies. Default 3.
        """
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if replicas is None:
            replicas = 3
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.DiskResponse']]:
        """
        Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[float]:
        """
        The number of data copies. Default 3.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class PoolTypeResponse(dict):
    """
    Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDisk":
            suggest = "azure_disk"
        elif key == "elasticSan":
            suggest = "elastic_san"
        elif key == "ephemeralDisk":
            suggest = "ephemeral_disk"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoolTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoolTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoolTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_disk: Optional['outputs.AzureDiskResponse'] = None,
                 elastic_san: Optional['outputs.ElasticSanResponse'] = None,
                 ephemeral_disk: Optional['outputs.EphemeralDiskResponse'] = None):
        """
        Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
        :param 'AzureDiskResponse' azure_disk: Disk Pool Properties
        :param 'ElasticSanResponse' elastic_san: Elastic San Pool Properties
        :param 'EphemeralDiskResponse' ephemeral_disk: Ephemeral Pool Properties
        """
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if elastic_san is not None:
            pulumi.set(__self__, "elastic_san", elastic_san)
        if ephemeral_disk is not None:
            pulumi.set(__self__, "ephemeral_disk", ephemeral_disk)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.AzureDiskResponse']:
        """
        Disk Pool Properties
        """
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="elasticSan")
    def elastic_san(self) -> Optional['outputs.ElasticSanResponse']:
        """
        Elastic San Pool Properties
        """
        return pulumi.get(self, "elastic_san")

    @property
    @pulumi.getter(name="ephemeralDisk")
    def ephemeral_disk(self) -> Optional['outputs.EphemeralDiskResponse']:
        """
        Ephemeral Pool Properties
        """
        return pulumi.get(self, "ephemeral_disk")


@pulumi.output_type
class RequestsResponse(dict):
    """
    Requests for capacity for the pool.
    """
    def __init__(__self__, *,
                 storage: Optional[float] = None):
        """
        Requests for capacity for the pool.
        :param float storage: Requested capacity of the pool in GiB.
        """
        if storage is None:
            storage = 1024
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def storage(self) -> Optional[float]:
        """
        Requested capacity of the pool in GiB.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class ResourceOperationalStatusResponse(dict):
    """
    Status of the resource
    """
    def __init__(__self__, *,
                 state: str,
                 message: Optional[str] = None):
        """
        Status of the resource
        :param str state: state of the resource
        :param str message: Reason for state.
        """
        pulumi.set(__self__, "state", state)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        state of the resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Reason for state.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ResourcesResponse(dict):
    """
    Resource Requests for the pool.
    """
    def __init__(__self__, *,
                 requests: Optional['outputs.RequestsResponse'] = None):
        """
        Resource Requests for the pool.
        :param 'RequestsResponse' requests: Requests for capacity for the pool.
        """
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.RequestsResponse']:
        """
        Requests for capacity for the pool.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VolumeTypeResponse(dict):
    """
    Properties of the volume
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticSan":
            suggest = "elastic_san"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elastic_san: 'outputs.ElasticSanVolumePropertiesResponse'):
        """
        Properties of the volume
        :param 'ElasticSanVolumePropertiesResponse' elastic_san: Properties of the ElasticSAN iSCSI target
        """
        pulumi.set(__self__, "elastic_san", elastic_san)

    @property
    @pulumi.getter(name="elasticSan")
    def elastic_san(self) -> 'outputs.ElasticSanVolumePropertiesResponse':
        """
        Properties of the ElasticSAN iSCSI target
        """
        return pulumi.get(self, "elastic_san")


