# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetManagedPrivateEndpointResult',
    'AwaitableGetManagedPrivateEndpointResult',
    'get_managed_private_endpoint',
    'get_managed_private_endpoint_output',
]

@pulumi.output_type
class GetManagedPrivateEndpointResult:
    """
    The managed private endpoint resource type.
    """
    def __init__(__self__, connection_state=None, group_ids=None, id=None, location=None, name=None, private_link_resource_id=None, private_link_resource_region=None, private_link_service_private_ip=None, private_link_service_url=None, provisioning_state=None, request_message=None, system_data=None, tags=None, type=None):
        if connection_state and not isinstance(connection_state, dict):
            raise TypeError("Expected argument 'connection_state' to be a dict")
        pulumi.set(__self__, "connection_state", connection_state)
        if group_ids and not isinstance(group_ids, list):
            raise TypeError("Expected argument 'group_ids' to be a list")
        pulumi.set(__self__, "group_ids", group_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_link_resource_id and not isinstance(private_link_resource_id, str):
            raise TypeError("Expected argument 'private_link_resource_id' to be a str")
        pulumi.set(__self__, "private_link_resource_id", private_link_resource_id)
        if private_link_resource_region and not isinstance(private_link_resource_region, str):
            raise TypeError("Expected argument 'private_link_resource_region' to be a str")
        pulumi.set(__self__, "private_link_resource_region", private_link_resource_region)
        if private_link_service_private_ip and not isinstance(private_link_service_private_ip, str):
            raise TypeError("Expected argument 'private_link_service_private_ip' to be a str")
        pulumi.set(__self__, "private_link_service_private_ip", private_link_service_private_ip)
        if private_link_service_url and not isinstance(private_link_service_url, str):
            raise TypeError("Expected argument 'private_link_service_url' to be a str")
        pulumi.set(__self__, "private_link_service_url", private_link_service_url)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if request_message and not isinstance(request_message, str):
            raise TypeError("Expected argument 'request_message' to be a str")
        pulumi.set(__self__, "request_message", request_message)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> 'outputs.ManagedPrivateEndpointConnectionStateResponse':
        """
        The state of managed private endpoint connection.
        """
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        """
        The group Ids of the managed private endpoint.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateLinkResourceId")
    def private_link_resource_id(self) -> Optional[str]:
        """
        The ARM resource ID of the resource for which the managed private endpoint is pointing to.
        """
        return pulumi.get(self, "private_link_resource_id")

    @property
    @pulumi.getter(name="privateLinkResourceRegion")
    def private_link_resource_region(self) -> Optional[str]:
        """
        The region of the resource to which the managed private endpoint is pointing to.
        """
        return pulumi.get(self, "private_link_resource_region")

    @property
    @pulumi.getter(name="privateLinkServicePrivateIP")
    def private_link_service_private_ip(self) -> str:
        """
        The private IP of private endpoint after approval. This property is empty before connection is approved.
        """
        return pulumi.get(self, "private_link_service_private_ip")

    @property
    @pulumi.getter(name="privateLinkServiceUrl")
    def private_link_service_url(self) -> Optional[str]:
        """
        The URL of the data store behind the private link service. It would be the URL in the Grafana data source configuration page without the protocol and port.
        """
        return pulumi.get(self, "private_link_service_url")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="requestMessage")
    def request_message(self) -> Optional[str]:
        """
        User input request message of the managed private endpoint.
        """
        return pulumi.get(self, "request_message")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetManagedPrivateEndpointResult(GetManagedPrivateEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedPrivateEndpointResult(
            connection_state=self.connection_state,
            group_ids=self.group_ids,
            id=self.id,
            location=self.location,
            name=self.name,
            private_link_resource_id=self.private_link_resource_id,
            private_link_resource_region=self.private_link_resource_region,
            private_link_service_private_ip=self.private_link_service_private_ip,
            private_link_service_url=self.private_link_service_url,
            provisioning_state=self.provisioning_state,
            request_message=self.request_message,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_managed_private_endpoint(managed_private_endpoint_name: Optional[str] = None,
                                 resource_group_name: Optional[str] = None,
                                 workspace_name: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedPrivateEndpointResult:
    """
    The managed private endpoint resource type.
    Azure REST API version: 2022-10-01-preview.


    :param str managed_private_endpoint_name: The managed private endpoint name of Azure Managed Grafana.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The workspace name of Azure Managed Grafana.
    """
    __args__ = dict()
    __args__['managedPrivateEndpointName'] = managed_private_endpoint_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['workspaceName'] = workspace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:dashboard:getManagedPrivateEndpoint', __args__, opts=opts, typ=GetManagedPrivateEndpointResult).value

    return AwaitableGetManagedPrivateEndpointResult(
        connection_state=pulumi.get(__ret__, 'connection_state'),
        group_ids=pulumi.get(__ret__, 'group_ids'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        private_link_resource_id=pulumi.get(__ret__, 'private_link_resource_id'),
        private_link_resource_region=pulumi.get(__ret__, 'private_link_resource_region'),
        private_link_service_private_ip=pulumi.get(__ret__, 'private_link_service_private_ip'),
        private_link_service_url=pulumi.get(__ret__, 'private_link_service_url'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        request_message=pulumi.get(__ret__, 'request_message'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_managed_private_endpoint)
def get_managed_private_endpoint_output(managed_private_endpoint_name: Optional[pulumi.Input[str]] = None,
                                        resource_group_name: Optional[pulumi.Input[str]] = None,
                                        workspace_name: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedPrivateEndpointResult]:
    """
    The managed private endpoint resource type.
    Azure REST API version: 2022-10-01-preview.


    :param str managed_private_endpoint_name: The managed private endpoint name of Azure Managed Grafana.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workspace_name: The workspace name of Azure Managed Grafana.
    """
    ...
