# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AzureMonitorWorkspaceIntegrationArgs',
    'EnterpriseConfigurationsArgs',
    'GrafanaConfigurationsArgs',
    'GrafanaIntegrationsArgs',
    'ManagedGrafanaPropertiesArgs',
    'ManagedServiceIdentityArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'ResourceSkuArgs',
    'SmtpArgs',
]

@pulumi.input_type
class AzureMonitorWorkspaceIntegrationArgs:
    def __init__(__self__, *,
                 azure_monitor_workspace_resource_id: Optional[pulumi.Input[str]] = None):
        """
        Integrations for Azure Monitor Workspace.
        :param pulumi.Input[str] azure_monitor_workspace_resource_id: The resource Id of the connected Azure Monitor Workspace.
        """
        if azure_monitor_workspace_resource_id is not None:
            pulumi.set(__self__, "azure_monitor_workspace_resource_id", azure_monitor_workspace_resource_id)

    @property
    @pulumi.getter(name="azureMonitorWorkspaceResourceId")
    def azure_monitor_workspace_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource Id of the connected Azure Monitor Workspace.
        """
        return pulumi.get(self, "azure_monitor_workspace_resource_id")

    @azure_monitor_workspace_resource_id.setter
    def azure_monitor_workspace_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_monitor_workspace_resource_id", value)


@pulumi.input_type
class EnterpriseConfigurationsArgs:
    def __init__(__self__, *,
                 marketplace_auto_renew: Optional[pulumi.Input[Union[str, 'MarketplaceAutoRenew']]] = None,
                 marketplace_plan_id: Optional[pulumi.Input[str]] = None):
        """
        Enterprise settings of a Grafana instance
        :param pulumi.Input[Union[str, 'MarketplaceAutoRenew']] marketplace_auto_renew: The AutoRenew setting of the Enterprise subscription
        :param pulumi.Input[str] marketplace_plan_id: The Plan Id of the Azure Marketplace subscription for the Enterprise plugins
        """
        if marketplace_auto_renew is not None:
            pulumi.set(__self__, "marketplace_auto_renew", marketplace_auto_renew)
        if marketplace_plan_id is not None:
            pulumi.set(__self__, "marketplace_plan_id", marketplace_plan_id)

    @property
    @pulumi.getter(name="marketplaceAutoRenew")
    def marketplace_auto_renew(self) -> Optional[pulumi.Input[Union[str, 'MarketplaceAutoRenew']]]:
        """
        The AutoRenew setting of the Enterprise subscription
        """
        return pulumi.get(self, "marketplace_auto_renew")

    @marketplace_auto_renew.setter
    def marketplace_auto_renew(self, value: Optional[pulumi.Input[Union[str, 'MarketplaceAutoRenew']]]):
        pulumi.set(self, "marketplace_auto_renew", value)

    @property
    @pulumi.getter(name="marketplacePlanId")
    def marketplace_plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Plan Id of the Azure Marketplace subscription for the Enterprise plugins
        """
        return pulumi.get(self, "marketplace_plan_id")

    @marketplace_plan_id.setter
    def marketplace_plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marketplace_plan_id", value)


@pulumi.input_type
class GrafanaConfigurationsArgs:
    def __init__(__self__, *,
                 smtp: Optional[pulumi.Input['SmtpArgs']] = None):
        """
        Server configurations of a Grafana instance
        :param pulumi.Input['SmtpArgs'] smtp: Email server settings.
               https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
        """
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['SmtpArgs']]:
        """
        Email server settings.
        https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
        """
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['SmtpArgs']]):
        pulumi.set(self, "smtp", value)


@pulumi.input_type
class GrafanaIntegrationsArgs:
    def __init__(__self__, *,
                 azure_monitor_workspace_integrations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureMonitorWorkspaceIntegrationArgs']]]] = None):
        """
        GrafanaIntegrations is a bundled observability experience (e.g. pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.
        """
        if azure_monitor_workspace_integrations is not None:
            pulumi.set(__self__, "azure_monitor_workspace_integrations", azure_monitor_workspace_integrations)

    @property
    @pulumi.getter(name="azureMonitorWorkspaceIntegrations")
    def azure_monitor_workspace_integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureMonitorWorkspaceIntegrationArgs']]]]:
        return pulumi.get(self, "azure_monitor_workspace_integrations")

    @azure_monitor_workspace_integrations.setter
    def azure_monitor_workspace_integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureMonitorWorkspaceIntegrationArgs']]]]):
        pulumi.set(self, "azure_monitor_workspace_integrations", value)


@pulumi.input_type
class ManagedGrafanaPropertiesArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[Union[str, 'ApiKey']]] = None,
                 auto_generated_domain_name_label_scope: Optional[pulumi.Input[Union[str, 'AutoGeneratedDomainNameLabelScope']]] = None,
                 deterministic_outbound_ip: Optional[pulumi.Input[Union[str, 'DeterministicOutboundIP']]] = None,
                 enterprise_configurations: Optional[pulumi.Input['EnterpriseConfigurationsArgs']] = None,
                 grafana_configurations: Optional[pulumi.Input['GrafanaConfigurationsArgs']] = None,
                 grafana_integrations: Optional[pulumi.Input['GrafanaIntegrationsArgs']] = None,
                 grafana_major_version: Optional[pulumi.Input[str]] = None,
                 grafana_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_network_access: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]] = None,
                 zone_redundancy: Optional[pulumi.Input[Union[str, 'ZoneRedundancy']]] = None):
        """
        Properties specific to the grafana resource.
        :param pulumi.Input[Union[str, 'ApiKey']] api_key: The api key setting of the Grafana instance.
        :param pulumi.Input[Union[str, 'AutoGeneratedDomainNameLabelScope']] auto_generated_domain_name_label_scope: Scope for dns deterministic name hash calculation.
        :param pulumi.Input[Union[str, 'DeterministicOutboundIP']] deterministic_outbound_ip: Whether a Grafana instance uses deterministic outbound IPs.
        :param pulumi.Input['EnterpriseConfigurationsArgs'] enterprise_configurations: Enterprise settings of a Grafana instance
        :param pulumi.Input['GrafanaConfigurationsArgs'] grafana_configurations: Server configurations of a Grafana instance
        :param pulumi.Input['GrafanaIntegrationsArgs'] grafana_integrations: GrafanaIntegrations is a bundled observability experience (e.g. pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.
        :param pulumi.Input[str] grafana_major_version: The major Grafana software version to target.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] grafana_plugins: Installed plugin list of the Grafana instance. Key is plugin id, value is plugin definition.
        :param pulumi.Input[Union[str, 'PublicNetworkAccess']] public_network_access: Indicate the state for enable or disable traffic over the public interface.
        :param pulumi.Input[Union[str, 'ZoneRedundancy']] zone_redundancy: The zone redundancy setting of the Grafana instance.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if auto_generated_domain_name_label_scope is not None:
            pulumi.set(__self__, "auto_generated_domain_name_label_scope", auto_generated_domain_name_label_scope)
        if deterministic_outbound_ip is not None:
            pulumi.set(__self__, "deterministic_outbound_ip", deterministic_outbound_ip)
        if enterprise_configurations is not None:
            pulumi.set(__self__, "enterprise_configurations", enterprise_configurations)
        if grafana_configurations is not None:
            pulumi.set(__self__, "grafana_configurations", grafana_configurations)
        if grafana_integrations is not None:
            pulumi.set(__self__, "grafana_integrations", grafana_integrations)
        if grafana_major_version is not None:
            pulumi.set(__self__, "grafana_major_version", grafana_major_version)
        if grafana_plugins is not None:
            pulumi.set(__self__, "grafana_plugins", grafana_plugins)
        if public_network_access is not None:
            pulumi.set(__self__, "public_network_access", public_network_access)
        if zone_redundancy is not None:
            pulumi.set(__self__, "zone_redundancy", zone_redundancy)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[Union[str, 'ApiKey']]]:
        """
        The api key setting of the Grafana instance.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[Union[str, 'ApiKey']]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="autoGeneratedDomainNameLabelScope")
    def auto_generated_domain_name_label_scope(self) -> Optional[pulumi.Input[Union[str, 'AutoGeneratedDomainNameLabelScope']]]:
        """
        Scope for dns deterministic name hash calculation.
        """
        return pulumi.get(self, "auto_generated_domain_name_label_scope")

    @auto_generated_domain_name_label_scope.setter
    def auto_generated_domain_name_label_scope(self, value: Optional[pulumi.Input[Union[str, 'AutoGeneratedDomainNameLabelScope']]]):
        pulumi.set(self, "auto_generated_domain_name_label_scope", value)

    @property
    @pulumi.getter(name="deterministicOutboundIP")
    def deterministic_outbound_ip(self) -> Optional[pulumi.Input[Union[str, 'DeterministicOutboundIP']]]:
        """
        Whether a Grafana instance uses deterministic outbound IPs.
        """
        return pulumi.get(self, "deterministic_outbound_ip")

    @deterministic_outbound_ip.setter
    def deterministic_outbound_ip(self, value: Optional[pulumi.Input[Union[str, 'DeterministicOutboundIP']]]):
        pulumi.set(self, "deterministic_outbound_ip", value)

    @property
    @pulumi.getter(name="enterpriseConfigurations")
    def enterprise_configurations(self) -> Optional[pulumi.Input['EnterpriseConfigurationsArgs']]:
        """
        Enterprise settings of a Grafana instance
        """
        return pulumi.get(self, "enterprise_configurations")

    @enterprise_configurations.setter
    def enterprise_configurations(self, value: Optional[pulumi.Input['EnterpriseConfigurationsArgs']]):
        pulumi.set(self, "enterprise_configurations", value)

    @property
    @pulumi.getter(name="grafanaConfigurations")
    def grafana_configurations(self) -> Optional[pulumi.Input['GrafanaConfigurationsArgs']]:
        """
        Server configurations of a Grafana instance
        """
        return pulumi.get(self, "grafana_configurations")

    @grafana_configurations.setter
    def grafana_configurations(self, value: Optional[pulumi.Input['GrafanaConfigurationsArgs']]):
        pulumi.set(self, "grafana_configurations", value)

    @property
    @pulumi.getter(name="grafanaIntegrations")
    def grafana_integrations(self) -> Optional[pulumi.Input['GrafanaIntegrationsArgs']]:
        """
        GrafanaIntegrations is a bundled observability experience (e.g. pre-configured data source, tailored Grafana dashboards, alerting defaults) for common monitoring scenarios.
        """
        return pulumi.get(self, "grafana_integrations")

    @grafana_integrations.setter
    def grafana_integrations(self, value: Optional[pulumi.Input['GrafanaIntegrationsArgs']]):
        pulumi.set(self, "grafana_integrations", value)

    @property
    @pulumi.getter(name="grafanaMajorVersion")
    def grafana_major_version(self) -> Optional[pulumi.Input[str]]:
        """
        The major Grafana software version to target.
        """
        return pulumi.get(self, "grafana_major_version")

    @grafana_major_version.setter
    def grafana_major_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_major_version", value)

    @property
    @pulumi.getter(name="grafanaPlugins")
    def grafana_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Installed plugin list of the Grafana instance. Key is plugin id, value is plugin definition.
        """
        return pulumi.get(self, "grafana_plugins")

    @grafana_plugins.setter
    def grafana_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "grafana_plugins", value)

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]:
        """
        Indicate the state for enable or disable traffic over the public interface.
        """
        return pulumi.get(self, "public_network_access")

    @public_network_access.setter
    def public_network_access(self, value: Optional[pulumi.Input[Union[str, 'PublicNetworkAccess']]]):
        pulumi.set(self, "public_network_access", value)

    @property
    @pulumi.getter(name="zoneRedundancy")
    def zone_redundancy(self) -> Optional[pulumi.Input[Union[str, 'ZoneRedundancy']]]:
        """
        The zone redundancy setting of the Grafana instance.
        """
        return pulumi.get(self, "zone_redundancy")

    @zone_redundancy.setter
    def zone_redundancy(self, value: Optional[pulumi.Input[Union[str, 'ZoneRedundancy']]]):
        pulumi.set(self, "zone_redundancy", value)


@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param pulumi.Input[str] actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param pulumi.Input[str] description: The reason for approval/rejection of the connection.
        :param pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']] status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ResourceSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SmtpArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 from_address: Optional[pulumi.Input[str]] = None,
                 from_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 skip_verify: Optional[pulumi.Input[bool]] = None,
                 start_tls_policy: Optional[pulumi.Input[Union[str, 'StartTLSPolicy']]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Email server settings.
        https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
        :param pulumi.Input[bool] enabled: Enable this to allow Grafana to send email. Default is false
        :param pulumi.Input[str] from_address: Address used when sending out emails
               https://pkg.go.dev/net/mail#Address
        :param pulumi.Input[str] from_name: Name to be used when sending out emails. Default is "Azure Managed Grafana Notification"
               https://pkg.go.dev/net/mail#Address
        :param pulumi.Input[str] host: SMTP server hostname with port, e.g. test.email.net:587
        :param pulumi.Input[str] password: Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes
        :param pulumi.Input[bool] skip_verify: Verify SSL for SMTP server. Default is false
               https://pkg.go.dev/crypto/tls#Config
        :param pulumi.Input[Union[str, 'StartTLSPolicy']] start_tls_policy: The StartTLSPolicy setting of the SMTP configuration
               https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
        :param pulumi.Input[str] user: User of SMTP auth
        """
        if enabled is None:
            enabled = False
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if from_address is not None:
            pulumi.set(__self__, "from_address", from_address)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if start_tls_policy is not None:
            pulumi.set(__self__, "start_tls_policy", start_tls_policy)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this to allow Grafana to send email. Default is false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[pulumi.Input[str]]:
        """
        Address used when sending out emails
        https://pkg.go.dev/net/mail#Address
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used when sending out emails. Default is "Azure Managed Grafana Notification"
        https://pkg.go.dev/net/mail#Address
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        SMTP server hostname with port, e.g. test.email.net:587
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify SSL for SMTP server. Default is false
        https://pkg.go.dev/crypto/tls#Config
        """
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter(name="startTLSPolicy")
    def start_tls_policy(self) -> Optional[pulumi.Input[Union[str, 'StartTLSPolicy']]]:
        """
        The StartTLSPolicy setting of the SMTP configuration
        https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
        """
        return pulumi.get(self, "start_tls_policy")

    @start_tls_policy.setter
    def start_tls_policy(self, value: Optional[pulumi.Input[Union[str, 'StartTLSPolicy']]]):
        pulumi.set(self, "start_tls_policy", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User of SMTP auth
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


