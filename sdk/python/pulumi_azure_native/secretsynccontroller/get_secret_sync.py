# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecretSyncResult',
    'AwaitableGetSecretSyncResult',
    'get_secret_sync',
    'get_secret_sync_output',
]

@pulumi.output_type
class GetSecretSyncResult:
    """
    The SecretSync resource.
    """
    def __init__(__self__, extended_location=None, force_synchronization=None, id=None, kubernetes_secret_type=None, location=None, name=None, object_secret_mapping=None, provisioning_state=None, secret_provider_class_name=None, service_account_name=None, status=None, system_data=None, tags=None, type=None):
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if force_synchronization and not isinstance(force_synchronization, str):
            raise TypeError("Expected argument 'force_synchronization' to be a str")
        pulumi.set(__self__, "force_synchronization", force_synchronization)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kubernetes_secret_type and not isinstance(kubernetes_secret_type, str):
            raise TypeError("Expected argument 'kubernetes_secret_type' to be a str")
        pulumi.set(__self__, "kubernetes_secret_type", kubernetes_secret_type)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_secret_mapping and not isinstance(object_secret_mapping, list):
            raise TypeError("Expected argument 'object_secret_mapping' to be a list")
        pulumi.set(__self__, "object_secret_mapping", object_secret_mapping)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if secret_provider_class_name and not isinstance(secret_provider_class_name, str):
            raise TypeError("Expected argument 'secret_provider_class_name' to be a str")
        pulumi.set(__self__, "secret_provider_class_name", secret_provider_class_name)
        if service_account_name and not isinstance(service_account_name, str):
            raise TypeError("Expected argument 'service_account_name' to be a str")
        pulumi.set(__self__, "service_account_name", service_account_name)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional['outputs.AzureResourceManagerCommonTypesExtendedLocationResponse']:
        """
        The complex type of the extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="forceSynchronization")
    def force_synchronization(self) -> Optional[str]:
        """
        ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        """
        return pulumi.get(self, "force_synchronization")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubernetesSecretType")
    def kubernetes_secret_type(self) -> str:
        """
        Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        """
        return pulumi.get(self, "kubernetes_secret_type")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectSecretMapping")
    def object_secret_mapping(self) -> Sequence['outputs.KubernetesSecretObjectMappingResponse']:
        """
        An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        """
        return pulumi.get(self, "object_secret_mapping")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the SecretSync instance.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="secretProviderClassName")
    def secret_provider_class_name(self) -> str:
        """
        SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        """
        return pulumi.get(self, "secret_provider_class_name")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> str:
        """
        ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.SecretSyncStatusResponse':
        """
        SecretSyncStatus defines the observed state of the secret synchronization process.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetSecretSyncResult(GetSecretSyncResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretSyncResult(
            extended_location=self.extended_location,
            force_synchronization=self.force_synchronization,
            id=self.id,
            kubernetes_secret_type=self.kubernetes_secret_type,
            location=self.location,
            name=self.name,
            object_secret_mapping=self.object_secret_mapping,
            provisioning_state=self.provisioning_state,
            secret_provider_class_name=self.secret_provider_class_name,
            service_account_name=self.service_account_name,
            status=self.status,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_secret_sync(resource_group_name: Optional[str] = None,
                    secret_sync_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretSyncResult:
    """
    Gets the properties of a SecretSync instance.
    Azure REST API version: 2024-08-21-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str secret_sync_name: The name of the SecretSync
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['secretSyncName'] = secret_sync_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:secretsynccontroller:getSecretSync', __args__, opts=opts, typ=GetSecretSyncResult).value

    return AwaitableGetSecretSyncResult(
        extended_location=pulumi.get(__ret__, 'extended_location'),
        force_synchronization=pulumi.get(__ret__, 'force_synchronization'),
        id=pulumi.get(__ret__, 'id'),
        kubernetes_secret_type=pulumi.get(__ret__, 'kubernetes_secret_type'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        object_secret_mapping=pulumi.get(__ret__, 'object_secret_mapping'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        secret_provider_class_name=pulumi.get(__ret__, 'secret_provider_class_name'),
        service_account_name=pulumi.get(__ret__, 'service_account_name'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_secret_sync_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                           secret_sync_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecretSyncResult]:
    """
    Gets the properties of a SecretSync instance.
    Azure REST API version: 2024-08-21-preview.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str secret_sync_name: The name of the SecretSync
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['secretSyncName'] = secret_sync_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:secretsynccontroller:getSecretSync', __args__, opts=opts, typ=GetSecretSyncResult)
    return __ret__.apply(lambda __response__: GetSecretSyncResult(
        extended_location=pulumi.get(__response__, 'extended_location'),
        force_synchronization=pulumi.get(__response__, 'force_synchronization'),
        id=pulumi.get(__response__, 'id'),
        kubernetes_secret_type=pulumi.get(__response__, 'kubernetes_secret_type'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        object_secret_mapping=pulumi.get(__response__, 'object_secret_mapping'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        secret_provider_class_name=pulumi.get(__response__, 'secret_provider_class_name'),
        service_account_name=pulumi.get(__response__, 'service_account_name'),
        status=pulumi.get(__response__, 'status'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
