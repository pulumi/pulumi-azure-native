# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetAzureKeyVaultSecretProviderClassResult',
    'AwaitableGetAzureKeyVaultSecretProviderClassResult',
    'get_azure_key_vault_secret_provider_class',
    'get_azure_key_vault_secret_provider_class_output',
]

@pulumi.output_type
class GetAzureKeyVaultSecretProviderClassResult:
    """
    The AzureKeyVaultSecretProviderClass resource.
    """
    def __init__(__self__, client_id=None, extended_location=None, id=None, keyvault_name=None, location=None, name=None, objects=None, provisioning_state=None, system_data=None, tags=None, tenant_id=None, type=None):
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if extended_location and not isinstance(extended_location, dict):
            raise TypeError("Expected argument 'extended_location' to be a dict")
        pulumi.set(__self__, "extended_location", extended_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keyvault_name and not isinstance(keyvault_name, str):
            raise TypeError("Expected argument 'keyvault_name' to be a str")
        pulumi.set(__self__, "keyvault_name", keyvault_name)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if objects and not isinstance(objects, str):
            raise TypeError("Expected argument 'objects' to be a str")
        pulumi.set(__self__, "objects", objects)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The user assigned managed identity client ID that should be used to access the Azure Key Vault.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional['outputs.AzureResourceManagerCommonTypesExtendedLocationResponse']:
        """
        The complex type of the extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyvaultName")
    def keyvault_name(self) -> str:
        """
        The name of the Azure Key Vault to sync secrets from.
        """
        return pulumi.get(self, "keyvault_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def objects(self) -> Optional[str]:
        """
        Objects defines the desired state of synced K8s secret objects
        """
        return pulumi.get(self, "objects")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the AzureKeyVaultSecretProviderClass instance.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Azure Active Directory tenant ID that should be used for authenticating requests to the Azure Key Vault.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAzureKeyVaultSecretProviderClassResult(GetAzureKeyVaultSecretProviderClassResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureKeyVaultSecretProviderClassResult(
            client_id=self.client_id,
            extended_location=self.extended_location,
            id=self.id,
            keyvault_name=self.keyvault_name,
            location=self.location,
            name=self.name,
            objects=self.objects,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            tenant_id=self.tenant_id,
            type=self.type)


def get_azure_key_vault_secret_provider_class(azure_key_vault_secret_provider_class_name: Optional[str] = None,
                                              resource_group_name: Optional[str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzureKeyVaultSecretProviderClassResult:
    """
    Gets the properties of an AzureKeyVaultSecretProviderClass instance.


    :param str azure_key_vault_secret_provider_class_name: The name of the AzureKeyVaultSecretProviderClass
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['azureKeyVaultSecretProviderClassName'] = azure_key_vault_secret_provider_class_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:secretsynccontroller/v20240821preview:getAzureKeyVaultSecretProviderClass', __args__, opts=opts, typ=GetAzureKeyVaultSecretProviderClassResult).value

    return AwaitableGetAzureKeyVaultSecretProviderClassResult(
        client_id=pulumi.get(__ret__, 'client_id'),
        extended_location=pulumi.get(__ret__, 'extended_location'),
        id=pulumi.get(__ret__, 'id'),
        keyvault_name=pulumi.get(__ret__, 'keyvault_name'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        objects=pulumi.get(__ret__, 'objects'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'))
def get_azure_key_vault_secret_provider_class_output(azure_key_vault_secret_provider_class_name: Optional[pulumi.Input[str]] = None,
                                                     resource_group_name: Optional[pulumi.Input[str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAzureKeyVaultSecretProviderClassResult]:
    """
    Gets the properties of an AzureKeyVaultSecretProviderClass instance.


    :param str azure_key_vault_secret_provider_class_name: The name of the AzureKeyVaultSecretProviderClass
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['azureKeyVaultSecretProviderClassName'] = azure_key_vault_secret_provider_class_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:secretsynccontroller/v20240821preview:getAzureKeyVaultSecretProviderClass', __args__, opts=opts, typ=GetAzureKeyVaultSecretProviderClassResult)
    return __ret__.apply(lambda __response__: GetAzureKeyVaultSecretProviderClassResult(
        client_id=pulumi.get(__response__, 'client_id'),
        extended_location=pulumi.get(__response__, 'extended_location'),
        id=pulumi.get(__response__, 'id'),
        keyvault_name=pulumi.get(__response__, 'keyvault_name'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        objects=pulumi.get(__response__, 'objects'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type')))
