# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['SecretSyncArgs', 'SecretSync']

@pulumi.input_type
class SecretSyncArgs:
    def __init__(__self__, *,
                 kubernetes_secret_type: pulumi.Input[Union[str, 'KubernetesSecretType']],
                 object_secret_mapping: pulumi.Input[Sequence[pulumi.Input['KubernetesSecretObjectMappingArgs']]],
                 resource_group_name: pulumi.Input[str],
                 secret_provider_class_name: pulumi.Input[str],
                 service_account_name: pulumi.Input[str],
                 extended_location: Optional[pulumi.Input['AzureResourceManagerCommonTypesExtendedLocationArgs']] = None,
                 force_synchronization: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 secret_sync_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SecretSync resource.
        :param pulumi.Input[Union[str, 'KubernetesSecretType']] kubernetes_secret_type: Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        :param pulumi.Input[Sequence[pulumi.Input['KubernetesSecretObjectMappingArgs']]] object_secret_mapping: An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] secret_provider_class_name: SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        :param pulumi.Input[str] service_account_name: ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        :param pulumi.Input['AzureResourceManagerCommonTypesExtendedLocationArgs'] extended_location: The complex type of the extended location.
        :param pulumi.Input[str] force_synchronization: ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] secret_sync_name: The name of the SecretSync
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "kubernetes_secret_type", kubernetes_secret_type)
        pulumi.set(__self__, "object_secret_mapping", object_secret_mapping)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "secret_provider_class_name", secret_provider_class_name)
        pulumi.set(__self__, "service_account_name", service_account_name)
        if extended_location is not None:
            pulumi.set(__self__, "extended_location", extended_location)
        if force_synchronization is not None:
            pulumi.set(__self__, "force_synchronization", force_synchronization)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if secret_sync_name is not None:
            pulumi.set(__self__, "secret_sync_name", secret_sync_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="kubernetesSecretType")
    def kubernetes_secret_type(self) -> pulumi.Input[Union[str, 'KubernetesSecretType']]:
        """
        Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        """
        return pulumi.get(self, "kubernetes_secret_type")

    @kubernetes_secret_type.setter
    def kubernetes_secret_type(self, value: pulumi.Input[Union[str, 'KubernetesSecretType']]):
        pulumi.set(self, "kubernetes_secret_type", value)

    @property
    @pulumi.getter(name="objectSecretMapping")
    def object_secret_mapping(self) -> pulumi.Input[Sequence[pulumi.Input['KubernetesSecretObjectMappingArgs']]]:
        """
        An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        """
        return pulumi.get(self, "object_secret_mapping")

    @object_secret_mapping.setter
    def object_secret_mapping(self, value: pulumi.Input[Sequence[pulumi.Input['KubernetesSecretObjectMappingArgs']]]):
        pulumi.set(self, "object_secret_mapping", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="secretProviderClassName")
    def secret_provider_class_name(self) -> pulumi.Input[str]:
        """
        SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        """
        return pulumi.get(self, "secret_provider_class_name")

    @secret_provider_class_name.setter
    def secret_provider_class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_provider_class_name", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> pulumi.Input[str]:
        """
        ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> Optional[pulumi.Input['AzureResourceManagerCommonTypesExtendedLocationArgs']]:
        """
        The complex type of the extended location.
        """
        return pulumi.get(self, "extended_location")

    @extended_location.setter
    def extended_location(self, value: Optional[pulumi.Input['AzureResourceManagerCommonTypesExtendedLocationArgs']]):
        pulumi.set(self, "extended_location", value)

    @property
    @pulumi.getter(name="forceSynchronization")
    def force_synchronization(self) -> Optional[pulumi.Input[str]]:
        """
        ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        """
        return pulumi.get(self, "force_synchronization")

    @force_synchronization.setter
    def force_synchronization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_synchronization", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="secretSyncName")
    def secret_sync_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SecretSync
        """
        return pulumi.get(self, "secret_sync_name")

    @secret_sync_name.setter
    def secret_sync_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_sync_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class SecretSync(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 extended_location: Optional[pulumi.Input[Union['AzureResourceManagerCommonTypesExtendedLocationArgs', 'AzureResourceManagerCommonTypesExtendedLocationArgsDict']]] = None,
                 force_synchronization: Optional[pulumi.Input[str]] = None,
                 kubernetes_secret_type: Optional[pulumi.Input[Union[str, 'KubernetesSecretType']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 object_secret_mapping: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesSecretObjectMappingArgs', 'KubernetesSecretObjectMappingArgsDict']]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 secret_provider_class_name: Optional[pulumi.Input[str]] = None,
                 secret_sync_name: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The SecretSync resource.
        Azure REST API version: 2024-08-21-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AzureResourceManagerCommonTypesExtendedLocationArgs', 'AzureResourceManagerCommonTypesExtendedLocationArgsDict']] extended_location: The complex type of the extended location.
        :param pulumi.Input[str] force_synchronization: ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        :param pulumi.Input[Union[str, 'KubernetesSecretType']] kubernetes_secret_type: Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Sequence[pulumi.Input[Union['KubernetesSecretObjectMappingArgs', 'KubernetesSecretObjectMappingArgsDict']]]] object_secret_mapping: An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] secret_provider_class_name: SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        :param pulumi.Input[str] secret_sync_name: The name of the SecretSync
        :param pulumi.Input[str] service_account_name: ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecretSyncArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The SecretSync resource.
        Azure REST API version: 2024-08-21-preview.

        :param str resource_name: The name of the resource.
        :param SecretSyncArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretSyncArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 extended_location: Optional[pulumi.Input[Union['AzureResourceManagerCommonTypesExtendedLocationArgs', 'AzureResourceManagerCommonTypesExtendedLocationArgsDict']]] = None,
                 force_synchronization: Optional[pulumi.Input[str]] = None,
                 kubernetes_secret_type: Optional[pulumi.Input[Union[str, 'KubernetesSecretType']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 object_secret_mapping: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesSecretObjectMappingArgs', 'KubernetesSecretObjectMappingArgsDict']]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 secret_provider_class_name: Optional[pulumi.Input[str]] = None,
                 secret_sync_name: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretSyncArgs.__new__(SecretSyncArgs)

            __props__.__dict__["extended_location"] = extended_location
            __props__.__dict__["force_synchronization"] = force_synchronization
            if kubernetes_secret_type is None and not opts.urn:
                raise TypeError("Missing required property 'kubernetes_secret_type'")
            __props__.__dict__["kubernetes_secret_type"] = kubernetes_secret_type
            __props__.__dict__["location"] = location
            if object_secret_mapping is None and not opts.urn:
                raise TypeError("Missing required property 'object_secret_mapping'")
            __props__.__dict__["object_secret_mapping"] = object_secret_mapping
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if secret_provider_class_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_provider_class_name'")
            __props__.__dict__["secret_provider_class_name"] = secret_provider_class_name
            __props__.__dict__["secret_sync_name"] = secret_sync_name
            if service_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_account_name'")
            __props__.__dict__["service_account_name"] = service_account_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:secretsynccontroller/v20240821preview:SecretSync")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SecretSync, __self__).__init__(
            'azure-native:secretsynccontroller:SecretSync',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SecretSync':
        """
        Get an existing SecretSync resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SecretSyncArgs.__new__(SecretSyncArgs)

        __props__.__dict__["extended_location"] = None
        __props__.__dict__["force_synchronization"] = None
        __props__.__dict__["kubernetes_secret_type"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["object_secret_mapping"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["secret_provider_class_name"] = None
        __props__.__dict__["service_account_name"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return SecretSync(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="extendedLocation")
    def extended_location(self) -> pulumi.Output[Optional['outputs.AzureResourceManagerCommonTypesExtendedLocationResponse']]:
        """
        The complex type of the extended location.
        """
        return pulumi.get(self, "extended_location")

    @property
    @pulumi.getter(name="forceSynchronization")
    def force_synchronization(self) -> pulumi.Output[Optional[str]]:
        """
        ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts.
        """
        return pulumi.get(self, "force_synchronization")

    @property
    @pulumi.getter(name="kubernetesSecretType")
    def kubernetes_secret_type(self) -> pulumi.Output[str]:
        """
        Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type.
        """
        return pulumi.get(self, "kubernetes_secret_type")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectSecretMapping")
    def object_secret_mapping(self) -> pulumi.Output[Sequence['outputs.KubernetesSecretObjectMappingResponse']]:
        """
        An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
        """
        return pulumi.get(self, "object_secret_mapping")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the SecretSync instance.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="secretProviderClassName")
    def secret_provider_class_name(self) -> pulumi.Output[str]:
        """
        SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store.
        """
        return pulumi.get(self, "secret_provider_class_name")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> pulumi.Output[str]:
        """
        ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider.
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.SecretSyncStatusResponse']:
        """
        SecretSyncStatus defines the observed state of the secret synchronization process.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

