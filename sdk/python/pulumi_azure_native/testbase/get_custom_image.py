# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCustomImageResult',
    'AwaitableGetCustomImageResult',
    'get_custom_image',
    'get_custom_image_output',
]

@pulumi.output_type
class GetCustomImageResult:
    """
    The test base custom image resource.
    """
    def __init__(__self__, creation_time=None, definition_name=None, id=None, name=None, os_disk_image_size_in_gb=None, product=None, provisioning_state=None, release=None, release_version_date=None, source=None, status=None, system_data=None, type=None, validation_results=None, version_name=None, vhd_file_name=None, vhd_id=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if definition_name and not isinstance(definition_name, str):
            raise TypeError("Expected argument 'definition_name' to be a str")
        pulumi.set(__self__, "definition_name", definition_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_disk_image_size_in_gb and not isinstance(os_disk_image_size_in_gb, float):
            raise TypeError("Expected argument 'os_disk_image_size_in_gb' to be a float")
        pulumi.set(__self__, "os_disk_image_size_in_gb", os_disk_image_size_in_gb)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if release and not isinstance(release, str):
            raise TypeError("Expected argument 'release' to be a str")
        pulumi.set(__self__, "release", release)
        if release_version_date and not isinstance(release_version_date, str):
            raise TypeError("Expected argument 'release_version_date' to be a str")
        pulumi.set(__self__, "release_version_date", release_version_date)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if validation_results and not isinstance(validation_results, dict):
            raise TypeError("Expected argument 'validation_results' to be a dict")
        pulumi.set(__self__, "validation_results", validation_results)
        if version_name and not isinstance(version_name, str):
            raise TypeError("Expected argument 'version_name' to be a str")
        pulumi.set(__self__, "version_name", version_name)
        if vhd_file_name and not isinstance(vhd_file_name, str):
            raise TypeError("Expected argument 'vhd_file_name' to be a str")
        pulumi.set(__self__, "vhd_file_name", vhd_file_name)
        if vhd_id and not isinstance(vhd_id, str):
            raise TypeError("Expected argument 'vhd_id' to be a str")
        pulumi.set(__self__, "vhd_id", vhd_id)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The UTC timestamp when the custom image was published.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="definitionName")
    def definition_name(self) -> str:
        """
        Image definition name.
        """
        return pulumi.get(self, "definition_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osDiskImageSizeInGB")
    def os_disk_image_size_in_gb(self) -> float:
        """
        This property indicates the size of the VHD to be created.
        """
        return pulumi.get(self, "os_disk_image_size_in_gb")

    @property
    @pulumi.getter
    def product(self) -> str:
        """
        Product of the custom image.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def release(self) -> str:
        """
        Release of the custom image OS.
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="releaseVersionDate")
    def release_version_date(self) -> str:
        """
        The release version date of the release of the custom image OS.
        """
        return pulumi.get(self, "release_version_date")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Custom image source type.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the custom image.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationResults")
    def validation_results(self) -> 'outputs.ImageValidationResultsResponse':
        """
        The validation result of the custom image.
        """
        return pulumi.get(self, "validation_results")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> str:
        """
        Image version name.
        """
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="vhdFileName")
    def vhd_file_name(self) -> str:
        """
        The file name of the associated VHD resource.
        """
        return pulumi.get(self, "vhd_file_name")

    @property
    @pulumi.getter(name="vhdId")
    def vhd_id(self) -> Optional[str]:
        """
        The Id of the associated VHD resource.
        """
        return pulumi.get(self, "vhd_id")


class AwaitableGetCustomImageResult(GetCustomImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomImageResult(
            creation_time=self.creation_time,
            definition_name=self.definition_name,
            id=self.id,
            name=self.name,
            os_disk_image_size_in_gb=self.os_disk_image_size_in_gb,
            product=self.product,
            provisioning_state=self.provisioning_state,
            release=self.release,
            release_version_date=self.release_version_date,
            source=self.source,
            status=self.status,
            system_data=self.system_data,
            type=self.type,
            validation_results=self.validation_results,
            version_name=self.version_name,
            vhd_file_name=self.vhd_file_name,
            vhd_id=self.vhd_id)


def get_custom_image(custom_image_name: Optional[str] = None,
                     resource_group_name: Optional[str] = None,
                     test_base_account_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomImageResult:
    """
    Gets a test base custom image.
    Azure REST API version: 2023-11-01-preview.


    :param str custom_image_name: The resource name of the test base custom image.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str test_base_account_name: The resource name of the Test Base Account.
    """
    __args__ = dict()
    __args__['customImageName'] = custom_image_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['testBaseAccountName'] = test_base_account_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:testbase:getCustomImage', __args__, opts=opts, typ=GetCustomImageResult).value

    return AwaitableGetCustomImageResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        definition_name=pulumi.get(__ret__, 'definition_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        os_disk_image_size_in_gb=pulumi.get(__ret__, 'os_disk_image_size_in_gb'),
        product=pulumi.get(__ret__, 'product'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        release=pulumi.get(__ret__, 'release'),
        release_version_date=pulumi.get(__ret__, 'release_version_date'),
        source=pulumi.get(__ret__, 'source'),
        status=pulumi.get(__ret__, 'status'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        validation_results=pulumi.get(__ret__, 'validation_results'),
        version_name=pulumi.get(__ret__, 'version_name'),
        vhd_file_name=pulumi.get(__ret__, 'vhd_file_name'),
        vhd_id=pulumi.get(__ret__, 'vhd_id'))


@_utilities.lift_output_func(get_custom_image)
def get_custom_image_output(custom_image_name: Optional[pulumi.Input[str]] = None,
                            resource_group_name: Optional[pulumi.Input[str]] = None,
                            test_base_account_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomImageResult]:
    """
    Gets a test base custom image.
    Azure REST API version: 2023-11-01-preview.


    :param str custom_image_name: The resource name of the test base custom image.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str test_base_account_name: The resource name of the Test Base Account.
    """
    ...
