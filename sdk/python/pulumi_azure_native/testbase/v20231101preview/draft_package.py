# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DraftPackageArgs', 'DraftPackage']

@pulumi.input_type
class DraftPackageArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 test_base_account_name: pulumi.Input[str],
                 app_file_name: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 draft_package_name: Optional[pulumi.Input[str]] = None,
                 edit_package: Optional[pulumi.Input[bool]] = None,
                 executable_launch_command: Optional[pulumi.Input[str]] = None,
                 first_party_apps: Optional[pulumi.Input[Sequence[pulumi.Input['FirstPartyAppDefinitionArgs']]]] = None,
                 flighting_ring: Optional[pulumi.Input[str]] = None,
                 gallery_apps: Optional[pulumi.Input[Sequence[pulumi.Input['GalleryAppDefinitionArgs']]]] = None,
                 highlighted_files: Optional[pulumi.Input[Sequence[pulumi.Input['HighlightedFileArgs']]]] = None,
                 inplace_upgrade_os_pair: Optional[pulumi.Input['InplaceUpgradeOSInfoArgs']] = None,
                 intune_enrollment_metadata: Optional[pulumi.Input['IntuneEnrollmentMetadataArgs']] = None,
                 intune_metadata: Optional[pulumi.Input['DraftPackageIntuneAppMetadataArgs']] = None,
                 package_id: Optional[pulumi.Input[str]] = None,
                 package_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 process_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[Union[str, 'DraftPackageSourceType']]] = None,
                 tab_state: Optional[pulumi.Input['TabStateArgs']] = None,
                 target_os_list: Optional[pulumi.Input[Sequence[pulumi.Input['TargetOSInfoArgs']]]] = None,
                 test_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]]] = None,
                 tests: Optional[pulumi.Input[Sequence[pulumi.Input['TestArgs']]]] = None,
                 use_autofill: Optional[pulumi.Input[bool]] = None,
                 use_sample: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DraftPackage resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] test_base_account_name: The resource name of the Test Base Account.
        :param pulumi.Input[str] app_file_name: The name of the app file.
        :param pulumi.Input[str] application_name: Application name
        :param pulumi.Input[str] comments: Comments added by user.
        :param pulumi.Input[str] draft_package_name: The resource name of the Test Base Draft Package.
        :param pulumi.Input[bool] edit_package: Specifies whether this draft package is used to edit a package.
        :param pulumi.Input[str] executable_launch_command: The executable launch command for script auto-fill. Will be used to run the application.
        :param pulumi.Input[Sequence[pulumi.Input['FirstPartyAppDefinitionArgs']]] first_party_apps: The list of first party applications to test along with user application.
        :param pulumi.Input[str] flighting_ring: The flighting ring for feature update.
        :param pulumi.Input[Sequence[pulumi.Input['GalleryAppDefinitionArgs']]] gallery_apps: The list of gallery apps to test along with user application.
        :param pulumi.Input[Sequence[pulumi.Input['HighlightedFileArgs']]] highlighted_files: The highlight files in the package.
        :param pulumi.Input['InplaceUpgradeOSInfoArgs'] inplace_upgrade_os_pair: Specifies the baseline os and target os for inplace upgrade.
        :param pulumi.Input['IntuneEnrollmentMetadataArgs'] intune_enrollment_metadata: The metadata of Intune enrollment.
        :param pulumi.Input['DraftPackageIntuneAppMetadataArgs'] intune_metadata: Metadata used to generate draft package folder and scripts.
        :param pulumi.Input[str] package_id: Specifies the package id from which the draft package copied.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] package_tags: Tags of the package to be created.
        :param pulumi.Input[str] process_name: The process name for script auto-fill. Will be used to identify the application process.
        :param pulumi.Input[Union[str, 'DraftPackageSourceType']] source_type: The source type.
        :param pulumi.Input['TabStateArgs'] tab_state: Tab state.
        :param pulumi.Input[Sequence[pulumi.Input['TargetOSInfoArgs']]] target_os_list: Specifies the target OSs of specific OS Update types.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]] test_types: OOB, functional or flow driven. Mapped to the data in 'tests' property.
        :param pulumi.Input[Sequence[pulumi.Input['TestArgs']]] tests: The detailed test information.
        :param pulumi.Input[bool] use_autofill: Indicates whether user choose to enable script auto-fill.
        :param pulumi.Input[bool] use_sample: Specifies whether a sample package should be used instead of the one uploaded by the user.
        :param pulumi.Input[str] version: Application version
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "test_base_account_name", test_base_account_name)
        if app_file_name is not None:
            pulumi.set(__self__, "app_file_name", app_file_name)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if draft_package_name is not None:
            pulumi.set(__self__, "draft_package_name", draft_package_name)
        if edit_package is None:
            edit_package = False
        if edit_package is not None:
            pulumi.set(__self__, "edit_package", edit_package)
        if executable_launch_command is not None:
            pulumi.set(__self__, "executable_launch_command", executable_launch_command)
        if first_party_apps is not None:
            pulumi.set(__self__, "first_party_apps", first_party_apps)
        if flighting_ring is not None:
            pulumi.set(__self__, "flighting_ring", flighting_ring)
        if gallery_apps is not None:
            pulumi.set(__self__, "gallery_apps", gallery_apps)
        if highlighted_files is not None:
            pulumi.set(__self__, "highlighted_files", highlighted_files)
        if inplace_upgrade_os_pair is not None:
            pulumi.set(__self__, "inplace_upgrade_os_pair", inplace_upgrade_os_pair)
        if intune_enrollment_metadata is not None:
            pulumi.set(__self__, "intune_enrollment_metadata", intune_enrollment_metadata)
        if intune_metadata is not None:
            pulumi.set(__self__, "intune_metadata", intune_metadata)
        if package_id is not None:
            pulumi.set(__self__, "package_id", package_id)
        if package_tags is not None:
            pulumi.set(__self__, "package_tags", package_tags)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if source_type is None:
            source_type = 'Native'
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if tab_state is not None:
            pulumi.set(__self__, "tab_state", tab_state)
        if target_os_list is not None:
            pulumi.set(__self__, "target_os_list", target_os_list)
        if test_types is not None:
            pulumi.set(__self__, "test_types", test_types)
        if tests is not None:
            pulumi.set(__self__, "tests", tests)
        if use_autofill is not None:
            pulumi.set(__self__, "use_autofill", use_autofill)
        if use_sample is not None:
            pulumi.set(__self__, "use_sample", use_sample)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="testBaseAccountName")
    def test_base_account_name(self) -> pulumi.Input[str]:
        """
        The resource name of the Test Base Account.
        """
        return pulumi.get(self, "test_base_account_name")

    @test_base_account_name.setter
    def test_base_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_base_account_name", value)

    @property
    @pulumi.getter(name="appFileName")
    def app_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the app file.
        """
        return pulumi.get(self, "app_file_name")

    @app_file_name.setter
    def app_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_file_name", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Application name
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments added by user.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="draftPackageName")
    def draft_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the Test Base Draft Package.
        """
        return pulumi.get(self, "draft_package_name")

    @draft_package_name.setter
    def draft_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "draft_package_name", value)

    @property
    @pulumi.getter(name="editPackage")
    def edit_package(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this draft package is used to edit a package.
        """
        return pulumi.get(self, "edit_package")

    @edit_package.setter
    def edit_package(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "edit_package", value)

    @property
    @pulumi.getter(name="executableLaunchCommand")
    def executable_launch_command(self) -> Optional[pulumi.Input[str]]:
        """
        The executable launch command for script auto-fill. Will be used to run the application.
        """
        return pulumi.get(self, "executable_launch_command")

    @executable_launch_command.setter
    def executable_launch_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executable_launch_command", value)

    @property
    @pulumi.getter(name="firstPartyApps")
    def first_party_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirstPartyAppDefinitionArgs']]]]:
        """
        The list of first party applications to test along with user application.
        """
        return pulumi.get(self, "first_party_apps")

    @first_party_apps.setter
    def first_party_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirstPartyAppDefinitionArgs']]]]):
        pulumi.set(self, "first_party_apps", value)

    @property
    @pulumi.getter(name="flightingRing")
    def flighting_ring(self) -> Optional[pulumi.Input[str]]:
        """
        The flighting ring for feature update.
        """
        return pulumi.get(self, "flighting_ring")

    @flighting_ring.setter
    def flighting_ring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flighting_ring", value)

    @property
    @pulumi.getter(name="galleryApps")
    def gallery_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GalleryAppDefinitionArgs']]]]:
        """
        The list of gallery apps to test along with user application.
        """
        return pulumi.get(self, "gallery_apps")

    @gallery_apps.setter
    def gallery_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GalleryAppDefinitionArgs']]]]):
        pulumi.set(self, "gallery_apps", value)

    @property
    @pulumi.getter(name="highlightedFiles")
    def highlighted_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HighlightedFileArgs']]]]:
        """
        The highlight files in the package.
        """
        return pulumi.get(self, "highlighted_files")

    @highlighted_files.setter
    def highlighted_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HighlightedFileArgs']]]]):
        pulumi.set(self, "highlighted_files", value)

    @property
    @pulumi.getter(name="inplaceUpgradeOSPair")
    def inplace_upgrade_os_pair(self) -> Optional[pulumi.Input['InplaceUpgradeOSInfoArgs']]:
        """
        Specifies the baseline os and target os for inplace upgrade.
        """
        return pulumi.get(self, "inplace_upgrade_os_pair")

    @inplace_upgrade_os_pair.setter
    def inplace_upgrade_os_pair(self, value: Optional[pulumi.Input['InplaceUpgradeOSInfoArgs']]):
        pulumi.set(self, "inplace_upgrade_os_pair", value)

    @property
    @pulumi.getter(name="intuneEnrollmentMetadata")
    def intune_enrollment_metadata(self) -> Optional[pulumi.Input['IntuneEnrollmentMetadataArgs']]:
        """
        The metadata of Intune enrollment.
        """
        return pulumi.get(self, "intune_enrollment_metadata")

    @intune_enrollment_metadata.setter
    def intune_enrollment_metadata(self, value: Optional[pulumi.Input['IntuneEnrollmentMetadataArgs']]):
        pulumi.set(self, "intune_enrollment_metadata", value)

    @property
    @pulumi.getter(name="intuneMetadata")
    def intune_metadata(self) -> Optional[pulumi.Input['DraftPackageIntuneAppMetadataArgs']]:
        """
        Metadata used to generate draft package folder and scripts.
        """
        return pulumi.get(self, "intune_metadata")

    @intune_metadata.setter
    def intune_metadata(self, value: Optional[pulumi.Input['DraftPackageIntuneAppMetadataArgs']]):
        pulumi.set(self, "intune_metadata", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the package id from which the draft package copied.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="packageTags")
    def package_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags of the package to be created.
        """
        return pulumi.get(self, "package_tags")

    @package_tags.setter
    def package_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "package_tags", value)

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[pulumi.Input[str]]:
        """
        The process name for script auto-fill. Will be used to identify the application process.
        """
        return pulumi.get(self, "process_name")

    @process_name.setter
    def process_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[Union[str, 'DraftPackageSourceType']]]:
        """
        The source type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[Union[str, 'DraftPackageSourceType']]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="tabState")
    def tab_state(self) -> Optional[pulumi.Input['TabStateArgs']]:
        """
        Tab state.
        """
        return pulumi.get(self, "tab_state")

    @tab_state.setter
    def tab_state(self, value: Optional[pulumi.Input['TabStateArgs']]):
        pulumi.set(self, "tab_state", value)

    @property
    @pulumi.getter(name="targetOSList")
    def target_os_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetOSInfoArgs']]]]:
        """
        Specifies the target OSs of specific OS Update types.
        """
        return pulumi.get(self, "target_os_list")

    @target_os_list.setter
    def target_os_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetOSInfoArgs']]]]):
        pulumi.set(self, "target_os_list", value)

    @property
    @pulumi.getter(name="testTypes")
    def test_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]]]:
        """
        OOB, functional or flow driven. Mapped to the data in 'tests' property.
        """
        return pulumi.get(self, "test_types")

    @test_types.setter
    def test_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]]]):
        pulumi.set(self, "test_types", value)

    @property
    @pulumi.getter
    def tests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TestArgs']]]]:
        """
        The detailed test information.
        """
        return pulumi.get(self, "tests")

    @tests.setter
    def tests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TestArgs']]]]):
        pulumi.set(self, "tests", value)

    @property
    @pulumi.getter(name="useAutofill")
    def use_autofill(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether user choose to enable script auto-fill.
        """
        return pulumi.get(self, "use_autofill")

    @use_autofill.setter
    def use_autofill(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_autofill", value)

    @property
    @pulumi.getter(name="useSample")
    def use_sample(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether a sample package should be used instead of the one uploaded by the user.
        """
        return pulumi.get(self, "use_sample")

    @use_sample.setter
    def use_sample(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_sample", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Application version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class DraftPackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_file_name: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 draft_package_name: Optional[pulumi.Input[str]] = None,
                 edit_package: Optional[pulumi.Input[bool]] = None,
                 executable_launch_command: Optional[pulumi.Input[str]] = None,
                 first_party_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirstPartyAppDefinitionArgs']]]]] = None,
                 flighting_ring: Optional[pulumi.Input[str]] = None,
                 gallery_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GalleryAppDefinitionArgs']]]]] = None,
                 highlighted_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HighlightedFileArgs']]]]] = None,
                 inplace_upgrade_os_pair: Optional[pulumi.Input[pulumi.InputType['InplaceUpgradeOSInfoArgs']]] = None,
                 intune_enrollment_metadata: Optional[pulumi.Input[pulumi.InputType['IntuneEnrollmentMetadataArgs']]] = None,
                 intune_metadata: Optional[pulumi.Input[pulumi.InputType['DraftPackageIntuneAppMetadataArgs']]] = None,
                 package_id: Optional[pulumi.Input[str]] = None,
                 package_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 process_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[Union[str, 'DraftPackageSourceType']]] = None,
                 tab_state: Optional[pulumi.Input[pulumi.InputType['TabStateArgs']]] = None,
                 target_os_list: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetOSInfoArgs']]]]] = None,
                 test_base_account_name: Optional[pulumi.Input[str]] = None,
                 test_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]]] = None,
                 tests: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TestArgs']]]]] = None,
                 use_autofill: Optional[pulumi.Input[bool]] = None,
                 use_sample: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The Test Base Draft Package resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_file_name: The name of the app file.
        :param pulumi.Input[str] application_name: Application name
        :param pulumi.Input[str] comments: Comments added by user.
        :param pulumi.Input[str] draft_package_name: The resource name of the Test Base Draft Package.
        :param pulumi.Input[bool] edit_package: Specifies whether this draft package is used to edit a package.
        :param pulumi.Input[str] executable_launch_command: The executable launch command for script auto-fill. Will be used to run the application.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirstPartyAppDefinitionArgs']]]] first_party_apps: The list of first party applications to test along with user application.
        :param pulumi.Input[str] flighting_ring: The flighting ring for feature update.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GalleryAppDefinitionArgs']]]] gallery_apps: The list of gallery apps to test along with user application.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HighlightedFileArgs']]]] highlighted_files: The highlight files in the package.
        :param pulumi.Input[pulumi.InputType['InplaceUpgradeOSInfoArgs']] inplace_upgrade_os_pair: Specifies the baseline os and target os for inplace upgrade.
        :param pulumi.Input[pulumi.InputType['IntuneEnrollmentMetadataArgs']] intune_enrollment_metadata: The metadata of Intune enrollment.
        :param pulumi.Input[pulumi.InputType['DraftPackageIntuneAppMetadataArgs']] intune_metadata: Metadata used to generate draft package folder and scripts.
        :param pulumi.Input[str] package_id: Specifies the package id from which the draft package copied.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] package_tags: Tags of the package to be created.
        :param pulumi.Input[str] process_name: The process name for script auto-fill. Will be used to identify the application process.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'DraftPackageSourceType']] source_type: The source type.
        :param pulumi.Input[pulumi.InputType['TabStateArgs']] tab_state: Tab state.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetOSInfoArgs']]]] target_os_list: Specifies the target OSs of specific OS Update types.
        :param pulumi.Input[str] test_base_account_name: The resource name of the Test Base Account.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]] test_types: OOB, functional or flow driven. Mapped to the data in 'tests' property.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TestArgs']]]] tests: The detailed test information.
        :param pulumi.Input[bool] use_autofill: Indicates whether user choose to enable script auto-fill.
        :param pulumi.Input[bool] use_sample: Specifies whether a sample package should be used instead of the one uploaded by the user.
        :param pulumi.Input[str] version: Application version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DraftPackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The Test Base Draft Package resource.

        :param str resource_name: The name of the resource.
        :param DraftPackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DraftPackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_file_name: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 draft_package_name: Optional[pulumi.Input[str]] = None,
                 edit_package: Optional[pulumi.Input[bool]] = None,
                 executable_launch_command: Optional[pulumi.Input[str]] = None,
                 first_party_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirstPartyAppDefinitionArgs']]]]] = None,
                 flighting_ring: Optional[pulumi.Input[str]] = None,
                 gallery_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GalleryAppDefinitionArgs']]]]] = None,
                 highlighted_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HighlightedFileArgs']]]]] = None,
                 inplace_upgrade_os_pair: Optional[pulumi.Input[pulumi.InputType['InplaceUpgradeOSInfoArgs']]] = None,
                 intune_enrollment_metadata: Optional[pulumi.Input[pulumi.InputType['IntuneEnrollmentMetadataArgs']]] = None,
                 intune_metadata: Optional[pulumi.Input[pulumi.InputType['DraftPackageIntuneAppMetadataArgs']]] = None,
                 package_id: Optional[pulumi.Input[str]] = None,
                 package_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 process_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[Union[str, 'DraftPackageSourceType']]] = None,
                 tab_state: Optional[pulumi.Input[pulumi.InputType['TabStateArgs']]] = None,
                 target_os_list: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetOSInfoArgs']]]]] = None,
                 test_base_account_name: Optional[pulumi.Input[str]] = None,
                 test_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'TestType']]]]] = None,
                 tests: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TestArgs']]]]] = None,
                 use_autofill: Optional[pulumi.Input[bool]] = None,
                 use_sample: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DraftPackageArgs.__new__(DraftPackageArgs)

            __props__.__dict__["app_file_name"] = app_file_name
            __props__.__dict__["application_name"] = application_name
            __props__.__dict__["comments"] = comments
            __props__.__dict__["draft_package_name"] = draft_package_name
            if edit_package is None:
                edit_package = False
            __props__.__dict__["edit_package"] = edit_package
            __props__.__dict__["executable_launch_command"] = executable_launch_command
            __props__.__dict__["first_party_apps"] = first_party_apps
            __props__.__dict__["flighting_ring"] = flighting_ring
            __props__.__dict__["gallery_apps"] = gallery_apps
            __props__.__dict__["highlighted_files"] = highlighted_files
            __props__.__dict__["inplace_upgrade_os_pair"] = inplace_upgrade_os_pair
            __props__.__dict__["intune_enrollment_metadata"] = intune_enrollment_metadata
            __props__.__dict__["intune_metadata"] = intune_metadata
            __props__.__dict__["package_id"] = package_id
            __props__.__dict__["package_tags"] = package_tags
            __props__.__dict__["process_name"] = process_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if source_type is None:
                source_type = 'Native'
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["tab_state"] = tab_state
            __props__.__dict__["target_os_list"] = target_os_list
            if test_base_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'test_base_account_name'")
            __props__.__dict__["test_base_account_name"] = test_base_account_name
            __props__.__dict__["test_types"] = test_types
            __props__.__dict__["tests"] = tests
            __props__.__dict__["use_autofill"] = use_autofill
            __props__.__dict__["use_sample"] = use_sample
            __props__.__dict__["version"] = version
            __props__.__dict__["draft_package_path"] = None
            __props__.__dict__["last_modified_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["working_path"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:testbase:DraftPackage")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DraftPackage, __self__).__init__(
            'azure-native:testbase/v20231101preview:DraftPackage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DraftPackage':
        """
        Get an existing DraftPackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DraftPackageArgs.__new__(DraftPackageArgs)

        __props__.__dict__["app_file_name"] = None
        __props__.__dict__["application_name"] = None
        __props__.__dict__["comments"] = None
        __props__.__dict__["draft_package_path"] = None
        __props__.__dict__["edit_package"] = None
        __props__.__dict__["executable_launch_command"] = None
        __props__.__dict__["first_party_apps"] = None
        __props__.__dict__["flighting_ring"] = None
        __props__.__dict__["gallery_apps"] = None
        __props__.__dict__["highlighted_files"] = None
        __props__.__dict__["inplace_upgrade_os_pair"] = None
        __props__.__dict__["intune_enrollment_metadata"] = None
        __props__.__dict__["intune_metadata"] = None
        __props__.__dict__["last_modified_time"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["package_id"] = None
        __props__.__dict__["package_tags"] = None
        __props__.__dict__["process_name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["source_type"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tab_state"] = None
        __props__.__dict__["target_os_list"] = None
        __props__.__dict__["test_types"] = None
        __props__.__dict__["tests"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["use_autofill"] = None
        __props__.__dict__["use_sample"] = None
        __props__.__dict__["version"] = None
        __props__.__dict__["working_path"] = None
        return DraftPackage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appFileName")
    def app_file_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the app file.
        """
        return pulumi.get(self, "app_file_name")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Output[Optional[str]]:
        """
        Application name
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comments added by user.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="draftPackagePath")
    def draft_package_path(self) -> pulumi.Output[str]:
        """
        The relative path of the folder hosting package files.
        """
        return pulumi.get(self, "draft_package_path")

    @property
    @pulumi.getter(name="editPackage")
    def edit_package(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether this draft package is used to edit a package.
        """
        return pulumi.get(self, "edit_package")

    @property
    @pulumi.getter(name="executableLaunchCommand")
    def executable_launch_command(self) -> pulumi.Output[Optional[str]]:
        """
        The executable launch command for script auto-fill. Will be used to run the application.
        """
        return pulumi.get(self, "executable_launch_command")

    @property
    @pulumi.getter(name="firstPartyApps")
    def first_party_apps(self) -> pulumi.Output[Optional[Sequence['outputs.FirstPartyAppDefinitionResponse']]]:
        """
        The list of first party applications to test along with user application.
        """
        return pulumi.get(self, "first_party_apps")

    @property
    @pulumi.getter(name="flightingRing")
    def flighting_ring(self) -> pulumi.Output[Optional[str]]:
        """
        The flighting ring for feature update.
        """
        return pulumi.get(self, "flighting_ring")

    @property
    @pulumi.getter(name="galleryApps")
    def gallery_apps(self) -> pulumi.Output[Optional[Sequence['outputs.GalleryAppDefinitionResponse']]]:
        """
        The list of gallery apps to test along with user application.
        """
        return pulumi.get(self, "gallery_apps")

    @property
    @pulumi.getter(name="highlightedFiles")
    def highlighted_files(self) -> pulumi.Output[Optional[Sequence['outputs.HighlightedFileResponse']]]:
        """
        The highlight files in the package.
        """
        return pulumi.get(self, "highlighted_files")

    @property
    @pulumi.getter(name="inplaceUpgradeOSPair")
    def inplace_upgrade_os_pair(self) -> pulumi.Output[Optional['outputs.InplaceUpgradeOSInfoResponse']]:
        """
        Specifies the baseline os and target os for inplace upgrade.
        """
        return pulumi.get(self, "inplace_upgrade_os_pair")

    @property
    @pulumi.getter(name="intuneEnrollmentMetadata")
    def intune_enrollment_metadata(self) -> pulumi.Output[Optional['outputs.IntuneEnrollmentMetadataResponse']]:
        """
        The metadata of Intune enrollment.
        """
        return pulumi.get(self, "intune_enrollment_metadata")

    @property
    @pulumi.getter(name="intuneMetadata")
    def intune_metadata(self) -> pulumi.Output[Optional['outputs.DraftPackageIntuneAppMetadataResponse']]:
        """
        Metadata used to generate draft package folder and scripts.
        """
        return pulumi.get(self, "intune_metadata")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> pulumi.Output[str]:
        """
        The UTC timestamp when the package was last modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the package id from which the draft package copied.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="packageTags")
    def package_tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Tags of the package to be created.
        """
        return pulumi.get(self, "package_tags")

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> pulumi.Output[Optional[str]]:
        """
        The process name for script auto-fill. Will be used to identify the application process.
        """
        return pulumi.get(self, "process_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[Optional[str]]:
        """
        The source type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="tabState")
    def tab_state(self) -> pulumi.Output[Optional['outputs.TabStateResponse']]:
        """
        Tab state.
        """
        return pulumi.get(self, "tab_state")

    @property
    @pulumi.getter(name="targetOSList")
    def target_os_list(self) -> pulumi.Output[Optional[Sequence['outputs.TargetOSInfoResponse']]]:
        """
        Specifies the target OSs of specific OS Update types.
        """
        return pulumi.get(self, "target_os_list")

    @property
    @pulumi.getter(name="testTypes")
    def test_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        OOB, functional or flow driven. Mapped to the data in 'tests' property.
        """
        return pulumi.get(self, "test_types")

    @property
    @pulumi.getter
    def tests(self) -> pulumi.Output[Optional[Sequence['outputs.TestResponse']]]:
        """
        The detailed test information.
        """
        return pulumi.get(self, "tests")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useAutofill")
    def use_autofill(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether user choose to enable script auto-fill.
        """
        return pulumi.get(self, "use_autofill")

    @property
    @pulumi.getter(name="useSample")
    def use_sample(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether a sample package should be used instead of the one uploaded by the user.
        """
        return pulumi.get(self, "use_sample")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[str]]:
        """
        Application version
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workingPath")
    def working_path(self) -> pulumi.Output[str]:
        """
        The relative path for a temporarily folder for package creation work.
        """
        return pulumi.get(self, "working_path")

