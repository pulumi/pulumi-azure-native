# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['CustomImageArgs', 'CustomImage']

@pulumi.input_type
class CustomImageArgs:
    def __init__(__self__, *,
                 definition_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 source: Optional[pulumi.Input[Union[str, 'ImageSource']]] = None,
                 test_base_account_name: pulumi.Input[str],
                 version_name: pulumi.Input[str],
                 custom_image_name: Optional[pulumi.Input[str]] = None,
                 vhd_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomImage resource.
        :param pulumi.Input[str] definition_name: Image definition name.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'ImageSource']] source: Custom image source type.
        :param pulumi.Input[str] test_base_account_name: The resource name of the Test Base Account.
        :param pulumi.Input[str] version_name: Image version name.
        :param pulumi.Input[str] custom_image_name: The resource name of the test base custom image.
        :param pulumi.Input[str] vhd_id: The Id of the associated VHD resource.
        """
        pulumi.set(__self__, "definition_name", definition_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if source is None:
            source = 'VHD'
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "test_base_account_name", test_base_account_name)
        pulumi.set(__self__, "version_name", version_name)
        if custom_image_name is not None:
            pulumi.set(__self__, "custom_image_name", custom_image_name)
        if vhd_id is not None:
            pulumi.set(__self__, "vhd_id", vhd_id)

    @property
    @pulumi.getter(name="definitionName")
    def definition_name(self) -> pulumi.Input[str]:
        """
        Image definition name.
        """
        return pulumi.get(self, "definition_name")

    @definition_name.setter
    def definition_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "definition_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[Union[str, 'ImageSource']]:
        """
        Custom image source type.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[Union[str, 'ImageSource']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="testBaseAccountName")
    def test_base_account_name(self) -> pulumi.Input[str]:
        """
        The resource name of the Test Base Account.
        """
        return pulumi.get(self, "test_base_account_name")

    @test_base_account_name.setter
    def test_base_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_base_account_name", value)

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> pulumi.Input[str]:
        """
        Image version name.
        """
        return pulumi.get(self, "version_name")

    @version_name.setter
    def version_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "version_name", value)

    @property
    @pulumi.getter(name="customImageName")
    def custom_image_name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the test base custom image.
        """
        return pulumi.get(self, "custom_image_name")

    @custom_image_name.setter
    def custom_image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_image_name", value)

    @property
    @pulumi.getter(name="vhdId")
    def vhd_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the associated VHD resource.
        """
        return pulumi.get(self, "vhd_id")

    @vhd_id.setter
    def vhd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vhd_id", value)


class CustomImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_image_name: Optional[pulumi.Input[str]] = None,
                 definition_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[Union[str, 'ImageSource']]] = None,
                 test_base_account_name: Optional[pulumi.Input[str]] = None,
                 version_name: Optional[pulumi.Input[str]] = None,
                 vhd_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The test base custom image resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_image_name: The resource name of the test base custom image.
        :param pulumi.Input[str] definition_name: Image definition name.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'ImageSource']] source: Custom image source type.
        :param pulumi.Input[str] test_base_account_name: The resource name of the Test Base Account.
        :param pulumi.Input[str] version_name: Image version name.
        :param pulumi.Input[str] vhd_id: The Id of the associated VHD resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The test base custom image resource.

        :param str resource_name: The name of the resource.
        :param CustomImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_image_name: Optional[pulumi.Input[str]] = None,
                 definition_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[Union[str, 'ImageSource']]] = None,
                 test_base_account_name: Optional[pulumi.Input[str]] = None,
                 version_name: Optional[pulumi.Input[str]] = None,
                 vhd_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomImageArgs.__new__(CustomImageArgs)

            __props__.__dict__["custom_image_name"] = custom_image_name
            if definition_name is None and not opts.urn:
                raise TypeError("Missing required property 'definition_name'")
            __props__.__dict__["definition_name"] = definition_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if source is None:
                source = 'VHD'
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if test_base_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'test_base_account_name'")
            __props__.__dict__["test_base_account_name"] = test_base_account_name
            if version_name is None and not opts.urn:
                raise TypeError("Missing required property 'version_name'")
            __props__.__dict__["version_name"] = version_name
            __props__.__dict__["vhd_id"] = vhd_id
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["os_disk_image_size_in_gb"] = None
            __props__.__dict__["product"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["release"] = None
            __props__.__dict__["release_version_date"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["validation_results"] = None
            __props__.__dict__["vhd_file_name"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:testbase:CustomImage")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CustomImage, __self__).__init__(
            'azure-native:testbase/v20231101preview:CustomImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CustomImage':
        """
        Get an existing CustomImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CustomImageArgs.__new__(CustomImageArgs)

        __props__.__dict__["creation_time"] = None
        __props__.__dict__["definition_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["os_disk_image_size_in_gb"] = None
        __props__.__dict__["product"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["release"] = None
        __props__.__dict__["release_version_date"] = None
        __props__.__dict__["source"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["validation_results"] = None
        __props__.__dict__["version_name"] = None
        __props__.__dict__["vhd_file_name"] = None
        __props__.__dict__["vhd_id"] = None
        return CustomImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        The UTC timestamp when the custom image was published.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="definitionName")
    def definition_name(self) -> pulumi.Output[str]:
        """
        Image definition name.
        """
        return pulumi.get(self, "definition_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osDiskImageSizeInGB")
    def os_disk_image_size_in_gb(self) -> pulumi.Output[float]:
        """
        This property indicates the size of the VHD to be created.
        """
        return pulumi.get(self, "os_disk_image_size_in_gb")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[str]:
        """
        Product of the custom image.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def release(self) -> pulumi.Output[str]:
        """
        Release of the custom image OS.
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="releaseVersionDate")
    def release_version_date(self) -> pulumi.Output[str]:
        """
        The release version date of the release of the custom image OS.
        """
        return pulumi.get(self, "release_version_date")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        Custom image source type.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the custom image.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationResults")
    def validation_results(self) -> pulumi.Output['outputs.ImageValidationResultsResponse']:
        """
        The validation result of the custom image.
        """
        return pulumi.get(self, "validation_results")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> pulumi.Output[str]:
        """
        Image version name.
        """
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="vhdFileName")
    def vhd_file_name(self) -> pulumi.Output[str]:
        """
        The file name of the associated VHD resource.
        """
        return pulumi.get(self, "vhd_file_name")

    @property
    @pulumi.getter(name="vhdId")
    def vhd_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Id of the associated VHD resource.
        """
        return pulumi.get(self, "vhd_id")

