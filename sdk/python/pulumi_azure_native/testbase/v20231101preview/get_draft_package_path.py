# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetDraftPackagePathResult',
    'AwaitableGetDraftPackagePathResult',
    'get_draft_package_path',
    'get_draft_package_path_output',
]

@pulumi.output_type
class GetDraftPackagePathResult:
    """
    The response of getting a download URL.
    """
    def __init__(__self__, base_url=None, draft_package_path=None, expiration_time=None, sas_token=None, working_path=None):
        if base_url and not isinstance(base_url, str):
            raise TypeError("Expected argument 'base_url' to be a str")
        pulumi.set(__self__, "base_url", base_url)
        if draft_package_path and not isinstance(draft_package_path, str):
            raise TypeError("Expected argument 'draft_package_path' to be a str")
        pulumi.set(__self__, "draft_package_path", draft_package_path)
        if expiration_time and not isinstance(expiration_time, str):
            raise TypeError("Expected argument 'expiration_time' to be a str")
        pulumi.set(__self__, "expiration_time", expiration_time)
        if sas_token and not isinstance(sas_token, str):
            raise TypeError("Expected argument 'sas_token' to be a str")
        pulumi.set(__self__, "sas_token", sas_token)
        if working_path and not isinstance(working_path, str):
            raise TypeError("Expected argument 'working_path' to be a str")
        pulumi.set(__self__, "working_path", working_path)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The base URL of the storage account.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="draftPackagePath")
    def draft_package_path(self) -> str:
        """
        The relative path of the folder hosting package files.
        """
        return pulumi.get(self, "draft_package_path")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        """
        Expiry date of the SAS token.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> str:
        """
        A SAS token for the storage account to access workspace.
        """
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="workingPath")
    def working_path(self) -> str:
        """
        The relative path for a temporary folder for package creation work.
        """
        return pulumi.get(self, "working_path")


class AwaitableGetDraftPackagePathResult(GetDraftPackagePathResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDraftPackagePathResult(
            base_url=self.base_url,
            draft_package_path=self.draft_package_path,
            expiration_time=self.expiration_time,
            sas_token=self.sas_token,
            working_path=self.working_path)


def get_draft_package_path(draft_package_name: Optional[str] = None,
                           resource_group_name: Optional[str] = None,
                           test_base_account_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDraftPackagePathResult:
    """
    Gets draft package path and temp working path with SAS.


    :param str draft_package_name: The resource name of the Test Base Draft Package.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str test_base_account_name: The resource name of the Test Base Account.
    """
    __args__ = dict()
    __args__['draftPackageName'] = draft_package_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['testBaseAccountName'] = test_base_account_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:testbase/v20231101preview:getDraftPackagePath', __args__, opts=opts, typ=GetDraftPackagePathResult).value

    return AwaitableGetDraftPackagePathResult(
        base_url=pulumi.get(__ret__, 'base_url'),
        draft_package_path=pulumi.get(__ret__, 'draft_package_path'),
        expiration_time=pulumi.get(__ret__, 'expiration_time'),
        sas_token=pulumi.get(__ret__, 'sas_token'),
        working_path=pulumi.get(__ret__, 'working_path'))


@_utilities.lift_output_func(get_draft_package_path)
def get_draft_package_path_output(draft_package_name: Optional[pulumi.Input[str]] = None,
                                  resource_group_name: Optional[pulumi.Input[str]] = None,
                                  test_base_account_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDraftPackagePathResult]:
    """
    Gets draft package path and temp working path with SAS.


    :param str draft_package_name: The resource name of the Test Base Draft Package.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str test_base_account_name: The resource name of the Test Base Account.
    """
    ...
