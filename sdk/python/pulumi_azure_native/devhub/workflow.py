# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WorkflowArgs', 'Workflow']

@pulumi.input_type
class WorkflowArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 app_name: Optional[pulumi.Input[str]] = None,
                 builder_version: Optional[pulumi.Input[str]] = None,
                 dockerfile_generation_mode: Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]] = None,
                 dockerfile_output_directory: Optional[pulumi.Input[str]] = None,
                 generation_language: Optional[pulumi.Input[Union[str, 'GenerationLanguage']]] = None,
                 github_workflow_profile: Optional[pulumi.Input['GitHubWorkflowProfileArgs']] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 language_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manifest_generation_mode: Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]] = None,
                 manifest_output_directory: Optional[pulumi.Input[str]] = None,
                 manifest_type: Optional[pulumi.Input[Union[str, 'GenerationManifestType']]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workflow resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] app_name: The name of the app.
        :param pulumi.Input[str] builder_version: The version of the language image used for building the code in the generated dockerfile.
        :param pulumi.Input[Union[str, 'DockerfileGenerationMode']] dockerfile_generation_mode: The mode of generation to be used for generating Dockerfiles.
        :param pulumi.Input[str] dockerfile_output_directory: The directory to output the generated Dockerfile to.
        :param pulumi.Input[Union[str, 'GenerationLanguage']] generation_language: The programming language used.
        :param pulumi.Input['GitHubWorkflowProfileArgs'] github_workflow_profile: Profile of a github workflow.
        :param pulumi.Input[str] image_name: The name of the image to be generated.
        :param pulumi.Input[str] image_tag: The tag to apply to the generated image.
        :param pulumi.Input[str] language_version: The version of the language image used for execution in the generated dockerfile.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Union[str, 'ManifestGenerationMode']] manifest_generation_mode: The mode of generation to be used for generating Manifest.
        :param pulumi.Input[str] manifest_output_directory: The directory to output the generated manifests to.
        :param pulumi.Input[Union[str, 'GenerationManifestType']] manifest_type: Determines the type of manifests to be generated.
        :param pulumi.Input[str] namespace: The namespace to deploy the application to.
        :param pulumi.Input[str] port: The port the application is exposed on.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] workflow_name: The name of the workflow resource.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if builder_version is not None:
            pulumi.set(__self__, "builder_version", builder_version)
        if dockerfile_generation_mode is not None:
            pulumi.set(__self__, "dockerfile_generation_mode", dockerfile_generation_mode)
        if dockerfile_output_directory is not None:
            pulumi.set(__self__, "dockerfile_output_directory", dockerfile_output_directory)
        if generation_language is not None:
            pulumi.set(__self__, "generation_language", generation_language)
        if github_workflow_profile is not None:
            pulumi.set(__self__, "github_workflow_profile", github_workflow_profile)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if language_version is not None:
            pulumi.set(__self__, "language_version", language_version)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if manifest_generation_mode is not None:
            pulumi.set(__self__, "manifest_generation_mode", manifest_generation_mode)
        if manifest_output_directory is not None:
            pulumi.set(__self__, "manifest_output_directory", manifest_output_directory)
        if manifest_type is not None:
            pulumi.set(__self__, "manifest_type", manifest_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the language image used for building the code in the generated dockerfile.
        """
        return pulumi.get(self, "builder_version")

    @builder_version.setter
    def builder_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "builder_version", value)

    @property
    @pulumi.getter(name="dockerfileGenerationMode")
    def dockerfile_generation_mode(self) -> Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]]:
        """
        The mode of generation to be used for generating Dockerfiles.
        """
        return pulumi.get(self, "dockerfile_generation_mode")

    @dockerfile_generation_mode.setter
    def dockerfile_generation_mode(self, value: Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]]):
        pulumi.set(self, "dockerfile_generation_mode", value)

    @property
    @pulumi.getter(name="dockerfileOutputDirectory")
    def dockerfile_output_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to output the generated Dockerfile to.
        """
        return pulumi.get(self, "dockerfile_output_directory")

    @dockerfile_output_directory.setter
    def dockerfile_output_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile_output_directory", value)

    @property
    @pulumi.getter(name="generationLanguage")
    def generation_language(self) -> Optional[pulumi.Input[Union[str, 'GenerationLanguage']]]:
        """
        The programming language used.
        """
        return pulumi.get(self, "generation_language")

    @generation_language.setter
    def generation_language(self, value: Optional[pulumi.Input[Union[str, 'GenerationLanguage']]]):
        pulumi.set(self, "generation_language", value)

    @property
    @pulumi.getter(name="githubWorkflowProfile")
    def github_workflow_profile(self) -> Optional[pulumi.Input['GitHubWorkflowProfileArgs']]:
        """
        Profile of a github workflow.
        """
        return pulumi.get(self, "github_workflow_profile")

    @github_workflow_profile.setter
    def github_workflow_profile(self, value: Optional[pulumi.Input['GitHubWorkflowProfileArgs']]):
        pulumi.set(self, "github_workflow_profile", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the image to be generated.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The tag to apply to the generated image.
        """
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the language image used for execution in the generated dockerfile.
        """
        return pulumi.get(self, "language_version")

    @language_version.setter
    def language_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_version", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="manifestGenerationMode")
    def manifest_generation_mode(self) -> Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]]:
        """
        The mode of generation to be used for generating Manifest.
        """
        return pulumi.get(self, "manifest_generation_mode")

    @manifest_generation_mode.setter
    def manifest_generation_mode(self, value: Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]]):
        pulumi.set(self, "manifest_generation_mode", value)

    @property
    @pulumi.getter(name="manifestOutputDirectory")
    def manifest_output_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to output the generated manifests to.
        """
        return pulumi.get(self, "manifest_output_directory")

    @manifest_output_directory.setter
    def manifest_output_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest_output_directory", value)

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[pulumi.Input[Union[str, 'GenerationManifestType']]]:
        """
        Determines the type of manifests to be generated.
        """
        return pulumi.get(self, "manifest_type")

    @manifest_type.setter
    def manifest_type(self, value: Optional[pulumi.Input[Union[str, 'GenerationManifestType']]]):
        pulumi.set(self, "manifest_type", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace to deploy the application to.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port the application is exposed on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workflow resource.
        """
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_name", value)


class Workflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 builder_version: Optional[pulumi.Input[str]] = None,
                 dockerfile_generation_mode: Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]] = None,
                 dockerfile_output_directory: Optional[pulumi.Input[str]] = None,
                 generation_language: Optional[pulumi.Input[Union[str, 'GenerationLanguage']]] = None,
                 github_workflow_profile: Optional[pulumi.Input[Union['GitHubWorkflowProfileArgs', 'GitHubWorkflowProfileArgsDict']]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 language_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manifest_generation_mode: Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]] = None,
                 manifest_output_directory: Optional[pulumi.Input[str]] = None,
                 manifest_type: Optional[pulumi.Input[Union[str, 'GenerationManifestType']]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource representation of a workflow
        Azure REST API version: 2023-08-01. Prior API version in Azure Native 2.x: 2022-10-11-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_name: The name of the app.
        :param pulumi.Input[str] builder_version: The version of the language image used for building the code in the generated dockerfile.
        :param pulumi.Input[Union[str, 'DockerfileGenerationMode']] dockerfile_generation_mode: The mode of generation to be used for generating Dockerfiles.
        :param pulumi.Input[str] dockerfile_output_directory: The directory to output the generated Dockerfile to.
        :param pulumi.Input[Union[str, 'GenerationLanguage']] generation_language: The programming language used.
        :param pulumi.Input[Union['GitHubWorkflowProfileArgs', 'GitHubWorkflowProfileArgsDict']] github_workflow_profile: Profile of a github workflow.
        :param pulumi.Input[str] image_name: The name of the image to be generated.
        :param pulumi.Input[str] image_tag: The tag to apply to the generated image.
        :param pulumi.Input[str] language_version: The version of the language image used for execution in the generated dockerfile.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Union[str, 'ManifestGenerationMode']] manifest_generation_mode: The mode of generation to be used for generating Manifest.
        :param pulumi.Input[str] manifest_output_directory: The directory to output the generated manifests to.
        :param pulumi.Input[Union[str, 'GenerationManifestType']] manifest_type: Determines the type of manifests to be generated.
        :param pulumi.Input[str] namespace: The namespace to deploy the application to.
        :param pulumi.Input[str] port: The port the application is exposed on.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] workflow_name: The name of the workflow resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource representation of a workflow
        Azure REST API version: 2023-08-01. Prior API version in Azure Native 2.x: 2022-10-11-preview.

        :param str resource_name: The name of the resource.
        :param WorkflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 builder_version: Optional[pulumi.Input[str]] = None,
                 dockerfile_generation_mode: Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]] = None,
                 dockerfile_output_directory: Optional[pulumi.Input[str]] = None,
                 generation_language: Optional[pulumi.Input[Union[str, 'GenerationLanguage']]] = None,
                 github_workflow_profile: Optional[pulumi.Input[Union['GitHubWorkflowProfileArgs', 'GitHubWorkflowProfileArgsDict']]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 language_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manifest_generation_mode: Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]] = None,
                 manifest_output_directory: Optional[pulumi.Input[str]] = None,
                 manifest_type: Optional[pulumi.Input[Union[str, 'GenerationManifestType']]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowArgs.__new__(WorkflowArgs)

            __props__.__dict__["app_name"] = app_name
            __props__.__dict__["builder_version"] = builder_version
            __props__.__dict__["dockerfile_generation_mode"] = dockerfile_generation_mode
            __props__.__dict__["dockerfile_output_directory"] = dockerfile_output_directory
            __props__.__dict__["generation_language"] = generation_language
            __props__.__dict__["github_workflow_profile"] = github_workflow_profile
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["image_tag"] = image_tag
            __props__.__dict__["language_version"] = language_version
            __props__.__dict__["location"] = location
            __props__.__dict__["manifest_generation_mode"] = manifest_generation_mode
            __props__.__dict__["manifest_output_directory"] = manifest_output_directory
            __props__.__dict__["manifest_type"] = manifest_type
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["port"] = port
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["workflow_name"] = workflow_name
            __props__.__dict__["azure_api_version"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:devhub/v20220401preview:Workflow"), pulumi.Alias(type_="azure-native:devhub/v20221011preview:Workflow"), pulumi.Alias(type_="azure-native:devhub/v20230801:Workflow"), pulumi.Alias(type_="azure-native:devhub/v20240501preview:Workflow"), pulumi.Alias(type_="azure-native:devhub/v20240801preview:Workflow"), pulumi.Alias(type_="azure-native:devhub/v20250301preview:Workflow")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Workflow, __self__).__init__(
            'azure-native:devhub:Workflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Workflow':
        """
        Get an existing Workflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WorkflowArgs.__new__(WorkflowArgs)

        __props__.__dict__["app_name"] = None
        __props__.__dict__["azure_api_version"] = None
        __props__.__dict__["builder_version"] = None
        __props__.__dict__["dockerfile_generation_mode"] = None
        __props__.__dict__["dockerfile_output_directory"] = None
        __props__.__dict__["generation_language"] = None
        __props__.__dict__["github_workflow_profile"] = None
        __props__.__dict__["image_name"] = None
        __props__.__dict__["image_tag"] = None
        __props__.__dict__["language_version"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["manifest_generation_mode"] = None
        __props__.__dict__["manifest_output_directory"] = None
        __props__.__dict__["manifest_type"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["namespace"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return Workflow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> pulumi.Output[str]:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> pulumi.Output[Optional[str]]:
        """
        The version of the language image used for building the code in the generated dockerfile.
        """
        return pulumi.get(self, "builder_version")

    @property
    @pulumi.getter(name="dockerfileGenerationMode")
    def dockerfile_generation_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The mode of generation to be used for generating Dockerfiles.
        """
        return pulumi.get(self, "dockerfile_generation_mode")

    @property
    @pulumi.getter(name="dockerfileOutputDirectory")
    def dockerfile_output_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to output the generated Dockerfile to.
        """
        return pulumi.get(self, "dockerfile_output_directory")

    @property
    @pulumi.getter(name="generationLanguage")
    def generation_language(self) -> pulumi.Output[Optional[str]]:
        """
        The programming language used.
        """
        return pulumi.get(self, "generation_language")

    @property
    @pulumi.getter(name="githubWorkflowProfile")
    def github_workflow_profile(self) -> pulumi.Output[Optional['outputs.GitHubWorkflowProfileResponse']]:
        """
        Profile of a github workflow.
        """
        return pulumi.get(self, "github_workflow_profile")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the image to be generated.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> pulumi.Output[Optional[str]]:
        """
        The tag to apply to the generated image.
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> pulumi.Output[Optional[str]]:
        """
        The version of the language image used for execution in the generated dockerfile.
        """
        return pulumi.get(self, "language_version")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="manifestGenerationMode")
    def manifest_generation_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The mode of generation to be used for generating Manifest.
        """
        return pulumi.get(self, "manifest_generation_mode")

    @property
    @pulumi.getter(name="manifestOutputDirectory")
    def manifest_output_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to output the generated manifests to.
        """
        return pulumi.get(self, "manifest_output_directory")

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> pulumi.Output[Optional[str]]:
        """
        Determines the type of manifests to be generated.
        """
        return pulumi.get(self, "manifest_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The namespace to deploy the application to.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[str]]:
        """
        The port the application is exposed on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

