# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetIacProfileResult',
    'AwaitableGetIacProfileResult',
    'get_iac_profile',
    'get_iac_profile_output',
]

@pulumi.output_type
class GetIacProfileResult:
    """
    Resource representation of a IacProfile.
    """
    def __init__(__self__, auth_status=None, branch_name=None, etag=None, id=None, location=None, name=None, pr_status=None, pull_number=None, repository_main_branch=None, repository_name=None, repository_owner=None, stages=None, storage_account_name=None, storage_account_resource_group=None, storage_account_subscription=None, storage_container_name=None, system_data=None, tags=None, templates=None, type=None):
        if auth_status and not isinstance(auth_status, str):
            raise TypeError("Expected argument 'auth_status' to be a str")
        pulumi.set(__self__, "auth_status", auth_status)
        if branch_name and not isinstance(branch_name, str):
            raise TypeError("Expected argument 'branch_name' to be a str")
        pulumi.set(__self__, "branch_name", branch_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pr_status and not isinstance(pr_status, str):
            raise TypeError("Expected argument 'pr_status' to be a str")
        pulumi.set(__self__, "pr_status", pr_status)
        if pull_number and not isinstance(pull_number, int):
            raise TypeError("Expected argument 'pull_number' to be a int")
        pulumi.set(__self__, "pull_number", pull_number)
        if repository_main_branch and not isinstance(repository_main_branch, str):
            raise TypeError("Expected argument 'repository_main_branch' to be a str")
        pulumi.set(__self__, "repository_main_branch", repository_main_branch)
        if repository_name and not isinstance(repository_name, str):
            raise TypeError("Expected argument 'repository_name' to be a str")
        pulumi.set(__self__, "repository_name", repository_name)
        if repository_owner and not isinstance(repository_owner, str):
            raise TypeError("Expected argument 'repository_owner' to be a str")
        pulumi.set(__self__, "repository_owner", repository_owner)
        if stages and not isinstance(stages, list):
            raise TypeError("Expected argument 'stages' to be a list")
        pulumi.set(__self__, "stages", stages)
        if storage_account_name and not isinstance(storage_account_name, str):
            raise TypeError("Expected argument 'storage_account_name' to be a str")
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if storage_account_resource_group and not isinstance(storage_account_resource_group, str):
            raise TypeError("Expected argument 'storage_account_resource_group' to be a str")
        pulumi.set(__self__, "storage_account_resource_group", storage_account_resource_group)
        if storage_account_subscription and not isinstance(storage_account_subscription, str):
            raise TypeError("Expected argument 'storage_account_subscription' to be a str")
        pulumi.set(__self__, "storage_account_subscription", storage_account_subscription)
        if storage_container_name and not isinstance(storage_container_name, str):
            raise TypeError("Expected argument 'storage_container_name' to be a str")
        pulumi.set(__self__, "storage_container_name", storage_container_name)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> str:
        """
        Determines the authorization status of requests.
        """
        return pulumi.get(self, "auth_status")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[str]:
        """
        Repository Branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="prStatus")
    def pr_status(self) -> str:
        """
        The status of the Pull Request submitted against the users repository.
        """
        return pulumi.get(self, "pr_status")

    @property
    @pulumi.getter(name="pullNumber")
    def pull_number(self) -> int:
        """
        The number associated with the submitted pull request.
        """
        return pulumi.get(self, "pull_number")

    @property
    @pulumi.getter(name="repositoryMainBranch")
    def repository_main_branch(self) -> Optional[str]:
        """
        Repository Main Branch
        """
        return pulumi.get(self, "repository_main_branch")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        """
        Repository Name
        """
        return pulumi.get(self, "repository_name")

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> Optional[str]:
        """
        Repository Owner
        """
        return pulumi.get(self, "repository_owner")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence['outputs.StagePropertiesResponse']]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        """
        Terraform Storage Account Name
        """
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageAccountResourceGroup")
    def storage_account_resource_group(self) -> Optional[str]:
        """
        Terraform Storage Account Resource Group
        """
        return pulumi.get(self, "storage_account_resource_group")

    @property
    @pulumi.getter(name="storageAccountSubscription")
    def storage_account_subscription(self) -> Optional[str]:
        """
        Terraform Storage Account Subscription
        """
        return pulumi.get(self, "storage_account_subscription")

    @property
    @pulumi.getter(name="storageContainerName")
    def storage_container_name(self) -> Optional[str]:
        """
        Terraform Container Name
        """
        return pulumi.get(self, "storage_container_name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def templates(self) -> Optional[Sequence['outputs.IacTemplatePropertiesResponse']]:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetIacProfileResult(GetIacProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIacProfileResult(
            auth_status=self.auth_status,
            branch_name=self.branch_name,
            etag=self.etag,
            id=self.id,
            location=self.location,
            name=self.name,
            pr_status=self.pr_status,
            pull_number=self.pull_number,
            repository_main_branch=self.repository_main_branch,
            repository_name=self.repository_name,
            repository_owner=self.repository_owner,
            stages=self.stages,
            storage_account_name=self.storage_account_name,
            storage_account_resource_group=self.storage_account_resource_group,
            storage_account_subscription=self.storage_account_subscription,
            storage_container_name=self.storage_container_name,
            system_data=self.system_data,
            tags=self.tags,
            templates=self.templates,
            type=self.type)


def get_iac_profile(iac_profile_name: Optional[str] = None,
                    resource_group_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIacProfileResult:
    """
    Resource representation of a IacProfile.


    :param str iac_profile_name: The name of the IacProfile.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['iacProfileName'] = iac_profile_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:devhub/v20240501preview:getIacProfile', __args__, opts=opts, typ=GetIacProfileResult).value

    return AwaitableGetIacProfileResult(
        auth_status=pulumi.get(__ret__, 'auth_status'),
        branch_name=pulumi.get(__ret__, 'branch_name'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        pr_status=pulumi.get(__ret__, 'pr_status'),
        pull_number=pulumi.get(__ret__, 'pull_number'),
        repository_main_branch=pulumi.get(__ret__, 'repository_main_branch'),
        repository_name=pulumi.get(__ret__, 'repository_name'),
        repository_owner=pulumi.get(__ret__, 'repository_owner'),
        stages=pulumi.get(__ret__, 'stages'),
        storage_account_name=pulumi.get(__ret__, 'storage_account_name'),
        storage_account_resource_group=pulumi.get(__ret__, 'storage_account_resource_group'),
        storage_account_subscription=pulumi.get(__ret__, 'storage_account_subscription'),
        storage_container_name=pulumi.get(__ret__, 'storage_container_name'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        templates=pulumi.get(__ret__, 'templates'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_iac_profile)
def get_iac_profile_output(iac_profile_name: Optional[pulumi.Input[str]] = None,
                           resource_group_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIacProfileResult]:
    """
    Resource representation of a IacProfile.


    :param str iac_profile_name: The name of the IacProfile.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
