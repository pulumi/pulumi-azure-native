# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IacProfileArgs', 'IacProfile']

@pulumi.input_type
class IacProfileArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 branch_name: Optional[pulumi.Input[str]] = None,
                 iac_profile_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 repository_main_branch: Optional[pulumi.Input[str]] = None,
                 repository_name: Optional[pulumi.Input[str]] = None,
                 repository_owner: Optional[pulumi.Input[str]] = None,
                 stages: Optional[pulumi.Input[Sequence[pulumi.Input['StagePropertiesArgs']]]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 storage_account_resource_group: Optional[pulumi.Input[str]] = None,
                 storage_account_subscription: Optional[pulumi.Input[str]] = None,
                 storage_container_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplatePropertiesArgs']]]] = None):
        """
        The set of arguments for constructing a IacProfile resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] branch_name: Repository Branch Name
        :param pulumi.Input[str] iac_profile_name: The name of the IacProfile.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] repository_main_branch: Repository Main Branch
        :param pulumi.Input[str] repository_name: Repository Name
        :param pulumi.Input[str] repository_owner: Repository Owner
        :param pulumi.Input[str] storage_account_name: Terraform Storage Account Name
        :param pulumi.Input[str] storage_account_resource_group: Terraform Storage Account Resource Group
        :param pulumi.Input[str] storage_account_subscription: Terraform Storage Account Subscription
        :param pulumi.Input[str] storage_container_name: Terraform Container Name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if iac_profile_name is not None:
            pulumi.set(__self__, "iac_profile_name", iac_profile_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if repository_main_branch is not None:
            pulumi.set(__self__, "repository_main_branch", repository_main_branch)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)
        if repository_owner is not None:
            pulumi.set(__self__, "repository_owner", repository_owner)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if storage_account_resource_group is not None:
            pulumi.set(__self__, "storage_account_resource_group", storage_account_resource_group)
        if storage_account_subscription is not None:
            pulumi.set(__self__, "storage_account_subscription", storage_account_subscription)
        if storage_container_name is not None:
            pulumi.set(__self__, "storage_container_name", storage_container_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Branch Name
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="iacProfileName")
    def iac_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the IacProfile.
        """
        return pulumi.get(self, "iac_profile_name")

    @iac_profile_name.setter
    def iac_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iac_profile_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="repositoryMainBranch")
    def repository_main_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Main Branch
        """
        return pulumi.get(self, "repository_main_branch")

    @repository_main_branch.setter
    def repository_main_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_main_branch", value)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Name
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_name", value)

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Owner
        """
        return pulumi.get(self, "repository_owner")

    @repository_owner.setter
    def repository_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_owner", value)

    @property
    @pulumi.getter
    def stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StagePropertiesArgs']]]]:
        return pulumi.get(self, "stages")

    @stages.setter
    def stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StagePropertiesArgs']]]]):
        pulumi.set(self, "stages", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Terraform Storage Account Name
        """
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="storageAccountResourceGroup")
    def storage_account_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Terraform Storage Account Resource Group
        """
        return pulumi.get(self, "storage_account_resource_group")

    @storage_account_resource_group.setter
    def storage_account_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_resource_group", value)

    @property
    @pulumi.getter(name="storageAccountSubscription")
    def storage_account_subscription(self) -> Optional[pulumi.Input[str]]:
        """
        Terraform Storage Account Subscription
        """
        return pulumi.get(self, "storage_account_subscription")

    @storage_account_subscription.setter
    def storage_account_subscription(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_subscription", value)

    @property
    @pulumi.getter(name="storageContainerName")
    def storage_container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Terraform Container Name
        """
        return pulumi.get(self, "storage_container_name")

    @storage_container_name.setter
    def storage_container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplatePropertiesArgs']]]]:
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplatePropertiesArgs']]]]):
        pulumi.set(self, "templates", value)


class IacProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 iac_profile_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 repository_main_branch: Optional[pulumi.Input[str]] = None,
                 repository_name: Optional[pulumi.Input[str]] = None,
                 repository_owner: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 stages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StagePropertiesArgs']]]]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 storage_account_resource_group: Optional[pulumi.Input[str]] = None,
                 storage_account_subscription: Optional[pulumi.Input[str]] = None,
                 storage_container_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IacTemplatePropertiesArgs']]]]] = None,
                 __props__=None):
        """
        Resource representation of a IacProfile.
        Azure REST API version: 2024-05-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch_name: Repository Branch Name
        :param pulumi.Input[str] iac_profile_name: The name of the IacProfile.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] repository_main_branch: Repository Main Branch
        :param pulumi.Input[str] repository_name: Repository Name
        :param pulumi.Input[str] repository_owner: Repository Owner
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] storage_account_name: Terraform Storage Account Name
        :param pulumi.Input[str] storage_account_resource_group: Terraform Storage Account Resource Group
        :param pulumi.Input[str] storage_account_subscription: Terraform Storage Account Subscription
        :param pulumi.Input[str] storage_container_name: Terraform Container Name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IacProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource representation of a IacProfile.
        Azure REST API version: 2024-05-01-preview.

        :param str resource_name: The name of the resource.
        :param IacProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IacProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 iac_profile_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 repository_main_branch: Optional[pulumi.Input[str]] = None,
                 repository_name: Optional[pulumi.Input[str]] = None,
                 repository_owner: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 stages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StagePropertiesArgs']]]]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 storage_account_resource_group: Optional[pulumi.Input[str]] = None,
                 storage_account_subscription: Optional[pulumi.Input[str]] = None,
                 storage_container_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IacTemplatePropertiesArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IacProfileArgs.__new__(IacProfileArgs)

            __props__.__dict__["branch_name"] = branch_name
            __props__.__dict__["iac_profile_name"] = iac_profile_name
            __props__.__dict__["location"] = location
            __props__.__dict__["repository_main_branch"] = repository_main_branch
            __props__.__dict__["repository_name"] = repository_name
            __props__.__dict__["repository_owner"] = repository_owner
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["stages"] = stages
            __props__.__dict__["storage_account_name"] = storage_account_name
            __props__.__dict__["storage_account_resource_group"] = storage_account_resource_group
            __props__.__dict__["storage_account_subscription"] = storage_account_subscription
            __props__.__dict__["storage_container_name"] = storage_container_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["templates"] = templates
            __props__.__dict__["auth_status"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["pr_status"] = None
            __props__.__dict__["pull_number"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:devhub/v20240501preview:IacProfile")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(IacProfile, __self__).__init__(
            'azure-native:devhub:IacProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IacProfile':
        """
        Get an existing IacProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IacProfileArgs.__new__(IacProfileArgs)

        __props__.__dict__["auth_status"] = None
        __props__.__dict__["branch_name"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["pr_status"] = None
        __props__.__dict__["pull_number"] = None
        __props__.__dict__["repository_main_branch"] = None
        __props__.__dict__["repository_name"] = None
        __props__.__dict__["repository_owner"] = None
        __props__.__dict__["stages"] = None
        __props__.__dict__["storage_account_name"] = None
        __props__.__dict__["storage_account_resource_group"] = None
        __props__.__dict__["storage_account_subscription"] = None
        __props__.__dict__["storage_container_name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["templates"] = None
        __props__.__dict__["type"] = None
        return IacProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> pulumi.Output[str]:
        """
        Determines the authorization status of requests.
        """
        return pulumi.get(self, "auth_status")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> pulumi.Output[Optional[str]]:
        """
        Repository Branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        A unique read-only string that changes whenever the resource is updated.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="prStatus")
    def pr_status(self) -> pulumi.Output[str]:
        """
        The status of the Pull Request submitted against the users repository.
        """
        return pulumi.get(self, "pr_status")

    @property
    @pulumi.getter(name="pullNumber")
    def pull_number(self) -> pulumi.Output[int]:
        """
        The number associated with the submitted pull request.
        """
        return pulumi.get(self, "pull_number")

    @property
    @pulumi.getter(name="repositoryMainBranch")
    def repository_main_branch(self) -> pulumi.Output[Optional[str]]:
        """
        Repository Main Branch
        """
        return pulumi.get(self, "repository_main_branch")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> pulumi.Output[Optional[str]]:
        """
        Repository Name
        """
        return pulumi.get(self, "repository_name")

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> pulumi.Output[Optional[str]]:
        """
        Repository Owner
        """
        return pulumi.get(self, "repository_owner")

    @property
    @pulumi.getter
    def stages(self) -> pulumi.Output[Optional[Sequence['outputs.StagePropertiesResponse']]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Output[Optional[str]]:
        """
        Terraform Storage Account Name
        """
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="storageAccountResourceGroup")
    def storage_account_resource_group(self) -> pulumi.Output[Optional[str]]:
        """
        Terraform Storage Account Resource Group
        """
        return pulumi.get(self, "storage_account_resource_group")

    @property
    @pulumi.getter(name="storageAccountSubscription")
    def storage_account_subscription(self) -> pulumi.Output[Optional[str]]:
        """
        Terraform Storage Account Subscription
        """
        return pulumi.get(self, "storage_account_subscription")

    @property
    @pulumi.getter(name="storageContainerName")
    def storage_container_name(self) -> pulumi.Output[Optional[str]]:
        """
        Terraform Container Name
        """
        return pulumi.get(self, "storage_container_name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def templates(self) -> pulumi.Output[Optional[Sequence['outputs.IacTemplatePropertiesResponse']]]:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

