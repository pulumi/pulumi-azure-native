# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ACRArgs',
    'DeploymentPropertiesArgs',
    'GitHubWorkflowProfileOidcCredentialsArgs',
    'IacTemplateDetailsArgs',
    'IacTemplatePropertiesArgs',
    'StagePropertiesArgs',
    'WorkflowRunArgs',
]

@pulumi.input_type
class ACRArgs:
    def __init__(__self__, *,
                 acr_registry_name: Optional[pulumi.Input[str]] = None,
                 acr_repository_name: Optional[pulumi.Input[str]] = None,
                 acr_resource_group: Optional[pulumi.Input[str]] = None,
                 acr_subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Information on the azure container registry
        :param pulumi.Input[str] acr_registry_name: ACR registry
        :param pulumi.Input[str] acr_repository_name: ACR repository
        :param pulumi.Input[str] acr_resource_group: ACR resource group
        :param pulumi.Input[str] acr_subscription_id: ACR subscription id
        """
        if acr_registry_name is not None:
            pulumi.set(__self__, "acr_registry_name", acr_registry_name)
        if acr_repository_name is not None:
            pulumi.set(__self__, "acr_repository_name", acr_repository_name)
        if acr_resource_group is not None:
            pulumi.set(__self__, "acr_resource_group", acr_resource_group)
        if acr_subscription_id is not None:
            pulumi.set(__self__, "acr_subscription_id", acr_subscription_id)

    @property
    @pulumi.getter(name="acrRegistryName")
    def acr_registry_name(self) -> Optional[pulumi.Input[str]]:
        """
        ACR registry
        """
        return pulumi.get(self, "acr_registry_name")

    @acr_registry_name.setter
    def acr_registry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_registry_name", value)

    @property
    @pulumi.getter(name="acrRepositoryName")
    def acr_repository_name(self) -> Optional[pulumi.Input[str]]:
        """
        ACR repository
        """
        return pulumi.get(self, "acr_repository_name")

    @acr_repository_name.setter
    def acr_repository_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_repository_name", value)

    @property
    @pulumi.getter(name="acrResourceGroup")
    def acr_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        ACR resource group
        """
        return pulumi.get(self, "acr_resource_group")

    @acr_resource_group.setter
    def acr_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_resource_group", value)

    @property
    @pulumi.getter(name="acrSubscriptionId")
    def acr_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ACR subscription id
        """
        return pulumi.get(self, "acr_subscription_id")

    @acr_subscription_id.setter
    def acr_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_subscription_id", value)


@pulumi.input_type
class DeploymentPropertiesArgs:
    def __init__(__self__, *,
                 helm_chart_path: Optional[pulumi.Input[str]] = None,
                 helm_values: Optional[pulumi.Input[str]] = None,
                 kube_manifest_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 manifest_type: Optional[pulumi.Input[Union[str, 'ManifestType']]] = None,
                 overrides: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] helm_chart_path: Helm chart directory path in repository.
        :param pulumi.Input[str] helm_values: Helm Values.yaml file location in repository.
        :param pulumi.Input[Union[str, 'ManifestType']] manifest_type: Determines the type of manifests within the repository.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] overrides: Manifest override values.
        """
        if helm_chart_path is not None:
            pulumi.set(__self__, "helm_chart_path", helm_chart_path)
        if helm_values is not None:
            pulumi.set(__self__, "helm_values", helm_values)
        if kube_manifest_locations is not None:
            pulumi.set(__self__, "kube_manifest_locations", kube_manifest_locations)
        if manifest_type is not None:
            pulumi.set(__self__, "manifest_type", manifest_type)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)

    @property
    @pulumi.getter(name="helmChartPath")
    def helm_chart_path(self) -> Optional[pulumi.Input[str]]:
        """
        Helm chart directory path in repository.
        """
        return pulumi.get(self, "helm_chart_path")

    @helm_chart_path.setter
    def helm_chart_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_chart_path", value)

    @property
    @pulumi.getter(name="helmValues")
    def helm_values(self) -> Optional[pulumi.Input[str]]:
        """
        Helm Values.yaml file location in repository.
        """
        return pulumi.get(self, "helm_values")

    @helm_values.setter
    def helm_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_values", value)

    @property
    @pulumi.getter(name="kubeManifestLocations")
    def kube_manifest_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kube_manifest_locations")

    @kube_manifest_locations.setter
    def kube_manifest_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_manifest_locations", value)

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[pulumi.Input[Union[str, 'ManifestType']]]:
        """
        Determines the type of manifests within the repository.
        """
        return pulumi.get(self, "manifest_type")

    @manifest_type.setter
    def manifest_type(self, value: Optional[pulumi.Input[Union[str, 'ManifestType']]]):
        pulumi.set(self, "manifest_type", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Manifest override values.
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "overrides", value)


@pulumi.input_type
class GitHubWorkflowProfileOidcCredentialsArgs:
    def __init__(__self__, *,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None):
        """
        The fields needed for OIDC with GitHub.
        :param pulumi.Input[str] azure_client_id: Azure Application Client ID
        :param pulumi.Input[str] azure_tenant_id: Azure Directory (tenant) ID
        """
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Application Client ID
        """
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_id", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Directory (tenant) ID
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)


@pulumi.input_type
class IacTemplateDetailsArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 naming_convention: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: Count of the product
        :param pulumi.Input[str] naming_convention: Naming convention of this product
        :param pulumi.Input[str] product_name: The name of the products.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if naming_convention is not None:
            pulumi.set(__self__, "naming_convention", naming_convention)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of the product
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="namingConvention")
    def naming_convention(self) -> Optional[pulumi.Input[str]]:
        """
        Naming convention of this product
        """
        return pulumi.get(self, "naming_convention")

    @naming_convention.setter
    def naming_convention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "naming_convention", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the products.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)


@pulumi.input_type
class IacTemplatePropertiesArgs:
    def __init__(__self__, *,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_stage: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 template_details: Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgs']]]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Properties of a IacTemplate.
        :param pulumi.Input[str] instance_name: the sample instance name of the template
        :param pulumi.Input[str] instance_stage: the source stage of the template
        :param pulumi.Input[str] source_resource_id: the source store of the template
        :param pulumi.Input[str] template_name: Template Name
        """
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_stage is not None:
            pulumi.set(__self__, "instance_stage", instance_stage)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if template_details is not None:
            pulumi.set(__self__, "template_details", template_details)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        the sample instance name of the template
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStage")
    def instance_stage(self) -> Optional[pulumi.Input[str]]:
        """
        the source stage of the template
        """
        return pulumi.get(self, "instance_stage")

    @instance_stage.setter
    def instance_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_stage", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        the source store of the template
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="templateDetails")
    def template_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgs']]]]:
        return pulumi.get(self, "template_details")

    @template_details.setter
    def template_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgs']]]]):
        pulumi.set(self, "template_details", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template Name
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class StagePropertiesArgs:
    def __init__(__self__, *,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_environment: Optional[pulumi.Input[str]] = None,
                 stage_name: Optional[pulumi.Input[str]] = None):
        """
        Properties of a Stage.
        :param pulumi.Input[str] stage_name: Stage Name
        """
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if git_environment is not None:
            pulumi.set(__self__, "git_environment", git_environment)
        if stage_name is not None:
            pulumi.set(__self__, "stage_name", stage_name)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter(name="gitEnvironment")
    def git_environment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "git_environment")

    @git_environment.setter
    def git_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_environment", value)

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> Optional[pulumi.Input[str]]:
        """
        Stage Name
        """
        return pulumi.get(self, "stage_name")

    @stage_name.setter
    def stage_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_name", value)


@pulumi.input_type
class WorkflowRunArgs:
    def __init__(__self__, *,
                 workflow_run_status: Optional[pulumi.Input[Union[str, 'WorkflowRunStatus']]] = None):
        """
        :param pulumi.Input[Union[str, 'WorkflowRunStatus']] workflow_run_status: Describes the status of the workflow run
        """
        if workflow_run_status is not None:
            pulumi.set(__self__, "workflow_run_status", workflow_run_status)

    @property
    @pulumi.getter(name="workflowRunStatus")
    def workflow_run_status(self) -> Optional[pulumi.Input[Union[str, 'WorkflowRunStatus']]]:
        """
        Describes the status of the workflow run
        """
        return pulumi.get(self, "workflow_run_status")

    @workflow_run_status.setter
    def workflow_run_status(self, value: Optional[pulumi.Input[Union[str, 'WorkflowRunStatus']]]):
        pulumi.set(self, "workflow_run_status", value)


