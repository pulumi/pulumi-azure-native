# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkflowResult',
    'AwaitableGetWorkflowResult',
    'get_workflow',
    'get_workflow_output',
]

@pulumi.output_type
class GetWorkflowResult:
    """
    Resource representation of a workflow
    """
    def __init__(__self__, app_name=None, azure_api_version=None, builder_version=None, dockerfile_generation_mode=None, dockerfile_output_directory=None, generation_language=None, github_workflow_profile=None, id=None, image_name=None, image_tag=None, language_version=None, location=None, manifest_generation_mode=None, manifest_output_directory=None, manifest_type=None, name=None, namespace=None, port=None, system_data=None, tags=None, type=None):
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if builder_version and not isinstance(builder_version, str):
            raise TypeError("Expected argument 'builder_version' to be a str")
        pulumi.set(__self__, "builder_version", builder_version)
        if dockerfile_generation_mode and not isinstance(dockerfile_generation_mode, str):
            raise TypeError("Expected argument 'dockerfile_generation_mode' to be a str")
        pulumi.set(__self__, "dockerfile_generation_mode", dockerfile_generation_mode)
        if dockerfile_output_directory and not isinstance(dockerfile_output_directory, str):
            raise TypeError("Expected argument 'dockerfile_output_directory' to be a str")
        pulumi.set(__self__, "dockerfile_output_directory", dockerfile_output_directory)
        if generation_language and not isinstance(generation_language, str):
            raise TypeError("Expected argument 'generation_language' to be a str")
        pulumi.set(__self__, "generation_language", generation_language)
        if github_workflow_profile and not isinstance(github_workflow_profile, dict):
            raise TypeError("Expected argument 'github_workflow_profile' to be a dict")
        pulumi.set(__self__, "github_workflow_profile", github_workflow_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if image_tag and not isinstance(image_tag, str):
            raise TypeError("Expected argument 'image_tag' to be a str")
        pulumi.set(__self__, "image_tag", image_tag)
        if language_version and not isinstance(language_version, str):
            raise TypeError("Expected argument 'language_version' to be a str")
        pulumi.set(__self__, "language_version", language_version)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if manifest_generation_mode and not isinstance(manifest_generation_mode, str):
            raise TypeError("Expected argument 'manifest_generation_mode' to be a str")
        pulumi.set(__self__, "manifest_generation_mode", manifest_generation_mode)
        if manifest_output_directory and not isinstance(manifest_output_directory, str):
            raise TypeError("Expected argument 'manifest_output_directory' to be a str")
        pulumi.set(__self__, "manifest_output_directory", manifest_output_directory)
        if manifest_type and not isinstance(manifest_type, str):
            raise TypeError("Expected argument 'manifest_type' to be a str")
        pulumi.set(__self__, "manifest_type", manifest_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        The name of the app.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> Optional[str]:
        """
        The version of the language image used for building the code in the generated dockerfile.
        """
        return pulumi.get(self, "builder_version")

    @property
    @pulumi.getter(name="dockerfileGenerationMode")
    def dockerfile_generation_mode(self) -> Optional[str]:
        """
        The mode of generation to be used for generating Dockerfiles.
        """
        return pulumi.get(self, "dockerfile_generation_mode")

    @property
    @pulumi.getter(name="dockerfileOutputDirectory")
    def dockerfile_output_directory(self) -> Optional[str]:
        """
        The directory to output the generated Dockerfile to.
        """
        return pulumi.get(self, "dockerfile_output_directory")

    @property
    @pulumi.getter(name="generationLanguage")
    def generation_language(self) -> Optional[str]:
        """
        The programming language used.
        """
        return pulumi.get(self, "generation_language")

    @property
    @pulumi.getter(name="githubWorkflowProfile")
    def github_workflow_profile(self) -> Optional['outputs.GitHubWorkflowProfileResponse']:
        """
        Profile of a github workflow.
        """
        return pulumi.get(self, "github_workflow_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        """
        The name of the image to be generated.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        """
        The tag to apply to the generated image.
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> Optional[str]:
        """
        The version of the language image used for execution in the generated dockerfile.
        """
        return pulumi.get(self, "language_version")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="manifestGenerationMode")
    def manifest_generation_mode(self) -> Optional[str]:
        """
        The mode of generation to be used for generating Manifest.
        """
        return pulumi.get(self, "manifest_generation_mode")

    @property
    @pulumi.getter(name="manifestOutputDirectory")
    def manifest_output_directory(self) -> Optional[str]:
        """
        The directory to output the generated manifests to.
        """
        return pulumi.get(self, "manifest_output_directory")

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[str]:
        """
        Determines the type of manifests to be generated.
        """
        return pulumi.get(self, "manifest_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace to deploy the application to.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port the application is exposed on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetWorkflowResult(GetWorkflowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowResult(
            app_name=self.app_name,
            azure_api_version=self.azure_api_version,
            builder_version=self.builder_version,
            dockerfile_generation_mode=self.dockerfile_generation_mode,
            dockerfile_output_directory=self.dockerfile_output_directory,
            generation_language=self.generation_language,
            github_workflow_profile=self.github_workflow_profile,
            id=self.id,
            image_name=self.image_name,
            image_tag=self.image_tag,
            language_version=self.language_version,
            location=self.location,
            manifest_generation_mode=self.manifest_generation_mode,
            manifest_output_directory=self.manifest_output_directory,
            manifest_type=self.manifest_type,
            name=self.name,
            namespace=self.namespace,
            port=self.port,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_workflow(resource_group_name: Optional[str] = None,
                 workflow_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowResult:
    """
    Resource representation of a workflow
    Azure REST API version: 2023-08-01.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workflow_name: The name of the workflow resource.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['workflowName'] = workflow_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:devhub:getWorkflow', __args__, opts=opts, typ=GetWorkflowResult).value

    return AwaitableGetWorkflowResult(
        app_name=pulumi.get(__ret__, 'app_name'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        builder_version=pulumi.get(__ret__, 'builder_version'),
        dockerfile_generation_mode=pulumi.get(__ret__, 'dockerfile_generation_mode'),
        dockerfile_output_directory=pulumi.get(__ret__, 'dockerfile_output_directory'),
        generation_language=pulumi.get(__ret__, 'generation_language'),
        github_workflow_profile=pulumi.get(__ret__, 'github_workflow_profile'),
        id=pulumi.get(__ret__, 'id'),
        image_name=pulumi.get(__ret__, 'image_name'),
        image_tag=pulumi.get(__ret__, 'image_tag'),
        language_version=pulumi.get(__ret__, 'language_version'),
        location=pulumi.get(__ret__, 'location'),
        manifest_generation_mode=pulumi.get(__ret__, 'manifest_generation_mode'),
        manifest_output_directory=pulumi.get(__ret__, 'manifest_output_directory'),
        manifest_type=pulumi.get(__ret__, 'manifest_type'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        port=pulumi.get(__ret__, 'port'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_workflow_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                        workflow_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowResult]:
    """
    Resource representation of a workflow
    Azure REST API version: 2023-08-01.


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str workflow_name: The name of the workflow resource.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['workflowName'] = workflow_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:devhub:getWorkflow', __args__, opts=opts, typ=GetWorkflowResult)
    return __ret__.apply(lambda __response__: GetWorkflowResult(
        app_name=pulumi.get(__response__, 'app_name'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        builder_version=pulumi.get(__response__, 'builder_version'),
        dockerfile_generation_mode=pulumi.get(__response__, 'dockerfile_generation_mode'),
        dockerfile_output_directory=pulumi.get(__response__, 'dockerfile_output_directory'),
        generation_language=pulumi.get(__response__, 'generation_language'),
        github_workflow_profile=pulumi.get(__response__, 'github_workflow_profile'),
        id=pulumi.get(__response__, 'id'),
        image_name=pulumi.get(__response__, 'image_name'),
        image_tag=pulumi.get(__response__, 'image_tag'),
        language_version=pulumi.get(__response__, 'language_version'),
        location=pulumi.get(__response__, 'location'),
        manifest_generation_mode=pulumi.get(__response__, 'manifest_generation_mode'),
        manifest_output_directory=pulumi.get(__response__, 'manifest_output_directory'),
        manifest_type=pulumi.get(__response__, 'manifest_type'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        port=pulumi.get(__response__, 'port'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
