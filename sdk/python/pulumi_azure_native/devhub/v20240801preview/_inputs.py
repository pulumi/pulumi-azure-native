# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ACRArgs',
    'ACRArgsDict',
    'ADORepositoryArgs',
    'ADORepositoryArgsDict',
    'ArtifactGenerationPropertiesArgs',
    'ArtifactGenerationPropertiesArgsDict',
    'AzurePipelineProfileArgs',
    'AzurePipelineProfileArgsDict',
    'BuildArgs',
    'BuildArgsDict',
    'DeploymentArgs',
    'DeploymentArgsDict',
    'GitHubWorkflowProfileOidcCredentialsArgs',
    'GitHubWorkflowProfileOidcCredentialsArgsDict',
    'GitHubWorkflowProfileArgs',
    'GitHubWorkflowProfileArgsDict',
    'IacTemplateDetailsArgs',
    'IacTemplateDetailsArgsDict',
    'IacTemplatePropertiesArgs',
    'IacTemplatePropertiesArgsDict',
    'StagePropertiesArgs',
    'StagePropertiesArgsDict',
    'WorkflowPropertiesArgs',
    'WorkflowPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ACRArgsDict(TypedDict):
        """
        Information on the azure container registry
        """
        acr_registry_name: NotRequired[pulumi.Input[str]]
        """
        ACR registry
        """
        acr_repository_name: NotRequired[pulumi.Input[str]]
        """
        ACR repository
        """
        acr_resource_group: NotRequired[pulumi.Input[str]]
        """
        ACR resource group
        """
        acr_subscription_id: NotRequired[pulumi.Input[str]]
        """
        ACR subscription id
        """
elif False:
    ACRArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ACRArgs:
    def __init__(__self__, *,
                 acr_registry_name: Optional[pulumi.Input[str]] = None,
                 acr_repository_name: Optional[pulumi.Input[str]] = None,
                 acr_resource_group: Optional[pulumi.Input[str]] = None,
                 acr_subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Information on the azure container registry
        :param pulumi.Input[str] acr_registry_name: ACR registry
        :param pulumi.Input[str] acr_repository_name: ACR repository
        :param pulumi.Input[str] acr_resource_group: ACR resource group
        :param pulumi.Input[str] acr_subscription_id: ACR subscription id
        """
        if acr_registry_name is not None:
            pulumi.set(__self__, "acr_registry_name", acr_registry_name)
        if acr_repository_name is not None:
            pulumi.set(__self__, "acr_repository_name", acr_repository_name)
        if acr_resource_group is not None:
            pulumi.set(__self__, "acr_resource_group", acr_resource_group)
        if acr_subscription_id is not None:
            pulumi.set(__self__, "acr_subscription_id", acr_subscription_id)

    @property
    @pulumi.getter(name="acrRegistryName")
    def acr_registry_name(self) -> Optional[pulumi.Input[str]]:
        """
        ACR registry
        """
        return pulumi.get(self, "acr_registry_name")

    @acr_registry_name.setter
    def acr_registry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_registry_name", value)

    @property
    @pulumi.getter(name="acrRepositoryName")
    def acr_repository_name(self) -> Optional[pulumi.Input[str]]:
        """
        ACR repository
        """
        return pulumi.get(self, "acr_repository_name")

    @acr_repository_name.setter
    def acr_repository_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_repository_name", value)

    @property
    @pulumi.getter(name="acrResourceGroup")
    def acr_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        ACR resource group
        """
        return pulumi.get(self, "acr_resource_group")

    @acr_resource_group.setter
    def acr_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_resource_group", value)

    @property
    @pulumi.getter(name="acrSubscriptionId")
    def acr_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ACR subscription id
        """
        return pulumi.get(self, "acr_subscription_id")

    @acr_subscription_id.setter
    def acr_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr_subscription_id", value)


if not MYPY:
    class ADORepositoryArgsDict(TypedDict):
        """
        Details of the ADO repository associated with the workflow.
        """
        ado_organization: NotRequired[pulumi.Input[str]]
        """
        The name of the Azure DevOps organization the pipeline is associated with.
        """
        branch_name: NotRequired[pulumi.Input[str]]
        """
        The name of the branch the workflow is associated with.
        """
        project_name: NotRequired[pulumi.Input[str]]
        """
        The name of the project the pipeline is associated with.
        """
        repository_name: NotRequired[pulumi.Input[str]]
        """
        The name of the repository the workflow is associated with.
        """
        repository_owner: NotRequired[pulumi.Input[str]]
        """
        The owner of the repository the workflow is associated with.
        """
elif False:
    ADORepositoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ADORepositoryArgs:
    def __init__(__self__, *,
                 ado_organization: Optional[pulumi.Input[str]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 repository_name: Optional[pulumi.Input[str]] = None,
                 repository_owner: Optional[pulumi.Input[str]] = None):
        """
        Details of the ADO repository associated with the workflow.
        :param pulumi.Input[str] ado_organization: The name of the Azure DevOps organization the pipeline is associated with.
        :param pulumi.Input[str] branch_name: The name of the branch the workflow is associated with.
        :param pulumi.Input[str] project_name: The name of the project the pipeline is associated with.
        :param pulumi.Input[str] repository_name: The name of the repository the workflow is associated with.
        :param pulumi.Input[str] repository_owner: The owner of the repository the workflow is associated with.
        """
        if ado_organization is not None:
            pulumi.set(__self__, "ado_organization", ado_organization)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)
        if repository_owner is not None:
            pulumi.set(__self__, "repository_owner", repository_owner)

    @property
    @pulumi.getter(name="adoOrganization")
    def ado_organization(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Azure DevOps organization the pipeline is associated with.
        """
        return pulumi.get(self, "ado_organization")

    @ado_organization.setter
    def ado_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ado_organization", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch the workflow is associated with.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project the pipeline is associated with.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository the workflow is associated with.
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_name", value)

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner of the repository the workflow is associated with.
        """
        return pulumi.get(self, "repository_owner")

    @repository_owner.setter
    def repository_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_owner", value)


if not MYPY:
    class ArtifactGenerationPropertiesArgsDict(TypedDict):
        """
        Properties used for generating artifacts such as Dockerfiles and manifests.
        """
        app_name: NotRequired[pulumi.Input[str]]
        """
        The name of the app.
        """
        builder_version: NotRequired[pulumi.Input[str]]
        """
        The version of the language image used for building the code in the generated dockerfile.
        """
        dockerfile_generation_mode: NotRequired[pulumi.Input[Union[str, 'DockerfileGenerationMode']]]
        """
        The mode of generation to be used for generating Dockerfiles.
        """
        dockerfile_output_directory: NotRequired[pulumi.Input[str]]
        """
        The directory to output the generated Dockerfile to.
        """
        generation_language: NotRequired[pulumi.Input[Union[str, 'GenerationLanguage']]]
        """
        The programming language used.
        """
        image_name: NotRequired[pulumi.Input[str]]
        """
        The name of the image to be generated.
        """
        image_tag: NotRequired[pulumi.Input[str]]
        """
        The tag to apply to the generated image.
        """
        language_version: NotRequired[pulumi.Input[str]]
        """
        The version of the language image used for execution in the generated dockerfile.
        """
        manifest_generation_mode: NotRequired[pulumi.Input[Union[str, 'ManifestGenerationMode']]]
        """
        The mode of generation to be used for generating Manifest.
        """
        manifest_output_directory: NotRequired[pulumi.Input[str]]
        """
        The directory to output the generated manifests to.
        """
        manifest_type: NotRequired[pulumi.Input[Union[str, 'GenerationManifestType']]]
        """
        Determines the type of manifests to be generated.
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        The namespace to deploy the application to.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        The port the application is exposed on.
        """
elif False:
    ArtifactGenerationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArtifactGenerationPropertiesArgs:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[str]] = None,
                 builder_version: Optional[pulumi.Input[str]] = None,
                 dockerfile_generation_mode: Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]] = None,
                 dockerfile_output_directory: Optional[pulumi.Input[str]] = None,
                 generation_language: Optional[pulumi.Input[Union[str, 'GenerationLanguage']]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 language_version: Optional[pulumi.Input[str]] = None,
                 manifest_generation_mode: Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]] = None,
                 manifest_output_directory: Optional[pulumi.Input[str]] = None,
                 manifest_type: Optional[pulumi.Input[Union[str, 'GenerationManifestType']]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        """
        Properties used for generating artifacts such as Dockerfiles and manifests.
        :param pulumi.Input[str] app_name: The name of the app.
        :param pulumi.Input[str] builder_version: The version of the language image used for building the code in the generated dockerfile.
        :param pulumi.Input[Union[str, 'DockerfileGenerationMode']] dockerfile_generation_mode: The mode of generation to be used for generating Dockerfiles.
        :param pulumi.Input[str] dockerfile_output_directory: The directory to output the generated Dockerfile to.
        :param pulumi.Input[Union[str, 'GenerationLanguage']] generation_language: The programming language used.
        :param pulumi.Input[str] image_name: The name of the image to be generated.
        :param pulumi.Input[str] image_tag: The tag to apply to the generated image.
        :param pulumi.Input[str] language_version: The version of the language image used for execution in the generated dockerfile.
        :param pulumi.Input[Union[str, 'ManifestGenerationMode']] manifest_generation_mode: The mode of generation to be used for generating Manifest.
        :param pulumi.Input[str] manifest_output_directory: The directory to output the generated manifests to.
        :param pulumi.Input[Union[str, 'GenerationManifestType']] manifest_type: Determines the type of manifests to be generated.
        :param pulumi.Input[str] namespace: The namespace to deploy the application to.
        :param pulumi.Input[str] port: The port the application is exposed on.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if builder_version is not None:
            pulumi.set(__self__, "builder_version", builder_version)
        if dockerfile_generation_mode is not None:
            pulumi.set(__self__, "dockerfile_generation_mode", dockerfile_generation_mode)
        if dockerfile_output_directory is not None:
            pulumi.set(__self__, "dockerfile_output_directory", dockerfile_output_directory)
        if generation_language is not None:
            pulumi.set(__self__, "generation_language", generation_language)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if language_version is not None:
            pulumi.set(__self__, "language_version", language_version)
        if manifest_generation_mode is not None:
            pulumi.set(__self__, "manifest_generation_mode", manifest_generation_mode)
        if manifest_output_directory is not None:
            pulumi.set(__self__, "manifest_output_directory", manifest_output_directory)
        if manifest_type is not None:
            pulumi.set(__self__, "manifest_type", manifest_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the language image used for building the code in the generated dockerfile.
        """
        return pulumi.get(self, "builder_version")

    @builder_version.setter
    def builder_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "builder_version", value)

    @property
    @pulumi.getter(name="dockerfileGenerationMode")
    def dockerfile_generation_mode(self) -> Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]]:
        """
        The mode of generation to be used for generating Dockerfiles.
        """
        return pulumi.get(self, "dockerfile_generation_mode")

    @dockerfile_generation_mode.setter
    def dockerfile_generation_mode(self, value: Optional[pulumi.Input[Union[str, 'DockerfileGenerationMode']]]):
        pulumi.set(self, "dockerfile_generation_mode", value)

    @property
    @pulumi.getter(name="dockerfileOutputDirectory")
    def dockerfile_output_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to output the generated Dockerfile to.
        """
        return pulumi.get(self, "dockerfile_output_directory")

    @dockerfile_output_directory.setter
    def dockerfile_output_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile_output_directory", value)

    @property
    @pulumi.getter(name="generationLanguage")
    def generation_language(self) -> Optional[pulumi.Input[Union[str, 'GenerationLanguage']]]:
        """
        The programming language used.
        """
        return pulumi.get(self, "generation_language")

    @generation_language.setter
    def generation_language(self, value: Optional[pulumi.Input[Union[str, 'GenerationLanguage']]]):
        pulumi.set(self, "generation_language", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the image to be generated.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The tag to apply to the generated image.
        """
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the language image used for execution in the generated dockerfile.
        """
        return pulumi.get(self, "language_version")

    @language_version.setter
    def language_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_version", value)

    @property
    @pulumi.getter(name="manifestGenerationMode")
    def manifest_generation_mode(self) -> Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]]:
        """
        The mode of generation to be used for generating Manifest.
        """
        return pulumi.get(self, "manifest_generation_mode")

    @manifest_generation_mode.setter
    def manifest_generation_mode(self, value: Optional[pulumi.Input[Union[str, 'ManifestGenerationMode']]]):
        pulumi.set(self, "manifest_generation_mode", value)

    @property
    @pulumi.getter(name="manifestOutputDirectory")
    def manifest_output_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to output the generated manifests to.
        """
        return pulumi.get(self, "manifest_output_directory")

    @manifest_output_directory.setter
    def manifest_output_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest_output_directory", value)

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[pulumi.Input[Union[str, 'GenerationManifestType']]]:
        """
        Determines the type of manifests to be generated.
        """
        return pulumi.get(self, "manifest_type")

    @manifest_type.setter
    def manifest_type(self, value: Optional[pulumi.Input[Union[str, 'GenerationManifestType']]]):
        pulumi.set(self, "manifest_type", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace to deploy the application to.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port the application is exposed on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class AzurePipelineProfileArgsDict(TypedDict):
        """
        Azure Pipeline Profile
        """
        acr: NotRequired[pulumi.Input[str]]
        """
        Resource identifier for azure container registry repository associated with the workflow.
        """
        arm_service_connection: NotRequired[pulumi.Input[str]]
        """
        The name of the ARM Service Connection the pipeline is associated with.
        """
        build: NotRequired[pulumi.Input['BuildArgsDict']]
        """
        Build details of the repository associated with the workflow.
        """
        cluster_id: NotRequired[pulumi.Input[str]]
        """
        The Azure Kubernetes Cluster Resource the application will be deployed to.
        """
        deployment: NotRequired[pulumi.Input['DeploymentArgsDict']]
        """
        Deployment details of the repository associated with the workflow.
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Kubernetes namespace the application is deployed to.
        """
        repository: NotRequired[pulumi.Input['ADORepositoryArgsDict']]
        """
        Details of the ADO repository associated with the workflow.
        """
elif False:
    AzurePipelineProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzurePipelineProfileArgs:
    def __init__(__self__, *,
                 acr: Optional[pulumi.Input[str]] = None,
                 arm_service_connection: Optional[pulumi.Input[str]] = None,
                 build: Optional[pulumi.Input['BuildArgs']] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 deployment: Optional[pulumi.Input['DeploymentArgs']] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input['ADORepositoryArgs']] = None):
        """
        Azure Pipeline Profile
        :param pulumi.Input[str] acr: Resource identifier for azure container registry repository associated with the workflow.
        :param pulumi.Input[str] arm_service_connection: The name of the ARM Service Connection the pipeline is associated with.
        :param pulumi.Input['BuildArgs'] build: Build details of the repository associated with the workflow.
        :param pulumi.Input[str] cluster_id: The Azure Kubernetes Cluster Resource the application will be deployed to.
        :param pulumi.Input['DeploymentArgs'] deployment: Deployment details of the repository associated with the workflow.
        :param pulumi.Input[str] namespace: Kubernetes namespace the application is deployed to.
        :param pulumi.Input['ADORepositoryArgs'] repository: Details of the ADO repository associated with the workflow.
        """
        if acr is not None:
            pulumi.set(__self__, "acr", acr)
        if arm_service_connection is not None:
            pulumi.set(__self__, "arm_service_connection", arm_service_connection)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter
    def acr(self) -> Optional[pulumi.Input[str]]:
        """
        Resource identifier for azure container registry repository associated with the workflow.
        """
        return pulumi.get(self, "acr")

    @acr.setter
    def acr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acr", value)

    @property
    @pulumi.getter(name="armServiceConnection")
    def arm_service_connection(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ARM Service Connection the pipeline is associated with.
        """
        return pulumi.get(self, "arm_service_connection")

    @arm_service_connection.setter
    def arm_service_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arm_service_connection", value)

    @property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input['BuildArgs']]:
        """
        Build details of the repository associated with the workflow.
        """
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input['BuildArgs']]):
        pulumi.set(self, "build", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Kubernetes Cluster Resource the application will be deployed to.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['DeploymentArgs']]:
        """
        Deployment details of the repository associated with the workflow.
        """
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['DeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes namespace the application is deployed to.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input['ADORepositoryArgs']]:
        """
        Details of the ADO repository associated with the workflow.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input['ADORepositoryArgs']]):
        pulumi.set(self, "repository", value)


if not MYPY:
    class BuildArgsDict(TypedDict):
        """
        Build details of the repository associated with the workflow.
        """
        docker_build_context: NotRequired[pulumi.Input[str]]
        """
        Path to Dockerfile Build Context within the repository.
        """
        dockerfile: NotRequired[pulumi.Input[str]]
        """
        Path to the Dockerfile within the repository.
        """
elif False:
    BuildArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildArgs:
    def __init__(__self__, *,
                 docker_build_context: Optional[pulumi.Input[str]] = None,
                 dockerfile: Optional[pulumi.Input[str]] = None):
        """
        Build details of the repository associated with the workflow.
        :param pulumi.Input[str] docker_build_context: Path to Dockerfile Build Context within the repository.
        :param pulumi.Input[str] dockerfile: Path to the Dockerfile within the repository.
        """
        if docker_build_context is not None:
            pulumi.set(__self__, "docker_build_context", docker_build_context)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)

    @property
    @pulumi.getter(name="dockerBuildContext")
    def docker_build_context(self) -> Optional[pulumi.Input[str]]:
        """
        Path to Dockerfile Build Context within the repository.
        """
        return pulumi.get(self, "docker_build_context")

    @docker_build_context.setter
    def docker_build_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_build_context", value)

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the Dockerfile within the repository.
        """
        return pulumi.get(self, "dockerfile")

    @dockerfile.setter
    def dockerfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile", value)


if not MYPY:
    class DeploymentArgsDict(TypedDict):
        """
        Deployment details of the repository associated with the workflow.
        """
        helm_chart_path: NotRequired[pulumi.Input[str]]
        """
        Helm chart directory path in repository.
        """
        helm_values: NotRequired[pulumi.Input[str]]
        """
        Helm Values.yaml file location in repository.
        """
        kube_manifest_locations: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        manifest_type: NotRequired[pulumi.Input[Union[str, 'ManifestType']]]
        """
        Determines the type of manifests within the repository.
        """
        overrides: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Manifest override values.
        """
elif False:
    DeploymentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 helm_chart_path: Optional[pulumi.Input[str]] = None,
                 helm_values: Optional[pulumi.Input[str]] = None,
                 kube_manifest_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 manifest_type: Optional[pulumi.Input[Union[str, 'ManifestType']]] = None,
                 overrides: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Deployment details of the repository associated with the workflow.
        :param pulumi.Input[str] helm_chart_path: Helm chart directory path in repository.
        :param pulumi.Input[str] helm_values: Helm Values.yaml file location in repository.
        :param pulumi.Input[Union[str, 'ManifestType']] manifest_type: Determines the type of manifests within the repository.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] overrides: Manifest override values.
        """
        if helm_chart_path is not None:
            pulumi.set(__self__, "helm_chart_path", helm_chart_path)
        if helm_values is not None:
            pulumi.set(__self__, "helm_values", helm_values)
        if kube_manifest_locations is not None:
            pulumi.set(__self__, "kube_manifest_locations", kube_manifest_locations)
        if manifest_type is not None:
            pulumi.set(__self__, "manifest_type", manifest_type)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)

    @property
    @pulumi.getter(name="helmChartPath")
    def helm_chart_path(self) -> Optional[pulumi.Input[str]]:
        """
        Helm chart directory path in repository.
        """
        return pulumi.get(self, "helm_chart_path")

    @helm_chart_path.setter
    def helm_chart_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_chart_path", value)

    @property
    @pulumi.getter(name="helmValues")
    def helm_values(self) -> Optional[pulumi.Input[str]]:
        """
        Helm Values.yaml file location in repository.
        """
        return pulumi.get(self, "helm_values")

    @helm_values.setter
    def helm_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helm_values", value)

    @property
    @pulumi.getter(name="kubeManifestLocations")
    def kube_manifest_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kube_manifest_locations")

    @kube_manifest_locations.setter
    def kube_manifest_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_manifest_locations", value)

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[pulumi.Input[Union[str, 'ManifestType']]]:
        """
        Determines the type of manifests within the repository.
        """
        return pulumi.get(self, "manifest_type")

    @manifest_type.setter
    def manifest_type(self, value: Optional[pulumi.Input[Union[str, 'ManifestType']]]):
        pulumi.set(self, "manifest_type", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Manifest override values.
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "overrides", value)


if not MYPY:
    class GitHubWorkflowProfileOidcCredentialsArgsDict(TypedDict):
        """
        The fields needed for OIDC with GitHub.
        """
        azure_client_id: NotRequired[pulumi.Input[str]]
        """
        Azure Application Client ID
        """
        azure_tenant_id: NotRequired[pulumi.Input[str]]
        """
        Azure Directory (tenant) ID
        """
elif False:
    GitHubWorkflowProfileOidcCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GitHubWorkflowProfileOidcCredentialsArgs:
    def __init__(__self__, *,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None):
        """
        The fields needed for OIDC with GitHub.
        :param pulumi.Input[str] azure_client_id: Azure Application Client ID
        :param pulumi.Input[str] azure_tenant_id: Azure Directory (tenant) ID
        """
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Application Client ID
        """
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_id", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Directory (tenant) ID
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)


if not MYPY:
    class GitHubWorkflowProfileArgsDict(TypedDict):
        """
        GitHub Workflow Profile
        """
        acr: NotRequired[pulumi.Input['ACRArgsDict']]
        """
        Information on the azure container registry
        """
        aks_resource_id: NotRequired[pulumi.Input[str]]
        """
        The Azure Kubernetes Cluster Resource the application will be deployed to.
        """
        branch_name: NotRequired[pulumi.Input[str]]
        """
        Repository Branch Name
        """
        deployment_properties: NotRequired[pulumi.Input['DeploymentArgsDict']]
        """
        Deployment details of the repository associated with the workflow.
        """
        docker_build_context: NotRequired[pulumi.Input[str]]
        """
        Path to Dockerfile Build Context within the repository.
        """
        dockerfile: NotRequired[pulumi.Input[str]]
        """
        Path to the Dockerfile within the repository.
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Kubernetes namespace the application is deployed to.
        """
        oidc_credentials: NotRequired[pulumi.Input['GitHubWorkflowProfileOidcCredentialsArgsDict']]
        """
        The fields needed for OIDC with GitHub.
        """
        repository_name: NotRequired[pulumi.Input[str]]
        """
        Repository Name
        """
        repository_owner: NotRequired[pulumi.Input[str]]
        """
        Repository Owner
        """
elif False:
    GitHubWorkflowProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GitHubWorkflowProfileArgs:
    def __init__(__self__, *,
                 acr: Optional[pulumi.Input['ACRArgs']] = None,
                 aks_resource_id: Optional[pulumi.Input[str]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 deployment_properties: Optional[pulumi.Input['DeploymentArgs']] = None,
                 docker_build_context: Optional[pulumi.Input[str]] = None,
                 dockerfile: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 oidc_credentials: Optional[pulumi.Input['GitHubWorkflowProfileOidcCredentialsArgs']] = None,
                 repository_name: Optional[pulumi.Input[str]] = None,
                 repository_owner: Optional[pulumi.Input[str]] = None):
        """
        GitHub Workflow Profile
        :param pulumi.Input['ACRArgs'] acr: Information on the azure container registry
        :param pulumi.Input[str] aks_resource_id: The Azure Kubernetes Cluster Resource the application will be deployed to.
        :param pulumi.Input[str] branch_name: Repository Branch Name
        :param pulumi.Input['DeploymentArgs'] deployment_properties: Deployment details of the repository associated with the workflow.
        :param pulumi.Input[str] docker_build_context: Path to Dockerfile Build Context within the repository.
        :param pulumi.Input[str] dockerfile: Path to the Dockerfile within the repository.
        :param pulumi.Input[str] namespace: Kubernetes namespace the application is deployed to.
        :param pulumi.Input['GitHubWorkflowProfileOidcCredentialsArgs'] oidc_credentials: The fields needed for OIDC with GitHub.
        :param pulumi.Input[str] repository_name: Repository Name
        :param pulumi.Input[str] repository_owner: Repository Owner
        """
        if acr is not None:
            pulumi.set(__self__, "acr", acr)
        if aks_resource_id is not None:
            pulumi.set(__self__, "aks_resource_id", aks_resource_id)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if deployment_properties is not None:
            pulumi.set(__self__, "deployment_properties", deployment_properties)
        if docker_build_context is not None:
            pulumi.set(__self__, "docker_build_context", docker_build_context)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if oidc_credentials is not None:
            pulumi.set(__self__, "oidc_credentials", oidc_credentials)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)
        if repository_owner is not None:
            pulumi.set(__self__, "repository_owner", repository_owner)

    @property
    @pulumi.getter
    def acr(self) -> Optional[pulumi.Input['ACRArgs']]:
        """
        Information on the azure container registry
        """
        return pulumi.get(self, "acr")

    @acr.setter
    def acr(self, value: Optional[pulumi.Input['ACRArgs']]):
        pulumi.set(self, "acr", value)

    @property
    @pulumi.getter(name="aksResourceId")
    def aks_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Kubernetes Cluster Resource the application will be deployed to.
        """
        return pulumi.get(self, "aks_resource_id")

    @aks_resource_id.setter
    def aks_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aks_resource_id", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Branch Name
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="deploymentProperties")
    def deployment_properties(self) -> Optional[pulumi.Input['DeploymentArgs']]:
        """
        Deployment details of the repository associated with the workflow.
        """
        return pulumi.get(self, "deployment_properties")

    @deployment_properties.setter
    def deployment_properties(self, value: Optional[pulumi.Input['DeploymentArgs']]):
        pulumi.set(self, "deployment_properties", value)

    @property
    @pulumi.getter(name="dockerBuildContext")
    def docker_build_context(self) -> Optional[pulumi.Input[str]]:
        """
        Path to Dockerfile Build Context within the repository.
        """
        return pulumi.get(self, "docker_build_context")

    @docker_build_context.setter
    def docker_build_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_build_context", value)

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the Dockerfile within the repository.
        """
        return pulumi.get(self, "dockerfile")

    @dockerfile.setter
    def dockerfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes namespace the application is deployed to.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="oidcCredentials")
    def oidc_credentials(self) -> Optional[pulumi.Input['GitHubWorkflowProfileOidcCredentialsArgs']]:
        """
        The fields needed for OIDC with GitHub.
        """
        return pulumi.get(self, "oidc_credentials")

    @oidc_credentials.setter
    def oidc_credentials(self, value: Optional[pulumi.Input['GitHubWorkflowProfileOidcCredentialsArgs']]):
        pulumi.set(self, "oidc_credentials", value)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Name
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_name", value)

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Repository Owner
        """
        return pulumi.get(self, "repository_owner")

    @repository_owner.setter
    def repository_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_owner", value)


if not MYPY:
    class IacTemplateDetailsArgsDict(TypedDict):
        count: NotRequired[pulumi.Input[int]]
        """
        Count of the product
        """
        naming_convention: NotRequired[pulumi.Input[str]]
        """
        Naming convention of this product
        """
        product_name: NotRequired[pulumi.Input[str]]
        """
        The name of the products.
        """
elif False:
    IacTemplateDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IacTemplateDetailsArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 naming_convention: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: Count of the product
        :param pulumi.Input[str] naming_convention: Naming convention of this product
        :param pulumi.Input[str] product_name: The name of the products.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if naming_convention is not None:
            pulumi.set(__self__, "naming_convention", naming_convention)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of the product
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="namingConvention")
    def naming_convention(self) -> Optional[pulumi.Input[str]]:
        """
        Naming convention of this product
        """
        return pulumi.get(self, "naming_convention")

    @naming_convention.setter
    def naming_convention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "naming_convention", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the products.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)


if not MYPY:
    class IacTemplatePropertiesArgsDict(TypedDict):
        """
        Properties of a IacTemplate.
        """
        instance_name: NotRequired[pulumi.Input[str]]
        """
        the sample instance name of the template
        """
        instance_stage: NotRequired[pulumi.Input[str]]
        """
        the source stage of the template
        """
        source_resource_id: NotRequired[pulumi.Input[str]]
        """
        the source store of the template
        """
        template_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgsDict']]]]
        template_name: NotRequired[pulumi.Input[str]]
        """
        Template Name
        """
elif False:
    IacTemplatePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IacTemplatePropertiesArgs:
    def __init__(__self__, *,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_stage: Optional[pulumi.Input[str]] = None,
                 source_resource_id: Optional[pulumi.Input[str]] = None,
                 template_details: Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgs']]]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Properties of a IacTemplate.
        :param pulumi.Input[str] instance_name: the sample instance name of the template
        :param pulumi.Input[str] instance_stage: the source stage of the template
        :param pulumi.Input[str] source_resource_id: the source store of the template
        :param pulumi.Input[str] template_name: Template Name
        """
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_stage is not None:
            pulumi.set(__self__, "instance_stage", instance_stage)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if template_details is not None:
            pulumi.set(__self__, "template_details", template_details)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        the sample instance name of the template
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStage")
    def instance_stage(self) -> Optional[pulumi.Input[str]]:
        """
        the source stage of the template
        """
        return pulumi.get(self, "instance_stage")

    @instance_stage.setter
    def instance_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_stage", value)

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        the source store of the template
        """
        return pulumi.get(self, "source_resource_id")

    @source_resource_id.setter
    def source_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_resource_id", value)

    @property
    @pulumi.getter(name="templateDetails")
    def template_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgs']]]]:
        return pulumi.get(self, "template_details")

    @template_details.setter
    def template_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IacTemplateDetailsArgs']]]]):
        pulumi.set(self, "template_details", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template Name
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


if not MYPY:
    class StagePropertiesArgsDict(TypedDict):
        """
        Properties of a Stage.
        """
        dependencies: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        git_environment: NotRequired[pulumi.Input[str]]
        stage_name: NotRequired[pulumi.Input[str]]
        """
        Stage Name
        """
elif False:
    StagePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StagePropertiesArgs:
    def __init__(__self__, *,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_environment: Optional[pulumi.Input[str]] = None,
                 stage_name: Optional[pulumi.Input[str]] = None):
        """
        Properties of a Stage.
        :param pulumi.Input[str] stage_name: Stage Name
        """
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if git_environment is not None:
            pulumi.set(__self__, "git_environment", git_environment)
        if stage_name is not None:
            pulumi.set(__self__, "stage_name", stage_name)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter(name="gitEnvironment")
    def git_environment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "git_environment")

    @git_environment.setter
    def git_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_environment", value)

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> Optional[pulumi.Input[str]]:
        """
        Stage Name
        """
        return pulumi.get(self, "stage_name")

    @stage_name.setter
    def stage_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_name", value)


if not MYPY:
    class WorkflowPropertiesArgsDict(TypedDict):
        """
        Workflow properties
        """
        artifact_generation_properties: NotRequired[pulumi.Input['ArtifactGenerationPropertiesArgsDict']]
        """
        Properties for generating artifacts like dockerfile and manifests.
        """
        azure_pipeline_profile: NotRequired[pulumi.Input['AzurePipelineProfileArgsDict']]
        """
        Profile of an azure pipeline.
        """
        github_workflow_profile: NotRequired[pulumi.Input['GitHubWorkflowProfileArgsDict']]
        """
        Profile of a github workflow.
        """
elif False:
    WorkflowPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowPropertiesArgs:
    def __init__(__self__, *,
                 artifact_generation_properties: Optional[pulumi.Input['ArtifactGenerationPropertiesArgs']] = None,
                 azure_pipeline_profile: Optional[pulumi.Input['AzurePipelineProfileArgs']] = None,
                 github_workflow_profile: Optional[pulumi.Input['GitHubWorkflowProfileArgs']] = None):
        """
        Workflow properties
        :param pulumi.Input['ArtifactGenerationPropertiesArgs'] artifact_generation_properties: Properties for generating artifacts like dockerfile and manifests.
        :param pulumi.Input['AzurePipelineProfileArgs'] azure_pipeline_profile: Profile of an azure pipeline.
        :param pulumi.Input['GitHubWorkflowProfileArgs'] github_workflow_profile: Profile of a github workflow.
        """
        if artifact_generation_properties is not None:
            pulumi.set(__self__, "artifact_generation_properties", artifact_generation_properties)
        if azure_pipeline_profile is not None:
            pulumi.set(__self__, "azure_pipeline_profile", azure_pipeline_profile)
        if github_workflow_profile is not None:
            pulumi.set(__self__, "github_workflow_profile", github_workflow_profile)

    @property
    @pulumi.getter(name="artifactGenerationProperties")
    def artifact_generation_properties(self) -> Optional[pulumi.Input['ArtifactGenerationPropertiesArgs']]:
        """
        Properties for generating artifacts like dockerfile and manifests.
        """
        return pulumi.get(self, "artifact_generation_properties")

    @artifact_generation_properties.setter
    def artifact_generation_properties(self, value: Optional[pulumi.Input['ArtifactGenerationPropertiesArgs']]):
        pulumi.set(self, "artifact_generation_properties", value)

    @property
    @pulumi.getter(name="azurePipelineProfile")
    def azure_pipeline_profile(self) -> Optional[pulumi.Input['AzurePipelineProfileArgs']]:
        """
        Profile of an azure pipeline.
        """
        return pulumi.get(self, "azure_pipeline_profile")

    @azure_pipeline_profile.setter
    def azure_pipeline_profile(self, value: Optional[pulumi.Input['AzurePipelineProfileArgs']]):
        pulumi.set(self, "azure_pipeline_profile", value)

    @property
    @pulumi.getter(name="githubWorkflowProfile")
    def github_workflow_profile(self) -> Optional[pulumi.Input['GitHubWorkflowProfileArgs']]:
        """
        Profile of a github workflow.
        """
        return pulumi.get(self, "github_workflow_profile")

    @github_workflow_profile.setter
    def github_workflow_profile(self, value: Optional[pulumi.Input['GitHubWorkflowProfileArgs']]):
        pulumi.set(self, "github_workflow_profile", value)


