# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ACRResponse',
    'ADORepositoryResponse',
    'ArtifactGenerationPropertiesResponse',
    'AzurePipelineProfileResponse',
    'BuildResponse',
    'DeploymentResponse',
    'GitHubWorkflowProfileResponse',
    'GitHubWorkflowProfileResponseOidcCredentials',
    'IacTemplateDetailsResponse',
    'IacTemplatePropertiesResponse',
    'PullRequestResponse',
    'StagePropertiesResponse',
    'SystemDataResponse',
    'WorkflowPropertiesResponse',
    'WorkflowRunResponse',
]

@pulumi.output_type
class ACRResponse(dict):
    """
    Information on the azure container registry
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acrRegistryName":
            suggest = "acr_registry_name"
        elif key == "acrRepositoryName":
            suggest = "acr_repository_name"
        elif key == "acrResourceGroup":
            suggest = "acr_resource_group"
        elif key == "acrSubscriptionId":
            suggest = "acr_subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ACRResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ACRResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ACRResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acr_registry_name: Optional[str] = None,
                 acr_repository_name: Optional[str] = None,
                 acr_resource_group: Optional[str] = None,
                 acr_subscription_id: Optional[str] = None):
        """
        Information on the azure container registry
        :param str acr_registry_name: ACR registry
        :param str acr_repository_name: ACR repository
        :param str acr_resource_group: ACR resource group
        :param str acr_subscription_id: ACR subscription id
        """
        if acr_registry_name is not None:
            pulumi.set(__self__, "acr_registry_name", acr_registry_name)
        if acr_repository_name is not None:
            pulumi.set(__self__, "acr_repository_name", acr_repository_name)
        if acr_resource_group is not None:
            pulumi.set(__self__, "acr_resource_group", acr_resource_group)
        if acr_subscription_id is not None:
            pulumi.set(__self__, "acr_subscription_id", acr_subscription_id)

    @property
    @pulumi.getter(name="acrRegistryName")
    def acr_registry_name(self) -> Optional[str]:
        """
        ACR registry
        """
        return pulumi.get(self, "acr_registry_name")

    @property
    @pulumi.getter(name="acrRepositoryName")
    def acr_repository_name(self) -> Optional[str]:
        """
        ACR repository
        """
        return pulumi.get(self, "acr_repository_name")

    @property
    @pulumi.getter(name="acrResourceGroup")
    def acr_resource_group(self) -> Optional[str]:
        """
        ACR resource group
        """
        return pulumi.get(self, "acr_resource_group")

    @property
    @pulumi.getter(name="acrSubscriptionId")
    def acr_subscription_id(self) -> Optional[str]:
        """
        ACR subscription id
        """
        return pulumi.get(self, "acr_subscription_id")


@pulumi.output_type
class ADORepositoryResponse(dict):
    """
    Details of the ADO repository associated with the workflow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adoOrganization":
            suggest = "ado_organization"
        elif key == "branchName":
            suggest = "branch_name"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "repositoryName":
            suggest = "repository_name"
        elif key == "repositoryOwner":
            suggest = "repository_owner"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ADORepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ADORepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ADORepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ado_organization: Optional[str] = None,
                 branch_name: Optional[str] = None,
                 project_name: Optional[str] = None,
                 repository_name: Optional[str] = None,
                 repository_owner: Optional[str] = None):
        """
        Details of the ADO repository associated with the workflow.
        :param str ado_organization: The name of the Azure DevOps organization the pipeline is associated with.
        :param str branch_name: The name of the branch the workflow is associated with.
        :param str project_name: The name of the project the pipeline is associated with.
        :param str repository_name: The name of the repository the workflow is associated with.
        :param str repository_owner: The owner of the repository the workflow is associated with.
        """
        if ado_organization is not None:
            pulumi.set(__self__, "ado_organization", ado_organization)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)
        if repository_owner is not None:
            pulumi.set(__self__, "repository_owner", repository_owner)

    @property
    @pulumi.getter(name="adoOrganization")
    def ado_organization(self) -> Optional[str]:
        """
        The name of the Azure DevOps organization the pipeline is associated with.
        """
        return pulumi.get(self, "ado_organization")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[str]:
        """
        The name of the branch the workflow is associated with.
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The name of the project the pipeline is associated with.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        """
        The name of the repository the workflow is associated with.
        """
        return pulumi.get(self, "repository_name")

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> Optional[str]:
        """
        The owner of the repository the workflow is associated with.
        """
        return pulumi.get(self, "repository_owner")


@pulumi.output_type
class ArtifactGenerationPropertiesResponse(dict):
    """
    Properties used for generating artifacts such as Dockerfiles and manifests.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appName":
            suggest = "app_name"
        elif key == "builderVersion":
            suggest = "builder_version"
        elif key == "dockerfileGenerationMode":
            suggest = "dockerfile_generation_mode"
        elif key == "dockerfileOutputDirectory":
            suggest = "dockerfile_output_directory"
        elif key == "generationLanguage":
            suggest = "generation_language"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageTag":
            suggest = "image_tag"
        elif key == "languageVersion":
            suggest = "language_version"
        elif key == "manifestGenerationMode":
            suggest = "manifest_generation_mode"
        elif key == "manifestOutputDirectory":
            suggest = "manifest_output_directory"
        elif key == "manifestType":
            suggest = "manifest_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArtifactGenerationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArtifactGenerationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArtifactGenerationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_name: Optional[str] = None,
                 builder_version: Optional[str] = None,
                 dockerfile_generation_mode: Optional[str] = None,
                 dockerfile_output_directory: Optional[str] = None,
                 generation_language: Optional[str] = None,
                 image_name: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 language_version: Optional[str] = None,
                 manifest_generation_mode: Optional[str] = None,
                 manifest_output_directory: Optional[str] = None,
                 manifest_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[str] = None):
        """
        Properties used for generating artifacts such as Dockerfiles and manifests.
        :param str app_name: The name of the app.
        :param str builder_version: The version of the language image used for building the code in the generated dockerfile.
        :param str dockerfile_generation_mode: The mode of generation to be used for generating Dockerfiles.
        :param str dockerfile_output_directory: The directory to output the generated Dockerfile to.
        :param str generation_language: The programming language used.
        :param str image_name: The name of the image to be generated.
        :param str image_tag: The tag to apply to the generated image.
        :param str language_version: The version of the language image used for execution in the generated dockerfile.
        :param str manifest_generation_mode: The mode of generation to be used for generating Manifest.
        :param str manifest_output_directory: The directory to output the generated manifests to.
        :param str manifest_type: Determines the type of manifests to be generated.
        :param str namespace: The namespace to deploy the application to.
        :param str port: The port the application is exposed on.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if builder_version is not None:
            pulumi.set(__self__, "builder_version", builder_version)
        if dockerfile_generation_mode is not None:
            pulumi.set(__self__, "dockerfile_generation_mode", dockerfile_generation_mode)
        if dockerfile_output_directory is not None:
            pulumi.set(__self__, "dockerfile_output_directory", dockerfile_output_directory)
        if generation_language is not None:
            pulumi.set(__self__, "generation_language", generation_language)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if language_version is not None:
            pulumi.set(__self__, "language_version", language_version)
        if manifest_generation_mode is not None:
            pulumi.set(__self__, "manifest_generation_mode", manifest_generation_mode)
        if manifest_output_directory is not None:
            pulumi.set(__self__, "manifest_output_directory", manifest_output_directory)
        if manifest_type is not None:
            pulumi.set(__self__, "manifest_type", manifest_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        The name of the app.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> Optional[str]:
        """
        The version of the language image used for building the code in the generated dockerfile.
        """
        return pulumi.get(self, "builder_version")

    @property
    @pulumi.getter(name="dockerfileGenerationMode")
    def dockerfile_generation_mode(self) -> Optional[str]:
        """
        The mode of generation to be used for generating Dockerfiles.
        """
        return pulumi.get(self, "dockerfile_generation_mode")

    @property
    @pulumi.getter(name="dockerfileOutputDirectory")
    def dockerfile_output_directory(self) -> Optional[str]:
        """
        The directory to output the generated Dockerfile to.
        """
        return pulumi.get(self, "dockerfile_output_directory")

    @property
    @pulumi.getter(name="generationLanguage")
    def generation_language(self) -> Optional[str]:
        """
        The programming language used.
        """
        return pulumi.get(self, "generation_language")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        """
        The name of the image to be generated.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        """
        The tag to apply to the generated image.
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="languageVersion")
    def language_version(self) -> Optional[str]:
        """
        The version of the language image used for execution in the generated dockerfile.
        """
        return pulumi.get(self, "language_version")

    @property
    @pulumi.getter(name="manifestGenerationMode")
    def manifest_generation_mode(self) -> Optional[str]:
        """
        The mode of generation to be used for generating Manifest.
        """
        return pulumi.get(self, "manifest_generation_mode")

    @property
    @pulumi.getter(name="manifestOutputDirectory")
    def manifest_output_directory(self) -> Optional[str]:
        """
        The directory to output the generated manifests to.
        """
        return pulumi.get(self, "manifest_output_directory")

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[str]:
        """
        Determines the type of manifests to be generated.
        """
        return pulumi.get(self, "manifest_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace to deploy the application to.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port the application is exposed on.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class AzurePipelineProfileResponse(dict):
    """
    Azure Pipeline Profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authStatus":
            suggest = "auth_status"
        elif key == "armServiceConnection":
            suggest = "arm_service_connection"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "lastWorkflowRun":
            suggest = "last_workflow_run"
        elif key == "pullRequest":
            suggest = "pull_request"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzurePipelineProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzurePipelineProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzurePipelineProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_status: str,
                 acr: Optional[str] = None,
                 arm_service_connection: Optional[str] = None,
                 build: Optional['outputs.BuildResponse'] = None,
                 cluster_id: Optional[str] = None,
                 deployment: Optional['outputs.DeploymentResponse'] = None,
                 last_workflow_run: Optional['outputs.WorkflowRunResponse'] = None,
                 namespace: Optional[str] = None,
                 pull_request: Optional['outputs.PullRequestResponse'] = None,
                 repository: Optional['outputs.ADORepositoryResponse'] = None):
        """
        Azure Pipeline Profile
        :param str auth_status: Determines the authorization status of requests.
        :param str acr: Resource identifier for azure container registry repository associated with the workflow.
        :param str arm_service_connection: The name of the ARM Service Connection the pipeline is associated with.
        :param 'BuildResponse' build: Build details of the repository associated with the workflow.
        :param str cluster_id: The Azure Kubernetes Cluster Resource the application will be deployed to.
        :param 'DeploymentResponse' deployment: Deployment details of the repository associated with the workflow.
        :param str namespace: Kubernetes namespace the application is deployed to.
        :param 'PullRequestResponse' pull_request: Details of the pull request containing the workflow.
        :param 'ADORepositoryResponse' repository: Details of the ADO repository associated with the workflow.
        """
        pulumi.set(__self__, "auth_status", auth_status)
        if acr is not None:
            pulumi.set(__self__, "acr", acr)
        if arm_service_connection is not None:
            pulumi.set(__self__, "arm_service_connection", arm_service_connection)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if last_workflow_run is not None:
            pulumi.set(__self__, "last_workflow_run", last_workflow_run)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if pull_request is not None:
            pulumi.set(__self__, "pull_request", pull_request)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> str:
        """
        Determines the authorization status of requests.
        """
        return pulumi.get(self, "auth_status")

    @property
    @pulumi.getter
    def acr(self) -> Optional[str]:
        """
        Resource identifier for azure container registry repository associated with the workflow.
        """
        return pulumi.get(self, "acr")

    @property
    @pulumi.getter(name="armServiceConnection")
    def arm_service_connection(self) -> Optional[str]:
        """
        The name of the ARM Service Connection the pipeline is associated with.
        """
        return pulumi.get(self, "arm_service_connection")

    @property
    @pulumi.getter
    def build(self) -> Optional['outputs.BuildResponse']:
        """
        Build details of the repository associated with the workflow.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        The Azure Kubernetes Cluster Resource the application will be deployed to.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.DeploymentResponse']:
        """
        Deployment details of the repository associated with the workflow.
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="lastWorkflowRun")
    def last_workflow_run(self) -> Optional['outputs.WorkflowRunResponse']:
        return pulumi.get(self, "last_workflow_run")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Kubernetes namespace the application is deployed to.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="pullRequest")
    def pull_request(self) -> Optional['outputs.PullRequestResponse']:
        """
        Details of the pull request containing the workflow.
        """
        return pulumi.get(self, "pull_request")

    @property
    @pulumi.getter
    def repository(self) -> Optional['outputs.ADORepositoryResponse']:
        """
        Details of the ADO repository associated with the workflow.
        """
        return pulumi.get(self, "repository")


@pulumi.output_type
class BuildResponse(dict):
    """
    Build details of the repository associated with the workflow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerBuildContext":
            suggest = "docker_build_context"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_build_context: Optional[str] = None,
                 dockerfile: Optional[str] = None):
        """
        Build details of the repository associated with the workflow.
        :param str docker_build_context: Path to Dockerfile Build Context within the repository.
        :param str dockerfile: Path to the Dockerfile within the repository.
        """
        if docker_build_context is not None:
            pulumi.set(__self__, "docker_build_context", docker_build_context)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)

    @property
    @pulumi.getter(name="dockerBuildContext")
    def docker_build_context(self) -> Optional[str]:
        """
        Path to Dockerfile Build Context within the repository.
        """
        return pulumi.get(self, "docker_build_context")

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[str]:
        """
        Path to the Dockerfile within the repository.
        """
        return pulumi.get(self, "dockerfile")


@pulumi.output_type
class DeploymentResponse(dict):
    """
    Deployment details of the repository associated with the workflow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helmChartPath":
            suggest = "helm_chart_path"
        elif key == "helmValues":
            suggest = "helm_values"
        elif key == "kubeManifestLocations":
            suggest = "kube_manifest_locations"
        elif key == "manifestType":
            suggest = "manifest_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 helm_chart_path: Optional[str] = None,
                 helm_values: Optional[str] = None,
                 kube_manifest_locations: Optional[Sequence[str]] = None,
                 manifest_type: Optional[str] = None,
                 overrides: Optional[Mapping[str, str]] = None):
        """
        Deployment details of the repository associated with the workflow.
        :param str helm_chart_path: Helm chart directory path in repository.
        :param str helm_values: Helm Values.yaml file location in repository.
        :param str manifest_type: Determines the type of manifests within the repository.
        :param Mapping[str, str] overrides: Manifest override values.
        """
        if helm_chart_path is not None:
            pulumi.set(__self__, "helm_chart_path", helm_chart_path)
        if helm_values is not None:
            pulumi.set(__self__, "helm_values", helm_values)
        if kube_manifest_locations is not None:
            pulumi.set(__self__, "kube_manifest_locations", kube_manifest_locations)
        if manifest_type is not None:
            pulumi.set(__self__, "manifest_type", manifest_type)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)

    @property
    @pulumi.getter(name="helmChartPath")
    def helm_chart_path(self) -> Optional[str]:
        """
        Helm chart directory path in repository.
        """
        return pulumi.get(self, "helm_chart_path")

    @property
    @pulumi.getter(name="helmValues")
    def helm_values(self) -> Optional[str]:
        """
        Helm Values.yaml file location in repository.
        """
        return pulumi.get(self, "helm_values")

    @property
    @pulumi.getter(name="kubeManifestLocations")
    def kube_manifest_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "kube_manifest_locations")

    @property
    @pulumi.getter(name="manifestType")
    def manifest_type(self) -> Optional[str]:
        """
        Determines the type of manifests within the repository.
        """
        return pulumi.get(self, "manifest_type")

    @property
    @pulumi.getter
    def overrides(self) -> Optional[Mapping[str, str]]:
        """
        Manifest override values.
        """
        return pulumi.get(self, "overrides")


@pulumi.output_type
class GitHubWorkflowProfileResponse(dict):
    """
    GitHub Workflow Profile
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authStatus":
            suggest = "auth_status"
        elif key == "prStatus":
            suggest = "pr_status"
        elif key == "prURL":
            suggest = "pr_url"
        elif key == "pullNumber":
            suggest = "pull_number"
        elif key == "aksResourceId":
            suggest = "aks_resource_id"
        elif key == "branchName":
            suggest = "branch_name"
        elif key == "deploymentProperties":
            suggest = "deployment_properties"
        elif key == "dockerBuildContext":
            suggest = "docker_build_context"
        elif key == "lastWorkflowRun":
            suggest = "last_workflow_run"
        elif key == "oidcCredentials":
            suggest = "oidc_credentials"
        elif key == "repositoryName":
            suggest = "repository_name"
        elif key == "repositoryOwner":
            suggest = "repository_owner"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GitHubWorkflowProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GitHubWorkflowProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GitHubWorkflowProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_status: str,
                 pr_status: str,
                 pr_url: str,
                 pull_number: int,
                 acr: Optional['outputs.ACRResponse'] = None,
                 aks_resource_id: Optional[str] = None,
                 branch_name: Optional[str] = None,
                 deployment_properties: Optional['outputs.DeploymentResponse'] = None,
                 docker_build_context: Optional[str] = None,
                 dockerfile: Optional[str] = None,
                 last_workflow_run: Optional['outputs.WorkflowRunResponse'] = None,
                 namespace: Optional[str] = None,
                 oidc_credentials: Optional['outputs.GitHubWorkflowProfileResponseOidcCredentials'] = None,
                 repository_name: Optional[str] = None,
                 repository_owner: Optional[str] = None):
        """
        GitHub Workflow Profile
        :param str auth_status: Determines the authorization status of requests.
        :param str pr_status: The status of the Pull Request submitted against the users repository.
        :param str pr_url: The URL to the Pull Request submitted against the users repository.
        :param int pull_number: The number associated with the submitted pull request.
        :param 'ACRResponse' acr: Information on the azure container registry
        :param str aks_resource_id: The Azure Kubernetes Cluster Resource the application will be deployed to.
        :param str branch_name: Repository Branch Name
        :param 'DeploymentResponse' deployment_properties: Deployment details of the repository associated with the workflow.
        :param str docker_build_context: Path to Dockerfile Build Context within the repository.
        :param str dockerfile: Path to the Dockerfile within the repository.
        :param str namespace: Kubernetes namespace the application is deployed to.
        :param 'GitHubWorkflowProfileResponseOidcCredentials' oidc_credentials: The fields needed for OIDC with GitHub.
        :param str repository_name: Repository Name
        :param str repository_owner: Repository Owner
        """
        pulumi.set(__self__, "auth_status", auth_status)
        pulumi.set(__self__, "pr_status", pr_status)
        pulumi.set(__self__, "pr_url", pr_url)
        pulumi.set(__self__, "pull_number", pull_number)
        if acr is not None:
            pulumi.set(__self__, "acr", acr)
        if aks_resource_id is not None:
            pulumi.set(__self__, "aks_resource_id", aks_resource_id)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if deployment_properties is not None:
            pulumi.set(__self__, "deployment_properties", deployment_properties)
        if docker_build_context is not None:
            pulumi.set(__self__, "docker_build_context", docker_build_context)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if last_workflow_run is not None:
            pulumi.set(__self__, "last_workflow_run", last_workflow_run)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if oidc_credentials is not None:
            pulumi.set(__self__, "oidc_credentials", oidc_credentials)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)
        if repository_owner is not None:
            pulumi.set(__self__, "repository_owner", repository_owner)

    @property
    @pulumi.getter(name="authStatus")
    def auth_status(self) -> str:
        """
        Determines the authorization status of requests.
        """
        return pulumi.get(self, "auth_status")

    @property
    @pulumi.getter(name="prStatus")
    def pr_status(self) -> str:
        """
        The status of the Pull Request submitted against the users repository.
        """
        return pulumi.get(self, "pr_status")

    @property
    @pulumi.getter(name="prURL")
    def pr_url(self) -> str:
        """
        The URL to the Pull Request submitted against the users repository.
        """
        return pulumi.get(self, "pr_url")

    @property
    @pulumi.getter(name="pullNumber")
    def pull_number(self) -> int:
        """
        The number associated with the submitted pull request.
        """
        return pulumi.get(self, "pull_number")

    @property
    @pulumi.getter
    def acr(self) -> Optional['outputs.ACRResponse']:
        """
        Information on the azure container registry
        """
        return pulumi.get(self, "acr")

    @property
    @pulumi.getter(name="aksResourceId")
    def aks_resource_id(self) -> Optional[str]:
        """
        The Azure Kubernetes Cluster Resource the application will be deployed to.
        """
        return pulumi.get(self, "aks_resource_id")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[str]:
        """
        Repository Branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="deploymentProperties")
    def deployment_properties(self) -> Optional['outputs.DeploymentResponse']:
        """
        Deployment details of the repository associated with the workflow.
        """
        return pulumi.get(self, "deployment_properties")

    @property
    @pulumi.getter(name="dockerBuildContext")
    def docker_build_context(self) -> Optional[str]:
        """
        Path to Dockerfile Build Context within the repository.
        """
        return pulumi.get(self, "docker_build_context")

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[str]:
        """
        Path to the Dockerfile within the repository.
        """
        return pulumi.get(self, "dockerfile")

    @property
    @pulumi.getter(name="lastWorkflowRun")
    def last_workflow_run(self) -> Optional['outputs.WorkflowRunResponse']:
        return pulumi.get(self, "last_workflow_run")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Kubernetes namespace the application is deployed to.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="oidcCredentials")
    def oidc_credentials(self) -> Optional['outputs.GitHubWorkflowProfileResponseOidcCredentials']:
        """
        The fields needed for OIDC with GitHub.
        """
        return pulumi.get(self, "oidc_credentials")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        """
        Repository Name
        """
        return pulumi.get(self, "repository_name")

    @property
    @pulumi.getter(name="repositoryOwner")
    def repository_owner(self) -> Optional[str]:
        """
        Repository Owner
        """
        return pulumi.get(self, "repository_owner")


@pulumi.output_type
class GitHubWorkflowProfileResponseOidcCredentials(dict):
    """
    The fields needed for OIDC with GitHub.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureClientId":
            suggest = "azure_client_id"
        elif key == "azureTenantId":
            suggest = "azure_tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GitHubWorkflowProfileResponseOidcCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GitHubWorkflowProfileResponseOidcCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GitHubWorkflowProfileResponseOidcCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_client_id: Optional[str] = None,
                 azure_tenant_id: Optional[str] = None):
        """
        The fields needed for OIDC with GitHub.
        :param str azure_client_id: Azure Application Client ID
        :param str azure_tenant_id: Azure Directory (tenant) ID
        """
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[str]:
        """
        Azure Application Client ID
        """
        return pulumi.get(self, "azure_client_id")

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[str]:
        """
        Azure Directory (tenant) ID
        """
        return pulumi.get(self, "azure_tenant_id")


@pulumi.output_type
class IacTemplateDetailsResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namingConvention":
            suggest = "naming_convention"
        elif key == "productName":
            suggest = "product_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IacTemplateDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IacTemplateDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IacTemplateDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[int] = None,
                 naming_convention: Optional[str] = None,
                 product_name: Optional[str] = None):
        """
        :param int count: Count of the product
        :param str naming_convention: Naming convention of this product
        :param str product_name: The name of the products.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if naming_convention is not None:
            pulumi.set(__self__, "naming_convention", naming_convention)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count of the product
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="namingConvention")
    def naming_convention(self) -> Optional[str]:
        """
        Naming convention of this product
        """
        return pulumi.get(self, "naming_convention")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        The name of the products.
        """
        return pulumi.get(self, "product_name")


@pulumi.output_type
class IacTemplatePropertiesResponse(dict):
    """
    Properties of a IacTemplate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quickStartTemplateType":
            suggest = "quick_start_template_type"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceStage":
            suggest = "instance_stage"
        elif key == "sourceResourceId":
            suggest = "source_resource_id"
        elif key == "templateDetails":
            suggest = "template_details"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IacTemplatePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IacTemplatePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IacTemplatePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quick_start_template_type: str,
                 instance_name: Optional[str] = None,
                 instance_stage: Optional[str] = None,
                 source_resource_id: Optional[str] = None,
                 template_details: Optional[Sequence['outputs.IacTemplateDetailsResponse']] = None,
                 template_name: Optional[str] = None):
        """
        Properties of a IacTemplate.
        :param str quick_start_template_type: Determines the authorization status of requests.
        :param str instance_name: the sample instance name of the template
        :param str instance_stage: the source stage of the template
        :param str source_resource_id: the source store of the template
        :param str template_name: Template Name
        """
        pulumi.set(__self__, "quick_start_template_type", quick_start_template_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_stage is not None:
            pulumi.set(__self__, "instance_stage", instance_stage)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if template_details is not None:
            pulumi.set(__self__, "template_details", template_details)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="quickStartTemplateType")
    def quick_start_template_type(self) -> str:
        """
        Determines the authorization status of requests.
        """
        return pulumi.get(self, "quick_start_template_type")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        the sample instance name of the template
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStage")
    def instance_stage(self) -> Optional[str]:
        """
        the source stage of the template
        """
        return pulumi.get(self, "instance_stage")

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[str]:
        """
        the source store of the template
        """
        return pulumi.get(self, "source_resource_id")

    @property
    @pulumi.getter(name="templateDetails")
    def template_details(self) -> Optional[Sequence['outputs.IacTemplateDetailsResponse']]:
        return pulumi.get(self, "template_details")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[str]:
        """
        Template Name
        """
        return pulumi.get(self, "template_name")


@pulumi.output_type
class PullRequestResponse(dict):
    """
    Details of the pull request containing the workflow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prStatus":
            suggest = "pr_status"
        elif key == "prURL":
            suggest = "pr_url"
        elif key == "pullNumber":
            suggest = "pull_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PullRequestResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PullRequestResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PullRequestResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pr_status: str,
                 pr_url: str,
                 pull_number: int):
        """
        Details of the pull request containing the workflow.
        :param str pr_status: The status of the Pull Request submitted against the users repository.
        :param str pr_url: The URL to the Pull Request submitted against the users repository.
        :param int pull_number: The number associated with the submitted pull request.
        """
        pulumi.set(__self__, "pr_status", pr_status)
        pulumi.set(__self__, "pr_url", pr_url)
        pulumi.set(__self__, "pull_number", pull_number)

    @property
    @pulumi.getter(name="prStatus")
    def pr_status(self) -> str:
        """
        The status of the Pull Request submitted against the users repository.
        """
        return pulumi.get(self, "pr_status")

    @property
    @pulumi.getter(name="prURL")
    def pr_url(self) -> str:
        """
        The URL to the Pull Request submitted against the users repository.
        """
        return pulumi.get(self, "pr_url")

    @property
    @pulumi.getter(name="pullNumber")
    def pull_number(self) -> int:
        """
        The number associated with the submitted pull request.
        """
        return pulumi.get(self, "pull_number")


@pulumi.output_type
class StagePropertiesResponse(dict):
    """
    Properties of a Stage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitEnvironment":
            suggest = "git_environment"
        elif key == "stageName":
            suggest = "stage_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StagePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StagePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StagePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dependencies: Optional[Sequence[str]] = None,
                 git_environment: Optional[str] = None,
                 stage_name: Optional[str] = None):
        """
        Properties of a Stage.
        :param str stage_name: Stage Name
        """
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if git_environment is not None:
            pulumi.set(__self__, "git_environment", git_environment)
        if stage_name is not None:
            pulumi.set(__self__, "stage_name", stage_name)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter(name="gitEnvironment")
    def git_environment(self) -> Optional[str]:
        return pulumi.get(self, "git_environment")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> Optional[str]:
        """
        Stage Name
        """
        return pulumi.get(self, "stage_name")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class WorkflowPropertiesResponse(dict):
    """
    Workflow properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactGenerationProperties":
            suggest = "artifact_generation_properties"
        elif key == "azurePipelineProfile":
            suggest = "azure_pipeline_profile"
        elif key == "githubWorkflowProfile":
            suggest = "github_workflow_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_generation_properties: Optional['outputs.ArtifactGenerationPropertiesResponse'] = None,
                 azure_pipeline_profile: Optional['outputs.AzurePipelineProfileResponse'] = None,
                 github_workflow_profile: Optional['outputs.GitHubWorkflowProfileResponse'] = None):
        """
        Workflow properties
        :param 'ArtifactGenerationPropertiesResponse' artifact_generation_properties: Properties for generating artifacts like dockerfile and manifests.
        :param 'AzurePipelineProfileResponse' azure_pipeline_profile: Profile of an azure pipeline.
        :param 'GitHubWorkflowProfileResponse' github_workflow_profile: Profile of a github workflow.
        """
        if artifact_generation_properties is not None:
            pulumi.set(__self__, "artifact_generation_properties", artifact_generation_properties)
        if azure_pipeline_profile is not None:
            pulumi.set(__self__, "azure_pipeline_profile", azure_pipeline_profile)
        if github_workflow_profile is not None:
            pulumi.set(__self__, "github_workflow_profile", github_workflow_profile)

    @property
    @pulumi.getter(name="artifactGenerationProperties")
    def artifact_generation_properties(self) -> Optional['outputs.ArtifactGenerationPropertiesResponse']:
        """
        Properties for generating artifacts like dockerfile and manifests.
        """
        return pulumi.get(self, "artifact_generation_properties")

    @property
    @pulumi.getter(name="azurePipelineProfile")
    def azure_pipeline_profile(self) -> Optional['outputs.AzurePipelineProfileResponse']:
        """
        Profile of an azure pipeline.
        """
        return pulumi.get(self, "azure_pipeline_profile")

    @property
    @pulumi.getter(name="githubWorkflowProfile")
    def github_workflow_profile(self) -> Optional['outputs.GitHubWorkflowProfileResponse']:
        """
        Profile of a github workflow.
        """
        return pulumi.get(self, "github_workflow_profile")


@pulumi.output_type
class WorkflowRunResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastRunAt":
            suggest = "last_run_at"
        elif key == "workflowRunStatus":
            suggest = "workflow_run_status"
        elif key == "workflowRunURL":
            suggest = "workflow_run_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowRunResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowRunResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowRunResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_run_at: str,
                 succeeded: bool,
                 workflow_run_status: str,
                 workflow_run_url: str):
        """
        :param str last_run_at: The timestamp of the last workflow run.
        :param bool succeeded: Describes if the workflow run succeeded.
        :param str workflow_run_status: Describes the status of the workflow run
        :param str workflow_run_url: URL to the run of the workflow.
        """
        pulumi.set(__self__, "last_run_at", last_run_at)
        pulumi.set(__self__, "succeeded", succeeded)
        pulumi.set(__self__, "workflow_run_status", workflow_run_status)
        pulumi.set(__self__, "workflow_run_url", workflow_run_url)

    @property
    @pulumi.getter(name="lastRunAt")
    def last_run_at(self) -> str:
        """
        The timestamp of the last workflow run.
        """
        return pulumi.get(self, "last_run_at")

    @property
    @pulumi.getter
    def succeeded(self) -> bool:
        """
        Describes if the workflow run succeeded.
        """
        return pulumi.get(self, "succeeded")

    @property
    @pulumi.getter(name="workflowRunStatus")
    def workflow_run_status(self) -> str:
        """
        Describes the status of the workflow run
        """
        return pulumi.get(self, "workflow_run_status")

    @property
    @pulumi.getter(name="workflowRunURL")
    def workflow_run_url(self) -> str:
        """
        URL to the run of the workflow.
        """
        return pulumi.get(self, "workflow_run_url")


