# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetGroundStationResult',
    'AwaitableGetGroundStationResult',
    'get_ground_station',
    'get_ground_station_output',
]

@pulumi.output_type
class GetGroundStationResult:
    """
    Ground Station contains one or more antennas.
    """
    def __init__(__self__, altitude_meters=None, capabilities=None, city=None, global_communications_site=None, id=None, latitude_degrees=None, location=None, longitude_degrees=None, name=None, provider_name=None, release_mode=None, system_data=None, tags=None, type=None):
        if altitude_meters and not isinstance(altitude_meters, float):
            raise TypeError("Expected argument 'altitude_meters' to be a float")
        pulumi.set(__self__, "altitude_meters", altitude_meters)
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if city and not isinstance(city, str):
            raise TypeError("Expected argument 'city' to be a str")
        pulumi.set(__self__, "city", city)
        if global_communications_site and not isinstance(global_communications_site, dict):
            raise TypeError("Expected argument 'global_communications_site' to be a dict")
        pulumi.set(__self__, "global_communications_site", global_communications_site)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latitude_degrees and not isinstance(latitude_degrees, float):
            raise TypeError("Expected argument 'latitude_degrees' to be a float")
        pulumi.set(__self__, "latitude_degrees", latitude_degrees)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if longitude_degrees and not isinstance(longitude_degrees, float):
            raise TypeError("Expected argument 'longitude_degrees' to be a float")
        pulumi.set(__self__, "longitude_degrees", longitude_degrees)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_name and not isinstance(provider_name, str):
            raise TypeError("Expected argument 'provider_name' to be a str")
        pulumi.set(__self__, "provider_name", provider_name)
        if release_mode and not isinstance(release_mode, str):
            raise TypeError("Expected argument 'release_mode' to be a str")
        pulumi.set(__self__, "release_mode", release_mode)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="altitudeMeters")
    def altitude_meters(self) -> Optional[float]:
        """
        Altitude of the ground station.
        """
        return pulumi.get(self, "altitude_meters")

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[str]:
        """
        Ground station capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        City of ground station.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="globalCommunicationsSite")
    def global_communications_site(self) -> 'outputs.GroundStationsPropertiesResponseGlobalCommunicationsSite':
        """
        A reference to global communications site.
        """
        return pulumi.get(self, "global_communications_site")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latitudeDegrees")
    def latitude_degrees(self) -> Optional[float]:
        """
        Latitude of the ground station in decimal degrees.
        """
        return pulumi.get(self, "latitude_degrees")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="longitudeDegrees")
    def longitude_degrees(self) -> Optional[float]:
        """
        Longitude of the ground station in decimal degrees.
        """
        return pulumi.get(self, "longitude_degrees")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[str]:
        """
        Ground station provider name.
        """
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter(name="releaseMode")
    def release_mode(self) -> str:
        """
        Release Status of a ground station.
        """
        return pulumi.get(self, "release_mode")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetGroundStationResult(GetGroundStationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroundStationResult(
            altitude_meters=self.altitude_meters,
            capabilities=self.capabilities,
            city=self.city,
            global_communications_site=self.global_communications_site,
            id=self.id,
            latitude_degrees=self.latitude_degrees,
            location=self.location,
            longitude_degrees=self.longitude_degrees,
            name=self.name,
            provider_name=self.provider_name,
            release_mode=self.release_mode,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_ground_station(ground_station_name: Optional[str] = None,
                       resource_group_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroundStationResult:
    """
    Gets the specified ground station in a specified resource group.


    :param str ground_station_name: Ground Station name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['groundStationName'] = ground_station_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:orbital/v20240301preview:getGroundStation', __args__, opts=opts, typ=GetGroundStationResult).value

    return AwaitableGetGroundStationResult(
        altitude_meters=pulumi.get(__ret__, 'altitude_meters'),
        capabilities=pulumi.get(__ret__, 'capabilities'),
        city=pulumi.get(__ret__, 'city'),
        global_communications_site=pulumi.get(__ret__, 'global_communications_site'),
        id=pulumi.get(__ret__, 'id'),
        latitude_degrees=pulumi.get(__ret__, 'latitude_degrees'),
        location=pulumi.get(__ret__, 'location'),
        longitude_degrees=pulumi.get(__ret__, 'longitude_degrees'),
        name=pulumi.get(__ret__, 'name'),
        provider_name=pulumi.get(__ret__, 'provider_name'),
        release_mode=pulumi.get(__ret__, 'release_mode'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_ground_station)
def get_ground_station_output(ground_station_name: Optional[pulumi.Input[str]] = None,
                              resource_group_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroundStationResult]:
    """
    Gets the specified ground station in a specified resource group.


    :param str ground_station_name: Ground Station name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
