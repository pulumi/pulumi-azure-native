# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['L2ConnectionArgs', 'L2Connection']

@pulumi.input_type
class L2ConnectionArgs:
    def __init__(__self__, *,
                 edge_site: pulumi.Input['L2ConnectionsPropertiesEdgeSiteArgs'],
                 ground_station: pulumi.Input['L2ConnectionsPropertiesGroundStationArgs'],
                 name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 vlan_id: pulumi.Input[int],
                 l2_connection_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a L2Connection resource.
        :param pulumi.Input['L2ConnectionsPropertiesEdgeSiteArgs'] edge_site: A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        :param pulumi.Input['L2ConnectionsPropertiesGroundStationArgs'] ground_station: A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        :param pulumi.Input[str] name: The unique name of the partner router that cross-connects with the Orbital Edge Router at the ground station site.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[int] vlan_id: The VLAN ID for the L2 connection.
        :param pulumi.Input[str] l2_connection_name: L2 Connection name.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "edge_site", edge_site)
        pulumi.set(__self__, "ground_station", ground_station)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "vlan_id", vlan_id)
        if l2_connection_name is not None:
            pulumi.set(__self__, "l2_connection_name", l2_connection_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="edgeSite")
    def edge_site(self) -> pulumi.Input['L2ConnectionsPropertiesEdgeSiteArgs']:
        """
        A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        """
        return pulumi.get(self, "edge_site")

    @edge_site.setter
    def edge_site(self, value: pulumi.Input['L2ConnectionsPropertiesEdgeSiteArgs']):
        pulumi.set(self, "edge_site", value)

    @property
    @pulumi.getter(name="groundStation")
    def ground_station(self) -> pulumi.Input['L2ConnectionsPropertiesGroundStationArgs']:
        """
        A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        """
        return pulumi.get(self, "ground_station")

    @ground_station.setter
    def ground_station(self, value: pulumi.Input['L2ConnectionsPropertiesGroundStationArgs']):
        pulumi.set(self, "ground_station", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The unique name of the partner router that cross-connects with the Orbital Edge Router at the ground station site.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[int]:
        """
        The VLAN ID for the L2 connection.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="l2ConnectionName")
    def l2_connection_name(self) -> Optional[pulumi.Input[str]]:
        """
        L2 Connection name.
        """
        return pulumi.get(self, "l2_connection_name")

    @l2_connection_name.setter
    def l2_connection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2_connection_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class L2Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_site: Optional[pulumi.Input[pulumi.InputType['L2ConnectionsPropertiesEdgeSiteArgs']]] = None,
                 ground_station: Optional[pulumi.Input[pulumi.InputType['L2ConnectionsPropertiesGroundStationArgs']]] = None,
                 l2_connection_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['L2ConnectionsPropertiesEdgeSiteArgs']] edge_site: A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        :param pulumi.Input[pulumi.InputType['L2ConnectionsPropertiesGroundStationArgs']] ground_station: A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        :param pulumi.Input[str] l2_connection_name: L2 Connection name.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[str] name: The unique name of the partner router that cross-connects with the Orbital Edge Router at the ground station site.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[int] vlan_id: The VLAN ID for the L2 connection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: L2ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.

        :param str resource_name: The name of the resource.
        :param L2ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(L2ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_site: Optional[pulumi.Input[pulumi.InputType['L2ConnectionsPropertiesEdgeSiteArgs']]] = None,
                 ground_station: Optional[pulumi.Input[pulumi.InputType['L2ConnectionsPropertiesGroundStationArgs']]] = None,
                 l2_connection_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = L2ConnectionArgs.__new__(L2ConnectionArgs)

            if edge_site is None and not opts.urn:
                raise TypeError("Missing required property 'edge_site'")
            __props__.__dict__["edge_site"] = edge_site
            if ground_station is None and not opts.urn:
                raise TypeError("Missing required property 'ground_station'")
            __props__.__dict__["ground_station"] = ground_station
            __props__.__dict__["l2_connection_name"] = l2_connection_name
            __props__.__dict__["location"] = location
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            if vlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'vlan_id'")
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["circuit_id"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:orbital:L2Connection")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(L2Connection, __self__).__init__(
            'azure-native:orbital/v20240301preview:L2Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'L2Connection':
        """
        Get an existing L2Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = L2ConnectionArgs.__new__(L2ConnectionArgs)

        __props__.__dict__["circuit_id"] = None
        __props__.__dict__["edge_site"] = None
        __props__.__dict__["ground_station"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["vlan_id"] = None
        return L2Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> pulumi.Output[str]:
        """
        Globally-unique identifier for this connection that is to be used as a circuit ID.
        """
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter(name="edgeSite")
    def edge_site(self) -> pulumi.Output['outputs.L2ConnectionsPropertiesResponseEdgeSite']:
        """
        A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        """
        return pulumi.get(self, "edge_site")

    @property
    @pulumi.getter(name="groundStation")
    def ground_station(self) -> pulumi.Output['outputs.L2ConnectionsPropertiesResponseGroundStation']:
        """
        A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        """
        return pulumi.get(self, "ground_station")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[int]:
        """
        The VLAN ID for the L2 connection.
        """
        return pulumi.get(self, "vlan_id")

