# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AuthorizedGroundstationResponse',
    'AvailableContactsResponse',
    'AvailableContactsResponseSpacecraft',
    'ContactProfileLinkChannelResponse',
    'ContactProfileLinkResponse',
    'ContactProfileThirdPartyConfigurationResponse',
    'ContactProfilesPropertiesResponseNetworkConfiguration',
    'ContactsPropertiesResponseAntennaConfiguration',
    'ContactsPropertiesResponseContactProfile',
    'EdgeSitesPropertiesResponseGlobalCommunicationsSite',
    'EndPointResponse',
    'GeoCatalogPropertiesResponse',
    'GroundStationsPropertiesResponseGlobalCommunicationsSite',
    'L2ConnectionsPropertiesResponseEdgeSite',
    'L2ConnectionsPropertiesResponseGroundStation',
    'L2ConnectionsPropertiesResponseGroundStationPartnerRouter',
    'ManagedServiceIdentityResponse',
    'ResourceIdListResultResponseValue',
    'SpacecraftLinkResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class AuthorizedGroundstationResponse(dict):
    """
    Authorized groundstation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "groundStation":
            suggest = "ground_station"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthorizedGroundstationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthorizedGroundstationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthorizedGroundstationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration_date: _builtins.str,
                 ground_station: _builtins.str):
        """
        Authorized groundstation.
        :param _builtins.str expiration_date: Date of authorization expiration.
        :param _builtins.str ground_station: Groundstation name.
        """
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "ground_station", ground_station)

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> _builtins.str:
        """
        Date of authorization expiration.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter(name="groundStation")
    def ground_station(self) -> _builtins.str:
        """
        Groundstation name.
        """
        return pulumi.get(self, "ground_station")


@pulumi.output_type
class AvailableContactsResponse(dict):
    """
    Customer retrieves list of Available Contacts for a spacecraft resource. Later, one of the available contact can be selected to create a contact.
    """
    def __init__(__self__, *,
                 end_azimuth_degrees: _builtins.float,
                 end_elevation_degrees: _builtins.float,
                 ground_station_name: _builtins.str,
                 maximum_elevation_degrees: _builtins.float,
                 rx_end_time: _builtins.str,
                 rx_start_time: _builtins.str,
                 start_azimuth_degrees: _builtins.float,
                 start_elevation_degrees: _builtins.float,
                 tx_end_time: _builtins.str,
                 tx_start_time: _builtins.str,
                 spacecraft: Optional['outputs.AvailableContactsResponseSpacecraft'] = None):
        """
        Customer retrieves list of Available Contacts for a spacecraft resource. Later, one of the available contact can be selected to create a contact.
        :param _builtins.float end_azimuth_degrees: Azimuth of the antenna at the end of the contact in decimal degrees.
        :param _builtins.float end_elevation_degrees: Spacecraft elevation above the horizon at contact end.
        :param _builtins.str ground_station_name: Name of Azure Ground Station.
        :param _builtins.float maximum_elevation_degrees: Maximum elevation of the antenna during the contact in decimal degrees.
        :param _builtins.str rx_end_time: Time to lost receiving a signal (ISO 8601 UTC standard).
        :param _builtins.str rx_start_time: Earliest time to receive a signal (ISO 8601 UTC standard).
        :param _builtins.float start_azimuth_degrees: Azimuth of the antenna at the start of the contact in decimal degrees.
        :param _builtins.float start_elevation_degrees: Spacecraft elevation above the horizon at contact start.
        :param _builtins.str tx_end_time: Time at which antenna transmit will be disabled (ISO 8601 UTC standard).
        :param _builtins.str tx_start_time: Time at which antenna transmit will be enabled (ISO 8601 UTC standard).
        :param 'AvailableContactsResponseSpacecraft' spacecraft: The reference to the spacecraft resource.
        """
        pulumi.set(__self__, "end_azimuth_degrees", end_azimuth_degrees)
        pulumi.set(__self__, "end_elevation_degrees", end_elevation_degrees)
        pulumi.set(__self__, "ground_station_name", ground_station_name)
        pulumi.set(__self__, "maximum_elevation_degrees", maximum_elevation_degrees)
        pulumi.set(__self__, "rx_end_time", rx_end_time)
        pulumi.set(__self__, "rx_start_time", rx_start_time)
        pulumi.set(__self__, "start_azimuth_degrees", start_azimuth_degrees)
        pulumi.set(__self__, "start_elevation_degrees", start_elevation_degrees)
        pulumi.set(__self__, "tx_end_time", tx_end_time)
        pulumi.set(__self__, "tx_start_time", tx_start_time)
        if spacecraft is not None:
            pulumi.set(__self__, "spacecraft", spacecraft)

    @_builtins.property
    @pulumi.getter(name="endAzimuthDegrees")
    def end_azimuth_degrees(self) -> _builtins.float:
        """
        Azimuth of the antenna at the end of the contact in decimal degrees.
        """
        return pulumi.get(self, "end_azimuth_degrees")

    @_builtins.property
    @pulumi.getter(name="endElevationDegrees")
    def end_elevation_degrees(self) -> _builtins.float:
        """
        Spacecraft elevation above the horizon at contact end.
        """
        return pulumi.get(self, "end_elevation_degrees")

    @_builtins.property
    @pulumi.getter(name="groundStationName")
    def ground_station_name(self) -> _builtins.str:
        """
        Name of Azure Ground Station.
        """
        return pulumi.get(self, "ground_station_name")

    @_builtins.property
    @pulumi.getter(name="maximumElevationDegrees")
    def maximum_elevation_degrees(self) -> _builtins.float:
        """
        Maximum elevation of the antenna during the contact in decimal degrees.
        """
        return pulumi.get(self, "maximum_elevation_degrees")

    @_builtins.property
    @pulumi.getter(name="rxEndTime")
    def rx_end_time(self) -> _builtins.str:
        """
        Time to lost receiving a signal (ISO 8601 UTC standard).
        """
        return pulumi.get(self, "rx_end_time")

    @_builtins.property
    @pulumi.getter(name="rxStartTime")
    def rx_start_time(self) -> _builtins.str:
        """
        Earliest time to receive a signal (ISO 8601 UTC standard).
        """
        return pulumi.get(self, "rx_start_time")

    @_builtins.property
    @pulumi.getter(name="startAzimuthDegrees")
    def start_azimuth_degrees(self) -> _builtins.float:
        """
        Azimuth of the antenna at the start of the contact in decimal degrees.
        """
        return pulumi.get(self, "start_azimuth_degrees")

    @_builtins.property
    @pulumi.getter(name="startElevationDegrees")
    def start_elevation_degrees(self) -> _builtins.float:
        """
        Spacecraft elevation above the horizon at contact start.
        """
        return pulumi.get(self, "start_elevation_degrees")

    @_builtins.property
    @pulumi.getter(name="txEndTime")
    def tx_end_time(self) -> _builtins.str:
        """
        Time at which antenna transmit will be disabled (ISO 8601 UTC standard).
        """
        return pulumi.get(self, "tx_end_time")

    @_builtins.property
    @pulumi.getter(name="txStartTime")
    def tx_start_time(self) -> _builtins.str:
        """
        Time at which antenna transmit will be enabled (ISO 8601 UTC standard).
        """
        return pulumi.get(self, "tx_start_time")

    @_builtins.property
    @pulumi.getter
    def spacecraft(self) -> Optional['outputs.AvailableContactsResponseSpacecraft']:
        """
        The reference to the spacecraft resource.
        """
        return pulumi.get(self, "spacecraft")


@pulumi.output_type
class AvailableContactsResponseSpacecraft(dict):
    """
    The reference to the spacecraft resource.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        The reference to the spacecraft resource.
        :param _builtins.str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ContactProfileLinkChannelResponse(dict):
    """
    Contact Profile Link Channel.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthMHz":
            suggest = "bandwidth_m_hz"
        elif key == "centerFrequencyMHz":
            suggest = "center_frequency_m_hz"
        elif key == "endPoint":
            suggest = "end_point"
        elif key == "decodingConfiguration":
            suggest = "decoding_configuration"
        elif key == "demodulationConfiguration":
            suggest = "demodulation_configuration"
        elif key == "encodingConfiguration":
            suggest = "encoding_configuration"
        elif key == "modulationConfiguration":
            suggest = "modulation_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactProfileLinkChannelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactProfileLinkChannelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactProfileLinkChannelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_m_hz: _builtins.float,
                 center_frequency_m_hz: _builtins.float,
                 end_point: 'outputs.EndPointResponse',
                 name: _builtins.str,
                 decoding_configuration: Optional[_builtins.str] = None,
                 demodulation_configuration: Optional[_builtins.str] = None,
                 encoding_configuration: Optional[_builtins.str] = None,
                 modulation_configuration: Optional[_builtins.str] = None):
        """
        Contact Profile Link Channel.
        :param _builtins.float bandwidth_m_hz: Bandwidth in MHz.
        :param _builtins.float center_frequency_m_hz: Center Frequency in MHz.
        :param 'EndPointResponse' end_point: Customer end point to store and retrieve data during a contact with the spacecraft.
        :param _builtins.str name: Channel name.
        :param _builtins.str decoding_configuration: Currently unused.
        :param _builtins.str demodulation_configuration: Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        :param _builtins.str encoding_configuration: Currently unused.
        :param _builtins.str modulation_configuration: Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        """
        pulumi.set(__self__, "bandwidth_m_hz", bandwidth_m_hz)
        pulumi.set(__self__, "center_frequency_m_hz", center_frequency_m_hz)
        pulumi.set(__self__, "end_point", end_point)
        pulumi.set(__self__, "name", name)
        if decoding_configuration is not None:
            pulumi.set(__self__, "decoding_configuration", decoding_configuration)
        if demodulation_configuration is not None:
            pulumi.set(__self__, "demodulation_configuration", demodulation_configuration)
        if encoding_configuration is not None:
            pulumi.set(__self__, "encoding_configuration", encoding_configuration)
        if modulation_configuration is not None:
            pulumi.set(__self__, "modulation_configuration", modulation_configuration)

    @_builtins.property
    @pulumi.getter(name="bandwidthMHz")
    def bandwidth_m_hz(self) -> _builtins.float:
        """
        Bandwidth in MHz.
        """
        return pulumi.get(self, "bandwidth_m_hz")

    @_builtins.property
    @pulumi.getter(name="centerFrequencyMHz")
    def center_frequency_m_hz(self) -> _builtins.float:
        """
        Center Frequency in MHz.
        """
        return pulumi.get(self, "center_frequency_m_hz")

    @_builtins.property
    @pulumi.getter(name="endPoint")
    def end_point(self) -> 'outputs.EndPointResponse':
        """
        Customer end point to store and retrieve data during a contact with the spacecraft.
        """
        return pulumi.get(self, "end_point")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Channel name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="decodingConfiguration")
    def decoding_configuration(self) -> Optional[_builtins.str]:
        """
        Currently unused.
        """
        return pulumi.get(self, "decoding_configuration")

    @_builtins.property
    @pulumi.getter(name="demodulationConfiguration")
    def demodulation_configuration(self) -> Optional[_builtins.str]:
        """
        Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        """
        return pulumi.get(self, "demodulation_configuration")

    @_builtins.property
    @pulumi.getter(name="encodingConfiguration")
    def encoding_configuration(self) -> Optional[_builtins.str]:
        """
        Currently unused.
        """
        return pulumi.get(self, "encoding_configuration")

    @_builtins.property
    @pulumi.getter(name="modulationConfiguration")
    def modulation_configuration(self) -> Optional[_builtins.str]:
        """
        Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        """
        return pulumi.get(self, "modulation_configuration")


@pulumi.output_type
class ContactProfileLinkResponse(dict):
    """
    Contact Profile Link.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eirpdBW":
            suggest = "eirpd_bw"
        elif key == "gainOverTemperature":
            suggest = "gain_over_temperature"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactProfileLinkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactProfileLinkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactProfileLinkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channels: Sequence['outputs.ContactProfileLinkChannelResponse'],
                 direction: _builtins.str,
                 name: _builtins.str,
                 polarization: _builtins.str,
                 eirpd_bw: Optional[_builtins.float] = None,
                 gain_over_temperature: Optional[_builtins.float] = None):
        """
        Contact Profile Link.
        :param Sequence['ContactProfileLinkChannelResponse'] channels: Contact Profile Link Channel.
        :param _builtins.str direction: Direction (Uplink or Downlink).
        :param _builtins.str name: Link name.
        :param _builtins.str polarization: Polarization. e.g. (RHCP, LHCP).
        :param _builtins.float eirpd_bw: Effective Isotropic Radiated Power (EIRP) in dBW. It is the required EIRP by the customer. Not used yet.
        :param _builtins.float gain_over_temperature: Gain to noise temperature in db/K. It is the required G/T by the customer. Not used yet.
        """
        pulumi.set(__self__, "channels", channels)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polarization", polarization)
        if eirpd_bw is not None:
            pulumi.set(__self__, "eirpd_bw", eirpd_bw)
        if gain_over_temperature is not None:
            pulumi.set(__self__, "gain_over_temperature", gain_over_temperature)

    @_builtins.property
    @pulumi.getter
    def channels(self) -> Sequence['outputs.ContactProfileLinkChannelResponse']:
        """
        Contact Profile Link Channel.
        """
        return pulumi.get(self, "channels")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction (Uplink or Downlink).
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Link name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def polarization(self) -> _builtins.str:
        """
        Polarization. e.g. (RHCP, LHCP).
        """
        return pulumi.get(self, "polarization")

    @_builtins.property
    @pulumi.getter(name="eirpdBW")
    def eirpd_bw(self) -> Optional[_builtins.float]:
        """
        Effective Isotropic Radiated Power (EIRP) in dBW. It is the required EIRP by the customer. Not used yet.
        """
        return pulumi.get(self, "eirpd_bw")

    @_builtins.property
    @pulumi.getter(name="gainOverTemperature")
    def gain_over_temperature(self) -> Optional[_builtins.float]:
        """
        Gain to noise temperature in db/K. It is the required G/T by the customer. Not used yet.
        """
        return pulumi.get(self, "gain_over_temperature")


@pulumi.output_type
class ContactProfileThirdPartyConfigurationResponse(dict):
    """
    Contact Profile third-party partner configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "missionConfiguration":
            suggest = "mission_configuration"
        elif key == "providerName":
            suggest = "provider_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactProfileThirdPartyConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactProfileThirdPartyConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactProfileThirdPartyConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mission_configuration: _builtins.str,
                 provider_name: _builtins.str):
        """
        Contact Profile third-party partner configuration.
        :param _builtins.str mission_configuration: Name of string referencing the configuration describing contact set-up for a particular mission. Expected values are those which have been created in collaboration with the partner network.
        :param _builtins.str provider_name: Name of the third-party provider.
        """
        pulumi.set(__self__, "mission_configuration", mission_configuration)
        pulumi.set(__self__, "provider_name", provider_name)

    @_builtins.property
    @pulumi.getter(name="missionConfiguration")
    def mission_configuration(self) -> _builtins.str:
        """
        Name of string referencing the configuration describing contact set-up for a particular mission. Expected values are those which have been created in collaboration with the partner network.
        """
        return pulumi.get(self, "mission_configuration")

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> _builtins.str:
        """
        Name of the third-party provider.
        """
        return pulumi.get(self, "provider_name")


@pulumi.output_type
class ContactProfilesPropertiesResponseNetworkConfiguration(dict):
    """
    Network configuration of customer virtual network.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactProfilesPropertiesResponseNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactProfilesPropertiesResponseNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactProfilesPropertiesResponseNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: _builtins.str):
        """
        Network configuration of customer virtual network.
        :param _builtins.str subnet_id: ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ContactsPropertiesResponseAntennaConfiguration(dict):
    """
    The configuration associated with the allocated antenna.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationIp":
            suggest = "destination_ip"
        elif key == "sourceIps":
            suggest = "source_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactsPropertiesResponseAntennaConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactsPropertiesResponseAntennaConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactsPropertiesResponseAntennaConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ip: Optional[_builtins.str] = None,
                 source_ips: Optional[Sequence[_builtins.str]] = None):
        """
        The configuration associated with the allocated antenna.
        :param _builtins.str destination_ip: The destination IP a packet can be sent to. This would for example be the TCP endpoint you would send data to.
        :param Sequence[_builtins.str] source_ips: List of Source IP
        """
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if source_ips is not None:
            pulumi.set(__self__, "source_ips", source_ips)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        The destination IP a packet can be sent to. This would for example be the TCP endpoint you would send data to.
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of Source IP
        """
        return pulumi.get(self, "source_ips")


@pulumi.output_type
class ContactsPropertiesResponseContactProfile(dict):
    """
    The reference to the contact profile resource.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        The reference to the contact profile resource.
        :param _builtins.str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EdgeSitesPropertiesResponseGlobalCommunicationsSite(dict):
    """
    A reference to global communications site.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        A reference to global communications site.
        :param _builtins.str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EndPointResponse(dict):
    """
    Customer end point to store and retrieve data during a contact with the spacecraft.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPointName":
            suggest = "end_point_name"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndPointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndPointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndPointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_point_name: _builtins.str,
                 ip_address: _builtins.str,
                 port: _builtins.str,
                 protocol: _builtins.str):
        """
        Customer end point to store and retrieve data during a contact with the spacecraft.
        :param _builtins.str end_point_name: Name of an end point.
        :param _builtins.str ip_address: IP Address (IPv4).
        :param _builtins.str port: TCP port to listen on to receive data.
        :param _builtins.str protocol: Protocol either UDP or TCP.
        """
        pulumi.set(__self__, "end_point_name", end_point_name)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> _builtins.str:
        """
        Name of an end point.
        """
        return pulumi.get(self, "end_point_name")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP Address (IPv4).
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        TCP port to listen on to receive data.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol either UDP or TCP.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GeoCatalogPropertiesResponse(dict):
    """
    The details of the Microsoft Planetary Computer Pro GeoCatalog.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogUri":
            suggest = "catalog_uri"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "autoGeneratedDomainNameLabelScope":
            suggest = "auto_generated_domain_name_label_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GeoCatalogPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GeoCatalogPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GeoCatalogPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_uri: _builtins.str,
                 provisioning_state: _builtins.str,
                 auto_generated_domain_name_label_scope: Optional[_builtins.str] = None,
                 tier: Optional[_builtins.str] = None):
        """
        The details of the Microsoft Planetary Computer Pro GeoCatalog.
        :param _builtins.str catalog_uri: The URI of the catalog management UI.
        :param _builtins.str provisioning_state: The status of the last operation.
        :param _builtins.str auto_generated_domain_name_label_scope: The scope of the auto-generated domain name label. If not provided, defaults to TenantReuse.
        :param _builtins.str tier: Tier of the catalog. This cannot be changed after the catalog is created. If not provided, defaults to Basic.
        """
        pulumi.set(__self__, "catalog_uri", catalog_uri)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if auto_generated_domain_name_label_scope is None:
            auto_generated_domain_name_label_scope = 'TenantReuse'
        if auto_generated_domain_name_label_scope is not None:
            pulumi.set(__self__, "auto_generated_domain_name_label_scope", auto_generated_domain_name_label_scope)
        if tier is None:
            tier = 'Basic'
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @_builtins.property
    @pulumi.getter(name="catalogUri")
    def catalog_uri(self) -> _builtins.str:
        """
        The URI of the catalog management UI.
        """
        return pulumi.get(self, "catalog_uri")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The status of the last operation.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="autoGeneratedDomainNameLabelScope")
    def auto_generated_domain_name_label_scope(self) -> Optional[_builtins.str]:
        """
        The scope of the auto-generated domain name label. If not provided, defaults to TenantReuse.
        """
        return pulumi.get(self, "auto_generated_domain_name_label_scope")

    @_builtins.property
    @pulumi.getter
    def tier(self) -> Optional[_builtins.str]:
        """
        Tier of the catalog. This cannot be changed after the catalog is created. If not provided, defaults to Basic.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class GroundStationsPropertiesResponseGlobalCommunicationsSite(dict):
    """
    A reference to global communications site.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        A reference to global communications site.
        :param _builtins.str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class L2ConnectionsPropertiesResponseEdgeSite(dict):
    """
    A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        :param _builtins.str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class L2ConnectionsPropertiesResponseGroundStation(dict):
    """
    A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
    """
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        :param _builtins.str id: Resource ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class L2ConnectionsPropertiesResponseGroundStationPartnerRouter(dict):
    """
    The name of the partner router to establish a connection to within the ground station.
    """
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        The name of the partner router to establish a connection to within the ground station.
        :param _builtins.str name: The unique name of the partner router that cross-connects with the Orbital Edge Router at the ground station site.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The unique name of the partner router that cross-connects with the Orbital Edge Router at the ground station site.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param _builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ResourceIdListResultResponseValue(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The Azure Resource ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The Azure Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SpacecraftLinkResponse(dict):
    """
    List of authorized spacecraft links per ground station and the expiration date of the authorization.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthMHz":
            suggest = "bandwidth_m_hz"
        elif key == "centerFrequencyMHz":
            suggest = "center_frequency_m_hz"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpacecraftLinkResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpacecraftLinkResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpacecraftLinkResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizations: Sequence['outputs.AuthorizedGroundstationResponse'],
                 bandwidth_m_hz: _builtins.float,
                 center_frequency_m_hz: _builtins.float,
                 direction: _builtins.str,
                 name: _builtins.str,
                 polarization: _builtins.str):
        """
        List of authorized spacecraft links per ground station and the expiration date of the authorization.
        :param Sequence['AuthorizedGroundstationResponse'] authorizations: Authorized Ground Stations
        :param _builtins.float bandwidth_m_hz: Bandwidth in MHz.
        :param _builtins.float center_frequency_m_hz: Center Frequency in MHz.
        :param _builtins.str direction: Direction (Uplink or Downlink).
        :param _builtins.str name: Link name.
        :param _builtins.str polarization: Polarization. e.g. (RHCP, LHCP).
        """
        pulumi.set(__self__, "authorizations", authorizations)
        pulumi.set(__self__, "bandwidth_m_hz", bandwidth_m_hz)
        pulumi.set(__self__, "center_frequency_m_hz", center_frequency_m_hz)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polarization", polarization)

    @_builtins.property
    @pulumi.getter
    def authorizations(self) -> Sequence['outputs.AuthorizedGroundstationResponse']:
        """
        Authorized Ground Stations
        """
        return pulumi.get(self, "authorizations")

    @_builtins.property
    @pulumi.getter(name="bandwidthMHz")
    def bandwidth_m_hz(self) -> _builtins.float:
        """
        Bandwidth in MHz.
        """
        return pulumi.get(self, "bandwidth_m_hz")

    @_builtins.property
    @pulumi.getter(name="centerFrequencyMHz")
    def center_frequency_m_hz(self) -> _builtins.float:
        """
        Center Frequency in MHz.
        """
        return pulumi.get(self, "center_frequency_m_hz")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction (Uplink or Downlink).
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Link name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def polarization(self) -> _builtins.str:
        """
        Polarization. e.g. (RHCP, LHCP).
        """
        return pulumi.get(self, "polarization")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        User assigned identity properties
        :param _builtins.str client_id: The client ID of the assigned identity.
        :param _builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


