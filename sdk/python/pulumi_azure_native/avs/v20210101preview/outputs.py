# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'DiskPoolVolumeResponse',
    'NetAppVolumeResponse',
]

@pulumi.output_type
class DiskPoolVolumeResponse(dict):
    """
    An iSCSI volume from Microsoft.StoragePool provider
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lunName":
            suggest = "lun_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskPoolVolumeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskPoolVolumeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskPoolVolumeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoints: Optional[Sequence[str]] = None,
                 lun_name: Optional[str] = None):
        """
        An iSCSI volume from Microsoft.StoragePool provider
        :param Sequence[str] endpoints: iSCSI provider target IP address list
        :param str lun_name: Name of the LUN to be used
        """
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if lun_name is not None:
            pulumi.set(__self__, "lun_name", lun_name)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence[str]]:
        """
        iSCSI provider target IP address list
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="lunName")
    def lun_name(self) -> Optional[str]:
        """
        Name of the LUN to be used
        """
        return pulumi.get(self, "lun_name")


@pulumi.output_type
class NetAppVolumeResponse(dict):
    """
    An Azure NetApp Files volume from Microsoft.NetApp provider
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nfsFilePath":
            suggest = "nfs_file_path"
        elif key == "nfsProviderIp":
            suggest = "nfs_provider_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetAppVolumeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetAppVolumeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetAppVolumeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nfs_file_path: Optional[str] = None,
                 nfs_provider_ip: Optional[str] = None):
        """
        An Azure NetApp Files volume from Microsoft.NetApp provider
        :param str nfs_file_path: File path through which the NFS volume is exposed by the provider
        :param str nfs_provider_ip: IP address of the NFS provider
        """
        if nfs_file_path is not None:
            pulumi.set(__self__, "nfs_file_path", nfs_file_path)
        if nfs_provider_ip is not None:
            pulumi.set(__self__, "nfs_provider_ip", nfs_provider_ip)

    @property
    @pulumi.getter(name="nfsFilePath")
    def nfs_file_path(self) -> Optional[str]:
        """
        File path through which the NFS volume is exposed by the provider
        """
        return pulumi.get(self, "nfs_file_path")

    @property
    @pulumi.getter(name="nfsProviderIp")
    def nfs_provider_ip(self) -> Optional[str]:
        """
        IP address of the NFS provider
        """
        return pulumi.get(self, "nfs_provider_ip")


