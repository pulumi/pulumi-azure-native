# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'VmHostPlacementPolicyPropertiesArgs',
    'VmVmPlacementPolicyPropertiesArgs',
]

@pulumi.input_type
class VmHostPlacementPolicyPropertiesArgs:
    def __init__(__self__, *,
                 affinity_type: pulumi.Input[Union[str, 'AffinityType']],
                 host_members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str],
                 vm_members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 display_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[Union[str, 'PlacementPolicyState']]] = None):
        """
        VM-Host placement policy properties
        :param pulumi.Input[Union[str, 'AffinityType']] affinity_type: placement policy affinity type
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_members: Host members list
        :param pulumi.Input[str] type: placement policy type
               Expected value is 'VmHost'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_members: Virtual machine members list
        :param pulumi.Input[str] display_name: Display name of the placement policy
        :param pulumi.Input[Union[str, 'PlacementPolicyState']] state: Whether the placement policy is enabled or disabled
        """
        pulumi.set(__self__, "affinity_type", affinity_type)
        pulumi.set(__self__, "host_members", host_members)
        pulumi.set(__self__, "type", 'VmHost')
        pulumi.set(__self__, "vm_members", vm_members)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="affinityType")
    def affinity_type(self) -> pulumi.Input[Union[str, 'AffinityType']]:
        """
        placement policy affinity type
        """
        return pulumi.get(self, "affinity_type")

    @affinity_type.setter
    def affinity_type(self, value: pulumi.Input[Union[str, 'AffinityType']]):
        pulumi.set(self, "affinity_type", value)

    @property
    @pulumi.getter(name="hostMembers")
    def host_members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Host members list
        """
        return pulumi.get(self, "host_members")

    @host_members.setter
    def host_members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "host_members", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        placement policy type
        Expected value is 'VmHost'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vmMembers")
    def vm_members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Virtual machine members list
        """
        return pulumi.get(self, "vm_members")

    @vm_members.setter
    def vm_members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "vm_members", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the placement policy
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'PlacementPolicyState']]]:
        """
        Whether the placement policy is enabled or disabled
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'PlacementPolicyState']]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VmVmPlacementPolicyPropertiesArgs:
    def __init__(__self__, *,
                 affinity_type: pulumi.Input[Union[str, 'AffinityType']],
                 type: pulumi.Input[str],
                 vm_members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 display_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[Union[str, 'PlacementPolicyState']]] = None):
        """
        VM-VM placement policy properties
        :param pulumi.Input[Union[str, 'AffinityType']] affinity_type: placement policy affinity type
        :param pulumi.Input[str] type: placement policy type
               Expected value is 'VmVm'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vm_members: Virtual machine members list
        :param pulumi.Input[str] display_name: Display name of the placement policy
        :param pulumi.Input[Union[str, 'PlacementPolicyState']] state: Whether the placement policy is enabled or disabled
        """
        pulumi.set(__self__, "affinity_type", affinity_type)
        pulumi.set(__self__, "type", 'VmVm')
        pulumi.set(__self__, "vm_members", vm_members)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="affinityType")
    def affinity_type(self) -> pulumi.Input[Union[str, 'AffinityType']]:
        """
        placement policy affinity type
        """
        return pulumi.get(self, "affinity_type")

    @affinity_type.setter
    def affinity_type(self, value: pulumi.Input[Union[str, 'AffinityType']]):
        pulumi.set(self, "affinity_type", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        placement policy type
        Expected value is 'VmVm'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vmMembers")
    def vm_members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Virtual machine members list
        """
        return pulumi.get(self, "vm_members")

    @vm_members.setter
    def vm_members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "vm_members", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the placement policy
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'PlacementPolicyState']]]:
        """
        Whether the placement policy is enabled or disabled
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'PlacementPolicyState']]]):
        pulumi.set(self, "state", value)


