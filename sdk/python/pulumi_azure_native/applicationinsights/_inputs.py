# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationInsightsComponentAnalyticsItemPropertiesArgs',
    'ApplicationInsightsComponentAnalyticsItemPropertiesArgsDict',
    'ApplicationInsightsComponentDataVolumeCapArgs',
    'ApplicationInsightsComponentDataVolumeCapArgsDict',
    'ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs',
    'ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgsDict',
    'HeaderFieldArgs',
    'HeaderFieldArgsDict',
    'MyWorkbookManagedIdentityArgs',
    'MyWorkbookManagedIdentityArgsDict',
    'WebTestGeolocationArgs',
    'WebTestGeolocationArgsDict',
    'WebTestPropertiesConfigurationArgs',
    'WebTestPropertiesConfigurationArgsDict',
    'WebTestPropertiesContentValidationArgs',
    'WebTestPropertiesContentValidationArgsDict',
    'WebTestPropertiesRequestArgs',
    'WebTestPropertiesRequestArgsDict',
    'WebTestPropertiesValidationRulesArgs',
    'WebTestPropertiesValidationRulesArgsDict',
    'WorkbookResourceIdentityArgs',
    'WorkbookResourceIdentityArgsDict',
    'WorkbookTemplateGalleryArgs',
    'WorkbookTemplateGalleryArgsDict',
    'WorkbookTemplateLocalizedGalleryArgs',
    'WorkbookTemplateLocalizedGalleryArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationInsightsComponentAnalyticsItemPropertiesArgsDict(TypedDict):
        """
        A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
        """
        function_alias: NotRequired[pulumi.Input[builtins.str]]
        """
        A function alias, used when the type of the item is Function
        """
elif False:
    ApplicationInsightsComponentAnalyticsItemPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInsightsComponentAnalyticsItemPropertiesArgs:
    def __init__(__self__, *,
                 function_alias: Optional[pulumi.Input[builtins.str]] = None):
        """
        A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
        :param pulumi.Input[builtins.str] function_alias: A function alias, used when the type of the item is Function
        """
        if function_alias is not None:
            pulumi.set(__self__, "function_alias", function_alias)

    @property
    @pulumi.getter(name="functionAlias")
    def function_alias(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A function alias, used when the type of the item is Function
        """
        return pulumi.get(self, "function_alias")

    @function_alias.setter
    def function_alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "function_alias", value)


if not MYPY:
    class ApplicationInsightsComponentDataVolumeCapArgsDict(TypedDict):
        """
        An Application Insights component daily data volume cap
        """
        cap: NotRequired[pulumi.Input[builtins.float]]
        """
        Daily data volume cap in GB.
        """
        stop_send_notification_when_hit_cap: NotRequired[pulumi.Input[builtins.bool]]
        """
        Do not send a notification email when the daily data volume cap is met.
        """
        stop_send_notification_when_hit_threshold: NotRequired[pulumi.Input[builtins.bool]]
        """
        Reserved, not used for now.
        """
        warning_threshold: NotRequired[pulumi.Input[builtins.int]]
        """
        Reserved, not used for now.
        """
elif False:
    ApplicationInsightsComponentDataVolumeCapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInsightsComponentDataVolumeCapArgs:
    def __init__(__self__, *,
                 cap: Optional[pulumi.Input[builtins.float]] = None,
                 stop_send_notification_when_hit_cap: Optional[pulumi.Input[builtins.bool]] = None,
                 stop_send_notification_when_hit_threshold: Optional[pulumi.Input[builtins.bool]] = None,
                 warning_threshold: Optional[pulumi.Input[builtins.int]] = None):
        """
        An Application Insights component daily data volume cap
        :param pulumi.Input[builtins.float] cap: Daily data volume cap in GB.
        :param pulumi.Input[builtins.bool] stop_send_notification_when_hit_cap: Do not send a notification email when the daily data volume cap is met.
        :param pulumi.Input[builtins.bool] stop_send_notification_when_hit_threshold: Reserved, not used for now.
        :param pulumi.Input[builtins.int] warning_threshold: Reserved, not used for now.
        """
        if cap is not None:
            pulumi.set(__self__, "cap", cap)
        if stop_send_notification_when_hit_cap is not None:
            pulumi.set(__self__, "stop_send_notification_when_hit_cap", stop_send_notification_when_hit_cap)
        if stop_send_notification_when_hit_threshold is not None:
            pulumi.set(__self__, "stop_send_notification_when_hit_threshold", stop_send_notification_when_hit_threshold)
        if warning_threshold is not None:
            pulumi.set(__self__, "warning_threshold", warning_threshold)

    @property
    @pulumi.getter
    def cap(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Daily data volume cap in GB.
        """
        return pulumi.get(self, "cap")

    @cap.setter
    def cap(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "cap", value)

    @property
    @pulumi.getter(name="stopSendNotificationWhenHitCap")
    def stop_send_notification_when_hit_cap(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Do not send a notification email when the daily data volume cap is met.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_cap")

    @stop_send_notification_when_hit_cap.setter
    def stop_send_notification_when_hit_cap(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stop_send_notification_when_hit_cap", value)

    @property
    @pulumi.getter(name="stopSendNotificationWhenHitThreshold")
    def stop_send_notification_when_hit_threshold(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_threshold")

    @stop_send_notification_when_hit_threshold.setter
    def stop_send_notification_when_hit_threshold(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stop_send_notification_when_hit_threshold", value)

    @property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "warning_threshold")

    @warning_threshold.setter
    def warning_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "warning_threshold", value)


if not MYPY:
    class ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgsDict(TypedDict):
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        The rule description
        """
        display_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The rule name as it is displayed in UI
        """
        help_url: NotRequired[pulumi.Input[builtins.str]]
        """
        URL which displays additional info about the proactive detection rule
        """
        is_enabled_by_default: NotRequired[pulumi.Input[builtins.bool]]
        """
        A flag indicating whether the rule is enabled by default
        """
        is_hidden: NotRequired[pulumi.Input[builtins.bool]]
        """
        A flag indicating whether the rule is hidden (from the UI)
        """
        is_in_preview: NotRequired[pulumi.Input[builtins.bool]]
        """
        A flag indicating whether the rule is in preview
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        The rule name
        """
        supports_email_notifications: NotRequired[pulumi.Input[builtins.bool]]
        """
        A flag indicating whether email notifications are supported for detections for this rule
        """
elif False:
    ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesRuleDefinitionsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 help_url: Optional[pulumi.Input[builtins.str]] = None,
                 is_enabled_by_default: Optional[pulumi.Input[builtins.bool]] = None,
                 is_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 is_in_preview: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 supports_email_notifications: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        :param pulumi.Input[builtins.str] description: The rule description
        :param pulumi.Input[builtins.str] display_name: The rule name as it is displayed in UI
        :param pulumi.Input[builtins.str] help_url: URL which displays additional info about the proactive detection rule
        :param pulumi.Input[builtins.bool] is_enabled_by_default: A flag indicating whether the rule is enabled by default
        :param pulumi.Input[builtins.bool] is_hidden: A flag indicating whether the rule is hidden (from the UI)
        :param pulumi.Input[builtins.bool] is_in_preview: A flag indicating whether the rule is in preview
        :param pulumi.Input[builtins.str] name: The rule name
        :param pulumi.Input[builtins.bool] supports_email_notifications: A flag indicating whether email notifications are supported for detections for this rule
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if is_enabled_by_default is not None:
            pulumi.set(__self__, "is_enabled_by_default", is_enabled_by_default)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if is_in_preview is not None:
            pulumi.set(__self__, "is_in_preview", is_in_preview)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if supports_email_notifications is not None:
            pulumi.set(__self__, "supports_email_notifications", supports_email_notifications)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The rule name as it is displayed in UI
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        URL which displays additional info about the proactive detection rule
        """
        return pulumi.get(self, "help_url")

    @help_url.setter
    def help_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "help_url", value)

    @property
    @pulumi.getter(name="isEnabledByDefault")
    def is_enabled_by_default(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A flag indicating whether the rule is enabled by default
        """
        return pulumi.get(self, "is_enabled_by_default")

    @is_enabled_by_default.setter
    def is_enabled_by_default(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_enabled_by_default", value)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A flag indicating whether the rule is hidden (from the UI)
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter(name="isInPreview")
    def is_in_preview(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A flag indicating whether the rule is in preview
        """
        return pulumi.get(self, "is_in_preview")

    @is_in_preview.setter
    def is_in_preview(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_in_preview", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="supportsEmailNotifications")
    def supports_email_notifications(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A flag indicating whether email notifications are supported for detections for this rule
        """
        return pulumi.get(self, "supports_email_notifications")

    @supports_email_notifications.setter
    def supports_email_notifications(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "supports_email_notifications", value)


if not MYPY:
    class HeaderFieldArgsDict(TypedDict):
        """
        A header to add to the WebTest.
        """
        header_field_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the header.
        """
        header_field_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The value of the header.
        """
elif False:
    HeaderFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HeaderFieldArgs:
    def __init__(__self__, *,
                 header_field_name: Optional[pulumi.Input[builtins.str]] = None,
                 header_field_value: Optional[pulumi.Input[builtins.str]] = None):
        """
        A header to add to the WebTest.
        :param pulumi.Input[builtins.str] header_field_name: The name of the header.
        :param pulumi.Input[builtins.str] header_field_value: The value of the header.
        """
        if header_field_name is not None:
            pulumi.set(__self__, "header_field_name", header_field_name)
        if header_field_value is not None:
            pulumi.set(__self__, "header_field_value", header_field_value)

    @property
    @pulumi.getter(name="headerFieldName")
    def header_field_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the header.
        """
        return pulumi.get(self, "header_field_name")

    @header_field_name.setter
    def header_field_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "header_field_name", value)

    @property
    @pulumi.getter(name="headerFieldValue")
    def header_field_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The value of the header.
        """
        return pulumi.get(self, "header_field_value")

    @header_field_value.setter
    def header_field_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "header_field_value", value)


if not MYPY:
    class MyWorkbookManagedIdentityArgsDict(TypedDict):
        """
        Customer Managed Identity
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        The identity type.
        """
elif False:
    MyWorkbookManagedIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MyWorkbookManagedIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Customer Managed Identity
        :param pulumi.Input[builtins.str] type: The identity type.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WebTestGeolocationArgsDict(TypedDict):
        """
        Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
        """
        location: NotRequired[pulumi.Input[builtins.str]]
        """
        Location ID for the WebTest to run from.
        """
elif False:
    WebTestGeolocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebTestGeolocationArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[builtins.str]] = None):
        """
        Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
        :param pulumi.Input[builtins.str] location: Location ID for the WebTest to run from.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Location ID for the WebTest to run from.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)


if not MYPY:
    class WebTestPropertiesConfigurationArgsDict(TypedDict):
        """
        An XML configuration specification for a WebTest.
        """
        web_test: NotRequired[pulumi.Input[builtins.str]]
        """
        The XML specification of a WebTest to run against an application.
        """
elif False:
    WebTestPropertiesConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebTestPropertiesConfigurationArgs:
    def __init__(__self__, *,
                 web_test: Optional[pulumi.Input[builtins.str]] = None):
        """
        An XML configuration specification for a WebTest.
        :param pulumi.Input[builtins.str] web_test: The XML specification of a WebTest to run against an application.
        """
        if web_test is not None:
            pulumi.set(__self__, "web_test", web_test)

    @property
    @pulumi.getter(name="webTest")
    def web_test(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The XML specification of a WebTest to run against an application.
        """
        return pulumi.get(self, "web_test")

    @web_test.setter
    def web_test(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "web_test", value)


if not MYPY:
    class WebTestPropertiesContentValidationArgsDict(TypedDict):
        """
        The collection of content validation properties
        """
        content_match: NotRequired[pulumi.Input[builtins.str]]
        """
        Content to look for in the return of the WebTest.  Must not be null or empty.
        """
        ignore_case: NotRequired[pulumi.Input[builtins.bool]]
        """
        When set, this value makes the ContentMatch validation case insensitive.
        """
        pass_if_text_found: NotRequired[pulumi.Input[builtins.bool]]
        """
        When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
        """
elif False:
    WebTestPropertiesContentValidationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebTestPropertiesContentValidationArgs:
    def __init__(__self__, *,
                 content_match: Optional[pulumi.Input[builtins.str]] = None,
                 ignore_case: Optional[pulumi.Input[builtins.bool]] = None,
                 pass_if_text_found: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The collection of content validation properties
        :param pulumi.Input[builtins.str] content_match: Content to look for in the return of the WebTest.  Must not be null or empty.
        :param pulumi.Input[builtins.bool] ignore_case: When set, this value makes the ContentMatch validation case insensitive.
        :param pulumi.Input[builtins.bool] pass_if_text_found: When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
        """
        if content_match is not None:
            pulumi.set(__self__, "content_match", content_match)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if pass_if_text_found is not None:
            pulumi.set(__self__, "pass_if_text_found", pass_if_text_found)

    @property
    @pulumi.getter(name="contentMatch")
    def content_match(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Content to look for in the return of the WebTest.  Must not be null or empty.
        """
        return pulumi.get(self, "content_match")

    @content_match.setter
    def content_match(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_match", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When set, this value makes the ContentMatch validation case insensitive.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="passIfTextFound")
    def pass_if_text_found(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
        """
        return pulumi.get(self, "pass_if_text_found")

    @pass_if_text_found.setter
    def pass_if_text_found(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "pass_if_text_found", value)


if not MYPY:
    class WebTestPropertiesRequestArgsDict(TypedDict):
        """
        The collection of request properties
        """
        follow_redirects: NotRequired[pulumi.Input[builtins.bool]]
        """
        Follow redirects for this web test.
        """
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['HeaderFieldArgsDict']]]]
        """
        List of headers and their values to add to the WebTest call.
        """
        http_verb: NotRequired[pulumi.Input[builtins.str]]
        """
        Http verb to use for this web test.
        """
        parse_dependent_requests: NotRequired[pulumi.Input[builtins.bool]]
        """
        Parse Dependent request for this WebTest.
        """
        request_body: NotRequired[pulumi.Input[builtins.str]]
        """
        Base64 encoded string body to send with this web test.
        """
        request_url: NotRequired[pulumi.Input[builtins.str]]
        """
        Url location to test.
        """
elif False:
    WebTestPropertiesRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebTestPropertiesRequestArgs:
    def __init__(__self__, *,
                 follow_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['HeaderFieldArgs']]]] = None,
                 http_verb: Optional[pulumi.Input[builtins.str]] = None,
                 parse_dependent_requests: Optional[pulumi.Input[builtins.bool]] = None,
                 request_body: Optional[pulumi.Input[builtins.str]] = None,
                 request_url: Optional[pulumi.Input[builtins.str]] = None):
        """
        The collection of request properties
        :param pulumi.Input[builtins.bool] follow_redirects: Follow redirects for this web test.
        :param pulumi.Input[Sequence[pulumi.Input['HeaderFieldArgs']]] headers: List of headers and their values to add to the WebTest call.
        :param pulumi.Input[builtins.str] http_verb: Http verb to use for this web test.
        :param pulumi.Input[builtins.bool] parse_dependent_requests: Parse Dependent request for this WebTest.
        :param pulumi.Input[builtins.str] request_body: Base64 encoded string body to send with this web test.
        :param pulumi.Input[builtins.str] request_url: Url location to test.
        """
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_verb is not None:
            pulumi.set(__self__, "http_verb", http_verb)
        if parse_dependent_requests is not None:
            pulumi.set(__self__, "parse_dependent_requests", parse_dependent_requests)
        if request_body is not None:
            pulumi.set(__self__, "request_body", request_body)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Follow redirects for this web test.
        """
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "follow_redirects", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HeaderFieldArgs']]]]:
        """
        List of headers and their values to add to the WebTest call.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HeaderFieldArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="httpVerb")
    def http_verb(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Http verb to use for this web test.
        """
        return pulumi.get(self, "http_verb")

    @http_verb.setter
    def http_verb(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_verb", value)

    @property
    @pulumi.getter(name="parseDependentRequests")
    def parse_dependent_requests(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Parse Dependent request for this WebTest.
        """
        return pulumi.get(self, "parse_dependent_requests")

    @parse_dependent_requests.setter
    def parse_dependent_requests(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "parse_dependent_requests", value)

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Base64 encoded string body to send with this web test.
        """
        return pulumi.get(self, "request_body")

    @request_body.setter
    def request_body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "request_body", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Url location to test.
        """
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "request_url", value)


if not MYPY:
    class WebTestPropertiesValidationRulesArgsDict(TypedDict):
        """
        The collection of validation rule properties
        """
        content_validation: NotRequired[pulumi.Input['WebTestPropertiesContentValidationArgsDict']]
        """
        The collection of content validation properties
        """
        expected_http_status_code: NotRequired[pulumi.Input[builtins.int]]
        """
        Validate that the WebTest returns the http status code provided.
        """
        ignore_http_status_code: NotRequired[pulumi.Input[builtins.bool]]
        """
        When set, validation will ignore the status code.
        """
        s_sl_cert_remaining_lifetime_check: NotRequired[pulumi.Input[builtins.int]]
        """
        A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
        """
        s_sl_check: NotRequired[pulumi.Input[builtins.bool]]
        """
        Checks to see if the SSL cert is still valid.
        """
elif False:
    WebTestPropertiesValidationRulesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebTestPropertiesValidationRulesArgs:
    def __init__(__self__, *,
                 content_validation: Optional[pulumi.Input['WebTestPropertiesContentValidationArgs']] = None,
                 expected_http_status_code: Optional[pulumi.Input[builtins.int]] = None,
                 ignore_http_status_code: Optional[pulumi.Input[builtins.bool]] = None,
                 s_sl_cert_remaining_lifetime_check: Optional[pulumi.Input[builtins.int]] = None,
                 s_sl_check: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The collection of validation rule properties
        :param pulumi.Input['WebTestPropertiesContentValidationArgs'] content_validation: The collection of content validation properties
        :param pulumi.Input[builtins.int] expected_http_status_code: Validate that the WebTest returns the http status code provided.
        :param pulumi.Input[builtins.bool] ignore_http_status_code: When set, validation will ignore the status code.
        :param pulumi.Input[builtins.int] s_sl_cert_remaining_lifetime_check: A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
        :param pulumi.Input[builtins.bool] s_sl_check: Checks to see if the SSL cert is still valid.
        """
        if content_validation is not None:
            pulumi.set(__self__, "content_validation", content_validation)
        if expected_http_status_code is not None:
            pulumi.set(__self__, "expected_http_status_code", expected_http_status_code)
        if ignore_http_status_code is not None:
            pulumi.set(__self__, "ignore_http_status_code", ignore_http_status_code)
        if s_sl_cert_remaining_lifetime_check is not None:
            pulumi.set(__self__, "s_sl_cert_remaining_lifetime_check", s_sl_cert_remaining_lifetime_check)
        if s_sl_check is not None:
            pulumi.set(__self__, "s_sl_check", s_sl_check)

    @property
    @pulumi.getter(name="contentValidation")
    def content_validation(self) -> Optional[pulumi.Input['WebTestPropertiesContentValidationArgs']]:
        """
        The collection of content validation properties
        """
        return pulumi.get(self, "content_validation")

    @content_validation.setter
    def content_validation(self, value: Optional[pulumi.Input['WebTestPropertiesContentValidationArgs']]):
        pulumi.set(self, "content_validation", value)

    @property
    @pulumi.getter(name="expectedHttpStatusCode")
    def expected_http_status_code(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Validate that the WebTest returns the http status code provided.
        """
        return pulumi.get(self, "expected_http_status_code")

    @expected_http_status_code.setter
    def expected_http_status_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "expected_http_status_code", value)

    @property
    @pulumi.getter(name="ignoreHttpStatusCode")
    def ignore_http_status_code(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When set, validation will ignore the status code.
        """
        return pulumi.get(self, "ignore_http_status_code")

    @ignore_http_status_code.setter
    def ignore_http_status_code(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ignore_http_status_code", value)

    @property
    @pulumi.getter(name="sSLCertRemainingLifetimeCheck")
    def s_sl_cert_remaining_lifetime_check(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
        """
        return pulumi.get(self, "s_sl_cert_remaining_lifetime_check")

    @s_sl_cert_remaining_lifetime_check.setter
    def s_sl_cert_remaining_lifetime_check(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "s_sl_cert_remaining_lifetime_check", value)

    @property
    @pulumi.getter(name="sSLCheck")
    def s_sl_check(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Checks to see if the SSL cert is still valid.
        """
        return pulumi.get(self, "s_sl_check")

    @s_sl_check.setter
    def s_sl_check(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "s_sl_check", value)


if not MYPY:
    class WorkbookResourceIdentityArgsDict(TypedDict):
        """
        Identity used for BYOS
        """
        type: pulumi.Input[Union[builtins.str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    WorkbookResourceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkbookResourceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[builtins.str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Identity used for BYOS
        :param pulumi.Input[Union[builtins.str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[builtins.str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[builtins.str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class WorkbookTemplateGalleryArgsDict(TypedDict):
        """
        Gallery information for a workbook template.
        """
        category: NotRequired[pulumi.Input[builtins.str]]
        """
        Category for the gallery.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the workbook template in the gallery.
        """
        order: NotRequired[pulumi.Input[builtins.int]]
        """
        Order of the template within the gallery.
        """
        resource_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Azure resource type supported by the gallery.
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of workbook supported by the workbook template.
        """
elif False:
    WorkbookTemplateGalleryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkbookTemplateGalleryArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 resource_type: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Gallery information for a workbook template.
        :param pulumi.Input[builtins.str] category: Category for the gallery.
        :param pulumi.Input[builtins.str] name: Name of the workbook template in the gallery.
        :param pulumi.Input[builtins.int] order: Order of the template within the gallery.
        :param pulumi.Input[builtins.str] resource_type: Azure resource type supported by the gallery.
        :param pulumi.Input[builtins.str] type: Type of workbook supported by the workbook template.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Category for the gallery.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the workbook template in the gallery.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Order of the template within the gallery.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Azure resource type supported by the gallery.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of workbook supported by the workbook template.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkbookTemplateLocalizedGalleryArgsDict(TypedDict):
        """
        Localized template data and gallery information.
        """
        galleries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkbookTemplateGalleryArgsDict']]]]
        """
        Workbook galleries supported by the template.
        """
        template_data: NotRequired[Any]
        """
        Valid JSON object containing workbook template payload.
        """
elif False:
    WorkbookTemplateLocalizedGalleryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkbookTemplateLocalizedGalleryArgs:
    def __init__(__self__, *,
                 galleries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkbookTemplateGalleryArgs']]]] = None,
                 template_data: Optional[Any] = None):
        """
        Localized template data and gallery information.
        :param pulumi.Input[Sequence[pulumi.Input['WorkbookTemplateGalleryArgs']]] galleries: Workbook galleries supported by the template.
        :param Any template_data: Valid JSON object containing workbook template payload.
        """
        if galleries is not None:
            pulumi.set(__self__, "galleries", galleries)
        if template_data is not None:
            pulumi.set(__self__, "template_data", template_data)

    @property
    @pulumi.getter
    def galleries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkbookTemplateGalleryArgs']]]]:
        """
        Workbook galleries supported by the template.
        """
        return pulumi.get(self, "galleries")

    @galleries.setter
    def galleries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkbookTemplateGalleryArgs']]]]):
        pulumi.set(self, "galleries", value)

    @property
    @pulumi.getter(name="templateData")
    def template_data(self) -> Optional[Any]:
        """
        Valid JSON object containing workbook template payload.
        """
        return pulumi.get(self, "template_data")

    @template_data.setter
    def template_data(self, value: Optional[Any]):
        pulumi.set(self, "template_data", value)


