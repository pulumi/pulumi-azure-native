# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApplicationInsightsComponentAnalyticsItemPropertiesResponse',
    'ApplicationInsightsComponentDataVolumeCapResponse',
    'ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponse',
    'ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions',
    'HeaderFieldResponse',
    'MyWorkbookManagedIdentityResponse',
    'MyWorkbookUserAssignedIdentitiesResponse',
    'PrivateLinkScopedResourceResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
    'WebTestGeolocationResponse',
    'WebTestPropertiesResponseConfiguration',
    'WebTestPropertiesResponseContentValidation',
    'WebTestPropertiesResponseRequest',
    'WebTestPropertiesResponseValidationRules',
    'WorkbookResourceResponseIdentity',
    'WorkbookTemplateGalleryResponse',
    'WorkbookTemplateLocalizedGalleryResponse',
]

@pulumi.output_type
class ApplicationInsightsComponentAnalyticsItemPropertiesResponse(dict):
    """
    A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionAlias":
            suggest = "function_alias"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationInsightsComponentAnalyticsItemPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationInsightsComponentAnalyticsItemPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationInsightsComponentAnalyticsItemPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_alias: Optional[_builtins.str] = None):
        """
        A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
        :param _builtins.str function_alias: A function alias, used when the type of the item is Function
        """
        if function_alias is not None:
            pulumi.set(__self__, "function_alias", function_alias)

    @_builtins.property
    @pulumi.getter(name="functionAlias")
    def function_alias(self) -> Optional[_builtins.str]:
        """
        A function alias, used when the type of the item is Function
        """
        return pulumi.get(self, "function_alias")


@pulumi.output_type
class ApplicationInsightsComponentDataVolumeCapResponse(dict):
    """
    An Application Insights component daily data volume cap
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxHistoryCap":
            suggest = "max_history_cap"
        elif key == "resetTime":
            suggest = "reset_time"
        elif key == "stopSendNotificationWhenHitCap":
            suggest = "stop_send_notification_when_hit_cap"
        elif key == "stopSendNotificationWhenHitThreshold":
            suggest = "stop_send_notification_when_hit_threshold"
        elif key == "warningThreshold":
            suggest = "warning_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationInsightsComponentDataVolumeCapResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationInsightsComponentDataVolumeCapResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationInsightsComponentDataVolumeCapResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_history_cap: _builtins.float,
                 reset_time: _builtins.int,
                 cap: Optional[_builtins.float] = None,
                 stop_send_notification_when_hit_cap: Optional[_builtins.bool] = None,
                 stop_send_notification_when_hit_threshold: Optional[_builtins.bool] = None,
                 warning_threshold: Optional[_builtins.int] = None):
        """
        An Application Insights component daily data volume cap
        :param _builtins.float max_history_cap: Maximum daily data volume cap that the user can set for this component.
        :param _builtins.int reset_time: Daily data volume cap UTC reset hour.
        :param _builtins.float cap: Daily data volume cap in GB.
        :param _builtins.bool stop_send_notification_when_hit_cap: Do not send a notification email when the daily data volume cap is met.
        :param _builtins.bool stop_send_notification_when_hit_threshold: Reserved, not used for now.
        :param _builtins.int warning_threshold: Reserved, not used for now.
        """
        pulumi.set(__self__, "max_history_cap", max_history_cap)
        pulumi.set(__self__, "reset_time", reset_time)
        if cap is not None:
            pulumi.set(__self__, "cap", cap)
        if stop_send_notification_when_hit_cap is not None:
            pulumi.set(__self__, "stop_send_notification_when_hit_cap", stop_send_notification_when_hit_cap)
        if stop_send_notification_when_hit_threshold is not None:
            pulumi.set(__self__, "stop_send_notification_when_hit_threshold", stop_send_notification_when_hit_threshold)
        if warning_threshold is not None:
            pulumi.set(__self__, "warning_threshold", warning_threshold)

    @_builtins.property
    @pulumi.getter(name="maxHistoryCap")
    def max_history_cap(self) -> _builtins.float:
        """
        Maximum daily data volume cap that the user can set for this component.
        """
        return pulumi.get(self, "max_history_cap")

    @_builtins.property
    @pulumi.getter(name="resetTime")
    def reset_time(self) -> _builtins.int:
        """
        Daily data volume cap UTC reset hour.
        """
        return pulumi.get(self, "reset_time")

    @_builtins.property
    @pulumi.getter
    def cap(self) -> Optional[_builtins.float]:
        """
        Daily data volume cap in GB.
        """
        return pulumi.get(self, "cap")

    @_builtins.property
    @pulumi.getter(name="stopSendNotificationWhenHitCap")
    def stop_send_notification_when_hit_cap(self) -> Optional[_builtins.bool]:
        """
        Do not send a notification email when the daily data volume cap is met.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_cap")

    @_builtins.property
    @pulumi.getter(name="stopSendNotificationWhenHitThreshold")
    def stop_send_notification_when_hit_threshold(self) -> Optional[_builtins.bool]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "stop_send_notification_when_hit_threshold")

    @_builtins.property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> Optional[_builtins.int]:
        """
        Reserved, not used for now.
        """
        return pulumi.get(self, "warning_threshold")


@pulumi.output_type
class ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponse(dict):
    """
    Properties that define a ProactiveDetection configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdatedTime":
            suggest = "last_updated_time"
        elif key == "customEmails":
            suggest = "custom_emails"
        elif key == "ruleDefinitions":
            suggest = "rule_definitions"
        elif key == "sendEmailsToSubscriptionOwners":
            suggest = "send_emails_to_subscription_owners"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_updated_time: _builtins.str,
                 name: _builtins.str,
                 custom_emails: Optional[Sequence[_builtins.str]] = None,
                 enabled: Optional[_builtins.bool] = None,
                 rule_definitions: Optional['outputs.ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions'] = None,
                 send_emails_to_subscription_owners: Optional[_builtins.bool] = None):
        """
        Properties that define a ProactiveDetection configuration.
        :param _builtins.str last_updated_time: The last time this rule was updated
        :param _builtins.str name: The rule name
        :param Sequence[_builtins.str] custom_emails: Custom email addresses for this rule notifications
        :param _builtins.bool enabled: A flag that indicates whether this rule is enabled by the user
        :param 'ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions' rule_definitions: Static definitions of the ProactiveDetection configuration rule (same values for all components).
        :param _builtins.bool send_emails_to_subscription_owners: A flag that indicated whether notifications on this rule should be sent to subscription owners
        """
        pulumi.set(__self__, "last_updated_time", last_updated_time)
        pulumi.set(__self__, "name", name)
        if custom_emails is not None:
            pulumi.set(__self__, "custom_emails", custom_emails)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if rule_definitions is not None:
            pulumi.set(__self__, "rule_definitions", rule_definitions)
        if send_emails_to_subscription_owners is not None:
            pulumi.set(__self__, "send_emails_to_subscription_owners", send_emails_to_subscription_owners)

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> _builtins.str:
        """
        The last time this rule was updated
        """
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The rule name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="customEmails")
    def custom_emails(self) -> Optional[Sequence[_builtins.str]]:
        """
        Custom email addresses for this rule notifications
        """
        return pulumi.get(self, "custom_emails")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        A flag that indicates whether this rule is enabled by the user
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="ruleDefinitions")
    def rule_definitions(self) -> Optional['outputs.ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions']:
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        """
        return pulumi.get(self, "rule_definitions")

    @_builtins.property
    @pulumi.getter(name="sendEmailsToSubscriptionOwners")
    def send_emails_to_subscription_owners(self) -> Optional[_builtins.bool]:
        """
        A flag that indicated whether notifications on this rule should be sent to subscription owners
        """
        return pulumi.get(self, "send_emails_to_subscription_owners")


@pulumi.output_type
class ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions(dict):
    """
    Static definitions of the ProactiveDetection configuration rule (same values for all components).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "helpUrl":
            suggest = "help_url"
        elif key == "isEnabledByDefault":
            suggest = "is_enabled_by_default"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "isInPreview":
            suggest = "is_in_preview"
        elif key == "supportsEmailNotifications":
            suggest = "supports_email_notifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationInsightsComponentProactiveDetectionConfigurationPropertiesResponseRuleDefinitions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 help_url: Optional[_builtins.str] = None,
                 is_enabled_by_default: Optional[_builtins.bool] = None,
                 is_hidden: Optional[_builtins.bool] = None,
                 is_in_preview: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 supports_email_notifications: Optional[_builtins.bool] = None):
        """
        Static definitions of the ProactiveDetection configuration rule (same values for all components).
        :param _builtins.str description: The rule description
        :param _builtins.str display_name: The rule name as it is displayed in UI
        :param _builtins.str help_url: URL which displays additional info about the proactive detection rule
        :param _builtins.bool is_enabled_by_default: A flag indicating whether the rule is enabled by default
        :param _builtins.bool is_hidden: A flag indicating whether the rule is hidden (from the UI)
        :param _builtins.bool is_in_preview: A flag indicating whether the rule is in preview
        :param _builtins.str name: The rule name
        :param _builtins.bool supports_email_notifications: A flag indicating whether email notifications are supported for detections for this rule
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if is_enabled_by_default is not None:
            pulumi.set(__self__, "is_enabled_by_default", is_enabled_by_default)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if is_in_preview is not None:
            pulumi.set(__self__, "is_in_preview", is_in_preview)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if supports_email_notifications is not None:
            pulumi.set(__self__, "supports_email_notifications", supports_email_notifications)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The rule description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The rule name as it is displayed in UI
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[_builtins.str]:
        """
        URL which displays additional info about the proactive detection rule
        """
        return pulumi.get(self, "help_url")

    @_builtins.property
    @pulumi.getter(name="isEnabledByDefault")
    def is_enabled_by_default(self) -> Optional[_builtins.bool]:
        """
        A flag indicating whether the rule is enabled by default
        """
        return pulumi.get(self, "is_enabled_by_default")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[_builtins.bool]:
        """
        A flag indicating whether the rule is hidden (from the UI)
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter(name="isInPreview")
    def is_in_preview(self) -> Optional[_builtins.bool]:
        """
        A flag indicating whether the rule is in preview
        """
        return pulumi.get(self, "is_in_preview")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The rule name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="supportsEmailNotifications")
    def supports_email_notifications(self) -> Optional[_builtins.bool]:
        """
        A flag indicating whether email notifications are supported for detections for this rule
        """
        return pulumi.get(self, "supports_email_notifications")


@pulumi.output_type
class HeaderFieldResponse(dict):
    """
    A header to add to the WebTest.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerFieldName":
            suggest = "header_field_name"
        elif key == "headerFieldValue":
            suggest = "header_field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HeaderFieldResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HeaderFieldResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HeaderFieldResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_field_name: Optional[_builtins.str] = None,
                 header_field_value: Optional[_builtins.str] = None):
        """
        A header to add to the WebTest.
        :param _builtins.str header_field_name: The name of the header.
        :param _builtins.str header_field_value: The value of the header.
        """
        if header_field_name is not None:
            pulumi.set(__self__, "header_field_name", header_field_name)
        if header_field_value is not None:
            pulumi.set(__self__, "header_field_value", header_field_value)

    @_builtins.property
    @pulumi.getter(name="headerFieldName")
    def header_field_name(self) -> Optional[_builtins.str]:
        """
        The name of the header.
        """
        return pulumi.get(self, "header_field_name")

    @_builtins.property
    @pulumi.getter(name="headerFieldValue")
    def header_field_value(self) -> Optional[_builtins.str]:
        """
        The value of the header.
        """
        return pulumi.get(self, "header_field_value")


@pulumi.output_type
class MyWorkbookManagedIdentityResponse(dict):
    """
    Customer Managed Identity
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MyWorkbookManagedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MyWorkbookManagedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MyWorkbookManagedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None,
                 user_assigned_identities: Optional['outputs.MyWorkbookUserAssignedIdentitiesResponse'] = None):
        """
        Customer Managed Identity
        :param _builtins.str type: The identity type.
        :param 'MyWorkbookUserAssignedIdentitiesResponse' user_assigned_identities: Customer Managed Identity
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional['outputs.MyWorkbookUserAssignedIdentitiesResponse']:
        """
        Customer Managed Identity
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class MyWorkbookUserAssignedIdentitiesResponse(dict):
    """
    Customer Managed Identity
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MyWorkbookUserAssignedIdentitiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MyWorkbookUserAssignedIdentitiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MyWorkbookUserAssignedIdentitiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str):
        """
        Customer Managed Identity
        :param _builtins.str principal_id: The principal ID of resource identity.
        :param _builtins.str tenant_id: The tenant ID of resource.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class PrivateLinkScopedResourceResponse(dict):
    """
    The private link scope resource reference.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "scopeId":
            suggest = "scope_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkScopedResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkScopedResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkScopedResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: Optional[_builtins.str] = None,
                 scope_id: Optional[_builtins.str] = None):
        """
        The private link scope resource reference.
        :param _builtins.str resource_id: The full resource Id of the private link scope resource.
        :param _builtins.str scope_id: The private link scope unique Identifier.
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The full resource Id of the private link scope resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[_builtins.str]:
        """
        The private link scope unique Identifier.
        """
        return pulumi.get(self, "scope_id")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 created_by: Optional[_builtins.str] = None,
                 created_by_type: Optional[_builtins.str] = None,
                 last_modified_at: Optional[_builtins.str] = None,
                 last_modified_by: Optional[_builtins.str] = None,
                 last_modified_by_type: Optional[_builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param _builtins.str created_at: The timestamp of resource creation (UTC).
        :param _builtins.str created_by: The identity that created the resource.
        :param _builtins.str created_by_type: The type of identity that created the resource.
        :param _builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param _builtins.str last_modified_by: The identity that last modified the resource.
        :param _builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[_builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @_builtins.property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[_builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 principal_id: _builtins.str):
        """
        User assigned identity properties
        :param _builtins.str client_id: The client ID of the assigned identity.
        :param _builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class WebTestGeolocationResponse(dict):
    """
    Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
    """
    def __init__(__self__, *,
                 location: Optional[_builtins.str] = None):
        """
        Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
        :param _builtins.str location: Location ID for the WebTest to run from.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        """
        Location ID for the WebTest to run from.
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class WebTestPropertiesResponseConfiguration(dict):
    """
    An XML configuration specification for a WebTest.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webTest":
            suggest = "web_test"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebTestPropertiesResponseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebTestPropertiesResponseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebTestPropertiesResponseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 web_test: Optional[_builtins.str] = None):
        """
        An XML configuration specification for a WebTest.
        :param _builtins.str web_test: The XML specification of a WebTest to run against an application.
        """
        if web_test is not None:
            pulumi.set(__self__, "web_test", web_test)

    @_builtins.property
    @pulumi.getter(name="webTest")
    def web_test(self) -> Optional[_builtins.str]:
        """
        The XML specification of a WebTest to run against an application.
        """
        return pulumi.get(self, "web_test")


@pulumi.output_type
class WebTestPropertiesResponseContentValidation(dict):
    """
    The collection of content validation properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentMatch":
            suggest = "content_match"
        elif key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "passIfTextFound":
            suggest = "pass_if_text_found"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebTestPropertiesResponseContentValidation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebTestPropertiesResponseContentValidation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebTestPropertiesResponseContentValidation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_match: Optional[_builtins.str] = None,
                 ignore_case: Optional[_builtins.bool] = None,
                 pass_if_text_found: Optional[_builtins.bool] = None):
        """
        The collection of content validation properties
        :param _builtins.str content_match: Content to look for in the return of the WebTest.  Must not be null or empty.
        :param _builtins.bool ignore_case: When set, this value makes the ContentMatch validation case insensitive.
        :param _builtins.bool pass_if_text_found: When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
        """
        if content_match is not None:
            pulumi.set(__self__, "content_match", content_match)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if pass_if_text_found is not None:
            pulumi.set(__self__, "pass_if_text_found", pass_if_text_found)

    @_builtins.property
    @pulumi.getter(name="contentMatch")
    def content_match(self) -> Optional[_builtins.str]:
        """
        Content to look for in the return of the WebTest.  Must not be null or empty.
        """
        return pulumi.get(self, "content_match")

    @_builtins.property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[_builtins.bool]:
        """
        When set, this value makes the ContentMatch validation case insensitive.
        """
        return pulumi.get(self, "ignore_case")

    @_builtins.property
    @pulumi.getter(name="passIfTextFound")
    def pass_if_text_found(self) -> Optional[_builtins.bool]:
        """
        When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
        """
        return pulumi.get(self, "pass_if_text_found")


@pulumi.output_type
class WebTestPropertiesResponseRequest(dict):
    """
    The collection of request properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followRedirects":
            suggest = "follow_redirects"
        elif key == "httpVerb":
            suggest = "http_verb"
        elif key == "parseDependentRequests":
            suggest = "parse_dependent_requests"
        elif key == "requestBody":
            suggest = "request_body"
        elif key == "requestUrl":
            suggest = "request_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebTestPropertiesResponseRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebTestPropertiesResponseRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebTestPropertiesResponseRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 follow_redirects: Optional[_builtins.bool] = None,
                 headers: Optional[Sequence['outputs.HeaderFieldResponse']] = None,
                 http_verb: Optional[_builtins.str] = None,
                 parse_dependent_requests: Optional[_builtins.bool] = None,
                 request_body: Optional[_builtins.str] = None,
                 request_url: Optional[_builtins.str] = None):
        """
        The collection of request properties
        :param _builtins.bool follow_redirects: Follow redirects for this web test.
        :param Sequence['HeaderFieldResponse'] headers: List of headers and their values to add to the WebTest call.
        :param _builtins.str http_verb: Http verb to use for this web test.
        :param _builtins.bool parse_dependent_requests: Parse Dependent request for this WebTest.
        :param _builtins.str request_body: Base64 encoded string body to send with this web test.
        :param _builtins.str request_url: Url location to test.
        """
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_verb is not None:
            pulumi.set(__self__, "http_verb", http_verb)
        if parse_dependent_requests is not None:
            pulumi.set(__self__, "parse_dependent_requests", parse_dependent_requests)
        if request_body is not None:
            pulumi.set(__self__, "request_body", request_body)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @_builtins.property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[_builtins.bool]:
        """
        Follow redirects for this web test.
        """
        return pulumi.get(self, "follow_redirects")

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.HeaderFieldResponse']]:
        """
        List of headers and their values to add to the WebTest call.
        """
        return pulumi.get(self, "headers")

    @_builtins.property
    @pulumi.getter(name="httpVerb")
    def http_verb(self) -> Optional[_builtins.str]:
        """
        Http verb to use for this web test.
        """
        return pulumi.get(self, "http_verb")

    @_builtins.property
    @pulumi.getter(name="parseDependentRequests")
    def parse_dependent_requests(self) -> Optional[_builtins.bool]:
        """
        Parse Dependent request for this WebTest.
        """
        return pulumi.get(self, "parse_dependent_requests")

    @_builtins.property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[_builtins.str]:
        """
        Base64 encoded string body to send with this web test.
        """
        return pulumi.get(self, "request_body")

    @_builtins.property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[_builtins.str]:
        """
        Url location to test.
        """
        return pulumi.get(self, "request_url")


@pulumi.output_type
class WebTestPropertiesResponseValidationRules(dict):
    """
    The collection of validation rule properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentValidation":
            suggest = "content_validation"
        elif key == "expectedHttpStatusCode":
            suggest = "expected_http_status_code"
        elif key == "ignoreHttpStatusCode":
            suggest = "ignore_http_status_code"
        elif key == "sSLCertRemainingLifetimeCheck":
            suggest = "s_sl_cert_remaining_lifetime_check"
        elif key == "sSLCheck":
            suggest = "s_sl_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebTestPropertiesResponseValidationRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebTestPropertiesResponseValidationRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebTestPropertiesResponseValidationRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_validation: Optional['outputs.WebTestPropertiesResponseContentValidation'] = None,
                 expected_http_status_code: Optional[_builtins.int] = None,
                 ignore_http_status_code: Optional[_builtins.bool] = None,
                 s_sl_cert_remaining_lifetime_check: Optional[_builtins.int] = None,
                 s_sl_check: Optional[_builtins.bool] = None):
        """
        The collection of validation rule properties
        :param 'WebTestPropertiesResponseContentValidation' content_validation: The collection of content validation properties
        :param _builtins.int expected_http_status_code: Validate that the WebTest returns the http status code provided.
        :param _builtins.bool ignore_http_status_code: When set, validation will ignore the status code.
        :param _builtins.int s_sl_cert_remaining_lifetime_check: A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
        :param _builtins.bool s_sl_check: Checks to see if the SSL cert is still valid.
        """
        if content_validation is not None:
            pulumi.set(__self__, "content_validation", content_validation)
        if expected_http_status_code is not None:
            pulumi.set(__self__, "expected_http_status_code", expected_http_status_code)
        if ignore_http_status_code is not None:
            pulumi.set(__self__, "ignore_http_status_code", ignore_http_status_code)
        if s_sl_cert_remaining_lifetime_check is not None:
            pulumi.set(__self__, "s_sl_cert_remaining_lifetime_check", s_sl_cert_remaining_lifetime_check)
        if s_sl_check is not None:
            pulumi.set(__self__, "s_sl_check", s_sl_check)

    @_builtins.property
    @pulumi.getter(name="contentValidation")
    def content_validation(self) -> Optional['outputs.WebTestPropertiesResponseContentValidation']:
        """
        The collection of content validation properties
        """
        return pulumi.get(self, "content_validation")

    @_builtins.property
    @pulumi.getter(name="expectedHttpStatusCode")
    def expected_http_status_code(self) -> Optional[_builtins.int]:
        """
        Validate that the WebTest returns the http status code provided.
        """
        return pulumi.get(self, "expected_http_status_code")

    @_builtins.property
    @pulumi.getter(name="ignoreHttpStatusCode")
    def ignore_http_status_code(self) -> Optional[_builtins.bool]:
        """
        When set, validation will ignore the status code.
        """
        return pulumi.get(self, "ignore_http_status_code")

    @_builtins.property
    @pulumi.getter(name="sSLCertRemainingLifetimeCheck")
    def s_sl_cert_remaining_lifetime_check(self) -> Optional[_builtins.int]:
        """
        A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
        """
        return pulumi.get(self, "s_sl_cert_remaining_lifetime_check")

    @_builtins.property
    @pulumi.getter(name="sSLCheck")
    def s_sl_check(self) -> Optional[_builtins.bool]:
        """
        Checks to see if the SSL cert is still valid.
        """
        return pulumi.get(self, "s_sl_check")


@pulumi.output_type
class WorkbookResourceResponseIdentity(dict):
    """
    Identity used for BYOS
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkbookResourceResponseIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkbookResourceResponseIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkbookResourceResponseIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Identity used for BYOS
        :param _builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param _builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class WorkbookTemplateGalleryResponse(dict):
    """
    Gallery information for a workbook template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkbookTemplateGalleryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkbookTemplateGalleryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkbookTemplateGalleryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 order: Optional[_builtins.int] = None,
                 resource_type: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        Gallery information for a workbook template.
        :param _builtins.str category: Category for the gallery.
        :param _builtins.str name: Name of the workbook template in the gallery.
        :param _builtins.int order: Order of the template within the gallery.
        :param _builtins.str resource_type: Azure resource type supported by the gallery.
        :param _builtins.str type: Type of workbook supported by the workbook template.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        """
        Category for the gallery.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the workbook template in the gallery.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[_builtins.int]:
        """
        Order of the template within the gallery.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        Azure resource type supported by the gallery.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Type of workbook supported by the workbook template.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkbookTemplateLocalizedGalleryResponse(dict):
    """
    Localized template data and gallery information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateData":
            suggest = "template_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkbookTemplateLocalizedGalleryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkbookTemplateLocalizedGalleryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkbookTemplateLocalizedGalleryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 galleries: Optional[Sequence['outputs.WorkbookTemplateGalleryResponse']] = None,
                 template_data: Optional[Any] = None):
        """
        Localized template data and gallery information.
        :param Sequence['WorkbookTemplateGalleryResponse'] galleries: Workbook galleries supported by the template.
        :param Any template_data: Valid JSON object containing workbook template payload.
        """
        if galleries is not None:
            pulumi.set(__self__, "galleries", galleries)
        if template_data is not None:
            pulumi.set(__self__, "template_data", template_data)

    @_builtins.property
    @pulumi.getter
    def galleries(self) -> Optional[Sequence['outputs.WorkbookTemplateGalleryResponse']]:
        """
        Workbook galleries supported by the template.
        """
        return pulumi.get(self, "galleries")

    @_builtins.property
    @pulumi.getter(name="templateData")
    def template_data(self) -> Optional[Any]:
        """
        Valid JSON object containing workbook template payload.
        """
        return pulumi.get(self, "template_data")


