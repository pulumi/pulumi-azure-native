# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .disaster_recovery_config import *
from .get_disaster_recovery_config import *
from .get_migration_config import *
from .get_namespace import *
from .get_namespace_authorization_rule import *
from .get_namespace_ip_filter_rule import *
from .get_namespace_network_rule_set import *
from .get_namespace_virtual_network_rule import *
from .get_private_endpoint_connection import *
from .get_queue import *
from .get_queue_authorization_rule import *
from .get_rule import *
from .get_subscription import *
from .get_topic import *
from .get_topic_authorization_rule import *
from .list_disaster_recovery_config_keys import *
from .list_namespace_keys import *
from .list_queue_keys import *
from .list_topic_keys import *
from .migration_config import *
from .namespace import *
from .namespace_authorization_rule import *
from .namespace_ip_filter_rule import *
from .namespace_network_rule_set import *
from .namespace_virtual_network_rule import *
from .private_endpoint_connection import *
from .queue import *
from .queue_authorization_rule import *
from .rule import *
from .subscription import *
from .topic import *
from .topic_authorization_rule import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    v20140901,
    v20150801,
    v20170401,
    v20180101preview,
    v20210101preview,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:servicebus:DisasterRecoveryConfig":
                return DisasterRecoveryConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:MigrationConfig":
                return MigrationConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:Namespace":
                return Namespace(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:NamespaceAuthorizationRule":
                return NamespaceAuthorizationRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:NamespaceIpFilterRule":
                return NamespaceIpFilterRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:NamespaceNetworkRuleSet":
                return NamespaceNetworkRuleSet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:NamespaceVirtualNetworkRule":
                return NamespaceVirtualNetworkRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:PrivateEndpointConnection":
                return PrivateEndpointConnection(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:Queue":
                return Queue(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:QueueAuthorizationRule":
                return QueueAuthorizationRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:Rule":
                return Rule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:Subscription":
                return Subscription(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:Topic":
                return Topic(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:servicebus:TopicAuthorizationRule":
                return TopicAuthorizationRule(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "servicebus", _module_instance)

_register_module()
