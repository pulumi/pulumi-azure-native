# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ConnectionStateArgs',
    'ConnectionStateArgsDict',
    'EncryptionArgs',
    'EncryptionArgsDict',
    'GeoDataReplicationPropertiesArgs',
    'GeoDataReplicationPropertiesArgsDict',
    'IdentityArgs',
    'IdentityArgsDict',
    'KeyVaultPropertiesArgs',
    'KeyVaultPropertiesArgsDict',
    'NamespaceReplicaLocationArgs',
    'NamespaceReplicaLocationArgsDict',
    'PrivateEndpointConnectionArgs',
    'PrivateEndpointConnectionArgsDict',
    'PrivateEndpointArgs',
    'PrivateEndpointArgsDict',
    'SBSkuArgs',
    'SBSkuArgsDict',
    'UserAssignedIdentityPropertiesArgs',
    'UserAssignedIdentityPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ConnectionStateArgsDict(TypedDict):
        """
        ConnectionState information.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of the connection state.
        """
        status: NotRequired[pulumi.Input[Union[str, 'PrivateLinkConnectionStatus']]]
        """
        Status of the connection.
        """
elif False:
    ConnectionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionStateArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateLinkConnectionStatus']]] = None):
        """
        ConnectionState information.
        :param pulumi.Input[str] description: Description of the connection state.
        :param pulumi.Input[Union[str, 'PrivateLinkConnectionStatus']] status: Status of the connection.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the connection state.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateLinkConnectionStatus']]]:
        """
        Status of the connection.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateLinkConnectionStatus']]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class EncryptionArgsDict(TypedDict):
        """
        Properties to configure Encryption
        """
        key_source: NotRequired[pulumi.Input['KeySource']]
        """
        Enumerates the possible value of keySource for Encryption
        """
        key_vault_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input['KeyVaultPropertiesArgsDict']]]]
        """
        Properties of KeyVault
        """
        require_infrastructure_encryption: NotRequired[pulumi.Input[bool]]
        """
        Enable Infrastructure Encryption (Double Encryption)
        """
elif False:
    EncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EncryptionArgs:
    def __init__(__self__, *,
                 key_source: Optional[pulumi.Input['KeySource']] = None,
                 key_vault_properties: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultPropertiesArgs']]]] = None,
                 require_infrastructure_encryption: Optional[pulumi.Input[bool]] = None):
        """
        Properties to configure Encryption
        :param pulumi.Input['KeySource'] key_source: Enumerates the possible value of keySource for Encryption
        :param pulumi.Input[Sequence[pulumi.Input['KeyVaultPropertiesArgs']]] key_vault_properties: Properties of KeyVault
        :param pulumi.Input[bool] require_infrastructure_encryption: Enable Infrastructure Encryption (Double Encryption)
        """
        if key_source is None:
            key_source = 'Microsoft.KeyVault'
        if key_source is not None:
            pulumi.set(__self__, "key_source", key_source)
        if key_vault_properties is not None:
            pulumi.set(__self__, "key_vault_properties", key_vault_properties)
        if require_infrastructure_encryption is not None:
            pulumi.set(__self__, "require_infrastructure_encryption", require_infrastructure_encryption)

    @property
    @pulumi.getter(name="keySource")
    def key_source(self) -> Optional[pulumi.Input['KeySource']]:
        """
        Enumerates the possible value of keySource for Encryption
        """
        return pulumi.get(self, "key_source")

    @key_source.setter
    def key_source(self, value: Optional[pulumi.Input['KeySource']]):
        pulumi.set(self, "key_source", value)

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultPropertiesArgs']]]]:
        """
        Properties of KeyVault
        """
        return pulumi.get(self, "key_vault_properties")

    @key_vault_properties.setter
    def key_vault_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultPropertiesArgs']]]]):
        pulumi.set(self, "key_vault_properties", value)

    @property
    @pulumi.getter(name="requireInfrastructureEncryption")
    def require_infrastructure_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Infrastructure Encryption (Double Encryption)
        """
        return pulumi.get(self, "require_infrastructure_encryption")

    @require_infrastructure_encryption.setter
    def require_infrastructure_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_infrastructure_encryption", value)


if not MYPY:
    class GeoDataReplicationPropertiesArgsDict(TypedDict):
        """
        GeoDR Replication properties
        """
        locations: NotRequired[pulumi.Input[Sequence[pulumi.Input['NamespaceReplicaLocationArgsDict']]]]
        """
        A list of regions where replicas of the namespace are maintained.
        """
        max_replication_lag_duration_in_seconds: NotRequired[pulumi.Input[int]]
        """
        The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.  When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0 and 5 minutes to 1 day.
        """
elif False:
    GeoDataReplicationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeoDataReplicationPropertiesArgs:
    def __init__(__self__, *,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceReplicaLocationArgs']]]] = None,
                 max_replication_lag_duration_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        GeoDR Replication properties
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceReplicaLocationArgs']]] locations: A list of regions where replicas of the namespace are maintained.
        :param pulumi.Input[int] max_replication_lag_duration_in_seconds: The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.  When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0 and 5 minutes to 1 day.
        """
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if max_replication_lag_duration_in_seconds is not None:
            pulumi.set(__self__, "max_replication_lag_duration_in_seconds", max_replication_lag_duration_in_seconds)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceReplicaLocationArgs']]]]:
        """
        A list of regions where replicas of the namespace are maintained.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceReplicaLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="maxReplicationLagDurationInSeconds")
    def max_replication_lag_duration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.  When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0 and 5 minutes to 1 day.
        """
        return pulumi.get(self, "max_replication_lag_duration_in_seconds")

    @max_replication_lag_duration_in_seconds.setter
    def max_replication_lag_duration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replication_lag_duration_in_seconds", value)


if not MYPY:
    class IdentityArgsDict(TypedDict):
        """
        Properties to configure User Assigned Identities for Bring your Own Keys
        """
        type: NotRequired[pulumi.Input['ManagedServiceIdentityType']]
        """
        Type of managed service identity.
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Properties for User Assigned Identities
        """
elif False:
    IdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ManagedServiceIdentityType']] = None,
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Properties to configure User Assigned Identities for Bring your Own Keys
        :param pulumi.Input['ManagedServiceIdentityType'] type: Type of managed service identity.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: Properties for User Assigned Identities
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ManagedServiceIdentityType']]:
        """
        Type of managed service identity.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Properties for User Assigned Identities
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class KeyVaultPropertiesArgsDict(TypedDict):
        """
        Properties to configure keyVault Properties
        """
        identity: NotRequired[pulumi.Input['UserAssignedIdentityPropertiesArgsDict']]
        key_name: NotRequired[pulumi.Input[str]]
        """
        Name of the Key from KeyVault
        """
        key_vault_uri: NotRequired[pulumi.Input[str]]
        """
        Uri of KeyVault
        """
        key_version: NotRequired[pulumi.Input[str]]
        """
        Version of KeyVault
        """
elif False:
    KeyVaultPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeyVaultPropertiesArgs:
    def __init__(__self__, *,
                 identity: Optional[pulumi.Input['UserAssignedIdentityPropertiesArgs']] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 key_vault_uri: Optional[pulumi.Input[str]] = None,
                 key_version: Optional[pulumi.Input[str]] = None):
        """
        Properties to configure keyVault Properties
        :param pulumi.Input[str] key_name: Name of the Key from KeyVault
        :param pulumi.Input[str] key_vault_uri: Uri of KeyVault
        :param pulumi.Input[str] key_version: Version of KeyVault
        """
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_vault_uri is not None:
            pulumi.set(__self__, "key_vault_uri", key_vault_uri)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['UserAssignedIdentityPropertiesArgs']]:
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['UserAssignedIdentityPropertiesArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Key from KeyVault
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Uri of KeyVault
        """
        return pulumi.get(self, "key_vault_uri")

    @key_vault_uri.setter
    def key_vault_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_uri", value)

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of KeyVault
        """
        return pulumi.get(self, "key_version")

    @key_version.setter
    def key_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_version", value)


if not MYPY:
    class NamespaceReplicaLocationArgsDict(TypedDict):
        """
        Namespace replication properties
        """
        cluster_arm_id: NotRequired[pulumi.Input[str]]
        """
        Optional property that denotes the ARM ID of the Cluster. This is required, if a namespace replica should be placed in a Dedicated Event Hub Cluster
        """
        location_name: NotRequired[pulumi.Input[str]]
        """
        Azure regions where a replica of the namespace is maintained
        """
        role_type: NotRequired[pulumi.Input[Union[str, 'GeoDRRoleType']]]
        """
        GeoDR Role Types
        """
elif False:
    NamespaceReplicaLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceReplicaLocationArgs:
    def __init__(__self__, *,
                 cluster_arm_id: Optional[pulumi.Input[str]] = None,
                 location_name: Optional[pulumi.Input[str]] = None,
                 role_type: Optional[pulumi.Input[Union[str, 'GeoDRRoleType']]] = None):
        """
        Namespace replication properties
        :param pulumi.Input[str] cluster_arm_id: Optional property that denotes the ARM ID of the Cluster. This is required, if a namespace replica should be placed in a Dedicated Event Hub Cluster
        :param pulumi.Input[str] location_name: Azure regions where a replica of the namespace is maintained
        :param pulumi.Input[Union[str, 'GeoDRRoleType']] role_type: GeoDR Role Types
        """
        if cluster_arm_id is not None:
            pulumi.set(__self__, "cluster_arm_id", cluster_arm_id)
        if location_name is not None:
            pulumi.set(__self__, "location_name", location_name)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)

    @property
    @pulumi.getter(name="clusterArmId")
    def cluster_arm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional property that denotes the ARM ID of the Cluster. This is required, if a namespace replica should be placed in a Dedicated Event Hub Cluster
        """
        return pulumi.get(self, "cluster_arm_id")

    @cluster_arm_id.setter
    def cluster_arm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_arm_id", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> Optional[pulumi.Input[str]]:
        """
        Azure regions where a replica of the namespace is maintained
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[Union[str, 'GeoDRRoleType']]]:
        """
        GeoDR Role Types
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[Union[str, 'GeoDRRoleType']]]):
        pulumi.set(self, "role_type", value)


if not MYPY:
    class PrivateEndpointConnectionArgsDict(TypedDict):
        """
        Properties of the PrivateEndpointConnection.
        """
        private_endpoint: NotRequired[pulumi.Input['PrivateEndpointArgsDict']]
        """
        The Private Endpoint resource for this Connection.
        """
        private_link_service_connection_state: NotRequired[pulumi.Input['ConnectionStateArgsDict']]
        """
        Details about the state of the connection.
        """
        provisioning_state: NotRequired[pulumi.Input[Union[str, 'EndPointProvisioningState']]]
        """
        Provisioning state of the Private Endpoint Connection.
        """
elif False:
    PrivateEndpointConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 private_endpoint: Optional[pulumi.Input['PrivateEndpointArgs']] = None,
                 private_link_service_connection_state: Optional[pulumi.Input['ConnectionStateArgs']] = None,
                 provisioning_state: Optional[pulumi.Input[Union[str, 'EndPointProvisioningState']]] = None):
        """
        Properties of the PrivateEndpointConnection.
        :param pulumi.Input['PrivateEndpointArgs'] private_endpoint: The Private Endpoint resource for this Connection.
        :param pulumi.Input['ConnectionStateArgs'] private_link_service_connection_state: Details about the state of the connection.
        :param pulumi.Input[Union[str, 'EndPointProvisioningState']] provisioning_state: Provisioning state of the Private Endpoint Connection.
        """
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_link_service_connection_state is not None:
            pulumi.set(__self__, "private_link_service_connection_state", private_link_service_connection_state)
        if provisioning_state is not None:
            pulumi.set(__self__, "provisioning_state", provisioning_state)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input['PrivateEndpointArgs']]:
        """
        The Private Endpoint resource for this Connection.
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input['PrivateEndpointArgs']]):
        pulumi.set(self, "private_endpoint", value)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> Optional[pulumi.Input['ConnectionStateArgs']]:
        """
        Details about the state of the connection.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, value: Optional[pulumi.Input['ConnectionStateArgs']]):
        pulumi.set(self, "private_link_service_connection_state", value)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[pulumi.Input[Union[str, 'EndPointProvisioningState']]]:
        """
        Provisioning state of the Private Endpoint Connection.
        """
        return pulumi.get(self, "provisioning_state")

    @provisioning_state.setter
    def provisioning_state(self, value: Optional[pulumi.Input[Union[str, 'EndPointProvisioningState']]]):
        pulumi.set(self, "provisioning_state", value)


if not MYPY:
    class PrivateEndpointArgsDict(TypedDict):
        """
        PrivateEndpoint information.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ARM identifier for Private Endpoint.
        """
elif False:
    PrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        PrivateEndpoint information.
        :param pulumi.Input[str] id: The ARM identifier for Private Endpoint.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARM identifier for Private Endpoint.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class SBSkuArgsDict(TypedDict):
        """
        SKU of the namespace.
        """
        name: pulumi.Input['SkuName']
        """
        Name of this SKU.
        """
        capacity: NotRequired[pulumi.Input[int]]
        """
        Messaging units for your service bus premium namespace. Valid capacities are {1, 2, 4, 8, 16} multiples of your properties.premiumMessagingPartitions setting. For example, If properties.premiumMessagingPartitions is 1 then possible capacity values are 1, 2, 4, 8, and 16. If properties.premiumMessagingPartitions is 4 then possible capacity values are 4, 8, 16, 32 and 64
        """
        tier: NotRequired[pulumi.Input['SkuTier']]
        """
        The billing tier of this particular SKU.
        """
elif False:
    SBSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SBSkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input['SkuName'],
                 capacity: Optional[pulumi.Input[int]] = None,
                 tier: Optional[pulumi.Input['SkuTier']] = None):
        """
        SKU of the namespace.
        :param pulumi.Input['SkuName'] name: Name of this SKU.
        :param pulumi.Input[int] capacity: Messaging units for your service bus premium namespace. Valid capacities are {1, 2, 4, 8, 16} multiples of your properties.premiumMessagingPartitions setting. For example, If properties.premiumMessagingPartitions is 1 then possible capacity values are 1, 2, 4, 8, and 16. If properties.premiumMessagingPartitions is 4 then possible capacity values are 4, 8, 16, 32 and 64
        :param pulumi.Input['SkuTier'] tier: The billing tier of this particular SKU.
        """
        pulumi.set(__self__, "name", name)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input['SkuName']:
        """
        Name of this SKU.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input['SkuName']):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Messaging units for your service bus premium namespace. Valid capacities are {1, 2, 4, 8, 16} multiples of your properties.premiumMessagingPartitions setting. For example, If properties.premiumMessagingPartitions is 1 then possible capacity values are 1, 2, 4, 8, and 16. If properties.premiumMessagingPartitions is 4 then possible capacity values are 4, 8, 16, 32 and 64
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input['SkuTier']]:
        """
        The billing tier of this particular SKU.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input['SkuTier']]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class UserAssignedIdentityPropertiesArgsDict(TypedDict):
        user_assigned_identity: NotRequired[pulumi.Input[str]]
        """
        ARM ID of user Identity selected for encryption
        """
elif False:
    UserAssignedIdentityPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserAssignedIdentityPropertiesArgs:
    def __init__(__self__, *,
                 user_assigned_identity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_assigned_identity: ARM ID of user Identity selected for encryption
        """
        if user_assigned_identity is not None:
            pulumi.set(__self__, "user_assigned_identity", user_assigned_identity)

    @property
    @pulumi.getter(name="userAssignedIdentity")
    def user_assigned_identity(self) -> Optional[pulumi.Input[str]]:
        """
        ARM ID of user Identity selected for encryption
        """
        return pulumi.get(self, "user_assigned_identity")

    @user_assigned_identity.setter
    def user_assigned_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity", value)


