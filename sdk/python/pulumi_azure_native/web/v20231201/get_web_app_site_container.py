# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetWebAppSiteContainerResult',
    'AwaitableGetWebAppSiteContainerResult',
    'get_web_app_site_container',
    'get_web_app_site_container_output',
]

@pulumi.output_type
class GetWebAppSiteContainerResult:
    """
    Container of a site
    """
    def __init__(__self__, auth_type=None, created_time=None, environment_variables=None, id=None, image=None, is_main=None, kind=None, last_modified_time=None, name=None, password_secret=None, start_up_command=None, target_port=None, type=None, user_managed_identity_client_id=None, user_name=None, volume_mounts=None):
        if auth_type and not isinstance(auth_type, str):
            raise TypeError("Expected argument 'auth_type' to be a str")
        pulumi.set(__self__, "auth_type", auth_type)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if environment_variables and not isinstance(environment_variables, list):
            raise TypeError("Expected argument 'environment_variables' to be a list")
        pulumi.set(__self__, "environment_variables", environment_variables)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if is_main and not isinstance(is_main, bool):
            raise TypeError("Expected argument 'is_main' to be a bool")
        pulumi.set(__self__, "is_main", is_main)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if last_modified_time and not isinstance(last_modified_time, str):
            raise TypeError("Expected argument 'last_modified_time' to be a str")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password_secret and not isinstance(password_secret, str):
            raise TypeError("Expected argument 'password_secret' to be a str")
        pulumi.set(__self__, "password_secret", password_secret)
        if start_up_command and not isinstance(start_up_command, str):
            raise TypeError("Expected argument 'start_up_command' to be a str")
        pulumi.set(__self__, "start_up_command", start_up_command)
        if target_port and not isinstance(target_port, str):
            raise TypeError("Expected argument 'target_port' to be a str")
        pulumi.set(__self__, "target_port", target_port)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_managed_identity_client_id and not isinstance(user_managed_identity_client_id, str):
            raise TypeError("Expected argument 'user_managed_identity_client_id' to be a str")
        pulumi.set(__self__, "user_managed_identity_client_id", user_managed_identity_client_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if volume_mounts and not isinstance(volume_mounts, list):
            raise TypeError("Expected argument 'volume_mounts' to be a list")
        pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        """
        Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        Created Time
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Sequence['outputs.EnvironmentVariableResponse']]:
        """
        List of environment variables
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        Image Name
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="isMain")
    def is_main(self) -> bool:
        """
        <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        """
        return pulumi.get(self, "is_main")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        Last Modified Time
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[str]:
        """
        Password Secret
        """
        return pulumi.get(self, "password_secret")

    @property
    @pulumi.getter(name="startUpCommand")
    def start_up_command(self) -> Optional[str]:
        """
        StartUp Command
        """
        return pulumi.get(self, "start_up_command")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[str]:
        """
        Target Port
        """
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userManagedIdentityClientId")
    def user_managed_identity_client_id(self) -> Optional[str]:
        """
        UserManagedIdentity ClientId
        """
        return pulumi.get(self, "user_managed_identity_client_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User Name
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.VolumeMountResponse']]:
        """
        List of volume mounts
        """
        return pulumi.get(self, "volume_mounts")


class AwaitableGetWebAppSiteContainerResult(GetWebAppSiteContainerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppSiteContainerResult(
            auth_type=self.auth_type,
            created_time=self.created_time,
            environment_variables=self.environment_variables,
            id=self.id,
            image=self.image,
            is_main=self.is_main,
            kind=self.kind,
            last_modified_time=self.last_modified_time,
            name=self.name,
            password_secret=self.password_secret,
            start_up_command=self.start_up_command,
            target_port=self.target_port,
            type=self.type,
            user_managed_identity_client_id=self.user_managed_identity_client_id,
            user_name=self.user_name,
            volume_mounts=self.volume_mounts)


def get_web_app_site_container(container_name: Optional[str] = None,
                               name: Optional[str] = None,
                               resource_group_name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebAppSiteContainerResult:
    """
    Container of a site


    :param str container_name: Site Container Name
    :param str name: Name of the app.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['containerName'] = container_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:web/v20231201:getWebAppSiteContainer', __args__, opts=opts, typ=GetWebAppSiteContainerResult).value

    return AwaitableGetWebAppSiteContainerResult(
        auth_type=pulumi.get(__ret__, 'auth_type'),
        created_time=pulumi.get(__ret__, 'created_time'),
        environment_variables=pulumi.get(__ret__, 'environment_variables'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        is_main=pulumi.get(__ret__, 'is_main'),
        kind=pulumi.get(__ret__, 'kind'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        password_secret=pulumi.get(__ret__, 'password_secret'),
        start_up_command=pulumi.get(__ret__, 'start_up_command'),
        target_port=pulumi.get(__ret__, 'target_port'),
        type=pulumi.get(__ret__, 'type'),
        user_managed_identity_client_id=pulumi.get(__ret__, 'user_managed_identity_client_id'),
        user_name=pulumi.get(__ret__, 'user_name'),
        volume_mounts=pulumi.get(__ret__, 'volume_mounts'))


@_utilities.lift_output_func(get_web_app_site_container)
def get_web_app_site_container_output(container_name: Optional[pulumi.Input[str]] = None,
                                      name: Optional[pulumi.Input[str]] = None,
                                      resource_group_name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWebAppSiteContainerResult]:
    """
    Container of a site


    :param str container_name: Site Container Name
    :param str name: Name of the app.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    ...
