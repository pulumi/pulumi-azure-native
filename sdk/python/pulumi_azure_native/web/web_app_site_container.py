# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WebAppSiteContainerArgs', 'WebAppSiteContainer']

@pulumi.input_type
class WebAppSiteContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 is_main: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input['AuthType']] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 password_secret: Optional[pulumi.Input[str]] = None,
                 start_up_command: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input[str]] = None,
                 user_managed_identity_client_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeMountArgs']]]] = None):
        """
        The set of arguments for constructing a WebAppSiteContainer resource.
        :param pulumi.Input[str] image: Image Name
        :param pulumi.Input[bool] is_main: <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        :param pulumi.Input[str] name: Name of the app.
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input['AuthType'] auth_type: Auth Type
        :param pulumi.Input[str] container_name: Site Container Name
        :param pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]] environment_variables: List of environment variables
        :param pulumi.Input[str] kind: Kind of resource.
        :param pulumi.Input[str] password_secret: Password Secret
        :param pulumi.Input[str] start_up_command: StartUp Command
        :param pulumi.Input[str] target_port: Target Port
        :param pulumi.Input[str] user_managed_identity_client_id: UserManagedIdentity ClientId
        :param pulumi.Input[str] user_name: User Name
        :param pulumi.Input[Sequence[pulumi.Input['VolumeMountArgs']]] volume_mounts: List of volume mounts
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "is_main", is_main)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if password_secret is not None:
            pulumi.set(__self__, "password_secret", password_secret)
        if start_up_command is not None:
            pulumi.set(__self__, "start_up_command", start_up_command)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)
        if user_managed_identity_client_id is not None:
            pulumi.set(__self__, "user_managed_identity_client_id", user_managed_identity_client_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        Image Name
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="isMain")
    def is_main(self) -> pulumi.Input[bool]:
        """
        <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        """
        return pulumi.get(self, "is_main")

    @is_main.setter
    def is_main(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_main", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Name of the resource group to which the resource belongs.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input['AuthType']]:
        """
        Auth Type
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input['AuthType']]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Site Container Name
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]]]:
        """
        List of environment variables
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of resource.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Password Secret
        """
        return pulumi.get(self, "password_secret")

    @password_secret.setter
    def password_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_secret", value)

    @property
    @pulumi.getter(name="startUpCommand")
    def start_up_command(self) -> Optional[pulumi.Input[str]]:
        """
        StartUp Command
        """
        return pulumi.get(self, "start_up_command")

    @start_up_command.setter
    def start_up_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_up_command", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input[str]]:
        """
        Target Port
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_port", value)

    @property
    @pulumi.getter(name="userManagedIdentityClientId")
    def user_managed_identity_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        UserManagedIdentity ClientId
        """
        return pulumi.get(self, "user_managed_identity_client_id")

    @user_managed_identity_client_id.setter
    def user_managed_identity_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_managed_identity_client_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User Name
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeMountArgs']]]]:
        """
        List of volume mounts
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)


class WebAppSiteContainer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input['AuthType']] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EnvironmentVariableArgs']]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 is_main: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_secret: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 start_up_command: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input[str]] = None,
                 user_managed_identity_client_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VolumeMountArgs']]]]] = None,
                 __props__=None):
        """
        Container of a site
        Azure REST API version: 2023-12-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['AuthType'] auth_type: Auth Type
        :param pulumi.Input[str] container_name: Site Container Name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EnvironmentVariableArgs']]]] environment_variables: List of environment variables
        :param pulumi.Input[str] image: Image Name
        :param pulumi.Input[bool] is_main: <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        :param pulumi.Input[str] kind: Kind of resource.
        :param pulumi.Input[str] name: Name of the app.
        :param pulumi.Input[str] password_secret: Password Secret
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[str] start_up_command: StartUp Command
        :param pulumi.Input[str] target_port: Target Port
        :param pulumi.Input[str] user_managed_identity_client_id: UserManagedIdentity ClientId
        :param pulumi.Input[str] user_name: User Name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VolumeMountArgs']]]] volume_mounts: List of volume mounts
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebAppSiteContainerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Container of a site
        Azure REST API version: 2023-12-01.

        :param str resource_name: The name of the resource.
        :param WebAppSiteContainerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebAppSiteContainerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input['AuthType']] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EnvironmentVariableArgs']]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 is_main: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_secret: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 start_up_command: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input[str]] = None,
                 user_managed_identity_client_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VolumeMountArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebAppSiteContainerArgs.__new__(WebAppSiteContainerArgs)

            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["container_name"] = container_name
            __props__.__dict__["environment_variables"] = environment_variables
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            if is_main is None and not opts.urn:
                raise TypeError("Missing required property 'is_main'")
            __props__.__dict__["is_main"] = is_main
            __props__.__dict__["kind"] = kind
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["password_secret"] = password_secret
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["start_up_command"] = start_up_command
            __props__.__dict__["target_port"] = target_port
            __props__.__dict__["user_managed_identity_client_id"] = user_managed_identity_client_id
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["volume_mounts"] = volume_mounts
            __props__.__dict__["created_time"] = None
            __props__.__dict__["last_modified_time"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:web/v20231201:WebAppSiteContainer")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(WebAppSiteContainer, __self__).__init__(
            'azure-native:web:WebAppSiteContainer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WebAppSiteContainer':
        """
        Get an existing WebAppSiteContainer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WebAppSiteContainerArgs.__new__(WebAppSiteContainerArgs)

        __props__.__dict__["auth_type"] = None
        __props__.__dict__["created_time"] = None
        __props__.__dict__["environment_variables"] = None
        __props__.__dict__["image"] = None
        __props__.__dict__["is_main"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["last_modified_time"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["password_secret"] = None
        __props__.__dict__["start_up_command"] = None
        __props__.__dict__["target_port"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["user_managed_identity_client_id"] = None
        __props__.__dict__["user_name"] = None
        __props__.__dict__["volume_mounts"] = None
        return WebAppSiteContainer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[Optional[str]]:
        """
        Auth Type
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Created Time
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Sequence['outputs.EnvironmentVariableResponse']]]:
        """
        List of environment variables
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output[str]:
        """
        Image Name
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="isMain")
    def is_main(self) -> pulumi.Output[bool]:
        """
        <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        """
        return pulumi.get(self, "is_main")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        Kind of resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> pulumi.Output[str]:
        """
        Last Modified Time
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Password Secret
        """
        return pulumi.get(self, "password_secret")

    @property
    @pulumi.getter(name="startUpCommand")
    def start_up_command(self) -> pulumi.Output[Optional[str]]:
        """
        StartUp Command
        """
        return pulumi.get(self, "start_up_command")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Output[Optional[str]]:
        """
        Target Port
        """
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userManagedIdentityClientId")
    def user_managed_identity_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        UserManagedIdentity ClientId
        """
        return pulumi.get(self, "user_managed_identity_client_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[Optional[str]]:
        """
        User Name
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> pulumi.Output[Optional[Sequence['outputs.VolumeMountResponse']]]:
        """
        List of volume mounts
        """
        return pulumi.get(self, "volume_mounts")

