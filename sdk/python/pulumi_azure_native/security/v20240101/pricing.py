# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PricingArgs', 'Pricing']

@pulumi.input_type
class PricingArgs:
    def __init__(__self__, *,
                 pricing_tier: pulumi.Input[Union[str, 'PricingTier']],
                 scope_id: pulumi.Input[str],
                 enforce: Optional[pulumi.Input[Union[str, 'Enforce']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionArgs']]]] = None,
                 pricing_name: Optional[pulumi.Input[str]] = None,
                 sub_plan: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Pricing resource.
        :param pulumi.Input[Union[str, 'PricingTier']] pricing_tier: Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        :param pulumi.Input[str] scope_id: The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
        :param pulumi.Input[Union[str, 'Enforce']] enforce: If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        :param pulumi.Input[Sequence[pulumi.Input['ExtensionArgs']]] extensions: Optional. List of extensions offered under a plan.
        :param pulumi.Input[str] pricing_name: name of the pricing configuration
        :param pulumi.Input[str] sub_plan: The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
        """
        pulumi.set(__self__, "pricing_tier", pricing_tier)
        pulumi.set(__self__, "scope_id", scope_id)
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if pricing_name is not None:
            pulumi.set(__self__, "pricing_name", pricing_name)
        if sub_plan is not None:
            pulumi.set(__self__, "sub_plan", sub_plan)

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> pulumi.Input[Union[str, 'PricingTier']]:
        """
        Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        """
        return pulumi.get(self, "pricing_tier")

    @pricing_tier.setter
    def pricing_tier(self, value: pulumi.Input[Union[str, 'PricingTier']]):
        pulumi.set(self, "pricing_tier", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[Union[str, 'Enforce']]]:
        """
        If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        """
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[Union[str, 'Enforce']]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionArgs']]]]:
        """
        Optional. List of extensions offered under a plan.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="pricingName")
    def pricing_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the pricing configuration
        """
        return pulumi.get(self, "pricing_name")

    @pricing_name.setter
    def pricing_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_name", value)

    @property
    @pulumi.getter(name="subPlan")
    def sub_plan(self) -> Optional[pulumi.Input[str]]:
        """
        The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
        """
        return pulumi.get(self, "sub_plan")

    @sub_plan.setter
    def sub_plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_plan", value)


class Pricing(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enforce: Optional[pulumi.Input[Union[str, 'Enforce']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExtensionArgs']]]]] = None,
                 pricing_name: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[Union[str, 'PricingTier']]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 sub_plan: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[str, 'Enforce']] enforce: If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExtensionArgs']]]] extensions: Optional. List of extensions offered under a plan.
        :param pulumi.Input[str] pricing_name: name of the pricing configuration
        :param pulumi.Input[Union[str, 'PricingTier']] pricing_tier: Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        :param pulumi.Input[str] scope_id: The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
        :param pulumi.Input[str] sub_plan: The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PricingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.

        :param str resource_name: The name of the resource.
        :param PricingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PricingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enforce: Optional[pulumi.Input[Union[str, 'Enforce']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExtensionArgs']]]]] = None,
                 pricing_name: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[Union[str, 'PricingTier']]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 sub_plan: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PricingArgs.__new__(PricingArgs)

            __props__.__dict__["enforce"] = enforce
            __props__.__dict__["extensions"] = extensions
            __props__.__dict__["pricing_name"] = pricing_name
            if pricing_tier is None and not opts.urn:
                raise TypeError("Missing required property 'pricing_tier'")
            __props__.__dict__["pricing_tier"] = pricing_tier
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["sub_plan"] = sub_plan
            __props__.__dict__["deprecated"] = None
            __props__.__dict__["enablement_time"] = None
            __props__.__dict__["free_trial_remaining_time"] = None
            __props__.__dict__["inherited"] = None
            __props__.__dict__["inherited_from"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["replaced_by"] = None
            __props__.__dict__["resources_coverage_status"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:security:Pricing")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Pricing, __self__).__init__(
            'azure-native:security/v20240101:Pricing',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Pricing':
        """
        Get an existing Pricing resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PricingArgs.__new__(PricingArgs)

        __props__.__dict__["deprecated"] = None
        __props__.__dict__["enablement_time"] = None
        __props__.__dict__["enforce"] = None
        __props__.__dict__["extensions"] = None
        __props__.__dict__["free_trial_remaining_time"] = None
        __props__.__dict__["inherited"] = None
        __props__.__dict__["inherited_from"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["pricing_tier"] = None
        __props__.__dict__["replaced_by"] = None
        __props__.__dict__["resources_coverage_status"] = None
        __props__.__dict__["sub_plan"] = None
        __props__.__dict__["type"] = None
        return Pricing(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def deprecated(self) -> pulumi.Output[bool]:
        """
        Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter(name="enablementTime")
    def enablement_time(self) -> pulumi.Output[str]:
        """
        Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
        """
        return pulumi.get(self, "enablement_time")

    @property
    @pulumi.getter
    def enforce(self) -> pulumi.Output[Optional[str]]:
        """
        If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Optional[Sequence['outputs.ExtensionResponse']]]:
        """
        Optional. List of extensions offered under a plan.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="freeTrialRemainingTime")
    def free_trial_remaining_time(self) -> pulumi.Output[str]:
        """
        The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
        """
        return pulumi.get(self, "free_trial_remaining_time")

    @property
    @pulumi.getter
    def inherited(self) -> pulumi.Output[str]:
        """
        "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter(name="inheritedFrom")
    def inherited_from(self) -> pulumi.Output[str]:
        """
        The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
        """
        return pulumi.get(self, "inherited_from")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> pulumi.Output[str]:
        """
        Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        """
        return pulumi.get(self, "pricing_tier")

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> pulumi.Output[Sequence[str]]:
        """
        Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
        """
        return pulumi.get(self, "replaced_by")

    @property
    @pulumi.getter(name="resourcesCoverageStatus")
    def resources_coverage_status(self) -> pulumi.Output[str]:
        """
        This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
        """
        return pulumi.get(self, "resources_coverage_status")

    @property
    @pulumi.getter(name="subPlan")
    def sub_plan(self) -> pulumi.Output[Optional[str]]:
        """
        The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
        """
        return pulumi.get(self, "sub_plan")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

