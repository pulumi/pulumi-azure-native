# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPricingResult',
    'AwaitableGetPricingResult',
    'get_pricing',
    'get_pricing_output',
]

@pulumi.output_type
class GetPricingResult:
    """
    Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
    """
    def __init__(__self__, deprecated=None, enablement_time=None, enforce=None, extensions=None, free_trial_remaining_time=None, id=None, inherited=None, inherited_from=None, name=None, pricing_tier=None, replaced_by=None, resources_coverage_status=None, sub_plan=None, type=None):
        if deprecated and not isinstance(deprecated, bool):
            raise TypeError("Expected argument 'deprecated' to be a bool")
        pulumi.set(__self__, "deprecated", deprecated)
        if enablement_time and not isinstance(enablement_time, str):
            raise TypeError("Expected argument 'enablement_time' to be a str")
        pulumi.set(__self__, "enablement_time", enablement_time)
        if enforce and not isinstance(enforce, str):
            raise TypeError("Expected argument 'enforce' to be a str")
        pulumi.set(__self__, "enforce", enforce)
        if extensions and not isinstance(extensions, list):
            raise TypeError("Expected argument 'extensions' to be a list")
        pulumi.set(__self__, "extensions", extensions)
        if free_trial_remaining_time and not isinstance(free_trial_remaining_time, str):
            raise TypeError("Expected argument 'free_trial_remaining_time' to be a str")
        pulumi.set(__self__, "free_trial_remaining_time", free_trial_remaining_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inherited and not isinstance(inherited, str):
            raise TypeError("Expected argument 'inherited' to be a str")
        pulumi.set(__self__, "inherited", inherited)
        if inherited_from and not isinstance(inherited_from, str):
            raise TypeError("Expected argument 'inherited_from' to be a str")
        pulumi.set(__self__, "inherited_from", inherited_from)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pricing_tier and not isinstance(pricing_tier, str):
            raise TypeError("Expected argument 'pricing_tier' to be a str")
        pulumi.set(__self__, "pricing_tier", pricing_tier)
        if replaced_by and not isinstance(replaced_by, list):
            raise TypeError("Expected argument 'replaced_by' to be a list")
        pulumi.set(__self__, "replaced_by", replaced_by)
        if resources_coverage_status and not isinstance(resources_coverage_status, str):
            raise TypeError("Expected argument 'resources_coverage_status' to be a str")
        pulumi.set(__self__, "resources_coverage_status", resources_coverage_status)
        if sub_plan and not isinstance(sub_plan, str):
            raise TypeError("Expected argument 'sub_plan' to be a str")
        pulumi.set(__self__, "sub_plan", sub_plan)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        """
        Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter(name="enablementTime")
    def enablement_time(self) -> str:
        """
        Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
        """
        return pulumi.get(self, "enablement_time")

    @property
    @pulumi.getter
    def enforce(self) -> Optional[str]:
        """
        If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.ExtensionResponse']]:
        """
        Optional. List of extensions offered under a plan.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="freeTrialRemainingTime")
    def free_trial_remaining_time(self) -> str:
        """
        The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
        """
        return pulumi.get(self, "free_trial_remaining_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter(name="inheritedFrom")
    def inherited_from(self) -> str:
        """
        The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
        """
        return pulumi.get(self, "inherited_from")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> str:
        """
        Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        """
        return pulumi.get(self, "pricing_tier")

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> Sequence[str]:
        """
        Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
        """
        return pulumi.get(self, "replaced_by")

    @property
    @pulumi.getter(name="resourcesCoverageStatus")
    def resources_coverage_status(self) -> str:
        """
        This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
        """
        return pulumi.get(self, "resources_coverage_status")

    @property
    @pulumi.getter(name="subPlan")
    def sub_plan(self) -> Optional[str]:
        """
        The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
        """
        return pulumi.get(self, "sub_plan")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetPricingResult(GetPricingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPricingResult(
            deprecated=self.deprecated,
            enablement_time=self.enablement_time,
            enforce=self.enforce,
            extensions=self.extensions,
            free_trial_remaining_time=self.free_trial_remaining_time,
            id=self.id,
            inherited=self.inherited,
            inherited_from=self.inherited_from,
            name=self.name,
            pricing_tier=self.pricing_tier,
            replaced_by=self.replaced_by,
            resources_coverage_status=self.resources_coverage_status,
            sub_plan=self.sub_plan,
            type=self.type)


def get_pricing(pricing_name: Optional[str] = None,
                scope_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPricingResult:
    """
    Get the Defender plans pricing configurations of the selected scope (valid scopes are resource id or a subscription id). At the resource level, supported resource types are 'VirtualMachines, VMSS and ARC Machines'.


    :param str pricing_name: name of the pricing configuration
    :param str scope_id: The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
    """
    __args__ = dict()
    __args__['pricingName'] = pricing_name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:security/v20240101:getPricing', __args__, opts=opts, typ=GetPricingResult).value

    return AwaitableGetPricingResult(
        deprecated=pulumi.get(__ret__, 'deprecated'),
        enablement_time=pulumi.get(__ret__, 'enablement_time'),
        enforce=pulumi.get(__ret__, 'enforce'),
        extensions=pulumi.get(__ret__, 'extensions'),
        free_trial_remaining_time=pulumi.get(__ret__, 'free_trial_remaining_time'),
        id=pulumi.get(__ret__, 'id'),
        inherited=pulumi.get(__ret__, 'inherited'),
        inherited_from=pulumi.get(__ret__, 'inherited_from'),
        name=pulumi.get(__ret__, 'name'),
        pricing_tier=pulumi.get(__ret__, 'pricing_tier'),
        replaced_by=pulumi.get(__ret__, 'replaced_by'),
        resources_coverage_status=pulumi.get(__ret__, 'resources_coverage_status'),
        sub_plan=pulumi.get(__ret__, 'sub_plan'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_pricing)
def get_pricing_output(pricing_name: Optional[pulumi.Input[str]] = None,
                       scope_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPricingResult]:
    """
    Get the Defender plans pricing configurations of the selected scope (valid scopes are resource id or a subscription id). At the resource level, supported resource types are 'VirtualMachines, VMSS and ARC Machines'.


    :param str pricing_name: name of the pricing configuration
    :param str scope_id: The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
    """
    ...
