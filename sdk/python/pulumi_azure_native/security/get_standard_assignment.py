# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStandardAssignmentResult',
    'AwaitableGetStandardAssignmentResult',
    'get_standard_assignment',
    'get_standard_assignment_output',
]

@pulumi.output_type
class GetStandardAssignmentResult:
    """
    Security Assignment on a resource group over a given scope
    """
    def __init__(__self__, assigned_standard=None, attestation_data=None, description=None, display_name=None, effect=None, excluded_scopes=None, exemption_data=None, expires_on=None, id=None, metadata=None, name=None, type=None):
        if assigned_standard and not isinstance(assigned_standard, dict):
            raise TypeError("Expected argument 'assigned_standard' to be a dict")
        pulumi.set(__self__, "assigned_standard", assigned_standard)
        if attestation_data and not isinstance(attestation_data, dict):
            raise TypeError("Expected argument 'attestation_data' to be a dict")
        pulumi.set(__self__, "attestation_data", attestation_data)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if effect and not isinstance(effect, str):
            raise TypeError("Expected argument 'effect' to be a str")
        pulumi.set(__self__, "effect", effect)
        if excluded_scopes and not isinstance(excluded_scopes, list):
            raise TypeError("Expected argument 'excluded_scopes' to be a list")
        pulumi.set(__self__, "excluded_scopes", excluded_scopes)
        if exemption_data and not isinstance(exemption_data, dict):
            raise TypeError("Expected argument 'exemption_data' to be a dict")
        pulumi.set(__self__, "exemption_data", exemption_data)
        if expires_on and not isinstance(expires_on, str):
            raise TypeError("Expected argument 'expires_on' to be a str")
        pulumi.set(__self__, "expires_on", expires_on)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assignedStandard")
    def assigned_standard(self) -> Optional['outputs.AssignedStandardItemResponse']:
        """
        Standard item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_standard")

    @property
    @pulumi.getter(name="attestationData")
    def attestation_data(self) -> Optional['outputs.StandardAssignmentPropertiesResponseAttestationData']:
        """
        Additional data about assignment that has Attest effect
        """
        return pulumi.get(self, "attestation_data")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the standardAssignment
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the standardAssignment
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Expected effect of this assignment (Audit/Exempt/Attest)
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter(name="excludedScopes")
    def excluded_scopes(self) -> Optional[Sequence[str]]:
        """
        Excluded scopes, filter out the descendants of the scope (on management scopes)
        """
        return pulumi.get(self, "excluded_scopes")

    @property
    @pulumi.getter(name="exemptionData")
    def exemption_data(self) -> Optional['outputs.StandardAssignmentPropertiesResponseExemptionData']:
        """
        Additional data about assignment that has Exempt effect
        """
        return pulumi.get(self, "exemption_data")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        """
        Expiration date of this assignment as a full ISO date
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.StandardAssignmentMetadataResponse']:
        """
        The standard assignment metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetStandardAssignmentResult(GetStandardAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStandardAssignmentResult(
            assigned_standard=self.assigned_standard,
            attestation_data=self.attestation_data,
            description=self.description,
            display_name=self.display_name,
            effect=self.effect,
            excluded_scopes=self.excluded_scopes,
            exemption_data=self.exemption_data,
            expires_on=self.expires_on,
            id=self.id,
            metadata=self.metadata,
            name=self.name,
            type=self.type)


def get_standard_assignment(resource_id: Optional[str] = None,
                            standard_assignment_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStandardAssignmentResult:
    """
    This operation retrieves a single standard assignment, given its name and the scope it was created at.
    Azure REST API version: 2024-08-01.


    :param str resource_id: The identifier of the resource.
    :param str standard_assignment_name: The standard assignments assignment key - unique key for the standard assignment
    """
    __args__ = dict()
    __args__['resourceId'] = resource_id
    __args__['standardAssignmentName'] = standard_assignment_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:security:getStandardAssignment', __args__, opts=opts, typ=GetStandardAssignmentResult).value

    return AwaitableGetStandardAssignmentResult(
        assigned_standard=pulumi.get(__ret__, 'assigned_standard'),
        attestation_data=pulumi.get(__ret__, 'attestation_data'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        effect=pulumi.get(__ret__, 'effect'),
        excluded_scopes=pulumi.get(__ret__, 'excluded_scopes'),
        exemption_data=pulumi.get(__ret__, 'exemption_data'),
        expires_on=pulumi.get(__ret__, 'expires_on'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_standard_assignment)
def get_standard_assignment_output(resource_id: Optional[pulumi.Input[str]] = None,
                                   standard_assignment_name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStandardAssignmentResult]:
    """
    This operation retrieves a single standard assignment, given its name and the scope it was created at.
    Azure REST API version: 2024-08-01.


    :param str resource_id: The identifier of the resource.
    :param str standard_assignment_name: The standard assignments assignment key - unique key for the standard assignment
    """
    ...
