# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['StandardAssignmentArgs', 'StandardAssignment']

@pulumi.input_type
class StandardAssignmentArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[str],
                 assigned_standard: Optional[pulumi.Input['AssignedStandardItemArgs']] = None,
                 attestation_data: Optional[pulumi.Input['StandardAssignmentPropertiesAttestationDataArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 effect: Optional[pulumi.Input[Union[str, 'Effect']]] = None,
                 excluded_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exemption_data: Optional[pulumi.Input['StandardAssignmentPropertiesExemptionDataArgs']] = None,
                 expires_on: Optional[pulumi.Input[str]] = None,
                 standard_assignment_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StandardAssignment resource.
        :param pulumi.Input[str] resource_id: The identifier of the resource.
        :param pulumi.Input['AssignedStandardItemArgs'] assigned_standard: Standard item with key as applied to this standard assignment over the given scope
        :param pulumi.Input['StandardAssignmentPropertiesAttestationDataArgs'] attestation_data: Additional data about assignment that has Attest effect
        :param pulumi.Input[str] description: Description of the standardAssignment
        :param pulumi.Input[str] display_name: Display name of the standardAssignment
        :param pulumi.Input[Union[str, 'Effect']] effect: Expected effect of this assignment (Audit/Exempt/Attest)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_scopes: Excluded scopes, filter out the descendants of the scope (on management scopes)
        :param pulumi.Input['StandardAssignmentPropertiesExemptionDataArgs'] exemption_data: Additional data about assignment that has Exempt effect
        :param pulumi.Input[str] expires_on: Expiration date of this assignment as a full ISO date
        :param pulumi.Input[str] standard_assignment_name: The standard assignments assignment key - unique key for the standard assignment
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if assigned_standard is not None:
            pulumi.set(__self__, "assigned_standard", assigned_standard)
        if attestation_data is not None:
            pulumi.set(__self__, "attestation_data", attestation_data)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if excluded_scopes is not None:
            pulumi.set(__self__, "excluded_scopes", excluded_scopes)
        if exemption_data is not None:
            pulumi.set(__self__, "exemption_data", exemption_data)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if standard_assignment_name is not None:
            pulumi.set(__self__, "standard_assignment_name", standard_assignment_name)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="assignedStandard")
    def assigned_standard(self) -> Optional[pulumi.Input['AssignedStandardItemArgs']]:
        """
        Standard item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_standard")

    @assigned_standard.setter
    def assigned_standard(self, value: Optional[pulumi.Input['AssignedStandardItemArgs']]):
        pulumi.set(self, "assigned_standard", value)

    @property
    @pulumi.getter(name="attestationData")
    def attestation_data(self) -> Optional[pulumi.Input['StandardAssignmentPropertiesAttestationDataArgs']]:
        """
        Additional data about assignment that has Attest effect
        """
        return pulumi.get(self, "attestation_data")

    @attestation_data.setter
    def attestation_data(self, value: Optional[pulumi.Input['StandardAssignmentPropertiesAttestationDataArgs']]):
        pulumi.set(self, "attestation_data", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the standardAssignment
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the standardAssignment
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[Union[str, 'Effect']]]:
        """
        Expected effect of this assignment (Audit/Exempt/Attest)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[Union[str, 'Effect']]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter(name="excludedScopes")
    def excluded_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Excluded scopes, filter out the descendants of the scope (on management scopes)
        """
        return pulumi.get(self, "excluded_scopes")

    @excluded_scopes.setter
    def excluded_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_scopes", value)

    @property
    @pulumi.getter(name="exemptionData")
    def exemption_data(self) -> Optional[pulumi.Input['StandardAssignmentPropertiesExemptionDataArgs']]:
        """
        Additional data about assignment that has Exempt effect
        """
        return pulumi.get(self, "exemption_data")

    @exemption_data.setter
    def exemption_data(self, value: Optional[pulumi.Input['StandardAssignmentPropertiesExemptionDataArgs']]):
        pulumi.set(self, "exemption_data", value)

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[str]]:
        """
        Expiration date of this assignment as a full ISO date
        """
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_on", value)

    @property
    @pulumi.getter(name="standardAssignmentName")
    def standard_assignment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The standard assignments assignment key - unique key for the standard assignment
        """
        return pulumi.get(self, "standard_assignment_name")

    @standard_assignment_name.setter
    def standard_assignment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standard_assignment_name", value)


class StandardAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assigned_standard: Optional[pulumi.Input[Union['AssignedStandardItemArgs', 'AssignedStandardItemArgsDict']]] = None,
                 attestation_data: Optional[pulumi.Input[Union['StandardAssignmentPropertiesAttestationDataArgs', 'StandardAssignmentPropertiesAttestationDataArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 effect: Optional[pulumi.Input[Union[str, 'Effect']]] = None,
                 excluded_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exemption_data: Optional[pulumi.Input[Union['StandardAssignmentPropertiesExemptionDataArgs', 'StandardAssignmentPropertiesExemptionDataArgsDict']]] = None,
                 expires_on: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 standard_assignment_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Security Assignment on a resource group over a given scope
        Azure REST API version: 2024-08-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AssignedStandardItemArgs', 'AssignedStandardItemArgsDict']] assigned_standard: Standard item with key as applied to this standard assignment over the given scope
        :param pulumi.Input[Union['StandardAssignmentPropertiesAttestationDataArgs', 'StandardAssignmentPropertiesAttestationDataArgsDict']] attestation_data: Additional data about assignment that has Attest effect
        :param pulumi.Input[str] description: Description of the standardAssignment
        :param pulumi.Input[str] display_name: Display name of the standardAssignment
        :param pulumi.Input[Union[str, 'Effect']] effect: Expected effect of this assignment (Audit/Exempt/Attest)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_scopes: Excluded scopes, filter out the descendants of the scope (on management scopes)
        :param pulumi.Input[Union['StandardAssignmentPropertiesExemptionDataArgs', 'StandardAssignmentPropertiesExemptionDataArgsDict']] exemption_data: Additional data about assignment that has Exempt effect
        :param pulumi.Input[str] expires_on: Expiration date of this assignment as a full ISO date
        :param pulumi.Input[str] resource_id: The identifier of the resource.
        :param pulumi.Input[str] standard_assignment_name: The standard assignments assignment key - unique key for the standard assignment
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StandardAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Security Assignment on a resource group over a given scope
        Azure REST API version: 2024-08-01.

        :param str resource_name: The name of the resource.
        :param StandardAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StandardAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assigned_standard: Optional[pulumi.Input[Union['AssignedStandardItemArgs', 'AssignedStandardItemArgsDict']]] = None,
                 attestation_data: Optional[pulumi.Input[Union['StandardAssignmentPropertiesAttestationDataArgs', 'StandardAssignmentPropertiesAttestationDataArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 effect: Optional[pulumi.Input[Union[str, 'Effect']]] = None,
                 excluded_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exemption_data: Optional[pulumi.Input[Union['StandardAssignmentPropertiesExemptionDataArgs', 'StandardAssignmentPropertiesExemptionDataArgsDict']]] = None,
                 expires_on: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 standard_assignment_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StandardAssignmentArgs.__new__(StandardAssignmentArgs)

            __props__.__dict__["assigned_standard"] = assigned_standard
            __props__.__dict__["attestation_data"] = attestation_data
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["effect"] = effect
            __props__.__dict__["excluded_scopes"] = excluded_scopes
            __props__.__dict__["exemption_data"] = exemption_data
            __props__.__dict__["expires_on"] = expires_on
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["standard_assignment_name"] = standard_assignment_name
            __props__.__dict__["metadata"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:security/v20240801:StandardAssignment")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(StandardAssignment, __self__).__init__(
            'azure-native:security:StandardAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'StandardAssignment':
        """
        Get an existing StandardAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = StandardAssignmentArgs.__new__(StandardAssignmentArgs)

        __props__.__dict__["assigned_standard"] = None
        __props__.__dict__["attestation_data"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["effect"] = None
        __props__.__dict__["excluded_scopes"] = None
        __props__.__dict__["exemption_data"] = None
        __props__.__dict__["expires_on"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["type"] = None
        return StandardAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignedStandard")
    def assigned_standard(self) -> pulumi.Output[Optional['outputs.AssignedStandardItemResponse']]:
        """
        Standard item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_standard")

    @property
    @pulumi.getter(name="attestationData")
    def attestation_data(self) -> pulumi.Output[Optional['outputs.StandardAssignmentPropertiesResponseAttestationData']]:
        """
        Additional data about assignment that has Attest effect
        """
        return pulumi.get(self, "attestation_data")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the standardAssignment
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Display name of the standardAssignment
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Output[Optional[str]]:
        """
        Expected effect of this assignment (Audit/Exempt/Attest)
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter(name="excludedScopes")
    def excluded_scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Excluded scopes, filter out the descendants of the scope (on management scopes)
        """
        return pulumi.get(self, "excluded_scopes")

    @property
    @pulumi.getter(name="exemptionData")
    def exemption_data(self) -> pulumi.Output[Optional['outputs.StandardAssignmentPropertiesResponseExemptionData']]:
        """
        Additional data about assignment that has Exempt effect
        """
        return pulumi.get(self, "exemption_data")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[Optional[str]]:
        """
        Expiration date of this assignment as a full ISO date
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['outputs.StandardAssignmentMetadataResponse']]:
        """
        The standard assignment metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

