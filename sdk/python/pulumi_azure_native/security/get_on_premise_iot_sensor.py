# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOnPremiseIotSensorResult',
    'AwaitableGetOnPremiseIotSensorResult',
    'get_on_premise_iot_sensor',
]

@pulumi.output_type
class GetOnPremiseIotSensorResult:
    """
    On-premise IoT sensor
    """
    def __init__(__self__, id=None, name=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetOnPremiseIotSensorResult(GetOnPremiseIotSensorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOnPremiseIotSensorResult(
            id=self.id,
            name=self.name,
            type=self.type)


def get_on_premise_iot_sensor(on_premise_iot_sensor_name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOnPremiseIotSensorResult:
    """
    On-premise IoT sensor
    API Version: 2020-08-06-preview.


    :param str on_premise_iot_sensor_name: Name of the on-premise IoT sensor
    """
    __args__ = dict()
    __args__['onPremiseIotSensorName'] = on_premise_iot_sensor_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-native:security:getOnPremiseIotSensor', __args__, opts=opts, typ=GetOnPremiseIotSensorResult).value

    return AwaitableGetOnPremiseIotSensorResult(
        id=__ret__.id,
        name=__ret__.name,
        type=__ret__.type)
