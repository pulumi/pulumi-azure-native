# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AgentlessConfigurationArgs',
    'AgentlessConfigurationArgsDict',
    'AuthorizationArgs',
    'AuthorizationArgsDict',
    'DevOpsConfigurationPropertiesArgs',
    'DevOpsConfigurationPropertiesArgsDict',
    'InventoryListArgs',
    'InventoryListArgsDict',
]

MYPY = False

if not MYPY:
    class AgentlessConfigurationArgsDict(TypedDict):
        """
        Details about Agentless configuration.
        """
        agentless_auto_discovery: NotRequired[pulumi.Input[Union[str, 'AutoDiscovery']]]
        """
        AutoDiscovery states.
        """
        agentless_enabled: NotRequired[pulumi.Input[Union[str, 'AgentlessEnablement']]]
        """
        Agentless Enablement states.
        """
        inventory_list: NotRequired[pulumi.Input[Sequence[pulumi.Input['InventoryListArgsDict']]]]
        """
        Gets or sets the inventory list for inclusion or exclusion from Agentless.
        Will be ignored if agentless auto-discovery is enabled.
        """
        inventory_list_type: NotRequired[pulumi.Input[Union[str, 'InventoryListKind']]]
        """
        Types for inventory list.
        """
        scanners: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Gets or sets the scanners for the connector.
        """
elif False:
    AgentlessConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AgentlessConfigurationArgs:
    def __init__(__self__, *,
                 agentless_auto_discovery: Optional[pulumi.Input[Union[str, 'AutoDiscovery']]] = None,
                 agentless_enabled: Optional[pulumi.Input[Union[str, 'AgentlessEnablement']]] = None,
                 inventory_list: Optional[pulumi.Input[Sequence[pulumi.Input['InventoryListArgs']]]] = None,
                 inventory_list_type: Optional[pulumi.Input[Union[str, 'InventoryListKind']]] = None,
                 scanners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Details about Agentless configuration.
        :param pulumi.Input[Union[str, 'AutoDiscovery']] agentless_auto_discovery: AutoDiscovery states.
        :param pulumi.Input[Union[str, 'AgentlessEnablement']] agentless_enabled: Agentless Enablement states.
        :param pulumi.Input[Sequence[pulumi.Input['InventoryListArgs']]] inventory_list: Gets or sets the inventory list for inclusion or exclusion from Agentless.
               Will be ignored if agentless auto-discovery is enabled.
        :param pulumi.Input[Union[str, 'InventoryListKind']] inventory_list_type: Types for inventory list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scanners: Gets or sets the scanners for the connector.
        """
        if agentless_auto_discovery is not None:
            pulumi.set(__self__, "agentless_auto_discovery", agentless_auto_discovery)
        if agentless_enabled is not None:
            pulumi.set(__self__, "agentless_enabled", agentless_enabled)
        if inventory_list is not None:
            pulumi.set(__self__, "inventory_list", inventory_list)
        if inventory_list_type is not None:
            pulumi.set(__self__, "inventory_list_type", inventory_list_type)
        if scanners is not None:
            pulumi.set(__self__, "scanners", scanners)

    @property
    @pulumi.getter(name="agentlessAutoDiscovery")
    def agentless_auto_discovery(self) -> Optional[pulumi.Input[Union[str, 'AutoDiscovery']]]:
        """
        AutoDiscovery states.
        """
        return pulumi.get(self, "agentless_auto_discovery")

    @agentless_auto_discovery.setter
    def agentless_auto_discovery(self, value: Optional[pulumi.Input[Union[str, 'AutoDiscovery']]]):
        pulumi.set(self, "agentless_auto_discovery", value)

    @property
    @pulumi.getter(name="agentlessEnabled")
    def agentless_enabled(self) -> Optional[pulumi.Input[Union[str, 'AgentlessEnablement']]]:
        """
        Agentless Enablement states.
        """
        return pulumi.get(self, "agentless_enabled")

    @agentless_enabled.setter
    def agentless_enabled(self, value: Optional[pulumi.Input[Union[str, 'AgentlessEnablement']]]):
        pulumi.set(self, "agentless_enabled", value)

    @property
    @pulumi.getter(name="inventoryList")
    def inventory_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InventoryListArgs']]]]:
        """
        Gets or sets the inventory list for inclusion or exclusion from Agentless.
        Will be ignored if agentless auto-discovery is enabled.
        """
        return pulumi.get(self, "inventory_list")

    @inventory_list.setter
    def inventory_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InventoryListArgs']]]]):
        pulumi.set(self, "inventory_list", value)

    @property
    @pulumi.getter(name="inventoryListType")
    def inventory_list_type(self) -> Optional[pulumi.Input[Union[str, 'InventoryListKind']]]:
        """
        Types for inventory list.
        """
        return pulumi.get(self, "inventory_list_type")

    @inventory_list_type.setter
    def inventory_list_type(self, value: Optional[pulumi.Input[Union[str, 'InventoryListKind']]]):
        pulumi.set(self, "inventory_list_type", value)

    @property
    @pulumi.getter
    def scanners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Gets or sets the scanners for the connector.
        """
        return pulumi.get(self, "scanners")

    @scanners.setter
    def scanners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scanners", value)


if not MYPY:
    class AuthorizationArgsDict(TypedDict):
        """
        Authorization payload.
        """
        code: NotRequired[pulumi.Input[str]]
        """
        Gets or sets one-time OAuth code to exchange for refresh and access tokens.
        
        Only used during PUT/PATCH operations. The secret is cleared during GET.
        """
elif False:
    AuthorizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthorizationArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        Authorization payload.
        :param pulumi.Input[str] code: Gets or sets one-time OAuth code to exchange for refresh and access tokens.
               
               Only used during PUT/PATCH operations. The secret is cleared during GET.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets one-time OAuth code to exchange for refresh and access tokens.
        
        Only used during PUT/PATCH operations. The secret is cleared during GET.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


if not MYPY:
    class DevOpsConfigurationPropertiesArgsDict(TypedDict):
        """
        DevOps Configuration properties.
        """
        agentless_configuration: NotRequired[pulumi.Input['AgentlessConfigurationArgsDict']]
        """
        Details about Agentless configuration.
        """
        authorization: NotRequired[pulumi.Input['AuthorizationArgsDict']]
        """
        Authorization payload.
        """
        auto_discovery: NotRequired[pulumi.Input[Union[str, 'AutoDiscovery']]]
        """
        AutoDiscovery states.
        """
        top_level_inventory_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of top-level inventory to select when AutoDiscovery is disabled.
        This field is ignored when AutoDiscovery is enabled.
        """
elif False:
    DevOpsConfigurationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DevOpsConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 agentless_configuration: Optional[pulumi.Input['AgentlessConfigurationArgs']] = None,
                 authorization: Optional[pulumi.Input['AuthorizationArgs']] = None,
                 auto_discovery: Optional[pulumi.Input[Union[str, 'AutoDiscovery']]] = None,
                 top_level_inventory_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        DevOps Configuration properties.
        :param pulumi.Input['AgentlessConfigurationArgs'] agentless_configuration: Details about Agentless configuration.
        :param pulumi.Input['AuthorizationArgs'] authorization: Authorization payload.
        :param pulumi.Input[Union[str, 'AutoDiscovery']] auto_discovery: AutoDiscovery states.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] top_level_inventory_list: List of top-level inventory to select when AutoDiscovery is disabled.
               This field is ignored when AutoDiscovery is enabled.
        """
        if agentless_configuration is not None:
            pulumi.set(__self__, "agentless_configuration", agentless_configuration)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if auto_discovery is not None:
            pulumi.set(__self__, "auto_discovery", auto_discovery)
        if top_level_inventory_list is not None:
            pulumi.set(__self__, "top_level_inventory_list", top_level_inventory_list)

    @property
    @pulumi.getter(name="agentlessConfiguration")
    def agentless_configuration(self) -> Optional[pulumi.Input['AgentlessConfigurationArgs']]:
        """
        Details about Agentless configuration.
        """
        return pulumi.get(self, "agentless_configuration")

    @agentless_configuration.setter
    def agentless_configuration(self, value: Optional[pulumi.Input['AgentlessConfigurationArgs']]):
        pulumi.set(self, "agentless_configuration", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['AuthorizationArgs']]:
        """
        Authorization payload.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['AuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="autoDiscovery")
    def auto_discovery(self) -> Optional[pulumi.Input[Union[str, 'AutoDiscovery']]]:
        """
        AutoDiscovery states.
        """
        return pulumi.get(self, "auto_discovery")

    @auto_discovery.setter
    def auto_discovery(self, value: Optional[pulumi.Input[Union[str, 'AutoDiscovery']]]):
        pulumi.set(self, "auto_discovery", value)

    @property
    @pulumi.getter(name="topLevelInventoryList")
    def top_level_inventory_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of top-level inventory to select when AutoDiscovery is disabled.
        This field is ignored when AutoDiscovery is enabled.
        """
        return pulumi.get(self, "top_level_inventory_list")

    @top_level_inventory_list.setter
    def top_level_inventory_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "top_level_inventory_list", value)


if not MYPY:
    class InventoryListArgsDict(TypedDict):
        """
        Model for inventory to be included or excluded from Agentless.
        """
        inventory_kind: NotRequired[pulumi.Input[Union[str, 'InventoryKind']]]
        """
        Types for inventory kind.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Gets or sets the value for inventory type.
        """
elif False:
    InventoryListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InventoryListArgs:
    def __init__(__self__, *,
                 inventory_kind: Optional[pulumi.Input[Union[str, 'InventoryKind']]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Model for inventory to be included or excluded from Agentless.
        :param pulumi.Input[Union[str, 'InventoryKind']] inventory_kind: Types for inventory kind.
        :param pulumi.Input[str] value: Gets or sets the value for inventory type.
        """
        if inventory_kind is not None:
            pulumi.set(__self__, "inventory_kind", inventory_kind)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inventoryKind")
    def inventory_kind(self) -> Optional[pulumi.Input[Union[str, 'InventoryKind']]]:
        """
        Types for inventory kind.
        """
        return pulumi.get(self, "inventory_kind")

    @inventory_kind.setter
    def inventory_kind(self, value: Optional[pulumi.Input[Union[str, 'InventoryKind']]]):
        pulumi.set(self, "inventory_kind", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the value for inventory type.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


