# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['APICollectionByAzureApiManagementServiceArgs', 'APICollectionByAzureApiManagementService']

@pulumi.input_type
class APICollectionByAzureApiManagementServiceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 api_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a APICollectionByAzureApiManagementService resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] service_name: The name of the API Management service.
        :param pulumi.Input[str] api_id: API revision identifier. Must be unique in the API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "service_name", service_name)
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the API Management service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[str]]:
        """
        API revision identifier. Must be unique in the API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_id", value)


class APICollectionByAzureApiManagementService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An API collection as represented by Microsoft Defender for APIs.
        Azure REST API version: 2023-11-15.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_id: API revision identifier. Must be unique in the API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] service_name: The name of the API Management service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: APICollectionByAzureApiManagementServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An API collection as represented by Microsoft Defender for APIs.
        Azure REST API version: 2023-11-15.

        :param str resource_name: The name of the resource.
        :param APICollectionByAzureApiManagementServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(APICollectionByAzureApiManagementServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = APICollectionByAzureApiManagementServiceArgs.__new__(APICollectionByAzureApiManagementServiceArgs)

            __props__.__dict__["api_id"] = api_id
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["base_url"] = None
            __props__.__dict__["discovered_via"] = None
            __props__.__dict__["display_name"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["number_of_api_endpoints"] = None
            __props__.__dict__["number_of_api_endpoints_with_sensitive_data_exposed"] = None
            __props__.__dict__["number_of_external_api_endpoints"] = None
            __props__.__dict__["number_of_inactive_api_endpoints"] = None
            __props__.__dict__["number_of_unauthenticated_api_endpoints"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["sensitivity_label"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:security/v20221120preview:APICollectionByAzureApiManagementService"), pulumi.Alias(type_="azure-native:security/v20231115:APICollectionByAzureApiManagementService")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(APICollectionByAzureApiManagementService, __self__).__init__(
            'azure-native:security:APICollectionByAzureApiManagementService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'APICollectionByAzureApiManagementService':
        """
        Get an existing APICollectionByAzureApiManagementService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = APICollectionByAzureApiManagementServiceArgs.__new__(APICollectionByAzureApiManagementServiceArgs)

        __props__.__dict__["base_url"] = None
        __props__.__dict__["discovered_via"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["number_of_api_endpoints"] = None
        __props__.__dict__["number_of_api_endpoints_with_sensitive_data_exposed"] = None
        __props__.__dict__["number_of_external_api_endpoints"] = None
        __props__.__dict__["number_of_inactive_api_endpoints"] = None
        __props__.__dict__["number_of_unauthenticated_api_endpoints"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["sensitivity_label"] = None
        __props__.__dict__["type"] = None
        return APICollectionByAzureApiManagementService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Output[str]:
        """
        The base URI for this API collection. All endpoints of this API collection extend this base URI.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="discoveredVia")
    def discovered_via(self) -> pulumi.Output[str]:
        """
        The resource Id of the resource from where this API collection was discovered.
        """
        return pulumi.get(self, "discovered_via")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the API collection.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfApiEndpoints")
    def number_of_api_endpoints(self) -> pulumi.Output[float]:
        """
        The number of API endpoints discovered in this API collection.
        """
        return pulumi.get(self, "number_of_api_endpoints")

    @property
    @pulumi.getter(name="numberOfApiEndpointsWithSensitiveDataExposed")
    def number_of_api_endpoints_with_sensitive_data_exposed(self) -> pulumi.Output[float]:
        """
        The number of API endpoints in this API collection which are exposing sensitive data in their requests and/or responses.
        """
        return pulumi.get(self, "number_of_api_endpoints_with_sensitive_data_exposed")

    @property
    @pulumi.getter(name="numberOfExternalApiEndpoints")
    def number_of_external_api_endpoints(self) -> pulumi.Output[float]:
        """
        The number of API endpoints in this API collection for which API traffic from the internet was observed.
        """
        return pulumi.get(self, "number_of_external_api_endpoints")

    @property
    @pulumi.getter(name="numberOfInactiveApiEndpoints")
    def number_of_inactive_api_endpoints(self) -> pulumi.Output[float]:
        """
        The number of API endpoints in this API collection that have not received any API traffic in the last 30 days.
        """
        return pulumi.get(self, "number_of_inactive_api_endpoints")

    @property
    @pulumi.getter(name="numberOfUnauthenticatedApiEndpoints")
    def number_of_unauthenticated_api_endpoints(self) -> pulumi.Output[float]:
        """
        The number of API endpoints in this API collection that are unauthenticated.
        """
        return pulumi.get(self, "number_of_unauthenticated_api_endpoints")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Gets the provisioning state of the API collection.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sensitivityLabel")
    def sensitivity_label(self) -> pulumi.Output[str]:
        """
        The highest priority sensitivity label from Microsoft Purview in this API collection.
        """
        return pulumi.get(self, "sensitivity_label")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

