# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from ._enums import *
from .adaptive_application_control import *
from .alerts_suppression_rule import *
from .assessment import *
from .assessment_metadata_in_subscription import *
from .automation import *
from .connector import *
from .device_security_group import *
from .get_adaptive_application_control import *
from .get_alerts_suppression_rule import *
from .get_assessment import *
from .get_assessment_metadata_in_subscription import *
from .get_automation import *
from .get_connector import *
from .get_device_security_group import *
from .get_iot_defender_setting import *
from .get_iot_security_solution import *
from .get_iot_sensor import *
from .get_iot_site import *
from .get_jit_network_access_policy import *
from .get_on_premise_iot_sensor import *
from .get_security_contact import *
from .get_server_vulnerability_assessment import *
from .get_sql_vulnerability_assessment_baseline_rule import *
from .get_workspace_setting import *
from .iot_defender_setting import *
from .iot_security_solution import *
from .iot_sensor import *
from .iot_site import *
from .jit_network_access_policy import *
from .on_premise_iot_sensor import *
from .security_contact import *
from .server_vulnerability_assessment import *
from .sql_vulnerability_assessment_baseline_rule import *
from .workspace_setting import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    v20150601preview,
    v20170801preview,
    v20190101preview,
    v20190801,
    v20200101,
    v20200101preview,
    v20200701preview,
    v20200806preview,
)

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure-native:security:AdaptiveApplicationControl":
                return AdaptiveApplicationControl(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:AlertsSuppressionRule":
                return AlertsSuppressionRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:Assessment":
                return Assessment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:AssessmentMetadataInSubscription":
                return AssessmentMetadataInSubscription(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:Automation":
                return Automation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:Connector":
                return Connector(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:DeviceSecurityGroup":
                return DeviceSecurityGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:IotDefenderSetting":
                return IotDefenderSetting(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:IotSecuritySolution":
                return IotSecuritySolution(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:IotSensor":
                return IotSensor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:IotSite":
                return IotSite(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:JitNetworkAccessPolicy":
                return JitNetworkAccessPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:OnPremiseIotSensor":
                return OnPremiseIotSensor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:SecurityContact":
                return SecurityContact(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:ServerVulnerabilityAssessment":
                return ServerVulnerabilityAssessment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:SqlVulnerabilityAssessmentBaselineRule":
                return SqlVulnerabilityAssessmentBaselineRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure-native:security:WorkspaceSetting":
                return WorkspaceSetting(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure-native", "security", _module_instance)

_register_module()
