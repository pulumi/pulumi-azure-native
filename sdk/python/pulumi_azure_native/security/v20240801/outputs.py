# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssignedAssessmentItemResponse',
    'AssignedStandardItemResponse',
    'AttestationEvidenceResponse',
    'PartialAssessmentPropertiesResponse',
    'StandardAssignmentMetadataResponse',
    'StandardAssignmentPropertiesResponseAttestationData',
    'StandardAssignmentPropertiesResponseExemptionData',
    'StandardMetadataResponse',
    'SystemDataResponse',
]

@pulumi.output_type
class AssignedAssessmentItemResponse(dict):
    """
    Describe the properties of a security assessment object reference (by key)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assessmentKey":
            suggest = "assessment_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssignedAssessmentItemResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssignedAssessmentItemResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssignedAssessmentItemResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assessment_key: Optional[str] = None):
        """
        Describe the properties of a security assessment object reference (by key)
        :param str assessment_key: Unique key to a security assessment object
        """
        if assessment_key is not None:
            pulumi.set(__self__, "assessment_key", assessment_key)

    @property
    @pulumi.getter(name="assessmentKey")
    def assessment_key(self) -> Optional[str]:
        """
        Unique key to a security assessment object
        """
        return pulumi.get(self, "assessment_key")


@pulumi.output_type
class AssignedStandardItemResponse(dict):
    """
    Describe the properties of a of a standard assignments object reference
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Describe the properties of a of a standard assignments object reference
        :param str id: Full resourceId of the Microsoft.Security/standard object
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Full resourceId of the Microsoft.Security/standard object
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AttestationEvidenceResponse(dict):
    """
    Describe the properties of a assignment attestation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceUrl":
            suggest = "source_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AttestationEvidenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AttestationEvidenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AttestationEvidenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 source_url: Optional[str] = None):
        """
        Describe the properties of a assignment attestation
        :param str description: The description of the evidence
        :param str source_url: The source url of the evidence
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the evidence
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[str]:
        """
        The source url of the evidence
        """
        return pulumi.get(self, "source_url")


@pulumi.output_type
class PartialAssessmentPropertiesResponse(dict):
    """
    Describes properties of an assessment as related to the standard
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assessmentKey":
            suggest = "assessment_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PartialAssessmentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PartialAssessmentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PartialAssessmentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assessment_key: Optional[str] = None):
        """
        Describes properties of an assessment as related to the standard
        :param str assessment_key: The assessment key
        """
        if assessment_key is not None:
            pulumi.set(__self__, "assessment_key", assessment_key)

    @property
    @pulumi.getter(name="assessmentKey")
    def assessment_key(self) -> Optional[str]:
        """
        The assessment key
        """
        return pulumi.get(self, "assessment_key")


@pulumi.output_type
class StandardAssignmentMetadataResponse(dict):
    """
    The standard assignment metadata
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "lastUpdatedBy":
            suggest = "last_updated_by"
        elif key == "lastUpdatedOn":
            suggest = "last_updated_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandardAssignmentMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandardAssignmentMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandardAssignmentMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: str,
                 created_on: str,
                 last_updated_by: str,
                 last_updated_on: str):
        """
        The standard assignment metadata
        :param str created_by: Standard assignment Created by object id (GUID)
        :param str created_on: Standard assignment creation date
        :param str last_updated_by: Standard assignment last updated by object id (GUID)
        :param str last_updated_on: Standard assignment last update date
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        pulumi.set(__self__, "last_updated_on", last_updated_on)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Standard assignment Created by object id (GUID)
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Standard assignment creation date
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        """
        Standard assignment last updated by object id (GUID)
        """
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter(name="lastUpdatedOn")
    def last_updated_on(self) -> str:
        """
        Standard assignment last update date
        """
        return pulumi.get(self, "last_updated_on")


@pulumi.output_type
class StandardAssignmentPropertiesResponseAttestationData(dict):
    """
    Additional data about assignment that has Attest effect
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "complianceDate":
            suggest = "compliance_date"
        elif key == "assignedAssessment":
            suggest = "assigned_assessment"
        elif key == "complianceState":
            suggest = "compliance_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandardAssignmentPropertiesResponseAttestationData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandardAssignmentPropertiesResponseAttestationData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandardAssignmentPropertiesResponseAttestationData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compliance_date: str,
                 assigned_assessment: Optional['outputs.AssignedAssessmentItemResponse'] = None,
                 compliance_state: Optional[str] = None,
                 evidence: Optional[Sequence['outputs.AttestationEvidenceResponse']] = None):
        """
        Additional data about assignment that has Attest effect
        :param str compliance_date: Attestation compliance date
        :param 'AssignedAssessmentItemResponse' assigned_assessment: Component item with key as applied to this standard assignment over the given scope
        :param str compliance_state: Attest category of this assignment
        :param Sequence['AttestationEvidenceResponse'] evidence: Array of links to attestation evidence
        """
        pulumi.set(__self__, "compliance_date", compliance_date)
        if assigned_assessment is not None:
            pulumi.set(__self__, "assigned_assessment", assigned_assessment)
        if compliance_state is not None:
            pulumi.set(__self__, "compliance_state", compliance_state)
        if evidence is not None:
            pulumi.set(__self__, "evidence", evidence)

    @property
    @pulumi.getter(name="complianceDate")
    def compliance_date(self) -> str:
        """
        Attestation compliance date
        """
        return pulumi.get(self, "compliance_date")

    @property
    @pulumi.getter(name="assignedAssessment")
    def assigned_assessment(self) -> Optional['outputs.AssignedAssessmentItemResponse']:
        """
        Component item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_assessment")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> Optional[str]:
        """
        Attest category of this assignment
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter
    def evidence(self) -> Optional[Sequence['outputs.AttestationEvidenceResponse']]:
        """
        Array of links to attestation evidence
        """
        return pulumi.get(self, "evidence")


@pulumi.output_type
class StandardAssignmentPropertiesResponseExemptionData(dict):
    """
    Additional data about assignment that has Exempt effect
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedAssessment":
            suggest = "assigned_assessment"
        elif key == "exemptionCategory":
            suggest = "exemption_category"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandardAssignmentPropertiesResponseExemptionData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandardAssignmentPropertiesResponseExemptionData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandardAssignmentPropertiesResponseExemptionData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_assessment: Optional['outputs.AssignedAssessmentItemResponse'] = None,
                 exemption_category: Optional[str] = None):
        """
        Additional data about assignment that has Exempt effect
        :param 'AssignedAssessmentItemResponse' assigned_assessment: Component item with key as applied to this standard assignment over the given scope
        :param str exemption_category: Exemption category of this assignment
        """
        if assigned_assessment is not None:
            pulumi.set(__self__, "assigned_assessment", assigned_assessment)
        if exemption_category is not None:
            pulumi.set(__self__, "exemption_category", exemption_category)

    @property
    @pulumi.getter(name="assignedAssessment")
    def assigned_assessment(self) -> Optional['outputs.AssignedAssessmentItemResponse']:
        """
        Component item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_assessment")

    @property
    @pulumi.getter(name="exemptionCategory")
    def exemption_category(self) -> Optional[str]:
        """
        Exemption category of this assignment
        """
        return pulumi.get(self, "exemption_category")


@pulumi.output_type
class StandardMetadataResponse(dict):
    """
    The standard metadata
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "lastUpdatedBy":
            suggest = "last_updated_by"
        elif key == "lastUpdatedOn":
            suggest = "last_updated_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandardMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandardMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandardMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: str,
                 created_on: str,
                 last_updated_by: str,
                 last_updated_on: str):
        """
        The standard metadata
        :param str created_by: Standard Created by object id (GUID)
        :param str created_on: Standard creation date
        :param str last_updated_by: Standard last updated by object id (GUID)
        :param str last_updated_on: Standard last update date
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        pulumi.set(__self__, "last_updated_on", last_updated_on)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Standard Created by object id (GUID)
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Standard creation date
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        """
        Standard last updated by object id (GUID)
        """
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter(name="lastUpdatedOn")
    def last_updated_on(self) -> str:
        """
        Standard last update date
        """
        return pulumi.get(self, "last_updated_on")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


