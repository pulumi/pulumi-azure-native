# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetSecurityStandardResult',
    'AwaitableGetSecurityStandardResult',
    'get_security_standard',
    'get_security_standard_output',
]

@pulumi.output_type
class GetSecurityStandardResult:
    """
    Security Standard on a resource
    """
    def __init__(__self__, assessments=None, cloud_providers=None, description=None, display_name=None, id=None, metadata=None, name=None, policy_set_definition_id=None, standard_type=None, type=None):
        if assessments and not isinstance(assessments, list):
            raise TypeError("Expected argument 'assessments' to be a list")
        pulumi.set(__self__, "assessments", assessments)
        if cloud_providers and not isinstance(cloud_providers, list):
            raise TypeError("Expected argument 'cloud_providers' to be a list")
        pulumi.set(__self__, "cloud_providers", cloud_providers)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_set_definition_id and not isinstance(policy_set_definition_id, str):
            raise TypeError("Expected argument 'policy_set_definition_id' to be a str")
        pulumi.set(__self__, "policy_set_definition_id", policy_set_definition_id)
        if standard_type and not isinstance(standard_type, str):
            raise TypeError("Expected argument 'standard_type' to be a str")
        pulumi.set(__self__, "standard_type", standard_type)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def assessments(self) -> Optional[Sequence['outputs.PartialAssessmentPropertiesResponse']]:
        """
        List of assessment keys to apply to standard scope.
        """
        return pulumi.get(self, "assessments")

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> Optional[Sequence[str]]:
        """
        List of all standard supported clouds.
        """
        return pulumi.get(self, "cloud_providers")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the standard
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the standard, equivalent to the standardId
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.StandardMetadataResponse']:
        """
        The security standard metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policySetDefinitionId")
    def policy_set_definition_id(self) -> Optional[str]:
        """
        The policy set definition id associated with the standard.
        """
        return pulumi.get(self, "policy_set_definition_id")

    @property
    @pulumi.getter(name="standardType")
    def standard_type(self) -> str:
        """
        Standard type (Custom or Default or Compliance only currently)
        """
        return pulumi.get(self, "standard_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetSecurityStandardResult(GetSecurityStandardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityStandardResult(
            assessments=self.assessments,
            cloud_providers=self.cloud_providers,
            description=self.description,
            display_name=self.display_name,
            id=self.id,
            metadata=self.metadata,
            name=self.name,
            policy_set_definition_id=self.policy_set_definition_id,
            standard_type=self.standard_type,
            type=self.type)


def get_security_standard(scope: Optional[str] = None,
                          standard_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityStandardResult:
    """
    Get a specific security standard for the requested scope by standardId


    :param str scope: The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
    :param str standard_id: The Security Standard key - unique key for the standard type
    """
    __args__ = dict()
    __args__['scope'] = scope
    __args__['standardId'] = standard_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:security/v20240801:getSecurityStandard', __args__, opts=opts, typ=GetSecurityStandardResult).value

    return AwaitableGetSecurityStandardResult(
        assessments=pulumi.get(__ret__, 'assessments'),
        cloud_providers=pulumi.get(__ret__, 'cloud_providers'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        policy_set_definition_id=pulumi.get(__ret__, 'policy_set_definition_id'),
        standard_type=pulumi.get(__ret__, 'standard_type'),
        type=pulumi.get(__ret__, 'type'))
def get_security_standard_output(scope: Optional[pulumi.Input[str]] = None,
                                 standard_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityStandardResult]:
    """
    Get a specific security standard for the requested scope by standardId


    :param str scope: The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
    :param str standard_id: The Security Standard key - unique key for the standard type
    """
    __args__ = dict()
    __args__['scope'] = scope
    __args__['standardId'] = standard_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:security/v20240801:getSecurityStandard', __args__, opts=opts, typ=GetSecurityStandardResult)
    return __ret__.apply(lambda __response__: GetSecurityStandardResult(
        assessments=pulumi.get(__response__, 'assessments'),
        cloud_providers=pulumi.get(__response__, 'cloud_providers'),
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        id=pulumi.get(__response__, 'id'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        policy_set_definition_id=pulumi.get(__response__, 'policy_set_definition_id'),
        standard_type=pulumi.get(__response__, 'standard_type'),
        type=pulumi.get(__response__, 'type')))
