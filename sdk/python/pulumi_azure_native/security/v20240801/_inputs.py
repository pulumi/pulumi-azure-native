# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AssignedAssessmentItemArgs',
    'AssignedAssessmentItemArgsDict',
    'AssignedStandardItemArgs',
    'AssignedStandardItemArgsDict',
    'AttestationEvidenceArgs',
    'AttestationEvidenceArgsDict',
    'PartialAssessmentPropertiesArgs',
    'PartialAssessmentPropertiesArgsDict',
    'StandardAssignmentPropertiesAttestationDataArgs',
    'StandardAssignmentPropertiesAttestationDataArgsDict',
    'StandardAssignmentPropertiesExemptionDataArgs',
    'StandardAssignmentPropertiesExemptionDataArgsDict',
]

MYPY = False

if not MYPY:
    class AssignedAssessmentItemArgsDict(TypedDict):
        """
        Describe the properties of a security assessment object reference (by key)
        """
        assessment_key: NotRequired[pulumi.Input[str]]
        """
        Unique key to a security assessment object
        """
elif False:
    AssignedAssessmentItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssignedAssessmentItemArgs:
    def __init__(__self__, *,
                 assessment_key: Optional[pulumi.Input[str]] = None):
        """
        Describe the properties of a security assessment object reference (by key)
        :param pulumi.Input[str] assessment_key: Unique key to a security assessment object
        """
        if assessment_key is not None:
            pulumi.set(__self__, "assessment_key", assessment_key)

    @property
    @pulumi.getter(name="assessmentKey")
    def assessment_key(self) -> Optional[pulumi.Input[str]]:
        """
        Unique key to a security assessment object
        """
        return pulumi.get(self, "assessment_key")

    @assessment_key.setter
    def assessment_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assessment_key", value)


if not MYPY:
    class AssignedStandardItemArgsDict(TypedDict):
        """
        Describe the properties of a of a standard assignments object reference
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Full resourceId of the Microsoft.Security/standard object
        """
elif False:
    AssignedStandardItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssignedStandardItemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Describe the properties of a of a standard assignments object reference
        :param pulumi.Input[str] id: Full resourceId of the Microsoft.Security/standard object
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Full resourceId of the Microsoft.Security/standard object
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class AttestationEvidenceArgsDict(TypedDict):
        """
        Describe the properties of a assignment attestation
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the evidence
        """
        source_url: NotRequired[pulumi.Input[str]]
        """
        The source url of the evidence
        """
elif False:
    AttestationEvidenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AttestationEvidenceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 source_url: Optional[pulumi.Input[str]] = None):
        """
        Describe the properties of a assignment attestation
        :param pulumi.Input[str] description: The description of the evidence
        :param pulumi.Input[str] source_url: The source url of the evidence
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the evidence
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[str]]:
        """
        The source url of the evidence
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_url", value)


if not MYPY:
    class PartialAssessmentPropertiesArgsDict(TypedDict):
        """
        Describes properties of an assessment as related to the standard
        """
        assessment_key: NotRequired[pulumi.Input[str]]
        """
        The assessment key
        """
elif False:
    PartialAssessmentPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PartialAssessmentPropertiesArgs:
    def __init__(__self__, *,
                 assessment_key: Optional[pulumi.Input[str]] = None):
        """
        Describes properties of an assessment as related to the standard
        :param pulumi.Input[str] assessment_key: The assessment key
        """
        if assessment_key is not None:
            pulumi.set(__self__, "assessment_key", assessment_key)

    @property
    @pulumi.getter(name="assessmentKey")
    def assessment_key(self) -> Optional[pulumi.Input[str]]:
        """
        The assessment key
        """
        return pulumi.get(self, "assessment_key")

    @assessment_key.setter
    def assessment_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assessment_key", value)


if not MYPY:
    class StandardAssignmentPropertiesAttestationDataArgsDict(TypedDict):
        """
        Additional data about assignment that has Attest effect
        """
        assigned_assessment: NotRequired[pulumi.Input['AssignedAssessmentItemArgsDict']]
        """
        Component item with key as applied to this standard assignment over the given scope
        """
        compliance_state: NotRequired[pulumi.Input[Union[str, 'AttestationComplianceState']]]
        """
        Attest category of this assignment
        """
        evidence: NotRequired[pulumi.Input[Sequence[pulumi.Input['AttestationEvidenceArgsDict']]]]
        """
        Array of links to attestation evidence
        """
elif False:
    StandardAssignmentPropertiesAttestationDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StandardAssignmentPropertiesAttestationDataArgs:
    def __init__(__self__, *,
                 assigned_assessment: Optional[pulumi.Input['AssignedAssessmentItemArgs']] = None,
                 compliance_state: Optional[pulumi.Input[Union[str, 'AttestationComplianceState']]] = None,
                 evidence: Optional[pulumi.Input[Sequence[pulumi.Input['AttestationEvidenceArgs']]]] = None):
        """
        Additional data about assignment that has Attest effect
        :param pulumi.Input['AssignedAssessmentItemArgs'] assigned_assessment: Component item with key as applied to this standard assignment over the given scope
        :param pulumi.Input[Union[str, 'AttestationComplianceState']] compliance_state: Attest category of this assignment
        :param pulumi.Input[Sequence[pulumi.Input['AttestationEvidenceArgs']]] evidence: Array of links to attestation evidence
        """
        if assigned_assessment is not None:
            pulumi.set(__self__, "assigned_assessment", assigned_assessment)
        if compliance_state is not None:
            pulumi.set(__self__, "compliance_state", compliance_state)
        if evidence is not None:
            pulumi.set(__self__, "evidence", evidence)

    @property
    @pulumi.getter(name="assignedAssessment")
    def assigned_assessment(self) -> Optional[pulumi.Input['AssignedAssessmentItemArgs']]:
        """
        Component item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_assessment")

    @assigned_assessment.setter
    def assigned_assessment(self, value: Optional[pulumi.Input['AssignedAssessmentItemArgs']]):
        pulumi.set(self, "assigned_assessment", value)

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> Optional[pulumi.Input[Union[str, 'AttestationComplianceState']]]:
        """
        Attest category of this assignment
        """
        return pulumi.get(self, "compliance_state")

    @compliance_state.setter
    def compliance_state(self, value: Optional[pulumi.Input[Union[str, 'AttestationComplianceState']]]):
        pulumi.set(self, "compliance_state", value)

    @property
    @pulumi.getter
    def evidence(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AttestationEvidenceArgs']]]]:
        """
        Array of links to attestation evidence
        """
        return pulumi.get(self, "evidence")

    @evidence.setter
    def evidence(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AttestationEvidenceArgs']]]]):
        pulumi.set(self, "evidence", value)


if not MYPY:
    class StandardAssignmentPropertiesExemptionDataArgsDict(TypedDict):
        """
        Additional data about assignment that has Exempt effect
        """
        assigned_assessment: NotRequired[pulumi.Input['AssignedAssessmentItemArgsDict']]
        """
        Component item with key as applied to this standard assignment over the given scope
        """
        exemption_category: NotRequired[pulumi.Input[Union[str, 'ExemptionCategory']]]
        """
        Exemption category of this assignment
        """
elif False:
    StandardAssignmentPropertiesExemptionDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StandardAssignmentPropertiesExemptionDataArgs:
    def __init__(__self__, *,
                 assigned_assessment: Optional[pulumi.Input['AssignedAssessmentItemArgs']] = None,
                 exemption_category: Optional[pulumi.Input[Union[str, 'ExemptionCategory']]] = None):
        """
        Additional data about assignment that has Exempt effect
        :param pulumi.Input['AssignedAssessmentItemArgs'] assigned_assessment: Component item with key as applied to this standard assignment over the given scope
        :param pulumi.Input[Union[str, 'ExemptionCategory']] exemption_category: Exemption category of this assignment
        """
        if assigned_assessment is not None:
            pulumi.set(__self__, "assigned_assessment", assigned_assessment)
        if exemption_category is not None:
            pulumi.set(__self__, "exemption_category", exemption_category)

    @property
    @pulumi.getter(name="assignedAssessment")
    def assigned_assessment(self) -> Optional[pulumi.Input['AssignedAssessmentItemArgs']]:
        """
        Component item with key as applied to this standard assignment over the given scope
        """
        return pulumi.get(self, "assigned_assessment")

    @assigned_assessment.setter
    def assigned_assessment(self, value: Optional[pulumi.Input['AssignedAssessmentItemArgs']]):
        pulumi.set(self, "assigned_assessment", value)

    @property
    @pulumi.getter(name="exemptionCategory")
    def exemption_category(self) -> Optional[pulumi.Input[Union[str, 'ExemptionCategory']]]:
        """
        Exemption category of this assignment
        """
        return pulumi.get(self, "exemption_category")

    @exemption_category.setter
    def exemption_category(self, value: Optional[pulumi.Input[Union[str, 'ExemptionCategory']]]):
        pulumi.set(self, "exemption_category", value)


