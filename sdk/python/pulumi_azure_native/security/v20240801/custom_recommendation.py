# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['CustomRecommendationArgs', 'CustomRecommendation']

@pulumi.input_type
class CustomRecommendationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input[str],
                 cloud_providers: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]]] = None,
                 custom_recommendation_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 remediation_description: Optional[pulumi.Input[str]] = None,
                 security_issue: Optional[pulumi.Input[Union[str, 'SecurityIssue']]] = None,
                 severity: Optional[pulumi.Input[Union[str, 'SeverityEnum']]] = None):
        """
        The set of arguments for constructing a CustomRecommendation resource.
        :param pulumi.Input[str] scope: The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]] cloud_providers: List of all standard supported clouds.
        :param pulumi.Input[str] custom_recommendation_name: Name of the Custom Recommendation.
        :param pulumi.Input[str] description: The description to relate to the assessments generated by this Recommendation.
        :param pulumi.Input[str] display_name: The display name of the assessments generated by this Recommendation.
        :param pulumi.Input[str] query: KQL query representing the Recommendation results required.
        :param pulumi.Input[str] remediation_description: The remediation description to relate to the assessments generated by this Recommendation.
        :param pulumi.Input[Union[str, 'SecurityIssue']] security_issue: The severity to relate to the assessments generated by this Recommendation.
        :param pulumi.Input[Union[str, 'SeverityEnum']] severity: The severity to relate to the assessments generated by this Recommendation.
        """
        pulumi.set(__self__, "scope", scope)
        if cloud_providers is not None:
            pulumi.set(__self__, "cloud_providers", cloud_providers)
        if custom_recommendation_name is not None:
            pulumi.set(__self__, "custom_recommendation_name", custom_recommendation_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if remediation_description is not None:
            pulumi.set(__self__, "remediation_description", remediation_description)
        if security_issue is not None:
            pulumi.set(__self__, "security_issue", security_issue)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        """
        The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]]]:
        """
        List of all standard supported clouds.
        """
        return pulumi.get(self, "cloud_providers")

    @cloud_providers.setter
    def cloud_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]]]):
        pulumi.set(self, "cloud_providers", value)

    @property
    @pulumi.getter(name="customRecommendationName")
    def custom_recommendation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Custom Recommendation.
        """
        return pulumi.get(self, "custom_recommendation_name")

    @custom_recommendation_name.setter
    def custom_recommendation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_recommendation_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        KQL query representing the Recommendation results required.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="remediationDescription")
    def remediation_description(self) -> Optional[pulumi.Input[str]]:
        """
        The remediation description to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "remediation_description")

    @remediation_description.setter
    def remediation_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remediation_description", value)

    @property
    @pulumi.getter(name="securityIssue")
    def security_issue(self) -> Optional[pulumi.Input[Union[str, 'SecurityIssue']]]:
        """
        The severity to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "security_issue")

    @security_issue.setter
    def security_issue(self, value: Optional[pulumi.Input[Union[str, 'SecurityIssue']]]):
        pulumi.set(self, "security_issue", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[Union[str, 'SeverityEnum']]]:
        """
        The severity to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[Union[str, 'SeverityEnum']]]):
        pulumi.set(self, "severity", value)


class CustomRecommendation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_providers: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]]] = None,
                 custom_recommendation_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 remediation_description: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 security_issue: Optional[pulumi.Input[Union[str, 'SecurityIssue']]] = None,
                 severity: Optional[pulumi.Input[Union[str, 'SeverityEnum']]] = None,
                 __props__=None):
        """
        Custom Recommendation

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]] cloud_providers: List of all standard supported clouds.
        :param pulumi.Input[str] custom_recommendation_name: Name of the Custom Recommendation.
        :param pulumi.Input[str] description: The description to relate to the assessments generated by this Recommendation.
        :param pulumi.Input[str] display_name: The display name of the assessments generated by this Recommendation.
        :param pulumi.Input[str] query: KQL query representing the Recommendation results required.
        :param pulumi.Input[str] remediation_description: The remediation description to relate to the assessments generated by this Recommendation.
        :param pulumi.Input[str] scope: The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        :param pulumi.Input[Union[str, 'SecurityIssue']] security_issue: The severity to relate to the assessments generated by this Recommendation.
        :param pulumi.Input[Union[str, 'SeverityEnum']] severity: The severity to relate to the assessments generated by this Recommendation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomRecommendationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Custom Recommendation

        :param str resource_name: The name of the resource.
        :param CustomRecommendationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomRecommendationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_providers: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'RecommendationSupportedClouds']]]]] = None,
                 custom_recommendation_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 remediation_description: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 security_issue: Optional[pulumi.Input[Union[str, 'SecurityIssue']]] = None,
                 severity: Optional[pulumi.Input[Union[str, 'SeverityEnum']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomRecommendationArgs.__new__(CustomRecommendationArgs)

            __props__.__dict__["cloud_providers"] = cloud_providers
            __props__.__dict__["custom_recommendation_name"] = custom_recommendation_name
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["query"] = query
            __props__.__dict__["remediation_description"] = remediation_description
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["security_issue"] = security_issue
            __props__.__dict__["severity"] = severity
            __props__.__dict__["assessment_key"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:security:CustomRecommendation")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CustomRecommendation, __self__).__init__(
            'azure-native:security/v20240801:CustomRecommendation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CustomRecommendation':
        """
        Get an existing CustomRecommendation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CustomRecommendationArgs.__new__(CustomRecommendationArgs)

        __props__.__dict__["assessment_key"] = None
        __props__.__dict__["cloud_providers"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["query"] = None
        __props__.__dict__["remediation_description"] = None
        __props__.__dict__["security_issue"] = None
        __props__.__dict__["severity"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return CustomRecommendation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assessmentKey")
    def assessment_key(self) -> pulumi.Output[str]:
        """
        The assessment metadata key used when an assessment is generated for this Recommendation.
        """
        return pulumi.get(self, "assessment_key")

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of all standard supported clouds.
        """
        return pulumi.get(self, "cloud_providers")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        The display name of the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[Optional[str]]:
        """
        KQL query representing the Recommendation results required.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="remediationDescription")
    def remediation_description(self) -> pulumi.Output[Optional[str]]:
        """
        The remediation description to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "remediation_description")

    @property
    @pulumi.getter(name="securityIssue")
    def security_issue(self) -> pulumi.Output[Optional[str]]:
        """
        The severity to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "security_issue")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[Optional[str]]:
        """
        The severity to relate to the assessments generated by this Recommendation.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

