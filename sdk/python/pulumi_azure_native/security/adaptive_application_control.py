# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AdaptiveApplicationControlArgs', 'AdaptiveApplicationControl']

@pulumi.input_type
class AdaptiveApplicationControlArgs:
    def __init__(__self__, *,
                 asc_location: pulumi.Input[str],
                 properties: pulumi.Input['AdaptiveApplicationControlGroupDataArgs'],
                 group_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AdaptiveApplicationControl resource.
        :param pulumi.Input[str] asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations
        :param pulumi.Input['AdaptiveApplicationControlGroupDataArgs'] properties: Represents a machines group and set of rules to be allowed running on a machine
        :param pulumi.Input[str] group_name: Name of an application control machine group
        """
        pulumi.set(__self__, "asc_location", asc_location)
        pulumi.set(__self__, "properties", properties)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)

    @property
    @pulumi.getter(name="ascLocation")
    def asc_location(self) -> pulumi.Input[str]:
        """
        The location where ASC stores the data of the subscription. can be retrieved from Get locations
        """
        return pulumi.get(self, "asc_location")

    @asc_location.setter
    def asc_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "asc_location", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input['AdaptiveApplicationControlGroupDataArgs']:
        """
        Represents a machines group and set of rules to be allowed running on a machine
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['AdaptiveApplicationControlGroupDataArgs']):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an application control machine group
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)


class AdaptiveApplicationControl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asc_location: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['AdaptiveApplicationControlGroupDataArgs']]] = None,
                 __props__=None):
        """
        API Version: 2020-01-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations
        :param pulumi.Input[str] group_name: Name of an application control machine group
        :param pulumi.Input[pulumi.InputType['AdaptiveApplicationControlGroupDataArgs']] properties: Represents a machines group and set of rules to be allowed running on a machine
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdaptiveApplicationControlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        API Version: 2020-01-01.

        :param str resource_name: The name of the resource.
        :param AdaptiveApplicationControlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdaptiveApplicationControlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asc_location: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['AdaptiveApplicationControlGroupDataArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdaptiveApplicationControlArgs.__new__(AdaptiveApplicationControlArgs)

            if asc_location is None and not opts.urn:
                raise TypeError("Missing required property 'asc_location'")
            __props__.__dict__["asc_location"] = asc_location
            __props__.__dict__["group_name"] = group_name
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            __props__.__dict__["location"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:security/v20150601preview:AdaptiveApplicationControl"), pulumi.Alias(type_="azure-native:security/v20200101:AdaptiveApplicationControl")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(AdaptiveApplicationControl, __self__).__init__(
            'azure-native:security:AdaptiveApplicationControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AdaptiveApplicationControl':
        """
        Get an existing AdaptiveApplicationControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AdaptiveApplicationControlArgs.__new__(AdaptiveApplicationControlArgs)

        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["type"] = None
        return AdaptiveApplicationControl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Location where the resource is stored
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.AdaptiveApplicationControlGroupDataResponse']:
        """
        Represents a machines group and set of rules to be allowed running on a machine
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

