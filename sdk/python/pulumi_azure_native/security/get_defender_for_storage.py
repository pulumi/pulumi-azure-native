# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDefenderForStorageResult',
    'AwaitableGetDefenderForStorageResult',
    'get_defender_for_storage',
    'get_defender_for_storage_output',
]

@pulumi.output_type
class GetDefenderForStorageResult:
    """
    The Defender for Storage resource.
    """
    def __init__(__self__, id=None, is_enabled=None, malware_scanning=None, name=None, override_subscription_level_settings=None, sensitive_data_discovery=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if malware_scanning and not isinstance(malware_scanning, dict):
            raise TypeError("Expected argument 'malware_scanning' to be a dict")
        pulumi.set(__self__, "malware_scanning", malware_scanning)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if override_subscription_level_settings and not isinstance(override_subscription_level_settings, bool):
            raise TypeError("Expected argument 'override_subscription_level_settings' to be a bool")
        pulumi.set(__self__, "override_subscription_level_settings", override_subscription_level_settings)
        if sensitive_data_discovery and not isinstance(sensitive_data_discovery, dict):
            raise TypeError("Expected argument 'sensitive_data_discovery' to be a dict")
        pulumi.set(__self__, "sensitive_data_discovery", sensitive_data_discovery)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Indicates whether Defender for Storage is enabled on this storage account.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="malwareScanning")
    def malware_scanning(self) -> Optional['outputs.MalwareScanningPropertiesResponse']:
        """
        Properties of Malware Scanning.
        """
        return pulumi.get(self, "malware_scanning")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideSubscriptionLevelSettings")
    def override_subscription_level_settings(self) -> Optional[bool]:
        """
        Indicates whether the settings defined for this storage account should override the settings defined for the subscription.
        """
        return pulumi.get(self, "override_subscription_level_settings")

    @property
    @pulumi.getter(name="sensitiveDataDiscovery")
    def sensitive_data_discovery(self) -> Optional['outputs.SensitiveDataDiscoveryPropertiesResponse']:
        """
        Properties of Sensitive Data Discovery.
        """
        return pulumi.get(self, "sensitive_data_discovery")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type
        """
        return pulumi.get(self, "type")


class AwaitableGetDefenderForStorageResult(GetDefenderForStorageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDefenderForStorageResult(
            id=self.id,
            is_enabled=self.is_enabled,
            malware_scanning=self.malware_scanning,
            name=self.name,
            override_subscription_level_settings=self.override_subscription_level_settings,
            sensitive_data_discovery=self.sensitive_data_discovery,
            type=self.type)


def get_defender_for_storage(resource_id: Optional[str] = None,
                             setting_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDefenderForStorageResult:
    """
    Gets the Defender for Storage settings for the specified storage account.
    Azure REST API version: 2022-12-01-preview.


    :param str resource_id: The identifier of the resource.
    :param str setting_name: Defender for Storage setting name.
    """
    __args__ = dict()
    __args__['resourceId'] = resource_id
    __args__['settingName'] = setting_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:security:getDefenderForStorage', __args__, opts=opts, typ=GetDefenderForStorageResult).value

    return AwaitableGetDefenderForStorageResult(
        id=pulumi.get(__ret__, 'id'),
        is_enabled=pulumi.get(__ret__, 'is_enabled'),
        malware_scanning=pulumi.get(__ret__, 'malware_scanning'),
        name=pulumi.get(__ret__, 'name'),
        override_subscription_level_settings=pulumi.get(__ret__, 'override_subscription_level_settings'),
        sensitive_data_discovery=pulumi.get(__ret__, 'sensitive_data_discovery'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_defender_for_storage)
def get_defender_for_storage_output(resource_id: Optional[pulumi.Input[str]] = None,
                                    setting_name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDefenderForStorageResult]:
    """
    Gets the Defender for Storage settings for the specified storage account.
    Azure REST API version: 2022-12-01-preview.


    :param str resource_id: The identifier of the resource.
    :param str setting_name: Defender for Storage setting name.
    """
    ...
