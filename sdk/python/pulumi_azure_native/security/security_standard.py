# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['SecurityStandardArgs', 'SecurityStandard']

@pulumi.input_type
class SecurityStandardArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input[str],
                 assessments: Optional[pulumi.Input[Sequence[pulumi.Input['PartialAssessmentPropertiesArgs']]]] = None,
                 cloud_providers: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 policy_set_definition_id: Optional[pulumi.Input[str]] = None,
                 standard_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecurityStandard resource.
        :param pulumi.Input[str] scope: The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        :param pulumi.Input[Sequence[pulumi.Input['PartialAssessmentPropertiesArgs']]] assessments: List of assessment keys to apply to standard scope.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]] cloud_providers: List of all standard supported clouds.
        :param pulumi.Input[str] description: Description of the standard
        :param pulumi.Input[str] display_name: Display name of the standard, equivalent to the standardId
        :param pulumi.Input[str] policy_set_definition_id: The policy set definition id associated with the standard.
        :param pulumi.Input[str] standard_id: The Security Standard key - unique key for the standard type
        """
        pulumi.set(__self__, "scope", scope)
        if assessments is not None:
            pulumi.set(__self__, "assessments", assessments)
        if cloud_providers is not None:
            pulumi.set(__self__, "cloud_providers", cloud_providers)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if policy_set_definition_id is not None:
            pulumi.set(__self__, "policy_set_definition_id", policy_set_definition_id)
        if standard_id is not None:
            pulumi.set(__self__, "standard_id", standard_id)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        """
        The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def assessments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PartialAssessmentPropertiesArgs']]]]:
        """
        List of assessment keys to apply to standard scope.
        """
        return pulumi.get(self, "assessments")

    @assessments.setter
    def assessments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PartialAssessmentPropertiesArgs']]]]):
        pulumi.set(self, "assessments", value)

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]]]:
        """
        List of all standard supported clouds.
        """
        return pulumi.get(self, "cloud_providers")

    @cloud_providers.setter
    def cloud_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]]]):
        pulumi.set(self, "cloud_providers", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the standard
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the standard, equivalent to the standardId
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="policySetDefinitionId")
    def policy_set_definition_id(self) -> Optional[pulumi.Input[str]]:
        """
        The policy set definition id associated with the standard.
        """
        return pulumi.get(self, "policy_set_definition_id")

    @policy_set_definition_id.setter
    def policy_set_definition_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_set_definition_id", value)

    @property
    @pulumi.getter(name="standardId")
    def standard_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Security Standard key - unique key for the standard type
        """
        return pulumi.get(self, "standard_id")

    @standard_id.setter
    def standard_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standard_id", value)


class SecurityStandard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PartialAssessmentPropertiesArgs', 'PartialAssessmentPropertiesArgsDict']]]]] = None,
                 cloud_providers: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 policy_set_definition_id: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 standard_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Security Standard on a resource
        Azure REST API version: 2024-08-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PartialAssessmentPropertiesArgs', 'PartialAssessmentPropertiesArgsDict']]]] assessments: List of assessment keys to apply to standard scope.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]] cloud_providers: List of all standard supported clouds.
        :param pulumi.Input[str] description: Description of the standard
        :param pulumi.Input[str] display_name: Display name of the standard, equivalent to the standardId
        :param pulumi.Input[str] policy_set_definition_id: The policy set definition id associated with the standard.
        :param pulumi.Input[str] scope: The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        :param pulumi.Input[str] standard_id: The Security Standard key - unique key for the standard type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityStandardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Security Standard on a resource
        Azure REST API version: 2024-08-01.

        :param str resource_name: The name of the resource.
        :param SecurityStandardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityStandardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assessments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PartialAssessmentPropertiesArgs', 'PartialAssessmentPropertiesArgsDict']]]]] = None,
                 cloud_providers: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'StandardSupportedCloud']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 policy_set_definition_id: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 standard_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityStandardArgs.__new__(SecurityStandardArgs)

            __props__.__dict__["assessments"] = assessments
            __props__.__dict__["cloud_providers"] = cloud_providers
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["policy_set_definition_id"] = policy_set_definition_id
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["standard_id"] = standard_id
            __props__.__dict__["metadata"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["standard_type"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:security/v20240801:SecurityStandard")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SecurityStandard, __self__).__init__(
            'azure-native:security:SecurityStandard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SecurityStandard':
        """
        Get an existing SecurityStandard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SecurityStandardArgs.__new__(SecurityStandardArgs)

        __props__.__dict__["assessments"] = None
        __props__.__dict__["cloud_providers"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["policy_set_definition_id"] = None
        __props__.__dict__["standard_type"] = None
        __props__.__dict__["type"] = None
        return SecurityStandard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def assessments(self) -> pulumi.Output[Optional[Sequence['outputs.PartialAssessmentPropertiesResponse']]]:
        """
        List of assessment keys to apply to standard scope.
        """
        return pulumi.get(self, "assessments")

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of all standard supported clouds.
        """
        return pulumi.get(self, "cloud_providers")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the standard
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Display name of the standard, equivalent to the standardId
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['outputs.StandardMetadataResponse']]:
        """
        The security standard metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policySetDefinitionId")
    def policy_set_definition_id(self) -> pulumi.Output[Optional[str]]:
        """
        The policy set definition id associated with the standard.
        """
        return pulumi.get(self, "policy_set_definition_id")

    @property
    @pulumi.getter(name="standardType")
    def standard_type(self) -> pulumi.Output[str]:
        """
        Standard type (Custom or Default or Compliance only currently)
        """
        return pulumi.get(self, "standard_type")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

